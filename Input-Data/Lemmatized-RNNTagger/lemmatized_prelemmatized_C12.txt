Programmer
en
Php
Julien
Gaulmin
julien.gaulmin@alcove.fr
version
1.44
Copyright
c
2000
Julien
Gaulmin
julien.gaulmin@alcove.fr
,
Alcôve
Ce
document
peut
être
reproduit
,
distribué
et/ou
modifié
selon
les
termes
de
la
Licence
GNU
de
Documentation
Libre
(
GNU
Free
Documentation
Licence
)
dans
sa
version
1.1
ou
ultérieure
telle
que
publiée
,
en
anglais
,
par
la
Free
Software
Foundation
;
sans
partie
invariante
,
avec
comme
première
de
couverture
(
front
cover
texts
)
les
deux
premières
page
,
et
sans
partie
considérée
comme
quatrième
de
couverture
(
back
cover
texts
)
Une
copie
de
la
licence
est
fournie
en
annexe
et
peut
être
consultée
à
l'
url
:
http
://www.gnu.org/copyleft/fdl.html
Alcôve
Centre
Paris
Pleyel
153
bd
Anatole
France
93200
Saint-Denis
,
France
Tél
.

:
+33
1
49
22
68
00
fax
:
+33
1
49
22
68
01
E-mail
:
alcove@alcove.fr
,
Toile
:
www.alcove.fr
1
Table
du
matières
Chapitre
1
Introduction
au
langage
1.1
La
programmation
web
1.2
Présentation
de
Php
1.3
Installation
et
configuration
de
Php
Chapitre
2
Les
base
du
langage
2.1
Syntaxe
du
langage
2.2
Les
structures
de
contrôle
2.3
Fonctions
2.4
Programmation
orientée
objet
Chapitre
3
Fonctionnalités
essentielles
3.1
Connexions
et
utilisateurs
3.2
Gestion
du
sessions
3.3
Autres
fonctionnalités
Chapitre
4
Utilisation
avancée
3
5
18
29
38
40
78
112
126
138
140
149
169
180
2
4.1
Interopérabilité
avec
des
applicatifs
4.2
Traitement
du
chaînes
de
caractères
4.3
Fonctionnalités
utiles
4.4
Conclusion
182
202
217
254
3
Chapitre
1
Alcôve
-
Programmer
en
Php
Introduction
au
langage
4
Introduction
au
langage
Alcôve
-
Programmer
en
Php
Objectifs
du
chapitre
Principes
de
la
programmation
web
;
Présentation
de
Php
;
Installation
et
configuration
.

5
Section
1
Alcôve
-
Programmer
en
Php
La
programmation
web
6
La
programmation
web
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Rappels
de
HTML
;
Le
web
interactif
;
Notions
de
Cgi
;
Distinction
PHP/CGI
.

7
La
programmation
web
Alcôve
-
Programmer
en
Php
Rappels
de
HTML
h
yper
T
ext
m
arkup
L
anguage
;
Définit
la
structure
logique
de
un
document
web
;
Composé
de
un
ensemble
de
commandes
de
formatage
;
Basé
sur
la
notion
d
’
environnement
possédant
un
début
et
une
fin
->
délimiteurs
:
tags
ou
marqueurs
.

8
La
programmation
web
Alcôve
-
Programmer
en
Php
Les
marqueurs
sont
définis
entre

;
Ex
:
<marqueur>
...
</marqueur>
La
plupart
du
environnements
peuvent
être
imbriqués
selon
des
règles
bien
définies
;
Ex
:
<H1><B>Mon
titre</B></H1>
Il
n'
est
pas
permis
de
faire
chevaucher
du
environnements
.

ex
:
<H1><B>Mon
titre</H1></B>
9
La
programmation
web
Alcôve
-
Programmer
en
Php
Structure
générale
de
une
page
HTML
:
<HTML>
<HEAD>
<TITLE>Mon
titre</TITLE>
<
!

--
me
commentaires
--
>
</HEAD>
<BODY>
<H1>Mon
chapitre</H1>
<P>Mon
paragraphe</P>
<ADDRESS>Mes
coordonnées</ADDRESS>
</BODY>
</HTML>
10
La
programmation
web
Alcôve
-
Programmer
en
Php
Le
web
interactif
Deux
principaux
types
de
interactions
:
à
côté
serveur
(
Server-side
scripting
)
,
–
côté
client
(
Client-side
scripting
)
.

Chacun
du
types
précédents
se
divise
encore
en
sous-catégories
.

11
La
programmation
web
Alcôve
-
Programmer
en
Php
Côté
client
:
–
scripts
embarqués
dans
la
page
HTML
(
HTML-embedded
scripting
)
->
Javascript
...
,
à
applets
->
Java
,
ActiveX
...
,
–
plugins
propriétaires
.

12
La
programmation
web
Alcôve
-
Programmer
en
Php
Côté
serveur
:
–
Cgi
->
Perl
,
C
,
Shell
...
,
–
Interpréteurs
intégrés
au
serveur
HTTP
scripts
embarqués
dans
la
page
HTML
(
HTTPD
modules
,
HTML-embedded
scripting
)
->
Php
,
ASP-VBScript
...
,
scripts
à
la
Cgi
(
CGI-like
)
->
mod_perl/Apache
à
Servlets
->
Java
.

13
La
programmation
web
Alcôve
-
Programmer
en
Php
Www
interactif
Server-side
scripting
Cgi
(
Perl
,
C
,
Shell
...
)
Client-side
scripting
Servlets
(
Java
)
Applets
(
Java
,
ActiveX
)
HTTPD
modules
HTML-embedded
scripting
(
Php
,
Asp-Vbs
)
HTML-embedded
scripting
(
JavaScript
)
CGI-like
(
mod_perl
/Apache
)
14
La
programmation
web
Alcôve
-
Programmer
en
Php
Notions
de
Cgi
C
ommon
G
ateway
I
nterface
;
Interface
de
communication
pour
la
création
de
programmes
capables
de
être
exécutés
par
un
serveur
HTTP
;
Permet
la
création
dynamique
de
page
du
côté
serveur
;
Généralement
utilisé
pour
servir
les
requêtes
en
provenance
de
une
page
de
formulaire
HTML
.

15
La
programmation
web
Alcôve
-
Programmer
en
Php
Principe
de
la
Cgi
:
GET/POST
"
emballage
"
Formulaire
HTML
Browser
APPEL
"
variables
"
RÉSULTAT
RÉPONSE
Programme
externe
HTTP
Serveur
HTTP
Cgi
16
La
programmation
web
Alcôve
-
Programmer
en
Php
if
($want_page==1){
$want_page=0
;
}
Scénario
de
génération
dynamique
de
page
via
la
Cgi
:
à
l'
utilisateur
remplit
un
formulaire
HTML
et
le
valide
,
à
le
navigateur
ouvre
une
connexion
vers
le
serveur
HTTP
et
lui
envoie
la
requête
correspondante
(
nom
du
Cgi
p
paramètres
)
,
à
le
serveur
HTTP
invoque
le
script
Cgi
en
lui
transmettant
les
paramètres
de
la
requête
,
à
le
script
Cgi
génère
une
page
correspondant
au
paramètres
,
à
le
serveur
envoie
la
page
au
navigateur
et
ferme
la
connexion
,
à
le
navigateur
affiche
la
page
.

17
La
programmation
web
Alcôve
-
Programmer
en
Php
Distinction
PHP/CGI
Tous
les
deux
sont
situés
côté
serveur
mais
:
php
:
le
code
Php
est
contenu
dans
les
page
HTML
Ex
:
<
?

php
$username
=
"
toto
"
;
?

à
<HTML><BODY><H1>
Bonjour
monsieur
<
?

php
print
$username
?

à
</H1></BODY></HTML>
Cgi
:
le
code
HTML
est
contenu
dans
le
code
du
Cgi
Ex
:
à
!

/usr/bin/perl
w
$username
=
"
toto
"
;
print
"
Content-Type
:
text/html\n\n
"
;
<HTML><BODY><H1>Bonjour
monsieur
$username</H1></BODY></HTML>
"
;
18
Section
2
Alcôve
-
Programmer
en
Php
Présentation
de
Php
19
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
;
Vue
de
ensemble
du
php
;
L'
histoire
du
langage
;
Ses
avantages
;
Et
ses
inconvénients
.

20
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Vue
de
ensemble
du
php
à
server-side
,
HTML-embedded
scripting
language
Langage
de
script
côté
serveur
;
Embarqué
dans
les
page
HTML
;
Syntaxe
héritée
du
C
et
du
Perl
;
Extensible
(
nombreuses
bibliothèques
)
;
Supporte
pratiquement
tous
les
standards
du
web
;
Logiciel
Open
Source
(
Licence
php
de
type
Bsd
)
.

21
Présentation
de
Php
Alcôve
-
Programmer
en
Php
L'
histoire
du
langage
Créé
par
Rasmus
Lerdorf
en
1994
pour
des
besoins
personnels
(
P
ersonnal
h
ome
p
age
)
;
Première
version
publique
en
1995
sous
le
nom
de
Personnal
Home
Page
Tools
capable
de
gérer
un
livre
de
or
,
un
compteur
de
accès
...
;
22
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Deuxième
version
plus
complète
(
Phpfifi
)
en
1995
avec
gestion
du
formulaires
HTML
et
du
base
mSQL
ainsi
que
un
nouvel
interpréteur
;
Phpfifi
est
utilisé
par
environ
50000
sites
web
en
1997
;
23
Présentation
de
Php
Alcôve
-
Programmer
en
Php
En
1997
,
le
projet
devient
un
travail
de
équipe
et
l'
interpréteur
est
réécrit
par
Zeev
Suraski
et
Andi
Gutmans
pour
donner
la
version
PHP3
;
La
version
3
de
Php
s'
est
rapidement
imposée
pour
atteindre
environ
150000
sites
web
durant
l'
été
1999
(
source
:
Netcraft
)
et
devenir
P
Hp
:
H
ypertext
p
reProcessor
;
24
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Aujourd’hui
le
projet
est
chapeauté
par
Zend
,
une
société
privée
créée
par
Suraskyi
et
Gutmans
,
qui
commercialise
des
logiciels
complémentaires
à
Php
;
La
dernière
version
en
date
est
la
Php4
(
2000
)
.

Elle
possède
un
interpréteur
optimisé
par
Zend
et
s'
ouvre
à
d'
autres
serveurs
HTTP
que
Apache
.

25
Présentation
de
Php
Alcôve
-
Programmer
en
Php
26
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Les
avantages
de
Php
Le
client
n'
a
pas
accès
au
code
source
puisque
celui
-ci
est
interprété
avant
envoi
(
!

=
Javascript
)
;
Le
client
ne
reçoit
que
le
résultat
de
l'
exécution
du
script
;
On
peut
configurer
le
serveur
HTTP
pour
masquer
complètement
la
qualité
dynamique
du
page
;
Le
code
n'
est
pas
alourdi
par
des
commandes
destinées
à
générer
la
page
HTML
(
!

=
Cgi
)
;
27
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Le
langage
possède
de
nombreuses
bibliothèques/modules
pour
:
à
le
calcul
mathématique
,
à
la
création
dynamique
de
image
,
à
la
gestion
de
sessions
,
à
les
connexions
sécurisées
(
SSL
)
,
à
l'
accès
à
la
plupart
du
Sgbd
,
à
l'
accès
au
base
Ldap
...
28
Présentation
de
Php
Alcôve
-
Programmer
en
Php
Les
inconvénients
de
Php
Pas
aussi
rapide
que
mod_perl
ou
certains
Cgi
mais
plus
portable
;
Pas
aussi
simple
que
ASP-VBScript
mais
plus
respectueux
du
standards
web
et
sous
licence
Open
Source
(
->
plus
facilement
extensible
)
;
Pas
de
interactivité
au
niveau
du
client
(
->
on
doit
quand
même
utiliser
du
Javascript
dans
ces
cas
là
)
.

29
Section
3
Alcôve
-
Programmer
en
Php
Installation
et
configuration
de
Php
30
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Installation
de
Php
;
Configuration
via
php3.ini/php.ini
;
Premier
test
;
Ajout
de
nouveaux
modules
.

31
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Installation
Trois
types
de
installation
:
–
module
dynamique
du
serveur
HTTP
(
ex
:
modçphp
pour
Apache
)
,
à
module
statique
du
serveur
HTTP
(
20
%
plus
rapide
que
modçphp
)
qui
nécessite
de
patcher
le
serveur
HTTP
et
de
tout
recompiler
,
–
sous
forme
de
Cgi
(
pour
les
serveurs
HTTP
non
supportés
)
.

32
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Télécharger
des
sources
sur
http
://fr.php.net
(
mirroir
français
du
site
officiel
de
Php
)
;
Installer
les
sources
dans
un
répertoire
différent
de
celui
du
serveur
HTTP
(
ex
:
/usr/local/src/php/
)
avec
la
commande
tar
-zxvf
php-<version>.tar.gz
-C
/usr/local/src/php/
;
Configuration
de
l'
installation
:
–
./setup
(
configuration
interactive
)
,
ou
–
./configure
<options>
(
./configure
--
help
pour
connaître
toutes
les
options
)
.

33
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Compilation
et
installation
:
make
;
su
;
make
install
Association
du
fichiers
contenant
du
code
Php
avec
l'
interpréteur
Php
dans
la
configuration
du
serveur
HTTP
Ex
:
serveur
Apache
(
srm.conf
ou
httpd.conf
)
PHP3
-
AddType
application/x-httpd-php3
.php
Php4
-
AddType
application/x-httpd-php
.php
sous
Debian
,
tout
ceci
est
simplifié
grâce
à
l'
utilitaire
apt-get
(
remplacer
php3
par
php4
pour
Php4
)
:
–
apt-get
install
php3
pour
le
module
dynamique
Apache
,
ou
–
apt-get
install
php3-cgi
pour
le
Cgi
.

34
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Configuration
de
Php
(
php3.ini/php.ini
)
Généralement
dans
/etc/php<version>/apache/
ou
/usr/lib/php<version>/
;
Ce
fichier
(
php3.ini
pour
PHP3
et
php.ini
pour
Php4
)
contrôle
les
principaux
comportements
de
Php
;
Très
clair
et
facilement
configurable
;
Syntaxe
:
à
clef
à
valeur
,
à
clef
=
"
valeur
complexe
"
,
–
;
commentaire
,
–
booléen
->
1
,
On
,
True
,
Yes
/
0
,
Off
,
False
,
No
.

35
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Segmenté
en
parties
:
–
options
du
langage
,
–
ressources
maximales
allouées
à
Php
,
à
gestion
du
erreurs
,
à
gestion
du
données
HTTP
,
–
fichiers
et
répertoires
,
–
extensions
dynamiques
(
modules
)
,
à
configuration
du
modules
.

Pour
que
Php
prenne
les
modifications
en
compte
il
faut
relancer
le
serveur
HTTP
(
ex
:
serveur
Apache
->
apachectl
restart
)
.

36
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Premier
test
Créer
le
fichier
test.php
:
<
?

php
phpinfo()
;
?

à
Placer
ce
fichier
à
la
racine
du
serveur
HTTP
(
ou
dans
le
répertoire
doc_root
si
vous
avez
activé
l'
option
safe_mode
)
;
Charger
l'
URL
http
://localhost/test.php
sur
votre
navigateur
web
;
Bravo
!

vous
avez
créé
votre
première
page
dynamique
avec
Php
et
en
plus
elle
vous
résume
toutes
les
fonctionnalités
Php
qui
sont
configurées
sur
votre
machine
.

37
Installation
et
configuration
de
Php
Alcôve
-
Programmer
en
Php
Installer
un
nouveau
module
Php
Placer
le
nouveau
fichier
<nom>.so
dans
extension_dir
(
par
défaut
/usr/lib/php<version>/apache
mais
configurable
dans
php3.ini/php.ini
)
ou
utiliser
apt-get
install
php<version>_<nom>
sous
Debian
;
Ajouter
la
ligne
extension=<nom>.so
dans
php3.ini/php.ini
;
Configurer
les
aspects
relatifs
au
module
dans
php3.ini/php.ini
;
Redémarrer
le
serveur
HTTP
.

38
Chapitre
2
Alcôve
-
Programmer
en
php
Les
base
du
langage
39
Les
base
du
langage
Alcôve
-
Programmer
en
Php
Objectifs
du
chapitre
Syntaxe
du
langage
;
Les
structures
de
contrôle
;
Fonctions
;
Programmation
orientée
objet
.

40
Section
1
Alcôve
-
Programmer
en
Php
Syntaxe
du
langage
41
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Syntaxe
de
base
;
Les
types
de
données
;
Les
variables
;
Les
constantes
;
Les
opérateurs
.

42
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Syntaxe
de
base
Quatre
moyens
équivalents
pour
passer
du
mode
HTML
au
Php
:
–
standard
:
<
?

php
...
mon
code
Php
...
?

>
,
à
option
short_open_tag
:
<
?

...
mon
code
Php
...
?

>
,
à
option
asp_tags
:
<
%
...
mon
code
Php
...
%>
,
–
marqueur
script
du
HTML
:
<script
language="php">
...
mon
code
Php
...
</script>
.

43
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Bases
de
la
syntaxe
héritées
du
C
et
du
Perl
:
–
séparateur
de
instructions
->
;
–
commentaires
:
...
code
/*
...
mes
commentaires
...
*/
code
...
,
...
code
...
//
...
mes
commentaires
...
,
...
code
...
#
...
mes
commentaires
...
.

44
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
types
de
données
Php
supporte
les
types
de
données
suivants
:
–
nombres
entiers
,
–
nombres
à
virgule
flottante
,
–
chaînes
de
caractères
,
–
tableaux
,
–
objets
(
développés
dans
la
section
à
programmation
orientée
objet
’
)
.

Tous
les
noms
de
variables
sont
précédés
de
un
$
(
ex
:
$toto
=
5
;
)
;
45
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Il
est
possible
de
spécifier
une
variable
de
type
entier
de
la
façon
suivante
:
à
$toto
=
123
;
#
est
un
entier
en
base
10
,
à
$toto
=
-123
;
#
est
un
entier
négatif
,
à
$toto
=
0123
;
#
est
un
entier
en
base
8
,
à
$toto
=
0x123
;
#
est
un
entier
en
base
16
.

Il
est
possible
de
spécifier
une
variable
de
type
flottant
ou
double
de
la
façon
suivante
:
à
$titi
=
1.234
;
#
est
un
nombre
à
virgule
flottante
,
à
$titi
=
1.2e3
;
#
est
aussi
un
nombre
à
virgule
flottante
.

46
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Il
est
possible
de
spécifier
une
variable
de
type
chaîne
de
caratères
de
la
façon
suivante
:
à
$personne
=
’
M.
Smith
’
;
#
est
une
chaîne
de
caractères
,
à
$personne
=
"
M.
Smith
"
;
#
est
aussi
une
chaîne
de
caractères
.

Dans
le
deuxième
cas
,
si
la
chaîne
contient
des
noms
de
variables
,
celles
-ci
seront
remplacées
par
leur
valeur
;
Ex
:
$type
=
’
M.
’
;
$nom
=
"
Smith
"
;
$personne
=
"
$type
$nom
"
;
Equivalent
à
$personne
=
’
M.
Smith
’
;
.

47
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Quand
on
utilise
les
"
...
"
on
doit
donc
échapper
certains
caractères
avec
un
backslash
(
\
)
pour
pouvoir
les
afficher
comme
tels
:
–
dollar
(
$
)
:
\$
,
–
double
quotes
(
"
)
:
\
"
,
–
backslash
(
\
)
:
\\
.

de
même
,
il
existe
des
caractères
spéciaux
qui
nécessitent
de
être
échappés
:
–
nouvelle
ligne
:
\n
,
–
retour
à
la
ligne
:
\r
,
à
tabulation
:
\t
.

Tout
autre
caractère
échappé
génèrera
un
avertissement
(
warning
)
;
48
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Lorsqu'
une
chaîne
de
caractères
est
évaluée
comme
une
valeur
numérique
,
les
règles
suivantes
s'
appliquent
:
à
la
chaîne
est
de
type
flottant/double
si
elle
contient
’
.
’
,
e
ou
e
sinon
elle
est
de
type
entier
,
à
la
valeur
est
définie
par
la
première
partie
de
la
chaîne
(
0
si
c'
est
du
texte
)
,
–
lorsque
la
première
expression
est
une
chaîne
,
le
type
de
la
variable
dépend
de
la
seconde
expression
.

ex
:
$toto
=
1
p
"
4.5
"
;
#
$toto
vaut
5.5
$toto
=
1
p
"
-1e3
"
;
#
$toto
vaut
-999
$toto
=
1
p
"
titi
p
149
"
;
#
$toto
vaut
1
$toto
=
1
p
"
149
p
titi
"
;
#
$toto
vaut
150
49
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
tableaux
de
Php
ressemblent
au
tableaux
associatifs
(
hash-tables
)
du
Perl
;
L'
index
dans
le
tableau
est
appellé
clé
et
peut
être
indifféremment
un
entier
ou
une
chaîne
de
caractères
;
La
valeur
associée
à
une
clé
est
appelée
valeur
;
On
peut
utiliser
la
fonction
array()
pour
créer
un
tableau
;
On
peut
aussi
affecter
directement
les
valeurs
au
tableau
;
La
fonction
list()
permet
de
affecter
des
variables
comme
si
elles
constituaient
un
tableau
;
50
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Ex
:
$tab[0
]
=
1
;
$tab[1
]
=
"
toto
"
;
#
on
peut
mélanger
les
contenus
$tab["toto
"
]
=
"
titi
"
;
#
on
peut
mélanger
les
clés
$tab["toto"][8
]
;
#
tableau
à
deux
dimensions
$tab["toto"][8]["encore"][2
]
;
#
quatre
dimensions
$suite
=
array(1
,
2
,
3
,
4
)
;
$personne
=
array("type
"
=>
"
M.
"
,
"
nom
"
çù
"
Smith
"
)
;
list($num1
,
$num2
)
=
$suite
;
#
$num1
vaut
1
et
$num2
vaut
2
51
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
On
peut
connaître
le
nombre
de
éléments
de
un
tableau
grâce
au
fonctions
:
–
sizeofçë
:
retourne
le
nombre
de
éléments
de
un
tableau
,
ou
à
count()
:
retourne
le
nombre
de
éléments
de
un
tableau
s'
il
existe
,
1
si
la
variable
n'
est
pas
un
tableau
et
0
si
la
variable
n'
existe
pas
.

52
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Chaque
tableau
entretient
un
pointeur
courant
qui
sert
à
naviguer
en
son
sein
grâce
au
fonctions
:
–
reset()
:
place
le
pointeur
interne
sur
le
premier
élément
et
retourne
sa
valeur
,
–
current()
:
retourne
la
valeur
de
l
’
élément
courant
,
à
next()
:
place
le
pointeur
interne
sur
l
’
élément
suivant
et
retourne
sa
valeur
,
à
prev()
:
place
le
pointeur
interne
sur
l
’
élément
précédent
et
retourne
sa
valeur
,
à
each()
:
retourne
la
paire
clé/valeur
courante
du
tableau
et
avance
le
pointeur
sur
l'
élément
suivant
(
c'
est
la
seule
fonction
qui
ne
retourne
pas
faux
si
l'
élément
vaut
0
ou
"
"
)
.

53
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Un
tableau
peut
être
trié
en
utilisant
les
fonctions
suivantes
:
–
asort()/arsort()
:
trient
le
tableau
en
ordre
croissant/décroissant
de
valeurs
,
à
ksort()/rsort()
:
trient
le
tableau
en
ordre
croissant/décroissant
de
clés
,
à
sort()
:
trie
le
tableau
en
ordre
croissant
clés
et
valeurs
(
on
perd
la
correspondance
clé/valeur
)
,
–
uasort()/uksort()/usort()
:
trient
le
tableau
de
la
même
façon
que
leurs
quasi-homonymes
(
u
pour
user
)
mais
avec
une
fonction
de
comparaison
fournie
par
l'
utilisateur
.

54
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Ex
:
function
cmp($a
,
bb
)
à
if
(
$a
==
bb
)
return
0
;
return
(
ça
>
bb
)
?

-1
:
1
;
}
$tab
=
array(3,2,5,6,1)
;
usort($tab
,
cmp
)
;
while(list($cle
,
$valeur
)
=
each($tab))
à
echo
"
tab[$cle
]
=
$valeur<BR>\n
"
;
}
Ce
programme
est
équivalent
à
rsort(
)
.

55
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
variables
La
portée
de
une
variable
dépend
du
contexte
dans
lequel
elle
est
définie
;
La
plupart
du
variables
ont
une
portée
qui
s'
étend
sur
l'
intégralité
du
script
Php
,
elles
sont
globales
;
Cependant
,
les
variables
sont
locales
au
sein
de
une
fonction
;
56
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Ex
:
$toto
=
1
;
#
portée
globale
function
affiche
(
)
à
echo
$toto
;
à
portée
locale
}
affiche()
;
Cet
exemple
n'
affichera
rien
car
echo()
utilise
la
variable
locale
$toto
.

57
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Deux
façons
existent
pour
accéder
à
une
variable
globale
au
sein
de
un
bloc
:
à
déclarer
la
variable
comme
global
au
sein
du
bloc
,
à
utiliser
le
tableau
associatif
$GLOBALS
avec
comme
clé
le
nom
de
la
variable
globale
.

58
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Ex
:
$toto
=
1
;
#
portée
globale
$titi
=
2
;
#
portée
globale
function
affiche
(
)
à
global
$toto
;
à
portée
globale
echo
"
$toto
et
$GLOBALS[’titi
’
]
"
;
}
affiche()
;
Cet
exemple
affichera
1
et
2
.

59
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Variables
statiques
:
Une
variable
statique
est
une
variable
locale
qui
ne
perd
pas
sa
valeur
à
chaque
foi
que
le
bloc
est
exécuté
;
On
utilise
,
comme
en
C
,
l'
attribut
static
pour
déclarer
une
telle
variable
:
Ex
:
static
$toto
;
Ce
type
de
variables
est
très
utile
pour
la
création
de
fonctions
récursives
;
60
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Ex
:
compter
récursivement
jusque
à
10
function
compte
(
)
{
static
$compteur
=
0
;
$compteur++
;
echo
"
$compteur
"
;
if
(
$compteur
<
10
)
compte()
;
}
compte()
;
Affiche
1
2
3
4
5
6
7
8
9
10
.

61
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Variables
dynamiques
:
Une
variable
dynamique
prend
la
valeur
de
une
variable
et
l'
utilise
comme
nom
de
une
autre
variable
;
Ex
:
$toto
=
"
Hello
"
;
#
$toto
vaut
Hello
$$toto
=
"
World
"
;
#
$Hello
vaut
World
echo
"
$toto
$Hello
!

"
;
#
affiche
Hello
World
!

echo
"
$toto
${$toto
à
!

"
;
#
affiche
aussi
Hello
World
!

62
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Le
nom
de
une
variable
peut
être
placé
entre
accolades
pour
éviter
les
ambiguïtés
;
Ex
:
$a[1
]
=
"
V1
"
;
$a
=
"
V2
"
;
bb
=
"
a
"
;
$b[1
]
=
"
a
"
;
Résultat
:
${$b}[1
]
==
"
V1
"
Résultat
:
${$b[1
]
}
==
"
V2
"
Conclusion
:
${$b}[1
]
et
${$b[1
]
}
s'
utilisent
dans
2
contextes
différents
.

63
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Variables
extérieures
:
Toutes
les
variables
transmises
par
les
méthodes
POST
ou
GET
sont
accessibles
via
les
tableaux
associatifs
$HTTP_POST_VARS
et
$HTTP_GET_VARS
(
si
l'
option
track_vars
est
activée
dans
php3.ini/php.ini
)
;
Les
variables
de
environnement
sont
accessibles
comme
des
variables
php
classiques
(
ex
:
$HOME
)
;
On
peut
aussi
utiliser
les
fonctions
getenv()
et
putenv()
pour
manipuler
les
variables
de
environnement
;
64
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Variables
prédéfinies
:
Certaines
variables
sont
prédéfinies
par
Php
,
elles
sont
disponibles
pendant
toute
l'
exécution
du
script
.

PHP_SELF
URI
du
script
en
cours
de
exécution
.

GLOBALS
Tableau
du
variables
globales
.

HTTP_GET_VARS
Tableau
du
variables
issues
de
GET
.

HTTP_POST_VARS
Tableau
du
variables
issues
de
POST
.

HTTP_COOKIE_VARS
Tableau
du
variables
issues
du
cookies
.

65
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Variables
de
environnement
Cgi
:
SERVER_SOFTWARE
SERVER_NAME
GATEWAY_INTERFACE
SERVER_PROTOCOL
SERVER_PORT
REQUEST_METHOD
PATH_INFO
PATH_TRANSLATED
SCRIPT_NAME
QUERY_STRING
REMOTE_HOST
REMOTE_ADDR
AUTH_TYPE
REMOTE_USER
REMOTE_IDENT
CONTENT_TYPE
CONTENT_LENGTH
http
://hoohoo.ncsa.uiuc.edu/cgi/env.html
66
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Pour
déterminer
le
type
de
une
variable
on
peut
utiliser
les
fonctions
suivantes
:
–
gettype()
:
retourne
une
chaine
décrivant
le
type
de
la
variable
passée
en
argument
(
integer
,
double
,
string
,
array
,
object
,
unknown
type
)
,
à
is_long()/is_int()/is_integer()
:
retourne
true
si
la
variable
passée
en
argument
est
un
entier
et
false
dans
le
cas
contraire
,
–
is_double()/is_float
:
idem
mais
avec
les
flottants/doubles
,
à
is_string()
:
idem
mais
avec
les
chaînes
de
caractères
,
à
is_array()
:
idem
mais
avec
les
tableaux
,
à
is_object()
:
idem
mais
avec
les
objets
.

67
Syntaxe
du
langage
Alcôve
-
Programmer
en
php
Les
constantes
Php
définit
certaines
constantes
et
propose
un
mécanisme
pour
en
définir
d'
autres
durant
l'
exécution
du
script
;
On
définit
une
constante
en
utilisant
la
fonction
define()
;
Ex
:
define("MA_CONSTANTE
"
,
"
Bonjour
"
)
;
echo
MA_CONSTANTE
;
#
affiche
Bonjour
68
Syntaxe
du
langage
Alcôve
-
Programmer
en
php
Les
principales
constantes
définies
par
Php
sont
les
suivantes
:
à
__FILE__
:
nom
du
fichier
actuellement
exécuté
,
–
__LINE__
:
numéro
de
la
ligne
qui
est
actuellement
exécutée
,
à
PHP_VERSION
:
présentation
de
la
version
du
Php
utilisée
(
ex
:
3.0.8-dev
)
,
à
Phpços
:
système
de
exploitation
utilisé
par
la
machine
qui
fait
tourner
le
Php
(
ex
:
Linux
)
,
–
TRUE
:
vrai
,
–
FALSE
:
faux
,
à
Eùë
:
gestion
du
erreurs
(
cf
.

section
correspondante
)
.

69
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
opérateurs
Les
opérateurs
arithmétiques
:
–
addition
:
ça
p
bb
,
à
soustraction
:
$a
-
bb
,
–
multiplication
:
ça
*
bb
,
à
division
:
$a
/
bb
,
–
modulo
(
reste
de
la
division
entière
)
:
$a
%
bb
.

70
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
L'
opérateur
sur
les
chaînes
de
caractères
:
–
concaténation
:
chaine1
.

chaine2
ex
:
$jour
=
"
Lundi
"
;
echo
à
Nous
sommes
à
.

$jour
.

"
!

"
;
Affiche
Nous
sommes
Lundi
!

71
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
opérateurs
sur
les
bits
:
–
ET
bit
à
bit
:
$a
&
bb
,
à
ou
bit
à
bit
:
$a
à
bb
,
–
OU-Exclusif/XOR
bit
à
bit
:
ça
ˆ
bb
,
–
NON
bit
à
bit
:
˜$a
,
–
décalage
à
droite
de
bb
bits
:
ça
>
>
bb
,
à
décalage
à
gauche
de
bb
bits
:
$a
<
<
bb
.

72
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
opérateurs
logiques
:
à
ET
(
vrai
si
$a
et
bb
vrais
)
:
$a
and
$b
,
$a
&&
bb
.

à
ou
(
vrai
si
$a
ou
bb
vrai(s))
:
$a
or
bb
,
$a
çù
bb
.

à
OU-Exclusif/XOR
(
vrai
si
seul
$a
ou
bb
vrai
)
:
$a
xor
bb
,
à
NON
(
vrai
si
ça
est
faux
)
:
!

ça
.

73
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
opérateurs
de
affectation
:
à
l'
opérateur
de
affectation
le
plus
simple
est
le
signe
=
,
–
il
ne
signifie
pas
"
égal
à
"
mais
que
l'
opérande
à
gauche
du
signe
=
se
voit
affecté
de
la
valeur
de
l'
opérande
de
droite
,
à
la
valeur
retournée
par
une
expression
de
assignement
est
la
valeur
assignée
,
Ex
:
$a
=
(
bb
=
4
)
p
3
;
#
$a
vaut
7
et
bb
vaut
4
74
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
–
il
existe
en
plus
des
opérateurs
combinés
pour
tous
les
opérateurs
arithmétiques
,
les
opérateurs
bits
à
bits
et
l'
opérateur
de
concaténation
,
uà
-=
çù
/=
çù
.=
&=
çù
ˆ=
<
<=
>
>=
˜=
à
ceux
-ci
permettent
de
utiliser
la
valeur
de
une
variable
dans
une
expression
et
de
affecter
le
résultat
de
cette
expression
à
cette
variable
,
Ex
:
$toto
uà
3
#
équivaut
à
$toto
à
$toto
p
3
75
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
à
l'
opérateur
uu
est
équivalent
à
au
1
,
à
l'
opérateur
--
est
équivalent
à
-=
1
,
à
ces
deux
opérateurs
peuvent
être
placés
avant
(
pré-exécution
)
ou
après
(
post-exécution
)
la
variable
à
laquelle
ils
s'
appliquent
.

ex
:
$toto
=
0
;
echo
++$toto
;
#
affiche
1
echo
$toto++
;
#
affiche
1
echo
$toto
;
#
affiche
2
76
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
Les
opérateurs
de
comparaison
:
–
égal
à
:
$a
çù
bb
,
–
différent
de
:
$a
!

=
bb
,
–
supérieur
à
:
ça
>
bb
,
–
inférieur
à
:
$a
<
bb
,
–
supérieur
ou
égal
à
:
$a
çù
bb
,
–
inférieur
ou
égal
à
:
$a
çù
bb
.

77
Syntaxe
du
langage
Alcôve
-
Programmer
en
Php
L'
opérateur
ternaire
:
–
issu
du
langage
C
,
–
(
condition
)
?

(
expression1
)
:
(
expression2
)
;
,
à
renvoie
expression1
si
condition
est
vraie
et
expression2
dans
le
cas
contraire
.

ex
:
echo
$toto
==
0
?

"
Nul
"
:
"
Non
nul
"
;
#
affiche
Nul
si
$toto
vaut
0
et
Non
nul
sinon
78
Section
2
Alcôve
-
Programmer
en
php
Les
structures
de
contrôle
79
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Introduction
;
Instructions
conditionnelles
;
Boucles
;
Inclusions
.

80
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Introduction
Tous
les
scripts
Php
sont
une
suite
de
instructions
;
Une
instruction
peut
être
:
à
un
assignement
,
à
un
appel
de
fonction
,
à
une
instruction
conditionnelle
,
ou
–
une
instruction
qui
ne
fait
rien
(
une
instruction
vide
)
.

Une
instruction
se
termine
habituellement
par
un
point
virgule
(
;
)
;
81
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Plusieurs
instructions
peuvent
être
regroupées
en
bloc
,
délimité
par
des
accolades
(
{
...
}
)
;
Un
bloc
est
considéré
comme
une
instruction
;
Les
différents
types
de
instructions
sont
décrits
dans
ce
chapitre
.

82
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Instructions
conditionnelles
L'
instruction
if
est
une
du
plus
importantes
instructions
de
tous
les
langages
,
Php
inclus
;
Elle
permet
l'
exécution
conditionnelle
de
une
partie
de
code
;
Les
fonctionnalités
de
l'
instruction
If
sont
les
mêmes
en
php
que
en
C
;
83
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
:
if
(
condition
)
{
#
instructions
à
exécuter
si
la
condition
est
vraie
...
}
Une
chaine
de
caractère
ne
contenant
que
0
sera
évaluée
comme
fausse
;
84
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Souvent
on
souhaite
exécuter
une
instruction
si
une
condition
est
remplie
,
et
une
autre
instruction
si
cette
condition
n'
est
pas
remplie
;
C'
est
le
rôle
du
else
;
Prototype
:
if
(
condition
)
{
#
instructions
à
exécuter
si
la
condition
est
vraie
...
à
else
à
#
instructions
à
exécuter
si
la
condition
est
fausse
...
}
85
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
elseif
permet
,
comme
l'
expression
else
,
de
exécuter
une
instruction
après
un
if
dans
le
cas
où
ce
dernier
est
évalué
comme
faux
;
à
la
différence
de
l'
expression
else
,
il
n'
exécutera
les
instructions
que
si
l'
expression
condionnelle
elseif
est
évaluée
comme
vraie
;
86
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
:
if
(
condition1
)
{
#
instructions
à
exécuter
si
la
condition1
est
vraie
...
}
elseif
(
condition2
)
{
#
instructions
à
exécuter
si
la
condition2
est
vraie
...
}
elseif
(
condition3
)
{
#
instructions
à
exécuter
si
la
condition3
est
vraie
...
...
à
else
à
#
instructions
à
exécuter
si
aucune
du
conditions
n'
est
vraie
...
}
87
Les
structures
de
contrôle
Alcôve
-
Programmer
en
php
La
syntaxe
du
if
que
nous
venons
de
voir
est
directement
héritée
du
langage
C
;
pas
toujours
très
adaptée
pour
mélanger
code
Php
et
HTML
;
Php
propose
donc
une
autre
syntaxe
pour
le
if
qui
permet
de
améliorer
la
lisibilité
;
88
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
simplifié
:
if
(
condition1
)
:
#
instructions
à
exécuter
si
la
condition1
est
vraie
...
elseif
(
condition2
)
:
#
instructions
à
exécuter
si
la
condition2
est
vraie
...
elseif
(
condition3
)
:
#
instructions
à
exécuter
si
la
condition3
est
vraie
...
...
else
:
#
instructions
à
exécuter
si
aucune
du
conditions
n'
est
vraie
...
endif
;
89
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Ex
:
if
(
$type
==
"
femme
"
)
{
echo
"
Bonjour
Madame
"
;
}
elseif
(
$type
==
"
homme
"
)
{
echo
"
Bonjour
Monsieur
"
;
à
else
à
echo
"
Bonjour
,
vous
êtes
bizarre
!

"
;
}
90
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Boucles
La
boucle
while
est
le
moyen
le
plus
simple
de
implémenter
une
boucle
en
Php
;
Cette
boucle
se
comporte
de
la
même
manière
que
en
C
:
les
instructions
sont
exécutées
tant
que
l'
expression
est
vraie
;
La
valeur
de
l'
expression
est
vérifiée
à
chaque
début
de
boucle
;
91
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
si
la
valeur
change
durant
l'
exécution
de
l'
instruction
,
l'
exécution
ne
s'
arrêtera
qu'
à
la
fin
de
l'
itération
;
Comme
avec
le
if
,
Php
définit
une
syntaxe
simplifiée
,
en
plus
de
celle
héritée
du
langage
C
;
92
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
:
while
(
condition
)
{
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
à
Prototype
simplifié
:
while
(
condition
)
:
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
endwhile
;
93
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Ex
:
compter
jusque
à
10
çi
=
1
;
while
(
çi
çù
10
)
{
echo
"
çi
"
;
$i++
;
}
Affiche
1
2
3
4
5
6
7
8
9
10
.

94
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
La
boucle
do..while
ressemble
beaucoup
à
la
boucle
while
;
La
différence
est
que
l'
expression
est
testée
à
la
fin
de
chaque
itération
au
lieu
du
début
;
La
première
itération
de
la
boucle
est
donc
toujours
exécutée
;
Il
n'
y
a
qu'
une
syntaxe
possible
pour
les
boucles
do..while
qui
est
,
elle
aussi
,
héritée
du
langage
C
;
95
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
:
do
{
#
instructions
à
exécuter
la
première
foi
et
ensuite
tant
que
la
condition
est
vraie
...
}
while
(
condition
)
;
96
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Ex
:
compter
jusque
à
10
çi
=
1
;
do
{
echo
"
çi
"
;
çiu
;
}
while
(
çi
çù
10
)
;
Affiche
1
2
3
4
5
6
7
8
9
10
.

97
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
La
boucle
for
est
,
en
Php
tout
comme
en
C
,
la
boucle
la
plus
complexe
mais
aussi
la
plus
puissante
;
Elle
fonctionne
comme
la
boucle
for
du
langage
C
;
Prototype
:
for
(
expression1
;
condition
;
expression2
)
{
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
}
98
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
L'
expression1
est
évaluée
(
exécutée
)
quoi
qu'
il
arrive
au
début
de
la
boucle
;
au
début
de
chaque
itération
,
la
condition
est
évaluée
;
–
si
elle
est
vraie
,
la
boucle
continue
et
les
instructions
sont
à
nouveau
exécutées
,
à
si
elle
est
fausse
,
l'
exécution
de
la
boucle
s'
arrête
.

à
la
fin
de
chaque
itération
,
l'
expression2
est
évaluée
(
exécutée
)
;
99
Les
structures
de
contrôle
Alcôve
-
Programmer
en
php
Les
expressions/conditions
peuvent
éventuellement
être
laissées
vides
(
->
attention
au
boucles
infinies
)
;
Comme
avec
le
if
et
le
while
,
Php
définit
une
syntaxe
simplifiée
,
en
plus
de
celle
héritée
du
langage
C
;
Prototype
simplifié
:
for
(
expression1
;
condition
;
expression2
)
:
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
endfor
;
100
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Ex
:
compter
jusque
à
10
for
(
çi
=
1
;
çi
çù
10
;
çiu
)
à
echo
"
çi
"
;
}
Ex2
:
compter
jusque
à
10
for
(
çi
=
1
;
çi
çù
10
;
print
"
çi
"
,
çiu
)
;
Ex3
:
compter
jusque
à
10
for
(
çi
=
1
;
çi
çù
10
;
print
çiu
)
;
Ces
3
exemples
affichent
1
2
3
4
5
6
7
8
9
10
.

101
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Php4
définit
une
boucle
foreach
,
comme
en
Perl
,
pour
réaliser
une
boucle
sur
les
éléments
de
un
tableau
;
En
PHP3
on
peut
réaliser
l'
équivalent
avec
une
boucle
while
et
les
fonction
list()
et
each()
que
nous
avons
vu
précédemment
;
ex
:
afficher
tous
les
arguments
de
un
formulaire
POST
while
(
list($cle
,
$valeur
)
=
each($HTTP_POST_VARS))
à
echo
"
$cle
=>
$valeur
,
"
;
}
102
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Avec
l'
instruction
foreach
cette
boucle
devient
:
foreach
(
$HTTP_POST_VARS
as
$cle
=>
$valeur
)
à
echo
"
$cle
=>
$valeur
,
"
;
}
ou
bien
,
si
l'
on
ne
veut
récupérer
que
les
valeurs
:
foreach
(
$HTTP_POST_VARS
as
$valeur
)
à
echo
"
$valeur
,
"
;
}
103
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
L'
instruction
break
permet
de
sortir
de
une
boucle
à
n'
importe
quel
moment
;
Ex
:
compter
jusque
à
10
for
(
çi
=
1
,
,
çiu
)
à
if
(
çi
>
10
)
break
;
echo
"
çi
"
;
}
Affiche
1
2
3
4
5
6
7
8
9
10
.

104
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
L'
instruction
continue
permet
de
ignorer
les
instructions
restantes
dans
la
boucle
et
de
passer
directement
à
l'
itération
suivante
;
Ex
:
compter
2
par
2
jusque
à
10
for
(
çi
=
1
,
çi
çù
10
,
çiu
)
à
if
(
$i
%
2
)
continue
;
à
à
impaire
echo
"
çi
"
;
}
Affiche
2
4
6
8
10
.

105
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
L'
instruction
switch
équivaut
à
une
serie
de
instructions
if..elseif..elseif
...
.else
;
Elle
est
utilisée
pour
comparer
la
même
variable
(
ou
expression
)
avec
un
grand
nombre
de
valeurs
différentes
et
de
exécuter
différentes
parties
de
code
suivant
la
valeur
à
laquelle
elle
est
égale
;
106
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Prototype
:
switch
(
expression
)
à
case
resultat1
:
#
instructions
à
exécuter
si
l'
expression
vaut
resultat1
...
break
;
case
resultat2
:
#
instructions
à
exécuter
si
l'
expression
vaut
resultat2
...
break
;
...
default
:
#
instructions
à
exécuter
en
dernier
recours
...
}
107
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
L'
instruction
switch
exécute
chacune
du
clauses
dans
l'
ordre
de
écriture
;
Elle
est
exécutée
ligne
par
ligne
;
Aucun
code
n'
est
exécuté
jusque
à
ce
que
le
premier
case
soit
vérifié
;
108
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Lorsqu'
il
trouve
le
premier
case
vérifié
,
Php
exécute
alors
les
instructions
correspondantes
et
continue
jusque
à
la
fin
du
bloc
switch
;
Pour
reproduire
le
fonctionnement
de
un
if..elseif..elseif
...
.else
,
il
faut
terminer
tous
les
cases
par
des
break
;
On
peut
définir
un
case
exécuté
par
défaut
(
équivalent
au
else
)
grâce
à
default
;
109
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Ex
:
switch
(
$type
)
à
case
"
femme
"
:
echo
"
Bonjour
Madame
"
;
break
;
case
"
homme
"
:
echo
"
Bonjour
Monsieur
"
;
break
;
default
:
echo
"
Bonjour
,
vous
êtes
bizarre
!

"
;
}
110
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
Inclusions
La
fonction
require()
se
substitue
elle-même
avec
le
contenu
du
fichier
spécifié
en
argument
;
La
substitution
s'
opère
avant
l'
interprétation
du
code
;
Elle
ressemble
à
peu
près
au
#include
du
C
;
si
on
l'
utilise
au
sein
de
une
boucle
,
c'
est
le
fichier
tel
que
il
était
à
la
première
itération
qui
sera
réutilisé
à
chaque
itération
(
même
si
il
a
changé
entre
temps
)
;
de
plus
,
il
est
déconseillé
de
utiliser
require()
avec
un
nom
de
fichier
dynamique
(
contenant
une
variable
)
;
111
Les
structures
de
contrôle
Alcôve
-
Programmer
en
Php
La
fonction
include()
inclut
et
évalue
le
fichier
spécifié
en
argument
;
Ceci
est
fait
à
chaque
foi
que
la
fonction
est
rencontrée
;
On
peut
donc
utiliser
cette
fonction
au
sein
de
une
boucle
pour
inclure
un
fichier
différent
à
chaque
foi
par
exemple
(
ex
:
include("toto_$i")
;
)
.

112
Section
3
Alcôve
-
Programmer
en
Php
Fonctions
113
Fonctions
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Présentation
du
fonctions
Php
;
Les
valeurs
de
retour
;
Les
arguments
.

114
Fonctions
Alcôve
-
Programmer
en
Php
Présentation
du
fonctions
Php
Une
fonction
peut
être
définie
en
utilisant
la
syntaxe
suivante
:
function
ma_fonction
(
$arg_1
,
$arg_2
,
...
,
$arg_n
)
{
#
Corps
de
ma
fonction
...
return
$valeur_de_retour
;
}
Tout
code
php
correct
syntaxiquement
peut
apparaître
dans
une
fonction
et
dans
une
définition
de
classe
;
En
PHP3
toute
fonction
doit
être
préalablement
définie
avant
de
être
utilisée
(
idem
langage
C
)
.

Elle
peut
être
définie
n'
importe
où
en
Php4
.

115
Fonctions
Alcôve
-
Programmer
en
php
Les
valeurs
de
retour
Les
valeurs
sont
renvoyées
en
utilisant
une
instruction
de
retour
optionnelle
;
Tous
les
types
de
variables
peuvent
être
renvoyés
(
tableaux
et
objets
compris
)
;
Ex
:
function
carre($nombre)
à
return
$nombre
*
$nombre
;
}
echo
carre(3)
;
#
affiche
la
valeur
9
116
Fonctions
Alcôve
-
Programmer
en
Php
On
ne
peut
pas
renvoyer
plusieurs
valeurs
en
même
temps
mais
on
peut
obtenir
un
résultat
identique
en
renvoyant
un
tableau
;
Ex
:
function
couleurs()
à
return
array("Coeur
"
,
"
Pique
"
,
"
Trèfle
"
,
"
Carreau
"
)
;
}
list($c1
,
$c2
,
$c3
,
$c4
)
=
couleurs()
;
117
Fonctions
Alcôve
-
Programmer
en
Php
Php4
permet
également
le
retour
de
fonction
par
référence
;
Ce
mécanisme
est
utile
lorsque
l'
on
cherche
à
utiliser
une
fonction
pour
trouver
une
variable
que
l'
on
veux
lier
;
à
la
différence
du
passage
par
référence
,
il
faut
utiliser
un
&
à
deux
endroits
:
–
pour
indiquer
que
l'
on
retourne
une
référence
(
et
non
une
copie
comme
à
l'
habitude
)
,
mais
aussi
–
pour
indiquer
que
une
liaison
à
une
référence
et
non
un
simple
assignement
de
variable
doit
avoir
lieu
avec
la
variable
de
retour
.

118
Fonctions
Alcôve
-
Programmer
en
Php
Ex
:
function
&
trouve_variable
(
$param
)
{
#
...
recherche
de
la
variable
$toto
...
return
$toto
;
à
$titi
=
&
trouve_variable($tata)
;
$titi->x
=
2
;
Les
propriétés
de
l'
objet
retourné
par
la
fonction
trouve_variable()
sont
liées
à
$titi
.

Il
ne
s'
agit
pas
de
une
copie
de
$toto
.

119
Fonctions
Alcôve
-
Programmer
en
Php
Les
arguments
du
informations
peuvent
être
passées
à
une
fonction
en
utilisant
un
tableau
de
arguments
dont
chaque
élément
est
séparé
par
une
virgule
;
Un
élément
peut
être
une
variable
ou
une
constante
;
php
supporte
:
à
le
passage
de
arguments
par
valeur
(
méthode
par
défaut
)
,
à
le
passage
de
arguments
par
référence
,
et
à
les
valeurs
par
défaut
du
arguments
.

Une
liste
de
arguments
dont
le
nombre
est
variable
ne
fonctionne
pas
en
Php
mais
un
résultat
similaire
peut
être
obtenu
en
utilisant
un
tableau
;
120
Fonctions
Alcôve
-
Programmer
en
Php
passage
de
arguments
par
valeur
:
C'
est
la
méthode
par
défaut
;
Les
variables
ne
sont
pas
affectées
par
des
changements
au
sein
de
la
fonction
;
On
peut
donc
changer
la
valeur
du
arguments
au
sein
de
la
fonction
sans
que
ceci
ait
des
répercussions
à
l'
extérieur
de
celle
-ci
;
121
Fonctions
Alcôve
-
Programmer
en
Php
Ex
:
function
ajoute_deux($nombre)
{
$nombre
uà
2
;
echo
$nombre
;
}
$toto
=
3
;
ajoute_deux($toto)
;
#
affiche
5
echo
$toto
;
#
affiche
3
122
Fonctions
Alcôve
-
Programmer
en
Php
Passage
de
arguments
par
référence
:
Les
variables
sont
affectées
par
des
changements
au
sein
de
la
fonction
;
Deux
possibilités
:
–
de
façon
permanente
en
ajoutant
un
&
devant
le
nom
de
la
variable
dans
la
définition
de
la
fonction
,
ou
–
de
façon
ponctuelle
en
ajoutant
un
&
devant
le
nom
de
la
variable
lors
de
l'
appel
à
la
fonction
.

123
Fonctions
Alcôve
-
Programmer
en
Php
Ex
:
function
retranche_deux(
&
$nombre
)
{
$nombre
-=
2
;
echo
$nombre
;
à
$toto
=
3
;
ajoute_deux(
&
$toto
)
;
#
affiche
5
echo
$toto
;
#
affiche
5
retranche_deux($toto)
;
#
affiche
3
echo
$toto
;
#
affiche
3
124
Fonctions
Alcôve
-
Programmer
en
Php
Valeurs
par
défaut
du
arguments
:
Php
permet
,
comme
en
C++
,
de
spécifier
des
valeurs
par
défaut
pour
les
arguments
de
type
scalaire
;
Il
suffit
de
spécifier
la
valeur
par
défaut
avec
un
=
dans
la
déclaration
de
la
fonction
;
Cette
valeur
doit
être
une
constante
(
pas
de
variables
ni
de
attributs
de
classes
)
et
les
arguments
par
défaut
doivent
être
les
derniers
dans
la
liste
;
125
Fonctions
Alcôve
-
Programmer
en
Php
Ex
:
function
annotation($type
=
"
assez
bien
"
)
à
echo
"
vous
avez
$type
travaillé
"
;
}
annotation("mal")
;
#
affiche
vous
avez
mal
travaillé
annotation()
;
#
affiche
vous
avez
assez
bien
travaillé
126
Section
4
Alcôve
-
Programmer
en
Php
Programmation
orientée
objet
127
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Rappels
sur
la
programmation
orientée
objet
;
Les
classes
en
Php
;
Les
objets
en
Php
;
Particularités
de
Php
.

128
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Rappels
sur
la
programmation
orientée
objet
Poo
->
raisonner
en
termes
de
fonctionnalités
et
de
propriétés
et
non
en
terme
de
traitements
;
L
à
encapsulation
:
L'
objet
représente
une
abstraction
de
une
entité
abstraite
ou
concrète
pour
laquelle
il
regroupe
en
une
même
structure
les
données
et
les
traitements
;
Un
objet
possède
des
caractéristiques
et
du
fonctionnalités
et
on
l'
utilise
sans
savoir
comment
elles
sont
implémentées
(
ex
:
un
téléphone
)
;
129
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Les
caractéristiques/fonctionnalités
non
utiles
pour
la
manipulation
de
l'
objet
mais
utiles
à
son
fonctionnement
sont
masquées
à
l'
utilisateur
(
ex
:
les
composants
internes
du
téléphone
)
;
L
’
héritage
:
Un
objet
peut
dériver
de
un
autre
objet
et
posséder
des
caractéristiques/fonctionnalités
supplémentaires
tout
en
héritant
du
caractéristiques/fonctionalités
de
son
aïeul
(
ex
:
un
téléphone
sans
fils
est
un
téléphone
un
peu
particulier
)
;
130
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Le
polymorphisme
:
Lorsqu'
on
invoque
une
méthode
de
un
objet
,
le
programme
saura
retrouver
la
méthode
parmis
celles
du
aïeux
de
l'
objet
si
celle
-ci
n'
est
pas
explicitement
définie
pour
lui
mais
que
il
en
a
hérité
(
ex
:
la
méthode
"
décrocher
le
téléphone
"
pour
un
sans
fils
)
;
131
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
à
la
création
(
instanciation
)
de
l'
objet
,
une
méthode
(
qui
porte
généralement
le
même
nom
que
la
classe
)
est
appellée
automatiquement
:
c'
est
le
constructeur
;
Parfois
,
à
la
destruction
de
l'
objet
,
une
méthode
(
qui
porte
généralement
le
même
nom
que
la
classe
précédé
de
un
˜
)
est
appellée
automatiquement
:
c'
est
le
destructeur
;
132
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Une
classe
est
une
collection
de
variables
(
attributs
)
et
de
fonctions
(
méthodes
)
qui
s'
appliquent
à
ces
variables
;
Un
objet
est
une
instance
de
une
classe
.

Son
type
de
données
est
la
classe
de
objets
à
laquelle
il
appartient
(
un
peu
comme
$toto
à
123
;
est
une
instance
du
type
entier
)
.

133
Programmation
orientée
objet
Alcôve
-
Programmer
en
php
Les
classes
en
Php
En
Php
,
on
définit
une
classe
de
objets
de
la
façon
suivante
:
class
MaClasse
à
à
Attributs
var
$monAttribut
;
à
Méthodes
function
maMethode($argument)
{
#
...
traitement
de
$monAttribut
avec
$argument
...
}
}
134
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Les
objets
en
Php
Il
est
possible
de
spécifier
une
variable
objet
de
la
façon
suivante
:
$monObjet
à
new
MaClasse
;
On
accède
à
un
attribut
ou
à
une
méthode
de
la
façon
suivante
:
$monObjet->monAttribut
=
"
toto
"
;
$monObjet->maMethode(23)
;
135
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Particularités
de
Php
Tous
les
attributs
et
méthodes
sont
publics
;
Les
objets
sont
libérés
automatiquement
quand
ils
ne
sont
plus
utilisés
(
Garbage
Collector
)
;
Pas
de
destructeur
.

136
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
Ex
:
le
Caddie
class
Caddie
à
var
$elements
;
#
éléments
de
notre
Caddie
à
Constructeur
qui
ajoute
un
cadeau
à
chaque
nouveau
Caddie
function
Caddie()
à
$this->ajoute(1
,
"
cadeau
"
)
;
}
à
Ajout
de
$nombre
articles
de
type
$type
au
Caddie
function
ajoute($nombre
,
$type
)
à
$this->elements[$type
]
+=
$nombre
;
}
137
Programmation
orientée
objet
Alcôve
-
Programmer
en
Php
#
Retrait
de
$nombre
articles
de
type
$type
au
Caddie
function
enleve($nombre
,
$type
)
à
If
(
$this->elements[$type
]
>
$nombre
)
à
$this->elements[$type
]
-=
$nombre
;
return
true
;
à
else
à
return
false
;
}
}
}
138
Chapitre
3
Alcôve
-
Programmer
en
Php
Fonctionnalités
essentielles
139
Fonctionnalités
essentielles
Alcôve
-
Programmer
en
Php
Objectifs
du
chapitre
Gestion
du
connexions
et
du
utilisateurs
;
Gestion
du
sessions
;
Autres
fonctionnalités
essentielles
.

140
Section
1
Alcôve
-
Programmer
en
Php
Connexions
et
utilisateurs
141
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Gestion
du
utilisateurs
-
authentification
;
Gestion
du
connexions
.

142
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Gestion
du
utilisateurs
-
authentification
Les
fonctions
de
authentification
HTTP
ne
sont
disponibles
que
si
Php
est
exécuté
comme
module
Apache
(
et
non
pas
comme
Cgi
)
;
On
utilise
la
fonction
header()
pour
demander
une
authentification
(
Authentication
Required
)
au
client
,
générant
ainsi
l'
apparition
de
une
fenêtre
de
demande
de
nom
de
utilisateur
et
de
mot
de
passe
;
143
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Une
foi
que
les
champs
ont
été
remplis
,
l'
URL
sera
de
nouveau
appelée
mais
avec
les
variables
suivantes
mises
à
jour
:
–
$PHP_AUTH_USER
:
utilisateur
,
–
$PHP_AUTH_PW
:
mot
de
passe
,
et
–
$PHP_AUTH_TYPE
:
type
de
authentification
.

Actuellement
,
seule
l'
authentification
basique
(
Basic
)
est
supportée
;
144
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Ex
:
page
de
authentification
<
?

php
if(
!

isset($PHP_AUTH_USER))
{
Header("WWW-Authenticate
:
Basic
realm=’Titre
’
"
)
;
Header("HTTP/1.0
401
Unauthorized
"
)
;
echo
"
Texte
à
envoyer
au
client
en
cas
de
annulation
"
;
exit
;
à
else
à
echo
"
Bonjour
$PHP_AUTH_USER.<br>
"
;
echo
"
Votre
mot
de
passe
est
$PHP_AUTH_PW
.
"

;
}
?

>
145
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Gestion
du
connexions
Le
statut
du
connexions
est
conservé
en
interne
par
Php
;
Il
y
a
trois
états
possibles
:
–
0
/
NORMAL
:
le
script
Php
travaille
,
–
1
/
ABORTED
:
le
client
distant
s'
est
déconnecté
,
–
2
/
TIMEOUT
:
la
durée
maximale
de
exécution
est
dépassée
.

146
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
Par
défaut
,
le
script
Php
se
termine
dès
que
le
client
se
déconnecte
mais
on
peut
changer
cette
politique
de
différentes
façons
:
à
continuer
le
script
comme
si
le
client
était
encore
là
en
activant
l'
option
:
ignore_user_abort
dans
php3.ini/php.ini
,
ou
[
php3_ignore_user_abort/ignore_user_abort
dans
apache.conf
.

à
exécuter
une
fonction
de
fermeture
préalablement
enregistrée
grâce
à
la
fonction
register_shutdown_function(
)
.

147
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
La
fonction
enregistrée
avec
register_shutdown_function()
sera
aussi
appelée
à
la
fin
du
script
quand
celui
-ci
se
termine
normalement
;
Pour
pouvoir
avoir
un
comportement
différent
suivant
l'
état
du
script
lors
de
sa
finalisation
on
peut
tester
l'
état
déconnecté
du
script
avec
la
fonction
connection_aborted()
;
La
fonction
connection_status()
permet
également
de
retourner
l'
état
du
script
(
0
,
1
,
2
ou
3
)
;
148
Connexions
et
utilisateurs
Alcôve
-
Programmer
en
Php
On
peut
modifier
le
délai
de
timeout
(
30
secondes
par
défaut
)
de
plusieurs
manières
:
à
fonction
set_time_limit()
,
–
max_execution_time
dans
php3.ini/php.ini
,
ou
–
php3_max_execution_time/max_execution_time
dans
apache.conf
.

La
fonction
enregistrée
avec
register_shutdown_function()
sera
également
appelée
lorsqu'
un
timeout
intervient
;
On
peut
tester
l'
état
timeout
du
script
avec
la
fonction
connection_timeout()
;
149
Section
2
Alcôve
-
Programmer
en
Php
Gestion
du
sessions
150
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Principe
;
Sessions
avec
PHPlib
;
Sessions
avec
Php4
.

151
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Principe
La
gestion
du
sessions
avec
Php
est
un
moyen
de
sauver
des
informations
entre
deux
accès
(
requêtes
HTTP
)
;
Cela
permet
notamment
de
construire
des
applications
personnalisées
,
et
de
accroître
les
fonctionnalités
de
votre
site
;
Malheureusement
,
la
gestion
du
sessions
n'
était
pas
inclue
dans
les
fonctionnalités
standards
de
Php
jusque
à
la
version
Php4
;
Une
bibliothèque
complémentaire
a
donc
été
développée
pour
gérer
les
sessions
avec
PHP3
,
c'
est
PHPlib
;
152
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Sessions
avec
PHPlib
PHPlib
est
une
bibliothèque
Php
libre
qui
vise
à
faciliter
la
création
de
sites
avec
Php
;
Elle
est
toujours
utilisable
avec
Php4
et
présente
de
ailleurs
du
fonctionnalités
que
ce
dernier
ne
possède
toujours
pas
en
natif
;
Elle
se
compose
de
classes
et
de
fonctions
qui
permettent
:
à
le
suivi
du
sessions
,
à
l'
utilisation
de
variables
persistantes
au
niveau
utilisateur
et
au
niveau
session
,
à
l'
authentification
et
la
gestion
du
permissions
,
à
la
génération
rapide
de
code
HTML
...
153
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Installation
:
à
récupérer
l'
archive
(
http
://phplib.netuse.de
)
,
à
la
décompresser
dans
un
répertoire
quelconque
(
ex
:
/usr/lib/phplib/
)
,
à
éditer
le
fichier
php3.ini/php.ini
et
fixer
les
options
de
la
façon
suivante
:
magic_quotes_gpc
=
off
magic_quotes_runtime
à
off
magic_quotes_sybase
=
off
track_vars
=
On
auto_prepend_file
à
<répertoire
contenant
prepend.php>
include_path
à
<répertoire
de
installation>
154
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Pour
l'
utilisation
de
PHPlib
,
il
faut
créer
quelques
fichiers
en
plus
du
scripts
Php
:
–
prepend.php
sert
à
définir
toutes
les
librairies
PHPlib
à
inclure
avant
chaque
fichier
,
et
à
local.inc
sert
à
définir
les
classes
qui
vont
être
utilisées
par
les
scripts
.

155
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Pour
gérer
les
sessions
et
les
variables
persistantes
,
la
librairie
se
sert
de
une
base
de
données
,
de
un
annuaire
Ldap
ou
encore
de
un
simple
fichier
;
Cette
base
de
données
et
les
différentes
tables
qui
sont
utilisées
par
les
scripts
utilisant
PHPlib
doivent
être
créées
par
vos
soins
grâce
au
fichiers
de
configurations
fournis
(
généralement
dans
/usr/lib/phplib/stuff/
)
;
Ex
:
base
de
données
MySQL
mysql
h
<ma_machine_hote>
<ma_base>
<create_database.mysql
156
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Pour
gérer
une
session
,
PHPlib
utilise
un
identifiant
qui
est
transmis
de
script
en
script
au
cours
de
la
navigation
;
Pour
les
sessions
sans
reprise
,
cet
identifiant
peut
être
transmis
dans
l'
URL
;
Pour
gérer
les
reprises
de
sessions
,
PHPlib
peut
stocker
l'
identifiant
dans
un
cookie
qu'
il
transmet
au
client
à
la
fin
de
chaque
script
(
fonction
page_close())
;
157
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
PHPlib
définit
des
classes
pour
accéder
au
base
de
données
et
gérer
les
sessions
;
vous
devez
définir
vos
propres
classes
qui
dérivent
des
classes
génériques
de
PHPlib
;
Ces
classes
sont
généralement
stockées
dans
le
fichier
local.inc
;
158
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Toutes
les
page
gérant
la
session
doivent
être
encadrées
par
:
–
page_open(array("sess
"
=>
"
MaSession
"
)
)
,
et
à
page_close()
;
si
on
ne
souhaite
pas
utiliser
l'
option
auto_prepend_file
pour
inclure
le
fichier
prepend.php
,
on
peut
commencer
le
script
par
un
include()
de
ce
fichier
;
Pour
rendre
une
variable
persistante
,
on
utilise
la
méthode
register()
de
la
classe
MaSession
;
159
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Ex
:
session.php
<
?

php
page_open(array("sess
"
=>
"
MaSession
"
)
)
;
ifà
!

isset($toto))
$toto
=
1
;
print
++$toto
;
$sess->register("toto")
;
page_close()
;
?

>
160
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Ex
(
suite
)
:
local.php
<
?

php
class
MaBaseSql
extends
DB_Sql
à
var
$Host
=
"
ma_machine_hote
"
;
var
$Database
=
"
ma_base
"
;
var
$User
=
"
mon_utilisateur
"
;
var
$Password
=
"
mon_password
"
;
}
class
MonContainerSql
extends
CT_Sql
à
var
$database_class
=
"
MaBaseSql
"
;
var
$database_table
=
"
ma_table
"
;
}
161
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
class
MaSession
extends
Session
à
var
$classname
=
"
MaSession
"
;
var
$mode
=
"
cookie
"
;
var
$lifetime
=
6000
;
var
$that_class
=
"
MonContainerSql
"
;
}
?

>
162
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Ex
(
fin
)
:
prepend.php
<
?

php
if
(
!

is_array($_PHPLIB))
$_PHPLIB["libdir
"
]
=
"
"
;
require($_PHPLIB["libdir
"
]
.

"
db_mysql.inc
"
)
;
require($_PHPLIB["libdir
"
]
.

"
ct_sql.inc
"
)
;
require($_PHPLIB["libdir
"
]
.

"
session.inc
"
)
;
require($_PHPLIB["libdir
"
]
.

"
local.inc
"
)
;
require($_PHPLIB["libdir
"
]
.

"
page.inc
"
)
;
?

>
163
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Sessions
avec
Php4
Le
principe
est
le
même
que
avec
PHPlib
:
on
attribue
à
un
nouvel
utilisateur
un
identificateur
de
session
(
Sid
)
;
Ce
numéro
est
transmis
soit
sous
forme
de
cookie
soit
dans
les
URLs
;
Quand
un
visiteur
accède
à
la
page
,
Php4
vérifie
si
un
identificateur
de
session
a
été
transmis
avec
la
requête
;
164
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Cette
vérification
peut
être
faite
de
trois
manières
différentes
:
à
automatiquement
si
l'
option
session.auto_start
est
activée
dans
php.ini
,
à
explicitement
par
l'
appel
de
la
fonction
session_start()
,
ou
à
implicitement
par
l'
appel
de
la
fonction
session_register(
)
.

Dans
le
cas
où
le
numéro
de
session
est
valide
,
tout
l'
environnement
de
celle
-ci
est
restauré
;
165
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
L'
option
register_globals
de
php.ini
autorise
les
variables
globales
à
être
sauvegardées
dans
une
session
;
Ex
:
<
?

php
session_register("toto")
;
$toto++
;
?

à
L'
option
track_vars
de
php.ini
(
qui
est
bloquée
à
1
pour
les
versions
de
PHP4
supérieures
à
la
4.0.3
)
autorise
les
variables
de
$HTTP_SESSION_VARS
à
être
sauvegardées
dans
une
session
;
Ex
:
<
?

php
session_register("toto")
;
$HTTP_SESSION_VARS["toto"]++
;
?

>
166
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Il
existe
deux
manières
pour
transmettre
le
numéro
de
session
au
sein
de
l'
URL
:
–
manuellement
grâce
à
la
constante
Sid
qui
est
une
chaîne
de
caractères
de
la
forme
session_name=session_id
(
ou
vide
)
,
–
automatiquement
si
Php4
a
été
compilé
avec
l'
option
--
enable-trans-sid
.

167
Gestion
du
sessions
Alcôve
-
Programmer
en
Php
Ex
:
compteur
de
visites
<
?

php
session_register("compteur")
;
$compteur++
;
?

à
vous
avez
vu
cette
page
<
?

echo
$compteur
;
?

>
foi
.

à
!

--
<
?

=SID
?

>
sert
à
conserver
le
numéro
de
session
au
cas
où
les
cookies
sont
desactivés
--
>
Pour
continuer
cliquez
à
href="compteur.php
?

<
?

=SID
?

>">ici</A>
168
Gestion
du
sessions
Alcôve
-
Programmer
en
php
Les
fonctions
les
plus
utilisées
sont
:
à
session_start()
:
crée
ou
restaure
une
session
,
à
session_destroy()
:
détruit
une
session
,
–
session_register()/session_unregister()
:
sauvegarde/oublie
une
variable
,
–
session_set_save_handler()
:
permet
de
définir
ses
propres
fonctions
de
sauvegarde
de
sessions
(
pour
stocker
les
données
dans
une
base
de
données
par
exemple
)
.

169
Section
3
Alcôve
-
Programmer
en
Php
Autres
fonctionnalités
170
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Récupération
et
traitement
du
erreurs
;
Les
cookies
.

171
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Récupération
et
traitement
du
erreurs
Il
existe
4
types
de
erreurs
et
de
alertes
Php
:
–
E_ERROR
(
1
)
:
erreur
de
exécution
à
E_WARNING
(
2
)
:
alerte
–
E_PARSE
(
4
)
:
erreur
de
analyse
à
E_NOTICE
(
8
)
:
notes
(
alertes
qui
peuvent
être
ignorées
)
Pour
définir
un
niveau
de
erreur
,
on
ajoute
les
chiffres
du
erreurs
que
l'
on
souhaite
prendre
en
compte
(
bitmask
par
défaut
7
=
4
p
2
p
1
)
;
172
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Ce
niveau
peut
être
changé
de
trois
manières
:
à
directive
error_reporting
dans
php3.ini/php.ini
,
–
directive
php3_error_reporting/error_reporting/error_reporting
dans
httpd.conf
,
à
fonction
error_reporting(
)
.

173
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Toutes
les
expressions
Php
peuvent
être
appelées
avec
le
préfixe
@
qui
permet
de
ignorer
le
rapport
de
erreur
pour
cette
fonction
particulière
;
si
une
erreur
survient
dans
une
telle
expression
,
et
que
l'
option
track_errors
est
activée
dans
php3.ini/php.ini
,
on
retrouve
le
message
de
erreur
dans
la
variable
globale
$php_errormsg
;
La
fonction
error_reporting()
établit
le
niveau
de
erreur
à
prendre
en
compte
et
renvoie
l'
ancien
niveau
;
174
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
La
fonction
error_log()
envoie
un
message
de
erreur
:
–
dans
les
logs
du
serveur
,
–
à
un
port
TCP
,
ou
–
à
un
fichier
.

Elle
prend
comme
paramètres
:
–
message
:
message
qui
doit
être
envoyé
,
–
message_type
:
type
de
transmission
choisi
:
0
:
système
standard
de
log
de
Php
,
1
:
mail
,
2
:
machine
distante
(
TCP/IP
)
,
ou
3
:
fichier
local
.

ex
:
error_log("Alerte
rouge
"
,
1
,
"
webmaster@monsite.fr
"
)
;
175
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Les
cookies
Les
cookies
sont
un
mécanisme
de
enregistrement
de
informations
sur
le
disque
du
client
mais
aussi
de
relecture
de
ces
informations
;
Ce
système
permet
de
authentifier
et
de
suivre
les
visiteurs
;
Php
supporte
les
cookies
de
manière
transparente
;
176
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Pour
envoyer
un
cookie
,
on
utilise
la
commande
setcookie()
;
Les
Cookies
font
partie
de
l'
entête
HTTP
,
ce
qui
impose
que
setcookie()
soit
appelée
avant
tout
affichage
sur
le
client
(
idem
header())
;
Avec
Php4
,
on
peut
contourner
cette
limitation
en
bufferisant
la
sortie
standard
grâce
à
la
fonction
ob_start()
pui
en
libérant
celle
-ci
grâce
à
la
fonction
ob_end_flush
;
On
peut
aussi
indiquer
à
Php4
de
bufferiser
automatiquement
la
sortie
grâce
à
l'
option
output_buffering
de
php.ini
mais
ceci
ralentit
sensiblement
Php4
;
177
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Tous
les
cookies
qui
sont
envoyés
au
client
sont
automatiquement
retournés
au
script
Php
et
placés
dans
le
tableau
associatif
$HTTP_COOKIE_VARS
;
Seuls
les
cookies
qui
correspondent
au
nom
de
domaine
de
la
page
demandée
sont
envoyés
au
serveur
par
le
navigateur
;
Pour
affecter
plusieurs
valeurs
à
un
seul
cookie
il
faut
ajouter
[
]
au
nom
du
cookie
;
178
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Ex
:
cookie_ecriture.php
<
?

php
setcookie("MonCookie
"
,
"
Contenu
"
,
time()
p
3600
)
;
?

à
<HTML><BODY><H1>
Maintenant
,
vous
l'
avez
!

<br>
Allez
sur
la
page
<a
href
=
"
cookie_lecture.php">précédente</a>
.

</H1></BODY></HTML>
179
Autres
fonctionnalités
Alcôve
-
Programmer
en
Php
Ex
(
suite
)
:
cookie_lecture.php
<HTML><BODY><H1>
<
?

php
if
(isset($HTTP_COOKIE_VARS["MonCookie"]))
:
?

à
Le
cookie
MonCookie
contient
:
<
?

php
print
$HTTP_COOKIE_VARS["MonCookie
"
]
;
else
:
?

à
vous
n'
avez
pas
le
cookie
MonCookie.<br>
Allez
le
chercher
<a
href
=
"
cookie_ecriture.php">ici</a>
.

<
?

php
endif
;
?

à
</H1></BODY></HTML>
180
Chapitre
4
Alcôve
-
Programmer
en
Php
Utilisation
avancée
181
Utilisation
avancée
Alcôve
-
Programmer
en
Php
Objectifs
du
chapitre
Interopérabilité
avec
des
applicatifs
;
Traitement
du
chaînes
de
caractères
;
Fonctionnalités
utiles
.

182
Section
1
Alcôve
-
Programmer
en
Php
Interopérabilité
avec
des
applicatifs
183
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Utilisation
du
Sgbds
;
Interfaçage
avec
l'
Api
Apache
;
Utilisation
de
Ldap
.

184
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Utilisation
du
Sgbds
Un
grand
nombre
de
S
ystèmes
de
g
estion
de
B
ases
de
d
onnées
(
Sgbd
)
sont
supportés
par
Php
;
La
plupart
sont
accessibles
via
le
langage
SQL
(
S
tructured
q
uery
L
angage
)
;
Celui
-ci
permet
,
comme
son
nom
l'
indique
,
de
réaliser
des
requêtes
sur
les
base
de
données
et
ceci
de
façon
structurée
et
standardisée
;
L'
utilisation
du
base
du
données
est
la
clé
de
voûte
du
sites
dynamiques
et
de
commerce
électronique
;
185
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Bases
SQL
supportées
:
Adabas
du
Empress
Ibm
DB2
Informix
Interbase
mSQL
MySQL
ODBC
(
Access
,
MS-SQL
,
iODBC
...
)
Oracle
PostgreSQL
Raima
Velocis
Solid
Sybase
Autres
Sgbd
supportés
:
à
dbase
,
à
filePro
(
lecture
seule
)
,
–
dbm
(
ndbm
,
gdbm
,
Berkeley
db
)
.

186
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Principales
commandes
SQL
:
à
CREATE
TABLE
:
crée
une
nouvelle
table
,
à
DELETE
:
supprime
du
lignes
de
une
table
,
–
INSERT
:
insère
une
nouvelle
ligne
dans
une
table
,
à
SELECT
:
récupère
du
lignes
de
une
table
ou
de
une
vue
,
à
UPDATE
:
modifie
du
valeurs
dans
des
champs
.

187
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Ex
:
création
et
alimentation
de
une
table
CREATE
TABLE
Personne
(
Secu
INT8
NOT
NULL
PRIMARY
Key
,
Nom
VARCHAR(20)
NOT
NULL
,
Prenom
VARCHAR(20)
NOT
NULL
)
INSERT
INTO
Personne
VALUES
(
’
132456789
’
,
’
Smith
’
,
à
John
’
)
INSERT
INTO
Personne
VALUES
(
’
987654321
’
,
à
Gates
’
,
’
Bill
’
)
188
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Ex
(
suite
)
:
affichage
de
la
table
et
suppression
de
une
entrée
SELECT
*
FROM
Personne
Secu
Nom
Prenom
132456789
Smith
John
987654321
Gates
Bill
DELETE
FROM
Personne
WHERE
Nom
=
’
Gates
’
189
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Chaque
base
SQL
possède
sa
propre
api
mais
les
mécanismes
de
consultation
sont
globalement
les
mêmes
pour
toutes
:
–
connexion
au
serveur
de
base
de
données
(
machine
,
utilisateur
,
mot
de
passe
)
,
à
sélection
de
la
base
à
utiliser
(
nom
de
la
base
)
,
à
requête
SQL
,
à
exploitation
de
la
requête
(
affichage
...
)
,
à
déconnexion
.

Bien
sûr
avant
de
utiliser
une
base
de
données
particulière
,
il
faut
s'
assurer
que
la
librairie
correspondante
est
chargée
dans
Php
;
190
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Pour
une
base
de
données
MySQL
,
il
faut
ajouter
la
ligne
extension=mysql.so
dans
le
fichier
php3.ini/php.ini
et
vérifier
que
le
fichier
mysql.so
se
trouve
bien
dans
le
répertoire
extension_dir
;
Les
fonctions
MySQL
les
plus
couramment
utilisées
sont
les
suivantes
:
à
mysql_connect()
:
ouvre
une
connexion
à
un
serveur
MySQL
,
–
mysql_list_*()
:
retournent
la
liste
du
base
,
tables
ou
champs
disponibles
sur
le
serveur
,
–
mysql_select_db()
:
selectionne
une
base
de
données
sur
le
serveur
,
191
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
–
mysql_query()
:
envoie
une
requête
SQL
sur
la
base
de
données
active
sur
le
serveur
et
renvoie
un
identifiant
de
résultat
:
mysql_result()
:
exploite
le
résultat
,
mysql_fetch_*()
:
exploitent
et
manipulent
le
résultat
,
mysql_field_*()
:
permettent
de
naviguer
au
sein
du
résultat
.

–
mysql_close()
:
ferme
la
connexion
au
serveur
MySQL
(
fait
par
défaut
à
la
fin
du
script
)
.

192
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Il
est
possible
de
réaliser
une
connection
persistante
à
un
serveur
MySQL
en
utilisant
la
fonction
mysql_pconnect()
;
Une
telle
connexion
ne
sera
pas
fermée
automatiquement
à
la
fin
du
script
;
Accélère
sensiblement
les
scripts
quand
les
connexions
à
la
base
sont
fréquentes
;
La
connexion
sera
refermée
automatiquement
après
un
certain
temps
de
inutilisation
;
193
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Ex
:
<
?

php
mysql_pconnect("db.mon-server.com
"
,
"
username
"
,
"
password
"
)
;
mysql_select_db("ma_base")
;
$resultat
=
mysql_query("SELECT
*
FROM
ma_table
"
)
;
if
(
$resultat
)
:
?

à
<TABLE>
<TR><TH>Nom</TH>
<TH>Description</TH></TR>
194
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
<
?

php
while
(
$tableau
=
mysql_fetch_array($resultat))
echo
"
<TR><TD>
"
,
$tableau["nom
"
]
,
"
</TD>
<TD>
"
,
$tableau["descr
"
]
,
"
</TD></TR>\n
"
;
?

à
</TABLE>
<
?

php
else
:
echo
"
Votre
table
est
vide
"
;
endif
;
?

>
195
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Il
existe
des
outils
de
administration
de
base
de
données
entièrement
écrits
en
Php
;
–
PHPMyAdmin
pour
les
base
MySQL
(
http
://www.phpwizard.net/phpMyAdmin/
)
,
–
PHPPgAdmin
pour
les
base
PostgreSQL
(
http
://www.phpwizard.net/phpPgAdmin/
)
.

Ces
outils
sont
très
utiles
pour
créer
les
base
de
données
avant
de
les
utiliser
dans
des
scripts
Php
;
Ils
sont
également
pratique
pour
maintenir
les
base
;
Ces
outils
étant
libres
,
leur
code
source
peut
servir
de
référence
pour
accéder
au
base
de
données
avec
Php
;
196
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Interfaçage
avec
l'
Api
Apache
La
fonction
getallheaders()
permet
de
récupérer
tous
les
en-têtes
HTTP
correspondant
à
la
requête
courante
;
Les
en-têtes
sont
stockés
dans
un
tableau
associatif
;
Ex
:
$headers
=
getallheaders()
;
while
(
list($header
,
$valeur
)
=
each($headers))
à
echo
"
$header
:
$valeur
<BR>\n
"
;
}
197
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Utilisation
de
Ldap
L
ightweight
du
irectory
à
ccess
p
rotocol
;
Protocole
normalisé
de
accès
au
services
de
annuaires
;
Un
annuaire
est
équivalent
à
une
base
de
données
où
les
informations
sont
rangées
de
manière
hiérarchique
;
Les
caractéristiques
de
Ldap
:
à
organisation
globale
,
à
standard
ouvert
,
à
extensible
et
paramétrable
,
–
stockages
de
données
hétérogènes
,
à
sécurisé
.

198
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Ldap
utilise
une
syntaxe
à
nom
distincts
(
dn
:
distinguished
names
)
;
Ex
:
dn
et
signification
dn
=
"
cn=Linus
Torvalds
,
ou=Devel
,
o=Transmeta
,
c=USA
"
country
à
USA
organization
=
Transmeta
organizationUnit
à
Devel
commonName
à
Linus
Torvalds
199
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Avant
de
pouvoir
utiliser
Ldap
avec
Php
,
il
faut
ajouter
la
ligne
extension
=
ldap.so
dans
php3.ini/php.ini
et
vérifier
que
la
librairie
ldap.so
se
trouve
bien
dans
le
répertoire
extension_dir
;
Une
séquence
type
de
consultation/modification
de
une
base
Ldap
avec
Php
prendra
la
forme
suivante
:
–
ldap_connect()
:
établit
une
connexion
avec
un
serveur
Ldap
,
–
ldap_bind()
:
liaison
et
authentification
sur
le
serveur
,
–
ldap_get_*()/ldap_add()/ldap_modify()
...
:
consultation/modification
de
la
base
,
à
ldap_close()
:
déconnexion
.

200
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
Ex
:
recherche
de
tous
les
dn
commançant
par
l
<
?

php
$ds
=
ldap_connect("ldap.mon-serveur.com")
;
if
(
$ds
)
{
ldap_bind($ds)
;
$sr
=
ldap_search($ds
,
"
ou=Devel
,
o=Transmeta
,
c=USA
"
,
"
dn=l*
"
)
;
$info
=
ldap_get_entries($ds
,
$sr
)
;
201
Interopérabilité
avec
des
applicatifs
Alcôve
-
Programmer
en
Php
for
(
$i=0
;
$i
à
$info["count
"
]
;
çiu
)
à
echo
"
dn
vaut
:
"
.

$info[$i]["dn
"
]
.

"
<br>
"
;
echo
"
première
entrée
cn
vaut
:
"
.

$info[$i]["cn"][0
]
.

"
<br>
"
;
echo
"
première
email
vaut
:
"
.

$info[$i]["mail"][0
]
.

"
<br>
"
;
}
ldap_close($ds)
;
}
else
à
echo
"
<H4>Impossible
de
se
connecter
au
serveur
LDAP</H4>
"
;
}
?

>
202
Section
2
Alcôve
-
Programmer
en
Php
Traitement
du
chaînes
de
caractères
203
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Manipulation
du
chaînes
de
caractères
;
Expressions
régulières
.

204
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Manipulation
du
chaînes
de
caractères
Affichage
:
à
echo()
:
affiche
une
ou
plusieurs
chaînes
séparées
par
des
virgules
,
à
print()
:
affiche
une
chaîne
,
–
printf()
:
affiche
une
chaîne
selon
une
chaîne
de
formatage
(
idem
langage
C
)
.

ex
:
$nom
=
"
toto
"
;
echo
"
Bonjour
"
,
$nom
;
#
affiche
Bonjour
toto
print
"
Bonjour
$nom
"
;
#
affiche
Bonjour
toto
printf("Bonjour
-s
"
,
$nom
)
;
#
affiche
Bonjour
toto
205
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Substitutions
:
–
addslashes()
:
ajoute
un
backslash
devant
tous
les
caractères
spéciaux
,
à
stripslashes()
:
enlève
les
backslashs
ajoutés
par
la
fonction
addslashes
,
–
str_replace()
:
remplace
toutes
les
occurrences
de
une
chaîne
par
une
autre
,
ex
:
print
addslashes(’\
’
\
"
’
)
;
#
affiche
\
’
\
\
"
print
str_replace("toto
"
,
"
titi
"
,
"
Bonjour
toto
!

"
)
;
#
affiche
Bonjour
titi
!

206
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Découpage
:
–
explode()
:
scinde
une
chaîne
en
morceaux
grâce
à
un
délimiteur
,
–
implode()/join()
:
regroupe
tous
les
éléments
de
un
tableau
dans
une
chaîne
en
ajoutant
une
chaîne
de
jointure
,
–
ltrim()/chop()
:
enlève
les
espaces
de
début/fin
de
chaîne
.

ex
:
$composants
=
"
resistance
,
condensateur
,
transistor
"
;
$composants
=
chop($composants)
;
$tableau
=
explode(
"
,
"
,
$composants
)
;
print
$tableau[2
]
.

"
.
"

;
à
affiche
transistor
.

207
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Web
:
–
rawurlencode()/rawurldecode()
:
encode/décode
une
chaîne
en
URL
selon
la
RFC1738
,
à
htmlspecialchars()/htmlentities()
:
converti
tous
les
caractères
spéciaux
en
équivalent
HTML
.

ex
:
$url
à
rawurlencode(’bonjour@toi
/toto/
’
)
;
print
$url
;
#
affiche
bonjour%40toi%20%2Ftoto%2F
$html
=
htmlentities("2
<
3
"
)
;
print
$html
;
#
affiche
2
<
3
mais
le
source
HTML
contient
2
<
3
208
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Comparaison
:
–
parse_str()
:
analyse
une
chaîne
et
en
déduit
du
variables
et
leur
valeur
,
–
strcmp()
:
comparaison
sensible
à
la
casse
,
à
strlen()
:
retourne
la
longueur
de
la
chaîne
.

ex
:
parse_str("toto=23&
tab[]=Ceci+fonctionne
&
tab[]=aussi
"
)
;
print
"
$toto
,
$tab[0
]
,
$tab[1
]
"
;
Affiche
23
,
Ceci
fonctionne
,
aussi
209
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Casse
:
–
strtolower()/strtoupper()
:
met
tous
les
caractères
en
minuscule/majuscule
,
à
ucfirst()
:
force
le
premier
caractère
de
une
chaîne
en
majuscule
,
–
ucwords()
:
force
le
premier
caractère
de
chaque
mot
de
une
chaîne
en
majuscule
.

ex
:
$nom
=
"
BiLL
GaTeZ
"
;
print
$nom
=
strtolower($nom)
;
#
affiche
bill
gatez
print
strtolower($nom)
;
#
affiche
Bill
Gatez
210
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Expressions
régulières
Les
expressions
régulières
(
abrv
:
regex
)
sont
utilisées
pour
faire
des
manipulations
complexes
sur
les
chaînes
de
caractères
(
ex
:
substitutions
ou
recherches
complexes
)
;
Php
gère
deux
types
de
expressions
régulières
:
à
les
expressions
régulières
avancées
de
Posix
,
et
à
les
expressions
régulières
modifiées
du
langage
Perl
.

211
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Principes
de
base
du
expressions
régulières
:
–
recherche
de
séquences
de
caractères
au
sein
de
une
chaîne
,
à
besoin
de
expressions
pour
décrire
ces
séquences
,
à
utilisation
de
une
syntaxe
puissante
,
–
équivaut
à
la
définition
de
conditions
de
recherche
.

212
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Signification
du
principales
expressions
régulières
:
–
c
:
caractère
c
(
sauf
caractères
spéciaux
)
,
à
\c
:
caractère
spécial
c
(
sauf
chiffres
de
1
à
9
)
,
–
ˆ
:
début
de
la
ligne
,
–
$
:
fin
de
la
ligne
,
–
.

:
n'
importe
quel
caractère
,
–
[
s
]
:
caractère
appartenant
à
l'
ensemble
s
,
où
s
est
une
suite
de
caractères
et/ou
une
échelle
de
caractères
(
[
c-c
]
)
,
213
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
–
[
-s
]
:
caractère
n'
appartenant
pas
à
l'
ensemble
s
,
–
r*
:
0
,
1
ou
plusieurs
occurrences
successives
de
l'
expression
régulière
r
,
à
rx
:
r
,
suivie
de
l'
expression
régulière
x
(
concaténation
)
,
–
r{m,n
}
:
un
nombre
(
entre
m
et
n
)
de
occurrences
successives
de
r
,
–
r{m
}
:
exactement
m
occurrences
successives
de
r
,
à
r{m
,
}
:
au
moins
m
occurrences
successives
de
l'
expression
régulière
r.
214
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Utilisation
avec
Php
:
–
ereg()/eregi()
:
expression
régulière
standard
sensible/insensible
à
la
casse
,
–
ereg_replace()/eregi_replace()
:
expression
régulière
de
substitution
sensible/insensible
à
la
casse
,
–
split()
:
découpe
une
chaîne
grâce
à
un
délimiteur
défini
par
une
expression
régulière
,
à
sql_regcase()
:
prépare
une
expression
régulière
insensible
à
la
casse
(
utile
pour
les
fonctions
ne
supportant
pas
les
recherches
insensible
à
la
casse
)
.

215
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
Ex
:
<
?

php
$personne
=
"
Nom
:
Smith
,
Prénom
:
John
,
Age
:
52
,
Divers
:
blond
"
;
if
(
ereg("blond
"
,
$personne
)
)
print
"
Cette
personne
est
blonde
.
"

;
à
Affiche
Cette
personne
est
blonde
.

if
(
eregi("age
:
çäë--9üüë
"
,
$personne
,
$resultat
)
)
print
"
Cette
personne
a
$resultat[1
]
ans
.
"

;
else
print
"
Cette
personne
n'
a
pas
d'
age
.
"

;
à
Affiche
Cette
personne
a
52
ans
.

216
Traitement
du
chaînes
de
caractères
Alcôve
-
Programmer
en
Php
print
eregi_replace("(age
:
)
çä
"
,
"
\1
68
"
,
$personne
)
;
#
Affiche
Nom
:
Smith
,
Prénom
:
John
,
Age
:
68
print
sql_regcase("John
Smith
"
)
;
#
Affiche
[
Jj][Oo][Hh][Nn
]
[
Ss][Mm][Ii][Tt][Hh
]
?

>
217
Section
3
Alcôve
-
Programmer
en
Php
Fonctionnalités
utiles
218
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Objectifs
de
la
section
Manipulation
et
traitement
du
fichiers
;
Arguments
et
gestion
du
URLs
;
Création
dynamique
de
image
;
Fonctions
mathématiques
;
Php
et
XML
;
Templates
avec
PHPlib
;
Utilisation
de
Php
comme
langage
de
script
.

219
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Manipulation
et
traitement
du
fichiers
Quel
que
soit
le
langage
de
programmation
,
la
gestion
du
fichiers
est
toujours
importante
pour
le
stockage
de
données
;
La
gestion
du
fichiers
en
Php
est
issue
du
langage
C
mais
elle
comporte
quelques
fonctions
supplémentaires
très
utiles
(
comme
la
gestion
du
fichiers
distants
par
exemple
)
;
220
Fonctionnalités
utiles
Alcôve
-
Programmer
en
php
Les
principales
fonctions
de
manipulation
de
fichiers
sont
les
suivantes
:
–
fopen()
:
ouverture
de
un
fichier
(
possibilité
de
fournir
une
URL
HTTP
ou
FTP
pour
les
fichiers
distants
)
,
à
fclose()
:
fermeture
du
fichier
,
–
fpassthru()
:
lit
un
fichier
en
entier
et
l'
affiche
,
–
fread()/fgets()
:
lit
n
caractères
dans
le
fichier
,
–
fwrite()/fputs()
:
écrit
une
chaîne
dans
un
fichier
,
–
rewind()/fseek()/ftell()
:
positionnement
au
sein
du
fichier
.

221
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
affichage
de
l'
image
image.png
<
?

php
Header("Content-type
:
image/png
"
)
;
if
(
!

äfd
=
fopen("image.png
"
,
"
rb
"
)
)
echo
"
Impossible
de
ouvrir
le
fichier
.
"

;
else
fpassthru($fd)
;
?

à
222
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex2
:
fichier
de
log
<
?

php
...
if
(
!

äfd
=
fopen("mon_error.log
"
,
"
a
"
)
)
echo
"
Impossible
de
ouvrir
le
fichier
.
"

;
else
fputs($fd
,
"
Erreur
:
$errormsg\n
"
)
;
#
Ecrit
le
dernier
message
de
erreur
renvoyé
dans
mon_error.log
...
?

à
223
Fonctionnalités
utiles
Alcôve
-
Programmer
en
php
Les
principales
fonctions
de
gestion
de
fichiers
sont
les
suivantes
:
–
file_exists()
:
test
de
l'
existence
de
un
fichier
,
à
copy()
:
copie
un
fichier
,
à
rename()
:
renomme
un
fichier
,
–
unlink()
:
efface
définitivement
un
fichier
.

ex
:
<
?

php
$fichier
=
"
toto.html
"
if
(file_exists($fichier))
copy($fichier
,
"
/tmp/
"
.

$fichier
)
;
else
echo
"
Impossible
de
ouvrir
le
fichier
.
"

;
?

à
224
Fonctionnalités
utiles
Alcôve
-
Programmer
en
php
Les
principales
fonctions
de
manipulation
du
répertoires
sont
les
suivantes
:
–
chdir()
:
changement
de
répertoire
courant
,
à
opendir()
:
ouverture
de
un
répertoire
,
–
closedir()
:
fermeture
du
répertoire
,
à
readdir()
:
lit
l'
entrée
suivante
dans
le
répertoire
,
–
rewinddir()
:
revient
au
début
du
répertoire
,
à
mkdir()
:
crée
un
nouveau
répertoire
,
–
rmdir()
:
supprime
un
répertoire
,
–
dir()
:
instanciation
de
un
objet
répertoire
pour
une
manipulation
objet
de
celui
-ci
,
225
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
équivalent
de
la
commande
ls
<
?

php
chdir("/tmp")
;
$dir
=
dir(".")

;
$dir->rewind()
;
while
(
$fichier
=
$dir->read())
echo
"
$fichier<br>
"
;
$dir->close()
;
?

à
226
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Arguments
et
gestion
du
URLs
La
gestion
du
URLs
est
importante
pour
encoder/décoder
des
informations
au
sein
même
de
celles
-ci
;
On
peut
utiliser
l'
URL
pour
transmettre
des
informations
(
variables
...
)
de
un
script
à
l'
autre
;
Ce
mécanisme
peut
constituer
une
mini-gestion
de
sessions
par
exemple
;
227
Fonctionnalités
utiles
Alcôve
-
Programmer
en
php
Les
principales
fonctions
utilisées
pour
la
gestion
du
URLs
sont
les
suivantes
:
à
parse_url
:
analyse
une
URL
et
retourne
ses
composants
sous
forme
de
un
tableau
associatif
,
à
urlencode/urldecode
:
encode/décode
une
chaîne
en
remplaçant
les
caractères
spéciaux
par
des
%xx
et
les
espaces
par
des
+
(
application/x-www-form-urlencode
)
,
à
base64_encode/base64_decode
:
encode/décode
une
chaîne
en
base64
pour
permettre
à
certains
systèmes
de
manipuler
les
informations
binaires
sur
8
bits
(
ex
:
corps
de
mail
)
.

228
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
transmission
de
une
variable
par
l'
URL
<
?

php
$chaine
=
"
Bonjour
tout
le
monde
?

"
;
?

>
à
href="mon-cgi
?

chaine=<
?

php
echo
urlencode($chaine)
;
?

>">Envoyer</A>
Appelle
le
script
Cgi
mon-cgi
avec
l'
URL
"
mon-cgi
?

chaine=Bonjour+tout+le+monde+%3F
"
229
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Création
dynamique
de
image
Php
n'
est
pas
limité
à
la
création
de
fichiers
HTML
,
il
peut
aussi
servir
à
générer
dynamiquement
des
image
(
PNG
,
Jpeg
,
Gif
)
;
Ces
image
peuvent
être
émises
directement
vers
le
client
ou
sauvegardées
sur
le
serveur
;
Elles
sont
très
pratiques
pour
dessiner
rapidement
des
graphiques
à
partir
de
données
dynamiques
(
ex
:
statistiques
du
site
,
résultats
de
un
sondage
...
)
;
230
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Pour
générer
des
image
,
Php
utilise
la
librairie
Gd
;
Celle
-ci
se
compose
de
un
ensemble
de
fonctions
qui
permettent
de
créer
des
image
dynamiques
de
qualité
avec
très
peu
de
code
;
Historiquement
,
le
format
Gif
est
le
premier
à
avoir
été
supporté
mais
aujourd’hui
on
lui
prefère
les
formats
Jpeg
et
surtout
PNG
,
le
format
le
plus
ouvert
de
tous
;
Bien
sûr
avant
de
utiliser
cette
librairie
il
faut
au
préalable
la
charger
dans
Php
en
ajoutant
la
ligne
extension=gd.so
dans
le
fichier
php3.ini/php.ini
et
en
vérifiant
que
le
fichier
gd.so
se
trouve
bien
dans
votre
extension_dir
;
231
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
L'
Api
est
très
intuitive
:
–
ImageCreate*()
:
pour
créer
une
image
blanche
ou
à
partir
de
une
image
existante
,
à
ImageColor*()
:
pour
définir
une
couleur
et
la
transparence
,
à
ImageString()
:
pour
écrire
du
texte
,
à
Image<forme>()
:
pour
dessiner
des
formes
géométrique
connue
(
rectangle
,
arc
,
ligne
,
polygone
...
)
,
–
ImageFill*()
:
pour
colorier
du
formes
,
à
Image<attribut>()
:
pour
connaître
un
attribut
(
largeur
,
hauteur
,
taille
...
)
de
l'
image
,
–
Image<type>()
:
pour
envoyer
une
image
de
type
PNG
,
Jpeg
ou
Gif
au
navigateur
,
–
ImageDestroy()
:
pour
détruire
l'
image
...
232
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Toutes
les
fonctions
de
l'
Api
manipulent
un
pointeur
sur
l'
image
courante
;
Ce
pointeur
est
retourné
par
la
fonction
ImageCreate*()
à
la
création
de
l'
image
;
Typiquement
,
on
crée
un
fichier
php
dont
le
seul
but
est
de
retourner
une
image
dynamique
;
233
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Les
arguments
pour
créer
l'
image
sont
alors
passés
dans
l'
URL
à
la
manière
du
formulaires
en
mode
GET
par
exemple
(
ex
:
<IMG
src
=
"
bouton.php
?

texte=TITRE+BOUTON">
)
Le
fichier
doit
retourner
un
en-tête
correspondant
à
l'
image
retournée
(
ex
:
Header("Content-type
:
image/gif
"
)
;
)
afin
que
le
navigateur
puisse
correctement
l'
afficher
;
On
peut
aussi
créer
une
fonction
qui
génère
l'
image
mais
cette
technique
est
moins
facile
à
utiliser
car
il
faut
s'
occuper
de
stocker
l'
image
pui
éventuellement
de
la
détruire
par
la
suite
;
234
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
génération
dynamique
de
boutons
,
bouton.php
<
?

php
Header("Content-type
:
image/gif
"
)
;
if
(
!

isset($texte))
$texte
=
"
"
;
çimage
=
ImageCreateFromGif("images/bouton.gif")
;
$couleur
à
ImageColorAllocate($image
,
255
,
255
,
255
)
;
$espace
=
(
Imagesxüëimage
-
7.5
*
strlen($texte))
/
2
;
ImageString($image
,
5
,
$espace
,
9
,
$texte
,
$couleur
)
;
Imagegifçimagef
;
ImageDestroy($image)
;
?

à
235
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Avant
:
<IMG
src
=
"
bouton.php
?

texte=Mon+titre">
Après
:
236
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Fonctions
mathématiques
Il
existe
deux
types
de
fonctions
mathématiques
dans
Php
:
à
les
fonctions
standards
,
qui
s'
appliquent
sur
des
entiers
long
(
double
)
,
et
à
les
fonctions
de
précision
où
les
nombres
sont
représentés
par
des
chaînes
de
caractères
.

La
constante
Müpi
est
définie
pour
le
nombre
Pi
;
237
Fonctionnalités
utiles
Alcôve
-
Programmer
en
php
Les
fonctions
standards
les
plus
utilisées
sont
les
suivantes
:
à
absçë
:
valeur
absolue
,
–
number_format()
:
formate
un
nombre
par
groupe
de
milliers
,
–
round()/ceil()/floor()
:
arrondis
,
–
max()/min()
:
encadrements
,
–
pow()/sqrt()
:
puissances
,
–
exp()/log()/log10()
:
exponentielles
et
logarithmes
,
238
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
–
cos()/sin()/tan()/acos()/asin()/atan()
:
trigonométrie
,
–
base_convert()/BinDec()/DecBin()/HexDec()/
DecHex()/OctDec()/DecOct()
:
changements
de
base
,
–
rand()/srand()/getrandmax()
:
nombres
pseudo-aléatoires
(
les
fonctions
mt_*
sont
meilleures
et
plus
rapides
)
.

239
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
$x
=
-12
;
print
sqrt(pow($x
,
2
)
)
.

"
=
"
.

absçëxà
;
#
Affiche
12
=
12
print
number_format(round(12550.49999999)
,
3
,
"
,
"
,
"
"
)
;
#
Affiche
12
550,000
print
cos(M_PI/4)
.

"
=
"
.

1/sqrt(2)
;
à
Affiche
0.70710678118655
=
0.70710678118655
240
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Php
et
XML
e
X
tensible
m
arkup
L
anguage
;
Standard
ouvert
de
description
de
données
;
Utilise
du
marqueurs
qui
,
à
la
différence
du
autres
ML
,
décrivent
les
données
et
non
pas
la
manière
dont
celles
-ci
doivent
être
affichées
(
ex
:
HTML
)
;
L'
utilisation
de
XML
avec
Php
nécessite
l'
installation
de
la
librairie
Expat
(
http
://www.jclark.com/xml/
)
et
la
compilation
de
Php
avec
l'
option
--
with-xml
;
depuis
la
version
1.3.7
de
Apache
,
la
librairie
Expat
est
directement
intégrée
au
serveur
web
;
241
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Le
module
XML
permet
de
créer
un
parseur
XML
appelant
des
fonctions
définies
par
l'
utilisateur
et
permettant
de
traiter
les
données
incluses
dans
les
tags
XML
;
Fonctions
principales
:
–
xml_parser_create()
:
crée
un
parseur
XML
et
retourne
un
descripteur
de
parseur
qui
sera
utiliser
par
les
autres
fonctions
,
à
xml_set_element_handler()
:
modifie
les
options
associées
à
un
parseur
(
sensibilité
à
la
casse
,
encodage
du
caractères
...
)
,
–
xml_set_character_data_handler()
:
définit
les
fonctions
à
appeler
à
l'
ouverture
et
à
la
fermeture
de
un
tag
XML
spécifique
,
–
xml_parse()
:
le
parseur
XML
,
–
xml_parser_free()
:
élimination
de
un
parseur
XML
de
la
mémoire
.

242
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
On
ne
peut
pas
directement
manipuler
un
parseur
XML
à
l'
intérieur
de
un
objet
php
;
Il
faut
pour
cela
définir
un
parseur
comme
variable
de
instance
de
l'
objet
et
passer
l'
objet
par
référence
à
la
fonction
xml_set_object()
;
ex
:
xml_set_object(parser
,
&
object
)
;
Par
la
suite
,
il
faut
utiliser
les
fonctions
xml_set_*()
avec
$this->parser
comme
identifiant
de
parseur
.

243
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Utilisation
du
templates
PHPlib
PHPlib
propose
une
classe
Template
permettant
de
séparer
le
squelette
HTML
de
une
page
,
du
traitement
du
données
permettant
de
modifier
dynamiquement
cette
page
;
Les
parties
dynamiques
de
la
page
sont
représentées
dans
le
code
HTML
par
des
identifiants
entourés
de
accolades
;
Ces
identifiants
seront
remplacées
par
leur
valeur
calculée
par
le
script
Php
;
244
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
le
template
(
expl.ihtml
)
<html><head>
<title>{LETITRE}</title>
</head
>
<body>
<br>Un
exemple
de
variable
:{ICI
}
</body></html>
245
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
(
suite
)
:
code
Php
utilisant
le
template
expl.ihtml
include("template.inc")
$tmpl
=
new
Template("rep-template")
;
$tmpl->set_file("main
"
,
"
expl.ihtml
"
)
;
$tmpl->set_var(array(
"
LETITRE"=>"Exemple
de
titre
"
,
"
ICI"=>"Un
message
"
)
)
;
$tpml->parse("out
"
,
"
main
"
)
;
$tmpl->p("out")
;
246
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Fonctions
associées
au
templates
:
–
template()
:
retourne
un
objet
Template
associé
au
répertoire
où
sont
stockés
les
squelettes
HTML
,
à
set_file()
:
associe
un
fichier
template
à
une
variable
qui
représente
celui
-ci
,
à
set_var()
:
affecte
une
valeur
à
un
nom
de
variable
du
template
,
Ces
deux
dernières
fonctions
peuvent
aussi
être
appelées
avec
comme
unique
argument
un
tableau
contenant
des
paires
clefs/valeurs
;
247
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
–
parse()
:
cette
fonction
substitue
la
valeur
de
toutes
les
variables
définies
dans
la
variable
de
référence
pui
stocke
(
ou
ajoute
)
le
résultat
dans
la
variable
cible
,
à
pçë
:
cette
fonction
affiche
la
valeur
de
la
variable
passée
en
argument
dans
le
navigateur
.

248
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Afin
de
pouvoir
traiter
des
éléments
répétitifs
(
tableaux
,
listes
de
sélection
...
)
,
on
peut
déclarer
des
blocs
dans
les
variables
manipulées
par
la
classe
Template
;
La
définition
utilise
les
commentaires
HTML
;
Ex
:
<form
action
=
"
{
PHPSELF}">
<select
name
=
"
variable">
à
!

--
BEGIN
monbloc
->
<option>{MUL
à
<
!

--
END
monbloc
->
</select>
<br><input
type="submit"></form>
249
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
(
suite
)
:
$tmpl
=
new
Template("rep-template")
;
$tmpl->set_file("main
"
,
"
expl.ihtml
"
)
;
$tmpl->set_bloc("main
"
,
"
monbloc
"
,
"
toto
"
)
;
$tmpl->set_var("PHPSELF
"
,
$PHP_SELF
)
;
for
(
$i
=
1
;
çi
<
10
;
çiu
)
{
$tmpl->set_var("MUL
"
,
çi
)
;
$tmpl->parse("toto
"
,
"
monbloc
"
,
true
)
;
}
$tpml->parse("out
"
,
"
main
"
)
;
$tmpl->p("out")
;
250
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Une
foi
un
bloc
défini
,
on
peut
le
répéter
en
spécifiant
true
comme
dernier
argument
de
la
fonction
parse
;
La
fonction
set_block($parent
,
$blocname
,
$name
)
indique
que
la
variable
$parent
contient
un
bloc
nommé
$blocname
.

Cette
fonction
enlève
le
bloc
de
$parent
et
le
remplace
par
une
variable
$name
.

251
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Utilisation
de
Php
comme
langage
de
script
On
peut
utiliser
toute
la
puissance
et
la
richesse
du
fonctions
de
Php
pour
faire
des
scripts
non
orientés
web
;
Il
faut
avoir
au
préalable
compilé
Php
comme
Cgi
(
la
cohabitation
entre
plusieurs
formes
de
Php
est
possible
sur
une
même
machine
)
;
La
commande
php
donne
alors
accès
à
un
shell
php
où
chaque
commande
Php
tapée
est
interprétée
immédiatement
;
252
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Bien
sûr
,
seules
les
commandes
encadrées
par
les
<
?

php
...
?

>
seront
interprétées
les
autres
étant
affichées
telles-quelles
;
L'
option
-q
permet
de
éviter
de
avoir
un
en-tête
HTTP
envoyé
avant
le
premier
affichage
;
Pour
réaliser
des
scripts
classiques
en
Php
il
suffit
de
faire
commencer
le
fichier
par
la
ligne
:
à
!

/usr/bin/php<version>
-q
253
Fonctionnalités
utiles
Alcôve
-
Programmer
en
Php
Ex
:
script
de
invite
login
,
login.php
#
!

/usr/bin/php<version>
-q
Bonjour
monsieur
<
?

php
echo
$USER
,
"
\n
"
?

>
,
vous
êtes
sur
la
machine
<
?

php
echo
$HOSTNAME
,
"
\n
"
?

>
En
vérifiant
que
les
variables
$USER
et
$HOSTNAME
sont
bien
exportées
par
le
shell
et
en
rendant
le
script
login.php
exécutable
(
chmod
u
login.php
)
la
commande
./login.php
affiche
:
Bonjour
monsieur
nom_login
,
vous
êtes
sur
la
machine
nom_machine
.

254
Section
4
Alcôve
-
Programmer
en
Php
Conclusion
255
Conclusion
Alcôve
-
Programmer
en
Php
Objectifs
du
chapitre
Conseils
de
programmation
Php
;
L'
avenir
de
Php
;
Références
;
Glossaire
.

256
Conclusion
Alcôve
-
Programmer
en
Php
Conseils
de
programmation
Php
Penser
en
matière
de
réutilisabilité
du
code
;
Ne
pas
lésiner
sur
les
commentaires
,
ils
aideront
les
autres
à
comprendre
votre
code
(
on
est
rarement
seul
à
travailler
sur
un
site
web
)
;
Segmenter
le
code
Php
pour
le
rendre
plus
clair
:
à
préférer
les
fonctions
courtes
et
mono-tâches
,
à
utiliser
des
fichiers
différents
...
257
Conclusion
Alcôve
-
Programmer
en
Php
Essayer
de
séparer
au
maximum
les
aspects
graphiques
(
charte
graphique
,
feuilles
de
styles
...
)
,
contenu
(
gestion
du
données
dynamiques
...
)
et
mise
en
forme
(
affichage
du
données
dynamiques
...
)
:
–
utilisation
de
fichiers
de
en-têtes
,
de
barres
de
navigation
et
de
pied
de
page
séparés
,
à
utilisation
de
fichiers
contenant
les
classes
manipulées
par
les
scripts
...
258
Conclusion
Alcôve
-
Programmer
en
Php
L'
avenir
de
Php
de
plus
en
plus
utilisé
sur
Internet
(
plusieurs
millions
de
domaines
différents
)
;
Php4
depuis
le
début
de
l'
année
2000
;
Cette
version
est
néanmoins
contestée
(
ex
:
Fsf
)
à
cause
de
ses
nouvelles
licences
;
Elle
apporte
cependant
plus
de
rapidité
(
ex
:
analyseur
Zend
)
et
de
nouvelles
fonctionnalités
natives
(
ex
:
gestion
du
sessions
...
)
;
259
Conclusion
Alcôve
-
Programmer
en
Php
Références
Livres
:
–
Professional
Php
Programming
(
Wrox
)
,
à
Programmation
Web
avec
Php
(
Eyrolles
)
,
à
Php
,
précis
&
concis
(
O’Reilly
)
,
à
Programmation
Php
(
CampusPress
)
...
260
Conclusion
Alcôve
-
Programmer
en
Php
URLs
:
–
Le
site
officiel
de
Php
(
http
://www.php.net
)
,
à
Documentation
officielle
en
anglais
(
http
://www.php.net/manual
)
,
à
Traduction
française
de
la
documentation
officielle
(
http
://dev.nexen.net/docs
)
,
à
Le
site
de
Zend
(
http
://www.zend.com
)
,
–
Développement
PHP/MySQL
chez
Nexen
(
http
://dev.nexen.net
)
261
Conclusion
Alcôve
-
Programmer
en
Php
–
Projets
libres
autour
de
Php
(
http
://www.phpwizard.net
)
,
–
Articles
techniques
sur
Php
(
http
://www.phpbuilder.com/
)
,
à
Le
site
officiel
de
PHPlib
(
http
://phplib.netuse.de
)
,
–
Site
Francophone
pour
l'
Aide
à
la
Programmation
en
Php
(
http
://www.phpfr.org
)
...
262
Conclusion
Alcôve
-
Programmer
en
Php
Glossaire
–
Apache
:
serveur
web
(
HTTP
)
le
plus
utilisé
sur
Internet
,
–
Browser
:
navigateur/butineur
de
page
web
,
à
Cgi
(
Common
Gateway
Interface
)
:
interface
de
communication
pour
la
création
de
programmes
capables
de
être
exécutés
par
un
serveur
HTTP
,
elle
permet
la
création
dynamique
de
page
du
côté
serveur
,
–
GET
:
méthode
HTTP
de
transmission
de
formulaires
via
les
URLs
(
données
encodées
dans
l'
URL
)
,
263
Conclusion
Alcôve
-
Programmer
en
Php
–
Gif
(
Graphics
Interchange
Format
)
:
format
breveté
de
image
compressés
,
très
utilisé
sur
le
web
,
à
HTML
(
Hyper
Text
Markup
Language
)
:
langage
de
description
structurale
de
documents
,
basé
sur
la
notion
de
environnement
et
de
délimiteurs
,
utilisé
pour
créer
les
page
web
,
à
HTTP
(
HyperText
Transfer
Protocol
)
:
protocole
de
transfert
de
fichiers
utilisé
sur
le
web
,
à
HTTPD
(
HTTP
Daemon
)
:
partie
principale
de
un
serveur
web
qui
échange
,
via
HTTP
,
des
fichiers
avec
les
clients
web
(
navigateurs
)
,
264
Conclusion
Alcôve
-
Programmer
en
Php
–
Jpeg
:
format
de
image
compressés
très
utilisé
sur
le
web
,
–
Ldap
(
Lightweight
Directory
Access
Protocol
)
:
protocole
normalisé
de
accès
au
services
de
annuaires
,
à
Php
(
Php
:
Hypertext
PreProcessor
)
:
langage
de
script
côté
serveur
,
embarqué
dans
les
page
HTML
,
–
PNG
(
Portable
Network
Graphics
)
:
format
libre
de
image
compressés
créé
pour
fournir
une
alternative
libre
au
format
Gif
,
265
Conclusion
Alcôve
-
Programmer
en
Php
–
POST
:
méthode
HTTP
de
transmission
de
formulaires
dans
le
corps
de
la
requête
(
alternative
à
la
méthode
GET
)
,
à
Regex
:
raccourci
pour
Regular
Expressions
,
syntaxe
pour
réaliser
des
manipulations
complexes
sur
les
chaînes
de
caractères
,
à
Session
Php
:
mécanisme
de
sauvegarde
de
informations
entre
deux
accès
(
requêtes
HTTP
)
,
–
Sgbd
:
Système
de
Gestion
de
Bases
de
Données
,
266
Conclusion
Alcôve
-
Programmer
en
Php
–
SQL
(
Structured
Query
Langage
)
:
langage
structuré
de
requête
pour
interroger
du
Sgbds
,
à
URL
(
Uniform
Resource
Locator
)
:
syntaxe
utilisée
pour
localiser
une
ressource
(
fichier
)
sur
le
web
(
ex
:
http
://www.php.net/index.html
)
–
Www
(
World
Wide
Web
)
:
aussi
appellé
web
,
c'
est
le
nom
donné
au
réseau
Internet
,
–
XML
(
eXtensible
Markup
Language
)
:
standard
ouvert
de
description
de
données
basé
sur
l'
utilisation
de
marqueurs
decrivant
les
données
qu'
ils
encapsulent
.

267

