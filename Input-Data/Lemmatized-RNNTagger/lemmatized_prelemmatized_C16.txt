Programmation
Web
:
Php
Avec
l'
aimable
autorisation
de
Jérôme
CUTRONA
Php
:
Langage
de
script
pour
le
Web

Qu'
est
-ce
que
Php
?








Langage
de
script
.

Utilisé
coté
serveur
Acronyme
récursif
:
Php
:
Hypertext
Preprocessor
Créé
en
1994-1995
par
Rasmus
Lerdorf
Extension
utilisée
sur
certains
serveurs
Web
(
33
%
)
Langage
multi
plate-forme
(
UNIX
/
Windows
…
)
Open
Source
Versions
actuelles
(
source
nexen.net
)
:

Php4
(
52
%
en
octobre
2008
)
à
PHP5
(
48
%
en
octobre
2008
)
10:11:04
Programmation
Web
2012-2013
2
Utilité
et
utilisation
de
Php
à
Création
de
page
HTML
«
dynamiques
»
,
fabriquées
à
la
volée
,
construite
à
la
demande
à
Interface
entre
un
serveur
Web
et
du
base
de
données
à
Création
de
applications
Web
10:11:04
Programmation
Web
2012-2013
3
Principales
fonctionnalités
de
Php









Manipulation
de
chaînes
et
tableaux
Calendrier
/
dates
/
heures
Fonctions
mathématiques
Accès
au
système
de
fichiers
Manipulation
de
image
HTTP
/
FTP
/
Imap
Bases
de
données
(
Oracle
,
MySQL
,
…
)
XML
…
10:11:05
Programmation
Web
2012-2013
4
Fonctionnement
de
Php
Requête
HTTP
du
client
(
(
(
port
hello.php
)
)
Rendu
Localisation
Connexion
Exécution
Fermeture
graphique
du
de
sur
de
du
code
la
le
la
code
connexion
serveur
du
ressource
Php
Php
données
dans
le
Envoi
résultat
au
client
Localisation
Rendu
Exécution
Fermeture
Connexion
Requête
graphique
HTTP
du
de
sur
de
du
code
la
le
la
code
du
connexion
serveur
du
ressource
client
Php
Php
données
(
port
hello.php
dans80
)
80
)
le
fichier
fichier
Envoi
du
du
résultat
au
client
çà
réponse
réponse
HTTP
HTTP
Client
Client
GET
Navigateur
GET
/hello.php
/hello.php
HTTP/1.0
HTTP/1.0
Réseau
•
HTML
Réseau
•
JavaScript
à
CSS
Protocole
Protocole
HTTP
HTTP
Exécution
Exécution
de
un
de
un
programme
programme
sur
sur
le
le
serveur
serveur
Construction
de
la
réponse
Construction
de
la
réponse
<<html
à
html>
çähead
headçë
Serveur
Serveur
<<title
title>>Hello
Hello</
</title
title>>
</
</head
headçë
Serveur
Web
.html
çäbody
body>>Hello
Hello
world
world</
</body
bodyçë
.php
à
</html
html>>
.jpg
Module
Php
MySQL
10:11:05
<
?

php
<
?

php
echo
hello.php
echo
çùë
<<<HTML
HTML
hello.php
<<html
>
html>
çähead
headçë
<<title
title>>Hello
Hello</
</title
title>>
</
</head
headçë
çäbody
body>>Hello
Hello
world
world</
</body
bodyçë
à
</html
html>>
HTML
;
HTML
;
Programmation
Web
2012-2013
5
Fonctionnement
de
Php
Client
à
Serveur
1
.

2
.

3
.

4
.

5
.

Connexion
TCP
sur
le
serveur
(
port
80
)
Requête
HTTP
du
client
(
mon_fichier.php
)
Localisation
de
la
ressource
Exécution
du
code
Php
Envoi
du
résultat
de
l'
exécution
au
client
=
réponse
HTTP
6
.

Fermeture
de
la
connexion
7
.

Rendu
graphique
du
données
(
HTML
,
image
,
…
)
10:11:05
Programmation
Web
2012-2013
6
Programme
en
Php
Délimitation
du
code
Php
dans
le
fichier
.php
:

<
?

php
Code
Php
?

à
Fermeture
Fermeture
optionnelle
optionnelle
à
<script
language="PHP">
Confusion
Confusion
avec
avec
JavaScript
JavaScript
à

àà
bannir
bannir
!

!
!

!

Code
php
</script>


<
?

Code
php
?

>
<
%
Code
Php
%>
10:11:06
Dépend
Dépend
de
de
la
la
configuration
configuration
short_open_tag
short_open_tag
du
du
serveur
serveur
asp_tags
asp_tags
à

àà
bannir
bannir
!

!
!

!

Programmation
Web
2012-2013
7
Eléments
de
syntaxe
Php

La
syntaxe
de
Php
ressemble
à
celle
de
famille
"
C
"
(
C
,
C++
,
Java
,
…
)

Chaque
instruction
se
termine
par
"
;
"

Commentaires
:
/*
jusque
au
prochain
*/
//
jusque
à
la
fin
de
la
ligne
#
jusque
à
la
fin
de
la
ligne
10:11:06
Programmation
Web
2012-2013
8
Les
variables
et
les
types
de
données

Tout
identificateur
commence
par
"
$
"

Les
affectations
sont
réalisées
grâce
à
"
=
"

Numérique
entier
:
12
ou
réel
:
1.54

Chaîne
:
"
Hello
"
ou
à
Bonjour
’

Booléen
:
true
,
false
(
Php
4
)

Tableau
:
$tab[2]=12

Objet
(
Php4
,
PHP5
)
à
Ressource
à
NULL

Le
type
de
une
variable
est
dynamique
et
est
déterminé
par
la
valeur
qui
lui
est
affectée
10:11:06
Programmation
Web
2012-2013
9
Typage
faible
.

Exemple
//
Pas
de
déclaration
de
variable
$test
=
1.5
;
//
Réel
$test
=
12
;
//
Entier
$test
=
array()
;
//
Tableau
$test
=
"
10
"
;
//
Chaîne
echo
$test
;
//
10
10:11:07
Programmation
Web
2012-2013
10
Typage
automatique
.

Exemple
$nombre1
$nombre2
$chaine1
$chaine2
=
=
=
=
1.5
;
12
;
"
10
"
;
'
coucou
'
;
//
//
//
//
Réel
Entier
Chaîne
Chaîne
$total
à
$nombre1
p
$nombre2
p
$chaine1
p
$chaine2
;
1.5
1.5
12
12
"
10
"
"
10
"
13.5
13.5
10
10
23.5
23.5
echo
$total
;
//
23.5
Réel
10:11:07
'
coucou
'
'
coucou
'
Programmation
Web
2012-2013
00
23.5
23.5
11
Les
chaînes
de
caractères
Substitution
de
variables
dans
les
chaînes
à
Guillemets
simples
à
à
$a='chaîne
'
;
$b='voici
une
ça
'
;

Guillemets
doubles
à

$a="chaîne
"
;
$b="voici
une
ça
"
;

Syntaxe
HereDoc
à

10:11:07
$a="chaîne
"
;
$b=<<<MARQUE_DE_FIN
voici
une
ça
sur
deux
lignes
;
-
)
MARQUE_DE_FIN
;
chaîne
chaîne
voici
voici
une
une
ça
$a
chaîne
chaîne
voici
voici
une
une
chaîne
chaîne
chaîne
chaîne
voici
voici
une
une
chaîne
chaîne
sur
sur
deux
deux
lignes
lignes
;
-
)
;
-
)
Programmation
Web
2012-2013
12
Concaténation
de
chaînes


Permet
de
assembler
plusieurs
chaînes
Réalisé
grâce
à
l'
opérateur
point
:
.

"
Bonjour
"
.

"
Marcel
"

vaut
"
Bonjour
Marcel
"
$nb
=
6*2
;
"
Acheter
"
.

$nb

vaut
10:11:08
.

"
œuf
"
"
Acheter
12
œuf
"
Programmation
Web
2012-2013
13
La
commande
echo

Permet
de
envoyer
du
texte
au
navigateur
du
client
(
à
écrire
à
la
page
au
format
HTML
résultant
de
l'
interprétation
de
Php
)


echo
"
Bonjour
"
;
$nom="Marcel
"
;
echo
"
Bonjour
$nom
"
;

Plus
généralement
,
permet
de
envoyer
des
octets
au
navigateur
du
client
à


10:11:08
Ficher
HTML
,
XML
,
CSS
,
JavaScript
,
…
Données
de
une
image
Contenu
de
un
ficher
Pdf
,
Flash
,
etc
.

Programmation
Web
2012-2013
14
Hello
world
!

Interprétation
Interprétation
du
du
code
code
Php
Php
sur
sur
le
le
serveur
serveur
<
?

php
Serveur
du
Navigateur
<
?

php
et
transmission
résultat
au
client
et
transmission
du
résultat
au
client
$$debut
debut
çà
<<<
<<<HTML
HTML
<<html
html>>
çähead
headçë
<<title
title>>hello
hello</
</title
title>>
</
</head
headçë
<<body
body>>\n
\n
HTML
HTML
;
;
$$corps
corps
==
"
"
Hello
Hello
world
!

world
!

\n
\n
"
;
"
;
$$fin
==
<<<
fin
<<<HTML
HTML
</
</body
bodyçë
à
</html
html>>
HTML
HTML
;
;
/*
/*
Envoi
Envoi
au
au
client
client
*/
*/
echo
echo
$$debut
debut.$
.$corps
corps.$
.$fin
fin
;
;
<<html
html>>
çähead
headçë
<<title
title>>hello
hello</
</title
title>>
</
</head
headçë
<<body
bodyçë
Hello
Hello
world
!

world
!

à
</body
bodyçë
à
</html
html>>
Impossible
Impossible
de
de
voir
voir
le
le
code
code
Php
Php
depuis
depuis
le
le
navigateur
navigateur
!

!

!

!

10:11:08
Programmation
Web
2012-2013
15
Les
opérateurs
arithmétiques
bb
somme
bb
Différence
$b
Multiplication
ça
p
*
/
$b
Division
$a
%
bb
Modulo
(
Reste
de
la
division
entière
)
$a
$a
$a
10:11:09
Programmation
Web
2012-2013
16
Les
opérateurs
de
in-
et
de
dé-crémentation
pré-
et
post-fixés
çauu
++$a
$a
--
--
ça
10:11:09
Retourne
la
valeur
de
ça
pui
augmente
la
valeur
de
$a
de
1
Augmente
la
valeur
de
$a
de
1
pui
retourne
la
nouvelle
valeur
de
$a
Retourne
la
valeur
de
ça
pui
diminue
la
valeur
de
$a
de
1
Diminue
la
valeur
de
$a
de
1
pui
retourne
la
nouvelle
valeur
de
$a
Programmation
Web
2012-2013
17
Les
opérateurs
de
comparaison
==
bb
$a
!

à
bb
$a
<
bb
$a
>
bb
$a
çù
bb
$a
çù
bb
$a
===
bb
$a
!

==
bb
$a
10:11:09
Vrai
si
égalité
entre
les
valeurs
de
$a
et
bb
Vrai
si
différence
entre
les
valeurs
de
$a
et
bb
Vrai
si
$a
inférieur
à
bb
Vrai
si
$a
supérieur
à
bb
Vrai
si
$a
inférieur
ou
égal
à
bb
Vrai
si
$a
supérieur
ou
égal
à
bb
Vrai
si
$a
et
$b
identiques
(
valeur
et
type
)
Vrai
si
$a
et
$b
différents
(
valeur
ou
type
)
Programmation
Web
2012-2013
18
Les
opérateurs
logiques
and
[
Expr2
]
[
Expr1
]
&&
[
Expr2
]
[
Expr1
]
or
[
Expr2
]
[
Expr1
]
||
[
Expr2
]
[
Expr1
]
[
Expr1
]
!

10:11:10
xor
Vrai
si
[
Expr1
]
et
[
Expr2
]
sont
vraies
idem
Vrai
si
[
Expr1
]
ou
[
Expr2
]
sont
vraies
idem
Vrai
si
[
Expr1
]
ou
[
Expr2
]
sont
vraies
[
Expr2
]
mais
pas
les
deux
[
Expr1
]
Vrai
si
[
Expr1
]
est
non
vraie
Programmation
Web
2012-2013
19
Les
opérateurs
sur
bits
$a
$a
ça
&
|
^
bb
ET
binaire
bb
OU
binaire
bb
XOR
binaire
~
$a
$a
çù
bb
$a
çù
bb
10:11:10
Inversion
bit
à
bit
ça
décalé
à
gauche
de
$b
rangs
$a
décalé
à
droite
de
$b
rangs
Programmation
Web
2012-2013
20
Précédence
du
opérateurs
10:11:10
Programmation
Web
2012-2013
21
Précédence
du
opérateurs
En
En
cas
cas
de
de
doute
,
doute
,
utilisez
utilisez
les
les
parenthèses
parenthèses
;
-
)
;
-
)
10:11:11
Programmation
Web
2012-2013
22
Structure
de
contrôle
Si…Alors…Sinon
à
if
(
condition
)
{
/*
Bloc
de
instructions
exécuté
si
la
condition
est
vraie
*/
}
[
else
à
/*
Bloc
de
instructions
exécuté
si
la
condition
est
fausse
*/
}
]
10:11:11
Programmation
Web
2012-2013
23
Structure
de
contrôle
Tant
que
à
faire
…
while
(
condition
)
{
/*
Bloc
de
instructions
répété
tant
que
la
condition
est
vraie
*/
}
do
{
/*
Bloc
de
instructions
exécuté
une
foi
pui
répété
tant
que
la
condition
est
vraie
*/
}
while
(
condition
)
;
10:11:11
Programmation
Web
2012-2013
24
Structure
de
contrôle
Tant
que
à
faire
…
for(avant
;
condition
;
fin_chaque_itération
)
{
/*
Bloc
de
instructions
répété
tant
que
la
condition
est
vraie
*/
}
Équivalent
à
:
avant
;
while
(
condition
)
à
/*
Bloc
de
instructions
répété
tant
que
la
condition
est
vraie
*/
fin_chaque_itération
;
}
10:11:12
Programmation
Web
2012-2013
25
Structure
de
contrôle
switch
à
switch
(
val
)
à
case
v1
:
instructions
case
v2
:
instructions
à
exécutées
si
val==v1
exécutées
si
val==v2
ou
si
val==v1
à
default
:
instructions
dans
tous
les
cas
10:11:12
Programmation
Web
2012-2013
26
L'
instruction
break
Permet
de
sortir
de
une
structure
de
contrôle
switch
(
val
)
à
case
v1
:
instructions
exécutées
si
val==v1
break
;
/*
On
sort
du
switch
si
val==v1
*/
case
v2
:
instructions
exécutées
si
val==v2
ou
si
val==v1
break
;
/*
On
sort
du
switch
si
val==v2
*/
à
default
:
instructions
exécutées
dans
tous
les
cas
si
val
!

=v1
et
val
!

=v2
}
10:11:12
Programmation
Web
2012-2013
27
Les
tableaux

Création
/
initialisation
:
$tab1=array(12
,
"
fraise
"
,
2.5
)
;
$tab2[
]
$tab2[
]
$tab2[
]
=
=
=
12
;
"
fraise
"
;
2.5
;
$tab3[0
]
=
12
;
$tab3[1
]
=
"
fraise
"
;
$tab3[2
]
=
2.5
;
10:11:13
Programmation
Web
2012-2013
Clé
Valeur
0
12
1
"
fraise
"
2
2.5
28
Les
tableaux
«
à
trous
»

Les
éléments
du
tableaux
ne
sont
pas
forcement
de
indices
consécutifs
:
$tab4[0
]
$tab4[1
]
$tab4[2
]
$tab4[5
]
=
=
=
=
12
;
"
fraise
"
;
2.5
;
"
el5
"
;
Clé
Valeur
0
12
1
"
fraise
"
2
3
4
5
2.5
"
el5
"
à
Comment
parcourir
de
tels
tableaux
?

10:11:13
Programmation
Web
2012-2013
29
Les
tableaux
«
à
trous
»
(
suite
)
4
Parcours
classique
:
for
(
$i=0
;
çi
<
sizeof($tab4)
;
çiu
)
{
echo
"
tab4[$i
]
:
"
.

$tab4[$i
]
.

"
<BR>\n
"
;
à
Clé
Valeur
?

10:11:13
Programmation
Web
2012-2013
0
1
12
"
fraise
"
2
3
2.5
4
5
"
el5
"
30
Structure
de
contrôle
Pour
chaque
…
foreach
(
$tableau
as
$element
)
à
/*
Bloc
de
instructions
répété
pour
chaque
élément
de
$tableau
*/
/*
Chaque
élément
de
$tableau
est
accessible
grâce
à
$element
*/
}
10:11:14
Programmation
Web
2012-2013
31
Parcours
de
tableau
:
foreach
Php
…
$tab4[0
]
=
12
;
$tab4[1
]
=
"
fraise
"
;
$tab4[2
]
=
2.5
;
$tab4[5
]
=
"
el5
"
;
foreach($tab4
as
$v
)
{
echo
"
Val
:
$v<br>\n
"
;
}
…
10:11:14
HTML
…
Val:12<br>\n
Val:fraise<br>\n
Val:2.5<br>\n
Val:el5<br>\n
à
Programmation
Web
2012-2013
Navigateur
32
Tableaux
associatifs
à
Tableaux
dont
l'
accès
au
éléments
n'
est
plus
réalisé
grâce
à
un
index
(
0,1
,
…
)
mais
grâce
à
une
clé
de
type
entier
ou
chaîne
.


Exemples
de
clés
:
$tab['un
'
]
=
12
;
$tab[205
]
=
"
bonjour
"
;
$tab["la
à
Création
valeur
"
]
$tab
=
array(cle1
=>
cle2
=>
=
3.0
;
val1
,
val2
,
…
)
;
10:11:14
Programmation
Web
2012-2013
33
Tableaux
associatifs
-
Exemples
$tab5['un
'
]
$tab5['trois
'
]
$tab5["deux
"
]
$tab5[42
]
=
=
=
=
12
;
"
fraise
"
;
2.5
;
"
el5
"
;
Clé
"
un
"
10:11:15
çù
çù
çù
çù
12
"
trois
"
"
fraise
"
"
deux
"
2.5
42
$tab6
=
array('un
'
'
trois
'
"
deux
"
42
Valeur
"
el5
"
12
,
"
fraise
"
,
2.5
,
"
el5
"
)
;
Programmation
Web
2012-2013
34
Structure
de
contrôle
Pour
chaque
…
foreach($tableau
as
$cle
=>
$element
)
{
/*
Bloc
de
instructions
répété
pour
chaque
élément
de
$tableau
*/
/*
Chaque
élément
de
$tableau
est
accessible
grâce
à
$element
*/
/*
La
clé
de
accès
à
chaque
élément
est
donnée
par
$cle
*/
}
10:11:15
Programmation
Web
2012-2013
35
Parcours
de
tableau
<
?

php
<
?

php
$$html
html
çà
<<<
<<<HTML
HTML
<<html
html>>
çähead
headçë
><title
title>>foreach
foreach
clé
clé</
</title
title>>
</
</head
headçë
<<body
bodyçë
HTML
HTML
;
;
$$tab6
=>
tab6
==
array
array((''un
un
''
=>
12
12
,
,
'
'
deux
çù
deux
''
çù
"
"
fraise
fraise
"
,
"
,
"
"
trois
trois
"
"
çù
çù
2.5
2.5
,
,
"
"
quatre
quatre
"
"
çù
çù
"
"
el5
el5
"
"
)
)
;
;
foreach
foreach
(
(
$$tab6
tab6
as
as
$$cle
cle
=>
çù
$$val
val
)
)
{
{
$$html
html
.=
.=
"
"
tab[
tab[$$cle
cle
]
:
]
:
$$val
val<br>
<br>\n
\n
"
"
;
;
}
}
echo
echo
$$html
html
.
.
"
"
</
</body
body>\n</
>\n</html
html>>
"
"
;
;
10:11:15
Programmation
Web
2012-2013
36
Exemple
de
génération
de
code
HTML
<
?

php
<
?

php
$$html
html
çà
<<<
<<<HTML
HTML
à
!

DOCTYPE
<
!

DOCTYPE
html
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
html>>
çähead
headçë
<<meta
meta
http-equiv
http-equiv=="Content-Type
"
"
Content-Type
"
content
content=="text/html
;
"
text/html
;
charset=iso-8859-1
"
charset=iso-8859-1">>
<<title
title>Boucle</
>Boucle</title
title>>
</
</head
headçë
<<body
bodyçë
HTML
;
HTML
;
for
for
(
(
$$ii==1
;
1
;
$$ii<<20
;
20
;
$$ii++
++
)
)
{
{
$$html
html
.=
.=
"
"
Le
Le
serveur
serveur
compte
...
compte
...
"
"
.
.
$$ii
.
.
"
"
<br>
<br>\n
"
\n
"
;
;
}
}
$$html
html
.=
.=
çùë
<<<HTML
HTML
</
body
à
</body>
à
</html
html>>
HTML
;
HTML
;
echo
echo
$$html
html
;
;
10:11:16
Programmation
Web
2012-2013
37
Traitement
du
données
de
formulaires

Php
permet
de
traiter
les
données
saisies
grâce
à
un
formulaire
HTML
si
le
champ
ACTION
du
formulaire
désigne
une
page
Php
du
serveur
.


Après
récupération
par
le
serveur
Web
,
les
données
sont
contenues
dans
l'
une
du
variables
superglobales
de
type
tableau
associatif
$_GET
ou
$_POST
(
ou
$_REQUEST
)
.

à
La
valeur
peut
être
trouvée
grâce
à
une
clé
qui
porte
le
même
nom
que
le
champs
du
formulaire
de
la
page
HTML
de
saisie
.

10:11:16
Programmation
Web
2012-2013
38
Traitement
du
données
de
formulaires
Réseau
Réseau
Client
Client
Navigateur
•
HTML
nomPers=robert
nomPers=robert
à
JavaScript
à
CSS
<<html
html>>
çähead
headçë
Serveur
Serveur
nomPers
<<title
nomPers
title>>bonjour
bonjour</
</title
title>>
</
</head
head>>
Serveur
Web
<
?

php
<
?

php
çäbody
bodyçë
à
$html
html
çà
çùë
<<<HTML
HTML
Bonjour
Bonjour
robert
robert
!

!

à
html
à
<html>
</
</body
bodyçë
<
<head
headçë
><title
title>>bonjour
bonjour</
</title
title></
></head
head>>
</
html
à
html>>
Php
Module
çäbody
bodyçë
HTML
HTML
;
;
$$html
html
.=
.=
"
"
Bonjour
Bonjour
"
"
.$
.$_GET
_GET[[''nomPers
nomPers'']].
.
"
"
!

!\n
\n
"
"
;
;
echo
echo
$$html
html
.
.
"
"
</
</body
body>>\n
\n</
</html
html>>
"
"
;
;
robert
robert
10:11:17
Programmation
Web
2012-2013
39
Exemple
–
Formulaire
HTML
<
!

DOCTYPE
<
!

DOCTYPE
html
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
html>>
çähead
headçë
<<title
title>>formulaire
formulaire</
</title
title>>
</
</head
headçë
çäbody
bodyçë
<<form
form
action
action==""valide1.php
valide1.php
"
"
method
method==""get
get"">>
Nom
:
Nom
:
<<input
input
type
type==""text
text
"
"
name
name==""nomPers
nomPers"">>
<<input
input
type
type==""submit
submit
"
"
value
value==""Envoyer
Envoyer"">>
à
</form
form>>
à
</body
bodyçë
à
</html
html>>
10:11:17
Programmation
Web
2012-2013
40
Exemple
–
Traitement
en
php
<
?

php
<
?

php
$$html
html
çà
<<<
<<<HTML
HTML
à
!

DOCTYPE
html
à
!

DOCTYPE
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
à
html>
çähead
headçë
$$_GET
<<title
_GET[[''nomPers
nomPers
''
]
]
title>>Validation
Validation</
</title
title>>
</
</head
head>>
est
-il
défini
?

?

est
-il
défini
<<body
à
bodyà
HTML
HTML
;
;
if
if
(
(
isset
isset(($$_GET
_GET[[''nomPers
nomPers
''
]
]
)
)
)
)
$$_GET
_GET[[''nomPers
nomPers
''
]
]
{
{
est
-il
est
-il
vide
vide
?

?

if
if
(
(
!

!empty
empty(($$_GET
_GET[[''nomPers
nomPers
''
]
]
)
)
)
)
{
{
$$html
html
.=
.=
"
"
vous
vous
avez
avez
saisi
saisi
'
'
"
"
.$
.$_GET
_GET[[''nomPers
nomPers'']]..""''\n
\n
"
"
;
;
}
à
else
else
$$html
html
.=
.=
"
"
Aucune
Aucune
valeur
valeur
saisie
saisie\n
\n
"
;
"
;
}
à
else
else
$$html
html
.=
.=
"
"
Utilisation
Utilisation
incorrecte
incorrecte\n
\n
"
"
;
;
echo
echo
$$html
html
.
.
"
"
</
</body
body>>\n
\n</
</html
html>>
"
"
;
;
10:11:17
Programmation
Web
2012-2013
41
Formulaires
contenant
des
champs
à
SELECT
»
10:11:18
Programmation
Web
2012-2013
42
Formulaires
contenant
des
champs
à
SELECT
unique
»
<
!

DOCTYPE
<
!

DOCTYPE
html
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
html>>
çähead
head>>
<<title
title>>Formulaire
Formulaire
de
de
saisie
saisie
du
du
fruits
fruits</
</title
title>>
</
</head
headçë
çäbody
bodyçë
<<form
form
action
action==""valide3.php
valide3.php
"
"
method
method==""get
get"">>
Choisissez
Choisissez
du
du
fruits
:
fruits:&nbsp
;
&nbsp
;
<<select
select
name
name==""sel
sel"">>
<<option
option>>Fraise
Fraise
<<option
option>>Pomme
pomme
<<option
option>>Poire
Poire
Envoyer
Envoyer
<<option
option>>Banane
Banane
<<option
option>>Cerise
Cerise
</
</select
select>>
<<input
input
type
type==""submit
submit
"
"
value
value==""envoyer
envoyer"">>
à
</form
form>>
</
</body
bodyçë
valide3.php
?

valide3.php
?

sel=Pomme
sel=Pomme
à
html
à
</html>
10:11:18
Programmation
Web
2012-2013
43
Formulaires
contenant
des
champs
à
SELECT
multiple
à
<
!

DOCTYPE
html
PUBLIC
"
-//W3C//DTD
HTML
4.01
Transitional//EN">
<html>
<head>
<title>Formulaire
de
saisie
du
fruits</title>
</head>
<body>
<form
action="valide3.php
"
method="get">
Choisissez
du
fruits:&nbsp
;
<select
name="sel
"
multiple>
<option>Fraise
<option>Pomme
<option>Poire
Envoyer
à
option>Banane
Envoyer
<option>Cerise
</select>
<input
type="submit
"
value="envoyer">
</form>
valide3.php
?

</body>
valide3.php
?

sel=Pomme&sel=Poire
sel=Pomme&sel=Poire
</html>
10:11:18
Programmation
Web
2012-2013
?

?
?

?

?
?

44
Formulaires
contenant
des
champs
à
SELECT
multiple
»
<html>
<head>
<title>Formulaire
de
saisie
du
fruits</title>
</head>
<body>
<form
action="valide3.php
"
method="get">
Choisissez
du
fruits:&nbsp
;
<select
name="sel[
]
"
multiple>
<option>Fraise
<option>Pomme
<option>Poire
Envoyer
Envoyer
<option>Banane
<option>Cerise
</select>
<input
type="submit
"
value="envoyer">
</form>
valide3.php
?

valide3.php
?

sel%5B%5D=Pomme&sel%5B%5D=Poire
sel%5B%5D=Pomme&sel%5B%5D=Poire
</body>
valide3.php
?

</html>
valide3.php
?

sel[]=Pomme&sel[]=Poire
sel[]=Pomme&sel[]=Poire
10:11:19
Programmation
Web
2012-2013
45
Traitement
du
données
du
champs
«
SELECT
»
<
?

php
<
?

php
$$html
html
çà
<<<
<<<HTML
HTML
à
!

DOCTYPE
<
!

DOCTYPE
html
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
html>>
çähead
headçë
<<title
title>>Liste
Liste
de
de
fruits
fruits</
</title
title>>
$$_GET
_GET[[‘‘sel
sel
''
]
]
</
head
à
</head>
est
est
un
un
tableau
tableau
çäbody
bodyçë
HTML
HTML
;
;
if
if
(
(
isset
isset(($$_GET
_GET[[''sel
sel
''
]
)
]
)
&&
&&
!

!empty
empty(($$_GET
_GET[[''sel
sel
''
]
)
)
]
)
)
{
{
/*
La
variable
$_GET['sel
'
]
est
définie
/*
La
variable
$_GET['sel
'
]
est
définie
et
et
elle
elle
n'
est
n'
est
pas
pas
vide
vide
*/
*/
foreach
foreach(($$_GET
_GET[[''sel
sel
''
]
]
as
as
$$fruit
fruit
)
)
$$html
html
.=
.=
"
"
vous
vous
avez
avez
choisi
choisi
$$fruit
fruit<br>
<br>\n
\n
"
"
;
;
}
à
else
else
$$html
html
.=
.=
"
"
vous
vous
n'
avez
n'
avez
pas
pas
choisi
choisi
de
de
fruit
fruit\n
\n
"
"
;
;
echo
echo
$$html
html
.
.
"
"
</
</body
body>>\n
\n</
</html
html>>
"
"
;
;
10:11:19
Programmation
Web
2012-2013
46
Résultat
10:11:19
Programmation
Web
2012-2013
47
Formulaires
contenant
des
champs
à
CHECKBOX
»
10:11:20
Programmation
Web
2012-2013
48
Formulaires
contenant
des
champs
à
CHECKBOX
»
<
!

DOCTYPE
<
!

DOCTYPE
html
html
PUBLIC
PUBLIC
"
-//W3C//DTD
"
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN">
Transitional//EN">
<<html
html>>
çähead
head>>
<<title
title>>Formulaire
Formulaire
de
de
saisie
saisie
du
du
fruits
fruits</
</title
title>>
</
</head
headçë
çäbody
bodyçë
<<form
form
name
name==""formu
formu
"
"
action
action==""valide3.php
valide3.php
"
"
method
method==""get
get"">>
Choisissez
Choisissez
du
du
fruits
fruits&nbsp
;
&nbsp
;
:<
:<br
br>>
<<input
input
type
type==""checkbox
checkbox
"
"
name
name==""sel[
]
sel[
]
"
"
value
value==""Fraise
Fraise"">Fraise<
>Fraise<br
br>>
<<input
input
type
type==""checkbox
checkbox
"
"
name
name==""sel[
]
sel[
]
"
"
value
value==""Pomme
pomme
"
"
>Pomme
çpomme
<<br
br>>
<<input
input
type
type==""checkbox
checkbox
"
"
name
name==""sel[
]
sel[
]
"
"
value
value==""Poire
Poire
"
"
>Poire
>Poire
<<br
br>>
<<input
input
type
type==""checkbox
checkbox
"
"
name
name==""sel[
]
sel[
]
"
"
value
value==""Banane
Banane"">Banane<
>Banane<br
br>>
<<input
input
type
type==""checkbox
checkbox
"
"
name
name==""sel[
]
sel[
]
"
"
value
value==""Cerise
Cerise"">Cerise<
>Cerise<br
br>>
<<input
input
type
type==""submit
submit
"
"
value
value==""Envoyer
Envoyer"">>
à
</form
form>>
à
</body
bodyçë
à
</html
html>>
10:11:20
Programmation
Web
2012-2013
49
Résultat
10:11:20
Programmation
Web
2012-2013
50
Références
$a
=
12
;
bb
=
$a
;
$c
=
&$a
;
bb
=
"
coucou
"
;
$c
=
84
;
echo
"
\$a
:
$a\n
"
$a
$a
:
:
84
84
echo
"
\$b
:
$b\n
"
bb
bb
:
:
coucou
coucou
echo
"
\$c
:
$c\n
"
$c
$c
:
:
84
84
unset($c)
;
$c
=
"
hello
"
;
10:11:21
$$aa
84
12
12
84
çäbb
"
"
coucou
12
coucou
"
"
$$cc
"
"
hello
hello
"
"
;
;
;
Programmation
Web
2012-2013
51
Fonctions
utilisateur

Description
de
une
fonctionnalité
dépendant
éventuellement
de
paramètres
et
retournant
éventuellement
un
résultat
à
Définition
function
moyenne($a,$b)
à
return
($a+$b)/2
.

;
}

Utilisation
$resultat
à
moyenne(2,4)
;
echo
$resultat
;
//
vaut
3
10:11:21
Programmation
Web
2012-2013
52
Fonctions
utilisateur
à
Valeur
de
retour
function
moyenne($a,$b)
{
…
à
Typage
Typage
faible
faible
de
de
Php
Php
:
:
Aucune
Aucune
information
information
à
Arguments
function
moyenne(
{
…
}
$a
,
bb
)
Typage
Typage
faible
faible
de
de
Php
Php
:
:
Aucune
Aucune
information
information
10:11:22
Programmation
Web
2012-2013
53
mode
de
passage
du
arguments
(
types
natifs
)
<
?

php
function
permutation($x
,
$y
)
{
echo
"
permutation
...
"
;
$t
=
$x
;
Permutation
Permutation
impossible
impossible
:
:
$x
=
$y
;
passage
passage
du
du
arguments
arguments
$y
=
$t
;
du
du
fonctions
fonctions
par
par
valeur
valeur
à
$a
à
12
;
bb
=
210
;
ça
echo
"
\$a
=
$a
"
;
$a
==
12
12
$b
echo
"
çäb
=
bb
"
;
bb
==
210
210
permutation
...
permutation($a
,
bb
)
;
permutation
...
ça
echo
"
\$a
=
$a
"
;
$a
==
12
12
$b
echo
"
çäb
=
bb
"
;
bb
==
210
210
?

>
10:11:22
Programmation
Web
2012-2013
54
mode
de
passage
du
arguments
(
types
natifs
)
<
?

php
function
permutation(&$x
,
&$y
)
{
echo
"
permutation
...
"
;
$t
=
$x
;
çx
=
$y
;
$y
=
$t
;
}
$a
à
12
;
bb
=
210
;
$a
echo
"
\$a
=
$a
"
;
$a
==
12
12
$b
echo
"
\$b
=
bb
"
;
bb
==
210
210
permutation
...
permutation($a
,
bb
)
;
permutation
...
ça
echo
"
\$a
=
$a
"
;
$a
==
210
210
$b
echo
"
çäb
=
bb
"
;
bb
==
12
12
?

>
10:11:22
Programmation
Web
2012-2013
Permutation
Permutation
réussie
réussie
55
Arguments
par
défaut
du
fonctions
à
Valeur
par
défaut
de
un
argument
si
il
n'
a
pas
été
défini
lors
de
l'
appel
de
la
fonction
function
bonjour($nom="inconnu")
à
echo
"
Bonjour
cher
$nom
"
;
}
à
Utilisation
bonjour()
;
Bonjour
Bonjour
cher
cher
inconnu
inconnu
bonjour("Marcel")
;
Bonjour
Bonjour
cher
cher
Marcel
Marcel
10:11:23
Programmation
Web
2012-2013
56
Définition
de
fonctions
fréquemment
utilisées
à
Certaines
fonctions
sont
utilisées
dans
plusieurs
scripts
Php
à
Comment
faire
pour
ne
pas
les
définir
dans
chacune
du
page
?


Utilisation
de
:




include("fichier")
;
require("fichier")
;
include_once("fichier")
;
require_once("fichier")
;

Permet
de
inclure
le
contenu
de
fichier
dans
le
script
courant
10:11:23
Programmation
Web
2012-2013
57
include
et
require
Fichier
Fichier
mafonction.php
mafonction.php
<
?

function
mafonction($arg)
à
if
(isset($arg))
à
echo
(
"
Vrai
"
)
;
}
else
à
echo
(
"
Faux
"
)
;
}
}
?

>
10:11:23
Fichier
Fichier
utilisation1.php
utilisation1.php
…
require("mafonction.php")
mafonction(true)
;
à
Fichier
Fichier
utilisation2.php
utilisation2.php
…
include("mafonction.php")
…
$var=false
;
mafonction($var)
;
à
Fichier
Fichier
utilisation3.php
utilisation3.php
…
require("mafonction.php")
à
Programmation
Web
2012-2013
58
Définition
de
constantes
<
?

php
define("ma_constante
"
,
"
Bonjour
à
tous
"
)
;
nom
nom
valeur
valeur
Définition
Définition
de
une
de
une
constante
constante
echo
ma_constante
;
?

à
Utilisation
Utilisation
de
de
la
la
constante
constante
10:11:24
Programmation
Web
2012-2013
59
Gestion
du
erreurs

Dans
certains
cas
,
il
n'
est
ni
possible
ni
utile
de
poursuivre
l'
exécution
du
code
Php
(
variables
non
définies
,
valeurs
erronées
,
échec
de
connexion
,
…
)

Arrêt
brutal
de
l'
exécution
du
code
:


dieämessageç
exit(message)
Envoie
message
au
navigateur
et
termine
l'
exécution
du
script
courant
10:11:24
Programmation
Web
2012-2013
60
Gestion
du
erreurs
–
(
Mauvais
)
Exemple
<
?

php
Php
$html
à
<<<HTML
<html>
<head>
<title>die-exit</title>
</head>
<body>
HTML
;
if
(
!

isset($val))
à
HTML
non
non
die($html."problèmeHTML
val
"
)
;
/*
au
delà
de
ce
point
,
fin
du
script
*/
}
$html
.=
<<<HTML
Choix
:
$val
</body>
</html>
10:11:24
<html>
HTML
<head>
<title>die-exit</title>
</head>
<body>
problème
val
valide
valide
…
à
Navigateur
problème
val
Programmation
Web
2012-2013
61
Gestion
de
l'
affichage
du
erreurs

int
error_reporting
(
[
int
level
]
)
débogage
Constante
Ancien
Ancien
niveau
niveau
de
erreur
de
erreur
E_ERROR
E_WARNING
Sur
Sur
un
un
serveur
serveur
en
en
E_PARSE
production
,
production
,
toute
toute
E_NOTICE
erreur
erreur
affichée
affichée
E_CORE_ERROR
donne
donne
des
des
indices
indices
sur
sur
les
E_CORE_WARNIN
les
scripts
scripts
et
et
rend
rend
le
le
site
g
site
vulnérable
vulnérable
E_COMPILE_ERR
php.ini
php.ini
OR
display_errors
display_errors
boolean
boolean
E_COMPILE_WAR
NING
Programmation
Web
2012-2013
10:11:24
62
Opérateur
de
contrôle
de
erreur
$v
=
file("dummy.txt")
or
die("Problème
de
Fichier
Fichier
absent
absent
lecture
"
)
;
Warning
Warning
:
:
file(dummy.txt)
:
file(dummy.txt)
:
failed
failed
to
to
open
open
stream
:
stream
:
No
No
such
such
file
file
or
or
directory
directory
in
in
dummy.php
dummy.php
on
on
line
line
68
68
Problème
Problème
de
de
lecture
lecture
$v
=
@file("dummy.txt")
or
die("Problème
de
lecture
"
)
;
Problème
Problème
de
de
lecture
lecture
10:11:25
Programmation
Web
2012-2013
63
Développement
objet
à
Définition
de
briques
logicielles
représentant
un
concept
,
une
idée
ou
une
entité
ainsi
que
leurs
interactions
:
les
objets
à
Un
objet
est
une
structure
de
données
comprenant
également
les
fonctionnalités
de
traitement
du
données
à
L'
objet
est
vu
au
travers
de
ses
spécifications
à
Les
concepts
associés
sont
:
à
Encapsulation
à
Héritage
à
Polymorphisme
10:11:29
Programmation
Web
2011-2012
1
Classe

Une
classe
définit
un
modèle
,
un
moule
,
à
partir



à
duquel
tous
les
objets
de
classe
seront
créés
La
classe
décrit
les
données
internes
ainsi
que
les
fonctionnalités
du
objets
La
classe
est
une
vision
à
inerte
»
,
une
recette
de
cuisine
,
visant
à
décrire
la
structure
et
le
comportement
du
objets
qui
seront
créés
La
construction
de
un
objet
à
partir
de
la
classe
génératrice
s'
appelle
instanciation
Les
objets
,
entités
«
vivantes
»
en
mémoire
,
sont
du
instances
de
la
classe
10:11:29
Programmation
Web
2011-2012
2
Instanciation
à
La
classe
est
une
description
à
inerte
»

Les
objets
doivent
être
instanciés
à
partir
de
la
classe
génératrice
pour
exister
et
devenir
fonctionnels
à
Exemple
:
la
classe
Animal
$bambi
=
new
Animal()
;
$scrat
=
new
Animal()
;
$melman
=
new
Animal()
;
10:11:29
Programmation
Web
2011-2012
3
Encapsulation
à
Procédé
consistant
à
rassembler
les
données
et
les
traitements
au
sein
du
objets

L'
implémentation
interne
du
objets
est
cachée
à
Les
objets
sont
vu
à
travers
leurs
spécifications
à
Les
données
internes
et
les
fonctionnalités
possèdent
un
niveau
de
visibilité
et
peuvent
éventuellement
être
masquées
:
à
Public

Privé

Protégé
10:11:29
Programmation
Web
2011-2012
4
Encapsulation
à
Les
données
internes
du
objets
sont
appelées
attributs
à
Les
fonctionnalités
du
objets
sont
appelées
méthodes
à
Méthodes
habituelles
:

Constructeur
/
destructeur
à
Accesseurs
/
modificateurs
(
getters
/
setters
)
à
Référence
à
l'
objet
courant
dans
la
description
de
la
classe
:
$this
10:11:29
Programmation
Web
2011-2012
5
Visibilité

Publique
:
Les
données
internes
et
les
méthodes
sont
accessibles
par
tous
à
Protégé
:
Les
données
internes
et
les
méthodes
sont
accessibles
au
objets
dérivés
à
Privé
:
Les
données
internes
et
les
méthodes
ne
sont
accessibles
qu'
au
objets
de
la
classe
10:11:29
Programmation
Web
2011-2012
6
Héritage
ou
dérivation
ou
extension
à
Création
de
nouvelles
classes
à
partir
du
modèle
de
une
classe
existante
à
La
nouvelle
classe
possède
tous
les
attributs
et
méthodes
de
la
classe
mère
à
La
nouvelle
classe
peut
proposer
de
nouveaux
attributs
et
de
nouvelles
méthodes
ou
spécialiser
du
méthodes
Mammifère
de
la
classe
mère
Herbivore
Impala
10:11:29
Caribou
Carnivore
Guépard
Programmation
Web
2011-2012
Léopard
7
Polymorphisme
Mammifère
nourriture

Choix
dynamique
de
la
méthode
qui
correspond
au
type
réel
de
l'
objet
à
Méthode
mange()
Herbivore
plantes
Impala
herbe
Caribou
mousse
Carnivore
viande
Guépard
impala
Léopard
impala
à
function
nourriture(Mammifere
$m
)
à
return
$m->mange()
;
}

çi
=
new
Impala()
;
nourriture($i)
;

$c
=
new
Carnivore()
;
nourriture($c)
;
10:11:29
Programmation
Web
2011-2012
herbe
viande
8
Développement
objet
en
Php
à
Php
4

Classes
(
tout
est
public
)

Constructeur
à
Héritage
à
Méthodes
statiques
implicites
à
Outils
pour
la
linéarisation
(
sauvegarde
sur
disque
)
à
Php
5

Classes
(
choix
public
,
protected
,
private
)

Constructeur
et
destructeur
à
Membres
et
méthodes
statiques
à
Classes
et
méthodes
abstraites

…
10:11:29
Programmation
Web
2011-2012
9
Déclaration
Définition
de
une
classe
en
PHPde4classe
<
?

php
class
MaClasse
à
var
$madonnee
;
//
Attribut
Attribut
public
Constructeur
public
Référence
à
//
Constructeur
l'
objet
courant
function
MaClasse($param)
à
$this->madonnee
=
$param
;
}
Accès
à
un
attribut
function
affiche()
{
//
Méthode
echo
get_class($this)
Méthode
publique
.
"

contient
"
.$this->madonnee
;
à
Donne
le
nom
de
la
classe
de
l'
objet
courant
}
?

>
10:11:29
Programmation
Web
2011-2012
10
Utilisation
de
une
classe
en
Php
4
Inclusion
de
la
définition
de
la
classe
<
?

php
require
"
maclasse.php
"
;
Création
de
un
objet
//
Nouvel
objet
ço
=
new
MaClasse(12)
maclasse
contient
12
;
//
Utilisation
de
une
méthode
$o->affiche()
;
$o->madonnee
=
"
coucou
"
;
Méthode
affiche
de
l'
objet
$o
Impossible
de
restreindre
l'
accès
au
attributs
?

>
10:11:29
Programmation
Web
2011-2012
11
Héritage
en
php
4
Héritage
de
MaClasse
<
?

php
class
MaClasseHeritee
extends
MaClasse
à
var
$autredonnee
;
function
MaClasseHeritee($param1
,
$param2
)
{
Opérateur
de
parent::MaClasse($param1)
;
résolution
de
portée
$this->autredonnee
=
$param2
;
(
Paamayim
}
Nekudotayim
)
function
affiche()
à
MaClasse::affiche()
;
Méthode
MaClasse
echo
"
et
"
.get_class($this)
du
parent
.
"

contient
"
.$this->autredonnee
;
}
à
Méthode
affiche
de
?

à
la
classe
MaClasse
10:11:29
Programmation
Web
2011-2012
12
Méthodes
de
classe
implicites
<
?

php
class
MaClasse
à
var
$madonnee
;
//
Attribut
//
Constructeur
function
MaClasse($param)
à
$this->madonnee
=
$param
;
à
function
affiche()
{
//
Méthode
echo
$this->madonnee
;
à
function
statique()
{
//
Méthode
echo
"
Statique
!

!
!

"
;
}
}
?

>
10:11:29
Programmation
Web
2011-2012
Méthode
publique
Ne
fait
pas
référence
à
$this
à
Méthode
statique
(
méthode
de
classe
)
13
Méthodes
de
classe
implicites
Inclusion
de
la
définition
de
la
classe
<
?

php
require
"
maclasse.php
"
;
Création
de
un
objet
//
Création
de
un
objet
$o
=
new
MaClasse(12)
;
Méthode
affiche
de
l'
objet
$o
//
Utilisation
de
une
méthode
12
$o->affiche()
;
Impossible
de
restreindre
l'
accès
//
Utilisation
de
une
méthode
implicitement
auxstatique
attributs
MaClasse::statique()
;
Statique
!

!
!

?

>
10:11:29
Programmation
Web
2011-2012
14
Développement
objet
en
php
5
à
partir
de
maintenant
,
développement
en
Php
5
10:11:29
Programmation
Web
2011-2012
15
Définition
de
une
classeDéclaration
de
classe
<
?

php
class
MaClasse
à
private
$madonnee
;
Attribut
privé
Constructeur
public
public
function
__construct($param)
à
$this->madonnee
=
$param
;
Référence
à
l'
objet
à
courant
function
__destruct()
à
echo
"
Destruction
...
"
;
}
Destructeur
public
function
affiche()
à
echo
"
madonnee
:
"
Méthode
publique
.$this->madonnee
;
par
défaut
}
}
?

>
Accès
à
un
attribut
10:11:29
Programmation
Web
2011-2012
16
Utilisation
de
une
classe
Inclusion
de
la
définition
de
la
classe
<
?

php
require
"
maclasse.php
"
;
Création
de
un
objet
//
Nouvel
objet
ço
=
new
MaClasse(12)
maclasse
contient
12
;
//
Utilisation
de
une
méthode
$o->affiche()
;
à
class
Fatal
MaClasse
error
:
Cannot
access
private
private
$madonnee
;
property
MaClasse::$madonnee
in
...
dummy.php
on
=line
25
$o->madonnee
"
coucou
"
;
function
__destruct()
à
Destruction
...
echo
"
Destruction
...
"
;
}
unset($o)
;
?

>
10:11:29
Programmation
Web
2011-2012
Méthode
affiche
de
l'
objet
ço
L'
attribut
est
privé
Destruction
de
l'
objet
ço
17
Valeur
par
défaut
du
attributs
Attribut
avec
valeur
par
défaut
<
?

php
class
MaClasse
à
private
$madonnee
=
"
Défaut
"
;
function
affecte($val)
à
$this->madonnee
=
$val
;
}
function
affiche()
{
Nouvel
objet
echo
"
madonnee
:
"
.$this->madonnee
;
}
à
Affichage
madonnee
:
Défaut
ço
=
new
MaClasse()
;
Affectation
$o->affiche()
;
madonnee
:
Nouvelle
$o->affecte("Nouvelle")
;
Affichage
$o->affiche()
;
?

>
10:11:29
Programmation
Web
2011-2012
18
Attributs
et
méthodes
de
classe
à
Mot
clé
static
à
Attributs
et
méthodes
utilisables
sans
instance
de
la
classe
(
=attributs
et
méthode
de
classe
)

Attributs
NE
peuvent
PAS
être
accédés
depuis
une
instance
(
$objet->attribut
)

Attributs
partagés
par
toutes
les
instances
de
la
classe
à
Méthodes
peuvent
être
accédés
depuis
une
instance
($objet->methode())

Dans
les
méthodes
,
$this
n'
est
pas
disponible
10:11:29
Programmation
Web
2011-2012
19
Attributs
statiques
Attribut
privé
statique
:
ne
peut
être
accédé
que
par
des
méthodes
de
la
classe
class
MaClasse
à
private
static
$n
=
0
;
function
__construct()
à
Accès
à
l'
attribut
statique
echo
++MaClasse::$n
.
"

instance(s)
"
;
à
function
__destruct()
{
echo
"
destruction
"
;
self::$n
--
;
}
1
instance(s)
}
instance(s)
2
-s
=
new
MaClasse()
;
destruction
$tinstance(s)
=
new
MaClasse()
;
2
unset($t)
;
Cannot
access
private
property
3
instance(s)
Fatal
error
:
$u
=
new
MaClasse()
;
MaClasse::$n
in
dummy.php
on
line
37
$v
=
new
MaClasse()
;
10:11:29
Programmation
Web
2011-2012
20
Méthodes
statiques
class
MaClasse
à
private
static
$n
=
0
;
function
__construct()
à
echo
++MaClasse::$n
.
"

instance(s)<br>\n
"
;
à
Méthode
publique
statique
function
__destruct()
à
MaClasse::$n
--
;
}
static
function
fçëië
à
echo
"
Dans
fäë
:
"
.($i*$i)Appel
;
}
à
partir
de
une
instance
à
instance(s)
Toléré
1
Dans
fäë
:
4
-s
=
fäë
new
:
MaClasse()
;
Dans
9
$s->f(2)
;
MaClasse::f(3)Programmation
;
10:11:29
Web
2011-2012
Appel
sans
instance
21
Constantes
de
classe
class
MaClasse
à
const
constante
=
"
Valeur
"
;
public
function
montre()
{
echo
self::constante
;
}
à
Valeur
$c
=
new
MaClasse()
;
Valeur
$c->montre()
;
echo
MaClasse::constante
;
10:11:29
Programmation
Web
2011-2012
Constante
publique
de
classe
Accès
à
la
constante
de
classe
depuis
la
classe
Accès
à
la
constante
de
classe
à
l'
extérieur
de
la
classe
22
Héritage
class
Simple
à
function
affiche()
à
echo
"
je
suis
Simple
"
;
}
à
class
Etendue
extends
Simple
à
function
affiche()
à
parent::affiche()
;
echo
"
mais
aussi
Etendue
"
;
}
}
-s
=
new
Simple()
;
$e
=
new
Etendue()
;
je
suis
Simple
;
$s->affiche()
$e->affiche()
je
suis
Simple
;
mais
aussi
Etendue
10:11:29
Programmation
Web
2011-2012
Classe
simple
Une
méthode
publique
Classe
étendue
héritant
de
la
classe
simple
Surcharge
de
la
méthode
Appel
de
la
méthode
du
parent
23
Assignation
de
objets
class
Point
à
private
$_x
;
private
$_y
;
public
function
__construct($x=0
,
$y=0
)
{
$this->_x
=
$x
;
$this->_y
=
$y
;
}
public
function
set($x
,
$y
)
à
$this->_x
=
$x
;
$this->_y
=
$y
;
}
public
function
toString()
{
return
"
(
{
$this->_x
}
,
à
$this->_y
}
)
"
;
}
10:11:29
Programmation
Web
2011-2012
24
Assignation
de
objets
$segment
=
array()
;
$point
=
new
Point()
;
for
(
$i=10
;
$i<20
;
çiu
)
à
$point->set($i
,
çi
)
;
$segment[
]
=
$point
;
}
foreach
(
$segment
as
$k
=>
$p
)
echo
"
$k
:
{
$p->toString()}<br>\n
"
;
10:11:29
Programmation
Web
2011-2012
$point
$segment
0
:
(
19
,
19
)
0
1
:
(
19
,
19
)
1
19
)
2
:
(
19
,
2
19
)
3
:
(
19
,
4
:
(
19
,
3
19
)
5
:
(
19
,
4
19
)
6
:
(
19
,
5
19
)
7
:
(
19
,
19
)
6
8
:
(
19
,
19
)
7
19
)
9
:
(
19
,
8
9
19,19
18,18
17,17
16,16
15,15
14,14
13,13
12,12
11,11
10,10
0,0
25
19,19
18,18
17,17
16,16
15,15
14,14
13,13
12,12
11,11
10,10
0,0
Clonage
de
objets
$segment
à
array()
;
$point
=
new
Point()
;
for
(
$i=10
;
$i<20
;
çiu
)
à
$point->set($i
,
$i
)
;
$segment[
]
=
clone
$point
;
}
foreach
(
$segment
as
$k
=>
$p
)
echo
"
$k
:
{
$p->toString()}<br>\n
"
;
$point
$segment
0
:
(
10
,
10
)
0
1
:
(
11
,
11
)
1
12
)
2
:
(
12
,
2
13
)
3
:
(
13
,
4
:
(
14
,
3
14
)
5
:
(
15
,
4
15
)
6
:
(
16
,
5
16
)
7
:
(
17
,
17
)
6
8
:
(
18
,
18
)
7
19
)
9
:
(
19
,
8
9
10,10
11,11
12,12
13,13
14,14
15,15
16,16
17,17
18,18
19,19
10:11:29
Programmation
Web
2011-2012
26
Objets
comme
arguments
de
fonctions
function
origine($p)
{
$p->set(0
,
0
)
;
}
$point
à
new
Point(10
,
10
)
;
echo
"
avant
:
{
$point->toString()}<br>\n
"
;
origine($point)
;
echo
"
apres
:
{
$point->toString()}<br>\n
"
;
passage
de
l'
objet
avant
:
(
10
,
10
)
Point
par
référence
apres
:
(
0
,
0
)
10:11:29
Programmation
Web
2011-2012
27
Objets
dans
les
chaînes
de
caractères
à
Problème
:

ambiguïté
à
non
évaluable
à
Chaîne
contenant
:
à
un
attribut
de
un
objet
dans
une
chaîne
"
a
:
$a->attribut
"
à
le
résultat
de
une
méthode
de
un
objet
dans
une
chaîne
"
résultat
:
$a->calcule()
"

une
entrée
de
tableau
associatif
à
"
valeur
:
$tab['cle
'
]
"

une
variableProgrammation
suivie
de
texte
(
sans
espace
)
10:11:29
Web
2011-2012
28
Objets
dans
les
chaînes
de
caractères
à
Solution
:
à
effectuer
des
concaténations
(
pénible
)
à
délimiter
par
{
}
à
Chaîne
contenant
:
à
un
attribut
de
un
objet
dans
une
chaîne
"
a
:
{
$a->attribut
}
"

le
résultat
de
une
méthode
de
un
objet
dans
une
chaîne
"
résultat
:
{
$a->calcule()
}
"

une
entrée
de
tableau
associatif
à
"
valeur
:
{
$tab['cle
'
]
}
"

une
variableProgrammation
suivie
de
texte
(
sans
espace
)
10:11:29
Web
2011-2012
29
Gestion
du
erreurs
:
exceptions

Gestion
du
exception
identiques
à
Cuëdava
à
Exception
peut
être
:
à
Jetée
:
throw
à
Essayé
:
try
à
Capturée
:
catch
à
Exception
jetée
:
code
après
throw
non
exécuté
à
Capture
:
1
ou
plusieurs
blocs
(
selon
type
)
à
Exception
non
capturée
:
erreur
fatale
10:11:29
Programmation
Web
2011-2012
30
Utilisation
du
exceptions
try
à
$error
=
'
Toujours
lancer
cette
erreur
'
;
Déroutement
throw
new
Exception($error)
;
/*
Le
code
après
une
exception
n'
est
Capturer
Essayer
Lancer
jamais
exécuté
.

*/
echo
'
jamais
exécuté
'
;
à
Capture
Exception
:
Toujours
lancer
cette
erreur
catch
(
Exception
$e
)
{
echo
"
Capture
Exception
:
"
.$e->getMessage(
)
.
"

\n
"
;
}
Bonjour
le
monde
//
Poursuite
de
l'
exécution
echo
'
Bonjour
le
monde
'
;
10:11:29
Programmation
Web
2011-2012
31
Classe
Exception
Php
5
<
?

php
class
Exception
à
protected
çmessage
=
'
'
;
//
message
de
l'
exception
protected
$code
=
0
;
//
code
de
l'
exception
protected
$file
;
//
fichier
source
de
l'
exception
protected
$line
;
//
ligne
de
la
source
de
l'
exception
function
__construct(string
$message=NULL
,
int
code=0
)
;
final
final
final
final
final
final
function
function
function
function
function
function
function
getMessage()
;
//
message
de
l'
exception
getCode()
;
//
code
de
l'
exception
getFile()
;
//
nom
du
fichier
source
getLine()
;
//
ligne
du
fichier
source
getTrace()
;
//
un
tableau
de
backtrace()
getTraceAsString()
;
//
chaîne
de
trace
_toString()
;
//
chaîne
pour
l'
affichage
}
?

>
10:11:29
Programmation
Web
2011-2012
32
pdo

Pdo
:
Php
Data
Objects
à
Extension
Php
fournissant
une
interface
pour
accéder
à
une
base
de
données
à
Fournit
une
interface
de
abstraction
pour
l'
accès
au
données
à
Ne
fournit
PAS
une
abstraction
de
base
de
données

SQL
spécifique
au
moteur

Fonctionnalités
présentes
/
absentes
à
Interface
orientée
objet
20:39:03
Programmation
Web
2013-2014
1
Nom
du
driver
Bases
de
données
supportées
Bases
de
données
supportées
PDO_DBLIB
FreeTDS
/
Microsoft
SQL
Server
/
Sybase
PDO_FIREBIRD
Firebird/Interbase
6
pdoëibm
Ibm
DB2
PDO_INFORMIX
Ibm
Informix
Dynamic
Server
PDO_MYSQL
MySQL
3.x/4.x/5.x
PDO_OCI
Oracle
Call
Interface
PDO_ODBC
ODBC
v3
(
Ibm
DB2
,
unixODBC
et
win32
ODBC
)
PDO_PGSQL
PostgreSQL
PDO_SQLITE
SQLite
3
et
SQLite
2
PDO_4D
4D
20:39:03
Programmation
Web
2013-2014
2
20:39:03
Programmation
Web
2013-2014
3
Classes
prédéfinies
à
Pdo
:
connexion
Php
/
base
de
données

__construct()

exec()
,
prepare()
,
query()

errorCode()
,
errorInfo()
à
getAttributes()
,
setAttribute()

lastInsertId()
,
quote()

beginTransaction()

commit()
,
rollBack()

getAvailableDrivers()
20:39:03
Programmation
Web
2013-2014
4
Classes
prédéfinies
à
PDOStatement
:
requête
préparée
,
jeu
de
résultats

bindColumn()
,
bindParam()
,
bindValue()
,
closeCursor()

errorCode()
,
errorInfo()

fetch()
,
fetchAll()
,
fetchColumn()
,
fetchObject()
,




setFetchMode()
,
nextRowset()
rowCount()
,
columnCount()
,
getColumnMeta()
getAttribute()
,
setAttribute()
execute()
debugDumpParams()
20:39:03
Programmation
Web
2013-2014
5
20:39:03
Programmation
Web
2013-2014
6
Connexions
et
gestionnaire
de
connexion
à
Instanciation
de
un
objet
Pdo

$dbh=new
PDO(DSN
[
,
user
[
,
pass
[
,
options
]
]
]
)
;

DSN
:
Data
Source
Name
à
nom_du_driver:syntaxe_spécifique_au_driver

Ex
:
mysql:host=localhost
;
dbname=ma_base
à
user
:
nom
de
utilisateur
,
pass
:
mot
de
passe

options
:
tableau
associatif
à
spécifiques
au
driver

Ex
:
array(PDO::ATTR_PERSISTENT
=>
true
)
)
;

Fin
de
connexion
:
$dbh=null
;
ou
unset($dbh)
;
20:39:03
Programmation
Web
2013-2014
7
20:39:03
Programmation
Web
2013-2014
8
Gestion
du
erreurs
de
connexion
à
Connexion
par
construction
de
un
objet
à
Gestion
envisageable
du
erreurs
à
Aucune
à
Fin
brutale
(
exit
,
die
)

État
à
Exception

En
cas
de
erreur
de
connexion
à
Objet
PDOException
lancé
à
PDOException
hérite
de
Exception
20:39:03
Programmation
Web
2013-2014
9
Gestion
du
erreurs
de
connexion
<
?

php
try
à
$dbh
=
new
PDO('mysql:host=h
;
dbname=db
'
,
$user
,
$pass
)
;
…
$dbh
=
null
;
}
catch
(
PDOException
$e
)
{
echo
"
Erreur
:
"
.$e->getMessage()."<br/>
"
;
dieçà
;
}
?

>
20:39:03
Programmation
Web
2013-2014
10
Gestion
du
erreurs
(
hormis
connexion
)
à
PDO::ERRMODE_SILENT
(
par
défaut
)
à
Mode
silencieux
,
mise
en
place
de
un
code
de
erreur

Pdo
:
errorCode()
/
errorInfo()

PDOStatement
:
errorCode()
/
errorInfo()

PDO::ERRMODE_WARNING
à
Mise
en
place
du
code
de
erreur

Émission
de
une
erreur
de
type
E_WARNING

PDO::ERRMODE_EXCEPTION
à
Mise
en
place
du
code
de
erreur

Objet
PDOException
lancé
20:39:03
Programmation
Web
2013-2014
11
Gestion
du
erreurs
(
hormis
connexion
)
<
?

php
try
à
$dbh
=
new
PDO('mysql:host=h
;
dbname=db
'
,
$user
,
$pass
)
;
$dbh->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
…
$dbh
=
null
;
}
catch
(
PDOException
$e
)
{
echo
"
Erreur
:
"
.$e->getMessage()."<br/>
"
;
dieçà
;
}
20:39:03
Programmation
Web
2013-2014
12
Gestion
du
erreurs
:
code
de
erreur
<
?

php
$pdo
=
new
PDO("mysql:host=localhost")
;
$pdostat
=
$pdo->query("COUCOU")
;
Code
SQLSTATE
if
($pdo->errorCode())
à
echo
"
ERREUR
!

!\n
"
;
echo
"
<pre>\n
"
;
Code
erreur
spécifique
var_dump($pdo->errorInfo())
;
du
driver
echo
"
</pre>\n
"
;
ERREUR
!

!

}
array(3)
à
Chaîne
erreur
spécifique
[
0]=>
string(5)
"
42000
"
au
driver
[
1]=>
int(1064)
[
2]=>
string(47)
"
Erreur
de
syntaxe
près
de
'
COUCOU
'
à
la
ligne
1
"
}
20:39:03
Programmation
Web
2013-2014
13
Gestion
du
erreurs
:
exceptions
<
?

php
try
à
$pdo
=
new
PDO("mysql:host=localhost")
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
Code
erreur
;
spécifique
du
driver
$pdostat
=
$pdo->query("COUCOU")
;
}
catch
Code
(
Exception
$e
)
à
Chaîne
erreur
spécifique
SQLSTATE
au
driver
echo
"
ERREUR
:
"
.$e->getMessage()
;
}
ERREUR
:
SQLSTATE[42000
]
:
Syntax
error
or
access
violation
:
1064
Erreur
de
syntaxe
près
de
'
COUCOU
'
à
la
ligne
1
20:39:03
Programmation
Web
2013-2014
14
20:39:03
Programmation
Web
2013-2014
15
Exécution
de
une
requête

PDOStatement
PDO::query
(
string
statement
)
Résultat
de
requête
Requête
<
?

php
try
à
$pdo
=
new
PDO("mysql:host=localhost")
;
$pdostat
à
$pdo->query("SELECT
*
FROM
clients
"
)
;
}
catch
(
Exception
$e
)
{
echo
"
ERREUR
:
"
.$e->getMessage()
;
}
20:39:03
Programmation
Web
2013-2014
16
Exploitation
du
résultats
de
une
requête

Récupération
du
données
ligne
à
ligne

Une
ligne
peut
être
:
à
un
tableau
indexé
à
un
tableau
associatif
à
un
tableau
mixte
(
par
défaut
)

un
objet
anonyme
à
un
objet
de
une
classe
définie
par
l'
utilisateur

Récupération
du
données
de
une
colonne
20:39:03
Programmation
Web
2013-2014
17
à
Parcourir
le
résultat
de
la
requête
Parcours
du
résultat
de
une
requête
SELECT
*
Résultat
de
requête
FROM
morceau
ORDER
By
mor_id
Curseur
interne
----------------------------------------
|
mor_id
|
mor_nom
à
----------------------------------------
|
872
|
With
à
Little
Help
From
My
Friends
|
|
873
à
The
Letter
|
|
874
à
Marjorine
|
|
875
|
Midnight
Rider
|
|
876
à
You
Are
So
Beautiful
|
|
877
à
Feelin
'
Allright
|
|
878
à
Cry
me
à
River
|
...
20:39:03
Programmation
Web
2012-2013
18
Exploitation
du
résultats
de
une
requête
(
1
)
try
{
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
à
$pdo->query("SELECT
name
FROM
user
"
)
;
$pdostat->setFetchMode(PDO::FETCH_ASSOC)
;
foreach
(
$pdostat
as
$ligne
)
{
echo
"
<p>
"
.

$ligne['name
'
]
.

"
\n
"
;
}
}
catch
(
Exception
$e
)
{
echo
"
ERREUR
:
"
.$e->getMessage()
;
}
20:39:03
Programmation
Web
2013-2014
19
Exploitation
du
résultats
de
une
requête
(
2
)
try
{
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
à
$pdo->query("SELECT
name
FROM
user
"
)
;
foreach
(
$pdostat->fetchAll(PDO::FETCH_ASSOC)
as
$ligne
)
{
echo
"
<p>
"
.

$ligne['name
'
]
.

"
\n
"
;
}
}
catch
(
Exception
$e
)
{
echo
"
ERREUR
:
"
.$e->getMessage()
;
}
20:39:03
Programmation
Web
2013-2014
20
Exploitation
du
résultats
de
une
requête
(
3
)
try
{
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
à
$pdo->query("SELECT
name
FROM
user
"
)
;
while
(
$ligne
=
$pdostat->fetch(PDO::FETCH_ASSOC))
à
echo
"
<p>
"
.

$ligne['name
'
]
.

"
\n
"
;
}
}
catch
(
Exception
$e
)
{
echo
"
ERREUR
:
"
.$e->getMessage()
;
}
20:39:03
Programmation
Web
2013-2014
21
mode
de
récupération
du
données
(
1
)

PDO::FETCH_ASSOC
à
retourner
chaque
ligne
dans
un
tableau
indexé
par
les
noms
du
colonnes
comme
elles
sont
retournées
dans
le
jeu
de
résultats
correspondant
.

si
le
jeu
de
résultats
contient
de
multiples
colonnes
avec
le
même
nom
,
PDO::FETCH_ASSOC
retourne
une
seule
valeur
par
nom
de
colonne
.

à
PDO::FETCH_NUM
à
retourner
chaque
ligne
dans
un
tableau
indexé
par
le
numéro
du
colonnes
comme
elles
sont
retournées
dans
le
jeu
de
résultats
correspondant
,
en
commençant
à
0
.

20:39:03
Programmation
Web
2013-2014
22
mode
de
récupération
du
données
(
2
)
à
PDO::FETCH_BOTH
(
par
défaut
)
à
retourner
chaque
ligne
dans
un
tableau
indexé
par
les
noms
du
colonnes
ainsi
que
leurs
numéros
,
comme
elles
sont
retournées
dans
le
jeu
de
résultats
correspondant
,
en
commençant
à
0
.

à
PDO::FETCH_OBJ
à
retourner
chaque
ligne
dans
un
objet
avec
les
noms
de
propriétés
correspondant
au
noms
du
colonnes
comme
elles
sont
retournées
dans
le
jeu
de
résultats
.

20:39:03
Programmation
Web
2013-2014
23
mode
de
récupération
du
données
(
3
)
à
PDO::FETCH_BOUND
à
retourner
true
et
assigner
les
valeurs
du
colonnes
du
jeu
de
résultats
dans
les
variables
Php
auxquelles
elles
sont
liées
avec
la
méthode
PDOStatement::bindParam()
ou
la
méthode
PDOStatement::bindColumn(
)
.

à
PDO::FETCH_CLASS
à
PDO::FETCH_CLASSTYPE
à
retourner
une
nouvelle
instance
de
la
classe
demandée
,
liant
les
colonnes
au
propriétés
nommées
dans
la
classe
.

Nom
de
la
classe
=
1ère
colonne
.

20:39:03
Programmation
Web
2013-2014
24
mode
de
récupération
du
données
(
4
)
à
PDO::FETCH_INTO

met
à
jour
une
instance
existante
de
la
classe
demandée
,
liant
les
colonnes
du
jeu
de
résultats
au
noms
du
propriétés
de
la
classe
.

à
PDO::FETCH_LAZY
à
retourner
chaque
ligne
en
tant
que
objet
avec
les
noms
du
attributs
correspondant
au
noms
du
colonnes
retournées
dans
le
jeu
de
résultats
.

à
PDO::FETCH_LAZY
crée
les
noms
du
attributs
de
l'
objet
comme
ils
sont
rencontrés
.

20:39:03
Programmation
Web
2013-2014
25
Exemple
avec
PDO::FETCH_CLASS
$stmt
à
$pdo->query(<<<SQL
SELECT
id
,
name
FROM
artist
WHERE
id
=
12
SQL
)
;
$stmt->setFetchMode(PDO::FETCH_CLASS
,
'
Artist
'
)
;
if
(
(
$object
=
$stmt->fetch())
!

==
false
)
à
return
$object
;
Instancie
un
objet
de
la
classe
Artist
à
dont
les
attributs
sont
supposés
être
id
et
name
20:39:03
Programmation
Web
2013-2014
26
Préparation
de
une
requête

Déroulement
de
une
requête
SQL
1
.

2
.

3
.

4
.




à
Analyse
Compilation
Optimisation
Exécution
Exécution
répétée
de
une
requête
:
1+2+3+4
Préparation
de
une
requête
:
1+2+3
Exécution
répétée
de
une
requête
préparée
:
4
Préparation
en
fonction
de
paramètres
:


20:39:03
Anonymes
Nommés
Programmation
Web
2013-2014
27
20:39:03
Programmation
Web
2013-2014
28
Préparation
de
une
requête

PDOStatement
PDO::prepare(string
statement
[
,
array
driver_options
]
)

statement
:
la
requête
à
préparer
.

Peut
contenir
des
paramètres
anonymes
(
?

)
ou
nommés
(
:nom
)

driver_options
:
tableau
de
options
du
driver

retourne
un
objet
PDOStatement
qui
effectuera
l'
association
du
paramètres
et
exécutera
la
requête
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdostat
=
$pdo->prepare(
"
SELECT
*
FROM
user
WHERE
User=
?

"
)
;
20:39:03
Programmation
Web
2013-2014
29
Association
du
paramètres
de
une
requête
à
bool
PDOStatement::bindValue(mixed
parameter
,
mixed
value
[
,
int
data_type
]
)
à
parameter
:
le
paramètre
(
nom
ou
position
[
1…n
]
)

value
:
sa
valeur
à
data_type
:
le
type
de
la
valeur
à
PDO::PARAM_BOOL
booléen
.

à
PDO::PARAM_NULL
NULL
SQL
.

à
PDO::PARAM_INT
INTEGER
SQL
.

à
PDO::PARAM_STR
CHAR
,
VARCHAR
ou
autre
chaîne
.

à
PDO::PARAM_LOB
"
objet
large
"
SQL
.

à
bool
PDOStatement::execute([array
parameters
]
)

parameters
:
tableau
associatif
ou
indexé
du
valeurs
20:39:03
Programmation
Web
2013-2014
30
Préparation
pui
exécution
de
une
requête
(
1
)
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
=
$pdo->prepare(
"
SELECT
*
FROM
user
WHERE
User=
?

"
)
;
paramètre
anonyme
$pdostat->bindValue(1
,
'
root
'
)
;
$pdostat->execute()
;
//
Utilisation
du
résultat
$pdostat->bindValue(1
,
'
cutrona
'
)
;
$pdostat->execute()
;
//
Utilisation
du
résultat
Association
Préparation
de
une
valeur
valeur
delalarequête
au
requête
1er
paramètre
Association
Exécution
de
une
de
au
1er
paramètre
20:39:03
Programmation
Web
2013-2014
31
Préparation
pui
exécution
de
une
requête
(
2
)
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
=
$pdo->prepare(
"
SELECT
*
FROM
user
WHERE
User=
:utilisateur
"
)
;
paramètre
nommé
$pdostat->bindValue(':utilisateur
'
,
'
root
'
)
;
$pdostat->execute()
;
//
Utilisation
du
résultat
$pdostat->bindValue(':utilisateur
'
,
'
cutrona
'
)
;
$pdostat->execute()
;
//
Utilisation
du
résultat
Association
Préparation
Exécution
de
une
valeur
de
dela
au
larequête
requête
paramètre
nommé
20:39:03
Programmation
Web
2013-2014
32
Préparation
pui
exécution
de
une
requête
(
3
)
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
=
$pdo->prepare(
"
SELECT
*
FROM
user
paramètre
WHERE
User=
?

"
)
;
anonyme
$pdostat->execute(array('root'))
;
//
Utilisation
du
résultat
$pdostat->execute(array('cutrona'))
;
//
Utilisation
du
résultat
Association
Association
Préparation
Exécution
de
une
de
une
valeur
valeur
de
delalarequête
au
au
requête
1er
1er
paramètre
paramètre
20:39:03
Programmation
Web
2013-2014
33
Préparation
pui
exécution
de
une
requête
(
4
)
$pdo=new
PDO("mysql:host=localhost
;
dbname=mysql
"
)
;
$pdo->setAttribute(PDO::ATTR_ERRMODE
,
PDO::ERRMODE_EXCEPTION
)
;
$pdostat
=
$pdo->prepare(
"
SELECT
*
FROM
user
WHERE
User=
:utilisateur
"
)
paramètre
nommé
;
$pdostat->execute(
array(':utilisateur
'
=>
'
root
'
)
)
;
//
Utilisation
du
résultat
$pdostat->execute(
array(':utilisateur
'
=>
'
cutrona
'
)
)
;
//
Utilisation
du
résultat
Association
Préparation
Exécution
de
une
valeur
de
dela
au
larequête
requête
paramètre
nommé
20:39:03
Programmation
Web
2013-2014
34
Intérêt
du
requêtes
préparées
à
Amélioration
du
performances
en
cas
de
exécutions
répétées
à
Émulation
faite
par
Pdo
si
le
driver
ne
les
supporte
pas
nativement
à
Protection
automatique
du
valeurs
du
paramètres
pour
interdire
les
attaques
par
injection
de
code
SQL
20:39:03
Programmation
Web
2013-2014
35
20:39:03
Programmation
Web
2013-2014
36
Attaque
par
injection
SQL
?

à
ex
:
validation
de
un
login/pass
sur
un
site

Requête
consistant
à
trouver
un
enregistrement
correspondant
au
couple
login/pass
fourni
par
l'
utilisateur

SELECT
*
FROM
membre
WHERE
login='{$_GET['login
'
]
}
'
AND
passwd='{$_GET['passwd
'
]
}
'

Et
si
on
essayait
de
fournir
un
mot
de
passe
un
peu
particulier
…
20:39:03
Programmation
Web
2013-2014
37
Exemple
concret
de
injection
SQL
(
1
)
$pdo
=
new
PDO('mysql:host=localhost
;
dbname=test
'
)
;
$pdostat
=
$pdo->query($req
à
<<<SQL
SELECT
*
FROM
membre
WHERE
login='{$_GET['login
'
]
}
'
AND
passwd='{$_GET['passwd
'
]
}
'
SQL
)
;
echo
"
Requête:\n$req\n
"
;
if
(
$utilisateur
=
$pdostat->fetch())
echo
"
Bienvenue
à
$utilisateur['nom
'
]
}
"
;
else
echo
"
Désolé
...
"
;
20:39:03
Programmation
Web
2013-2014
38
Exemple
concret
de
injection
SQL
(
2
)
saisie
de
l'
utilisateur
par
formulaire
:

mail
:
whatever
à
pass
:
who_cares
?

URL
:
?

mail=whatever&passwd=who_cares
?

Requête
:
SELECT
*
FROM
membre
WHERE
login='whatever
'
AND
passwd='who_cares
?

'
Désolé
...
20:39:03
Programmation
Web
2013-2014
39
Exemple
concret
de
injection
SQL
(
3
)
saisie
de
l'
utilisateur
:

mail
:
whatever
à
pass
:
who_cares
?

'
OR
true
!

=
'
URL
:
?

mail=whatever&passwd=who_cares
?

'
%20OR%20true
!

=
'
Requête
:
SELECT
*
FROM
membre
WHERE
login='whatever
'
AND
passwd='who_cares
?

'
OR
true
!

=
''
Bienvenue
John
20:39:03
Programmation
Web
2013-2014
40
Protection
contre
les
injections
SQL
(
1
)
$pdo
=
new
PDO('mysql:host=localhost
;
dbname=test
'
)
;
$pdostat
=
$pdo->prepare($req
à
<<<SQL
SELECT
*
FROM
membre
WHERE
login=
?

AND
passwd
?

SQL
)
;
$pdostat->execute(array($_GET['login
'
]
,
$_GET['passwd
'
]
)
)
;
if
(
$utilisateur
=
$pdostat->fetch())
à
echo
"
Bienvenue
à
$utilisateur['nom']}\n
"
;
}
else
à
echo
"
Désole
...
\n
"
;
}
20:39:03
Programmation
Web
2013-2014
41
Protection
contre
les
injections
SQL
(
2
)
$pdo
=
new
PDO('mysql:host=localhost
;
dbname=test
'
)
;
$login
=
$pdo->quote($_GET['login'])
;
$passwd
=
$pdo->quote($_GET['passwd'])
;
$pdostat
=
$pdo->query($req
à
<<<SQL
SELECT
*
FROM
membre
Requête
:
WHERE
login=$login
SELECT
*
AND
passwd=$passwd
FROM
membre
SQL
WHERE
login='whatever
'
)
;
AND
passwd='who_cares
?

\
'
OR
true
!

çù
''
echo
"
Requête:\n$req\n
"
;
Désolé
...
if
(
$utilisateur
=
$pdostat->fetch())
à
echo
"
Bienvenue
à
$utilisateur['nom']}\n
"
;
}
42
20:39:03
Programmation
Web
2013-2014

