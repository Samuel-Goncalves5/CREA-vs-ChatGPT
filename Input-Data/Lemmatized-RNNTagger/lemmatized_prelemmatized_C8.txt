Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Créa
-on
de
un
site
Web
dynamique
Php
Php
•
Php
est
un
langage
de
programma
-on
u=lisé
pour
la
construc=on
de
sites
Web
dynamiques
à
page
Php
:
page
Web
qui
con=ennent
de
Php
•
On
va
mélanger
le
Php
au
code
HTML
/
CSS
•
Le
code
Php
va
être
analysé
par
le
serveur
à
Le
résultat
va
être
une
nouvelle
page
Web
mise
à
jour
automa=quement
par
le
code
Php
coursPHP-1.php
<html>
à
Le
code
Php
est
à
<
?

php
l'
intérieur
de
la
balise
date_default_-mezone_set("Europe/Paris")
;
<
?

php
…
?

>
ou
entouré
par
la
balise
echo
"
àp
style='font-style
:
italic
;
'
à
Paris
,
le
"
<script
language="php">
.date('d
/
m
/
y
'
)
.

"
</p>
"
;
…
</script>
?

>
à
</html>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
57
php
•
Cycle
de
vie
de
une
page
Php
1
)
Le
client
envoie
la
requête
au
serveur
2
)
Les
page
Php
sont
analysées
par
le
serveur
,
le
code
Php
est
interprété
3
)
Le
contenu
de
la
page
est
mise
à
jour
automa-quement
et
envoyé
au
client
(
1
)
Requête
Fichiers
sta=ques
hUp://serveur/page.php
HTML
/
CSS
(
3
)
Envoie
par
le
serveur
(
contenu
du
contenu
mis
à
jour
HTML
calculé
)
Interpréteur
Php
Pages
Php
(
2
)
Interpréta
-on
par
le
serveur
du
code
Php
19/01/17
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
58
php
à
<h1>
Bienvenue
sur
le
site
Php
</h1>
àp
style='font-style
:
italic
;
'
à
Paris
,
le
28
/
02
/
2012</p>
hUp://serveur/courPHP-1.php
<p>
Il
est
18:45:12
.</p>
…
Contenu
HTML/CSS
coursPHP-1.php
calculé
à
<h1>
Bienvenue
sur
le
site
Php
</h1>
<
?

php
date_default_-mezone_set("Europe/Paris")
;
Interpréteur
Php
echo
"
àp
style='font-style
:
italic
;
'
à
Paris
,
le
"
.

date('d
/
m
/
y
'
)
.

"
</p>
"
;
page
php
originelle
?

>
(
php
&
HTML
/
CSS
)
<script
language="php">
echo
"
<p>
Il
est
"
.date("H:i:s
"
)
.

"
.</p>
"
;
</script>
…
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
59
php
•
Exemple
code
Php
coursPHP-2.php
Toute
instruc=on
Php
se
<
!

DOCTYPE
html>
termine
par
un
«
;
»
<
?

php
date_default_=mezone_set("Europe/Paris")
;
Por=on
de
code
Php
$today
=
date("d-m
y
H:i:s
"
)
;
<
?

php
…
.

?

>
$variable
=
"
PHP5
"
;
?

à
<html>
<head>
à
</head>
La
séquence
/*
…
*/
<body>
délimite
un
commentaire
,
<h1>
Exemple
Php
</h1>
visible
pour
l'
auteur
,
<p>Contenu
staBque
:
ça
ne
change
pas
</p>
invisible
pour
le
client
<
?

php
/*
ce
contenu
va
être
interprété
par
le
serveur
à
Por=on
de
code
P
Hp
echo
"
<p>Contenu
en
$variable
</p>
"
;
echo
"
<p>
Aujourd'hui
c'
est
le
$today
</p>
"
;
?

à
L'
instruc=on
à
echo
»
permet
</body>
</html>
de
écrire
dans
le
document
final
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
60
Php
•
Code
une
foi
interprété
par
le
serveur
…
<
!

DOCTYPE
html>
<html>
<head>
à
</head>
<body>
<h1>
Exemple
Php
</h1>
<p>Contenu
sta=que
:
ça
ne
change
pas
</p>
<p>Contenu
en
PHP5
</p>
<p>
Aujourd'hui
c'
est
le
28-02-2012
19:38:54
</p>
</body>
</html>
Résultat
du
instruc-ons
à
echo
»
Ce
qui
le
client
voit
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
61
php
•
La
no
-on
de
variable
–
Une
variable
est
un
conteneur
de
valeur
–
On
peut
lui
affecter
une
valeur
,
qu'
on
va
u=liser
plus
tard
$variable
=
"
PHP5
"
;
Le
«
$
»
indique
une
variable
Le
«
=
»
est
une
affecta
-on
On
asribut
une
valeur
à
la
Le
nom
de
variable
variable
commence
toujours
par
une
leere
ou
un
«
_
»
,
sans
echo
"
à
$variable
…
"
;
espace
On
récupère
la
valeur
gardée
dans
la
variable
par
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
son
nom
UFR06
Ges=on
62
Php
•
La
no
-on
de
variable
:
les
types
du
données
–
Les
variables
peuvent
garder
de
valeurs
de
différents
types
à
Nombres
en-ers
(
integer
)
:
25
•
Nombres
décimaux
(
double
ou
float
)
:
2.25
•
Chaînes
de
caractères
(
string
)
:
«
1
super
chaîne
!

»
•
Logique
(
boolean
)
:
à
true
»
(
1
)
ou
«
false
»
–
La
fonc=on
geeype($variable)
permet
de
savoir
quel
e
type
de
valeur
con=ent
la
variable
à
$en=er
=
25
;
gesype($en=er)
è
integer
•
$decimal
à
2.25
;
gesype($decimal)
è
double
à
$chaine
=
"
1
super
chaîne
!

"
;
gesype($chaine)
è
string
•
$bool
=
true
;
gesype($bool)
è
boolean
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
63
php
•
Exemple
:
<
?

php
Défini
-on
de
une
$enGer
=
25
;
variable
$decimal
à
2.25
;
$chaine
=
"
1
super
chaîne
!

"
;
$boolean
=
true
;
echo
"
<li>
"
.

geeype($en-er)
.

"
:
$en-er
</li>
"
;
echo
"
<li>
"
.

geeype($decimal)
.

"
:
$decimal
</li>
"
;
echo
"
<li>
"
.

geeype($chaine)
.

"
:
$chaine
</li>
"
;
echo
"
<li>
"
.

geeype($boolean)
.

"
:
$boolean
</li>
"
;
?

à
Valeur
de
chaque
On
récupère
la
geeype()
variable
valeur
de
la
variable
informe
le
type
$boolean
de
la
variable
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
64
php
à
Opérateurs
–
Différents
opérateurs
permesent
de
manipuler
des
valeurs
,
que
ils
soient
dans
les
variables
ou
pas
Opérateurs
Opérateurs
Opérateurs
de
Opérateurs
logiques
mathéma-ques
String
comparaison
p
-
*
/
%
.

çù
!

=
||
(
OR
)
(
concaténaBon
)
çù
<
>=
>
&&
(
AND
)
!

(
not
)
<
?

php
$a
=
2
3
;
bb
=
4
-
$a
;
$nom
=
"
Toto
”
;
echo
"
Salut
"
.

$nom
;
echo
"
<p>
4
-
$a
vaut
bb
</p>
"
;
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
65
php
à
Tableaux
à
Variables
capables
de
enregistrer
plusieurs
valeurs
de
un
type
à
Tableaux
à
indice
:
Aeen
-on
a
définir
toutes
à
Chaque
posi=on
est
iden=fiée
par
les
posi=ons
avant
de
les
un
numéro
(
commençant
par
0
)
u=liser
ou
il
y
aura
une
•
message
de
erreur
.

$tableau
[
0
]
=
"
a
"
;
•
$tableau
[
1
]
=
"
b
"
;
•
$tableau
[
3
]
=
"
Fin
"
;
•
à
b
Fin
Suite
$tableau
[
]
=
"
Suite
"
;
•
Tableaux
associa-fs
:
0
1
2
3
4
–
Chaque
posi=on
reçoit
un
iden=fiant
(
un
label
)
Jean
Dupont
à
$tableauAssoc
[
"
Prenom
"
]
=
"
Jean
"
;
•
Prenom
Nom
$tableauAssoc
[
"
Nom
"
]
=
"
Dupont
"
;
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
66
Php
message
de
erreur
car
le
<head>
…
contenu
de
la
posi=on
2
<style>
à
</style>
(
$tableau[2
]
)
n'
a
pas
</head>
été
défini
auparavant
.

<body>
à
<h2>Tableaux
à
indice
</h2>
<table>
<
?

php
$tableau
[
0
]
=
"
a
"
;
$tableau
[
1
]
=
"
b
"
;
$tableau
[
3
]
=
"
Fin
"
;
Contenu
de
la
$tableau
[
]
=
"
Suite
"
;
posi=on
4
(
$tableau[4
]
)
echo
"
<tr>
<td>
"
.

$tableau[0
]
.

"
</td>
<td>
"
.

$tableau[1
]
.

"
</td>
<td>
"
.

$tableau[2
]
.

"
</td><td>
"
.

$tableau[3
]
.

"
</td><td>
"
.

$tableau[4
]
.

"
</td></tr>
"
;
?

à
</table>
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
67
php
…
<h2>Tableau
associa=f
</h2>
<table>
<tr>
<th>
Nom
</th>
<th>Prénom
</th>
</tr>
<
?

php
$tableauAssoc
[
"
Prenom
"
]
=
"
Jean
"
;
$tableauAssoc
[
"
Nom
"
]
=
"
Dupont
"
;
echo
"
<tr>
<td>
"
.

$tableauAssoc
[
"
Nom
"
]
.

"
</td>
"
;
echo
"
<td>
"
.

$tableauAssoc
[
"
Prenom
"
]
.

"
</td></tr>
"
;
?

à
</table>
</body>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
68
Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Classes
&
Objets
Php
orienté
objets
à
Php
5
est
un
langage
à
orienté
objets
»
–
Manipula=on
de
classes
et
de
objets
Défini=on
de
classe
Visibilité
:
<
?

php
class
Personne
private
$nom
class
Personne
à
private
$nom
;
Défini=on
de
un
asribut
public
func
-on
setNom
(
$nouvNom
)
Opéra=on
:
{
$this->nom
=
$nouvNom
;
}
public
func
-on
à
Accès
à
un
asribut
public
func
-on
getNom
(
)
à
$this->aeribut
return
$this->nom
;
}
à
Retourner
une
valeur
return
valeur
;
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
70
php
orienté
objets
à
Classes
&
Objets
–
Créa=on
de
un
objet
:
$obj
=
new
classe()
;
…
Créa=on
de
un
objet
<
?

php
$toto
à
new
Personne
(
)
$toto
=
new
Personne()
;
Accès
au
opéra=ons
$toto->setNom("Toto")
;
publiques
echo
"
<p>
…
"
.

$toto->getNom()
.

"
</p>
"
;
$toto->setNom("Toto")
$toto
->
getNom
(
)
$toto->nom
=
"
blablabla
"
;
echo
"
<p>
"
.

$toto->nom
.

"
</p>
"
;
?

>
Impossible
de
accéder
au
asributs
privés
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
71
Php
orienté
objets
<html>
<head>
à
<
?

php
class
Personne
à
private
$nom
;
.

.

.

à
//fin
classe
Personne
?

à
</head>
<body>
à
<
?

php
$toto
à
new
Personne()
;
$toto->setNom("Toto")
;
echo
"
<p>
Objet
<i>Personne</i>
:
"
.

$toto->getNom()
.

"
</p>
"
;
.

.

.

echo
"
<p>
"
.

$toto->nom
.

"
</p>
"
;
Erreur
car
l'
asribut
?

>
à
nom
»
est
privé
!

!

</body>
</htlml>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
72
php
orienté
objets
à
Classes
&
objets
:
–
Héritage
:
class
SousClasse
extends
SuperClasse
class
Employe
extends
Personne
à
private
$salaire
à
1000
;
La
classe
Employe
hérite
de
la
classe
Personne
public
func
-on
augmentaGon
(
$perc
)
à
class
Employe
extends
Personne
if
(
$perc
>
0
)
à
$this->salaire
=
$this->salaire
$this->salaire*$perc
;
On
rajoute
un
nouvel
asribut
à
private
$salaire
}
Et
du
nouvel
es
opéra=ons
public
func
-on
getSalaire()
public
func
-on
augmentaGon
à
return
$this->salaire
;
}
public
func
-on
getSalaire
à
Fichier
Employe.php
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
73
php
orienté
objets
à
Classes
&
objets
On
importe
la
défini=on
du
classes
<
?

php
Employe
et
Personne
include
"
Employe.php
"
;
Toto
est
un
Employé
,
il
est
donc
$toto
à
new
Employe()
;
une
Personne
$toto->setNom("Toto")
;
Toto
possède
un
salaire
(
Employe
)
,
$toto->augmenta-on(0.10)
;
mais
aussi
un
nom
(
Personne
)
echo
"
<i>
nom
</i>
:
"
.

$toto->getNom()
;
echo
"
çië
salaire
</i>
:
"
.

$toto->getSalaire()
.

"
€
</p>
"
;
?

à
La
classe
Employe
hérite
tous
les
aeributs
et
opéra-ons
de
Personne
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
74
php
orienté
objets
à
Classes
&
objets
<html>
<head>
.

.

.

</head>
<body>
<h1>Objets
en
PHP</h1>
<
?

php
include
"
Employe.php
"
;
$toto
=
new
Employe()
;
$toto->setNom("Toto")
;
$toto->augmenta=on(0.10)
;
echo
"
<p>Objet
Employe
:
</p>
<ul>
"
;
echo
"
<li>
àià
nom
</i>
:
"
.

$toto->getNom()
.

"
</li>
"
;
echo
"
<li>
àià
salaire
</i>
:
"
.

$toto->getSalaire()
.

"
€
</li>
"
;
echo
"
</ul>
"
;
?

à
</body>
</html>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
75
php
orienté
objets
à
Classes
&
objets
à
Méthode
constructeur
:
__construct
à
Redéfini
-on
de
une
opéra=on
class
Manager
extends
Employe
à
private
$bonus
;
func
-on
__construct
(
$bon
)
Le
constructeur
est
appelé
chaque
{
$this->bonus
=
$bon
;
}
foi
que
un
objet
est
créé
(
new
)
public
func
-on
getSalaire()
à
return
parent::getSalaire()
$this->bonus
;
}
public
func=on
setBonus
(
$nouvBon
)
{
…
}
Redéfini=on
de
l'
opéra=on
getSalaire
public
func=on
getBonus
(
)
{
…
}
parent::getSalaire
correspond
à
}
l'
opéra=on
getSalaire
définie
par
la
super-classe
(
Employe
)
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
76
php
orienté
objets
à
Classes
&
objets
Appel
au
constructeur
:
<
?

php
funcBon
__construct
(
$bon
)
require
"
Manager.php
"
;
{
$this->bonus
=
$bon
;
}
$toto
=
new
Manager(400)
;
Appel
à
l'
opéra=on
getSalaire
$toto->setNom("Toto")
;
de
la
classe
Manager
$toto->augmenta=on(0.10)
;
echo
"
<p><i>Manager</i>
:
"
.

$toto->getNom()
.

"
,
salaire
"
.

$toto->getSalaire()
.

"
€
"
.

"
,
bonus
"
.

$toto->getBonus()
.

"
</p>
"
;
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
77
Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Formulaires
HTML
&
Php
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
78
Php
est
un
langage
pour
le
Web
à
Communica
-on
entre
le
client
(
navigateur
)
et
le
serveur
(
php
)
–
Les
formulaires
en
HTML
permesent
de
recueil
ir
du
données
auprès
de
l'
u=lisateur
•
Les
données
sont
ensuite
communiquées
à
un
programme
à
Le
navigateur
envoie
les
données
récoltées
par
les
formulaires
au
serveur
à
Le
programme
(
page
Php
)
récupère
les
données
grâce
à
des
variables
page
Php
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
79
Formulaires
HTML
à
Un
formulaire
HTML
est
défini
par
la
balise
<form
…>
à
</form>
à
Tous
les
éléments
sont
à
l'
intérieur
de
la
balise
<form
name=
"
nomFormulaire
"
ac-on=
"
page.php
"
method="get
à
post
"
>
…
.

</form>
ac
-on
:
à
qui
on
envoie
les
données
method
:
comment
on
envoie
les
données
à
Les
champs
du
formulaire
sont
introduits
par
différents
balises
:
•
<
input
type=
"
…
"
name=
"
…
"
value=
"
…
"
idà
"
…
"
/>
•
<
textarea
name=
"
…
"
idà
"
…
"
cols=
"
…
"
rows=
"
…
"
>
…
</textarea>
•
<
select
name=
"
…
"
idà
"
…
"
sizeë
"
…
"
>
<
op
-on
value=
"
…
"
>
à
</op-on>
</select>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
80
Formulaires
HTML
<input
type="text
"
name="nomClient
"
value="votre
nom
"
size="40
"
maxlength="150
"
/>
<select
name="produit">
<op
-on
value="SuperKdo">
Super
Kdo
</op-on>
…
</select>
<textarea
name="opinionClient
"
cols="40
"
rows="5
"
>
Votre
opinion
sur
nos
produits
<input
type="reset
"
value="Neeoyer
"
/>
</textarea>
<input
type="submit
"
value="Envoyer
"
/>
input
type="submit
"
se
charge
de
envoyer
les
données
du
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
formulaire
UFR06
Ges=on
81
Formulaires
HTML
<form
name="formClient
"
ac-on="coursPHP-7.php
"
method="POST
"
à
<label
for="nom">
Nom</label>
à
qui
les
<input
type="text
"
id="nom
"
name="nomClient
"
données
sont
value="votre
nom
"
size="40
"
maxlength="150
"
/>
<br/>
envoyées
<label>
Produit</label>
input
type="text
"
<select
name="produit">
Zone
de
saisie
<op
-on
value="SuperKdo">
Super
Kdo</op-on>
<op
-on
value="MegaTruc">
Mega
Truc</op-on>
select
…
op
-on
<op
-on
value="BabyFun">
Baby
Fun</op-on>
Liste
de
sélec=on
</select>
<br/>
de
op=ons
<label>
Opinion</label>
textarea
<textarea
name="opinionClient
"
cols="40
"
rows="5
"
>
Votre
opinion
sur
nos
produits
</textarea>
Zone
de
texte
<br/>
input
type="submit
"
<input
type="submit
"
value="Envoyer
"
class="bouton
"
/>
Input
type="reset
"
<input
type="reset
"
value="Neeoyer
"
class="bouton
"
/>
Boutons
de
envoi
et
de
</form>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
reset
du
formulaire
UFR06
Ges=on
82
Formulaires
HTML
&
Php
à
Les
données
recueil
ies
dans
le
formulaire
sont
transmises
au
programme
indiqué
dans
ac-on=
…
•
Dans
Php
,
on
récupère
ces
données
grâce
à
deux
tableaux
associa-fs
spéciaux
à
$_GET
è
<form
acBon=
"
à
"
method="get
"
>
•
$_GET["nom
"
]
<input
à
name="nom
"
/>
à
$_POST
è
<form
acBon=
"
à
"
method="post
"
>
•
$_POST["nom
"
]
<input
à
name="nom
"
/>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
83
Formulaires
HTML
&
Php
<form
name="formClient
"
ac-on="coursPHP-7.php
"
method="POST
"
>
<label
for="nom">Nom</label>
<input
type="text
"
id="nom
"
name="nomClient
"
value="votre
nom
"
size="40
"
maxlength="150
"
/>
<br/>
…
<
?

php
$nom
=
$_POST["nomClient
"
]
;
çop
=
$_POST["opinionClient
"
]
;
$prod
=
$_POST["produit
"
]
;
echo
"
<p>Merci
de
votre
parBcipaBon
,
$nom
!

</p>
"
;
echo
"
<p>Votre
produit
est
:
<i>
$prod
</i>
</p>
"
;
echo
"
<p>
Votre
opinion
est
:
<i>
$op
</i>
</p>
"
;
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
84
Formulaires
HTML
&
Php
à
Méthode
GET
–
Les
données
sont
envoyées
dans
l'
URL
du
programme
–
Limitée
à
256
octets
<form
name="formGet
"
à
Déconseillé
ac-on="coursPHP-8.php
"
method="GET">
<label>Nom</label>
<input
type="text
"
name="client
"
size="20
"
/>
<br/>
<label>Mot
de
passe
</label>
<input
type="password
"
name="mdp
"
size="10"/>
<br/>
<input
type="submit
"
value="Envoyer
"
/>
</form>
<
?

php
echo
"
<p>Bienvenue
,
<i>
"
.

$_GET["client
"
]
.

"
Iiië
!

</p>
"
;
Man
?

à
uele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
85
Formulaires
HTML
&
Php
<form
name=
"
…
"
ac-on="coursPHP-9.php
"
method="POST">
<fieldset>
à
Exemple
<legend>
Vos
données
</legend>
<label
>…</label>
<
input
type="text
"
name="nom
"
…
/>
<br/>
<label
>…</label>
<
input
type="email
"
name="email
"
…
/><br/>
<input
type="radio
"
name="sexe
"
value="Homme
"
/>
homme
<input
type="radio
"
name="sexe
"
value="Femme
"
/>
Femme<br/>
</fieldset>
<fieldset>
<legend>
Vos
produits
</legend>
<label>…</label>
<select
name="produit">
<op
-on
value="SuperKdo">…</op-on>
<op
-on
value="MegaTruc">
Mega
Truc</op-on>
<op
-on
value="BabyFun">
à
</op-on>
</select>
<br/>
<label>…</label>
<textarea
name="opinion
"
…
>
…
</textarea>
Manuele
Kirsch
P
</
inhe
fieliro
d
-
Up
set
1
>
/
CRI
/
UFR06
Ges=on
86
Formulaires
HTML
&
Php
<body>
à
Exemple
<h1>Récapitula=f
</h1>
<ul>
<
?

php
echo
"
<li>
Nom
:
"
.

$_POST["nom
"
]
.

"
</li>
"
;
echo
"
<li>
Email
:
"
.

$_POST["email
"
]
.

"
</li>
"
;
echo
"
<li>
Sexe
:
"
.

$_POST["sexe
"
]
.

"
</li>
"
;
echo
"
<li>
Produit
préféré
:
"
.

$_POST["produit
"
]
.

"
</li>
"
;
echo
"
<li>
Sugges
-on
:
"
.

$_POST["opinion
"
]
.

"
</li>
"
;
?

à
</ul>
</body>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
87
Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Instruc-ons
de
contrôle
en
Php
Fonc-ons
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
88
Php
•
Instruc-ons
de
contrôle
–
Instruc=ons
pour
gérer
le
flot
de
exécu=on
à
Instruc-ons
condi-onnelles
à
El
es
condi=onnent
l'
exécu=on
•
Semblables
à
un
nœud
de
Décision
(
diagramme
ac=vités
)
à
if
à
else
à
,
switch
à
case
…
–
Instruc-ons
de
boucle
•
El
es
permesent
la
répé-
-on
de
un
bloc
de
instruc=ons
à
for
…
,
foreach
…
,
while
…
,
do
…
while
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
89
Php
à
Instruc-ons
condi-onnelles
if
…
else
à
if
(
condiGon
)
[
condi=on
VRAI
]
{
bloc
de
instrucGons
si
vrai
;
à
Bloc
else
de
instruc-ons
opGonnel
si
vrai
à
bloc
de
instrucGons
si
faux
;
}
[
sinon
]
Bloc
If
(
$qte
çù
100
)
de
instruc-ons
à
$remise
=
0.10
;
/*
remise
de
10
%
offerte
*/
si
faux
echo
"
<p>Vous
avez
une
remise
de
10
%
!

</p>
"
;
}
else
{
…
$remise
=
0.05
;
echo
"
<p>Vous
avez
une
remise
de
5
%
</p>
"
;
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
à
UFR06
Ges=on
90
Php
à
Instruc-ons
condi-onnelles
if
…
else
…
–
Les
données
pour
la
condi=on
peuvent
venir
de
un
formulaire
formExemple11.html
<
?

php
coursPHP-11.php
<form
name=
"
…
"
method="POST
"
$qte
=
$_POST["qte
"
]
;
ac-on="coursPHP-11.php
"
>
$prixunit
=
$_POST["prix
"
]
;
…
$remise
=
0
;
<select
name="prix">
<op
-on
value="10">
if
(
$qte
çù
100
)
Super
Kdo
-
10€
</op-on>
à
$remise
=
0.10
;
/*
remise
de
10
%
offerte
*/
à
echo
"
<p>Vous
avez
une
remise
de
10
%
!

</p>
"
;
</select>
}
à
<input
type="number
"
size="10
"
$prix
=
$prixunit
*
$qte
name="qte
"
/>
-
(
$prixunit
*
$qte
*
$remise
)
;
…
echo
"
<p>
Pour
un
prix
de
<i>
$prixunit
</i>
<input
type="submit
"
value="Devis
"
/>
l'
unité
et
<i>
$qte
</i>
unités
,
vous
avez
à
</form>
régler
<i>
$prix
</i></p>
"
;
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
91
Php
<form
name=
"
…
"
method="POST
"
ac-on="coursPHP-11.php
"
>
<label>Produit
:
</label>
<
?

php
<select
name="prix">
$qte
=
$_POST["qte
"
]
;
<op
-on
value="10
"
>
Super
à
</op-on>
$prixunit
=
$_POST["prix
"
]
;
…
</select>
<br/>
$remise
=
0
;
<label
>Quan=té
:
</label>
…
.

<input
name="qte
"
type="number
"
if
(
$qte
çù
100
)
size="10
"
/>
<br/>
à
$remise
=
0.10
;
echo
"
<p>Vous
avez
à
.

</p>
"
;
<input
type="submit
"
value="Devis
"
/>
}
</form>
…
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
92
php
à
Instruc-ons
condi-onnelles
if
…
else
…
à
Les
blocs
if
à
else
…
peuvent
contenir
n'
importe
quel
e
instruc=on
,
y
compris
d'
autres
blocs
if
à
else
à
if
(
condiGon1
)
{
bloc
de
instrucGons
si
condiGon1
vraie
;
à
elseif
(
condi-on2
)
{
bloc
de
instrucGons
si
condiGon2
vraie
;
à
else
à
bloc
de
instrucGons
si
les
condiGons
sont
fausses
;
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
93
php
<
?

php
$qte
=
$_POST["qte
"
]
;
$prixunit
=
$_POST["prix
"
]
;
if
(
$qte
çù
100
)
{
$remise
=
0.10
;
}
<form
name=
"
…
"
method="POST
"
elseif
(
$qte
çù
50
)
ac-on="coursPHP-12.php
"
>
{
$remise
=
0.05
;
}
…
<select
name="prix">
à
</select>
else
…
{
$remise
=
0
;
}
<input
type="number
"
à
name="qte"/>
à
$prix
=
$prixunit
*
$qte
<input
type="submit
"
value="Devis
"
/>
-
(
$prixunit
*
$qte
*
$remise
)
;
</form>
echo
"
<p>
Prix
unitaire
:
<i>
$prixunit
</i>
,
QuanBté
:
<i>
$qte
</i>
,
Remise
:
<i>
"
.

$remise*100
.

"
</i>
%
</p>
"
;
echo
"
<p><i>Total
à
régler
:
</i>
<b>
$prix
</b></p>
"
;
Manuele
Kirsch
?

pi
>
n
heiro
-
Up1
/
CRI
/
UFR06
Ges=on
94
php
•
Instruc-ons
de
boucle
:
for
à
La
boucle
for
permet
de
répéter
(
un
certain
nombre
de
foi
)
l'
exécu=on
de
un
bloc
de
instruc=ons
for
(
iniGalisaGon
;
condiGon
;
incrémentaGon
)
{
bloc
de
instrucGons
à
répéter
;
}
[
i
çù
6
]
$i
=
1
echo
à
iu
[
else
]
la
suite
à
for
(
çi
=
1
;
çi
çù
6
;
çiu
)
{
echo
"
<h$i>
Titre
niveau
$i
</h$i>
"
;
çiu
è
çi
=
çi
1
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
95
php
•
Instruc-ons
de
boucle
:
for
<
?

php
for
(
çi
à
1
;
çi
çù
6
;
çiu
)
{
echo
"
<h$i>
Titre
niveau
$i
</h$i>
"
;
}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
96
php
•
Instruc-ons
de
boucle
:
while
à
La
boucle
while
permet
de
con=nuer
à
réaliser
un
bloc
de
opéra=ons
tant
que
une
condi
-on
soit
vraie
[
i
<=
6
]
$i
=
1
echo
…
çi
à
çi
1
;
[
else
]
la
suite
à
çi
=
1
;
while
(
çi
çù
6
)
{
echo
"
<h$i>
Titre
niveau
$i
</h$i>
"
;
$i
=
çi
1
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
97
php
•
Instruc-ons
de
boucle
:
while
On
donne
une
valeur
ini-ale
à
la
variable
$i
<
?

php
$i
à
1
;
Tant
que
çi
ne
dépasse
while
(
çi
çù
6
)
à
pas
la
valeur
6
echo
"
<h$i>
Titre
niveau
$i
</h$i>
"
;
$i
=
çi
1
;
}
?

à
On
met
à
jour
la
valeur
de
la
variable
$i
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
98
Php
•
Instruc-ons
de
boucle
:
foreach
à
La
boucle
foreach
permet
de
répéter
un
bloc
de
instruc=ons
pour
chaque
valeur
dans
un
tableau
[
reste
-t-il
une
$-tre
reçoit
la
$tableau
valeur
?

]
prochaine
valeur
echo
…
[
plus
de
valeur
dans
le
tableau
]
la
suite
à
foreach
(
$tableau
as
$-tre
)
à
echo
"
<$-tre>
Titre
$-tre
</$-tre>
"
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
99
Php
•
Instruc-ons
de
boucle
:
foreach
<
?

php
On
définit
un
tableau
$tableau
=
array("h1
"
,
"
h2
"
,
"
h3
"
,
"
h4
"
,
"
h5
"
,
"
h6
"
)
;
foreach
(
$tableau
as
$-tre
)
à
echo
"
<$-tre>
Titre
$-tre
Pour
chaque
valeur
</$-tre>
"
;
dans
le
tableau
}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
100
php
•
Instruc-ons
de
boucle
:
foreach
–
ça
fonc=onne
aussi
pour
les
tableaux
associa=fs
On
définit
un
tableau
associa=f
:
clé
=>
valeur
<
?

php
$tableau
=
array
(
"
nom
"
=>
"
Dupont
"
,
"
prenom
"
=>
"
Jean
"
,
"
adresse
"
=>
"
qq
part
à
Paris
"
)
;
Pour
chaque
pair
foreach
(
$tableau
as
$cle=>$valeur
)
à
$clé
çù
$valeur
echo
"
<li>
$cle
:
$valeur
</li>
"
;
dans
$tableau
}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
101
php
•
Instruc-ons
de
boucle
:
boucles
imbriquées
à
Il
est
possible
de
imbriquer
des
boucles
les
unes
dans
les
autres
<table>
<
?

php
for
(
$lin
=
1
;
$lin
çù
9
;
$lin++
)
à
echo
"
<tr>
”
;
for
(
$col
=
1
;
$col
çù
9
;
$col++
)
{
echo
"
<td>
"
.

(
$col
*
$lin
)
.

"
</td>
"
;
}
echo
"
</tr>
"
;
}
?

à
</table>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
102
php
à
Fonc-ons
à
Php
offre
une
large
panoplie
de
fonc=ons
à
Exemple
:
isset($var)
à
TRUE
si
$var
est
connue
•
Exemple
:
empty($var)
à
TRUE
si
$var
est
vide
(
ou
vaut
0
)
–
On
peut
aussi
écrire
les
nôtres
(
même
en
dehors
des
classes
)
•
func
-on
nomFonc
-on
(
$paramètre
,
…
)
{
instruc-ons
à
func
-on
saluta
-on
(
$nom
)
à
echo
"
<h1>Bienvenue
,
$nom
!

</h1>
"
;
echo
"
àp
class=droite>Aujourd'hui
,
nous
sommes
le
"
.date('d
/
m
/
y
'
)
.

"
</p>
"
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
103
<
?

php
Php
…
func
-on
saluta
-on
(
$nom
)
{
<form
name=
"
…
"
method="POST
"
date_default_-mezone_set("Europe/Paris")
;
ac-on="coursPHP-15.php
"
>
<label
>Nom
:
</label>
echo
"
<h1>Bienvenue
,
$nom
!

</h1>
"
;
<input
type="text
"
name="client
"
echo
"
àp
class=droite>Aujourd'hui
…
"
size="25"/>
.

date('d
/
m
/
y
'
)
.

"
</p>
"
;
…
}
<input
type="submit
"
value="OK
"
/>
</form>
if
(
isset
(
$_POST["client
"
]
)
AND
!

empty
(
$_POST["client
"
]
)
)
à
saluta
-on
(
$_POST["client
"
]
)
;
à
else
à
saluta
-on
(
"
cher
client
"
)
;
}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
104
php
à
Importa
-on
des
fichiers
à
Incorporer
le
contenu
de
un
fichier
dans
une
page
Php
•
But
:
réu=lisa=on
du
fichiers
,
uniformisa=on
du
site
à
include
"
fichier
"
et
include_once
"
fichier
"
•
include
remplace
la
ligne
par
le
contenu
du
fichier
à
include_once
fait
ça
une
seule
foi
(
même
dans
une
boucle
)
à
require
"
fichier
"
et
require_once
"
fichier
"
•
idem
include
,
mais
si
le
fichier
n'
existe
pas
,
on
a
une
erreur
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
105
php
<meta
charset="UTF-8
"
/>
<head>
<
?

php
à
include_once
"
head.html
"
;
<=tle>Mon
site</=tle>
require
"
mesfonc-ons.php
"
;
?

>
<link
rel="stylesheet
"
</head>
<body>
href="css/blocs.css
"
àà
<
?

php
include_once
"
headerNav.html
"
;
?

>
à
<header>
<h1>Mon
site</h1>
<
?

php
</header>
<nav>
saluta
-on
(
"
cher
client
"
)
;
<h2>Exemples
</h2>
?

à
<ul>
<ar=cle>
<
?

php
<li>…</li>
<h2>
News
</h2>
func
-on
saluta
-on
(
$nom
)
à
à
<p>
à
</p>
echo
"
àp
class=droite><b>Bienvenue
,
</ul>
</ar=cle>
$nom
!

</b></p>
"
;
</nav>
à
echo
"
àp
class=droite>Aujourd'hui
,
nous
sommes
le
"
.date('d
/
m
/
y
'
)
.

"
</p>
"
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
?

>
UFR06
Ges=on
106
Php
include_once
"
head.html
"
<head>
…
<-tle>Mon
site</-tle>
<link
rel="stylesheet
"
href="css/blocs.css
"
àà
</head>
<body>
<header>
<h1>Mon
site</h1>
</header>
<nav>
<h2>Exemples
</h2>
include_once
"
headerNav.html
"
;
<ul>
<li>…</li>
à
</ul>
require
"
mesfonc-ons.php
"
;
</nav>
saluta
-on
(
"
cher
client
"
)
;
<sec=on>
àp
class=droite><b>Bienvenue
,
cher
client
!

</b></p><p
class=droite>Aujourd'hui
,
nous
sommes
le
22/
03
/
2014
</p>
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
107
Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Php
&
les
base
de
données
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
108
Php
•
Accès
au
base
de
données
à
par-r
de
Php
à
PHP-MySQL
sont
très
u=lisés
pour
les
sites
Web
–
Différents
«
bibliothèques
à
disponibles
•
mysqli
et
Pdo
•
Etapes
pour
l'
u-liser
une
base
du
données
1
)
connexion
au
serveur
MySQL
2
)
envoi
des
requêtes
SQL
(
select
,
insert
into
…
)
3
)
récupéra=on
du
résultats
4
)
fermeture
de
la
connexion
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
109
Php
•
Connexion
à
un
serveur
MySQL
à
travers
mysqli
à
Toute
la
communica=on
avec
la
Bdd
passe
par
un
objet
de
la
classe
à
mysqli
»
–
La
connexion
s'
effectue
à
la
créa
-on
de
cet
objet
(
new
)
$idcon
=
new
mysqli
(
à
host
,
$user
,
$mdp
,
$bdd
)
;
obj
nom
du
serveur
base
de
données
et
idenBfiant
de
la
connexion
mot
de
passe
uBlisateur
autorisé
à
accéder
à
la
base
•
Toute
connexion
ouverte
doit
être
fermée
$bool
=
$idcon->close
(
)
;
on
demande
à
l'
objet
mysqli
de
fermer
la
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
connexion
UFR06
Ges=on
110
php
<
?

php
$host
=
"
localhost
"
;
$user
=
"
root
"
;
Astuce
:
placer
ces
informa=ons
dans
un
fichier
$mdp
=
"
root
"
;
et
faire
require
(
ou
include
)
"
fichier
"
$bdd
=
"
clientsBD
"
;
Créa=on
de
l'
objet
$mysqli
=
new
mysqli
(
$host
,
$user
,
$mdp
,
$bdd
)
;
connexion
if
(
$mysqli->connect_errno
)
à
L'
asribut
connect_errno
die
(
"
<p>
Impossible
de
connecter
à
$bdd
:
"
de
indique
si
la
connexion
.

$mysqli->connect_error
.

"
</p>
"
)
;
a
bien
été
établie
à
else
{
En
cas
de
problème
,
echo
"
<p>
Connecté
au
serveur
$host
,
on
arrête
avec
la
à
la
base
$bdd
</p>
"
;
fonc=on
die
.

$mysqli->close()
;
}
Fermeture
de
la
connexion
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
111
php
•
Envoie
de
requêtes
à
une
base
de
données
$result
=
$mysqli->query
(
$sql
)
;
Résultat
de
la
requête
exécuBon
de
la
requête
Requête
SQL
à
sur
l'
objet
connexion
exécuter
à
Requête
SQL
:
•
si
il
s'
agit
de
un
SELECT
,
le
résultat
correspond
au
données
fournies
par
la
requête
(
objet
mysqli_result
)
à
Sinon
(
INSERT
,
UPDATE
,
DELETE
…
)
,
le
résultat
sera
TRUE
si
la
requête
est
bien
exécutée
,
FALSE
sinon
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
112
<form
name="formNouveauClient
"
Php
ac-on="coursPHP-18.php
"
method="POST">
.

.

.

<input
type="text
"
name="nom
"
.

.

.

/>
.

.

.

<input
type="text
"
name="email
"
.

.

.

/>
.

.

.

<input
type="submit
"
value="Envoyer
"
/>
</form>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
113
coursPHP-18.php
<
?

php
if
(
!

empty($_POST["nom"])
AND
!

empty($_POST[P
"
e
hp
mail
"
]
)
)
{
require
"
connexion.php
"
;
$mysqli
=
connexion()
;
connexion.php
<
?

php
$nom
=
$_POST["nom
"
]
;
func
-on
connexion()
à
$email
=
$_POST["email
"
]
;
$host
=
"
localhost
"
;
$adr
=
$_POST["adresse
"
]
;
$user
=
"
uml
"
;
çid
=
'
\N
'
;
/*
auto-increment
*/
$mdp
=
"
uml
"
;
$bdd
=
"
clientsBD
"
;
$sql
=
"
INSERT
INTO
client
(
id
,
nom
,
email
,
adresse
)
VALUES
(
'
$id
'
,
'
$nom
'
,
'
$email
'
,
'
$adr
'
)
"
;
$mysqli
=
new
mysqli
(
$host
,
$user
,
$mdp
,
$bdd
)
;
$result
=
$mysqli->query
(
$sql
)
;
if
(
$mysqli->connect_errno
)
à
if
(
!

$result
)
à
echo
"
<p>Désolée
,
…
</p>
"
;
}
die
(
"
<p>
Impossible
…
"
else
{
.

$mysqli->connect_error
.

"
</p>
"
)
;
echo
"
<p>
vous
êtes
le
client
numéro
<i>
"
}
.

$mysqli->insert_id
.

"
</i></p>
"
;
return
$mysqli
;
}
}
?

à
$mysqli->close()
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
…
?

>
UFR06
Ges=on
114
php
à
Récupéra
-on
des
données
$result
=
$mysqli->query
(
"
SELECT
*
FROM
table
"
)
;
–
Les
requêtes
SELECT
fournissent
des
données
à
On
récupère
le
résultat
(
ligne
à
ligne
)
à
l'
aide
du
opéra=ons
fetch_*
–
Chaque
appel
à
fetch_*
retourne
la
prochaine
ligne
•
Ligne
dans
un
tableau
à
indice
:
$result->fetch_row
(
)
;
•
Ligne
dans
un
tableau
associa=f
:
$result->fetch_assoc
(
)
;
•
Ligne
dans
un
objet
:
$result->fetch_object
(
)
;
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
115
connexion.php
<
?

php
coursPHP-19.php
Php
<
?

php
func
-on
connexion()
à
require
"
connexion.php
"
;
.

.

.

$mysqli
=
connexion()
;
$mysqli
=
new
mysqli
(
$host
,
$user
,
$mdp
,
$bdd
)
;
$sql
=
"
SELECT
id
,
nom
,
email
,
adresse
.

.

.

return
$mysqli
;
FROM
client
ORDER
By
nom
"
;
}
?

à
$result
=
$mysqli->query
(
$sql
)
;
On
exécute
la
requête
avec
if
(
!

$result
)
à
echo
"
<p>
Desolée
à
</p>
"
;
à
l'
opéra=on
$mysqli->query
else
{
.

.

.

while
(
$ligne
=
$result->fetch_object()
)
{
L'
opéra=on
$result->fetch_object
.

.

.

récupère
la
prochaine
ligne
,
echo
"
<td>
"
.

$ligne->id
.

"
</td>
"
;
Faux
si
il
n'
y
reste
plus
de
lignes
.

echo
"
<td>
"
.

$ligne->nom
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne->email
.

"
</td>
"
;
Chaque
aeribut
de
la
requête
echo
"
<td>
"
.

$ligne->adresse
.

"
</td>
"
;
devient
un
aeribut
de
l'
objet
.

.

.

$ligne
}
.

.

.

}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
116
php
La
même
requête
avec
récupéra
-on
des
informa-ons
à
…
par
tableau
à
indice
•
…
par
tableau
associa=f
.

.

.

.

.

.

$sql
=
"
SELECT
id
,
nom
,
email
,
adresse
$sql
=
"
SELECT
id
,
nom
,
email
,
adresse
FROM
client
ORDER
By
nom
"
;
FROM
client
ORDER
By
nom
"
;
$result
=
$mysqli->query
(
$sql
)
;
$result
=
$mysqli->query
(
$sql
)
;
.

.

.

.

.

.

while
(
$ligne
=
$result->fetch_row()
)
{
while
(
$ligne
=
$result->fetch_assoc
(
)
)
{
.

.

.

.

.

.

echo
"
<td>
"
.

$ligne[0
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne['id
'
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne[1
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne['nom
'
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne[2
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne['email
'
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne[3
]
.

"
</td>
"
;
echo
"
<td>
"
.

$ligne['adresse
'
]
."<td>
"
;
.

.

.

.

.

.

}
.

.

.

}
.

.

.

ça
commence
toujours
par
0
chaque
asribut
est
accessible
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
par
son
nom
UFR06
Ges=on
117
php
•
Autres
informa=ons
peuvent
être
récupérées
de
un
objet
mysqli_result
(
$result
=
$mysqli->query
(
…
)
)
–
Combien
de
lignes
et
colonnes
on
peut
récupérer
à
$nblignes
=
$result->num_rows
;
•
$nbcol
=
$result->field_count
;
à
Les
noms
du
colonnes
(
aeributs
)
dans
le
résultat
à
$colonnes
=
$result->fetch_fields()
;
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
118
php
.

.

.

à
par=r
de
l'
objet
$result
,
on
peut
$sql
à
"
SELECT
id
,
nom
,
email
,
adresse
récupérer
le
nombre
de
lignes
FROM
client
ORDER
By
nom
"
;
(
asribut
num_rows
)
et
de
colonnes
$result
=
$mysqli->query
(
$sql
)
;
par
ligne
(
asribut
field_count
)
.

.

.

.

echo
"
àpà
Nous
avons
"
.

$result->num_rows
.

"
clients
.

</p>
"
;
echo
"
<p>
Il
y
a
"
.

$result->field_count
.

"
asributs
par
client
.

</p>
"
;
.

.

.

.

.

.

On
peut
aussi
récupérer
les
$-tres
=
$result->fetch_fields()
;
colonnes
.

Chaque
colonne
est
un
foreach
(
$-tres
as
$colonne
)
{
objet
et
l'
asribut
name
donne
echo
"
<th>
"
.

$colonne->name
.

"
</th>
"
;
son
nom
.

à
while
(
$ligne
=
$result->fetch_object()
)
{
La
ligne
aussi
est
un
objet
dont
les
echo
"
<tr>
"
;
aeributs
correspondent
au
foreach
(
$ligne
as
$colonne=>$val
)
{
colonnes
.

On
peut
u=liser
un
echo
"
<td>
"
.

$val
.

"
</td>
"
;
foreach
pour
accéder
à
la
valeur
à
echo
"
</tr>
"
;
des
aeributs
.

Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR0
}
.

.

.

6
Ges=on
119
Informa=que
Modélisa=on
UML
Objec-fs
de
la
séance
:
Mécanismes
de
sessions
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
120
php
•
Mécanisme
de
sessions
à
Chaque
visite
à
un
site
/
page
est
indépendante
à
Les
sessions
permesent
de
conserver
les
informa=ons
du
visiteurs
entre
les
page
à
Les
informa=ons
sur
les
sessions
sont
stockées
sur
le
serveur
à
Fonc=onnement
général
1
)
Ouverture
de
session
:
session_start
(
)
à
Chaque
u=lisateur
reçoit
un
iden=fiant
transmis
entre
les
page
2
)
Défini=on
du
variables
de
sessions
(
données
)
à
Les
variables
de
session
sont
transmises
de
page
à
page
•
$_SESSION["variable
"
]
=
valeur
;
3
)
Fermeture
de
session
:
session_destroy()
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
121
Php
Login
&
mdp
différents
de
uml
Login
&
mdp
corrects
(
uml
/uml
)
<
form
name=
"
…
"
ac-on="coursPHP-23.php
"
method="POST
"
à
<label
>Login
:
</label>
<input
type="text
"
name="login
"
maxlength="15
"
/>
<br/>
<label
>Mot
de
passe
:
</label>
<input
type="password
"
name="mdp
"
maxlength="15
"
/>
<br/>
<input
type="submit
"
value="OK
"
/>
</form>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
122
php
<
?

php
session_start()
;
?

à
Ouverture
de
une
session
<html>
(
au
début
de
chaque
page
)
<head>
à
</head>
<body>
<
?

php
.

.

.

$login
=
$_POST["login
"
]
;
Défini=on
du
variables
de
session
$mdp
=
$_POST["mdp
"
]
;
$_SESSION["var
"
]
if
(
$login
==
"
uml
"
AND
$mdp
çù
"
uml
"
)
{
$_SESSION["login
"
]
=
$login
;
…
echo
"
<h1>Bienvenue
,
cher
$login
</h1>
"
;
Les
variables
de
}
session
con=ennent
else
à
echo
"
<h1>Desolé
!

</h1>
"
;
les
informa=ons
qui
echo
"
<p>
page
accessible
uniquement
au
membres
.

</p>
"
;
passeront
de
page
en
}
page
.

?

à
</body>
</html>
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
123
php
<
?

php
session_start()
;
?

à
<html>
<head>
à
</head>
<body>
<
?

php
if
(
isset(
$_SESSION["login
"
]
)
AND
!

empty(
$_SESSION["login
"
]
)
)
{
$login
=
$_SESSION["login
"
]
;
…
usage
du
variables
de
session
echo
"
<p>Client
çbë
$login
</b>
:
Ceci
est
une
page
pour
$
le
-s
Eab
SSoIn
Oné
N[s
"
</
v
p
ar>
"
"
]
;
}
else
à
echo
"
<h1>Desolé
!

</h1>
"
;
echo
"
-pà
Il
s'
agit
de
une
page
privée
!

!

Il
faut
être
membre
.

</p>
"
;
}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
…
UFR06
Ges=on
124
php
<
?

php
session_start()
;
?

à
<html>
<head>
à
</head>
<body>
<
?

php
if
(
isset(
$_SESSION["login
"
]
)
AND
!

empty(
$_SESSION["login
"
]
)
)
{
…
unset($_SESSION["login"])
;
Fermeture
de
la
session
session_destroy()
;
session_destroy()
à
else
à
echo
"
<h1>Desolé
!

</h1>
"
;
echo
"
<p>
Pas
de
connexion
ac=ve
.

</p>
"
;
Ne
pas
oublier
de
vider
les
}
?

>
variables
de
session
à
unset(
$_SESSION[
"
var
"
]
)
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
125
php
•
Mécanisme
de
sessions
–
Base
pour
la
ges=on
de
panier
dans
les
sites
de
e-commerce
à
Les
produits
choisis
par
le
client
sont
enregistrés
en
tant
que
variables
de
session
–
On
peut
y
garder
des
objets
SIMPLES
class
LigneProduit
à
public
$nom
;
public
$qte
;
Contenu
du
panier
est
gardé
dans
les
variables
de
session
.

àà
constructeur
à
Tableau
contenant
des
objets
func
-on
__construct(
$nom
)
à
LigneProduit
.

$this->nom
à
$nom
;
Chaque
$_SESSION[$produit
]
$this->qte
=
1
;
con=ent
un
objet
.

}
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
126
Php
Chaque
produit
choisi
est
iden=fié
func
-on
ajouterProduit($produit)
{
par
un
«
id
»
(
ici
le
nom
)
.

$qte
=
0
;
$_SESSION[$produit
]
va
contenir
un
objet
LigneProduit
if
(
!

isset
(
$_SESSION[$produit
]
)
)
{
$_SESSION[$produit
]
=
new
LigneProduit($produit)
;
$qte
=
$_SESSION[$produit]->qte
}
si
il
n'
y
a
aucun
$_SESSION[$produit
]
,
else
à
//
produit
déjà
là
,
augmenter
alors
sa
quan=té
on
va
créer
un
nouveau
objet
$objet
=
$_SESSION[$produit
]
;
LigneProduit
$objet->qte
=
$objet->qte
1
;
$qte
=
$objet->qte
;
si
il
y
a
déjà
un
}
$_SESSION[$produit
]
,
return
$qte
;
on
va
juste
augmenter
la
valeur
de
}
l'
asribut
«
qte
»
dans
l'
objet
LigneProduit
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
127
Php
Lorsqu'
on
veut
supprimer
un
func
-on
supprimerProduit($produit)
à
produit
,
on
va
réduire
sa
quan=té
$qte
=
0
;
dans
l'
objet
LigneProduit
If
(
isset(
$_SESSION[$produit
]
)
)
{
On
récupère
l'
objet
$objet
=
$_SESSION[$produit
]
;
LigneProduit
gardé
dans
$objet->qte
=
$objet->qte
-
1
;
$_SESSION[$produit
]
$qte
=
$objet->qte
;
On
réduit
sa
quan=té
de
une
unité
If
(
$qte
çù
0
)
{
//on
supprime
le
produit
unset($_SESSION[$produit])
;
}
}
si
il
n'
en
reste
plus
(
la
quan-té
a
aseint
0
unités
)
,
on
supprime
le
return
$qte
;
produit
de
la
session
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
128
Php
On
peut
récupérer
le
contenu
du
panier
en
récupérant
le
contenu
de
la
variable
de
session
$_SESSION
Pour
chaque
objet
LigneProduit
gardé
dans
func
-on
afficherPanier()
à
$_SESSION
echo
"
<table>
"
;
foreach($_SESSION
as
$objet
)
{
echo
"
<tr><td>
"
.

$objet->nom
.

"
</td>
<td>
"
.

$objet->qte
.

"
</td>
</tr>
"
;
}
echo
"
</table>
"
;
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
129
Php
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
130
Php
:
Panier
avancé
•
Voici
un
exemple
avancé
de
Panier
qui
u=lise
les
classes
en
Php
et
la
no=on
de
session
à
Le
panier
est
modélisé
par
une
classe
Panier
Panier
p
nbProduits
:
int
Produit
lignes
p
ajouterProduit
(
code
,
nom
,
prix
)
p
code
:
String
p
supprimerProduit
(
code
)
*
p
nom
:
String
p
calculerTotal
(
)
:
float
p
prix
:
float
p
getNbProduits
(
)
:
int
LignePanier
<
?

php
<
?

php
p
qte
:
int
class
Produit
à
class
LignePanier
à
public
$code
;
public
$prod
;
public
$nom
;
public
$qte
;
public
$prix
;
.

.

.

.

.

.

}
?

à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
}
?

>
UFR06
Ges=on
131
Php
:
Panier
avancé
class
Panier
à
Chaque
Ligne
de
Panier
est
gardée
dans
public
$lignes
;
un
tableau
associa=f
public
$nbProduits
;
$this->lignes[$code
]
=>
$LignePanier
func=on
__construct()
à
On
commence
avec
zéro
produits
$this->nbProduits
=
0
;
dans
le
panier
}
On
va
créer
le
tableau
func
-on
ajouterProduit($code
,
$nom
,
$prix
)
à
lors
de
l'
ajout
du
…
if
(
$this->nbProduits
çù
0
)
{
premier
produit
au
$prod
=
new
Produit($code
,
$nom
,
$prix
)
;
panier
$lp
=
new
LignePanier($prod)
;
$this->lignes[$code
]
=
$lp
;
$this->nbProduits
=
1
;
}
.

.

.

Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
132
php
:
Panier
avancé
func
-on
ajouterProduit($code
,
$nom
,
$prix
)
à
if
(
$this->nbProduits
==
0
)
{
.

.

.

}
Pour
ajouter
,
on
vérifie
si
le
else
à
produit
est
déjà
dans
le
panier
if
(
isset
(
$this->lignes[$code
]
)
)
{
$lp
=
$this->lignes[$code
]
;
$qte
=
$lp->qte
;
si
il
y
est
,
on
le
récupère
et
on
$lp->qte
=
$qte
1
;
met
à
jours
la
quan-té
à
else
à
$prod
=
new
Produit($code
,
$nom
,
$prix
)
;
$lp
=
new
LignePanier($prod)
;
si
il
n'
y
est
pas
,
on
va
y
ajouter
une
nouvelle
ligne
de
panier
$this->lignes[$code
]
=
$lp
;
$this->nbProduits
=
$this->nbProduits
1
;
}
}
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
133
Php
:
Panier
avancé
func
-on
ajouterProduit($code
,
$nom
,
$prix
)
{
On
ne
supprime
que
si
le
if
(
isset
(
$this->lignes[$code
]
)
)
{
produit
est
dans
le
panier
$lp
=
$this->lignes[$code
]
;
si
il
y
est
,
on
met
à
jour
la
quan=té
,
$lp->qte
=
$lp->qte
-
1
;
en
supprimant
1
unité
if
(
$lp->qte
<
1
)
{
Par
contre
,
si
il
ne
reste
plus
rien
unset($this->lignes[$code])
;
(
qte
<
1
)
,
on
supprime
la
ligne
$this->nbProduits
=
$this->nbProduits
-
1
;
de
panier
du
tableau
}
}
à
Manuele
Kirsch
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
134
php
:
Panier
avancé
•
C'
est
un
objet
Panier
que
notre
site
va
manipuler
à
Une
page
à
ctlPanier.php
»
va
ainsi
gérer
le
panier
•
Pour
cela
,
el
e
va
devoir
garder
un
objet
Panier
dans
$_SESSION
ctlPanier
Panier
p
$_SESSION
p
nbProduits
:
int
p
ajouterProduit
(
code
,
nom
,
prix
)
:
int
p
ajouterProduit
(
code
,
nom
,
prix
)
p
supprimerProduit
(
code
)
:
int
p
supprimerProduit
(
code
)
p
afficherPanier
(
)
p
calculerTotal
(
)
:
float
p
terminerSession
(
)
p
getNbProduits
(
)
:
int
<
?

php
session_start()
;
include
"
Panier.php
"
;
.

.

.

?

à
<html>
.

.

Man
.

u
</ele
Kir
htmslch
à
Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
135
php
:
Panier
avancé
à
Or
un
objet
Panier
est
un
objet
complexe
•
Pour
le
garder
dans
$_SESSION
,
il
va
falloir
le
«
compacter
»
:
c'
est
la
sérialisa
-on
à
$_SESSION["panier
"
]
=
serialize($panier)
–
unserialize
(
$_SESSION["panier
"
]
)
func
-on
ajouterProduit($produit
,
$nom
,
$prix
)
{
Pour
ajouter
ou
supprimer
un
.

.

.

produit
au
panier
,
on
va
le
$panier
=
unserialize($_SESSION["panier"])
;
récupérer
,
le
modifier
pui
le
$panier->ajouterProduit($produit
,
$nom
,
$prix
)
;
remeere
dans
la
session
$_SESSION["panier
"
]
=
serialize($panier)
;
.

.

.

func
-on
supprimerProduit($produit)
{
.

.

.

$panier
=
unserialize($_SESSION["panier"])
;
$panier->supprimerProduit($produit)
;
$_SESSION["panier
"
]
=
serialize($panier)
;
Manuele
Kirsch
.

.

.

Pinheiro
-
Up1
/
CRI
/
UFR06
Ges=on
136

