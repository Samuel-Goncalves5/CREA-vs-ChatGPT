base
de
donnée
2
:
php
and
Mysql
Crée
par
:
Lamiae
DOUNAS
Lamiae.dounas@gmail.com
Plan
du
cours
1
Rappel
SQL
2
Introduction
au
web
et
Php
3
Variables
et
constantes
4
Opérateurs
5
Tableaux
6
Structures
de
contrôles
7
Fonctions
8
Gestion
du
formulaires
9
Programmation
orienté
objet
(
Poo
)
10
Accès
au
base
de
données(Mysql)
11
cinq
mini
Projets
à
réaliser
RAPPEL
SQL
à
Travaux
pratiques
:
Révision
du
opérations
:
CREATE
TABLE
,
INSERT
,
UPDATE
,
ALTER
TABLE
,
add
CONSTRAINTS
dans
TF1
.

Introduction
au
Web
Qu'
est
ce
que
le
web
?

à
Terme
crée
par
par
Tim
Berners-Lee
(
désigne
toile
de
araignée
(
en
anglais
)
)
.

à
Enorme
réseau
de
ordinateurs
connectés
qui
hébergent
des
sites
web
.

Quel
rapport
entre
le
web
et
internet
?

à
Web
est
une
application
de
internet
juste
comme
la
messagerie
instantanée
!

!

Introduction
au
Web
Qu'
est
ce
qu'
un
site
web
?

à
Ecrit
en
3
langages
:
html
pour
marquer
le
contenu
du
site
.

Css
pour
gérer
le
style
et
javascript
pour
le
rendre
interactif
.

Ø
Accessible
depuis
une
dresse
unique
:
URL(Uniform
Resource
Locator
)
Protocole
Mot
de
passe
Nom
du
Port
(
Facultatif
chemin
(
facultatif
)
serveur
si
80
)
http://
user:password@
www.ccm.net
glossair/
glossair.php
Introduction
au
Php
Php
:
php
hypertext
preprocessor
.

à
Langage
interprété
pour
créer
des
sites
dynamiques
.

à
Langage
de
script
côté
serveur
.

à
langage
«
Embedded
HTML
»
.

à
Open
source
:
Php
a
permis
de
créer
un
grand
nombre
de
sites
web
célèbres
,
comme
Facebook
,
Wikipédia
,
etc
.

Introduction
au
Php
Site
statique
vs
site
dynamique
-
Site
statique
:
écrit
en
HTML(
éventuel
ement
du
JavaScript
)
,
même
contenu
pour
tous
les
utilisateurs
.

-
Site
Dynamique
:
contenus
adaptés
au
besoins
du
utilisateurs
(
mais
nécessite
un
temps
de
traitement
)
.

Introduction
au
Php
Relation
Client/Serveur
.

Installation
et
configuration
de
Php
Il
suffit
de
télécharger
le
serveur
web
:
•
Wamp
:
http://www.wampserver.com/
•
Mamp
:
http://www.mamp.info/
•
Xampp
:
https://www.apachefriends.org/fr/
Et
Editeur
de
texte
:
•
Sublim
Text
:
http://www.sublimetext.com/2
Introduction
au
php
Syntaxe
de
base
:
<
<
!

DOCTYPE
HTML
PUBLIC
"
-//W3C//
!

doctype
html>
DTD
HTML
4.01//EN
"
"
http://
<html>
www.w3.org/TR/html4/strict.dtd">
<head>
<title>Titre</title>
</head>
<body>
<
?

php
echo
"
Hello
World
!

"
;
?

à
</body>
</html>
Introduction
au
Php
Commentaires
:
Ø
Commentaires
hérités
du
langage
C
et
Perl
//
Ceci
est
un
commentaire
sur
une
seule
ligne
/*
Ceci
est
un
commentaire
sur
plusieurs
lignes
*/
à
Commentaire
style
shell
#
Ceci
est
un
commentaire
sur
une
seule
ligne
Types
de
données
Php
supporte
les
types
de
données
suivants
:
•
nombres
entiers
,
•
nombres
à
virgule
flottante
,
•
chaînes
de
caractères
,
•
tableaux
,
à
objets
(
développés
dans
la
section
programmation
orientée
objet
)
.

La
fonction
à
gettype
»
permet
de
connaitre
le
type
de
la
variable
.

si
la
variable
n'
est
pas
définie
,
el
e
renvoie
"
string
"
.

ex
:
çaë
12
;
echo
gettype($a)
;
//
=>
"
integer
à
Types
de
données
Tous
les
noms
de
variables
sont
précédés
de
un
$
:
Pour
spécifier
une
variable
de
type
entier
:
à
$toto
à
123
;
#
est
un
entier
en
base
10
,
à
$toto
=
-123
;
#
est
un
entier
négatif
.

Pour
spécifier
une
variable
de
type
chaîne
de
caractères
:
à
$personne
=
à
$toto
Smith
’
;
#
est
une
chaîne
de
caractères
pour
afficher
les
caractères
spéciaux
.

à
$personne
=
"
M.
Smith
"
;
#
est
aussi
une
chaîne
de
caractères
.

•
$chaine=
à
chaine1
»
.

à
chaine2
»
;
//
affiche
chaine1chaine2
•
$chaine=
à
chaine1
»
.

$toto
;
//
affiche
chaine1
123
Types
de
données
Opérateur
sur
les
chaînes
de
caractères
:
–
concaténation
:
chaine1
.

Chaine2
Opérateurs
logiques
:
•
AND
ou
&&
(
vrai
si
$a
et
bb
vrais
)
•
OR
ou
||
(
vrai
si
$a
ou
$b
sont
vrais
)
Opérateurs
arithmétiques
:
•
addition
:
ça
bb
,
à
soustraction
:
$a
-
bb
,
à
multiplication
:
ça
*
bb
,
à
division
:
$a
/
bb
,
à
modulo
(
reste
de
la
division
entière
)
:
$a
%
bb
.

Types
de
données
Opérateurs
arithmétiques
:
•
Attention
:
lorsqu'
une
chaine
de
caractère
est
évaluer
comme
un
une
valeur
numérique
,
les
règles
suivantes
s'
appliquent
:
à
$toto
=
1
"
4.5
"
;
#
$toto
vaut
5.5
•
$toto
=
1
"
titi
149
"
;
#
$toto
vaut
1
car
la
chaine
vaut
0
si
c'
est
du
texte
ou
,
à
$toto
=
1
"
149
titi
"
;
#
$toto
vaut
150
car
la
chaine
vaut
149
(
commence
par
une
valeur
numérique
)
.

Types
de
données
Opérateurs
de
comparaison
:
•
égal
à
:
$a
çù
bb
,
•
différent
de
:
$a
!

=
bb
,
•
supérieur
à
:
ça
>
bb
,
•
inférieur
à
:
$a
<
bb
,
•
supérieur
ou
égal
à
:
$a
çù
bb
,
•
inférieur
ou
égal
à
:
$a
çù
bb
.

Exemple
:
echo
$toto
==
0
?

"
Vrai
"
:
"
fau
"
;
Types
de
données
Date
Déclaration
avec
:
à
DATETIME
$date
à
new
DateTime('2000-01-05')
;
à
DATE_CREATE
:
un
Alias
de
DateTime::__construct()
$date2
=
date_create('2000-01-01')
;
Extraction
du
Mois
,
année
,
…
…
:
Ø
Avec
style
procédural
en
utilisant
DATE_FORMAT
echo
date_format($date
,
"
m
"
)
;
Ø
Avec
style
orienté
objet
(
Oo
)
:
echo
$date->format('Y')
;
Types
de
données
Date
Exemples
:
•
$date=date(
"
d-m
y
"
)
;
echo
à
ceci
est
la
date
du
jour
à
.$date
;
à
$heure
=
date("h:i:s")
;
echo
"
c'
est
l'
heure
du
jour
"
.$heure
;
Constantes
à
Les
constantes
sont
des
variables
dont
la
valeur
ne
peut
pas
changer
durant
la
durée
de
vie
de
un
script
.

à
Les
constantes
sont
utilisées
pour
définir
les
paramètres
du
applications
web
tq
:
racine
du
site
,
nom
de
la
base
de
données
…
.

à
Le
nom
de
constante
valide
commence
par
une
lettre
ou
un
souligné
(
_
)
,
suivi
de
un
nombre
quelconque
de
lettre
,
chiffres
ou
soulignés
•
On
définit
une
constante
en
utilisant
la
fonction
define()
;
Exemple
:
define("MA_CONSTANTE
"
,
"
Hel
o
"
)
;
•
Pour
afficher
une
constante
:
echo
MA_CONSTANTE
ou
echo
const("MA_CONSTANTE")
;
Exemple
:
Php
définit
certaines
constantes
comme
Phpços
qui
indique
le
système
de
exploitation
utilisé
par
la
machine
qui
fait
tourner
le
Php
(
ex
:
Linux
)
.

Tableaux
Les
tableaux
de
Php
ressemblent
au
tableaux
associatifs(
hash-tables
)
.

•
L
’
index
est
appelé
clé
à
La
valeur
associée
à
la
clé
est
appelée
valeur
.

On
déclare
un
tableau
avec
deux
façons
:
à
Utiliser
la
fonction
array()
pour
créer
un
tableau
;
à
ou
affecter
directement
les
valeurs
au
tableau
;
Tableaux
Fonctions
sur
les
tableaux
:
à
sizeofçë
:
retourne
le
nombre
de
éléments
de
un
tableau
,
ou
à
count()
:
retourne
le
nombre
de
éléments
de
un
tableau
s'
il
existe
,
1
si
la
variable
n'
est
pas
un
tableau
et
0
si
la
variable
n'
existe
pas
.

Tableaux
Exemple
:
à
$suite
=
array(1
,
2
,
3
,
4
)
;
•
$tab[0
]
=
1
;
•
$tab[1
]
=
"
toto
"
;
#
on
peut
mélanger
les
contenus
à
$tab[
"
chaine
"
]
=
"
valeur
"
;
#
on
peut
mélanger
les
clés
.

à
$personne
=
array("type
"
=>
"
M.
"
,
"
nom
"
=>
•
"
Smith
"
)
;
Tableaux
Parcourir
un
tableau
:
<
?

php
//
On
crée
notre
array
$prenoms
$prenoms
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
//
pui
on
fait
une
boucle
pour
tout
afficher
:
for
(
$numero
=
0
;
$numero
<
5
;
$numero++
)
{
echo
$prenoms[$numero
]
.

'
<br
/>
'
;
}
?

à
Tableaux
Parcourir
un
tableau
associatif
:
<
?

php
$personne
=
array("type
"
=>
"
M.
"
,
"
nom
"
çù
"
Smith
"
)
;
foreach($personne
as
$cle
=>
$valeur
)
{
echo
"
cle=
"
.$cle
.
“
valeur=
"
.

$valeur
;
}
Conditions
:
à
if
à
else
à
Prototype
:
if
(
condition1
)
{
#
instructions
à
exécuter
si
la
condition1
est
vraie
...
}
elseif
(
condition2
)
{
#
instructions
à
exécuter
si
la
condition2
est
vraie
...
...
à
else
à
#
instructions
à
exécuter
si
aucune
du
conditions
n'
est
vraie
...
}
Ø
Les
fonctionnalités
de
l'
instruction
If
sont
les
mêmes
en
php
que
en
C
;
Conditions
:
à
if
à
else
à
Exemple
:
if
(
$type
==
"
femme
"
)
{
echo
"
Bonjour
Madame
"
;
}
elseif
(
$type
==
"
homme
"
)
{
echo
"
Bonjour
Monsieur
"
;
à
else
à
echo
"
Bonjour
,
vous
êtes
bizarre
!

"
;
}
Conditions
:
«
switch
à
Prototype
:
switch
(
$var
)
à
case
val1
:
#
instructions
à
exécuter
si
val1
à
break
;
case
val2
:
#
instructions
à
exécuter
si
val2
…
break
;
default
:
à
Ce
cas
est
utilisé
lorsque
tous
les
autres
cas
ont
échoué
.

break
;
}
Boucles
:
while
La
boucle
while
est
le
moyen
le
plus
simple
de
implémenter
une
boucle
en
Php
;
Ø
Prototype
:
while
(
condition
)
{
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
à
Prototype
simplifié
:
while
(
condition
)
:
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
endwhile
;
Boucles
:
while
Exemple
:
çi
=
1
;
while
(
çi
çù
10
)
{
echo
"
çi
"
;
$i++
;
}
•
Affiche
1
2
3
4
5
6
7
8
9
10
.

Boucles
:
For
La
boucle
à
for
»
fonctionne
comme
la
boucle
for
du
langage
C
;
Prototype
:
for
(
expression1
;
condition
;
expression2
)
{
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
à
Prototype
simplifié
:
for
(
expression1
;
condition
;
expression2
)
:
#
instructions
à
exécuter
tant
que
la
condition
est
vraie
...
endfor
;
Boucles
:
For
Exemple
:
for
(
çi
=
1
;
çi
çù
10
;
çiu
)
{
echo
"
çi
"
;
}
•
Affiche
1
2
3
4
5
6
7
8
9
10
.

Exercices
1
:
Écrire
un
script
php
pour
afficher
la
version
du
Php
et
d'
autres
information
sur
la
configuration
.

Exercices
1
:
Solution
1
:
<
?

php
phpinfo()
;
?

à
Solution
2
:
<
?

php
echo
"
<pre>
"
;
print_r($GLOBALS)
;
//affiche
le
nom
du
super
globales
.

echo
"
</pre>
"
;
?

à
Exercices
2
:
$var
=
'
Php
Tutorial
'
.

1-Mettre
la
variable
var
dans
une
section
h3
tag
,
la
centrer
et
l'
afficher
avec
une
couleur
rouge
dans
un
document
HTML
.

2-Souligner
le
titre
3-
Ajouter
le
paragraphe
suivant
:
“
Ceci
est
un
paragraphe
”
.

Exercices
2
:
Solution
:
<
?

php
$var
=
'
Php
Tutorial
'
;
?

à
<
!

DOCTYPE
html>
<html>
<head>
<title><
?

php
echo
$var
;
?

à
</title></head>
<body>
<u><h3>
<font
color="red">
<
?

php
echo
$var
;
?

></h3></u>
</font>
<p>
ceci
est
un
paragraphe.</p>
</body>
</html>
Exercices
3
:
compter
de
10
jusque
à
22
Exercices
3
:
Solution
for
(
çi
à
10
;
$i
çù
22
;
çiu
)
à
echo
"
çi
"
;
}
Fonctions
Une
fonction
peut
être
définie
par
le
mot
clé
à
function
à
en
utilisant
la
syntaxe
suivante
:
function
nomd-DelaFonction
(
$arg_1
,
$arg_2
,
/*
...
,
*/
$arg_n
)
{
#
instructions
...
return
$valeur_de_retour
;
//
optionnel
à
IL
n'
y
a
pas
de
distinction
fonctions
/
procédures
en
Php
.

Fonctions
Les
fonctions
n'
ont
pas
besoin
de
être
définies
avant
de
être
utilisées
,
Sauf
lorsqu'
une
fonction
est
définie
conditionnel
ement
ou
à
l'
intérieur
de
une
autre
fonction
:
1
.

Une
fonction
conditionnel
e
:
//
imposible
de
appeler
foo()
car
la
fonction
n'
existe
pas
if
(
condition
)
à
function
foo()
à
echo
"
je
n'
existe
pas
tant
que
le
programme
n'
est
pas
passé
ici.\n
"
;
}
}
Fonctions
2
.

Une
fonction
dans
une
autre
fonction
function
foo()
à
function
bar()
à
echo
"
je
n'
existe
pas
tant
que
foo()
n'
est
pas
appelé.\n
"
;
}
}
/*
Impossible
de
appeler
bar()
ici
,
car
il
n'
existe
pas
.

*/
foo()
;
/*
Maintenant
,
nous
pouvons
appeler
bar()
,
car
l'
utilisation
de
foo()
l'
a
rendue
accessible
.

*/
bar()
;
Fonctions
Php
supporte
le
passage
de
arguments
:
•
Par
valeur
:
comportement
par
défaut
•
Par
référence
:
pour
que
la
fonction
puisse
changer
la
valeur
du
arguments
.

ex
:
$toto=2
;
function
mafonctionRef(&$titi)
{
$titi=$titi+1
;
echo
$titi
;
}
MafonctionRef($toto)
;
//
affiche
3
echo($toto)
;
//
affiche
3
;
Fonctions
à
Une
liste
variable
de
arguments
:
le
mot
clé
…
indique
que
la
fonction
accepte
un
nombre
variable
du
arguments
.

ex
:
Function
sumà
...
$vars
)
à
çsomme
=
0
;
foreach
(
$vars
as
$i
)
à
çsomme
=
çi
;
à
return
çsomme
;
à
echo
sum(1
,
2
,
3
,
4
)
;
//
affiche
10
comme
résultat
.

Echo
sum(1,2)
;
//
affcihe
3
;
s
Fonctions
à
les
valeurs
par
défaut
du
arguments
.

function
servir_cafe
(
$type
=
"
cappuccino
"
)
à
return
"
Servir
un
$type.\n
"
;
}
echo
servir_cafe()
;
//
affiche
à
servir
un
cappuccino
àLes
arguments
sans
valeur
par
défaut
doivent
être
en
premiers
,
sinon
erreur
function
melangeDarguments
(
$type
=
"
parDefault
"
,
$varSansDefault
)
à
return
"
Message
$type
$varSansDefault.\n
"
;
}
echo
melangeDarguments
(
"
test
"
)
;
//
affiche
une
erreur
Fonctions
à
à
partir
de
la
version
7.0
,
php
supporte
la
définition
du
type
de
retour
.

ex
:
function
maFonction($var)
:
string
à
return
$var
;
}
•
si
return
est
omis
,
la
valeur
NULL
sera
retournée
.

•
Pour
renvoyer
plusieurs
valeurs
en
même
temps
,
il
suffit
de
retourner
un
tableau
;
Ex
:
function
couleurs()
à
return
array(
"
res1
"
,
"
res2
"
,
"
res3
"
)
;
}
}
list($var1
,
$var2
,
$var3
)
=
couleurs()
;
Fonctions
•
Pour
retourner
une
référence
de
une
fonction
,
utilisez
l'
opérateur
&
aussi
bien
dans
la
déclaration
de
la
fonction
que
dans
l'
assignation
de
la
valeur
de
retour
.

ex
:
?

phpà
function
&
mafonction(&$var){
$var=$var+2
;
return
$var
;
}
$toto=
&
mafonction($var2)
;
?

>
à
Les
propriétés
de
l'
objet
retourné
par
la
fonction
mafonction()
sont
liées
à
$toto
.

Il
ne
s'
agit
pas
de
une
copie
de
$var
.

Fonctions
à
php
ne
supporte
pas
la
surcharge
,
la
destruction
et
la
redéfinition
de
fonctions
déjà
déclarées
.

à
Il
est
possible
de
appeler
des
fonctions
récursives
en
Php
.

à
noter
que
un
appel
récursif
infini
est
considéré
comme
une
erreur
de
programmation
.

Fonctions
utiles
en
php
à
gettype($var)
:
retourne
le
type
de
la
variable
.

à
Addslashes()
:
Ajoute
du
antislash
devant
les
caractères
spéciaux
.

ex
:
$res
=
addslashes("L'a")
;
//
retourn
Lüëa
.

à
Strstr(texte
,
chaineAchercher
)
:
Trouve
la
première
occurrence
dans
une
chaîne
.

ex
:
$email
=
'
name@example.com
'
;
$domain
=
strstr($email
,
'
@
'
)
;
echo
$domain
;
//
Affiche
:
@example.com
Fonctions
utiles
en
Php
à
Htmlspecialchars
(
chaine
,
flags
)
:
Convertit
les
caractères
spéciaux
en
entités
HTML
.

El
e
remplace
par
exemple
&
(
ET
commercial
)
en
çamp
;
un
example
de
flag
est
ENT_QUOTES
qui
Convertit
les
guil
emets
doubles
et
les
guil
emets
simples
.

ex
:
$str
=
"
This
is
some
çbë
bold
çmbë
text
.
"
;
echo
htmlspecialchars($str)
;
//
affiche
:
This
is
some
&lt
;
b&gt
;
bold&lt
;
/
`
b&gt
;
text
.

à
strip_tags
(
chaine
,
allowableTags
)
:
Supprime
les
balises
HTML
et
Php
de
une
chaîne
.

Les
commentaires
HTML
et
Php
sont
également
supprimés
.

Ce
comportement
ne
peut
être
modifié
avec
le
paramètre
allowableTags
.

ex
:
$text
=
'
<p>Test
paragraph.</p><
!

--
Comment
--
>
<a
href="#fragment">Other
text</a>
'
;
//
Autorise
<p>
et
<a>
echo
strip_tags($text
,
'
<p><a>
'
)
;
//
affiche
:
<p>Test
paragraph.</p>
ça
href="#fragment">Other
text</a>
Fonctions
utiles
en
php
•
strlen()
:
Retourne
la
longueur
de
la
chaîne
à
Trim()
:
efface
les
espaces
blancs
au
début
et
à
la
fin
de
une
chaine
.

•
Strtolower()
:
passe
tous
les
caractères
en
miniscules
.

•
Strtoupper()
:
passe
tous
les
caractères
en
majuscules
.

•
Strpos(texte,chaine)
:
recherche
la
position
de
la
première
«
chaine
»
trouvée
.

à
Ereg(chaine
,
texte
)
:
recherche
dans
texte
,
les
séquences
du
caractères
à
chaine
»
,
Retourne
la
longueur
de
l'
occurrence
trouvée
si
une
occurrence
a
été
trouvée
dans
la
chaîne
string
et
FALSE
dans
le
cas
contraire
ou
si
une
erreur
est
survenue
.

ex
:
if(ereg("BCD","ABCDEF"))
à
echo
"
oui
"
;
}
else
à
echo
"
non
"
;
}
Fonctions
utiles
en
php
•
isset($var1,$var2,…)
:
Détermine
si
une
variable
ou
plusieurs
sont
définies
et
sont
différentes
de
NULL
.

ex
:
if
(isset($var))
à
echo
'
Cette
variable
existe
,
donc
je
peux
l\'afficher
.
'
;
•
unset($var1,$var2,…)
:
Détruit
les
variables
.

à
empty
(
$var1
)
:
Détermine
si
une
variable
est
vide
.

à
array_key_exists
(
key
,
array
)
:
Vérifie
si
une
clé
existe
dans
un
tableau
.

Fonctions
utiles
en
Php
•
in_array(valeur
,
array
)
:
Indique
si
une
valeur
appartient
à
un
tableau
.

à
array_keys(array
,
valeur
)
:
Retourne
toutes
les
clés
ou
un
ensemble
du
clés
contenant
à
valeur
»
,
si
valeur
n'
est
pas
spécifié
alors
retourne
toutes
les
clés
du
tableau
.

•
array_values(array)
:
Retourne
toutes
les
valeurs
de
un
tableau
.

Exercice
1
à
Ecrire
un
script
qui
permet
de
afficher
les
nombres
premiers
parmi
0
et
1000
.

Utiliser
2
méthodes
différentes
(
While
,
for
)
.

Exercice
1
Solution
<
?

php
$i=1
;
while($i<=1000)
{
$z=0
;
for($j=2
;
$j<$i
;
$j++
)
à
if(($i%$j)==0
&&
(
çi
!

=$j
)
)
$z++
;
}
çfçëë
echo
$i
.
'

'
;
çiu
;
}
?

à
Exercice
2
à
Ecrire
un
script
qui
permet
de
créer
un
tableau
contenant
les
coordonnées
de
une
personne
pui
de
afficher
ses
éléments
.

Utiliser
un
tableau
numéroté́
pui
un
tableau
associatif
.

Exercice
2
Solution
à
<
?

php
$coordonnees=
array(‘Camil
e
'
,
à
Dupont
'
,
21
,
’
Paris
'
)
;
for($i=0
;
$i<count($coordonnees)
;
$i++
)
echo
$coordonnees[$i
]
.
'

'
;
?

>
•
Tableau
associatif
:
<
?

php
$coordonnees=
array(
"
prenom
"
=>
"
Camille
"
,
"
nom
"
=>
"
Dupont
"
,
"
age
"
=>
21
,
"
ville
"
=>
"
Paris
"
)
;
foreach($coordonnees
as
$cle
=>$value
)
{
echo
$cle
.

"
=
"
.

$value
.

"
<br/>
"
;
}
?

à
Exercice
3
à
Ecrire
une
fonction
'
moisfr
'
qui
permet
de
afficher
un
mois
en
toutes
lettres
et
en
français
en
utilisant
les
instructions
de
Switch
Case
Afficher
le
mois
4
en
faisant
appel
à
la
fonction
.

Exercice
3
Solution
<
?

php
function
moisfr($date)
{
switch($date)
à
case
1
:
return
'
Janvier
'
;
break
;
case
2
:
return
'
Fevrier
'
;
break
;
case
3
:
return
'
Mars
'
;
break
;
case
4
:
return
'
Avril
'
;
break
;
case
5
:
return
'
mai
'
;
break
;
case
6
:
return
'
Juin
'
;
break
;
case
7
:
return
'
Juil
et
e
;
break
;
case
8
:
return
'
Aout
'
;
break
;
case
9
:
return
'
Septembre
'
;
break
;
case
10
:
return
'
Octobre
'
;
break
;
case
11
:
return
'
Novembre
'
;
break
;
case
12
:
return
'
Décembre
'
;
break
;
default
:
return
e
mois
non
valide
'
;
}
}
echo
moisfr(4)
;
?

à
Exercice
4
Ecrire
un
script
php
permettant
de
afficher
le
résulat
suivant
:
Astuce
:
Utiliser
un
tableau
associatif
et
la
foncion
gettype()
;
Test
sur
les
variables
la
variable
toto
est
de
type
entier
,
sa
valeur
est
10
.

la
variable
titi
est
de
type
String
,
sa
valeur
est
à
chaine
»
.

Exercice
4
Solution
:
<html>
<body>
<center><h1>
Test
sur
les
variables
</h1></center>
<
?

php
$variables=
array(
"
toto
"
=>
10
,
"
titi
"
=>
"
chaine
"
)
;
foreach($variables
as
$cle
=>
$value
)
à
echo
"
la
variable
"
.$cle
.

"
est
de
type
"
.

gettype($value
)
.

"
,
sa
valeur
est
"
.

$value
.

"
<br/>
"
;
}
?

à
</body>
</html>
Formulaires
La
définition
du
formulaires
se
fait
avec
la
balise
<FORM>
en
utilisant
deux
attributs
suivant
:
à
METHOD
:
pour
définir
la
méthode
de
transfert
du
données
vers
le
serveur
;
deux
valeurs
possible
«
POST
»
ou
«
GET
»
(
les
données
du
formulaire
seront
encodées
dans
l'
URL
)
.

à
ACTION
:
pour
préciser
l'
action
à
exécuter
lors
du
l'
envoie
du
données
.

Exemple
de
utilisation
:
<FORM
METHOD="POST
"
ACTION=
"
cible.php
"
>
…
.

</FORM>
Formulaires
Les
éléments
de
un
formulaire
:
I
INPUT
:
Champs
de
saisie
de
texte
et
différents
types
de
boutons
.

II
.

TEXTAREA
:
zones
de
texte
multi-lignes
.

III
.

SELECT
:
Listes
déroulantes
.

IV
.

FIELDSET
:
regrouper
des
éléments
du
formulaire
Formulaires
I
INPUT
:
Champs
de
saisie
de
texte
et
différents
types
de
boutons
à
définir
avec
l'
attribut
Type
:
1
.

Text
:
une
zone
de
texte
à
une
seule
ligne
<input
type="text
"
id="toto
"
name="titi
"
{
autofocus/
required
à
/>
•
Id
:
est
un
attribut
lu
par
le
navigateur
(
en
HTML
,
CSS
ou
Javascript
)
;
•
Name
:
sert
à
Php
lors
de
la
validation
de
un
formulaire
.

Coté
php
à
la
valeur
de
la
zone
du
texte
est
récupérée
en
Php
par
la
variable
_$POST[‘titi
’
]
,
par
contre
la
variable
utilisée
en
css
pour
donner
du
style
à
la
zone
est
#toto{
à
}
.

à
Value
:
permet
de
pré-remplir
le
champ
avec
une
valeur
par
défaut
.

•
Placeholder
:
permet
de
donner
une
indication
sur
le
contenu
du
champ
.

Cette
indication
disparaîtra
dès
que
le
visiteur
aura
cliqué
à
l'
intérieur
du
champ
.

Formulaires
2
.

Password
:
Zone
de
mot
de
passe
(
caratères
saisis
ne
s'
affichent
pas
à
l'
écran
)
<input
type="password
"
name="pass
"
idçäpass
"
/>
3
.

Checkbox
:
Les
cases
à
cocher
<input
type="checkbox
"
name="choix
"
id="choix
"
value=
"
choix1
"
checked
/>
4
.

Radio
:
Les
zones
de
options
<input
type=
"
radio
"
name="choix
"
id="choix
"
value=
"
choix1
"
/>
Formulaires
5
.

Boutons
à
Reset
:
remise
à
zéro
du
formulaire
<input
type="reset
"
value="Effacer">
à
Submit
:
validation
du
formulaire
<input
type="submit
"
value="Envoyer
"
/>
Formulaires
II
.

TEXTAREA
:
créer
une
zone
de
texte
multi-lignes
.

<textarea
name="ameliorer
"
id="ameliorer">
</textarea>
Il
y
a
deux
façons
de
modifier
la
tail
e
de
cette
zone
:
•
En
CSS
:
en
utilisant
les
propriétés
CSS
«
width
»
et
à
height
»
.

•
Avec
des
attributs
:
«
rows
à
et
«
cols
»
de
la
balise
<textarea>
.

Le
premier
indique
le
nombre
de
lignes
de
texte
qui
peuvent
être
affichées
simultanément
,
et
le
second
le
nombre
de
colonnes
.

Formulaires
III
.

SELECT
:
faire
un
choix
parmi
plusieurs
possibilités
sous
forme
de
liste
.

à
L'
attribut
«
multiple
»
:
indique
que
on
peut
sélectionner
plusieurs
options
parmi
cel
es
offertes
dans
le
contrôle
.

Par
défaut
,
si
cet
attribut
n'
est
pas
utilisé
,
seule
une
option
peut
être
sélectionnée
.

•
à
l'
intérieur
de
<select>
</select>
,
placer
plusieurs
balises
<option>
</option>
et/ou
grouper
les
options
avec
la
balise
<optgroup>
à
optgroup>
.

Formulaires
à
Exemple
avec
Select
:
<select
idç-gid
"
multiple
>
<optgroup
label="Groupe
1">
<option>Option
1.1</option>
</optgroup>
<optgroup
label="Groupe
2">
<option>Option
2.1</option>
<option>Option
2.2</option>
</optgroup>
<optgroup
label="Groupe
3
"
disabled>
<option>Option
3.1</option>
<option>Option
3.2</option>
<option>Option
3.3</option>
</optgroup>
</select>
Formulaires
IV
.

FIELDSET
:
regrouper
des
éléments
du
formulaire
qui
ont
un
rapport
entre
eux
.

à
L'
attribut
«
Legend
»
permet
de
donner
un
titre
à
ce
groupement
.

<fieldset>
<legend>Vos
coordonnées</legend>
<label
for="nom">Quel
est
votre
nom
?

</label>
<input
type="text
"
name="nom
"
id="nom
"
/>
<label
for="prenom">Quel
est
votre
prénom
?

</label>
<input
type="text
"
name="prenom
"
id="prenom
"
/>
</fieldset>
Traitement
du
Formulaires
Traitement
du
Formulaires
Selon
la
méthode
utilisée
dans
le
formulaire
(
spécifiée
dans
l'
attribut
à
method
»
)
:
•
$_GET
est
une
variable
super-globale
pour
récupérer
les
données
du
formulaire
avec
la
méthode
GET
.

à
$_POST
est
une
variable
super-globale
pour
récupérer
les
données
du
formulaire
avec
la
méthode
POST
.

•
Un
élément
de
un
formulaire
est
identifié
en
php
par
son
attribut
à
name
»
.

Traitement
du
Formulaires
ex
1
:
<form
method="post
"
action="cible.php">
<input
type="text
"
id="toto
"
name="titi
"
/>
<input
type="submit
"
value="Envoyer
"
/>
</form>
En
php
,
pour
récupérer
la
valeur
saisie
dans
la
zone
texte
:
<p>Je
sais
comment
tu
t'
appel
es
,
hé
hé
.

Tu
t'
appel
es
<
?

php
echo
$_POST[’titi
'
]
;
?

à
!

</p>
Traitement
du
Formulaires
ex
2
:
<form
method=‘GET
à
action=
"
cible.php">
Qu'
est
-ce
que
vous
aimer
?

<br
/>
<input
type="checkbox
"
name="loisirs[
]
"
value="shopping
"
/
à
Faire
du
shopping<br
/>
<input
type="checkbox
"
name="loisirs[
]
"
value="sport
"
/>
Faire
du
sport<br
/>
<input
type="submit
"
value="Ma
réponse"/>
</form>
En
php
,
pour
récupérer
les
valeurs
cochées
:
$loisirs
=
$_GET["loisirs
"
]
;
echo
"
<b>Vous
aimez
</b><br
/>
"
;
for
(
$i=0
;
$i<count($loisirs)
;
$i++
)
{
echo
$loisirs[$i]."<br
/>
"
;
}
Exercices
à
Exercice
1
:
Transmettre
les
valeurs
saisies
du
variables
Nom
,
Prénom
et
Age
de
un
formulaire
de
un
fichier
(
source.php
)
à
une
autre
page
(
Cible.php
)
qui
permet
de
les
afficher
.

Exercices
Exercice
1
:
Solution
source.php
<form
method=“post
à
action=”cible.php”>
Prenom
:
<input
type=”text
”
name=
“
prenom
à
><br/>
Nom
:
<input
type=”text
”
name=
“
nom
”
><br/>
age
:
<input
type=”text
”
name=
à
age
”
>
<input
type=”submit
”
value=
à
envoyer
”
à
cible.php
<
?

php
$prenom
à
$_POST[“prenom
”
]
;
$nom
=
$_POST[“nom
”
]
;
$age=$_POST[“age
”
]
;
echo
à
Bonjour
<b>$prenom
$nom</b>
,
votre
age
est
:
çage
<br>
”
;
?

à
Exercices
Exercice
2
:
Transmettre
à
travers
un
lien
,
les
valeurs
du
variables
Nom
et
Age
de
un
fichier
(
source.php
)
à
une
autre
page
(
Cible.php
)
qui
permet
de
les
afficher
.

(
sans
utiliser
les
formulaires
Utiliser
plutôt
un
lien
hypertexte
(
<a
href=
‘
nomLien
’
></a>
)
Exercices
Exercice
2
:
solution
Source.php
:
<html><body>
<
?

php
$nom="george
"
;
$age=21
;
?

>
<a
href='pagecibleTransValssForm.php
?

nom=<
?

php
echo
$nom
?

>&age=<
?

php
echo
$age
?

>
'
à
Lien
vers
cible
</a>
</body></html>
Cible.php
:
<html><body>
<
?

php
nom=$_GET['nom
'
]
;
$age=$_GET['age
'
]
;
echo
'
Bonjour
'
.

$nom
.
'
,
votre
age
est
:
'
.

çage
.'<br>
'
;
?

à
</body>
</html>
Exercices
Exercice
3
:
Ecrire
un
script
qui
permet
de
protéger
le
contenu
de
une
page
secrète
avec
un
login
et
un
mot
de
passe
en
utilisant
un
formulaire
.

Tout
le
script
doit
être
écrit
dans
la
même
page
.

Exercices
Exercice
3
:
Solution
<
?

php
$log="login
"
;
$pass="motDepass
"
;
if(isset($_POST['login'])
and
isset($_POST['passw']))
:
$login=$_POST['login
'
]
;
$passw=$_POST['passw
'
]
;
Endif
;
if($login==$log
&&
$passw==$pass
)
:
?

>
<html><body>
äëëçäççççëëçççäçääççäëçççç
CONFIDENTIEL************************<br/>
<b>
Code
secret
:
XXxxxyyeyeyeçmë
</body></html>
<
?

php
else
:
?

à
<html><body>
<form
method="post">
Login
:
<input
type="text
"
name="login
"
/><br>
Mot
de
passe
:
<input
type="password
"
name="passw
"
><br/>
<input
type="submit
"
value=
"
Envoyer
"
/>
</body>
</html>
<
?

php
endif
;
?

à
Visibilité
du
variables
•
En
Php
il
existe
3
niveaux
de
visibilité
de
une
variables
selon
le
contexte
:
•
Les
variables
superglobales
:
sont
disponibles
n'
importe
où
dans
le
programme
.

à
Les
variables
globales
:
ce
sont
toutes
les
variables
,
tableaux
,
objets
et
constantes
que
nous
créons
nous
-même
dans
le
programme
principal
.

Ils
sont
généralement
visible
que
dans
le
programme
principal
à
Les
variables
locales
:
ce
sont
toutes
les
variables
de
une
fonction
(
paramètres
compris
)
.

Leur
visibilité
n'
est
que
locale
,
et
le
programme
principal
ne
peut
pas
agir
sur
ces
variables
.

Portée
du
variables
globales
à
En
Php
,
une
variable
globale
peut
être
utilisée
à
l'
intérieur
de
une
fonction
sans
la
passer
en
paramètre
de
celle
-ci
.

Cela
est
possible
en
utilisant
le
mot
clé
«
global
»
.

Cependant
cette
variable
doit
être
déclarée
à
l'
intérieur
de
chaque
fonction
afin
de
pouvoir
être
utilisée
dans
celle
-ci
.

Exemple
:
<
?

php
$a
à
1
;
bb
=
2
;
function
sommeçà
à
global
$a
,
bb
;
bb
=
$a
p
bb
;
echo
bb
;
//
dans
cet
exemple
,
on
a
déclarer
$a
et
bb
avec
le
mot
clé
à
global
»
à
l'
intérieur
de
somme
pour
que
elles
seront
manipuler
par
celle
-ci
.

}
•
Une
deuxième
méthode
pour
accéder
au
variables
globales
est
de
utiliser
la
variable
superglobale
$GLOBALS
:
Exemple
:
<
?

php
$a
à
1
;
bb
=
2
;
function
sommeçà
{
$GLOBALS['b
'
]
=
$GLOBALS['a
'
]
p
$GLOBALS['b
'
]
;
}
echo
bb
;
}
?

>
Les
variables
superglobales
•
Les
variables
superglobales
sont
générées
automatiquement
par
Php
:
–
el
es
sont
disponibles
quel
que
soit
le
contexte
du
script
même
à
l'
intérieur
de
une
fonction
sans
être
passées
en
paramètre
de
cel
e
-ci
.

à
el
es
sont
écrites
en
majuscules
et
commencent
,
par
un
underscore
(
_
)
.

à
El
es
sont
généralement
des
tableaux
associatifs
.

Les
variables
superglobales
Notons
:
•
$GLOBALS
:
rassemble
les
variables
globales
.

à
$_ENV
:
ce
sont
des
variables
de
environnement
toujours
données
par
le
serveur
.

à
$_SESSION
:
se
sont
des
variables
de
session
.

Ces
variables
restent
stockées
sur
le
serveur
le
temps
de
la
présence
de
un
visiteur
.

à
$_COOKIE
:
contient
les
valeurs
du
cookies
enregistrés
sur
l'
ordinateur
du
visiteur
.

à
$_GET
:
contient
les
données
envoyées
en
paramètres
dans
l'
URL
.

à
$_POST
:
contient
les
informations
qui
viennent
de
être
envoyées
par
un
formulaire
.

Les
variables
superglobales
Exemple
1
:
<html>
<head>
<title>La
variable
$_SERVER</title>
</head>
<body>
<
?

php
echo
'
Nom
du
fichier
en
cours
de
exécution
à
partir
de
la
racine:'.$_SERVER['PHP_SELF
'
]
;
echo
'
<br/>
'
;
echo
'
Nom
de
la
racine
du
script
:
'
.$_SERVER['DOCUMENT_ROOT
'
]
;
echo
'
<br/>
'
;
echo
'
Nom
du
client
HTML
:
'
.

$_SERVER['HTTP_USER_AGENT'].'<br>
'
;
echo
'
Nom
du
serveur
qui
exécute
le
script
:
'
.

$_SERVER['SERVER_NAME
'
]
;
echo
'
<br/><br/>
'
;
echo
à
Votre
adresse
Ip
est
:
‘
.

$_SERVER['REMOTE_ADDR
'
]
;
?

>
</body>
</html>
Inclusion
du
fichiers
L'
inclusion
du
fichiers
Php
sert
à
réutiliser
une
partie
de
code
identique
dans
plusieurs
endroits
dans
une
même
page
ou
dans
des
page
différentes
.

L'
inclusion
du
fichiers
se
fait
avec
include()
et
require()
:
1
.

include()
:
Cette
fonction
renvoie
une
erreur
de
type
WARNING
,
de
ce
fait
si
el
e
n'
arrive
pas
à
ouvrir
le
fichier
,
le
code
qui
suit
sera
exécuté
.

2
.

require()
Cette
fonction
est
identique
à
include
sauf
que
lorsqu'
une
erreur
survient
,
une
erreur
de
type
FATAL
stoppera
l'
exécution
du
script
.

Inclusion
du
fichiers
Lorsqu'
un
fichier
est
importé
,
le
code
se
trouvant
à
l'
intérieur
est
exécuté
.

Ainsi
,
les
variables
,
les
constantes
du
fichier
importé
peuvent
être
réutilisés
dans
la
suite
du
programme
.

Exemple
:
fichier1
.php
:
<
?

php
//
Définition
du
variables
$a
=
2
;
bb
=
4
;
//
Affichage
de
un
texte
echo
e
Un
peu
de
mathématiques
...
'
;
?

à
fichier2
réutilise
le
code
du
fichier1
:
?

php
//
Importation
et
exécution
du
fichier1
require(’fichier1.php')
;
//
Calcul
du
produit
$produit
à
$a
*
bb
;
//
Affichage
de
la
somme
echo
’
Produit
de
$a
et
bb
=
'
,
$produit
;
//
affichera
8
?

à
Redirection
vers
une
page
•
En
php
,
La
fonction
header()
se
charge
de
envoyer
au
serveur
les
entêtes
passés
en
paramètre
.

•
Pour
créer
une
redirection
avec
Php
,
on
utilise
cette
fonction
pour
envoyer
des
entêtes
de
type
Location
(
adresse
)
.

à
Règle
importante
:
l'
appel
de
‘
header()
’
doit
se
faire
avant
tout
envoi
au
navigateur
Redirection
vers
une
page
Script
de
redirection
:
<
?

php
header('Location
:
http://
www.votresite.com/pageprotegee.php
'
)
;
?

à
Variables
de
session
à
Les
variables
de
session
servent
à
stocker
temporairement
des
informations
sur
l'
utilisateur
dans
le
serveur
.

à
El
es
sont
présentes
dans
toutes
les
page
de
votre
site
pendant
la
présence
de
un
visiteur
.

à
El
es
sont
accessible
via
la
superglobale
$_SESSION
variables
de
session
Gestion
du
sessions
•
un
visiteur
arrive
sur
un
site
.

une
session
est
créée
pour
lui
.

Php
génère
un
identifiant
unique
pour
lui
,
appelé
à
session
Id
’
.

à
une
foi
la
session
est
démarrée
automatiquement
ou
avec
session_start()
,
une
infinité
de
variables
de
session
peuvent
être
créées
selon
le
besoin
.

à
La
session
sera
fermée
par
session_destroy()
si
le
visiteur
ne
charge
plus
de
page
dans
le
site
pendant
quelques
minutes
ou
si
le
visiteur
souhaite
se
déconnecter
.

Variables
de
session
Pour
que
les
variables
de
sessions
soient
accessibles
dans
toutes
les
page
de
un
site
web
,
il
faut
appeler
session_start()
sur
chacune
de
ces
page
avant
décrire
le
moindre
code
HTML
(
avant
même
à
!

doctype>
.

Variables
de
session
à
Exemple
:
<
?

php
//
démarer
une
session
session_start()
;
echo
'
Bienvenue
à
la
page
numéro
1
’
;
//
On
s'
amuse
à
créer
quelques
variables
de
session
dans
$_SESSION
$_SESSION['prenom
'
]
=
'
Jean
'
;
$_SESSION['motPass
'
]
=
'
MotDePasse
’
;
?

à
<html>
<head><title>Les
sessions
</title></head>
<body>
<
?

php
if(isset($_SESSION['prenom']))
à
echo
"
<p>
salut
je
sais
qui
es
-tu
,
tu
t'
appel
es
"
.

$_SESSION['prenom
'
]
.

"
</p>
"
;
echo
"
<p>
<a
href=\"fichierUtilisantVariablesSession.php\">cliquer
ici
Svp
</a></p>
»
;
à
else
à
echo
"
les
variables
de
session
ne
sont
pas
déclarées<br/>
"
;
}
?

à
</body>
</html>
Cookies
à
Un
cookie
est
un
mécanisme
pour
stocker
des
informations
sur
les
visiteurs
afin
de
l'
identifier
plus
tard
.

à
Contrairement
au
variables
de
session
,
les
cookies
sont
des
petits
fichiers
stockés
sur
l'
ordinateur
de
l'
utilisateur
pour
une
durée
de
vie
que
nous
pouvons
définir
.

à
Les
cookies
sont
accessibles
via
la
superglobale
$_COOKIE
.

Cookies
à
la
fonction
setcookie()
permet
de
définir
un
cookie
qui
sera
envoyé
avec
le
reste
du
en-têtes
HTTP
.

àLes
cookies
font
partie
du
en-têtes
HTTP
,
ce
qui
impose
que
setcookie()
soit
appelée
avant
tout
affichage
de
texte
et
avant
même
à
!

doctype
>
.

La
fonction
setcookie()
peut
prendre
jusque
à
7
paramètres
.

Seul
le
premier
est
obligatoire
car
il
définit
le
nom
du
cookie
,
le
deuxième
définit
la
valeur
du
cookie
et
le
troisième
définit
la
durée
de
vie
du
cookie
en
seconde
.

Exemple
:
setcookie(’nom
'
,
à
nomUtilisateur
’
,
time()+3600*24)
;
echo
$_COOKIE[‘nom
’
]
;
//
affichage
du
cookie
.

à
La
fonction
setrawcookie()
est
exactement
la
même
que
setcookie()
excepté
que
la
valeur
du
cookie
ne
sera
pas
automatiquement
encodée
URL
lors
de
l'
envoi
au
navigateur
.

•
Pour
détruire
un
cookie
:
appeler
setCookie()
avec
une
date
de
expiration
dans
le
passé
:
•
Ex
:
setcookie(
"
Nomcookie
"
,
"
valeurCookie
"
,
time()-3600)
;
Cookies
•
Exemple
de
cookie
sous
forme
de
tableau
:
<
?

php
setcookie("cookie[three
]
"
,
"
cookiethree
»
,
time()+3600*1)
;
setcookie("cookie[two
]
"
,
"
cookietwo
»
,
time()+3600*1)
;
setcookie("cookie[one
]
"
,
"
cookieone
»
,
time()+3600*1)
;
//
l'
affichage
de
ces
cookies
:
<
?

php
if
(isset($_COOKIE['cookie']))
{
//
exemple
de
appel
du
cookie
:
echo
'
le
cokie
two
est
:
'
.

$_COOKIE['cookie']['two
'
]
.

'
sinon
on
peut
les
parcourir
avec
foreach
comme
suit
:
<br/>
'
;
foreach
(
$_COOKIE['cookie
'
]
as
$name
=>
$value
)
à
$name
=
htmlspecialchars($name)
;
$value
=
htmlspecialchars($value)
;
echo
"
$name
:
$value
<br
/>
"
;
}
}
?

à
Exercice
Ecrire
un
script
qui
permet
de
protéger
le
contenu
de
une
page
secrète
avec
un
login
et
un
mot
de
passe
en
utilisant
un
formulaire
.

Note
:
1-écrire
une
page
authentification.php
contenant
un
formulaire
login/mot
de
passe
.

Et
un
lien
hypertexte
permettant
de
afficher
la
page
secrète
si
une
variable
de
session
à
login
’
a
été
déjà
créée
.

Manipuler
sur
la
même
page
les
données
du
formulaire
comme
suit
:
2-Diriger
l'
utilisateur
vers
pageSecret1.php
contenant
code
secret
:
Zzzzzz
si
login==‘login1
’
et
pass==‘pass1
’
.

au
début
il
faut
vérifier
que
login==login1
et
afficher
à
bonjour
Mmmme
valeurdelogin
à
Afficher
le
code
secret
Créer
par
la
suite
un
lien
vers
page
précédente
Un
lien
de
déconnexion
permettant
de
rester
sur
la
même
page
tout
en
créant
une
variable
deconnecter=
à
ye
»
.

3-Diriger
l'
utilisateur
vers
pageSecret2.php
contenant
code
secret
:
Zzzzzz
si
login==‘login2
à
et
pass==‘pass2
’
.

au
début
il
faut
vérifier
que
login==login2
et
afficher
à
bonjour
Mmmme
valeurdelogin
à
Afficher
le
code
secret
Créer
par
la
suite
un
lien
vers
page
précédente
Un
lien
de
déconnexion
permettant
de
rester
sur
la
même
page
tout
en
créant
une
variable
deconnecter=
à
ye
»
.

4-Sinon
afficher
sur
la
même
page
un
message
«
Veuil
ez
entrer
un
login
et
mot
de
passe
valide
»
et
tout
en
laissant
le
formulaire
visible
afin
de
permettre
à
l'
utilisateur
de
s'
authentifier
.

Programmation
Orienté
Objet
(
Poo
)
à
Classe
et
Objet
»
•
Une
classe
permet
la
définition
de
un
nouveau
type
de
variable
qui
rassemble
plusieurs
attributs
.

à
El
e
permet
également
la
définition
de
fonctions
manipulant
ces
attributs
,
en
Poo
,
ces
fonctions
s'
appel
ent
du
‘
méthodes
’
.

•
Un
objet
est
une
instance
de
une
classe
.

Un
objet
est
alors
assimilé
à
une
variable
et
sa
classe
au
type
de
cet
objet
.

Programmation
Orienté
Objet
(
Poo
)
à
concepts
de
base
à
La
Poo
a
deux
buts
:
à
faciliter
la
réutilisation
du
code
que
vous
avez
déjà
écrit
grâce
à
l'
héritage
.

à
L'
héritage
permet
,
à
partir
de
une
classe
déjà
existante
,
de
en
créer
une
nouvel
e
qui
reprendra
ses
caractéristiques
et
de
les
adapter
au
besoins
sans
modifier
la
classe
de
base
.

à
Il
est
possible
alors
de
redéfinir
une
méthode
dans
des
classes
héritant
de
une
classe
de
base
sauf
si
cette
méthode
a
été
défini
comme
final
.

L'
appel
de
la
méthode
de
un
objet
est
possible
sans
se
soucier
de
son
type
intrinsèque
:
il
s'
agit
du
polymorphisme
.

à
Le
polymorphisme
traite
de
la
capacité
de
l'
objet
à
posséder
plusieurs
formes
.

à
l'
encapsulation
du
données
et
les
traitements
correspondants
.

à
L'
encapsulation
permet
de
regrouper
un
ensemble
de
attribut
avec
un
ensemble
de
méthodes
en
une
classe
permettant
de
les
manipuler
.

Poo
en
php
«
syntaxe
de
base
»
Une
définition
de
classe
commence
par
le
mot-clé
à
class
»
,
suivi
du
nom
de
la
classe
.

à
la
création
(
instanciation
)
de
l'
objet
,
une
méthode
portant
le
même
nom
que
la
classe
est
appelée
automatiquement
:
c'
est
le
constructeur
.

Ce
dernier
est
définit
par
le
mot
clé
à
__construct
»
.

Lors
de
la
définition
du
méthodes
de
classes
,
les
attributs
non
statiques
sont
appelés
par
l'
operateur
de
objet
$this->
nomDePropriété
.

Exemple
:
class
Personne
{
//
déclaration
du
attributs
public
$nom
,
çage
;
//
déclaration
du
constructeur
public
function
__construct
(
$nom
,
$age){
$this->nom=$nom
;
//
$this
représente
l'
objet
que
nous
sommes
entrain
de
définir
.

$this->age=$age
;
}
//
déclaration
du
méthodes
public
function
affiche
(
)
à
echo
$this->nom
;
echo
$this->age
;
}
}
Poo
en
php
à
Visibilité
de
un
attribut
ou
de
une
méthode
»
•
«
public
»
:
si
un
attribut
ou
une
méthode
est
public
,
alors
on
pourra
y
avoir
accès
depuis
n'
importe
où
.

•
à
private
»
:
impose
quelques
restrictions
.

L'
accès
au
attributs
et
méthodes
est
seulement
possible
depuis
l'
intérieur
de
la
classe
.

à
Ne
mettez
jamais
le
constructeur
avec
le
type
de
visibilité
private
sinon
,
el
e
ne
pourra
jamais
être
appelé
,
vous
ne
pourrez
donc
pas
instancier
votre
classe
•
«
protected
»
a
le
même
effet
que
private
,
à
l'
exception
que
toutes
les
classes
fil
es
auront
accès
au
attributs
protégés
.

Poo
en
php
«
mot
clé
static
à
Le
mot
clé
à
static
»
est
utilisé
après
le
type
de
visibilité
pour
déclarer
une
méthode
ou
attribut
statique
.

Les
attributs
et
les
méthodes
statiques
peuvent
être
utilisés
sans
avoir
besoin
de
instancier
la
classe
,
On
peut
y
accéder
directement
en
utilisant
le
nom
de
la
classe
.

Les
attributs
statiques
sont
dites
à
attributs
de
classe
’
.

Ainsi
,
tous
les
objets
auront
accès
à
ces
attributs
et
auront
les
mêmes
valeurs
pour
tous
les
objets
.

Les
méthodes
statiques
de
une
classe
servent
à
manipuler
les
attributs
statiques
.

Ainsi
,
les
méthodes
statiques
ne
peuvent
pas
manipuler
les
attributs
non
statiques
de
la
classe
.

Poo
en
php
à
l'
opérateur
:
:
»
L'
opérateur
de
résolution
de
portée
«
:
:
»
(
double
deux
point
)
fournit
un
moyen
de
accéder
au
membres
statiques
ou
constantes
,
ainsi
que
au
attributs
ou
méthodes
surchargées
de
une
classe
.

àLe
mot
clé
à
self
:
:
»
est
utilisé
pour
accéder
au
méthodes
et
attributs
statiques
depuis
la
classe
.

àLe
mot
clé
«
parent
:
:
»
est
utilisé
pour
accéder
au
propriétés
ou
au
méthodes
surchargés
ou
constantes
de
une
classe
depuis
la
classe
fil
e.
àPour
référencez
ces
éléments
en
dehors
de
la
classe
,
utilisez
plutôt
le
nom
de
la
classe
à
nomClasse
:
:
»
.

Poo
en
php
«
Héritage
»
Une
classe
peut
hériter
de
une
autre
classe
en
utilisant
le
mot-clé
à
extends
»
dans
la
déclaration
.

Pour
accéder
au
méthodes
ou
une
propriétés
statiques
de
la
classe
mère
,
l'
opérateur
«
parent
:
:
»
est
utilisé
.

Exemple
:
class
ExtendClass
extends
SimpleClass
{
//
Redéfinition
de
la
méthode
parente
et/ou
l'
ajout
du
attributs
function
afficher()
à
echo
"
Classe
étendue
"
;
parent::afficher()
;
}
}
$extended
=
new
ExtendClass
;
//
instanciation
$extended->afficher()
;
//
polymorphisme
.

Poo
en
php
à
Abstraction
à
Classe
abstraite
:
est
une
classe
qu'
on
ne
peut
pas
instancier
directement
.

à
El
e
est
définit
par
le
mot
clé
à
abstract
»
dans
la
déclaration
.

Ø
Pour
exploiter
une
classe
abstraite
,
il
faut
créer
une
classe
qui
hérite
de
la
classe
abstraite
.

Une
classe
abstraite
permet
de
définir
des
comportements
(
méthodes
)
dont
l'
implémentation
(
le
code
dans
la
méthode
)
se
fait
dans
les
classes
fil
es
:
Ø
si
on
rend
une
méthode
abstraite
en
utilisant
le
mot
clé
à
abstract
»
avant
la
visibilité
de
la
méthode
,
alors
toutes
les
classes
fil
es
sont
forcés
à
écrire
cette
méthode
.

Poo
en
php
à
Abstraction
à
Exemple
:
classe
abstraite
abstract
class
NomAbstractClass
à
//
Force
les
classes
fil
es
à
définir
les
deux
méthode
suivants
abstract
protected
function
getValue()
;
abstract
protected
function
prefixValue($prefix)
;
//
méthode
commune
public
function
printOut()
à
print
$this->getValue()
.

"
\n
"
;
}
}
Poo
en
php
«
constante
de
classe
»
Il
est
possible
de
définir
des
valeurs
constantes
à
l'
intérieur
de
une
classe
,
qui
ne
seront
pas
modifiables
.

La
visibilité
par
défaut
du
constantes
de
classe
est
public
.

Exemple
:
class
MyClass
{
const
CONSTANT
à
e
valeur
constante
'
;
function
showConstant()
{
echo
self::CONSTANT
.

"
\n
"
;
//
self::CONSTANT=‘nouvel
e
valeur
à
entrainera
une
erreur
}
à
echo
MyClasse:CONSTANT
;
Poo
en
php
«
constante
de
classe
à
Attention
à
ne
pas
confondre
les
attributs
statiques
et
constantes
de
classe
:
àun
attribut
statique
peut
tout
à
fait
changer
de
valeur
au
cours
du
temps
,
à
la
différence
de
une
constante
dont
la
valeur
est
fixée
.

Poo
en
php
«
constante
de
classe
à
Cependant
,
il
est
possible
de
déclarer
une
constante
dans
la
classe
de
base
,
et
de
changer
sa
valeur
dans
la
classe
fil
e
seulement
en
utilisant
la
méthode
à
get_called_class
à
qui
retournera
le
nom
de
la
de
la
classe
depuis
laquel
e
la
constante
est
appelée
.

à
Ainsi
,
la
nouvel
e
valeur
de
la
constante
sera
propre
à
la
classe
fil
e
et
la
classe
mère
garde
la
valeur
initiale
de
la
constante
.

Poo
en
php
«
constante
de
classe
à
Exemple
:
<
?

php
class
Personne
{
//
déclaration
de
la
constante
const
nomClasse="Personne
"
;
public
function
__construct
çùë
echo
à
ceci
est
le
constructeur
’
;
/*
on
ne
peut
pas
changer
la
valeur
de
la
constante
ici
par
:
self::nomClasse=‘test
’
*/
à
public
function
affiche
(
)
à
$c=get_called_class()
;
echo
à
la
valeur
de
la
constante
nomClasse
est
:
'
.

$c::nomClasse
.

'
<br/>
'
;
}
à
class
HPErsonne
extends
Personne
à
const
nomClasse="HPErsonne
"
;
public
function
__construct
çùë
parent::__construct(
)
;
//parent::nomClasse=‘test2
’
’
retournera
encore
une
erreur
}
}
$p=new
Personne()
;
$p->affiche()
;
$hp=new
HPErsonne()
;
$hp->affiche()
;
?

à
Poo
en
php
«
mot
clé
final
à
Le
mot-clé
à
final
»
indique
que
un
élément
ne
peut
être
changé
dans
la
suite
du
programme
.

à
Il
s'
appliquer
au
méthodes
de
une
classe
ainsi
que
la
classe
el
e
même
.

à
Les
attributs
ne
peuvent
être
déclarés
comme
final
.

Une
méthode
indiquée
comme
final
ne
peut
être
redéfinie
dans
une
classe
dérivée
.

Ø
On
peut
s'
en
servir
pour
forcer
le
comportement
de
une
méthode
dans
les
sous-classes
.

à
Les
classes
final
ne
peuvent
être
dérivées
(
non
possibilité
de
héritage
)
.

Poo
en
php
«
mot
clé
final
à
Exemple
:
classe
final
final
class
BaseClass
à
public
function
test()
à
echo
"
BaseClass::test()
appelée
"
;
}
//
Ici
la
méthode
suivante
est
finale
final
public
function
moreTesting()
à
echo
"
BaseClass::moreTesting()
appelée
"
;
}
à
class
ChildClass
extends
BaseClass
à
}
//
Résultat
:
Fatal
error
:
Class
ChildClass
may
not
inherit
from
final
class
(
BaseClass
)
Sgb
avec
Php
•
Qu'
est
ce
qu'
un
SGBD
?

?

à
«
est
un
logiciel
système
destiné
à
stocker
et
à
partager
des
informations
dans
une
base
de
données
,
en
garantissant
la
qualité
,
la
pérennité
et
la
confidentialité
du
informations
,
tout
en
cachant
la
complexité
du
opérations
.
»
Wikipedia
à
Parmi
les
logiciels
les
plus
connus
,
on
trouve
:
MySQL
,
PostgreSQL
,
SQLite
,
Oracle
et
MAriaDB
.

Pour
une
liste
détail
ée
du
Sgbd
,
consulter
ce
lien
http://fadace.developpez.com/sgbdcmp/#LI
Sgb
avec
Php
Ces
systèmes
peuvent
être
catégorisés
comme
suit
:
Sgdb
Relationnel
Système
basé
sur
le
modèle
relationnel
:
données
stockées
dans
des
tables
structurées
(
en
colonnes
,
lignes
)
et
du
relations
qui
lient
les
tables
entre
el
es
.

à
Système
libre
:
MySQL
,
PostgreSQL
,
MariaDB
,
Firebird
,
Ingres
,
HSQLDB
,
Derby
.

à
Système
propriétaire
:
Oracle
Database
,
Microsoft
SQL
Server
,
DB2
,
Maxdb
,
4D
,
dBase
,
Informix
,
Sybase
.

SGBD
Orienté
objet
:
Zodb
,
db4o
Embarqué
:
SQLite
,
Berkeley
Db
.

Sgbd
NoSQL
:
Cassandra
,
Redis
,
MongoDB
,
SimpleDB
,
BigTable
,
CouchDB
,
Hbase
,
LevelDB
,
RethinkDB
,
Memcached
.

sgb
avec
Php
Manipulation
du
base
de
données
mysql
se
fait
soit
via
interface
graphique
comme
à
PhpMyAdmin
’
soit
en
exécutant
un
script
php
.

1
.

PhpMyadmin
à
Un
programme
permettant
de
avoir
une
vue
rapide
de
l'
ensemble
du
données
.

•
C'
est
un
du
outils
les
plus
connus
permettant
de
manipuler
une
base
de
données
MySQL
.

•
PhpMyAdmin
est
livré
avec
Wamp
,
et
presque
tous
les
hébergeurs
permettent
de
utiliser
phpMyAdmin
.

(
chemin
de
accès
:
http://localhost:8888/phpMyAdmin
)
Sgb
avec
Php
2
.

Utilisation
de
un
Sgbd
via
un
script
php
la
manipulation
de
une
base
de
données
s'
effectue
en
5
temps
:
§
Connexion
au
serveur
de
données
§
Sélection
de
la
base
de
données
à
Requête
à
Exploitation
du
requêtes
à
Fermeture
de
la
connexion
MYSQL
avec
Php
Exemple
de
un
SGBD
MYSQL
:
Php
offre
3
Api
pour
se
connecter
à
MySQL
:
1.Mysqli
//
connexion
à
la
base
de
données
$link
=
mysqli_connect("localhost
"
,
"
root
"
,
"
passwords
"
,
"
dbName
"
)
;
if
(mysqli_connect_errno())
{
/*
Vérification
de
la
connexion
*/
printf("Échec
de
la
connexion
:
%s\n
"
,
mysqli_connect_error())
;
exit()
;
à
$query
=
"
SELECT
Name
FROM
tablename
ORDER
by
Id
DESC
"
;
if
(
$result
=
mysqli_query($link
,
$query
)
)
{
àà
exécution
de
la
requête
*/
while
(
$row
=
mysqli_fetch_assoc($result))
{
/*
Récupère
un
tableau
associatif
*/
printf
(
"
-s
<br/>
"
,
$row['Name
’
]
)
;
}
mysqli_free_result($result)
;
/*
Libère
le
jeu
de
résultats
*/
}
/
mysqli_close($link)
;
/*
Fermeture
de
la
connexion
*
?

>
MYSQL
avec
Php
2
.

Mysql
(
obsolète
et
supprimé
depuis
la
version
Php
)
$c
=
mysql_connect("example.com
"
,
"
user
"
,
"
password
"
)
;
mysql_select_db("database")
;
$result
=
mysql_query("SELECT
nom
from
tableName
"
)
;
$row
=
mysql_fetch_assoc($result)
;
echo
htmlentities($row[’nom'])
;
?

à
MYSQL
avec
Php
3
.

Pdo
(
Oo
)
$pdo
=
new
PDO('mysql:host=example.com
;
dbname=database
'
,
'
user
'
,
'
password
’
)
$statement
à
$pdo->
query("SELECT
nom
from
tableName
"
)
;
$row
=
$statement->
fetch(PDO::FETCH_ASSOC)
;
echo
htmlentities($row[‘nom'])
;
Rq
:
Php
offre
une
possibilité
de
exploiter
l'
api
mysqli
façon
orienté
objet
(
Oo
)
:
$mysqli
=
new
mysqli("localhost
"
,
"
root
"
,
"
password
"
,
"
world
"
)
;
$result
=
$mysqli->query("SELECT
Name
from
tablename
"
)
;
while($row
=
$result->fetch_assoc()){
echo
htmlentities($row['Name
'
]
)
.

"
<br/>
"
;
}
MYSQL
avec
Php
Poo
Manipulation
du
résultats
de
une
requête
sous
forme
de
objets
:
Exemple
1
:
<
?

php
$mysqli
à
new
mysqli("localhost
"
,
à
root
"
,
à
root
"
,
"
world
"
)
;
/*
Vérification
de
la
connexion
*/
if
(mysqli_connect_errno())
{
printf("Échec
de
la
connexion
:
%s\n
"
,
mysqli_connect_error())
;
exit()
;
à
$query
=
"
SELECT
Id
,
Name
,
CountryCode
FROM
citoyen
ORDER
by
Id
DESC
LIMIT
50,5
"
;
if
(
$result
=
$mysqli->query($query))
{
/*
Récupère
un
tableau
de
objets
*/
while
(
$obj
=
$result->fetch_object())
{
printf
(
"
-s
(%s)\n
"
,
$obj->Name
,
$obj->CountryCode
)
;
}
/*
free
result
set
*/
$result->close()
;
}
/*
Fermeture
de
la
connexion
*/
$mysqli->close()
;
?

à
NOTEZ
que
fetch_object(
)
affecte
les
attributs
de
l'
objet
avant
de
en
appeler
le
constructeur
.

Il
faut
alors
vérifier
si
des
valeurs
ne
sont
pas
assignées
au
attributs
avant
de
leurs
affecter
des
nouvelles
valeurs
dans
la
déclaration
du
constructeur
.

MYSQL
avec
Php
Poo
Manipulation
du
résultats
de
une
requête
sous
forme
de
objets
:
avec
la
déclaration
de
la
class
Exemple
2
:
//
Définition
de
la
classe
:
class
Personne
{
//
déclaration
du
attributs
Private
$id
,
$nom
,
çage
;
//
déclaration
du
constructeur
public
function
__construct
($id=0){
ifà
!

$this->id
)
$this->id=$id
;
}
public
function
__ToString
(
)
à
Return
à
nom
:
’
.

$this->nom
.

à
age
:
‘
.

$this->age
.

‘
<br/>
;
}
}
//
connexion
à
la
base
de
données
…
.

//
affichage
du
résultats
:
while
(
$obj
=
$result->fetch_object(‘Personne’))
{
echo
$obj
;
à
Traquer
les
erreurs
avec
Pdo
try-catch(PDOException)
Pour
identifier
la
source
du
erreurs
lors
de
l'
exécution
du
script
Php
,
Ajouter
le
6ème
paramètre
dans
Pdo
comme
suit
:
<
?

php
$bdd
=
new
Pdo
(
'
mysql:host=localhost
;
dbname=world
;
charset=utf8
'
,
'
root
'
,
'
'
,
array(PDO::ATTR_ERRMODE
=>
PDO::ERRMODE_EXCEPTION
)
)
;
?

à
àDésormais
,
toutes
vos
requêtes
SQL
qui
comportent
des
erreurs
vont
avoir
un
message
beaucoup
plus
clair
.

Exercices
PHP/MYSQL
Exercice
1
:
Ecrire
un
script
php
pour
afficher
les
lignes
de
la
table
citoyen
en
affichant
la
date
au
format
Jj-mmyyyy
.

Exercice
2
:
REFAIRE
l'
exercice
du
code
secret
en
utilisant
une
base
de
données
.

-login1/pass1
va
devoir
lire
la
page
secret1.php
-login2./pass2
va
devoir
lire
la
page
secret2.php
.

Transaction
:
Modèle
ACID
Transaction
est
un
ensemble
de
traitements
(
requêtes
)
exécutés
en
tous
ou
rien
.

ACID
à
Atomicité
,
Cohérence
,
Isolation
et
Durabilité
.

1
.

Atomicité
assure
que
une
transaction
se
fait
au
complet
ou
pas
du
tout
.

àCette
règle
doit
être
respectée
dans
toute
les
situations
,
notamment
lors
de
une
panne
de
électricité
,
une
défaillance
de
l'
ordinateur
Début
de
transaction
:
START
TRANSACTION
Requêtes
:
SELECT
,
UPDATE
.
.
Validation
de
la
transaction
:
COMMIT
ou
Annulation
de
la
transaction
en
cas
de
erreur
:
ROLLBACK
.

Rq
:
si
il
y
a
une
erreur
de
intégrité
de
données
,
le
roolback
se
fait
automatiquement
Transaction
:
Modèle
ACID
2
.

Cohérence
assure
que
chaque
transaction
amènera
le
système
de
un
état
valide
(
t
)
à
un
autre
état
valide
t+1
(
t
:
avant
l'
exécution
et
t+1
après
l'
exécution
)
.

Transaction
:
Modèle
ACID
3
.

Isolation
:
aucune
dépendance
entre
les
transactions
.

Exemple
:
utilisation
de
la
notion
de
‘
verrou
’
pour
bloquer
en
lecture
et
oou
en
écriture
l'
accès
à
une
base
de
données
.

4
.

Durabilité
:
assure
que
lorsqu'
une
transaction
a
été
confirmée
,
el
e
demeure
enregistrée
même
à
la
suite
de
une
panne
de
électricité
,
de
une
panne
de
l'
ordinateur
ou
de
un
autre
problème
...
Transactions
avec
MYSQL
MYSQL
a
la
particularité
de
gérer
plusieurs
moteurs
de
stockage
dans
une
même
Bd
,
aussi
appelé
moteur
de
table
.

•
Un
moteur
de
stockage
est
un
ensemble
de
algorithmes
permettant
de
stocker
et
de
accéder
au
données
dans
un
Sgbd
.

En
principe
,
un
seul
moteur
est
utilisé
par
un
Sgbd
.

•
Pour
lister
tous
les
moteurs
,
utilisez
la
requête
:
Show
ENGINES
;
Transactions
avec
MYSQL
•
Principaux
moteurs
de
stockage
MYSQL
:
Myisam
:
très
populaire
ü
Très
simple
de
utilisation
.

ü
très
performant
sur
des
tables
fréquemment
ouvertes
(
très
rapide
pour
les
opération
count()
et
en
lecture
)
ü
Offre
un
index
FULL-TEXT
qui
permet
de
faire
des
recherche
précise
sur
textes
.

à
Ne
supporte
ni
clés
étrangères
,
ni
les
transactions
à
Gère
le
verrouil
age
au
niveau
de
la
table
(
bloque
la
table
entière
lors
des
opérations
de
insertions
,
suppressions
ou
Maj
)
.

Transactions
avec
MYSQL
•
Principaux
moteurs
de
stockage
MYSQL
:
Memory
:
Stocke
les
données
de
la
table
en
mémoire
(
Ram
)
.

ü
Rapidité
de
accès
×
En
cas
de
panne
,
les
données
stockées
sont
supprimées
.

InnoDB
:
souvent
utilisé
dans
les
secteurs
sensibles
.

ü
Gestion
du
clés
étrangères
et
support
du
transactions
(
chaque
requête
est
considérée
comme
une
transaction
)
.

ü
Gère
le
verrouil
age
au
niveau
de
la
ligne
.

à
Ne
propose
pas
de
index
FULL-TEXT
,
légèrement
plus
lent
dans
les
opérations
.

Transactions
avec
MYSQL
à
Exemple
de
gestion
de
transaction
avec
Mysql
(
achat
en
ligne
)
1
.

Pour
supporter
les
transaction
,
il
faut
spécifier
le
moteur
InnoDB
lors
de
la
création
de
la
table
CREATE
TABLE
Compte
(
Id
int
,
Solde
int
not
null
)
ENGINE=InnoDB
;
SET
autocommit=0
;
//
désactiver
la
validation
automatique
du
requêtes
.

START
TRANSACTION
;
UPDATE
compte
SET
solde=solde+100
where
id=IDVendeur
;
UPDATE
compte
SET
solde=solde-100
where
id=IDAcheteur
;
COMMIT
;
Transactions
avec
Pdo
Exemple
:
•
Début
de
la
transaction
:
$bdd->beginTransaction()
;
•
Specification
de
Transaction
:
$bdd->query()
;
$bdd->query()
;
.
.
Validation
/
annulation
de
la
transaction
avec
:
$bdd->commit()
;
$bdd->rol
back()
;
Exercice
Écrire
un
script
php
qui
va
compter
le
nombre
de
visiteurs
sur
votre
site
.

Remarque
:
1
.

Avant
de
écrire
le
script
,
pensez
à
choisir
le
moteur
de
stockage
adéquat
.

2
.

Utiliser
le
driver
Pdo
.

Références
Manuel
Php
:
•
http://php.net
Cours
en
ligne
:
•
https://openclassrooms.com/courses/
programmez-en-oriente-objet-en-php
•
http://caron.ws/data/livre/PHP_v1.pdf

