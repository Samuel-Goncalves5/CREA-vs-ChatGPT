Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
:	PONCT.W	:
PHP	N.P.m.s	Php
Avec	P	avec
l'	D.def.f.s	le
aimable	A.qual.f.s	aimable
autorisation	N.C.f.s	autorisation
de	P	de
Jérôme	N.P.m.s	Jérôme
CUTRONA	N.P.m.s	Cutrona
PHP	N.P.m.s	Php
:	PONCT.W	:
Langage	N.C.m.s	langage
de	P	de
script	N.C.m.s	script
pour	P	pour
le	D.def.m.s	le
Web	N.P.m.s	Web
	N.C.m.s	
Qu'	PRO.rel.m.s	que
est	V.P.3.s	être
-ce	CL.suj.3.m.s	ce
que	C.S	que
PHP	N.P.m.s	Php
?	PONCT.S	?

	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
Langage	N.C.m.s	langage
de	P	de
script	N.C.m.s	script
.	PONCT.S	.

Utilisé	VK.m.s	utiliser
coté	VK.m.s	coter
serveur	N.C.m.s	serveur
Acronyme	N.C.m.s	acronyme
récursif	A.qual.m.s	récursif
:	PONCT.W	:
PHP	N.P.m.s	Php
:	PONCT.W	:
Hypertext	N.P.m.s	Hypertext
Preprocessor	N.P.m.s	Preprocessor
Créé	VK.m.s	créer
en	P	en
1994-1995	N.card.f.s	@card@
par	P	par
Rasmus	N.P.m.s	Rasmus
Lerdorf	N.P.m.s	Lerdorf
Extension	N.C.f.s	extension
utilisée	VK.f.s	utiliser
sur	P	sur
certains	D.ind.m.p	certain
serveurs	N.C.m.p	serveur
Web	N.P.m.s	Web
(	PONCT.W	(
33	D.card.m.p	@card@
%	N.C.m.p	%
)	PONCT.W	)
Langage	N.P.m.s	Langage
multi	VK.m.s	multir
plate-forme	N.C.m.s	plate-forme
(	PONCT.W	(
UNIX	N.P.f.s	Unix
/	PONCT.W	@card@
Windows	N.P.m.s	Windows
…	N.C.m.s	…
)	PONCT.W	)
Open	N.P.m.s	Open
Source	N.P.f.s	Source
Versions	N.C.f.p	version
actuelles	A.qual.f.p	actuel
(	PONCT.W	(
source	N.C.f.s	source
nexen.net	A.qual.m.s	<unknown>
)	PONCT.W	)
:	PONCT.W	:
	N.P.m.s	
PHP4	N.P.m.s	Php4
(	PONCT.W	(
52	D.card.m.p	@card@
%	N.C.m.p	%
en	P	en
octobre	N.C.m.s	octobre
2008	N.card.f.s	@card@
)	PONCT.W	)
	P	à
PHP5	N.P.m.s	<unknown>
(	PONCT.W	(
48	D.card.m.p	@card@
%	N.C.m.p	%
en	P	en
octobre	N.C.m.s	octobre
2008	N.card.f.s	@card@
)	PONCT.W	)
10:11:04	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
2	A.card.m.s	@card@
Utilité	N.C.f.s	utilité
et	C.C	et
utilisation	N.C.f.s	utilisation
de	P	de
PHP	N.P.m.s	Php
	P	à
Création	N.C.f.s	création
de	P	de
pages	N.C.f.p	page
HTML	N.P.m.s	<unknown>
«	D.card.f.p	«
dynamiques	A.qual.f.p	dynamique
»	N.C.m.s	»
,	PONCT.W	,
fabriquées	VK.f.p	fabriquer
à	P	à
la	D.def.f.s	le
volée	N.C.f.s	volée
,	PONCT.W	,
construite	VK.f.s	construire
à	P	à
la	D.def.f.s	le
demande	N.C.f.s	demande
	P	à
Interface	N.P.x.s	Interface
entre	P	entre
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
et	C.C	et
des	P+D.def.f.p	du
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
	P	à
Création	N.C.f.s	création
d'	P	de
applications	N.C.f.p	application
Web	N.P.m.s	Web
10:11:04	A.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	D.card.f.p	@card@
3	D.card.f.p	@card@
Principales	A.qual.f.p	principal
fonctionnalités	N.C.f.p	fonctionnalité
de	P	de
PHP	N.P.m.s	Php
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
Manipulation	N.C.f.s	manipulation
de	P	de
chaînes	N.C.f.p	chaîne
et	C.C	et
tableaux	N.C.m.p	tableau
Calendrier	N.P.m.s	Calendrier
/	PONCT.W	@card@
dates	N.C.f.p	date
/	PONCT.W	@card@
heures	N.C.f.p	heure
Fonctions	N.C.f.p	fonction
mathématiques	A.qual.f.p	mathématique
Accès	N.P.m.s	Accès
au	P+D.def.m.s	au
système	N.C.m.s	système
de	P	de
fichiers	N.C.m.p	fichier
Manipulation	N.C.f.s	manipulation
d'	P	de
images	N.C.f.p	image
HTTP	N.P.m.s	Http
/	PONCT.W	@card@
FTP	N.P.m.s	Ftp
/	PONCT.W	@card@
IMAP	N.P.m.s	Imap
Bases	N.P.m.s	Bases
de	P	de
données	N.C.f.p	donnée
(	PONCT.W	(
Oracle	N.P.m.s	Oracle
,	PONCT.W	,
MySQL	N.P.m.s	Mysql
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
XML	N.P.m.s	Xml
…	N.C.m.s	…
10:11:05	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
4	A.card.m.s	@card@
Fonctionnement	N.C.m.p	fonctionnement
de	P	de
PHP	N.P.m.s	Php
Requête	N.C.f.s	requête
HTTP	N.P.m.s	Http
du	P+D.def.m.s	du
client	N.C.m.s	client
(	PONCT.W	(
(	PONCT.W	(
(	PONCT.W	(
port	N.C.m.s	port
hello.php	ET	hellophp
)	PONCT.W	)
)	PONCT.W	)
Rendu	N.P.m.s	Rendu
Localisation	N.C.f.s	localisation
Connexion	N.C.f.s	connexion
Exécution	N.C.f.s	exécution
Fermeture	N.C.f.s	fermeture
graphique	A.qual.f.s	graphique
du	P+D.def.m.s	du
de	P	de
sur	P	sur
de	P	de
du	P+D.def.m.s	du
code	N.C.m.s	code
la	D.def.f.s	le
le	D.def.f.s	le
la	D.def.f.s	le
code	A.qual.f.s	code
connexion	N.C.f.s	connexion
serveur	N.C.m.s	serveur
des	P+D.def.f.p	du
ressource	N.C.f.p	ressource
PHP	N.P.m.s	Php
PHP	N.P.m.s	Php
données	VK.f.p	donner
dans	P	dans
le	D.def.m.s	le
Envoi	N.C.m.s	envoi
résultat	N.C.m.s	résultat
au	P+D.def.m.s	au
client	N.C.m.s	client
Localisation	N.P.m.s	Localisation
Rendu	N.P.m.s	Rendu
Exécution	N.C.f.s	exécution
Fermeture	ET	fermeture
Connexion	N.C.f.s	connexion
Requête	N.C.f.s	requête
graphique	A.qual.f.s	graphique
HTTP	N.P.m.s	Http
du	P+D.def.m.s	du
de	P	de
sur	P	sur
de	P	de
du	P+D.def.m.s	du
code	N.C.m.s	code
la	D.def.f.s	le
le	D.def.m.s	le
la	D.def.f.s	le
code	N.C.f.s	code
du	P+D.def.m.s	du
connexion	N.C.m.s	connexion
serveur	N.C.m.s	serveur
des	P+D.def.f.p	du
ressource	N.C.f.p	ressource
client	V.P.3.p	clier
PHP	N.P.m.s	Php
PHP	N.P.m.s	Php
données	VK.f.p	donner
(	PONCT.W	(
port	N.C.m.s	port
hello.php	ET	hellophp
dans80	A.qual.m.s	<unknown>
)	PONCT.W	)
80	N.card.f.s	@card@
)	PONCT.W	)
le	D.def.m.s	le
fichier	N.C.m.s	fichier
fichier	A.qual.m.s	fichier
Envoi	N.C.m.s	envoi
du	P+D.def.m.s	du
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
au	P+D.def.m.s	au
client	N.C.m.s	client
==	P	çà
réponse	N.C.f.s	réponse
réponse	V.P.3.s	réponser
HTTP	N.P.m.s	Http
HTTP	N.P.m.s	Http
Client	N.P.m.s	Client
Client	N.P.m.s	Client
GET	N.P.m.s	Get
Navigateur	N.P.m.s	Navigateur
GET	N.P.m.s	Get
/hello.php	ET	<unknown>
/hello.php	ET	<unknown>
HTTP/1.0	N.P.m.p	<unknown>
HTTP/1.0	N.C.m.s	<unknown>
Réseau	N.C.m.s	réseau
•	P+D.def.m.s	c
HTML	N.P.m.s	<unknown>
Réseau	N.C.m.s	réseau
•	P+D.def.m.s	c
JavaScript	N.P.m.s	Javascript
•	P	à
CSS	N.P.m.s	CSS
Protocole	N.C.m.s	protocole
Protocole	N.P.m.s	Protocole
HTTP	N.P.m.s	Http
HTTP	N.P.m.s	Http
Exécution	N.C.f.s	exécution
Exécution	N.C.f.s	exécution
d'	P	de
un	D.ind.m.s	un
d'	P	de
un	D.ind.m.s	un
programme	N.C.m.s	programme
programme	N.C.m.s	programme
sur	P	sur
sur	P	sur
le	D.def.m.s	le
le	D.def.m.s	le
serveur	N.C.m.s	serveur
serveur	A.qual.m.s	serveur
Construction	N.C.f.s	construction
de	P	de
la	D.def.f.s	le
réponse	N.C.f.s	réponse
Construction	N.C.f.s	construction
de	P	de
la	D.def.f.s	le
réponse	N.C.f.s	réponse
<<html	N.P.m.s	<unknown>
>	P	à
html>	ET	<unknown>
<<head	ET	çähead
head>>	ET	headçë
Serveur	N.P.m.s	Serveur
Serveur	N.P.m.s	Serveur
<<title	N.P.m.s	<unknown>
title>>Hello	ET	titleçhello
Hello</	N.P.m.s	Helloëé
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
Serveur	ET	serveur
Web	N.P.m.s	Web
.html	ET	<unknown>
<<body	ET	çäbody
body>>Hello	ET	bodyçhello
Hello	N.P.m.s	Hello
world	ET	world
world</	ET	worldd
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
.php	ET	<unknown>
</	P	à
</html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
.jpg	ET	<unknown>
Module	N.P.m.s	Module
PHP	N.P.m.s	Php
MySQL	N.P.m.s	Mysql
10:11:05	D.card.m.p	@card@
<	N.C.m.p	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
hello.php	ET	hellophp
echo	ET	echo
<<<	ET	çùë
<<<HTML	ET	<unknown>
HTML	N.P.m.s	<unknown>
hello.php	ET	hellophp
<<html	N.P.x.s	<unknown>
>	ET	>
html>	ET	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<title	N.P.m.s	<unknown>
title>>Hello	ET	titleçhello
Hello</	N.P.m.s	Helloëé
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	ET	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	ET	çäbody
body>>Hello	ET	bodyçhello
Hello	N.P.m.s	Hello
world	ET	world
world</	ET	worldd
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
</	P	à
</html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
5	A.card.m.s	@card@
Fonctionnement	N.C.m.s	fonctionnement
de	P	de
PHP	N.P.m.s	Php
Client	N.P.m.s	Client
	P	à
Serveur	N.P.m.s	Serveur
1	A.card.m.s	@card@
.	PONCT.S	.

2	A.card.m.s	@card@
.	PONCT.S	.

3	A.card.m.s	@card@
.	PONCT.S	.

4	A.card.m.s	@card@
.	PONCT.S	.

5	A.card.m.s	@card@
.	PONCT.S	.

Connexion	N.C.f.s	connexion
TCP	N.P.f.s	Tcp
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
(	PONCT.W	(
port	N.C.m.s	port
80	A.card.m.s	@card@
)	PONCT.W	)
Requête	N.C.f.s	requête
HTTP	N.C.m.s	<unknown>
du	P+D.def.m.s	du
client	N.C.m.s	client
(	PONCT.W	(
mon_fichier.php	N.C.m.s	<unknown>
)	PONCT.W	)
Localisation	N.C.f.s	localisation
de	P	de
la	D.def.f.s	le
ressource	N.C.f.s	ressource
Exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
code	N.C.m.s	code
PHP	N.P.m.s	Php
Envoi	N.C.m.s	envoi
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
au	P+D.def.m.s	au
client	N.C.m.s	client
=	PONCT.W	=
réponse	N.C.f.s	réponse
HTTP	N.P.m.s	Http
6	A.card.m.s	@card@
.	PONCT.S	.

Fermeture	N.C.f.s	fermeture
de	P	de
la	D.def.f.s	le
connexion	N.C.f.s	connexion
7	A.card.f.s	@card@
.	PONCT.S	.

Rendu	N.P.m.s	Rendu
graphique	N.C.m.s	graphique
des	P+D.def.f.p	du
données	N.C.f.p	donnée
(	PONCT.W	(
HTML	N.P.m.s	<unknown>
,	PONCT.W	,
image	N.C.f.s	image
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
10:11:05	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
6	A.card.m.s	@card@
Programme	N.C.m.s	programme
en	P	en
PHP	N.P.m.s	Php
Délimitation	N.C.f.s	délimitation
du	P+D.def.m.s	du
code	N.C.m.s	code
PHP	N.P.m.s	Php
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
.php	N.C.m.s	<unknown>
:	PONCT.W	:
	N.C.m.s	
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
Code	P	code
PHP	N.P.m.s	Php
?	PONCT.S	?

>	P	à
Fermeture	N.C.f.s	fermeture
Fermeture	N.C.f.s	fermeture
optionnelle	A.qual.f.s	optionnel
optionnelle	A.qual.f.s	optionnel
	P	à
<script	N.P.m.s	<unknown>
language="PHP">	ET	languageçphpçë
Confusion	N.C.f.s	confusion
Confusion	N.C.f.s	confusion
avec	P	avec
avec	P	avec
JavaScript	N.P.m.s	Javascript
JavaScript	N.P.m.s	Javascript
	P	à
	N.C.m.s	
àà	P	àà
bannir	VW	bannir
bannir	VW	bannir
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

!	PONCT.S	!

Code	N.P.m.s	Code
PHP	N.C.m.s	php
</script>	N.P.x.s	<unknown>
	N.C.m.s	
	N.C.m.s	
<	N.C.m.s	<
?	PONCT.S	?

Code	P	code
PHP	N.C.m.s	php
?	PONCT.S	?

>	N.C.m.s	>
<	D.card.m.p	<
%	N.C.m.s	%
Code	N.P.m.s	Code
PHP	N.P.m.s	Php
%>	N.C.m.s	<unknown>
10:11:06	A.card.m.s	@card@
Dépend	N.C.m.s	dépend
Dépend	N.C.m.s	dépend
de	P	de
de	P	de
la	D.def.f.s	le
la	D.def.f.s	le
configuration	N.C.f.s	configuration
configuration	N.C.f.s	configuration
short_open_tag	ET	shortçopençtag
short_open_tag	N.P.m.s	Shortçopençtag
du	P+D.def.m.s	du
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
serveur	A.qual.m.s	serveur
asp_tags	N.C.m.p	aspçtag
asp_tags	N.P.x.s	Aspütags
	P	à
	N.C.m.s	
àà	P	àà
bannir	VW	bannir
bannir	VW	bannir
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

!	PONCT.S	!

Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
7	A.card.m.s	@card@
Eléments	N.C.m.p	elément
de	P	de
syntaxe	N.C.m.s	syntaxe
PHP	N.P.m.s	Php
	N.C.m.s	
La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
PHP	N.P.m.s	Php
ressemble	V.P.3.s	ressembler
à	P	à
celle	PRO.dem.f.s	celui
de	P	de
famille	N.C.f.s	famille
"	PONCT.W	"
C	N.card.m.s	C
"	PONCT.W	"
(	PONCT.W	(
C	N.P.m.s	C
,	PONCT.W	,
C++	N.P.f.s	Can
,	PONCT.W	,
Java	N.P.m.s	Java
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
	N.C.m.s	
Chaque	D.ind.f.s	chaque
instruction	N.C.f.s	instruction
se	CL.refl.3.f.s	se
termine	V.P.3.s	terminer
par	P	par
"	PONCT.W	"
;	PONCT.W	;
"	PONCT.W	"
	N.C.m.s	
Commentaires	N.C.m.p	commentaire
:	PONCT.W	:
/*	PRO.card.m.p	<unknown>
jusqu'	P	jusque
au	P+D.def.m.s	au
prochain	A.qual.m.s	prochain
*/	N.C.m.s	<unknown>
//	PONCT.W	@card@
jusqu'	P	jusque
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
#	N.C.m.s	#
jusqu'	P	jusque
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
10:11:06	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
8	A.card.m.s	@card@
Les	D.def.f.p	le
variables	N.C.f.p	variable
et	C.C	et
les	D.def.m.p	le
types	N.C.m.p	type
de	P	de
données	N.C.f.p	donnée
	N.C.m.s	
Tout	D.ind.m.s	tout
identificateur	N.C.m.s	identificateur
commence	V.P.3.s	commencer
par	P	par
"	PONCT.W	"
$	N.C.m.s	$
"	PONCT.W	"
	N.C.m.s	
Les	D.def.f.p	le
affectations	N.C.f.p	affectation
sont	V.P.3.p	être
réalisées	VK.f.p	réaliser
grâce	N.C.f.s	grâce
à	P	à
"	PONCT.W	"
=	N.C.m.s	=
"	PONCT.W	"
	N.C.m.s	
Numérique	N.P.f.s	Numérique
entier	A.qual.m.s	entier
:	PONCT.W	:
12	A.card.m.s	@card@
ou	C.C	ou
réel	A.qual.m.s	réel
:	PONCT.W	:
1.54	D.card.f.p	@card@
	N.C.m.p	
Chaîne	N.P.f.s	Chaîne
:	PONCT.W	:
"	PONCT.W	"
Hello	N.P.m.s	Hello
"	PONCT.W	"
ou	C.C	ou
’	P	à
Bonjour	N.P.m.s	Bonjour
’	N.C.m.s	’
	N.C.m.s	
Booléen	N.P.m.s	Booléen
:	PONCT.W	:
true	N.C.f.s	true
,	PONCT.W	,
false	N.C.f.s	false
(	PONCT.W	(
PHP	N.P.m.s	Php
4	A.card.m.s	@card@
)	PONCT.W	)
	P+D.def.m.s	c
Tableau	N.P.m.s	Tableau
:	PONCT.W	:
$tab[2]=12	N.C.m.p	<unknown>
	N.C.m.s	
Objet	N.P.m.s	Objet
(	PONCT.W	(
PHP4	N.P.m.s	Php4
,	PONCT.W	,
PHP5	N.P.m.s	<unknown>
)	PONCT.W	)
	P	à
Ressource	N.C.f.s	ressource
	P	à
NULL	N.P.m.s	Null
	N.C.m.s	
Le	D.def.m.s	le
type	N.C.m.s	type
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
dynamique	A.qual.f.s	dynamique
et	C.C	et
est	V.P.3.s	être
déterminé	VK.m.s	déterminer
par	P	par
la	D.def.f.s	le
valeur	N.C.f.s	valeur
qui	PRO.rel.f.s	qui
lui	CL.obj.3.f.s	lui
est	V.P.3.s	être
affectée	VK.f.s	affecter
10:11:06	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
9	A.card.m.s	@card@
Typage	N.C.m.s	typage
faible	A.qual.m.s	faible
.	PONCT.S	.

Exemple	N.C.m.s	exemple
//	PONCT.W	@card@
Pas	ADV.neg	pas
de	P	de
déclaration	N.C.f.s	déclaration
de	P	de
variable	N.C.f.s	variable
$test	N.P.m.s	<unknown>
=	PONCT.W	=
1.5	A.card.f.s	@card@
;	PONCT.W	;
//	PONCT.W	@card@
Réel	N.P.m.s	Réel
$test	N.P.m.s	<unknown>
=	PONCT.W	=
12	A.card.m.s	@card@
;	PONCT.W	;
//	PONCT.W	@card@
Entier	N.P.m.s	Entier
$test	N.P.m.s	<unknown>
=	PONCT.W	=
array()	N.C.m.s	arrayçë
;	PONCT.W	;
//	PONCT.W	@card@
Tableau	N.P.m.s	Tableau
$test	N.P.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
10	A.card.f.s	@card@
"	PONCT.W	"
;	PONCT.W	;
//	PONCT.W	@card@
Chaîne	N.P.f.s	Chaîne
echo	ET	echo
$test	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
10	A.card.m.s	@card@
10:11:07	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
10	A.card.m.s	@card@
Typage	N.C.m.s	typage
automatique	A.qual.m.s	automatique
.	PONCT.S	.

Exemple	N.C.m.s	exemple
$nombre1	A.qual.m.s	<unknown>
$nombre2	A.qual.m.s	<unknown>
$chaine1	N.P.m.s	<unknown>
$chaine2	N.P.f.s	<unknown>
=	V.P.3.s	être
=	V.P.3.s	être
=	V.P.3.s	être
=	PONCT.W	=
1.5	A.card.f.s	@card@
;	PONCT.W	;
12	N.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
10	PRO.card.m.p	@card@
"	PONCT.W	"
;	PONCT.W	;
'	PONCT.W	'
coucou	N.C.m.p	coucou
'	ADV.-	'
;	PONCT.W	;
//	PONCT.W	@card@
//	PONCT.W	@card@
//	PONCT.W	@card@
//	PONCT.W	@card@
Réel	N.P.m.s	Réel
Entier	N.P.m.s	Entier
Chaîne	N.P.f.s	Chaîne
Chaîne	N.P.f.s	Chaîne
$total	N.P.m.s	<unknown>
=	P	à
$nombre1	N.C.m.s	<unknown>
+	P	p
$nombre2	N.C.f.s	<unknown>
+	P	p
$chaine1	N.P.f.s	<unknown>
+	P	p
$chaine2	N.P.f.s	<unknown>
;	PONCT.W	;
1.5	D.card.m.p	@card@
1.5	A.card.m.p	@card@
12	A.card.m.s	@card@
12	A.card.m.s	@card@
"	PONCT.W	"
10	N.card.f.s	@card@
"	PONCT.W	"
"	PONCT.W	"
10	A.card.f.p	@card@
"	PONCT.W	"
13.5	PRO.card.m.p	@card@
13.5	A.card.m.p	@card@
10	A.card.m.p	@card@
10	A.card.m.p	@card@
23.5	A.card.m.p	@card@
23.5	A.card.m.p	@card@
echo	N.C.m.p	echo
$total	A.qual.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
23.5	D.card.m.p	@card@
Réel	N.C.m.s	réel
10:11:07	N.card.f.s	@card@
'	PONCT.W	'
coucou	N.C.m.s	coucou
'	PONCT.W	'
'	PONCT.W	'
coucou	N.C.m.s	coucou
'	PONCT.W	'
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
00	A.card.m.s	@card@
23.5	A.card.m.p	@card@
23.5	A.card.m.p	@card@
11	A.card.f.p	@card@
Les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
Substitution	N.C.f.s	substitution
de	P	de
variables	N.C.f.p	variable
dans	P	dans
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
	P	à
Guillemets	N.C.m.p	guillemet
simples	A.qual.m.p	simple
	P	à
	P	à
$a='chaîne	N.P.x.s	<unknown>
'	PONCT.W	'
;	PONCT.W	;
$b='voici	N.C.m.s	<unknown>
une	D.ind.f.s	un
$a	N.C.f.s	ça
'	PONCT.W	'
;	PONCT.W	;
	D.card.m.p	
Guillemets	N.C.m.p	guillemet
doubles	A.qual.m.p	double
	P	à
	N.C.m.s	
$a="chaîne	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$b="voici	N.C.m.s	<unknown>
une	D.ind.f.s	un
$a	N.C.f.s	ça
"	PONCT.W	"
;	PONCT.W	;
	P+D.def.m.s	c
Syntaxe	N.C.m.s	syntaxe
HereDoc	N.P.m.s	Heredoc
	P	à
	N.C.m.s	
10:11:07	D.card.m.p	@card@
$a="chaîne	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$b=<<<MARQUE_DE_FIN	N.P.x.s	<unknown>
voici	V.P.3.s	<unknown>
une	D.ind.f.s	un
$a	N.C.f.s	ça
sur	P	sur
deux	D.card.f.p	deux
lignes	N.C.f.p	ligne
;	PONCT.W	;
-	PONCT.W	-
)	PONCT.W	)
MARQUE_DE_FIN	N.P.x.s	Marqueëdeëfin
;	PONCT.W	;
chaîne	N.C.f.s	chaîne
chaîne	N.C.f.s	chaîne
voici	V.P.3.s	<unknown>
voici	V.P.3.s	<unknown>
une	D.ind.f.s	un
une	D.ind.f.s	un
$a	N.C.f.s	ça
$a	D.poss.f.s	con
chaîne	N.C.f.s	chaîne
chaîne	A.qual.f.s	chaîn
voici	V.P.3.s	<unknown>
voici	V.P.3.s	<unknown>
une	D.ind.f.s	un
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
chaîne	A.qual.f.s	chaîn
chaîne	N.C.f.s	chaîne
chaîne	A.qual.f.s	chaîn
voici	V.P.3.s	<unknown>
voici	V.P.3.s	<unknown>
une	D.ind.f.s	un
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
chaîne	A.qual.f.s	chaîn
sur	P	sur
sur	P	sur
deux	D.card.f.p	deux
deux	D.card.f.p	deux
lignes	N.C.f.p	ligne
lignes	A.qual.f.p	ligne
;	PONCT.W	;
-	PONCT.W	-
)	PONCT.W	)
;	PONCT.W	;
-	PONCT.W	-
)	PONCT.W	)
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
12	A.card.m.s	@card@
Concaténation	N.C.f.s	concaténation
de	P	de
chaînes	N.C.f.p	chaîne
	N.C.m.s	
	N.C.m.s	
Permet	N.P.m.s	Permet
d'	P	de
assembler	VW	assembler
plusieurs	D.ind.f.p	plusieurs
chaînes	N.C.f.p	chaîne
Réalisé	VK.m.s	réaliser
grâce	N.C.f.s	grâce
à	P	à
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
point	A.qual.m.s	point
:	PONCT.W	:
.	PONCT.S	.

"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
"	PONCT.W	"
.	PONCT.S	.

"	PONCT.W	"
Marcel	N.P.m.s	Marcel
"	PONCT.W	"
	N.P.m.s	
vaut	V.P.3.s	valoir
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
Marcel	N.P.m.s	Marcel
"	PONCT.W	"
$nb	N.P.m.s	<unknown>
=	PONCT.W	=
6*2	N.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
Acheter	N.P.m.s	Acheter
"	PONCT.W	"
.	PONCT.S	.

$nb	N.C.m.s	<unknown>
	N.C.m.s	
vaut	V.P.3.s	valoir
10:11:08	N.card.f.s	@card@
.	PONCT.S	.

"	PONCT.W	"
oeufs	N.C.m.p	œuf
"	PONCT.W	"
"	PONCT.W	"
Acheter	N.P.m.s	Acheter
12	D.card.m.p	@card@
oeufs	N.C.m.p	œuf
"	PONCT.W	"
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
13	A.card.m.s	@card@
La	D.def.f.s	le
commande	N.C.f.s	commande
echo	ET	echo
	P+D.def.m.s	c
Permet	N.P.m.s	Permet
d'	P	de
envoyer	VW	envoyer
du	P+D.def.m.s	du
texte	N.C.m.s	texte
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
du	P+D.def.m.s	du
client	N.C.m.s	client
(	PONCT.W	(
«	P	à
écrire	VW	écrire
»	P	à
la	D.def.f.s	le
page	N.C.f.s	page
au	P+D.def.m.s	au
format	N.C.m.s	format
HTML	N.P.m.s	<unknown>
résultant	VG	résulter
de	P	de
l'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
de	P	de
PHP	N.P.m.s	Php
)	PONCT.W	)
	N.C.m.s	
	ET	
echo	ET	echo
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
"	PONCT.W	"
;	PONCT.W	;
$nom="Marcel	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
$nom	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
	N.P.x.s	
Plus	ADV.-	plus
généralement	ADV.-	généralement
,	PONCT.W	,
permet	V.P.3.s	permettre
d'	P	de
envoyer	VW	envoyer
des	D.ind.m.p	du
octets	N.C.m.p	octet
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
du	P+D.def.m.s	du
client	N.C.m.s	client
	P	à
	N.C.m.s	
	N.C.m.s	
10:11:08	D.card.m.p	@card@
Ficher	N.P.m.s	Ficher
HTML	N.P.m.s	<unknown>
,	PONCT.W	,
XML	N.P.m.s	Xml
,	PONCT.W	,
CSS	N.P.m.s	CSS
,	PONCT.W	,
JavaScript	N.P.m.s	Javascript
,	PONCT.W	,
…	N.P.x.s	…
Données	VK.f.p	donner
d'	P	de
une	D.ind.f.s	un
image	N.C.f.s	image
Contenu	VK.m.s	contenir
d'	P	de
un	D.ind.m.s	un
ficher	N.C.m.s	ficher
PDF	N.P.m.s	Pdf
,	PONCT.W	,
Flash	N.P.m.s	Flash
,	PONCT.W	,
etc	ADV.-	<unknown>
.	PONCT.S	.

Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
14	A.card.m.s	@card@
Hello	N.P.m.s	Hello
world	ET	world
!	PONCT.S	!

Interprétation	N.C.f.s	interprétation
Interprétation	N.C.f.s	interprétation
du	P+D.def.m.s	du
du	P+D.def.m.s	du
code	N.C.m.s	code
code	N.C.m.s	code
PHP	N.P.m.s	Php
PHP	N.P.m.s	Php
sur	P	sur
sur	P	sur
le	D.def.m.s	le
le	D.def.m.s	le
serveur	N.C.m.s	serveur
serveur	A.qual.m.s	serveur
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
Serveur	N.C.m.s	serveur
du	P+D.def.m.s	du
Navigateur	N.C.m.s	navigateur
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
et	C.C	et
transmission	N.C.f.s	transmission
résultat	N.C.m.s	résultat
au	P+D.def.m.s	au
client	N.C.m.s	client
et	C.C	et
transmission	N.C.f.s	transmission
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
au	P+D.def.m.s	au
client	N.C.m.s	client
$$debut	N.P.m.s	<unknown>
debut	N.C.m.s	debut
==	P	çà
<<<	N.P.x.s	<unknown>
<<<HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<title	N.P.m.s	<unknown>
title>>hello	ET	titleëçhello
hello</	N.P.x.s	Helloëé
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	N.P.m.s	<unknown>
body>>\n	ET	bodyçëän
\n	P	àn
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
$$corps	N.C.m.p	çccorps
corps	N.C.m.p	corps
==	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Hello	N.P.m.s	Hello
Hello	N.P.m.s	Hello
world	ET	world
!	PONCT.S	!

world	N.C.m.s	world
!	PONCT.S	!

\n	P	àn
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
"	PONCT.W	"
;	PONCT.W	;
$$fin	N.C.m.s	çäfin
==	V.P.3.s	cevoir
<<<	N.P.x.s	<unknown>
fin	N.C.f.s	fin
<<<HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
</	PONCT.W	<unknown>
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
</	P	à
</html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
/*	N.C.m.p	<unknown>
/*	ET	<unknown>
Envoi	N.C.m.s	envoi
Envoi	N.C.m.s	envoi
au	P+D.def.m.s	au
au	P+D.def.m.s	au
client	N.C.m.s	client
client	N.C.m.s	client
*/	PONCT.W	<unknown>
*/	PONCT.W	<unknown>
echo	ET	echo
echo	ET	echo
$$debut	ET	<unknown>
debut.$	ET	<unknown>
.$corps	N.C.m.p	corps
corps.$	ET	corps
.$fin	ET	fëfin
fin	N.C.f.s	fin
;	PONCT.W	;
;	PONCT.W	;
<<html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<title	N.P.m.s	<unknown>
title>>hello	ET	titleëçhello
hello</	ET	<unknown>
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	N.P.m.s	<unknown>
body>>	ET	bodyçë
Hello	N.P.m.s	Hello
Hello	N.P.m.s	Hello
world	ET	world
!	PONCT.S	!

world	N.C.m.s	world
!	PONCT.S	!

</	P	à
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
</	P	à
</html	N.P.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
Impossible	A.qual.m.s	impossible
Impossible	A.qual.m.s	impossible
de	P	de
de	P	de
voir	VW	voir
voir	VW	voir
le	D.def.m.s	le
le	D.def.m.s	le
code	N.C.m.s	code
code	P	code
PHP	N.P.m.s	Php
PHP	N.P.m.s	Php
depuis	ADV.-	depuis
depuis	P	depuis
le	D.def.m.s	le
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
navigateur	A.qual.m.s	navigateur
!	PONCT.S	!

!	PONCT.S	!

!	PONCT.S	!

!	PONCT.S	!

10:11:08	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
15	A.card.m.p	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
arithmétiques	A.qual.m.p	arithmétique
$b	N.C.m.s	bb
Somme	P	somme
$b	N.C.m.s	bb
Différence	N.C.f.s	différence
$b	N.P.m.s	<unknown>
Multiplication	N.C.f.s	multiplication
$a	N.C.f.s	ça
+	P	p
*	N.C.m.s	*
/	PONCT.W	@card@
$b	N.P.x.s	<unknown>
Division	N.C.f.s	division
$a	D.card.m.p	<unknown>
%	N.C.m.p	%
$b	N.C.m.s	bb
Modulo	N.P.m.s	Modulo
(	PONCT.W	(
Reste	N.C.f.s	reste
de	P	de
la	D.def.f.s	le
division	N.C.f.s	division
entière	A.qual.f.s	entier
)	PONCT.W	)
$a	N.P.x.s	<unknown>
$a	D.poss.f.s	con
$a	D.poss.f.s	con
10:11:09	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
16	A.card.m.s	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
in-	N.C.f.s	in-
et	C.C	et
de	P	de
dé-crémentation	N.C.f.s	dé-crémentation
pré-	A.qual.f.s	<unknown>
et	C.C	et
post-fixés	N.C.m.p	post-fixé
$a++	ADV.-	çauu
++$a	N.P.x.s	Anua
$a	N.P.x.s	<unknown>
--	PONCT.W	--
--	PONCT.W	--
$a	N.C.f.s	ça
10:11:09	N.card.f.s	@card@
Retourne	V.P.3.s	retourner
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.C.f.s	ça
puis	C.C	pui
augmente	V.P.3.s	augmenter
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.P.m.s	<unknown>
de	P	de
1	D.card.m.s	@card@
Augmente	V.P.3.s	augmenter
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.C.m.s	ca
de	P	de
1	D.card.m.s	@card@
puis	C.C	pui
retourne	V.P.3.s	retourner
la	D.def.f.s	le
nouvelle	A.qual.f.s	nouveau
valeur	N.C.f.s	valeur
de	P	de
$a	D.poss.f.s	con
Retourne	V.P.3.s	retourner
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.C.f.s	ça
puis	C.C	pui
diminue	V.P.3.s	diminuer
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.P.m.s	<unknown>
de	P	de
1	D.card.m.s	@card@
Diminue	V.P.3.s	diminuer
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$a	N.C.m.s	ca
de	P	de
1	D.card.m.s	@card@
puis	C.C	pui
retourne	V.P.3.s	retourner
la	D.def.f.s	le
nouvelle	A.qual.f.s	nouveau
valeur	N.C.f.s	valeur
de	P	de
$a	D.poss.f.s	con
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
17	A.card.m.p	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
comparaison	N.C.f.s	comparaison
==	V.P.3.s	cevoir
$b	N.C.m.s	bb
$a	N.P.m.s	<unknown>
!	PONCT.S	!

=	P	à
$b	N.C.m.s	bb
$a	D.poss.f.s	con
<	N.C.m.s	<
$b	N.C.m.s	bb
$a	N.P.x.s	<unknown>
>	N.C.m.s	>
$b	N.C.m.s	bb
$a	N.P.x.s	<unknown>
<=	P+D.def.m.s	çù
$b	N.C.m.s	bb
$a	N.P.x.s	<unknown>
>=	P+D.def.m.s	çù
$b	N.C.m.s	bb
$a	N.P.x.s	<unknown>
===	V.P.3.s	cevoir
$b	N.C.m.s	bb
$a	N.P.m.s	<unknown>
!	PONCT.S	!

==	V.P.3.s	cevoir
$b	N.C.m.s	bb
$a	D.poss.f.s	con
10:11:09	N.card.f.s	@card@
Vrai	N.P.m.s	Vrai
si	ADV.-	si
égalité	N.C.f.s	égalité
entre	P	entre
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
de	P	de
$a	N.C.m.s	ca
et	C.C	et
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	ADV.-	si
différence	N.C.f.s	différence
entre	P	entre
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
de	P	de
$a	N.C.m.s	ca
et	C.C	et
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	D.poss.f.s	con
inférieur	A.qual.m.s	inférieur
à	P	à
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	N.P.x.s	<unknown>
supérieur	N.C.m.s	supérieur
à	P	à
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	N.P.x.s	<unknown>
inférieur	A.qual.m.s	inférieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	N.P.x.s	<unknown>
supérieur	A.qual.m.s	supérieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
$b	N.C.m.s	bb
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	N.P.x.s	<unknown>
et	C.C	et
$b	N.P.x.s	<unknown>
identiques	N.C.m.p	identique
(	PONCT.W	(
valeur	N.C.f.s	valeur
et	C.C	et
type	N.C.m.s	type
)	PONCT.W	)
Vrai	N.P.m.s	Vrai
si	C.S	si
$a	N.P.x.s	<unknown>
et	C.C	et
$b	N.P.x.s	<unknown>
différents	N.C.m.p	différent
(	PONCT.W	(
valeur	N.C.f.s	valeur
ou	C.C	ou
type	N.C.m.s	type
)	PONCT.W	)
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
18	A.card.m.p	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
logiques	A.qual.m.p	logique
and	ET	and
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
&&	N.P.x.s	<unknown>
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
or	N.C.m.s	or
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
||	N.P.x.s	<unknown>
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
!	PONCT.S	!

10:11:10	D.card.m.p	@card@
xor	N.C.m.s	xor
Vrai	N.P.m.s	Vrai
si	C.S	si
[	PONCT.W	[
Expr1	N.C.m.s	<unknown>
]	PONCT.W	]
et	C.C	et
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
sont	V.P.3.p	être
vraies	A.qual.f.p	vrai
idem	N.C.m.s	idem
Vrai	N.P.m.s	Vrai
si	C.S	si
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
ou	C.C	ou
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
sont	V.P.3.p	être
vraies	A.qual.f.p	vrai
idem	N.C.m.s	idem
Vrai	N.P.m.s	Vrai
si	C.S	si
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
ou	C.C	ou
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
sont	V.P.3.p	être
vraies	A.qual.f.p	vrai
[	PONCT.W	[
Expr2	N.P.m.s	<unknown>
]	PONCT.W	]
mais	C.C	mais
pas	ADV.neg	pas
les	D.def.m.p	le
deux	A.card.m.p	deux
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
Vrai	N.P.m.s	Vrai
si	C.S	si
[	PONCT.W	[
Expr1	N.P.m.s	<unknown>
]	PONCT.W	]
est	V.P.3.s	être
non	ADV.neg	non
vraie	A.qual.f.s	vrai
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
19	A.card.m.s	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
sur	P	sur
bits	N.C.m.p	bit
$a	D.poss.f.s	con
$a	D.poss.f.s	con
$a	N.C.f.s	ça
&	PONCT.W	&
|	N.C.m.s	|
^	N.C.m.s	^
$b	N.C.m.s	bb
ET	C.C	et
binaire	A.qual.m.s	binaire
$b	N.C.m.s	bb
OU	A.card.m.s	ou
binaire	A.qual.m.s	binaire
$b	N.C.m.s	bb
XOR	N.C.m.s	xor
binaire	A.qual.m.s	binaire
~	A.qual.m.s	~
$a	N.P.x.s	<unknown>
$a	D.poss.f.s	con
<<	N.C.m.p	çù
$b	N.C.m.s	bb
$a	D.poss.f.s	con
>>	N.C.m.p	çù
$b	N.C.m.s	bb
10:11:10	D.card.f.p	@card@
Inversion	N.C.f.s	inversion
bit	V.P.3.s	bire
à	P	à
bit	N.C.m.s	bit
$a	N.C.f.s	ça
décalé	VK.m.s	décaler
à	P	à
gauche	N.C.f.s	gauche
de	P	de
$b	D.card.m.p	<unknown>
rangs	N.C.m.p	rang
$a	N.P.x.s	<unknown>
décalé	VK.m.s	décaler
à	P	à
droite	N.C.f.s	droite
de	P	de
$b	D.card.m.p	<unknown>
rangs	N.C.m.p	rang
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
20	A.card.m.s	@card@
Précédence	N.C.f.s	précédence
des	P+D.def.m.p	du
opérateurs	N.C.m.p	opérateur
10:11:10	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
21	A.card.m.s	@card@
Précédence	N.C.f.s	précédence
des	P+D.def.m.p	du
opérateurs	N.C.m.p	opérateur
En	P	en
En	P	en
cas	N.C.m.s	cas
cas	N.C.m.s	cas
de	P	de
de	P	de
doute	N.C.m.s	doute
,	PONCT.W	,
doute	N.C.m.s	doute
,	PONCT.W	,
utilisez	V.Y.2.p	utiliser
utilisez	V.Y.2.p	utiliser
les	D.def.f.p	le
les	D.def.f.p	le
parenthèses	N.C.f.p	parenthèse
parenthèses	A.qual.f.p	parenthèse
;	PONCT.W	;
-	PONCT.W	-
)	PONCT.W	)
;	PONCT.W	;
-	PONCT.W	-
)	PONCT.W	)
10:11:11	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
22	A.card.m.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
Si…Alors…Sinon	N.P.m.s	Siëalorsçsinon
…	P	à
if	N.C.m.s	if
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
{	N.C.m.s	{
/*	ET	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
exécuté	VK.m.s	exécuter
si	C.S	si
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
*/	PONCT.W	<unknown>
}	N.C.m.s	}
[	PONCT.W	[
else	PPRO.3.f.s	<unknown>
{	P	à
/*	N.C.m.p	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
exécuté	VK.m.s	exécuter
si	C.S	si
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
fausse	A.qual.f.s	faux
*/	PONCT.W	<unknown>
}	N.C.m.s	}
]	PONCT.W	]
10:11:11	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
23	A.card.m.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
Tant	ADV.-	tant
que	C.S	que
…	P	à
faire	VW	faire
…	N.C.m.s	…
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
{	N.C.m.s	{
/*	ET	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
répété	VK.m.s	répéter
tant	ADV.-	tant
que	C.S	que
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
*/	PONCT.W	<unknown>
}	N.C.m.s	}
do	N.C.m.s	do
{	N.C.m.s	{
/*	N.C.m.s	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
exécuté	VK.m.s	exécuter
une	D.ind.f.s	un
fois	N.C.f.s	foi
puis	C.C	pui
répété	VK.m.s	répéter
tant	ADV.-	tant
que	C.S	que
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
*/	PONCT.W	<unknown>
}	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
;	PONCT.W	;
10:11:11	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
24	A.card.m.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
Tant	ADV.-	tant
que	C.S	que
…	P	à
faire	VW	faire
…	N.C.m.s	…
for(avant	N.C.m.s	forçavant
;	PONCT.W	;
condition	N.C.f.s	condition
;	PONCT.W	;
fin_chaque_itération	N.C.f.s	finçchaqueçitération
)	PONCT.W	)
{	N.C.m.s	{
/*	ET	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
répété	VK.m.s	répéter
tant	ADV.-	tant
que	C.S	que
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
*/	PONCT.W	<unknown>
}	N.C.m.s	}
Équivalent	N.C.m.s	équivalent
à	P	à
:	PONCT.W	:
avant	ADV.-	avant
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
{	P	à
/*	N.C.m.p	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
répété	VK.m.s	répéter
tant	ADV.-	tant
que	C.S	que
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
*/	PONCT.W	<unknown>
fin_chaque_itération	N.C.f.s	finçchaqueçitération
;	PONCT.W	;
}	N.C.m.s	}
10:11:12	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
25	A.card.m.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
switch	ET	switch
…	P	à
switch	N.C.m.s	switch
(	PONCT.W	(
val	N.C.m.s	val
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
v1	A.card.f.s	<unknown>
:	PONCT.W	:
instructions	N.C.f.p	instruction
case	N.C.f.s	case
v2	A.card.f.s	<unknown>
:	PONCT.W	:
instructions	N.C.f.p	instruction
}	P	à
exécutées	VK.f.p	exécuter
si	ADV.-	si
val==v1	N.C.f.s	<unknown>
exécutées	VK.f.p	exécuter
si	ADV.-	si
val==v2	N.C.m.p	<unknown>
ou	C.C	ou
si	ADV.-	si
val==v1	N.C.f.s	<unknown>
…	P	à
default	N.C.m.s	default
:	PONCT.W	:
instructions	N.C.f.p	instruction
dans	P	dans
tous	A.ind.m.p	tous
les	D.def.m.p	le
cas	N.C.m.p	cas
10:11:12	A.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
26	A.card.m.s	@card@
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
break	ET	break
Permet	N.P.m.s	Permet
de	P	de
sortir	VW	sortir
d'	P	de
une	D.ind.f.s	un
structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
switch	A.qual.m.s	switch
(	PONCT.W	(
val	N.C.m.s	val
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
v1	A.card.f.s	<unknown>
:	PONCT.W	:
instructions	N.C.f.p	instruction
exécutées	VK.f.p	exécuter
si	ADV.-	si
val==v1	A.qual.f.s	<unknown>
break	N.C.m.s	break
;	PONCT.W	;
/*	PRO.rel.f.s	<unknown>
On	CL.suj.3.m.s	on
sort	V.P.3.s	sortir
du	P+D.def.m.s	du
switch	N.C.m.s	switch
si	ADV.-	si
val==v1	N.C.f.s	<unknown>
*/	PONCT.W	<unknown>
case	N.C.f.s	case
v2	A.card.f.s	<unknown>
:	PONCT.W	:
instructions	N.C.f.p	instruction
exécutées	VK.f.p	exécuter
si	C.S	si
val==v2	VK.m.s	<unknown>
ou	C.C	ou
si	C.S	si
val==v1	N.C.f.s	<unknown>
break	ET	break
;	PONCT.W	;
/*	ET	<unknown>
On	CL.suj.3.m.s	on
sort	V.P.3.s	sortir
du	P+D.def.m.s	du
switch	N.C.m.s	switch
si	ADV.-	si
val==v2	A.qual.m.s	<unknown>
*/	PONCT.W	<unknown>
…	P	à
default	N.C.m.s	default
:	PONCT.W	:
instructions	N.C.f.p	instruction
exécutées	VK.f.p	exécuter
dans	P	dans
tous	A.ind.m.p	tous
les	D.def.m.p	le
cas	N.C.m.p	cas
si	ADV.-	si
val	A.qual.m.s	val
!	PONCT.S	!

=v1	A.qual.m.s	<unknown>
et	C.C	et
val	A.qual.m.s	val
!	PONCT.S	!

=v2	A.card.m.s	<unknown>
}	N.C.m.s	}
10:11:12	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
27	A.card.m.s	@card@
Les	D.def.m.p	le
tableaux	N.C.m.p	tableau
	P+D.def.m.s	c
Création	N.C.f.s	création
/	PONCT.W	@card@
initialisation	N.C.f.s	initialisation
:	PONCT.W	:
$tab1=array(12	N.P.f.s	<unknown>
,	PONCT.W	,
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
,	PONCT.W	,
2.5	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
$tab2[	N.P.f.s	<unknown>
]	PONCT.W	]
$tab2[	N.P.m.s	<unknown>
]	PONCT.W	]
$tab2[	N.P.m.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
=	V.P.3.s	être
=	PONCT.W	=
12	A.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
fraise	N.C.f.s	fraise
"	PONCT.W	"
;	PONCT.W	;
2.5	PRO.card.m.p	@card@
;	PONCT.W	;
$tab3[0	N.C.m.p	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
12	A.card.m.s	@card@
;	PONCT.W	;
$tab3[1	N.C.m.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
;	PONCT.W	;
$tab3[2	N.C.m.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
2.5	PRO.card.m.p	@card@
;	PONCT.W	;
10:11:13	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
Clé	N.P.m.s	Clé
Valeur	N.C.f.s	valeur
0	D.card.m.s	@card@
12	A.card.m.s	@card@
1	A.card.f.s	@card@
"	PONCT.W	"
fraise	N.C.f.s	fraise
"	PONCT.W	"
2	A.card.m.s	@card@
2.5	A.card.m.p	@card@
28	A.card.m.p	@card@
Les	D.def.m.p	le
tableaux	N.C.m.p	tableau
«	C.C	c
à	P	à
trous	PRO.ind.m.p	trou
»	N.C.m.p	»
	N.C.m.s	
Les	D.def.m.p	le
éléments	N.C.m.p	élément
du	P+D.def.m.s	du
tableaux	N.C.m.s	tableau
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
forcement	ADV.-	forcement
d'	P	de
indices	N.C.m.p	indice
consécutifs	A.qual.m.p	consécutif
:	PONCT.W	:
$tab4[0	A.qual.m.p	<unknown>
]	PONCT.W	]
$tab4[1	N.P.f.s	<unknown>
]	PONCT.W	]
$tab4[2	N.P.f.s	<unknown>
]	PONCT.W	]
$tab4[5	N.P.f.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
=	V.P.3.s	être
=	V.P.3.s	être
=	PONCT.W	=
12	N.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
;	PONCT.W	;
2.5	PRO.card.m.p	@card@
;	PONCT.W	;
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Clé	N.P.m.s	Clé
Valeur	N.P.m.s	Valeur
0	A.card.f.s	@card@
12	A.card.m.s	@card@
1	A.card.f.s	@card@
"	PONCT.W	"
fraise	N.C.f.s	fraise
"	PONCT.W	"
2	A.card.m.s	@card@
3	A.card.m.s	@card@
4	A.card.m.s	@card@
5	A.card.m.p	@card@
2.5	A.card.m.p	@card@
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
	P	à
Comment	ADV.int	comment
parcourir	VW	parcourir
de	D.ind.m.p	de
tels	A.qual.m.p	tel
tableaux	N.C.m.p	tableau
?	PONCT.S	?

10:11:13	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
29	A.card.m.p	@card@
Les	D.def.m.p	le
tableaux	N.C.m.p	tableau
«	N.C.m.p	«
à	P	à
trous	PRO.ind.m.p	trou
»	N.C.m.p	»
(	PONCT.W	(
suite	N.C.f.s	suite
)	PONCT.W	)
4	D.card.m.p	@card@
Parcours	N.C.m.p	parcours
classique	A.qual.m.s	classique
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
$i=0	N.C.f.p	<unknown>
;	PONCT.W	;
$i	N.C.m.s	çi
<	P+D.def.m.s	c
sizeof($tab4)	N.C.m.s	sizeofçëtabë
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
tab4[$i	N.C.m.s	tab4çi
]	PONCT.W	]
:	PONCT.W	:
"	PONCT.W	"
.	PONCT.S	.

$tab4[$i	N.C.m.s	<unknown>
]	PONCT.W	]
.	PONCT.S	.

"	PONCT.W	"
<BR>\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	P	à
Clé	N.P.m.s	Clé
Valeur	N.C.f.s	valeur
?	PONCT.S	?

10:11:13	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
0	A.card.m.s	@card@
1	A.card.m.s	@card@
12	A.card.m.s	@card@
"	PONCT.W	"
fraise	N.C.f.s	fraise
"	PONCT.W	"
2	A.card.m.s	@card@
3	A.card.m.s	@card@
2.5	A.card.m.p	@card@
4	A.card.m.p	@card@
5	A.card.m.p	@card@
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
30	A.card.f.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
Pour	P	pour
chaque	D.ind.m.s	chaque
…	N.C.m.s	…
foreach	A.qual.m.s	foreach
(	PONCT.W	(
$tableau	N.C.m.s	<unknown>
as	ET	as
$element	ADV.-	çelement
)	PONCT.W	)
{	P	à
/*	N.C.m.p	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
répété	VK.m.s	répéter
pour	P	pour
chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
de	P	de
$tableau	N.C.m.s	<unknown>
*/	PONCT.W	<unknown>
/*	N.C.m.s	<unknown>
Chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
de	P	de
$tableau	N.C.m.s	<unknown>
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
grâce	N.C.f.s	grâce
à	P	à
$element	N.P.m.s	<unknown>
*/	C.C	ce
}	N.C.m.s	}
10:11:14	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
31	A.card.m.p	@card@
Parcours	N.C.m.p	parcours
de	P	de
tableau	N.C.m.s	tableau
:	PONCT.W	:
foreach	ET	foreach
PHP	N.P.m.s	Php
…	N.C.m.s	…
$tab4[0	N.C.m.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
12	A.card.m.s	@card@
;	PONCT.W	;
$tab4[1	N.P.f.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
;	PONCT.W	;
$tab4[2	N.C.m.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
2.5	N.card.m.s	@card@
;	PONCT.W	;
$tab4[5	N.P.m.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
foreach($tab4	ET	<unknown>
as	ET	as
$v	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
Val	N.P.m.s	Val
:	PONCT.W	:
$v<br>\n	ET	äväbrään
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
…	N.C.m.s	…
10:11:14	D.card.m.p	@card@
HTML	N.C.m.s	<unknown>
…	N.C.m.s	…
Val:12<br>\n	N.P.m.s	<unknown>
Val:fraise<br>\n	N.P.m.s	Valcfraiseëb
Val:2.5<br>\n	N.P.m.s	<unknown>
Val:el5<br>\n	N.P.m.s	<unknown>
…	P	à
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
Navigateur	N.C.m.s	navigateur
32	D.card.m.p	@card@
Tableaux	N.C.m.p	tableau
associatifs	A.qual.m.p	associatif
	P	à
Tableaux	N.P.m.s	Tableaux
dont	PRO.rel.m.p	dont
l'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.m.p	au
éléments	N.C.m.p	élément
n'	ADV.neg	ne
est	V.P.3.s	être
plus	ADV.neg	plus
réalisé	VK.m.s	réaliser
grâce	N.C.f.s	grâce
à	P	à
un	D.ind.m.s	un
index	N.C.m.s	index
(	PONCT.W	(
0,1	PRO.card.m.s	@card@
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
mais	C.C	mais
grâce	N.C.f.s	grâce
à	P	à
une	D.ind.f.s	un
clé	N.C.f.s	clé
de	P	de
type	N.C.m.s	type
entier	A.qual.m.s	entier
ou	C.C	ou
chaîne	A.qual.f.s	chaîn
.	PONCT.S	.

	D.card.m.p	
Exemples	N.C.m.p	exemple
de	P	de
clés	N.C.f.p	clé
:	PONCT.W	:
$tab['un	N.C.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
=	PONCT.W	=
12	A.card.m.s	@card@
;	PONCT.W	;
$tab[205	N.C.m.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
bonjour	N.C.m.s	bonjour
"	PONCT.W	"
;	PONCT.W	;
$tab["la	N.P.m.s	<unknown>
	P	à
Création	N.C.f.s	création
valeur	N.C.f.s	valeur
"	PONCT.W	"
]	PONCT.W	]
$tab	N.P.m.s	<unknown>
=	PONCT.W	=
array(cle1	N.C.m.s	<unknown>
=>	N.P.x.s	<unknown>
cle2	PRO.dem.f.s	<unknown>
=>	N.P.x.s	<unknown>
=	V.P.3.s	être
3.0	PRO.card.m.p	@card@
;	PONCT.W	;
val1	N.C.m.p	<unknown>
,	PONCT.W	,
val2	N.C.f.s	<unknown>
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
;	PONCT.W	;
10:11:14	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.p	@card@
33	A.card.m.p	@card@
Tableaux	N.C.m.p	tableau
associatifs	A.qual.m.p	associatif
-	PONCT.W	-
Exemples	N.C.m.p	exemple
$tab5['un	N.P.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
$tab5['trois	N.C.m.p	-tab5'trois
'	PONCT.W	'
]	PONCT.W	]
$tab5["deux	N.P.m.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
$tab5[42	N.P.f.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
=	V.P.3.s	être
=	V.P.3.s	être
=	V.P.3.s	être
12	N.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
fraise	N.C.f.s	fraise
"	PONCT.W	"
;	PONCT.W	;
2.5	PRO.card.m.p	@card@
;	PONCT.W	;
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Clé	VK.m.s	cler
"	PONCT.W	"
un	D.ind.m.s	un
"	PONCT.W	"
10:11:15	A.card.m.s	@card@
=>	N.C.m.p	çù
=>	N.C.m.p	çù
=>	N.C.m.p	çù
=>	N.C.m.p	çù
12	A.card.m.p	@card@
"	PONCT.W	"
trois	A.card.f.p	trois
"	PONCT.W	"
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
"	PONCT.W	"
deux	PRO.card.f.p	deux
"	PONCT.W	"
2.5	D.card.m.p	@card@
42	A.card.m.p	@card@
$tab6	N.C.m.p	<unknown>
=	V.P.3.s	être
array('un	N.C.m.s	arrayç'un
'	PONCT.W	'
'	PONCT.W	'
trois	PRO.card.m.p	trois
'	PONCT.W	'
"	PONCT.W	"
deux	PRO.card.f.p	deux
"	PONCT.W	"
42	D.card.f.p	@card@
Valeur	N.C.f.s	valeur
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
12	A.card.f.s	@card@
,	PONCT.W	,
"	PONCT.W	"
fraise	A.qual.f.s	frais
"	PONCT.W	"
,	PONCT.W	,
2.5	N.card.m.s	@card@
,	PONCT.W	,
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
34	A.card.m.s	@card@
Structure	N.C.f.s	structure
de	P	de
contrôle	N.C.m.s	contrôle
Pour	P	pour
chaque	D.ind.m.s	chaque
…	N.C.m.s	…
foreach($tableau	N.C.m.s	foreachëëtableau
as	ET	as
$cle	N.C.m.s	ccle
=>	N.P.x.s	<unknown>
$element	ADV.-	çelement
)	PONCT.W	)
{	D.card.m.s	{
/*	N.C.m.p	<unknown>
Bloc	N.P.m.s	Bloc
d'	P	de
instructions	N.C.f.p	instruction
répété	VK.m.s	répéter
pour	P	pour
chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
de	P	de
$tableau	N.C.m.s	<unknown>
*/	PONCT.W	<unknown>
/*	N.C.m.s	<unknown>
Chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
de	P	de
$tableau	N.C.m.s	<unknown>
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
grâce	N.C.f.s	grâce
à	P	à
$element	N.P.m.s	<unknown>
*/	C.C	ce
/*	N.C.f.s	<unknown>
La	D.def.f.s	le
clé	N.C.f.s	clé
d'	P	de
accès	N.C.m.s	accès
à	P	à
chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
est	V.P.3.s	être
donnée	VK.f.s	donner
par	P	par
$cle	N.C.m.s	ccle
*/	C.C	ce
}	N.C.m.s	}
10:11:15	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
35	A.card.m.p	@card@
Parcours	N.C.m.p	parcours
de	P	de
tableau	N.C.m.s	tableau
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
==	P	çà
<<<	N.P.x.s	<unknown>
<<<HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head><	ET	headçë
><title	ET	çätitle
title>>foreach	N.C.m.s	titleçforeach
foreach	ET	foreach
clé	A.qual.m.s	clé
clé</	N.C.m.s	<unknown>
</title	N.C.m.s	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	N.P.m.s	<unknown>
body>>	ET	bodyçë
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
$$tab6	N.P.m.s	<unknown>
=>	N.P.x.s	<unknown>
tab6	N.C.m.s	<unknown>
==	V.P.3.s	cevoir
array	N.C.m.s	array
array((''un	VK.m.s	<unknown>
un	PRO.ind.m.s	un
''	A.card.m.s	''
=>	N.C.m.s	<unknown>
12	A.card.m.s	@card@
12	A.card.m.s	@card@
,	PONCT.W	,
,	PONCT.W	,
'	PONCT.W	'
'	PONCT.W	'
deux	A.card.m.p	deux
=>	N.C.m.p	çù
deux	A.card.m.p	deux
''	PONCT.W	''
=>	ET	çù
"	PONCT.W	"
"	PONCT.W	"
fraise	A.qual.f.s	frais
fraise	A.qual.f.s	frais
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
"	PONCT.W	"
trois	PRO.card.m.p	trois
trois	PRO.card.m.p	trois
"	PONCT.W	"
"	PONCT.W	"
=>	N.C.m.p	çù
=>	N.C.m.p	çù
2.5	D.card.m.p	@card@
2.5	A.card.m.p	@card@
,	PONCT.W	,
,	PONCT.W	,
"	PONCT.W	"
"	PONCT.W	"
quatre	PRO.card.m.p	quatre
quatre	PRO.card.m.p	quatre
"	PONCT.W	"
"	PONCT.W	"
=>	N.C.m.p	çù
=>	ET	çù
"	PONCT.W	"
"	PONCT.W	"
el5	PPRO.3.f.s	<unknown>
el5	PPRO.3.f.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
;	PONCT.W	;
foreach	ET	foreach
foreach	ET	foreach
(	PONCT.W	(
(	PONCT.W	(
$$tab6	ET	<unknown>
tab6	N.C.m.s	<unknown>
as	ET	as
as	ET	as
$$cle	N.C.m.s	çäcle
cle	D.dem.m.s	cle
=>	N.P.m.s	<unknown>
=>	ET	çù
$$val	ET	çäval
val	A.qual.m.s	val
)	PONCT.W	)
)	PONCT.W	)
{	A.ind.m.s	{
{	D.card.m.s	{
$$html	N.P.m.s	<unknown>
html	N.C.m.s	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
tab[	ET	tabà
tab[$$cle	N.C.m.s	tabççcle
cle	PRO.dem.m.s	cle
]	PONCT.W	]
:	PONCT.W	:
]	PONCT.W	]
:	PONCT.W	:
$$val	ET	çäval
val<br>	ET	valçbrà
<br>\n	ET	äbrëën
\n	ET	än
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
}	ET	}
}	ET	}
echo	ET	echo
echo	ET	echo
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
</	ET	<unknown>
</body	N.P.x.s	<unknown>
body>\n</	ET	<unknown>
>\n</html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
10:11:15	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
36	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
de	P	de
génération	N.C.f.s	génération
de	P	de
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
==	P	çà
<<<	N.P.x.s	<unknown>
<<<HTML	N.C.m.s	<unknown>
HTML	N.P.m.s	<unknown>
<	I	à
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
html	ADV.-	<unknown>
PUBLIC	N.P.x.s	Public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	ET	<unknown>
<<html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<meta	ET	çämeta
meta	V.J.3.s	meter
http-equiv	ET	<unknown>
http-equiv=="Content-Type	A.ind.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Content-Type	N.P.m.s	Content-Type
"	PONCT.W	"
content	A.qual.m.s	content
content=="text/html	N.C.m.s	<unknown>
;	PONCT.W	;
"	PONCT.W	"
text/html	N.C.m.s	<unknown>
;	PONCT.W	;
charset=iso-8859-1	ET	<unknown>
"	PONCT.W	"
charset=iso-8859-1">>	N.C.m.p	<unknown>
<<title	ET	çätitle
title>Boucle</	N.P.x.s	<unknown>
>Boucle</title	N.P.x.s	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	N.P.m.s	<unknown>
body>>	ET	bodyçë
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
for	ET	for
for	N.C.m.s	for
(	PONCT.W	(
(	PONCT.W	(
$$ii==1	N.C.f.s	<unknown>
;	PONCT.W	;
1	A.card.m.s	@card@
;	PONCT.W	;
$$ii<<20	N.P.m.s	<unknown>
;	PONCT.W	;
20	N.card.m.s	@card@
;	PONCT.W	;
$$ii++	N.P.m.s	<unknown>
++	ADV.-	un
)	PONCT.W	)
)	PONCT.W	)
{	N.C.m.s	{
{	N.C.m.s	{
$$html	N.P.m.s	<unknown>
html	N.C.m.s	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Le	D.def.m.s	le
Le	D.def.m.s	le
serveur	N.C.m.s	serveur
serveur	A.qual.m.s	serveur
compte	V.P.3.s	compter
...	PONCT.W	<unknown>
compte	N.C.m.s	compte
...	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
.	PONCT.W	.
.	PONCT.S	.
$$ii	N.C.m.s	<unknown>
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
<br>	ET	çbrà
<br>\n	N.P.m.s	<unknown>
"	PONCT.W	"
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
$$html	N.P.m.s	<unknown>
html	N.C.m.s	<unknown>
.=	PONCT.S	<unknown>
.=	PONCT.S	<unknown>
<<<	ET	çùë
<<<HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
</	C.C	ce
body	N.C.m.s	body
>	P	à
</body>	N.P.x.s	<unknown>
</	P	à
</html	ET	<unknown>
html>>	A.qual.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
echo	ET	echo
echo	ET	echo
$$html	N.P.x.s	<unknown>
html	N.C.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
10:11:16	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
37	A.card.m.s	@card@
Traitement	N.C.m.p	traitement
des	P+D.def.f.p	du
données	N.C.f.p	donnée
de	P	de
formulaires	N.C.f.p	formulaire
	N.C.m.s	
PHP	N.P.m.s	Php
permet	V.P.3.s	permettre
de	P	de
traiter	VW	traiter
les	D.def.f.p	le
données	N.C.f.p	donnée
saisies	VK.f.p	saisir
grâce	N.C.f.s	grâce
à	P	à
un	D.ind.m.s	un
formulaire	A.qual.m.s	formulaire
HTML	N.P.m.s	<unknown>
si	C.S	si
le	D.def.m.s	le
champ	N.C.m.s	champ
ACTION	N.P.x.s	Action
du	P+D.def.m.s	du
formulaire	N.C.m.s	formulaire
désigne	V.P.3.s	désigner
une	D.ind.f.s	un
page	N.C.f.s	page
PHP	N.P.m.s	Php
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
.	PONCT.S	.

	N.C.m.s	
Après	P	après
récupération	N.C.f.s	récupération
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
,	PONCT.W	,
les	D.def.f.p	le
données	N.C.f.p	donnée
sont	V.P.3.p	être
contenues	VK.f.p	contenir
dans	P	dans
l'	D.def.f.s	le
une	PRO.ind.f.s	un
des	P+D.def.f.p	du
variables	N.C.f.p	variable
superglobales	A.qual.f.p	superglobal
de	P	de
type	N.C.m.s	type
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
$_GET	N.P.m.s	<unknown>
ou	C.C	ou
$_POST	N.P.m.s	<unknown>
(	PONCT.W	(
ou	C.C	ou
$_REQUEST	N.P.m.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

	P	à
La	D.def.f.s	le
valeur	N.C.f.s	valeur
peut	V.P.3.s	pouvoir
être	VW	être
trouvée	VK.f.s	trouver
grâce	N.C.f.s	grâce
à	P	à
une	D.ind.f.s	un
clé	N.C.f.s	clé
qui	PRO.rel.f.s	qui
porte	V.P.3.s	porter
le	D.def.m.s	le
même	A.ind.m.s	même
nom	N.C.m.s	nom
que	C.S	que
le	D.def.m.s	le
champs	N.C.m.s	champ
du	P+D.def.m.s	du
formulaire	N.C.m.s	formulaire
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
HTML	N.P.m.s	<unknown>
de	P	de
saisie	N.C.f.s	saisie
.	PONCT.S	.

10:11:16	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
38	A.card.m.s	@card@
Traitement	N.C.m.s	traitement
des	P+D.def.f.p	du
données	N.C.f.p	donnée
de	P	de
formulaires	N.C.f.p	formulaire
Réseau	N.P.m.s	Réseau
Réseau	N.P.m.s	Réseau
Client	N.P.m.s	Client
Client	N.P.m.s	Client
Navigateur	N.P.m.s	Navigateur
•	ET	•
HTML	N.P.m.s	<unknown>
nomPers=robert	ET	nompersärobert
nomPers=robert	A.qual.m.s	nompersärobert
•	P	à
JavaScript	N.P.m.s	Javascript
•	P	à
CSS	N.P.m.s	CSS
<<html	N.P.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
Serveur	N.P.m.s	Serveur
Serveur	N.P.m.s	Serveur
nomPers	ET	nomper
<<title	N.P.m.s	<unknown>
nomPers	ET	nomper
title>>bonjour	N.C.m.s	titleëäbonjour
bonjour</	N.P.x.s	<unknown>
</title	N.C.m.s	<unknown>
title>>	A.qual.m.s	titleëù
</	C.C	ce
</head	ET	<unknown>
head>>	A.qual.m.s	headçà
Serveur	N.P.m.s	Serveur
Web	N.P.m.s	Web
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
<<body	ET	çäbody
body>>	ET	bodyçë
$	P	à
$html	ET	<unknown>
html	A.qual.m.s	<unknown>
==	P	çà
<<<	ET	çùë
<<<HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
Bonjour	N.P.m.s	Bonjour
Bonjour	N.P.m.s	Bonjour
robert	N.P.m.s	Robert
robert	N.P.m.s	Robert
!	PONCT.S	!

!	PONCT.S	!

<	P	à
html	N.C.m.s	<unknown>
>	P	à
<html>	N.P.x.s	<unknown>
</	PONCT.W	<unknown>
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
<	ET	<
<head	ET	chead
head><	ET	headçë
><title	N.P.m.s	<unknown>
title>>bonjour	N.C.m.s	titleëäbonjour
bonjour</	N.P.x.s	<unknown>
</title	N.P.x.s	<unknown>
title></	N.P.x.s	<unknown>
></head	N.P.x.s	<unknown>
head>>	A.qual.m.s	headçà
</	C.C	ce
html	ET	<unknown>
</	P	à
html>>	ET	<unknown>
PHP	N.P.m.s	Php
Module	N.P.m.s	Module
<<body	ET	çäbody
body>>	ET	bodyçë
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
$$html	N.P.x.s	<unknown>
html	ET	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
Bonjour	N.P.m.s	Bonjour
"	PONCT.W	"
"	PONCT.W	"
.$	PONCT.S	<unknown>
.$_GET	N.C.m.s	<unknown>
_GET[[''nomPers	N.P.f.s	<unknown>
nomPers'']].	A.qual.m.s	nompers''
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
!	PONCT.S	!

!\n	D.ind.m.s	çän
\n	N.C.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
echo	ET	echo
echo	ET	echo
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
</	ET	<unknown>
</body	N.P.x.s	<unknown>
body>>\n	ET	bodyçëän
\n</	N.P.x.s	<unknown>
</html	N.C.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
robert	A.qual.m.s	robert
robert	N.C.m.s	robert
10:11:17	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
39	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
–	N.C.m.s	–
Formulaire	A.qual.m.s	formulaire
HTML	N.P.m.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
html	ADV.-	<unknown>
PUBLIC	N.P.x.s	Public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	ET	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<title	N.C.m.s	çätitle
title>>formulaire	N.C.m.s	titleëçformulaire
formulaire</	A.qual.m.s	<unknown>
</title	N.C.m.s	<unknown>
title>>	A.qual.m.s	titleëù
</	PONCT.W	<unknown>
</head	ET	<unknown>
head>>	ET	headçë
<<body	ET	çäbody
body>>	ET	bodyçë
<<form	ET	fäform
form	ET	form
action	N.C.f.s	action
action==""valide1.php	ET	<unknown>
valide1.php	ET	<unknown>
"	PONCT.W	"
"	PONCT.W	"
method	ET	method
method==""get	ET	methodçççget
get"">>	ET	getçëë
Nom	N.P.m.s	Nom
:	PONCT.W	:
Nom	N.P.m.s	Nom
:	PONCT.W	:
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""text	ET	typeëççtext
text	ET	text
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""nomPers	N.C.m.p	nameççnomper
nomPers"">>	ET	nompersçëë
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""submit	N.C.m.s	typeëçç-submit
submit	V.J.3.s	submettre
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Envoyer	VW	valueçççäenvoyer
Envoyer"">>	N.P.x.s	Envoyerççë
</	P	à
</form	N.C.m.s	<unknown>
form>>	A.qual.m.s	formçë
</	P	à
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
</	P	à
</html	N.P.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
10:11:17	VK.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
40	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
–	N.C.m.s	–
Traitement	N.C.m.s	traitement
en	P	en
PHP	N.C.m.s	php
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
==	P	çà
<<<	N.P.x.s	<unknown>
<<<HTML	N.C.m.s	<unknown>
HTML	N.P.m.s	<unknown>
<	I	à
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
<	P	à
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
PUBLIC	A.qual.m.s	public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	N.P.x.s	<unknown>
<<html	N.P.x.s	<unknown>
>	P	à
html>	ET	<unknown>
<<head	ET	çähead
head>>	ET	headçë
$$_GET	N.P.m.s	<unknown>
<<title	N.C.m.s	çätitle
_GET[[''nomPers	N.P.x.s	<unknown>
nomPers	N.C.m.p	nomper
''	PONCT.W	''
]	PONCT.W	]
]	PONCT.W	]
title>>Validation	N.C.f.s	titleççalidation
Validation</	N.P.m.s	<unknown>
</title	N.C.m.s	<unknown>
title>>	A.qual.m.s	titleëù
</	C.C	ce
</head	N.P.m.s	<unknown>
head>>	A.qual.m.s	headçà
est	V.P.3.s	être
-il	CL.suj.3.m.s	il
défini	VK.m.s	définir
?	PONCT.S	?

?	PONCT.S	?

est	V.P.3.s	être
-il	CL.suj.3.m.s	il
défini	VK.m.s	définir
<<body	N.P.m.s	<unknown>
>	P	à
body>	ET	bodyà
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
if	ET	if
if	ET	if
(	PONCT.W	(
(	PONCT.W	(
isset	V.P.3.s	isser
isset(($$_GET	N.C.m.s	issetçäçet
_GET[[''nomPers	N.P.x.s	<unknown>
nomPers	N.C.m.p	nomper
''	PONCT.W	''
]	PONCT.W	]
]	PONCT.W	]
)	PONCT.W	)
)	PONCT.W	)
)	PONCT.W	)
)	PONCT.W	)
$$_GET	N.P.m.s	<unknown>
_GET[[''nomPers	N.P.f.s	<unknown>
nomPers	A.qual.m.p	nomper
''	PONCT.W	''
]	PONCT.W	]
]	PONCT.W	]
{	CL.obj.3.m.s	c
{	CL.obj.3.m.s	c
est	V.P.3.s	être
-il	CL.suj.3.m.s	il
est	V.P.3.s	être
-il	CL.suj.3.m.s	il
vide	A.qual.m.s	vide
vide	N.C.m.s	vide
?	PONCT.S	?

?	PONCT.S	?

if	ET	if
if	A.qual.m.s	if
(	PONCT.W	(
(	PONCT.W	(
!	PONCT.S	!

!empty	ET	<unknown>
empty(($$_GET	N.C.m.s	emptyçç-et
_GET[[''nomPers	N.P.x.s	<unknown>
nomPers	A.qual.m.p	nomper
''	PONCT.W	''
]	PONCT.W	]
]	PONCT.W	]
)	PONCT.W	)
)	PONCT.W	)
)	PONCT.W	)
)	PONCT.W	)
{	N.C.m.s	{
{	N.C.m.s	{
$$html	N.P.m.s	<unknown>
html	N.C.m.s	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Vous	CL.suj.2.m.p	vous
Vous	CL.suj.2.m.p	vous
avez	V.P.2.p	avoir
avez	V.P.2.p	avoir
saisi	VK.m.s	saisir
saisi	VK.m.s	saisir
'	PONCT.W	'
'	PONCT.W	'
"	PONCT.W	"
"	PONCT.W	"
.$	PONCT.S	<unknown>
.$_GET	N.C.m.s	<unknown>
_GET[[''nomPers	N.P.x.s	<unknown>
nomPers'']]..""''\n	ET	'ompers''än
\n	ET	än
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
}	V.P.3.s	être
}	P	à
else	PPRO.3.f.s	<unknown>
else	CL.suj.3.f.s	else
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Aucune	D.neg.f.s	aucun
Aucune	D.neg.f.s	aucun
valeur	N.C.f.s	valeur
valeur	N.C.f.s	valeur
saisie	N.C.f.s	saisie
saisie\n	A.qual.m.s	saisieën
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
"	PONCT.W	"
;	PONCT.W	;
}	N.P.x.s	}
}	P	à
else	PPRO.3.f.s	<unknown>
else	CL.suj.3.f.s	else
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Utilisation	N.C.f.s	utilisation
Utilisation	N.C.f.s	utilisation
incorrecte	A.qual.f.s	incorrect
incorrecte\n	A.qual.f.s	incorrecteën
\n	ET	än
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
echo	ET	echo
echo	ET	echo
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
</	ET	<unknown>
</body	N.P.x.s	<unknown>
body>>\n	ET	bodyçëän
\n</	N.P.x.s	<unknown>
</html	N.C.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
10:11:17	PRO.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.p	@card@
41	A.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
SELECT	N.P.m.s	Select
»	N.C.m.s	»
10:11:18	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.p	@card@
42	A.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
SELECT	N.C.m.s	select
unique	A.qual.m.s	unique
»	C.C	c
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
html	ADV.-	<unknown>
PUBLIC	N.P.x.s	Public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	ET	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	A.qual.m.s	headçà
<<title	N.C.m.s	çätitle
title>>Formulaire	N.C.m.s	titleëçformulaire
Formulaire	A.qual.m.s	formulaire
de	P	de
de	P	de
saisie	N.C.f.s	saisie
saisie	VK.f.s	saisir
des	P+D.def.m.p	du
des	P+D.def.m.p	du
fruits	N.C.m.p	fruit
fruits</	N.C.m.p	<unknown>
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	C.C	ce
</head	ET	<unknown>
head>>	ET	headçë
<<body	ET	çäbody
body>>	ET	bodyçë
<<form	ET	fäform
form	ET	form
action	N.C.f.s	action
action==""valide3.php	ET	<unknown>
valide3.php	ET	<unknown>
"	PONCT.W	"
"	PONCT.W	"
method	ET	method
method==""get	ET	methodçççget
get"">>	ET	getçëë
Choisissez	V.Y.2.p	choisir
Choisissez	V.Y.2.p	choisir
des	P+D.def.m.p	du
des	P+D.def.m.p	du
fruits	N.C.m.p	fruit
:	PONCT.W	:
fruits:&nbsp	N.P.x.s	<unknown>
;	PONCT.W	;
&nbsp	N.C.m.s	<unknown>
;	PONCT.W	;
<<select	ET	çäselect
select	A.qual.m.s	select
name	A.qual.m.s	name
name==""sel	ET	nameçççlel
sel"">>	A.qual.f.s	selççëë
<<option	N.C.f.s	ççoption
option>>Fraise	A.qual.f.s	optionçfrais
Fraise	A.qual.f.s	frais
<<option	N.C.f.s	ççoption
option>>Pomme	ET	optionçëpomme
Pomme	P	pomme
<<option	N.C.f.s	ççoption
option>>Poire	V.P.3.s	optionçoirer
Poire	N.P.m.s	Poire
Envoyer	VW	envoyer
Envoyer	N.P.m.s	Envoyer
<<option	N.C.f.s	ççoption
option>>Banane	N.C.f.s	optionçëbanane
Banane	N.P.f.s	Banane
<<option	N.C.f.s	ççoption
option>>Cerise	V.P.3.s	optionçceriser
Cerise	N.C.f.s	cerise
</	PONCT.W	<unknown>
</select	ET	<unknown>
select>>	ET	selectëë
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""submit	N.C.m.s	typeëçç-submit
submit	V.J.3.s	submettre
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""envoyer	VW	valueçççenvoyer
envoyer"">>	N.P.x.s	envoyerçëë
</	P	à
</form	N.C.m.s	<unknown>
form>>	A.qual.m.s	formçë
</	C.C	ce
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
valide3.php	ET	<unknown>
?	PONCT.S	?

valide3.php	N.C.f.s	<unknown>
?	PONCT.S	?

sel=Pomme	N.C.m.s	seläpomme
sel=Pomme	N.C.m.s	seläpomme
</	P	à
html	N.C.m.s	<unknown>
>	P	à
</html>	N.P.m.s	<unknown>
10:11:18	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.p	@card@
43	A.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
SELECT	N.C.m.s	select
multiple	A.qual.m.s	multiple
»	P	à
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
PUBLIC	A.qual.m.s	public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
<html>	N.C.m.p	<unknown>
<head>	N.P.m.s	<unknown>
<title>Formulaire	N.P.x.s	<unknown>
de	P	de
saisie	N.C.f.s	saisie
des	P+D.def.m.p	du
fruits</title>	N.C.m.p	<unknown>
</head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<form	ET	fform
action="valide3.php	ET	<unknown>
"	PONCT.W	"
method="get">	ET	methodçgetçë
Choisissez	N.P.m.s	Choisissez
des	P+D.def.m.p	du
fruits:&nbsp	N.C.m.p	<unknown>
;	PONCT.W	;
<select	ET	<unknown>
name="sel	ET	nameçsel
"	PONCT.W	"
multiple>	A.qual.m.s	<unknown>
<option>Fraise	A.qual.f.s	çoptionçfrais
<option>Pomme	N.P.m.s	<unknown>
<option>Poire	N.P.x.s	<unknown>
Envoyer	VW	envoyer
<	P	à
option>Banane	N.P.x.s	<unknown>
Envoyer	N.P.x.s	Envoyer
<option>Cerise	N.P.x.s	Coptionçerise
</select>	N.P.x.s	<unknown>
<input	N.P.m.s	<unknown>
type="submit	N.C.m.s	<unknown>
"	PONCT.W	"
value="envoyer">	V.P.3.s	valueëerver
</form>	N.P.x.s	<unknown>
valide3.php	N.C.f.p	<unknown>
?	PONCT.S	?

</body>	N.P.x.s	<unknown>
valide3.php	N.C.f.p	<unknown>
?	PONCT.S	?

sel=Pomme&sel=Poire	N.C.m.s	selçpomme-selçpoire
sel=Pomme&sel=Poire	N.C.m.s	selçpomme-selçpoire
</html>	N.C.m.s	<unknown>
10:11:18	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
?	PONCT.S	?

?	PONCT.S	?
?	PONCT.S	?

?	PONCT.S	?

?	PONCT.S	?
?	PONCT.S	?

44	D.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
SELECT	N.C.m.s	select
multiple	A.qual.m.s	multiple
»	P+D.def.m.s	c
<html>	N.P.x.s	<unknown>
<head>	N.P.m.s	<unknown>
<title>Formulaire	N.P.x.s	<unknown>
de	P	de
saisie	N.C.f.s	saisie
des	P+D.def.m.p	du
fruits</title>	N.C.m.p	<unknown>
</head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<form	ET	fform
action="valide3.php	ET	<unknown>
"	PONCT.W	"
method="get">	ET	methodçgetçë
Choisissez	N.P.m.s	Choisissez
des	P+D.def.m.p	du
fruits:&nbsp	N.C.m.p	<unknown>
;	PONCT.W	;
<select	ET	<unknown>
name="sel[	ET	<unknown>
]	PONCT.W	]
"	PONCT.W	"
multiple>	A.qual.f.s	<unknown>
<option>Fraise	A.qual.f.s	çoptionçfrais
<option>Pomme	N.P.m.s	<unknown>
<option>Poire	N.P.x.s	<unknown>
Envoyer	VW	envoyer
Envoyer	N.P.m.s	Envoyer
<option>Banane	N.P.x.s	<unknown>
<option>Cerise	V.P.3.s	coptionçeriser
</select>	N.P.x.s	<unknown>
<input	ET	çinput
type="submit	N.C.m.s	<unknown>
"	PONCT.W	"
value="envoyer">	V.P.3.s	valueëerver
</form>	N.P.x.s	<unknown>
valide3.php	N.C.f.p	<unknown>
?	PONCT.S	?

valide3.php	N.C.f.s	<unknown>
?	PONCT.S	?

sel%5B%5D=Pomme&sel%5B%5D=Poire	N.C.m.p	<unknown>
sel%5B%5D=Pomme&sel%5B%5D=Poire	N.C.f.p	<unknown>
</body>	N.P.x.s	<unknown>
valide3.php	N.C.f.p	<unknown>
?	PONCT.S	?

</html>	N.C.m.s	<unknown>
valide3.php	ADV.-	<unknown>
?	PONCT.S	?

sel[]=Pomme&sel[]=Poire	N.C.f.s	selçççpommeçselçpoire
sel[]=Pomme&sel[]=Poire	N.C.f.s	selçççpommeçselçpoire
10:11:19	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
45	A.card.m.s	@card@
Traitement	N.C.m.p	traitement
des	P+D.def.f.p	du
données	N.C.f.p	donnée
des	P+D.def.m.p	du
champs	N.C.m.p	champ
«	P+D.def.m.s	c
SELECT	N.P.m.s	Select
»	N.C.m.s	»
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
==	P	çà
<<<	N.P.x.s	<unknown>
<<<HTML	N.C.m.s	<unknown>
HTML	N.P.m.s	<unknown>
<	I	à
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
html	ADV.-	<unknown>
PUBLIC	N.P.x.s	Public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	ET	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	ET	headçë
<<title	N.C.m.s	çätitle
title>>Liste	N.C.m.s	titleççliste
Liste	A.qual.m.s	liste
de	P	de
de	P	de
fruits	N.C.m.p	fruit
fruits</	N.P.x.s	<unknown>
</title	N.C.m.s	<unknown>
title>>	A.qual.m.s	titleëù
$$_GET	N.P.f.s	<unknown>
_GET[[‘‘sel	N.P.f.s	<unknown>
sel	A.qual.m.s	sel
''	CL.refl.3.m.s	'e
]	PONCT.W	]
]	PONCT.W	]
</	PONCT.W	<unknown>
head	ET	head
>	P	à
</head>	N.P.x.s	<unknown>
est	V.P.3.s	être
est	V.P.3.s	être
un	D.ind.m.s	un
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
tableau	A.qual.m.s	tableau
<<body	ET	çäbody
body>>	ET	bodyçë
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
;	PONCT.W	;
if	ET	if
if	ET	if
(	PONCT.W	(
(	PONCT.W	(
isset	V.P.3.s	isser
isset(($$_GET	N.C.m.s	issetçäçet
_GET[[''sel	N.P.f.s	<unknown>
sel	A.qual.m.s	sel
''	PONCT.W	''
]	PONCT.W	]
)	PONCT.W	)
]	PONCT.W	]
)	PONCT.W	)
&&	PRO.card.m.p	<unknown>
&&	PONCT.W	<unknown>
!	PONCT.S	!

!empty	ET	<unknown>
empty(($$_GET	N.C.m.s	emptyçç-et
_GET[[''sel	N.P.f.s	<unknown>
sel	A.qual.m.s	sel
''	PONCT.W	''
]	PONCT.W	]
)	PONCT.W	)
)	PONCT.W	)
]	PONCT.W	]
)	PONCT.W	)
)	PONCT.W	)
{	N.C.m.s	{
{	N.C.m.s	{
/*	N.C.m.s	<unknown>
La	D.def.f.s	le
variable	N.C.f.s	variable
$_GET['sel	N.P.f.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
est	V.P.3.s	être
définie	VK.f.s	définir
/*	C.C	<unknown>
La	D.def.f.s	le
variable	N.C.f.s	variable
$_GET['sel	N.P.f.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
est	V.P.3.s	être
définie	VK.f.s	définir
et	C.C	et
et	C.C	et
elle	CL.suj.3.f.s	elle
elle	CL.suj.3.f.s	elle
n'	ADV.neg	ne
est	V.P.3.s	être
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
pas	ADV.neg	pas
vide	A.qual.f.s	vide
vide	A.qual.f.s	vide
*/	PONCT.W	<unknown>
*/	PONCT.W	<unknown>
foreach	ET	foreach
foreach(($$_GET	N.C.m.s	foreachäçet
_GET[[''sel	N.P.f.s	<unknown>
sel	A.qual.m.s	sel
''	PONCT.W	''
]	PONCT.W	]
]	PONCT.W	]
as	ET	as
as	ET	as
$$fruit	N.C.m.s	çäfruit
fruit	VK.m.s	fruire
)	PONCT.W	)
)	PONCT.W	)
$$html	N.P.x.s	<unknown>
html	N.C.m.s	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Vous	CL.suj.2.m.p	vous
Vous	CL.suj.2.m.p	vous
avez	V.P.2.p	avoir
avez	V.P.2.p	avoir
choisi	VK.m.s	choisir
choisi	VK.m.s	choisir
$$fruit	N.C.m.s	çäfruit
fruit<br>	ET	fruitçbrà
<br>\n	N.P.m.s	<unknown>
\n	ET	än
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
}	V.P.3.s	être
}	P	à
else	PPRO.3.f.s	<unknown>
else	CL.suj.3.f.s	else
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.=	PONCT.W	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
"	PONCT.W	"
Vous	CL.suj.2.m.p	vous
Vous	CL.suj.2.m.p	vous
n'	ADV.neg	ne
avez	V.P.2.p	avoir
n'	ADV.neg	ne
avez	V.P.2.p	avoir
pas	ADV.neg	pas
pas	ADV.neg	pas
choisi	VK.m.s	choisir
choisi	VK.m.s	choisir
de	P	de
de	P	de
fruit	N.C.m.s	fruit
fruit\n	A.qual.m.s	fruitän
\n	N.C.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
echo	ET	echo
echo	ET	echo
$$html	N.P.x.s	<unknown>
html	ADV.-	<unknown>
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
"	PONCT.W	"
</	ET	<unknown>
</body	N.P.x.s	<unknown>
body>>\n	ET	bodyçëän
\n</	N.P.m.s	<unknown>
</html	N.C.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
10:11:19	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
46	A.card.m.s	@card@
Résultat	N.C.m.s	résultat
10:11:19	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.p	@card@
47	A.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
CHECKBOX	N.P.m.s	Checkbox
»	N.C.m.s	»
10:11:20	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	D.card.m.p	@card@
48	A.card.m.p	@card@
Formulaires	N.C.m.p	formulaire
contenant	VG	contenir
des	D.ind.m.p	du
champs	N.C.m.p	champ
«	P	à
CHECKBOX	N.P.m.s	Checkbox
»	N.C.m.s	»
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
html	ADV.-	<unknown>
PUBLIC	N.P.x.s	Public
PUBLIC	N.P.x.s	Public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
"	PONCT.W	"
-//W3C//DTD	D.card.m.p	<unknown>
HTML	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
4.01	D.card.m.p	@card@
4.01	D.card.m.p	@card@
Transitional//EN">	N.C.m.p	<unknown>
Transitional//EN">	ET	<unknown>
<<html	N.P.x.s	<unknown>
html>>	A.qual.m.s	<unknown>
<<head	ET	çähead
head>>	A.qual.m.s	headçà
<<title	N.C.m.s	çätitle
title>>Formulaire	N.C.m.s	titleëçformulaire
Formulaire	A.qual.m.s	formulaire
de	P	de
de	P	de
saisie	N.C.f.s	saisie
saisie	VK.f.s	saisir
des	P+D.def.m.p	du
des	P+D.def.m.p	du
fruits	N.C.m.p	fruit
fruits</	N.P.x.s	<unknown>
</title	ET	<unknown>
title>>	A.qual.m.s	titleëù
</	C.C	ce
</head	ET	<unknown>
head>>	ET	headçë
<<body	ET	çäbody
body>>	ET	bodyçë
<<form	ET	fäform
form	ET	form
name	ET	name
name==""formu	ET	nameççonmu
formu	VK.m.s	formre
"	PONCT.W	"
"	PONCT.W	"
action	N.C.f.s	action
action==""valide3.php	ET	<unknown>
valide3.php	ET	<unknown>
"	PONCT.W	"
"	PONCT.W	"
method	ET	method
method==""get	ET	methodçççget
get"">>	ET	getçëë
Choisissez	V.Y.2.p	choisir
Choisissez	V.Y.2.p	choisir
des	P+D.def.m.p	du
des	P+D.def.m.p	du
fruits	N.C.m.p	fruit
fruits&nbsp	N.C.m.p	<unknown>
;	PONCT.W	;
&nbsp	N.C.m.s	<unknown>
;	PONCT.W	;
:<	N.P.x.s	<unknown>
:<br	ET	<unknown>
br>>	A.qual.m.s	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""checkbox	ET	typeëççcheckbox
checkbox	ET	checkbox
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""sel[	ET	nameç-elë
]	PONCT.W	]
sel[	ET	selà
]	PONCT.W	]
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Fraise	A.qual.f.s	valueççëëfrais
Fraise"">Fraise<	N.P.x.s	Fraiseëëë
>Fraise<br	ET	<unknown>
br>>	A.qual.m.s	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""checkbox	ET	typeëççcheckbox
checkbox	ET	checkbox
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""sel[	ET	nameç-elë
]	PONCT.W	]
sel[	ET	selà
]	PONCT.W	]
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Pomme	P	valueçççpomme
Pomme	ET	pomme
"	PONCT.W	"
"	PONCT.W	"
>Pomme	N.C.m.s	<unknown>
>Pomme	P	çpomme
<<br	ET	<unknown>
br>>	A.qual.m.s	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""checkbox	ET	typeëççcheckbox
checkbox	ET	checkbox
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""sel[	ET	nameç-elë
]	PONCT.W	]
sel[	ET	selà
]	PONCT.W	]
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Poire	V.P.3.s	valueçççpoirer
Poire	A.qual.f.s	poire
"	PONCT.W	"
"	PONCT.W	"
>Poire	N.P.m.s	<unknown>
>Poire	ET	<unknown>
<<br	ET	<unknown>
br>>	A.qual.m.s	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""checkbox	ET	typeëççcheckbox
checkbox	ET	checkbox
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""sel[	ET	nameç-elë
]	PONCT.W	]
sel[	ET	selà
]	PONCT.W	]
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Banane	A.qual.f.s	valueçëëbanane
Banane"">Banane<	N.P.x.s	Bananeççananeë
>Banane<br	N.P.x.s	<unknown>
br>>	ET	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""checkbox	ET	typeëççcheckbox
checkbox	ET	checkbox
"	PONCT.W	"
"	PONCT.W	"
name	ET	name
name==""sel[	ET	nameç-elë
]	PONCT.W	]
sel[	ET	selà
]	PONCT.W	]
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Cerise	V.P.3.s	valueëëceriser
Cerise"">Cerise<	N.P.f.s	Ceriseëçeriseë
>Cerise<br	N.P.f.s	<unknown>
br>>	A.qual.m.s	<unknown>
<<input	ET	ççinput
input	ET	input
type	ET	type
type==""submit	N.C.m.s	typeëçç-submit
submit	V.J.3.s	submettre
"	PONCT.W	"
"	PONCT.W	"
value	V.P.3.s	valuer
value==""Envoyer	VW	valueçççäenvoyer
Envoyer"">>	N.P.x.s	Envoyerççë
</	P	à
</form	N.C.m.s	<unknown>
form>>	A.qual.m.s	formçë
</	P	à
</body	N.P.x.s	<unknown>
body>>	ET	bodyçë
</	P	à
</html	N.P.m.s	<unknown>
html>>	A.qual.m.s	<unknown>
10:11:20	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
49	A.card.m.s	@card@
Résultat	N.C.m.s	résultat
10:11:20	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	D.card.f.p	@card@
50	D.card.f.p	@card@
Références	N.C.f.p	référence
$a	N.P.x.s	<unknown>
=	V.P.3.s	être
12	A.card.m.s	@card@
;	PONCT.W	;
$b	N.C.m.s	bb
=	PONCT.W	=
$a	N.P.x.s	<unknown>
;	PONCT.W	;
$c	N.C.m.s	cc
=	PONCT.W	=
&$a	N.P.x.s	<unknown>
;	PONCT.W	;
$b	N.C.m.s	bb
=	PONCT.W	=
"	PONCT.W	"
coucou	N.C.m.p	coucou
"	PONCT.W	"
;	PONCT.W	;
$c	N.C.m.s	cc
=	PONCT.W	=
84	N.card.m.s	@card@
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
\$a	N.P.x.s	<unknown>
:	PONCT.W	:
$a\n	ET	çaën
"	PONCT.W	"
$a	N.P.x.s	<unknown>
$a	N.P.x.s	<unknown>
:	PONCT.W	:
:	PONCT.W	:
84	D.card.m.p	@card@
84	D.card.m.p	@card@
echo	ET	echo
"	PONCT.W	"
\$b	N.P.x.s	<unknown>
:	PONCT.W	:
$b\n	N.P.m.s	<unknown>
"	PONCT.W	"
$b	N.C.m.s	bb
$b	N.C.m.s	bb
:	PONCT.W	:
:	PONCT.W	:
coucou	ET	coucou
coucou	ET	coucou
echo	ET	echo
"	PONCT.W	"
\$c	ET	çäc
:	PONCT.W	:
$c\n	N.P.m.s	<unknown>
"	PONCT.W	"
$c	N.C.m.s	cc
$c	N.C.m.s	cc
:	PONCT.W	:
:	PONCT.W	:
84	D.card.m.p	@card@
84	A.card.m.s	@card@
unset($c)	N.C.m.p	<unknown>
;	PONCT.W	;
$c	N.C.m.s	cc
=	PONCT.W	=
"	PONCT.W	"
hello	N.C.m.s	hello
"	PONCT.W	"
;	PONCT.W	;
10:11:21	D.card.m.p	@card@
$$aa	N.P.x.s	<unknown>
84	D.card.m.p	@card@
12	A.card.m.s	@card@
12	A.card.m.s	@card@
84	A.card.m.s	@card@
$$bb	N.C.m.p	çäbb
"	PONCT.W	"
"	PONCT.W	"
coucou	C.C	coucou
12	A.card.m.s	@card@
coucou	N.C.m.p	coucou
"	PONCT.W	"
"	PONCT.W	"
$$cc	ET	çäcc
"	PONCT.W	"
"	PONCT.W	"
hello	ET	hello
hello	ET	hello
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
;	PONCT.W	;
;	PONCT.W	;
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
51	D.card.f.p	@card@
Fonctions	N.C.f.p	fonction
utilisateur	N.C.m.s	utilisateur
	P+D.def.m.s	c
Description	N.C.f.s	description
d'	P	de
une	D.ind.f.s	un
fonctionnalité	N.C.f.s	fonctionnalité
dépendant	VG	dépendre
éventuellement	ADV.-	éventuellement
de	P	de
paramètres	N.C.m.p	paramètre
et	C.C	et
retournant	VG	retourner
éventuellement	ADV.-	éventuellement
un	D.ind.m.s	un
résultat	N.C.m.s	résultat
	P	à
Définition	N.C.f.s	définition
function	N.C.f.s	function
moyenne($a,$b)	N.P.x.s	Moyenneüçaçb
{	P	à
return	N.C.m.s	return
($a+$b)/2	N.P.x.s	<unknown>
.	PONCT.S	.

;	PONCT.W	;
}	N.C.m.s	}
	P+D.def.m.s	c
Utilisation	N.C.f.s	utilisation
$resultat	N.C.m.s	<unknown>
=	P	à
moyenne(2,4)	N.P.x.s	<unknown>
;	PONCT.W	;
echo	ET	echo
$resultat	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
vaut	V.P.3.s	valoir
3	D.card.m.p	@card@
10:11:21	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	D.card.f.p	@card@
52	D.card.f.p	@card@
Fonctions	N.C.f.p	fonction
utilisateur	N.C.m.s	utilisateur
	P	à
Valeur	N.C.f.s	valeur
de	P	de
retour	N.C.m.s	retour
function	N.C.f.s	function
moyenne($a,$b)	N.P.m.s	Moyenne-Aùçb
{	P+D.def.m.s	c
…	N.C.m.s	…
}	P	à
Typage	N.C.m.s	typage
Typage	N.P.m.s	Typage
faible	A.qual.m.s	faible
faible	A.qual.m.s	faible
de	P	de
de	P	de
PHP	N.P.x.s	Php
PHP	N.P.m.s	Php
:	PONCT.W	:
:	PONCT.W	:
Aucune	D.neg.f.s	aucun
Aucune	D.neg.f.s	aucun
information	N.C.f.s	information
information	N.C.f.s	information
	P	à
Arguments	N.C.m.p	argument
function	N.C.f.s	function
moyenne(	A.qual.f.s	moyenneë
{	N.C.m.s	{
…	N.C.m.s	…
}	N.C.m.s	}
$a	N.P.x.s	<unknown>
,	PONCT.W	,
$b	N.C.m.s	bb
)	PONCT.W	)
Typage	N.P.m.s	Typage
Typage	N.P.m.s	Typage
faible	A.qual.m.s	faible
faible	A.qual.m.s	faible
de	P	de
de	P	de
PHP	N.P.x.s	Php
PHP	N.P.m.s	Php
:	PONCT.W	:
:	PONCT.W	:
Aucune	D.neg.f.s	aucun
Aucune	D.neg.f.s	aucun
information	N.C.f.s	information
information	N.C.f.s	information
10:11:22	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
53	A.card.m.s	@card@
Mode	N.C.m.p	mode
de	P	de
passage	N.C.m.s	passage
des	P+D.def.m.p	du
arguments	N.C.m.p	argument
(	PONCT.W	(
types	N.C.m.p	type
natifs	A.qual.m.p	natif
)	PONCT.W	)
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
function	N.C.f.s	function
permutation($x	A.qual.f.s	permutationçhx
,	PONCT.W	,
$y	N.P.x.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$t	N.C.m.s	<unknown>
=	PONCT.W	=
$x	N.C.m.s	cx
;	PONCT.W	;
Permutation	N.C.f.s	permutation
Permutation	N.C.f.s	permutation
impossible	A.qual.f.s	impossible
impossible	A.qual.f.s	impossible
:	PONCT.W	:
:	PONCT.W	:
$x	N.C.m.s	cx
=	PONCT.W	=
$y	N.P.x.s	<unknown>
;	PONCT.W	;
Passage	N.C.m.s	passage
Passage	N.C.m.s	passage
des	P+D.def.m.p	du
des	P+D.def.m.p	du
arguments	N.C.m.p	argument
arguments	N.C.m.p	argument
$y	N.P.f.s	<unknown>
=	PONCT.W	=
$t	N.C.m.s	<unknown>
;	PONCT.W	;
des	P+D.def.f.p	du
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
fonctions	N.C.f.p	fonction
par	P	par
par	P	par
valeur	N.C.f.s	valeur
valeur	N.C.f.s	valeur
}	P	à
$a	N.P.x.s	<unknown>
=	P	à
12	A.card.m.s	@card@
;	PONCT.W	;
$b	N.C.m.s	bb
=	PONCT.W	=
210	N.card.m.s	@card@
;	PONCT.W	;
$a	ET	ça
echo	ET	echo
"	PONCT.W	"
\$a	N.P.x.s	<unknown>
=	PONCT.W	=
$a	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$a	N.P.x.s	<unknown>
==	V.P.3.s	cevoir
12	D.card.m.p	@card@
12	D.card.m.p	@card@
$b	N.C.m.p	<unknown>
echo	ET	echo
"	PONCT.W	"
\$b	N.C.m.s	çäb
=	PONCT.W	=
$b	N.C.m.s	bb
"	PONCT.W	"
;	PONCT.W	;
$b	N.C.m.s	bb
==	V.P.3.s	cevoir
210	PRO.card.f.p	@card@
210	D.card.f.p	@card@
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
permutation($a	N.C.f.s	permutationça
,	PONCT.W	,
$b	N.C.m.s	bb
)	PONCT.W	)
;	PONCT.W	;
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
$a	ET	ça
echo	ET	echo
"	PONCT.W	"
\$a	N.P.f.s	<unknown>
=	V.P.3.s	être
$a	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$a	N.P.x.s	<unknown>
==	V.P.3.s	cevoir
12	D.card.m.p	@card@
12	D.card.m.p	@card@
$b	N.C.m.p	<unknown>
echo	ET	echo
"	PONCT.W	"
\$b	N.C.m.s	çäb
=	PONCT.W	=
$b	N.C.m.s	bb
"	PONCT.W	"
;	PONCT.W	;
$b	N.C.m.s	bb
==	V.P.3.s	cevoir
210	PRO.card.m.p	@card@
210	PRO.card.m.p	@card@
?	PONCT.S	?

>	N.C.m.s	>
10:11:22	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
54	A.card.m.p	@card@
Mode	N.C.m.p	mode
de	P	de
passage	N.C.m.s	passage
des	P+D.def.m.p	du
arguments	N.C.m.p	argument
(	PONCT.W	(
types	N.C.m.p	type
natifs	A.qual.m.p	natif
)	PONCT.W	)
<	A.qual.m.p	<
?	PONCT.S	?

php	ET	<unknown>
function	N.C.f.s	function
permutation(&$x	A.qual.f.s	permutationççx
,	PONCT.W	,
&$y	N.P.x.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$t	N.C.m.s	<unknown>
=	PONCT.W	=
$x	N.C.m.s	cx
;	PONCT.W	;
$x	N.C.m.p	çx
=	PONCT.W	=
$y	N.P.x.s	<unknown>
;	PONCT.W	;
$y	N.P.x.s	<unknown>
=	PONCT.W	=
$t	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.card.m.s	}
$a	N.P.x.s	<unknown>
=	P	à
12	A.card.m.s	@card@
;	PONCT.W	;
$b	N.C.m.s	bb
=	PONCT.W	=
210	N.card.m.s	@card@
;	PONCT.W	;
$a	D.card.m.p	<unknown>
echo	ET	echo
"	PONCT.W	"
\$a	N.P.x.s	<unknown>
=	V.P.3.s	être
$a	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$a	N.P.x.s	<unknown>
==	V.P.3.s	cevoir
12	D.card.m.p	@card@
12	D.card.m.p	@card@
$b	N.C.m.p	<unknown>
echo	ET	echo
"	PONCT.W	"
\$b	N.P.m.s	<unknown>
=	PONCT.W	=
$b	N.C.m.s	bb
"	PONCT.W	"
;	PONCT.W	;
$b	N.C.m.s	bb
==	V.P.3.s	cevoir
210	PRO.card.m.p	@card@
210	D.card.f.p	@card@
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
permutation($a	N.C.f.s	permutationça
,	PONCT.W	,
$b	N.C.m.s	bb
)	PONCT.W	)
;	PONCT.W	;
permutation	N.C.f.s	permutation
...	PONCT.W	<unknown>
$a	ET	ça
echo	ET	echo
"	PONCT.W	"
\$a	N.P.f.s	<unknown>
=	V.P.3.s	être
$a	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$a	N.P.x.s	<unknown>
==	V.P.3.s	cevoir
210	D.card.m.p	@card@
210	D.card.m.p	@card@
$b	N.C.m.p	<unknown>
echo	ET	echo
"	PONCT.W	"
\$b	N.C.m.s	çäb
=	PONCT.W	=
$b	N.C.m.s	bb
"	PONCT.W	"
;	PONCT.W	;
$b	N.C.m.s	bb
==	V.P.3.s	cevoir
12	A.card.m.s	@card@
12	A.card.m.s	@card@
?	PONCT.S	?

>	N.C.m.s	>
10:11:22	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
Permutation	N.C.f.s	permutation
Permutation	N.C.f.s	permutation
réussie	VK.f.s	réussir
réussie	VK.f.s	réussir
55	D.card.m.p	@card@
Arguments	N.C.m.p	argument
par	P	par
défaut	N.C.m.s	défaut
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
	P	à
Valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
d'	P	de
un	D.ind.m.s	un
argument	N.C.m.s	argument
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
a	V.P.3.s	avoir
pas	ADV.neg	pas
été	VK.m.s	être
défini	VK.m.s	définir
lors	ADV.-	lors
de	P	de
l'	D.def.m.s	le
appel	N.C.m.s	appel
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
function	N.C.f.s	function
bonjour($nom="inconnu")	PONCT.W	bonjourçënomçinnuëç
{	P	à
echo	ET	echo
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
cher	A.qual.m.s	cher
$nom	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
	P	à
Utilisation	N.C.f.s	utilisation
bonjour()	ET	bonjourçë
;	PONCT.W	;
Bonjour	N.P.m.s	Bonjour
Bonjour	N.P.m.s	Bonjour
cher	A.qual.m.s	cher
cher	A.qual.m.s	cher
inconnu	A.qual.m.s	inconnu
inconnu	A.qual.m.s	inconnu
bonjour("Marcel")	N.C.m.s	bonjouräëmarcelçë
;	PONCT.W	;
Bonjour	N.P.m.s	Bonjour
Bonjour	N.P.m.s	Bonjour
cher	A.qual.m.s	cher
cher	A.qual.m.s	cher
Marcel	N.P.m.s	Marcel
Marcel	N.P.m.s	Marcel
10:11:23	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
56	A.card.f.s	@card@
Définition	N.C.f.s	définition
de	P	de
fonctions	N.C.f.p	fonction
fréquemment	ADV.-	fréquemment
utilisées	VK.f.p	utiliser
	P	à
Certaines	D.ind.f.p	certain
fonctions	N.C.f.p	fonction
sont	V.P.3.p	être
utilisées	VK.f.p	utiliser
dans	P	dans
plusieurs	D.ind.m.p	plusieurs
scripts	N.C.m.p	script
PHP	N.P.m.s	Php
	P	à
Comment	ADV.int	comment
faire	VW	faire
pour	P	pour
ne	ADV.neg	ne
pas	ADV.neg	pas
les	CL.obj.3.m.p	le
définir	VW	définir
dans	P	dans
chacune	PRO.ind.f.s	chacun
des	P+D.def.f.p	du
pages	N.C.f.p	page
?	PONCT.S	?

	P+D.def.m.s	c
Utilisation	N.C.f.s	utilisation
de	P	de
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
include("fichier")	N.C.m.s	includeëfichierçë
;	PONCT.W	;
require("fichier")	N.C.m.s	requireëfichierçë
;	PONCT.W	;
include_once("fichier")	N.C.m.s	includeçonceçfichier
;	PONCT.W	;
require_once("fichier")	N.C.m.s	requireçonceçfichierçë
;	PONCT.W	;
	P+D.def.m.s	c
Permet	N.P.m.s	Permet
d'	P	de
inclure	VW	inclure
le	D.def.m.s	le
contenu	N.C.m.s	contenu
de	P	de
fichier	VW	fichier
dans	P	dans
le	D.def.m.s	le
script	N.C.m.s	script
courant	VG	courir
10:11:23	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
57	A.card.m.s	@card@
include	V.P.3.s	includer
et	C.C	et
require	VW	require
Fichier	N.P.m.s	Fichier
Fichier	N.P.m.s	Fichier
mafonction.php	ADV.-	<unknown>
mafonction.php	ADV.-	<unknown>
<	A.qual.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
mafonction($arg)	N.C.m.s	mafonctionçargë
{	P	à
if	N.C.m.s	if
(isset($arg))	N.P.m.s	<unknown>
{	P	à
echo	N.C.m.s	echo
(	PONCT.W	(
"	PONCT.W	"
Vrai	N.P.m.s	Vrai
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
echo	N.C.m.s	echo
(	PONCT.W	(
"	PONCT.W	"
Faux	N.P.m.s	Faux
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	PRO.card.m.p	}
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
10:11:23	D.card.m.p	@card@
Fichier	N.C.m.s	fichier
Fichier	N.P.m.s	Fichier
utilisation1.php	ET	<unknown>
utilisation1.php	A.qual.m.s	<unknown>
…	P+D.def.m.s	c
require("mafonction.php")	N.C.m.s	<unknown>
mafonction(true)	A.qual.m.s	<unknown>
;	PONCT.W	;
…	P	à
Fichier	N.P.m.s	Fichier
Fichier	N.P.m.s	Fichier
utilisation2.php	ET	<unknown>
utilisation2.php	N.C.m.s	<unknown>
…	P+D.def.m.s	c
include("mafonction.php")	N.C.m.s	<unknown>
…	N.C.m.s	…
$var=false	N.P.x.s	<unknown>
;	PONCT.W	;
mafonction($var)	N.C.m.s	mafonctionçarç
;	PONCT.W	;
…	P	à
Fichier	N.P.m.s	Fichier
Fichier	N.P.m.s	Fichier
utilisation3.php	ET	<unknown>
utilisation3.php	N.C.m.s	<unknown>
…	P+D.def.m.s	c
require("mafonction.php")	N.C.m.s	<unknown>
…	P	à
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
58	A.card.m.s	@card@
Définition	N.C.f.s	définition
de	P	de
constantes	N.C.f.p	constante
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
define("ma_constante	A.qual.f.s	defineçmaëconstant
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
à	P	à
tous	PRO.ind.m.p	tout
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
nom	N.C.m.s	nom
nom	N.C.m.s	nom
valeur	V.P.3.s	<unknown>
valeur	N.C.f.s	valeur
Définition	N.C.f.s	définition
Définition	N.C.f.s	définition
d'	P	de
une	PRO.ind.f.s	un
d'	P	de
une	D.ind.f.s	un
constante	N.C.f.s	constante
constante	A.qual.f.s	constant
echo	N.C.f.s	echo
ma_constante	A.qual.f.s	maëconstant
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Utilisation	N.C.f.s	utilisation
Utilisation	N.C.f.s	utilisation
de	P	de
de	P	de
la	D.def.f.s	le
la	D.def.f.s	le
constante	N.C.f.s	constante
constante	A.qual.f.s	constant
10:11:24	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
59	A.card.f.p	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
	N.C.m.s	
Dans	P	dans
certains	D.ind.m.p	certain
cas	N.C.m.p	cas
,	PONCT.W	,
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
ni	C.C	ni
possible	A.qual.m.s	possible
ni	C.C	ni
utile	A.qual.m.s	utile
de	P	de
poursuivre	VW	poursuivre
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
code	N.C.m.s	code
PHP	N.P.m.s	Php
(	PONCT.W	(
variables	N.C.f.p	variable
non	ADV.neg	non
définies	VK.f.p	définir
,	PONCT.W	,
valeurs	N.C.f.p	valeur
erronées	VK.f.p	erroner
,	PONCT.W	,
échec	N.C.m.s	échec
de	P	de
connexion	N.C.f.s	connexion
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
	D.card.m.s	
Arrêt	N.C.m.s	arrêt
brutal	A.qual.m.s	brutal
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
code	N.C.m.s	code
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
die(message)	N.C.m.s	dieämessageç
exit(message)	A.qual.m.s	<unknown>
Envoie	N.C.f.s	envoie
message	N.C.m.s	message
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
et	C.C	et
termine	V.P.3.s	terminer
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
script	N.C.m.s	script
courant	VG	courir
10:11:24	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
60	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
–	N.C.m.s	–
(	PONCT.W	(
Mauvais	N.P.m.s	Mauvais
)	PONCT.W	)
Exemple	N.C.m.s	exemple
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
PHP	N.P.m.s	Php
$html	N.P.x.s	<unknown>
=	P	à
<<<HTML	N.P.m.s	<unknown>
<html>	N.P.x.s	<unknown>
<head>	N.P.m.s	<unknown>
<title>die-exit</title>	N.P.m.s	<unknown>
</head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
HTML	N.P.m.s	<unknown>
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
!	PONCT.S	!

isset($val))	N.C.m.s	issetçëvalçë
{	P	à
HTML	N.P.m.s	<unknown>
non	ADV.neg	non
non	ADV.neg	non
die($html."problèmeHTML	N.C.m.s	<unknown>
val	A.qual.m.s	val
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
/*	PRO.card.m.p	<unknown>
Au	P+D.def.m.s	au
delà	ADV.-	delà
de	P	de
ce	D.dem.m.s	ce
point	N.C.m.s	point
,	PONCT.W	,
fin	N.C.f.s	fin
du	P+D.def.m.s	du
script	N.C.m.s	script
*/	PONCT.W	<unknown>
}	P+D.def.m.s	c
$html	N.P.x.s	<unknown>
.=	PONCT.W	<unknown>
<<<HTML	N.P.m.s	<unknown>
Choix	N.P.m.s	Choix
:	PONCT.W	:
$val	N.P.m.s	<unknown>
</body>	N.P.m.s	<unknown>
</html>	N.P.m.s	<unknown>
10:11:24	D.card.m.p	@card@
<html>	N.C.m.p	<unknown>
HTML	N.P.m.s	<unknown>
<head>	N.P.m.s	<unknown>
<title>die-exit</title>	N.P.m.s	<unknown>
</head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
problème	V.P.3.s	problémer
val	A.qual.m.s	val
valide	A.qual.m.s	valide
valide	A.qual.m.s	valide
…	N.C.m.s	…
…	P	à
Navigateur	N.P.m.s	Navigateur
problème	N.C.m.s	problème
val	A.qual.m.s	val
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
61	A.card.f.s	@card@
Gestion	N.C.f.s	gestion
de	P	de
l'	D.def.m.s	le
affichage	N.C.m.s	affichage
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
	P+D.def.m.s	c
int	ET	int
error_reporting	N.C.m.s	errorçreporting
(	PONCT.W	(
[	PONCT.W	[
int	V.J.3.s	enir
level	ET	level
]	PONCT.W	]
)	PONCT.W	)
Débogage	N.C.m.s	débogage
Constante	N.C.f.s	constante
Ancien	A.qual.m.s	ancien
Ancien	A.qual.m.s	ancien
niveau	N.C.m.s	niveau
niveau	N.C.m.s	niveau
d'	P	de
erreur	N.C.f.s	erreur
d'	P	de
erreur	N.C.f.s	erreur
E_ERROR	N.P.m.s	Eëerror
E_WARNING	N.P.m.s	Eëwarning
Sur	P	sur
Sur	P	sur
un	D.ind.m.s	un
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
serveur	A.qual.m.s	serveur
en	P	en
en	P	en
E_PARSE	N.P.f.s	Eëparse
production	N.C.f.s	production
,	PONCT.W	,
production	N.C.f.s	production
,	PONCT.W	,
toute	A.ind.f.s	tout
toute	D.ind.f.s	tout
E_NOTICE	N.C.f.s	eänotice
erreur	N.C.f.s	erreur
erreur	N.C.f.s	erreur
affichée	VK.f.s	afficher
affichée	VK.f.s	afficher
E_CORE_ERROR	N.P.m.s	Eëcoreçerror
donne	V.P.3.s	donner
donne	V.P.3.s	donner
des	D.ind.m.p	du
des	D.ind.m.p	du
indices	N.C.m.p	indice
indices	A.qual.m.p	indice
sur	P	sur
sur	P	sur
les	D.def.m.p	le
E_CORE_WARNIN	N.C.m.p	eçcoreëwarnin
les	D.def.m.p	le
scripts	N.C.m.p	script
scripts	A.qual.m.p	script
et	C.C	et
et	C.C	et
rend	V.P.3.s	rendre
rend	V.P.3.s	rendre
le	D.def.m.s	le
le	D.def.m.s	le
site	N.C.m.s	site
G	PONCT.W	g
site	V.P.3.s	siter
vulnérable	A.qual.m.s	vulnérable
vulnérable	A.qual.m.s	vulnérable
E_COMPILE_ERR	N.P.m.s	Eëcompileçerr
php.ini	VK.m.s	<unknown>
php.ini	VK.m.s	<unknown>
OR	ET	or
display_errors	ET	displayçerror
display_errors	ET	displayçerror
boolean	ET	boolean
boolean	ET	boolean
E_COMPILE_WAR	N.P.m.s	Eëcompileëwar
NING	N.P.m.s	Ning
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
10:11:24	A.card.m.s	@card@
62	A.card.m.s	@card@
Opérateur	N.C.m.s	opérateur
de	P	de
contrôle	N.C.m.s	contrôle
d'	P	de
erreur	N.C.f.s	erreur
$v	N.P.x.s	<unknown>
=	V.P.3.s	être
file("dummy.txt")	N.C.m.s	<unknown>
or	N.C.m.s	or
die("Problème	N.C.m.s	dieçàproblème
de	P	de
Fichier	N.P.m.s	Fichier
Fichier	N.P.m.s	Fichier
absent	A.qual.m.s	absent
absent	A.qual.m.s	absent
lecture	N.C.f.s	lecture
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
Warning	N.P.m.s	Warning
Warning	N.P.m.s	Warning
:	PONCT.W	:
:	PONCT.W	:
file(dummy.txt)	N.C.m.s	<unknown>
:	PONCT.W	:
file(dummy.txt)	N.C.m.s	<unknown>
:	PONCT.W	:
failed	ET	failed
failed	ET	failed
to	ET	to
to	ET	to
open	ET	open
open	ET	open
stream	ET	stream
:	PONCT.W	:
stream	ET	stream
:	PONCT.W	:
No	N.P.m.s	No
No	N.P.m.s	No
such	ET	such
such	ET	such
file	N.C.f.s	file
file	N.C.f.s	file
or	ET	or
or	ET	or
directory	ET	directory
directory	ET	directory
in	CL.suj.3.m.s	in
in	CL.suj.3.m.s	in
dummy.php	ET	<unknown>
dummy.php	ET	<unknown>
on	CL.suj.3.m.s	on
on	CL.suj.3.m.s	on
line	V.P.3.s	liner
line	N.C.f.s	line
68	A.card.f.s	@card@
68	A.card.m.s	@card@
Problème	N.C.m.s	problème
Problème	N.C.m.s	problème
de	P	de
de	P	de
lecture	N.C.f.s	lecture
lecture	N.C.f.s	lecture
$v	N.C.m.s	<unknown>
=	V.P.3.s	être
@file("dummy.txt")	N.P.x.s	<unknown>
or	N.C.m.s	or
die("Problème	N.C.m.s	dieçàproblème
de	P	de
lecture	N.C.f.s	lecture
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
Problème	N.C.m.s	problème
Problème	N.C.m.s	problème
de	P	de
de	P	de
lecture	N.C.f.s	lecture
lecture	N.C.f.s	lecture
10:11:25	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
63	A.card.m.s	@card@
Développement	ET	développement
objet	N.C.m.s	objet
	P	à
Définition	N.C.f.s	définition
de	P	de
briques	N.C.f.p	brique
logicielles	A.qual.f.p	logiciel
représentant	VG	représenter
un	D.ind.m.s	un
concept	N.C.m.s	concept
,	PONCT.W	,
une	D.ind.f.s	un
idée	N.C.f.s	idée
ou	C.C	ou
une	D.ind.f.s	un
entité	N.C.f.s	entité
ainsi	ADV.-	ainsi
que	C.S	que
leurs	D.poss.f.p	leur
interactions	N.C.f.p	interaction
:	PONCT.W	:
les	D.def.m.p	le
objets	N.C.m.p	objet
	P	à
Un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
une	D.ind.f.s	un
structure	N.C.f.s	structure
de	P	de
données	N.C.f.p	donnée
comprenant	VG	comprendre
également	ADV.-	également
les	D.def.f.p	le
fonctionnalités	N.C.f.p	fonctionnalité
de	P	de
traitement	N.C.m.s	traitement
des	P+D.def.f.p	du
données	N.C.f.p	donnée
	P	à
L'	D.def.m.s	le
objet	N.C.m.s	objet
est	V.P.3.s	être
vu	VK.m.s	voir
au	P+D.def.m.s	au
travers	N.C.m.s	travers
de	P	de
ses	D.poss.f.p	son
spécifications	N.C.f.p	spécification
	P	à
Les	D.def.m.p	le
concepts	N.C.m.p	concept
associés	A.qual.m.p	associé
sont	V.P.3.p	être
:	PONCT.W	:
	P	à
Encapsulation	N.C.f.s	encapsulation
	P	à
Héritage	N.C.m.s	héritage
	P	à
Polymorphisme	N.P.m.s	Polymorphisme
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
1	A.card.m.s	@card@
Classe	N.P.m.s	Classe
	N.C.m.s	
Une	D.ind.f.s	un
classe	N.C.f.s	classe
définit	V.P.3.s	définir
un	D.ind.m.s	un
modèle	N.C.m.s	modèle
,	PONCT.W	,
un	D.ind.m.s	un
moule	N.C.m.s	moule
,	PONCT.W	,
à	P	à
partir	VW	partir
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	P	à
duquel	PRO.rel.m.s	duquel
tous	A.ind.m.p	tous
les	D.def.m.p	le
objets	N.C.m.p	objet
de	P	de
classe	N.C.f.s	classe
seront	V.F.3.p	être
créés	VK.m.p	créer
La	D.def.f.s	le
classe	N.C.f.s	classe
décrit	V.P.3.s	décrire
les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
ainsi	ADV.-	ainsi
que	C.S	que
les	D.def.f.p	le
fonctionnalités	N.C.f.p	fonctionnalité
des	P+D.def.m.p	du
objets	N.C.m.p	objet
La	D.def.f.s	le
classe	N.C.f.s	classe
est	V.P.3.s	être
une	D.ind.f.s	un
vision	N.C.f.s	vision
«	P	à
inerte	A.qual.f.s	inerte
»	N.C.m.s	»
,	PONCT.W	,
une	D.ind.f.s	un
recette	N.C.f.s	recette
de	P	de
cuisine	N.C.f.s	cuisine
,	PONCT.W	,
visant	VG	viser
à	P	à
décrire	VW	décrire
la	D.def.f.s	le
structure	N.C.f.s	structure
et	C.C	et
le	D.def.m.s	le
comportement	N.C.m.s	comportement
des	P+D.def.m.p	du
objets	N.C.m.p	objet
qui	PRO.rel.m.p	qui
seront	V.F.3.p	être
créés	VK.m.p	créer
La	D.def.f.s	le
construction	N.C.f.s	construction
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
génératrice	A.qual.f.s	générateur
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
instanciation	N.C.f.s	instanciation
Les	D.def.m.p	le
objets	N.C.m.p	objet
,	PONCT.W	,
entités	N.C.f.p	entité
«	D.card.f.p	«
vivantes	N.C.f.p	vivant
»	N.C.m.s	»
en	P	en
mémoire	N.C.f.s	mémoire
,	PONCT.W	,
sont	V.P.3.p	être
des	P+D.def.f.p	du
instances	N.C.f.p	instance
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
10:11:29	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
2	A.card.m.s	@card@
Instanciation	N.C.f.s	instanciation
	P	à
La	D.def.f.s	le
classe	N.C.f.s	classe
est	V.P.3.s	être
une	D.ind.f.s	un
description	N.C.f.s	description
«	P	à
inerte	A.qual.f.s	inerte
»	N.C.m.s	»
	N.C.m.s	
Les	D.def.m.p	le
objets	N.C.m.p	objet
doivent	V.P.3.p	devoir
être	VW	être
instanciés	VK.m.p	instancier
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
génératrice	A.qual.f.s	générateur
pour	P	pour
exister	VW	exister
et	C.C	et
devenir	VW	devenir
fonctionnels	N.C.m.p	fonctionnel
	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
la	D.def.f.s	le
classe	N.C.f.s	classe
Animal	N.P.m.s	Animal
$bambi	N.P.m.s	<unknown>
=	ET	=
new	ET	new
Animal()	N.P.m.s	Animalç
;	PONCT.W	;
$scrat	N.C.m.s	cs
=	ET	=
new	ET	new
Animal()	N.P.m.s	Animalç
;	PONCT.W	;
$melman	N.P.m.s	<unknown>
=	ET	=
new	ET	new
Animal()	N.P.m.s	Animalç
;	PONCT.W	;
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
3	A.card.m.s	@card@
Encapsulation	N.C.f.s	encapsulation
	P	à
Procédé	VK.m.s	procéder
consistant	VG	consister
à	P	à
rassembler	VW	rassembler
les	D.def.f.p	le
données	N.C.f.p	donnée
et	C.C	et
les	D.def.m.p	le
traitements	N.C.m.p	traitement
au	P+D.def.m.s	au
sein	N.C.m.s	sein
des	P+D.def.m.p	du
objets	N.C.m.p	objet
	C.C	c
L'	D.def.f.s	le
implémentation	N.C.f.s	implémentation
interne	A.qual.f.s	interne
des	P+D.def.m.p	du
objets	N.C.m.p	objet
est	V.P.3.s	être
cachée	VK.f.s	cacher
	P	à
Les	D.def.m.p	le
objets	N.C.m.p	objet
sont	V.P.3.p	être
vu	VK.m.s	voir
à	P	à
travers	N.C.m.p	travers
leurs	D.poss.f.p	leur
spécifications	N.C.f.p	spécification
	P	à
Les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
et	C.C	et
les	D.def.f.p	le
fonctionnalités	N.C.f.p	fonctionnalité
possèdent	V.P.3.p	posséder
un	D.ind.m.s	un
niveau	N.C.m.s	niveau
de	P	de
visibilité	N.C.f.s	visibilité
et	C.C	et
peuvent	V.P.3.p	pouvoir
éventuellement	ADV.-	éventuellement
être	VW	être
masquées	VK.f.p	masquer
:	PONCT.W	:
	P	à
Public	N.C.m.s	public
	N.C.m.s	
Privé	VK.m.s	priver
	P+D.def.m.s	c
Protégé	VK.m.s	protéger
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
4	A.card.m.s	@card@
Encapsulation	N.C.f.s	encapsulation
	P	à
Les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
des	P+D.def.m.p	du
objets	N.C.m.p	objet
sont	V.P.3.p	être
appelées	VK.f.p	appeler
attributs	N.C.m.p	attribut
	P	à
Les	D.def.f.p	le
fonctionnalités	N.C.f.p	fonctionnalité
des	P+D.def.m.p	du
objets	N.C.m.p	objet
sont	V.P.3.p	être
appelées	VK.f.p	appeler
méthodes	N.C.f.p	méthode
	P	à
Méthodes	N.C.f.p	méthode
habituelles	A.qual.f.p	habituel
:	PONCT.W	:
	P+D.def.m.s	c
Constructeur	N.C.m.s	constructeur
/	PONCT.W	@card@
destructeur	N.C.m.s	destructeur
	P	à
Accesseurs	N.C.m.p	accesseur
/	PONCT.W	@card@
modificateurs	N.C.m.p	modificateur
(	PONCT.W	(
getters	N.C.m.p	getter
/	PONCT.W	@card@
setters	N.C.m.p	setter
)	PONCT.W	)
	P	à
Référence	N.C.f.s	référence
à	P	à
l'	D.def.m.s	le
objet	N.C.m.s	objet
courant	A.qual.m.s	courant
dans	P	dans
la	D.def.f.s	le
description	N.C.f.s	description
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
:	PONCT.W	:
$this	N.P.m.s	<unknown>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
5	A.card.f.s	@card@
Visibilité	N.C.f.s	visibilité
	P+D.def.m.s	c
Publique	N.C.f.s	publique
:	PONCT.W	:
Les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
et	C.C	et
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
sont	V.P.3.p	être
accessibles	A.qual.f.p	accessible
par	P	par
tous	PRO.ind.m.p	tout
	P	à
Protégé	VK.m.s	protéger
:	PONCT.W	:
Les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
et	C.C	et
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
sont	V.P.3.p	être
accessibles	A.qual.f.p	accessible
aux	P+D.def.m.p	au
objets	N.C.m.p	objet
dérivés	VK.m.p	dériver
	P	à
Privé	N.P.x.s	Privé
:	PONCT.W	:
Les	D.def.f.p	le
données	N.C.f.p	donnée
internes	A.qual.f.p	interne
et	C.C	et
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
ne	ADV.neg	ne
sont	V.P.3.p	être
accessibles	A.qual.f.p	accessible
qu'	ADV.-	qu'
aux	P+D.def.m.p	au
objets	N.C.m.p	objet
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
10:11:29	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
6	A.card.m.s	@card@
Héritage	N.C.m.s	héritage
ou	C.C	ou
dérivation	N.C.f.s	dérivation
ou	C.C	ou
extension	N.C.f.s	extension
	P	à
Création	N.C.f.s	création
de	P	de
nouvelles	A.qual.f.p	nouveau
classes	N.C.f.p	classe
à	P	à
partir	VW	partir
du	P+D.def.m.s	du
modèle	N.C.m.s	modèle
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
existante	A.qual.f.s	existant
	P	à
La	D.def.f.s	le
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
possède	V.P.3.s	posséder
tous	A.ind.m.p	tous
les	D.def.m.p	le
attributs	N.C.m.p	attribut
et	C.C	et
méthodes	N.C.f.p	méthode
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
mère	A.qual.f.s	mère
	P	à
La	D.def.f.s	le
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
proposer	VW	proposer
de	D.ind.m.p	de
nouveaux	A.qual.m.p	nouveau
attributs	N.C.m.p	attribut
et	C.C	et
de	D.ind.f.p	de
nouvelles	A.qual.f.p	nouveau
méthodes	N.C.f.p	méthode
ou	C.C	ou
spécialiser	VW	spécialiser
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
Mammifère	N.P.m.s	Mammifère
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
mère	A.qual.f.s	mère
Herbivore	N.P.m.s	Herbivore
Impala	N.P.m.s	Impala
10:11:29	D.card.m.s	@card@
Caribou	N.P.m.s	Caribou
Carnivore	N.P.m.s	Carnivore
Guépard	N.P.m.s	Guépard
Programmation	N.P.m.s	Programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Léopard	N.P.m.s	Léopard
7	A.card.m.s	@card@
Polymorphisme	N.C.m.s	polymorphisme
Mammifère	N.P.m.s	Mammifère
nourriture	N.C.f.s	nourriture
	P+D.def.m.s	c
Choix	N.P.m.s	Choix
dynamique	A.qual.m.s	dynamique
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
qui	PRO.rel.f.s	qui
correspond	V.P.3.s	correspondre
au	P+D.def.m.s	au
type	N.C.m.s	type
réel	A.qual.m.s	réel
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
	P	à
Méthode	N.P.m.s	Méthode
mange()	ET	mangeë
Herbivore	N.P.m.s	Herbivore
plantes	N.C.f.p	plante
Impala	N.P.m.s	Impala
herbe	ET	herbe
Caribou	N.P.m.s	Caribou
mousse	ET	mousse
Carnivore	N.P.m.s	Carnivore
viande	V.P.3.s	viander
Guépard	N.P.m.s	Guépard
impala	V.J.3.s	impaler
Léopard	N.P.m.s	Léopard
impala	V.J.3.s	impaler
	P	à
function	N.C.f.s	function
nourriture(Mammifere	A.qual.f.s	nourritureëmammifere
$m	N.C.m.s	<unknown>
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
$m->mange()	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.card.m.s	}
	N.C.m.s	
$i	N.C.m.s	çi
=	ET	=
new	ET	new
Impala()	N.P.m.s	<unknown>
;	PONCT.W	;
nourriture($i)	N.C.m.s	nourritureççi
;	PONCT.W	;
	ET	
$c	N.C.m.s	cc
=	PONCT.W	=
new	ET	new
Carnivore()	N.C.m.s	carnivoreçà
;	PONCT.W	;
nourriture($c)	N.C.m.s	nourritureçcç
;	PONCT.W	;
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
herbe	A.qual.f.s	herbe
viande	N.C.f.s	viande
8	A.card.m.s	@card@
Développement	ET	développement
objet	N.C.m.s	objet
en	P	en
PHP	N.P.m.s	Php
	P	à
PHP	N.P.m.s	Php
4	A.card.m.s	@card@
	N.C.m.p	
Classes	N.P.f.p	Classes
(	PONCT.W	(
tout	PRO.ind.m.s	tout
est	V.P.3.s	être
public	A.qual.m.s	public
)	PONCT.W	)
	P+D.def.m.s	c
Constructeur	N.C.m.s	constructeur
	P	à
Héritage	N.C.m.s	héritage
	P	à
Méthodes	N.C.f.p	méthode
statiques	A.qual.f.p	statique
implicites	A.qual.f.p	implicite
	P	à
Outils	N.C.m.p	outil
pour	P	pour
la	D.def.f.s	le
linéarisation	N.C.f.s	linéarisation
(	PONCT.W	(
sauvegarde	N.C.f.s	sauvegarde
sur	P	sur
disque	N.C.m.s	disque
)	PONCT.W	)
	P	à
PHP	N.P.m.s	Php
5	A.card.m.s	@card@
	N.C.m.p	
Classes	N.P.m.s	Classes
(	PONCT.W	(
choix	N.C.m.s	choix
public	A.qual.m.s	public
,	PONCT.W	,
protected	N.C.m.s	protected
,	PONCT.W	,
private	N.C.f.s	privat
)	PONCT.W	)
	P+D.def.m.s	c
Constructeur	N.C.m.s	constructeur
et	C.C	et
destructeur	N.C.m.s	destructeur
	P	à
Membres	N.C.m.p	membre
et	C.C	et
méthodes	N.C.f.p	méthode
statiques	A.qual.f.p	statique
	P	à
Classes	N.P.m.s	Classes
et	C.C	et
méthodes	N.C.f.p	méthode
abstraites	VK.f.p	abstraire
	P+D.def.m.s	c
…	N.C.m.s	…
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
9	A.card.m.s	@card@
Déclaration	N.C.f.s	déclaration
Définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
en	P	en
PHPde4classe	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
var	P	var
$madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Attribut	ET	attribut
Attribut	ET	attribut
public	A.qual.m.s	public
Constructeur	N.C.m.s	constructeur
public	A.qual.m.s	public
Référence	N.C.f.s	référence
à	P	à
//	PONCT.W	@card@
Constructeur	N.C.m.s	constructeur
l'	D.def.m.s	le
objet	N.C.m.s	objet
courant	A.qual.m.s	courant
function	N.C.f.s	function
MaClasse($param)	N.P.x.s	<unknown>
{	P	à
$this->madonnee	N.P.x.s	<unknown>
=	PONCT.W	=
$param	N.P.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.s	}
Accès	N.C.m.s	accès
à	P	à
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	N.C.m.s	{
//	PONCT.W	@card@
Méthode	N.P.f.s	Méthode
echo	ET	echo
get_class($this)	N.C.f.s	getëclassçëtë
Méthode	N.P.f.s	Méthode
publique	A.qual.f.s	publique
.	PONCT.W	.
"	PONCT.S	"

contient	V.P.3.s	contenir
"	PONCT.W	"
.$this->madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
}	P	à
Donne	C.S	donne
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
courant	A.qual.m.s	courant
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
10	A.card.m.s	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
en	P	en
PHP	N.P.m.s	Php
4	A.card.f.s	@card@
Inclusion	N.C.f.s	inclusion
de	P	de
la	D.def.f.s	le
définition	N.C.f.s	définition
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
<	N.C.m.s	<
?	PONCT.S	?

php	ADV.-	php
require	VW	require
"	PONCT.W	"
maclasse.php	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
//	PONCT.W	@card@
Nouvel	A.qual.m.s	nouveau
objet	N.C.m.s	objet
$o	N.C.m.s	ço
=	ET	=
new	ET	new
MaClasse(12)	ET	<unknown>
maclasse	N.C.f.s	maclasse
contient	V.P.3.s	contenir
12	A.card.m.s	@card@
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
$o->affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
$o->madonnee	N.C.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
coucou	N.C.m.s	coucou
"	PONCT.W	"
;	PONCT.W	;
Méthode	N.C.f.s	méthode
affiche	V.P.3.s	afficher
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
$o	N.P.m.s	<unknown>
Impossible	A.qual.m.s	impossible
de	P	de
restreindre	VW	restreindre
l'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.m.p	au
attributs	N.C.m.p	attribut
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
11	A.card.m.s	@card@
Héritage	N.C.m.s	héritage
en	P	en
PHP	N.C.m.s	php
4	A.card.m.s	@card@
Héritage	N.C.m.s	héritage
de	P	de
MaClasse	N.P.f.s	Maclasse
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
MaClasseHeritee	N.P.m.s	<unknown>
extends	ET	extend
MaClasse	N.P.f.s	Maclasse
{	P	à
var	P	var
$autredonnee	N.P.f.s	<unknown>
;	PONCT.W	;
function	N.C.f.s	function
MaClasseHeritee($param1	N.P.m.s	<unknown>
,	PONCT.W	,
$param2	N.P.m.s	<unknown>
)	PONCT.W	)
{	P+D.def.m.s	c
Opérateur	N.C.m.s	opérateur
de	P	de
parent::MaClasse($param1)	N.P.x.s	<unknown>
;	PONCT.W	;
résolution	N.C.f.s	résolution
de	P	de
portée	N.C.f.s	portée
$this->autredonnee	N.P.x.s	<unknown>
=	PONCT.W	=
$param2	N.P.x.s	<unknown>
;	PONCT.W	;
(	PONCT.W	(
Paamayim	N.P.m.s	Paamayim
}	N.P.m.s	}
Nekudotayim	N.P.m.s	Nekudotayim
)	PONCT.W	)
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	P	à
MaClasse::affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
Méthode	N.P.m.s	Méthode
MaClasse	N.P.f.s	Maclasse
echo	ET	echo
"	PONCT.W	"
et	C.C	et
"	PONCT.W	"
.get_class($this)	N.P.x.s	<unknown>
du	P+D.def.m.s	du
parent	N.C.m.s	parent
.	PONCT.W	.
"	PONCT.S	"

contient	V.P.3.s	contenir
"	PONCT.W	"
.$this->autredonnee	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
Méthode	N.P.f.s	Méthode
affiche	V.P.3.s	afficher
de	P	de
?	PONCT.S	?

>	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
MaClasse	N.P.m.s	Maclasse
10:11:29	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	D.card.f.p	@card@
12	A.card.m.s	@card@
Méthodes	N.C.f.p	méthode
de	P	de
classe	N.C.f.s	classe
implicites	A.qual.f.p	implicite
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
var	P	var
$madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Attribut	N.P.m.s	Attribut
//	PONCT.W	@card@
Constructeur	N.C.m.s	constructeur
function	N.C.f.s	function
MaClasse($param)	N.P.x.s	<unknown>
{	P	à
$this->madonnee	N.P.x.s	<unknown>
=	PONCT.W	=
$param	N.P.m.s	<unknown>
;	PONCT.W	;
}	P	à
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	N.C.m.s	{
//	PONCT.W	@card@
Méthode	N.P.f.s	Méthode
echo	ET	echo
$this->madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
}	P	à
function	N.C.f.s	function
statique()	A.qual.f.s	statiqueëà
{	N.C.m.s	{
//	PONCT.W	@card@
Méthode	N.P.f.s	Méthode
echo	ET	echo
"	PONCT.W	"
Statique	N.C.f.s	statique
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Méthode	N.C.f.s	méthode
publique	A.qual.f.s	publique
Ne	ADV.neg	ne
fait	V.P.3.s	faire
pas	ADV.neg	pas
référence	N.C.f.s	référence
à	P	à
$this	N.C.m.s	<unknown>
	P	à
Méthode	N.P.f.s	Méthode
statique	A.qual.f.s	statique
(	PONCT.W	(
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
)	PONCT.W	)
13	D.card.f.p	@card@
Méthodes	N.C.f.p	méthode
de	P	de
classe	N.C.f.s	classe
implicites	A.qual.f.p	implicite
Inclusion	N.C.f.s	inclusion
de	P	de
la	D.def.f.s	le
définition	N.C.f.s	définition
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
<	N.C.m.s	<
?	PONCT.S	?

php	ADV.-	php
require	VW	require
"	PONCT.W	"
maclasse.php	ADV.-	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
//	PONCT.W	@card@
Création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
$o	A.qual.m.s	ço
=	PONCT.W	=
new	ET	new
MaClasse(12)	N.P.x.s	<unknown>
;	PONCT.W	;
Méthode	N.C.f.s	méthode
affiche	V.P.3.s	afficher
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
$o	N.P.m.s	<unknown>
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
12	A.card.f.s	@card@
$o->affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
Impossible	A.qual.m.s	impossible
de	P	de
restreindre	VW	restreindre
l'	D.def.m.s	le
accès	N.C.m.s	accès
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
implicitement	ADV.-	implicitement
auxstatique	A.qual.f.s	auxstatique
attributs	N.C.m.p	attribut
MaClasse::statique()	N.P.f.s	<unknown>
;	PONCT.W	;
Statique	N.C.f.s	statique
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
14	A.card.m.s	@card@
Développement	A.card.m.s	développement
objet	N.C.m.s	objet
en	P	en
PHP	N.C.m.s	php
5	A.card.m.s	@card@
A	P	à
partir	VW	partir
de	P	de
maintenant	ADV.-	maintenant
,	PONCT.W	,
développement	N.C.m.s	développement
en	P	en
PHP	N.P.m.s	Php
5	A.card.m.s	@card@
10:11:29	A.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
15	A.card.m.s	@card@
Définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
classeDéclaration	N.C.f.s	classedéclaration
de	P	de
classe	N.C.f.s	classe
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
private	A.qual.f.s	privat
$madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
Attribut	N.C.m.s	attribut
privé	A.qual.m.s	privé
Constructeur	N.C.m.s	constructeur
public	A.qual.m.s	public
public	A.qual.m.s	public
function	N.C.f.s	function
__construct($param)	N.P.x.s	<unknown>
{	P	à
$this->madonnee	N.P.x.s	<unknown>
=	PONCT.W	=
$param	N.P.m.s	<unknown>
;	PONCT.W	;
Référence	N.C.f.s	référence
à	P	à
l'	D.def.m.s	le
objet	N.C.m.s	objet
}	P	à
courant	VG	courir
function	N.C.f.s	function
__destruct()	N.P.m.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
Destruction	N.C.f.s	destruction
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
Destructeur	N.C.m.s	destructeur
public	A.qual.m.s	public
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	P	à
echo	ET	echo
"	PONCT.W	"
madonnee	A.qual.f.s	<unknown>
:	PONCT.W	:
"	PONCT.W	"
Méthode	N.C.f.s	méthode
publique	A.qual.f.s	publique
.$this->madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
par	P	par
défaut	N.C.m.s	défaut
}	N.C.m.s	}
}	N.C.m.s	}
?	PONCT.S	?

>	D.card.m.s	>
Accès	N.C.m.s	accès
à	P	à
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
16	A.card.m.s	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
Inclusion	N.C.f.s	inclusion
de	P	de
la	D.def.f.s	le
définition	N.C.f.s	définition
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
<	N.C.m.s	<
?	PONCT.S	?

php	ADV.-	php
require	VW	require
"	PONCT.W	"
maclasse.php	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
//	PONCT.W	@card@
Nouvel	A.qual.m.s	nouveau
objet	N.C.m.s	objet
$o	N.C.m.s	ço
=	ET	=
new	ET	new
MaClasse(12)	ET	<unknown>
maclasse	N.C.f.s	maclasse
contient	V.P.3.s	contenir
12	A.card.m.s	@card@
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
$o->affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
{	P	à
class	ET	class
Fatal	ET	fatal
MaClasse	N.P.f.s	Maclasse
error	ET	error
:	PONCT.W	:
Cannot	ET	cannot
access	ET	access
private	A.qual.f.s	privat
private	A.qual.f.s	privat
$madonnee	N.P.f.s	<unknown>
;	PONCT.W	;
property	ET	property
MaClasse::$madonnee	N.P.f.s	<unknown>
in	I	in
...	PONCT.W	<unknown>
dummy.php	N.C.m.s	<unknown>
on	CL.suj.3.m.s	on
=line	V.P.3.s	çliner
25	D.card.m.p	@card@
$o->madonnee	A.qual.f.s	<unknown>
"	PONCT.W	"
coucou	N.C.m.p	coucou
"	PONCT.W	"
;	PONCT.W	;
function	N.C.f.s	function
__destruct()	N.P.m.s	<unknown>
{	P	à
Destruction	N.C.f.s	destruction
...	PONCT.W	<unknown>
echo	ET	echo
"	PONCT.W	"
Destruction	N.C.f.s	destruction
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
unset($o)	N.C.m.s	unsetççoë
;	PONCT.W	;
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Méthode	N.C.f.s	méthode
affiche	V.P.3.s	afficher
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
$o	N.C.m.s	ço
L'	D.def.m.s	le
attribut	N.C.m.s	attribut
est	V.P.3.s	être
privé	A.qual.m.s	privé
Destruction	N.C.f.s	destruction
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
$o	N.C.m.s	ço
17	A.card.f.s	@card@
Valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
des	P+D.def.m.p	du
attributs	N.C.m.p	attribut
Attribut	N.P.m.s	Attribut
avec	P	avec
valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
private	A.qual.f.s	privat
$madonnee	N.P.f.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
Défaut	N.C.m.s	défaut
"	PONCT.W	"
;	PONCT.W	;
function	N.C.f.s	function
affecte($val)	N.C.m.s	affecteçvalç
{	P	à
$this->madonnee	N.P.x.s	<unknown>
=	PONCT.W	=
$val	N.P.m.s	<unknown>
;	PONCT.W	;
}	ET	}
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	P+D.def.m.s	c
Nouvel	A.qual.m.s	nouveau
objet	N.C.m.s	objet
echo	ET	echo
"	PONCT.W	"
madonnee	N.C.f.s	madonnee
:	PONCT.W	:
"	PONCT.W	"
.$this->madonnee	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
Affichage	N.C.m.s	affichage
madonnee	V.P.3.s	<unknown>
:	PONCT.W	:
Défaut	N.C.m.s	défaut
$o	N.C.m.s	ço
=	ET	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
Affectation	N.C.f.s	affectation
$o->affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
madonnee	N.C.f.s	madonnee
:	PONCT.W	:
Nouvelle	A.qual.f.s	nouveau
$o->affecte("Nouvelle")	N.P.x.s	<unknown>
;	PONCT.W	;
Affichage	N.C.m.s	affichage
$o->affiche()	N.P.x.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	D.card.m.p	@card@
18	A.card.m.p	@card@
Attributs	N.C.m.p	attribut
et	C.C	et
méthodes	N.C.f.p	méthode
de	P	de
classe	N.C.f.s	classe
	P	à
Mot	N.C.m.s	mot
clé	N.C.f.s	clé
static	A.qual.m.s	static
	P	à
Attributs	N.C.m.p	attribut
et	C.C	et
méthodes	N.C.f.p	méthode
utilisables	A.qual.m.p	utilisable
sans	P	sans
instance	N.C.f.s	instance
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
(	PONCT.W	(
=attributs	N.C.m.p	pattribut
et	C.C	et
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
)	PONCT.W	)
	D.card.m.p	
Attributs	N.C.m.p	attribut
NE	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
PAS	ADV.neg	pas
être	VW	être
accédés	VK.m.p	accéder
depuis	P	depuis
une	D.ind.f.s	un
instance	N.C.f.s	instance
(	PONCT.W	(
$objet->attribut	N.P.x.s	<unknown>
)	PONCT.W	)
	D.card.m.p	
Attributs	N.C.m.p	attribut
partagés	VK.m.p	partager
par	P	par
toutes	A.ind.f.p	tout
les	D.def.f.p	le
instances	N.C.f.p	instance
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
	P	à
Méthodes	N.P.m.s	Méthodes
peuvent	V.P.3.p	pouvoir
être	VW	être
accédés	VK.m.p	accéder
depuis	P	depuis
une	D.ind.f.s	un
instance	N.C.f.s	instance
($objet->methode())	N.P.m.s	<unknown>
	N.C.m.s	
Dans	P	dans
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
,	PONCT.W	,
$this	N.P.m.s	<unknown>
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
disponible	A.qual.f.s	disponible
10:11:29	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.p	@card@
19	A.card.m.p	@card@
Attributs	N.C.m.p	attribut
statiques	A.qual.m.p	statique
Attribut	N.C.m.s	attribut
privé	A.qual.m.s	privé
statique	A.qual.m.s	statique
:	PONCT.W	:
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
être	VW	être
accédé	VK.m.s	accéder
que	ADV.-	que
par	P	par
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
class	ET	class
MaClasse	N.P.m.s	Maclasse
{	P	à
private	A.qual.f.s	privat
static	N.C.m.s	static
$n	ET	än
=	PONCT.W	=
0	N.card.m.s	@card@
;	PONCT.W	;
function	N.C.f.s	function
__construct()	N.P.m.s	<unknown>
{	P	à
Accès	N.C.m.s	accès
à	P	à
l'	D.def.m.s	le
attribut	N.C.m.s	attribut
statique	A.qual.m.s	statique
echo	ET	echo
++MaClasse::$n	N.P.x.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

instance(s)	N.C.m.s	instanceur
"	PONCT.W	"
;	PONCT.W	;
}	P	à
function	N.C.f.s	function
__destruct()	ET	çädestructëë
{	ET	{
echo	ET	echo
"	PONCT.W	"
destruction	N.C.f.s	destruction
"	PONCT.W	"
;	PONCT.W	;
self::$n	N.P.x.s	<unknown>
--	PONCT.W	--
;	PONCT.W	;
}	N.C.m.s	}
1	D.card.m.s	@card@
instance(s)	N.C.m.s	instanceur
}	N.C.m.s	}
instance(s)	N.C.m.s	instanceur
2	A.card.m.s	@card@
$s	N.C.m.p	-s
=	PONCT.W	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
destruction	N.C.f.s	destruction
$tinstance(s)	N.P.m.s	<unknown>
=	PONCT.W	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
2	A.card.m.s	@card@
unset($t)	N.C.f.p	<unknown>
;	PONCT.W	;
Cannot	ET	cannot
access	ET	access
private	ET	privat
property	ET	property
3	D.card.m.p	@card@
instance(s)	ET	instanceësë
Fatal	ET	fatal
error	N.C.m.s	error
:	PONCT.W	:
$u	VK.m.s	cevoir
=	PONCT.W	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
MaClasse::$n	N.P.x.s	Maclassemin
in	CL.suj.3.m.s	in
dummy.php	N.C.m.s	<unknown>
on	CL.suj.3.m.s	on
line	V.P.3.s	liner
37	D.card.m.p	@card@
$v	N.C.m.p	<unknown>
=	PONCT.W	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
10:11:29	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	D.card.f.p	@card@
20	D.card.f.p	@card@
Méthodes	N.C.f.p	méthode
statiques	A.qual.f.p	statique
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
private	A.qual.f.s	privat
static	N.C.m.s	static
$n	ET	än
=	PONCT.W	=
0	A.card.f.s	@card@
;	PONCT.W	;
function	N.C.f.s	function
__construct()	ET	çcconstructëë
{	P	à
echo	ET	echo
++MaClasse::$n	N.P.x.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

instance(s)<br>\n	A.qual.m.s	instanceësçëbrëë
"	PONCT.W	"
;	PONCT.W	;
}	P	à
Méthode	N.C.f.s	méthode
publique	A.qual.f.s	publique
statique	A.qual.f.s	statique
function	N.C.f.s	function
__destruct()	N.P.m.s	<unknown>
{	P	à
MaClasse::$n	N.P.x.s	Maclassemin
--	PONCT.W	--
;	PONCT.W	;
}	ET	}
static	N.C.m.s	static
function	N.C.f.s	function
f($i)	N.C.m.s	fçëië
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Dans	P	dans
f()	N.C.m.s	fäë
:	PONCT.W	:
"	PONCT.W	"
.($i*$i)Appel	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
à	P	à
partir	VW	partir
d'	P	de
une	D.ind.f.s	un
instance	N.C.f.s	instance
}	P	à
instance(s)	N.C.m.s	instanceur
Toléré	VK.m.s	tolérer
1	D.card.m.s	@card@
Dans	P	dans
f()	N.C.m.s	fäë
:	PONCT.W	:
4	D.card.m.p	@card@
$s	N.C.m.p	-s
=	PONCT.W	=
f()	ET	fäë
new	ET	new
:	PONCT.W	:
MaClasse()	N.P.x.s	Maclasseëù
;	PONCT.W	;
Dans	P	dans
9	D.card.m.p	@card@
$s->f(2)	N.P.x.s	<unknown>
;	PONCT.W	;
MaClasse::f(3)Programmation	N.P.x.s	<unknown>
;	PONCT.W	;
10:11:29	D.card.m.p	@card@
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Appel	N.C.m.s	appel
sans	P	sans
instance	N.C.f.s	instance
21	D.card.f.p	@card@
Constantes	N.C.f.p	constante
de	P	de
classe	N.C.f.s	classe
class	ET	class
MaClasse	N.P.f.s	Maclasse
{	P	à
const	N.C.m.s	const
constante	A.qual.f.s	constant
=	PONCT.W	=
"	PONCT.W	"
Valeur	N.C.f.s	valeur
"	PONCT.W	"
;	PONCT.W	;
public	N.C.m.s	public
function	N.C.f.s	function
montre()	N.C.m.s	montreçë
{	P+D.def.m.s	c
echo	N.C.m.s	echo
self::constante	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
Valeur	N.P.m.s	Valeur
$c	N.P.m.s	<unknown>
=	PONCT.W	=
new	ET	new
MaClasse()	N.P.m.s	Maclasseëù
;	PONCT.W	;
Valeur	N.C.f.s	valeur
$c->montre()	N.P.m.s	<unknown>
;	PONCT.W	;
echo	ET	echo
MaClasse::constante	N.P.x.s	<unknown>
;	PONCT.W	;
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Constante	N.C.f.s	constante
publique	A.qual.f.s	publique
de	P	de
classe	N.C.f.s	classe
Accès	N.C.m.s	accès
à	P	à
la	D.def.f.s	le
constante	N.C.f.s	constante
de	P	de
classe	N.C.f.s	classe
depuis	P	depuis
la	D.def.f.s	le
classe	N.C.f.s	classe
Accès	N.C.m.s	accès
à	P	à
la	D.def.f.s	le
constante	N.C.f.s	constante
de	P	de
classe	N.C.f.s	classe
à	P	à
l'	D.def.m.s	le
extérieur	N.C.m.s	extérieur
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
22	D.card.m.p	@card@
Héritage	N.P.m.s	Héritage
class	ET	class
Simple	A.qual.m.s	simple
{	P	à
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Je	CL.suj.1.m.s	je
suis	V.P.1.s	être
Simple	A.qual.m.s	simple
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
class	N.C.m.p	class
Etendue	VK.f.s	etendre
extends	ET	extend
Simple	A.qual.f.s	simple
{	P	à
function	N.C.f.s	function
affiche()	V.P.3.s	affichecer
{	P	à
parent::affiche()	N.C.m.s	<unknown>
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
mais	C.C	mais
aussi	ADV.-	aussi
Etendue	VK.f.s	etendre
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	P+D.def.m.s	c
$s	N.C.m.p	-s
=	PONCT.W	=
new	ET	new
Simple()	N.C.m.s	simpleçà
;	PONCT.W	;
$e	ET	<unknown>
=	PONCT.W	=
new	ET	new
Etendue()	N.P.m.s	Etendueëë
;	PONCT.W	;
Je	CL.suj.1.m.s	je
suis	V.P.1.s	être
Simple	A.qual.m.s	simple
;	PONCT.W	;
$s->affiche()	N.P.x.s	<unknown>
$e->affiche()	N.P.x.s	<unknown>
Je	CL.suj.1.m.s	je
suis	V.P.1.s	être
Simple	A.qual.m.s	simple
;	PONCT.W	;
mais	C.C	mais
aussi	ADV.-	aussi
Etendue	VK.f.s	etendre
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
Classe	N.P.m.s	Classe
simple	V.P.3.s	simpler
Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
publique	A.qual.f.s	publique
Classe	N.P.m.s	Classe
étendue	VK.f.s	étendre
héritant	VG	hériter
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
simple	A.qual.f.s	simple
Surcharge	N.C.f.s	surcharge
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
Appel	N.P.m.s	Appel
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
du	P+D.def.m.s	du
parent	V.P.3.p	parer
23	D.card.f.p	@card@
Assignation	N.C.f.s	assignation
d'	P	de
objets	N.C.m.p	objet
class	ET	class
Point	N.P.m.s	Point
{	P	à
private	A.qual.f.s	privat
$_x	N.P.f.s	<unknown>
;	PONCT.W	;
private	A.qual.f.s	privat
$_y	N.P.x.s	<unknown>
;	PONCT.W	;
public	A.qual.m.s	public
function	N.C.f.s	function
__construct($x=0	N.P.m.s	<unknown>
,	PONCT.W	,
$y=0	N.P.f.s	<unknown>
)	PONCT.W	)
{	N.C.m.p	{
$this->_x	N.P.x.s	<unknown>
=	PONCT.W	=
$x	N.C.m.s	cx
;	PONCT.W	;
$this->_y	N.P.x.s	<unknown>
=	PONCT.W	=
$y	N.P.x.s	<unknown>
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
function	N.C.f.s	function
set($x	N.P.m.s	Setçëx
,	PONCT.W	,
$y	N.P.x.s	<unknown>
)	PONCT.W	)
{	P	à
$this->_x	N.P.x.s	<unknown>
=	PONCT.W	=
$x	N.C.m.s	cx
;	PONCT.W	;
$this->_y	N.P.x.s	<unknown>
=	PONCT.W	=
$y	N.P.x.s	<unknown>
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
function	N.C.f.s	function
toString()	N.C.m.s	tostringçë
{	P+D.def.m.s	c
return	N.C.m.s	return
"	PONCT.W	"
(	PONCT.W	(
{	D.card.m.s	{
$this->_x	N.P.m.s	<unknown>
}	N.C.m.s	}
,	PONCT.W	,
{	P	à
$this->_y	N.P.m.s	<unknown>
}	N.C.m.s	}
)	PONCT.W	)
"	PONCT.W	"
;	PONCT.W	;
}	D.card.m.s	}
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
24	A.card.m.s	@card@
Assignation	N.C.f.p	assignation
d'	P	de
objets	N.C.m.p	objet
$segment	ET	-segment
=	PONCT.W	=
array()	N.C.m.s	arrayçë
;	PONCT.W	;
$point	N.C.m.s	<unknown>
=	PONCT.W	=
new	ET	new
Point()	N.P.m.s	Pointçë
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
$i=10	N.P.f.s	<unknown>
;	PONCT.W	;
$i<20	N.P.m.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P	à
$point->set($i	N.P.x.s	<unknown>
,	PONCT.W	,
$i	N.C.m.s	çi
)	PONCT.W	)
;	PONCT.W	;
$segment[	N.P.x.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
$point	N.C.m.s	<unknown>
;	PONCT.W	;
}	ET	}
foreach	N.C.m.s	foreach
(	PONCT.W	(
$segment	N.C.m.s	<unknown>
as	ET	as
$k	N.P.x.s	<unknown>
=>	N.P.x.s	<unknown>
$p	N.P.x.s	<unknown>
)	PONCT.W	)
echo	ET	echo
"	PONCT.W	"
$k	N.P.x.s	<unknown>
:	PONCT.W	:
{	D.card.m.s	{
$p->toString()}<br>\n	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
$point	N.C.m.s	<unknown>
$segment	N.C.m.s	<unknown>
0	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	N.card.m.s	@card@
,	PONCT.W	,
19	A.card.m.s	@card@
)	PONCT.W	)
0	A.card.m.s	@card@
1	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
19	A.card.m.s	@card@
)	PONCT.W	)
1	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
2	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
2	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
3	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	N.card.m.s	@card@
,	PONCT.W	,
4	N.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
3	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
5	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
4	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
6	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
5	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
7	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
19	A.card.m.s	@card@
)	PONCT.W	)
6	A.card.m.s	@card@
8	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
19	A.card.m.s	@card@
)	PONCT.W	)
7	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
9	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
8	A.card.m.s	@card@
9	A.card.m.s	@card@
19,19	A.card.m.p	@card@
18,18	A.card.m.p	@card@
17,17	A.card.m.p	@card@
16,16	A.card.m.p	@card@
15,15	A.card.m.p	@card@
14,14	A.card.m.p	@card@
13,13	A.card.m.p	@card@
12,12	A.card.m.p	@card@
11,11	A.card.m.p	@card@
10,10	A.card.m.p	@card@
0,0	A.card.m.p	@card@
25	A.card.m.p	@card@
19,19	A.card.m.p	@card@
18,18	A.card.m.p	@card@
17,17	A.card.m.p	@card@
16,16	A.card.m.p	@card@
15,15	A.card.m.p	@card@
14,14	A.card.m.p	@card@
13,13	A.card.m.s	@card@
12,12	A.card.m.s	@card@
11,11	A.card.m.s	@card@
10,10	A.card.m.s	@card@
0,0	A.card.m.s	@card@
Clonage	N.C.m.s	clonage
d'	P	de
objets	N.C.m.p	objet
$segment	ET	-segment
=	P	à
array()	N.C.m.s	arrayçë
;	PONCT.W	;
$point	N.C.m.s	<unknown>
=	PONCT.W	=
new	ET	new
Point()	N.P.m.s	Pointçë
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
$i=10	N.C.f.p	<unknown>
;	PONCT.W	;
$i<20	N.C.m.p	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P	à
$point->set($i	N.P.x.s	<unknown>
,	PONCT.W	,
$i	N.P.f.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$segment[	N.P.x.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
clone	N.C.m.s	clone
$point	N.P.m.s	<unknown>
;	PONCT.W	;
}	ET	}
foreach	N.C.m.s	foreach
(	PONCT.W	(
$segment	N.C.m.s	<unknown>
as	ET	as
$k	N.P.x.s	<unknown>
=>	N.P.x.s	<unknown>
$p	N.P.x.s	<unknown>
)	PONCT.W	)
echo	ET	echo
"	PONCT.W	"
$k	N.P.x.s	<unknown>
:	PONCT.W	:
{	D.card.m.s	{
$p->toString()}<br>\n	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$point	N.C.m.s	<unknown>
$segment	N.C.m.s	<unknown>
0	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
10	N.card.m.s	@card@
,	PONCT.W	,
10	A.card.m.s	@card@
)	PONCT.W	)
0	A.card.m.s	@card@
1	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
11	A.card.m.s	@card@
,	PONCT.W	,
11	A.card.m.s	@card@
)	PONCT.W	)
1	A.card.m.s	@card@
12	A.card.m.s	@card@
)	PONCT.W	)
2	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
12	A.card.m.s	@card@
,	PONCT.W	,
2	A.card.m.s	@card@
13	A.card.m.s	@card@
)	PONCT.W	)
3	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
13	A.card.m.s	@card@
,	PONCT.W	,
4	N.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
14	A.card.m.s	@card@
,	PONCT.W	,
3	A.card.m.s	@card@
14	A.card.m.s	@card@
)	PONCT.W	)
5	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
15	PRO.card.m.p	@card@
,	PONCT.W	,
4	A.card.m.s	@card@
15	A.card.m.s	@card@
)	PONCT.W	)
6	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
16	A.card.m.s	@card@
,	PONCT.W	,
5	A.card.m.s	@card@
16	A.card.m.s	@card@
)	PONCT.W	)
7	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
17	A.card.m.s	@card@
,	PONCT.W	,
17	A.card.m.s	@card@
)	PONCT.W	)
6	A.card.m.s	@card@
8	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
18	A.card.m.s	@card@
,	PONCT.W	,
18	A.card.m.s	@card@
)	PONCT.W	)
7	A.card.m.s	@card@
19	A.card.m.s	@card@
)	PONCT.W	)
9	A.card.m.s	@card@
:	PONCT.W	:
(	PONCT.W	(
19	A.card.m.s	@card@
,	PONCT.W	,
8	A.card.m.s	@card@
9	A.card.m.s	@card@
10,10	A.card.m.p	@card@
11,11	A.card.m.p	@card@
12,12	A.card.m.p	@card@
13,13	A.card.m.p	@card@
14,14	A.card.m.p	@card@
15,15	A.card.m.p	@card@
16,16	A.card.m.s	@card@
17,17	A.card.m.p	@card@
18,18	A.card.m.p	@card@
19,19	N.card.f.s	@card@
10:11:29	A.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	D.card.m.p	@card@
26	A.card.m.p	@card@
Objets	N.C.m.p	objet
comme	P	comme
arguments	N.C.m.p	argument
de	P	de
fonctions	N.C.f.p	fonction
function	N.C.f.s	function
origine($p)	N.C.f.s	origineçpë
{	P+D.def.m.s	c
$p->set(0	N.C.m.s	<unknown>
,	PONCT.W	,
0	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
}	P+D.def.m.s	c
$point	N.C.m.s	<unknown>
=	P	à
new	ET	new
Point(10	N.P.f.s	<unknown>
,	PONCT.W	,
10	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
avant	ADV.-	avant
:	PONCT.W	:
{	D.card.m.s	{
$point->toString()}<br>\n	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
origine($point)	N.C.m.s	origineçpointà
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
apres	N.C.m.p	apre
:	PONCT.W	:
{	N.C.m.s	{
$point->toString()}<br>\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Passage	N.C.m.s	passage
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
avant	A.qual.m.s	avant
:	PONCT.W	:
(	PONCT.W	(
10	PRO.card.m.p	@card@
,	PONCT.W	,
10	A.card.m.s	@card@
)	PONCT.W	)
Point	N.P.x.s	Point
par	P	par
référence	N.C.f.s	référence
apres	A.qual.f.p	apre
:	PONCT.W	:
(	PONCT.W	(
0	PRO.card.m.s	@card@
,	PONCT.W	,
0	A.card.m.s	@card@
)	PONCT.W	)
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	D.card.m.p	@card@
27	A.card.m.p	@card@
Objets	N.C.m.p	objet
dans	P	dans
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
	P	à
Problème	N.C.m.s	problème
:	PONCT.W	:
	D.ind.f.s	
ambiguïté	N.C.f.s	ambiguïté
	P	à
non	ADV.neg	non
évaluable	A.qual.m.s	évaluable
	P	à
Chaîne	N.P.f.s	Chaîne
contenant	VG	contenir
:	PONCT.W	:
	P	à
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
dans	P	dans
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
"	PONCT.W	"
a	V.P.3.s	avoir
:	PONCT.W	:
$a->attribut	N.P.m.s	<unknown>
"	PONCT.W	"
	P	à
le	D.def.m.s	le
résultat	N.C.m.s	résultat
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
dans	P	dans
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
"	PONCT.W	"
résultat	N.C.m.s	résultat
:	PONCT.W	:
$a->calcule()	N.P.x.s	<unknown>
"	PONCT.W	"
	N.C.m.s	
une	D.ind.f.s	un
entrée	N.C.f.s	entrée
de	P	de
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
	P	à
"	PONCT.W	"
valeur	N.C.f.s	valeur
:	PONCT.W	:
$tab['cle	N.C.m.s	ctabç'cle
'	PONCT.W	'
]	PONCT.W	]
"	PONCT.W	"
	N.C.m.s	
une	D.ind.f.s	un
variableProgrammation	N.C.f.s	variableprogrammation
suivie	VK.f.s	suivre
de	P	de
texte	N.C.m.s	texte
(	PONCT.W	(
sans	P	sans
espace	N.C.m.s	espace
)	PONCT.W	)
10:11:29	D.card.m.p	@card@
Web	N.P.m.s	Web
2011-2012	D.card.m.p	@card@
28	D.card.m.p	@card@
Objets	N.C.m.p	objet
dans	P	dans
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
	P	à
Solution	N.C.f.s	solution
:	PONCT.W	:
	P	à
effectuer	VW	effectuer
des	D.ind.f.p	du
concaténations	N.C.f.p	concaténation
(	PONCT.W	(
pénible	N.C.m.s	pénible
)	PONCT.W	)
	P	à
délimiter	VW	délimiter
par	P	par
{	N.C.m.s	{
}	N.C.m.s	}
	P	à
Chaîne	N.P.f.s	Chaîne
contenant	VG	contenir
:	PONCT.W	:
	P	à
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
dans	P	dans
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
"	PONCT.W	"
a	V.P.3.s	avoir
:	PONCT.W	:
{	D.card.m.s	{
$a->attribut	N.P.x.s	<unknown>
}	N.C.m.s	}
"	PONCT.W	"
	N.C.m.s	
le	D.def.m.s	le
résultat	N.C.m.s	résultat
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
dans	P	dans
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
"	PONCT.W	"
résultat	N.C.m.s	résultat
:	PONCT.W	:
{	N.C.m.s	{
$a->calcule()	N.P.x.s	<unknown>
}	N.C.m.s	}
"	PONCT.W	"
	N.C.m.s	
une	D.ind.f.s	un
entrée	N.C.f.s	entrée
de	P	de
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
	P	à
"	PONCT.W	"
valeur	N.C.f.s	valeur
:	PONCT.W	:
{	N.C.m.s	{
$tab['cle	N.C.m.s	ctabç'cle
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
"	PONCT.W	"
	N.C.m.s	
une	D.ind.f.s	un
variableProgrammation	N.C.f.s	variableprogrammation
suivie	VK.f.s	suivre
de	P	de
texte	N.C.m.s	texte
(	PONCT.W	(
sans	P	sans
espace	N.C.m.s	espace
)	PONCT.W	)
10:11:29	D.card.m.p	@card@
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
29	D.card.f.p	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
:	PONCT.W	:
exceptions	N.C.f.p	exception
	P+D.def.m.s	c
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
exception	N.C.f.p	exception
identiques	A.qual.f.p	identique
à	P	à
C++/Java	N.P.x.s	Cuëdava
	P	à
Exception	N.C.f.s	exception
peut	V.P.3.s	pouvoir
être	VW	être
:	PONCT.W	:
	P	à
Jetée	N.P.m.s	Jetée
:	PONCT.W	:
throw	N.C.m.s	throw
	P	à
Essayée	N.P.m.s	Essayé
:	PONCT.W	:
try	ET	try
	P	à
Capturée	N.C.f.s	capturée
:	PONCT.W	:
catch	N.C.m.p	catch
	P	à
Exception	N.C.f.s	exception
jetée	VK.f.s	jeter
:	PONCT.W	:
code	N.C.f.s	code
après	P	après
throw	N.C.m.s	throw
non	ADV.neg	non
exécuté	VK.m.s	exécuter
	P	à
Capture	N.C.f.s	capture
:	PONCT.W	:
1	D.card.m.p	@card@
ou	C.C	ou
plusieurs	D.ind.m.p	plusieurs
blocs	N.C.m.p	bloc
(	PONCT.W	(
selon	P	selon
type	N.C.m.s	type
)	PONCT.W	)
	P	à
Exception	N.C.f.s	exception
non	ADV.neg	non
capturée	VK.f.s	capturer
:	PONCT.W	:
erreur	N.C.f.s	erreur
fatale	A.qual.f.s	fatal
10:11:29	D.card.f.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
30	A.card.f.p	@card@
Utilisation	N.C.f.s	utilisation
des	P+D.def.f.p	du
exceptions	N.C.f.p	exception
try	ET	try
{	P	à
$error	N.P.m.s	<unknown>
=	PONCT.W	=
'	PONCT.W	'
Toujours	ADV.-	toujours
lancer	VW	lancer
cette	D.dem.f.s	ce
erreur	N.C.f.s	erreur
'	PONCT.W	'
;	PONCT.W	;
Déroutement	N.C.m.s	déroutement
throw	ET	throw
new	ET	new
Exception($error)	N.P.m.s	Exceptionç-erç
;	PONCT.W	;
/*	A.ind.m.s	<unknown>
Le	D.def.m.s	le
code	N.C.m.s	code
après	P	après
une	D.ind.f.s	un
exception	N.C.f.s	exception
n'	ADV.neg	ne
est	V.P.3.s	être
Capturer	VW	capturer
Essayer	VW	essayer
Lancer	N.P.m.s	Lancer
jamais	ADV.neg	jamais
exécuté	VK.m.s	exécuter
.	PONCT.S	.

*/	PONCT.W	<unknown>
echo	N.C.m.s	echo
'	PONCT.W	'
Jamais	N.C.m.s	jamais
exécuté	VK.m.s	exécuter
'	PONCT.W	'
;	PONCT.W	;
}	P	à
Capture	N.C.f.s	capture
Exception	N.P.f.s	Exception
:	PONCT.W	:
Toujours	ADV.-	toujours
lancer	VW	lancer
cette	D.dem.f.s	ce
erreur	N.C.f.s	erreur
catch	N.P.m.s	Catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.P.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
Capture	N.C.f.s	capture
Exception	N.P.f.s	Exception
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage(	N.C.m.s	<unknown>
)	PONCT.W	)
.	PONCT.W	.
"	PONCT.S	"

\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
Bonjour	N.P.m.s	Bonjour
le	D.def.m.s	le
monde	N.C.m.s	monde
//	PONCT.W	@card@
Poursuite	N.C.f.s	poursuite
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
echo	ET	echo
'	PONCT.W	'
Bonjour	N.P.m.s	Bonjour
le	D.def.m.s	le
monde	N.C.m.s	monde
'	PONCT.W	'
;	PONCT.W	;
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
31	A.card.m.s	@card@
Classe	N.P.m.s	Classe
Exception	N.C.f.s	exception
PHP	N.P.m.s	Php
5	A.card.m.s	@card@
<	N.C.m.p	<
?	PONCT.S	?

php	ET	<unknown>
class	ET	class
Exception	N.C.f.s	exception
{	P	à
protected	ET	protected
$message	N.C.m.s	çmessage
=	PONCT.W	=
'	PONCT.W	'
'	PONCT.W	'
;	PONCT.W	;
//	PONCT.W	@card@
message	N.C.m.s	message
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
protected	A.qual.f.s	<unknown>
$code	N.P.x.s	<unknown>
=	V.P.3.s	être
0	D.card.m.s	@card@
;	PONCT.W	;
//	PONCT.W	@card@
code	N.C.f.s	code
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
protected	A.qual.f.s	<unknown>
$file	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
fichier	A.qual.m.s	fichier
source	N.C.f.s	source
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
protected	A.qual.f.s	<unknown>
$line	N.P.f.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
ligne	V.P.3.s	ligner
de	P	de
la	D.def.f.s	le
source	N.C.f.s	source
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
function	N.C.f.s	function
__construct(string	N.P.x.s	<unknown>
$message=NULL	N.P.x.s	<unknown>
,	PONCT.W	,
int	PRO.card.m.p	<unknown>
code=0	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
final	N.C.m.s	final
final	A.qual.m.s	final
final	A.qual.m.s	final
final	A.qual.m.s	final
final	A.qual.m.s	final
final	A.qual.m.s	final
function	N.C.f.s	function
function	N.C.f.s	function
function	N.C.f.s	function
function	N.C.f.s	function
function	N.C.f.s	function
function	N.C.f.s	function
function	N.C.f.s	function
getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
message	N.C.m.s	message
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
getCode()	N.P.m.s	Getcodeëë
;	PONCT.W	;
//	PONCT.W	@card@
code	N.C.f.s	code
de	P	de
l'	D.def.f.s	le
exception	N.C.f.s	exception
getFile()	N.C.m.s	getfileçà
;	PONCT.W	;
//	PONCT.W	@card@
nom	N.C.m.s	nom
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
source	N.C.f.s	source
getLine()	N.P.m.s	Getlineëë
;	PONCT.W	;
//	PONCT.W	@card@
ligne	V.P.3.s	ligner
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
source	N.C.f.s	source
getTrace()	N.C.m.s	gettraceçà
;	PONCT.W	;
//	PONCT.W	@card@
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
de	P	de
backtrace()	N.C.m.s	backtraceç
getTraceAsString()	ET	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
chaîne	N.C.f.s	chaîne
de	P	de
trace	N.C.f.s	trace
_toString()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
chaîne	N.C.f.s	chaîne
pour	P	pour
l'	D.def.m.s	le
affichage	N.C.m.s	affichage
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
10:11:29	D.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2011-2012	A.card.m.s	@card@
32	A.card.m.s	@card@
PDO	N.C.m.p	pdo
	P+D.def.m.s	c
PDO	N.P.x.s	Pdo
:	PONCT.W	:
PHP	N.P.m.s	Php
Data	N.P.m.s	Data
Objects	N.C.m.p	object
	P	à
Extension	N.C.f.s	extension
PHP	N.P.m.s	Php
fournissant	VG	fournir
une	D.ind.f.s	un
interface	N.C.f.s	interface
pour	P	pour
accéder	VW	accéder
à	P	à
une	D.ind.f.s	un
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
	P	à
Fournit	V.P.3.s	fournir
une	D.ind.f.s	un
interface	N.C.f.s	interface
d'	P	de
abstraction	N.C.f.s	abstraction
pour	P	pour
l'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.f.p	au
données	N.C.f.p	donnée
	P	à
Ne	ADV.neg	ne
fournit	V.P.3.s	fournir
PAS	ADV.neg	pas
une	D.ind.f.s	un
abstraction	N.C.f.s	abstraction
de	P	de
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
	N.C.m.s	
SQL	N.P.m.s	Sql
spécifique	A.qual.m.s	spécifique
au	P+D.def.m.s	au
moteur	N.C.m.s	moteur
	D.card.f.p	
Fonctionnalités	N.C.f.p	fonctionnalité
présentes	A.qual.f.p	présent
/	PONCT.W	@card@
absentes	A.qual.f.p	absent
	P	à
Interface	N.P.x.s	Interface
orientée	VK.f.s	orienter
objet	N.C.m.s	objet
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
1	A.card.m.s	@card@
Nom	N.P.m.s	Nom
du	P+D.def.m.s	du
driver	VW	driver
Bases	N.P.m.s	Bases
de	P	de
données	N.C.f.p	donnée
supportées	VK.f.p	supporter
Bases	A.qual.f.p	bas
de	P	de
données	N.C.f.p	donnée
supportées	VK.f.p	supporter
PDO_DBLIB	N.C.m.s	pdoëdblib
FreeTDS	N.P.x.s	Freetds
/	PONCT.W	@card@
Microsoft	N.P.m.s	Microsoft
SQL	N.P.m.s	Sql
Server	N.P.m.s	Server
/	PONCT.W	@card@
Sybase	N.P.m.s	Sybase
PDO_FIREBIRD	N.P.x.s	Pdoëfirebird
Firebird/Interbase	N.C.m.s	<unknown>
6	A.card.m.s	@card@
PDO_IBM	N.C.m.s	pdoëibm
IBM	N.P.m.s	Ibm
DB2	N.P.m.s	<unknown>
PDO_INFORMIX	N.C.m.s	pdoçinformix
IBM	N.P.m.s	Ibm
Informix	N.P.m.s	Informix
Dynamic	N.P.m.s	Dynamic
Server	N.P.m.s	Server
PDO_MYSQL	N.P.m.s	Pdoëmysql
MySQL	N.P.m.s	Mysql
3.x/4.x/5.x	D.card.m.p	@card@
PDO_OCI	N.C.m.s	pdoçoci
Oracle	N.P.m.s	Oracle
Call	N.P.m.s	Call
Interface	N.P.m.s	Interface
PDO_ODBC	N.P.x.s	Pdoëodbc
ODBC	N.C.m.s	<unknown>
v3	N.card.f.s	<unknown>
(	PONCT.W	(
IBM	N.P.m.s	Ibm
DB2	N.P.m.s	<unknown>
,	PONCT.W	,
unixODBC	N.P.x.s	<unknown>
et	C.C	et
win32	D.card.m.p	<unknown>
ODBC	N.P.x.s	Odbc
)	PONCT.W	)
PDO_PGSQL	N.P.x.s	Pdoëpgsql
PostgreSQL	N.P.x.s	Postgresql
PDO_SQLITE	N.C.m.s	pdoësqlite
SQLite	N.C.f.s	sqlite
3	A.card.m.s	@card@
et	C.C	et
SQLite	N.C.f.s	sqlite
2	A.card.m.s	@card@
PDO_4D	N.C.m.p	<unknown>
4D	A.card.m.p	<unknown>
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
2	A.card.m.s	@card@
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
3	D.card.f.p	@card@
Classes	N.C.f.p	classe
prédéfinies	VK.f.p	prédéfinir
	P	à
PDO	N.P.x.s	Pdo
:	PONCT.W	:
connexion	N.C.f.s	connexion
PHP	N.P.m.s	Php
/	C.C	@card@
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
	P+D.def.m.s	c
__construct()	N.C.m.s	çäconstructëë
	P+D.def.m.s	c
exec()	N.C.m.s	execçë
,	PONCT.W	,
prepare()	N.C.m.s	prepareçç
,	PONCT.W	,
query()	N.C.m.s	queryçëë
	P+D.def.m.s	c
errorCode()	N.C.m.s	<unknown>
,	PONCT.W	,
errorInfo()	N.C.m.s	<unknown>
	P	à
getAttributes()	N.C.m.s	getattributesçë
,	PONCT.W	,
setAttribute()	N.C.m.s	setattributeëë
	P+D.def.m.s	c
lastInsertId()	N.C.m.s	lastinsertidçë
,	PONCT.W	,
quote()	N.C.m.s	quoteçà
	P+D.def.m.s	c
beginTransaction()	N.C.m.s	begintransactionçë
	P+D.def.m.s	c
commit()	N.C.m.s	commitçë
,	PONCT.W	,
rollBack()	N.C.m.s	rollbackçë
	P+D.def.m.s	c
getAvailableDrivers()	N.C.m.s	<unknown>
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
4	D.card.f.p	@card@
Classes	N.C.f.p	classe
prédéfinies	VK.f.p	prédéfinir
	P	à
PDOStatement	N.C.m.s	pdostatement
:	PONCT.W	:
requête	N.C.f.s	requête
préparée	VK.f.s	préparer
,	PONCT.W	,
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
	P+D.def.m.s	c
bindColumn()	N.C.m.s	bindcolumnçë
,	PONCT.W	,
bindParam()	N.C.m.s	bindparamçë
,	PONCT.W	,
bindValue()	N.C.m.s	bindvalueë
,	PONCT.W	,
closeCursor()	N.C.m.s	closecursorç
	P+D.def.m.s	c
errorCode()	N.C.m.s	<unknown>
,	PONCT.W	,
errorInfo()	N.C.m.s	<unknown>
	P+D.def.m.s	c
fetch()	N.C.m.s	fetchëë
,	PONCT.W	,
fetchAll()	N.C.m.s	fetchallçë
,	PONCT.W	,
fetchColumn()	N.C.m.s	<unknown>
,	PONCT.W	,
fetchObject()	N.C.m.s	fetchobjectçë
,	PONCT.W	,
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
setFetchMode()	N.C.m.s	setfetchmodeë
,	PONCT.W	,
nextRowset()	ET	nextrowsetçë
rowCount()	N.C.m.s	rowcountçë
,	PONCT.W	,
columnCount()	N.C.m.s	<unknown>
,	PONCT.W	,
getColumnMeta()	ET	<unknown>
getAttribute()	N.C.m.s	getattributeëë
,	PONCT.W	,
setAttribute()	N.C.m.s	setattributeëë
execute()	N.C.m.s	executeë
debugDumpParams()	N.C.m.s	<unknown>
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
5	A.card.m.s	@card@
20:39:03	A.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
6	D.card.f.p	@card@
Connexions	N.C.f.p	connexion
et	C.C	et
gestionnaire	N.C.m.s	gestionnaire
de	P	de
connexion	N.C.f.s	connexion
	P	à
Instanciation	N.C.f.s	instanciation
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
PDO	N.P.x.s	Pdo
	N.C.m.s	
$dbh=new	N.P.m.s	<unknown>
PDO(DSN	N.P.x.s	Pdoëdsn
[	PONCT.W	[
,	PONCT.W	,
user	VW	user
[	PONCT.W	[
,	PONCT.W	,
pass	ADV.neg	pass
[	PONCT.W	[
,	PONCT.W	,
options	N.C.f.p	option
]	PONCT.W	]
]	PONCT.W	]
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
	N.C.m.s	
DSN	N.P.x.s	Dsn
:	PONCT.W	:
Data	N.P.m.s	Data
Source	N.C.f.s	source
Name	N.P.m.s	Name
	P	à
nom_du_driver:syntaxe_spécifique_au_driver	VW	nomäduëdriveresyntaxe-spécififauçauç
	P+D.def.m.s	c
Ex	N.P.m.s	Ex
:	PONCT.W	:
mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=ma_base	N.C.m.s	<unknown>
	P	à
user	VW	user
:	PONCT.W	:
nom	N.C.m.s	nom
d'	P	de
utilisateur	N.C.m.s	utilisateur
,	PONCT.W	,
pass	ADV.neg	pass
:	PONCT.W	:
mot	N.C.m.s	mot
de	P	de
passe	N.C.f.s	passe
	D.card.f.p	
options	N.C.f.p	option
:	PONCT.W	:
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
	P	à
spécifiques	A.qual.f.p	spécifique
au	P+D.def.m.s	au
driver	N.C.m.s	driver
	P+D.def.m.s	c
Ex	N.P.m.s	Ex
:	PONCT.W	:
array(PDO::ATTR_PERSISTENT	N.C.m.s	<unknown>
=>	N.P.x.s	<unknown>
true	N.C.f.s	true
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
	D.card.m.s	
Fin	N.C.f.s	fin
de	P	de
connexion	N.C.f.s	connexion
:	PONCT.W	:
$dbh=null	N.P.x.s	<unknown>
;	PONCT.W	;
ou	C.C	ou
unset($dbh)	N.P.x.s	<unknown>
;	PONCT.W	;
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
7	A.card.m.s	@card@
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
8	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
de	P	de
connexion	N.C.f.s	connexion
	P	à
Connexion	N.C.f.s	connexion
par	P	par
construction	N.C.f.s	construction
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
	P	à
Gestion	N.C.f.s	gestion
envisageable	A.qual.f.s	envisageable
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
	P	à
Aucune	PRO.neg.f.s	aucun
	P	à
Fin	N.C.f.s	fin
brutale	A.qual.f.s	brutal
(	PONCT.W	(
exit	N.C.m.s	exit
,	PONCT.W	,
die	N.C.f.s	die
)	PONCT.W	)
	P+D.def.m.s	c
État	N.C.m.s	état
	P	à
Exception	N.C.f.s	exception
	N.C.m.s	
En	P	en
cas	N.C.m.s	cas
d'	P	de
erreur	N.C.f.s	erreur
de	P	de
connexion	N.C.f.s	connexion
	P	à
Objet	N.P.m.s	Objet
PDOException	N.P.x.s	Pdoexception
lancé	VK.m.s	lancer
	P	à
PDOException	N.C.f.s	pdoexception
hérite	V.P.3.s	hériter
de	P	de
Exception	N.C.f.s	exception
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
9	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
de	P	de
connexion	N.C.f.s	connexion
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
try	ET	try
{	P	à
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=h	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=db	N.C.m.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
$user	N.P.m.s	<unknown>
,	PONCT.W	,
$pass	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
…	D.card.m.s	…
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
PDOException	N.C.f.s	pdoexception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
Erreur	N.C.f.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()."<br/>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
die()	N.C.m.s	dieçà
;	PONCT.W	;
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
10	A.card.f.p	@card@
Gestion	N.C.f.p	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
(	PONCT.W	(
hormis	P	hormis
connexion	N.C.f.s	connexion
)	PONCT.W	)
	P	à
PDO::ERRMODE_SILENT	N.C.m.s	<unknown>
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
)	PONCT.W	)
	P	à
Mode	N.P.m.s	Mode
silencieux	A.qual.m.s	silencieux
,	PONCT.W	,
mise	N.C.f.s	mise
en	P	en
place	N.C.f.s	place
d'	P	de
un	D.ind.m.s	un
code	N.C.m.s	code
d'	P	de
erreur	N.C.f.s	erreur
	P+D.def.m.s	c
PDO	N.P.x.s	Pdo
:	PONCT.W	:
errorCode()	N.C.m.s	<unknown>
/	PONCT.W	@card@
errorInfo()	N.C.m.s	<unknown>
	P+D.def.m.s	c
PDOStatement	N.C.m.s	pdostatement
:	PONCT.W	:
errorCode()	N.C.m.s	<unknown>
/	PONCT.W	@card@
errorInfo()	N.C.m.s	<unknown>
	P+D.def.m.s	c
PDO::ERRMODE_WARNING	N.P.x.s	<unknown>
	P	à
Mise	VK.f.s	mettre
en	P	en
place	N.C.f.s	place
du	P+D.def.m.s	du
code	N.C.m.s	code
d'	P	de
erreur	N.C.f.s	erreur
	P+D.def.m.s	c
Émission	N.C.f.s	émission
d'	P	de
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
de	P	de
type	N.C.m.s	type
E_WARNING	N.P.x.s	Eëwarning
	P+D.def.m.s	c
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
	P	à
Mise	VK.f.s	mettre
en	P	en
place	N.C.f.s	place
du	P+D.def.m.s	du
code	N.C.m.s	code
d'	P	de
erreur	N.C.f.s	erreur
	P+D.def.m.s	c
Objet	N.P.m.s	Objet
PDOException	N.P.x.s	Pdoexception
lancé	VK.m.s	lancer
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
11	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
(	PONCT.W	(
hormis	P	hormis
connexion	N.C.f.s	connexion
)	PONCT.W	)
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
try	ET	try
{	P	à
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=h	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=db	N.C.m.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
$user	N.P.m.s	<unknown>
,	PONCT.W	,
$pass	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$dbh->setAttribute(PDO::ATTR_ERRMODE	N.P.m.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
…	D.card.m.s	…
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
PDOException	N.C.f.s	pdoexception
$e	N.P.x.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
Erreur	N.C.f.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()."<br/>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
die()	N.C.m.s	dieçà
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
12	A.card.m.s	@card@
Gestion	N.C.f.p	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
:	PONCT.W	:
code	N.C.m.s	code
d'	P	de
erreur	N.C.f.s	erreur
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$pdo	N.P.x.s	<unknown>
=	ET	=
new	ET	new
PDO("mysql:host=localhost")	N.P.x.s	Pdoëo
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->query("COUCOU")	N.P.x.s	<unknown>
;	PONCT.W	;
Code	N.P.m.s	Code
SQLSTATE	N.P.m.s	Sqlstate
if	ET	if
($pdo->errorCode())	N.P.m.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
ERREUR	N.P.f.s	Erreur
!	PONCT.S	!

!\n	PRO.ind.m.s	çän
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
<pre>\n	A.qual.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Code	N.C.m.s	code
erreur	N.C.f.s	erreur
spécifique	A.qual.f.s	spécifique
var_dump($pdo->errorInfo())	N.P.m.s	Varädumpççpdo-ùerrorinfoë
;	PONCT.W	;
du	P+D.def.m.s	du
driver	VW	driver
echo	ET	echo
"	PONCT.W	"
</pre>\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
ERREUR	N.P.m.s	Erreur
!	PONCT.S	!

!	PONCT.S	!

}	P+D.def.m.s	c
array(3)	N.C.m.s	arrayç-
{	P	à
Chaîne	N.P.f.s	Chaîne
erreur	N.C.f.s	erreur
spécifique	A.qual.f.s	spécifique
[	PONCT.W	[
0]=>	D.card.m.s	<unknown>
string(5)	N.C.m.s	string-là
"	PONCT.W	"
42000	N.card.m.s	@card@
"	PONCT.W	"
au	P+D.def.m.s	au
driver	N.C.m.s	driver
[	PONCT.W	[
1]=>	D.card.m.s	1ëëë
int(1064)	N.C.m.s	<unknown>
[	PONCT.W	[
2]=>	N.card.m.s	2ëç
string(47)	A.card.f.p	<unknown>
"	PONCT.W	"
Erreur	N.C.f.s	erreur
de	P	de
syntaxe	N.C.m.s	syntaxe
près	ADV.-	près
de	P	de
'	PONCT.W	'
COUCOU	N.P.f.s	Coucou
'	PONCT.W	'
à	P	à
la	D.def.f.s	le
ligne	N.C.f.s	ligne
1	A.card.f.s	@card@
"	PONCT.W	"
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.f.p	@card@
13	A.card.m.s	@card@
Gestion	N.C.f.p	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
:	PONCT.W	:
exceptions	N.C.f.p	exception
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
try	ET	try
{	P	à
$pdo	N.P.x.s	<unknown>
=	ET	=
new	ET	new
PDO("mysql:host=localhost")	N.P.x.s	Pdoëo
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
Code	N.P.m.s	Code
erreur	N.C.f.s	erreur
;	PONCT.W	;
spécifique	A.qual.m.s	spécifique
du	P+D.def.m.s	du
driver	N.C.m.s	driver
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->query("COUCOU")	N.P.x.s	<unknown>
;	PONCT.W	;
}	ET	}
catch	ET	catch
Code	N.P.m.s	Code
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	P	à
Chaîne	N.P.f.s	Chaîne
erreur	N.C.f.s	erreur
spécifique	A.qual.f.s	spécifique
SQLSTATE	N.P.m.s	Sqlstate
au	P+D.def.m.s	au
driver	N.C.m.s	driver
echo	N.C.m.s	echo
"	PONCT.W	"
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
}	P+D.def.m.s	c
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
SQLSTATE[42000	N.P.f.s	<unknown>
]	PONCT.W	]
:	PONCT.W	:
Syntax	ET	syntax
error	ET	error
or	ET	or
access	ET	access
violation	N.C.f.s	violation
:	PONCT.W	:
1064	D.card.f.p	@card@
Erreur	N.C.f.s	erreur
de	P	de
syntaxe	N.C.m.s	syntaxe
près	ADV.-	près
de	P	de
'	PONCT.W	'
COUCOU	N.P.f.s	Coucou
'	PONCT.W	'
à	P	à
la	D.def.f.s	le
ligne	N.C.f.s	ligne
1	A.card.f.s	@card@
20:39:03	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
14	A.card.m.s	@card@
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
15	A.card.m.s	@card@
Exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
	P+D.def.m.s	c
PDOStatement	N.C.m.s	pdostatement
PDO::query	N.P.m.s	<unknown>
(	PONCT.W	(
string	ET	string
statement	ADV.-	statement
)	PONCT.W	)
Résultat	N.C.m.s	résultat
de	P	de
requête	N.C.f.s	requête
Requête	VK.f.s	requêter
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
try	ET	try
{	P	à
$pdo	N.P.x.s	<unknown>
=	ET	=
new	ET	new
PDO("mysql:host=localhost")	N.P.x.s	Pdoëo
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	P	à
$pdo->query("SELECT	N.C.m.s	çpdo-çqueryçsect
*	N.C.m.p	*
FROM	N.P.m.s	From
clients	N.C.m.p	client
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	N.C.m.s	echo
"	PONCT.W	"
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
16	A.card.m.s	@card@
Exploitation	N.C.f.s	exploitation
des	P+D.def.m.p	du
résultats	N.C.m.p	résultat
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
	P+D.def.m.s	c
Récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
ligne	V.P.3.s	ligner
à	P	à
ligne	N.C.f.s	ligne
	N.C.m.s	
Une	D.ind.f.s	un
ligne	N.C.f.s	ligne
peut	V.P.3.s	pouvoir
être	VW	être
:	PONCT.W	:
	P	à
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
indexé	A.qual.m.s	indexé
	P	à
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
	P	à
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
mixte	A.qual.m.s	mixte
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
)	PONCT.W	)
	N.C.m.s	
un	D.ind.m.s	un
objet	N.C.m.s	objet
anonyme	A.qual.m.s	anonyme
	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
définie	VK.f.s	définir
par	P	par
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
	P+D.def.m.s	c
Récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
d'	P	de
une	D.ind.f.s	un
colonne	N.C.f.s	colonne
20:39:03	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
17	A.card.m.s	@card@
	P	à
Parcourir	VW	parcourir
le	D.def.m.s	le
résultat	N.C.m.s	résultat
de	P	de
la	D.def.f.s	le
requête	N.C.f.s	requête
Parcours	N.P.m.s	Parcours
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
SELECT	N.P.f.s	Select
*	N.C.m.s	*
Résultat	N.C.m.s	résultat
de	P	de
requête	N.C.f.s	requête
FROM	N.P.m.s	From
morceau	N.C.m.s	morceau
ORDER	N.P.m.s	Order
BY	N.P.m.s	By
mor_id	ET	morçid
Curseur	N.P.m.s	Curseur
interne	V.P.3.s	interner
+--------+------------------------------------+	P	----------------------------------------
|	D.card.m.s	|
mor_id	N.C.m.s	morçid
|	P+D.def.m.s	c
mor_nom	N.C.m.s	morçnom
|	P	à
+--------+------------------------------------+	P	----------------------------------------
|	N.C.m.s	|
872	N.card.m.s	@card@
|	N.C.m.s	|
With	N.P.m.s	With
A	P	à
Little	N.P.m.s	Little
Help	N.P.m.s	Help
From	N.P.m.s	From
My	N.P.m.s	My
Friends	N.P.m.s	Friends
|	V.P.3.s	être
|	N.C.m.s	|
873	N.card.f.s	@card@
|	P	à
The	ET	the
Letter	N.P.m.s	Letter
|	N.C.m.s	|
|	N.C.m.s	|
874	A.card.m.s	@card@
|	P	à
Marjorine	N.P.f.s	Marjorine
|	N.C.m.s	|
|	N.C.m.s	|
875	D.card.m.p	@card@
|	N.C.m.p	|
Midnight	N.P.m.s	Midnight
Rider	N.P.m.s	Rider
|	N.P.m.s	|
|	N.C.m.s	|
876	N.card.m.s	@card@
|	P	à
You	N.P.m.s	You
Are	N.P.m.s	Are
So	N.P.m.s	So
Beautiful	N.P.m.s	Beautiful
|	N.C.m.s	|
|	N.C.m.s	|
877	N.card.m.s	@card@
|	P	à
Feelin	N.P.m.s	Feelin
'	PONCT.W	'
Allright	N.P.m.s	<unknown>
|	N.P.m.s	|
|	N.C.m.s	|
878	N.card.m.s	@card@
|	P	à
Cry	N.P.m.s	Cry
Me	N.C.m.s	me
A	P	à
River	N.P.m.s	River
|	N.P.m.s	|
...	PONCT.S	<unknown>
20:39:03	N.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2012-2013	A.card.m.s	@card@
18	A.card.m.s	@card@
Exploitation	N.C.f.s	exploitation
des	P+D.def.m.p	du
résultats	N.C.m.p	résultat
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
1	A.card.m.s	@card@
)	PONCT.W	)
try	ET	try
{	P+D.def.m.s	c
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	P	à
$pdo->query("SELECT	N.C.m.s	çpdo-çqueryçsect
name	A.qual.m.s	name
FROM	N.P.m.s	From
user	VW	user
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdostat->setFetchMode(PDO::FETCH_ASSOC)	N.P.x.s	<unknown>
;	PONCT.W	;
foreach	ET	foreach
(	PONCT.W	(
$pdostat	N.P.m.s	<unknown>
as	ET	as
$ligne	N.P.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
<p>	ET	<unknown>
"	PONCT.W	"
.	PONCT.S	.

$ligne['name	N.C.m.s	çligneç'name
'	PONCT.W	'
]	PONCT.W	]
.	PONCT.S	.

"	PONCT.W	"
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	N.C.m.s	echo
"	PONCT.W	"
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
19	A.card.m.s	@card@
Exploitation	N.C.f.s	exploitation
des	P+D.def.m.p	du
résultats	N.C.m.p	résultat
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
2	N.card.m.s	@card@
)	PONCT.W	)
try	ET	try
{	P+D.def.m.s	c
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	P	à
$pdo->query("SELECT	N.C.m.s	çpdo-çqueryçsect
name	A.qual.m.s	name
FROM	N.P.m.s	From
user	VW	user
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
foreach	A.qual.m.s	foreach
(	PONCT.W	(
$pdostat->fetchAll(PDO::FETCH_ASSOC)	N.P.x.s	<unknown>
as	ET	as
$ligne	N.P.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
<p>	ET	<unknown>
"	PONCT.W	"
.	PONCT.S	.

$ligne['name	N.C.m.s	çligneç'name
'	PONCT.W	'
]	PONCT.W	]
.	PONCT.S	.

"	PONCT.W	"
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	N.C.m.s	echo
"	PONCT.W	"
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
20	A.card.m.s	@card@
Exploitation	N.C.f.s	exploitation
des	P+D.def.m.p	du
résultats	N.C.m.p	résultat
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
3	N.card.m.s	@card@
)	PONCT.W	)
try	ET	try
{	P+D.def.m.s	c
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	P	à
$pdo->query("SELECT	N.C.m.s	çpdo-çqueryçsect
name	A.qual.m.s	name
FROM	N.P.m.s	From
user	VW	user
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
$ligne	N.P.m.s	<unknown>
=	PONCT.W	=
$pdostat->fetch(PDO::FETCH_ASSOC))	N.P.x.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
<p>	ET	<unknown>
"	PONCT.W	"
.	PONCT.S	.

$ligne['name	N.C.m.s	çligneç'name
'	PONCT.W	'
]	PONCT.W	]
.	PONCT.S	.

"	PONCT.W	"
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	N.C.m.s	echo
"	PONCT.W	"
ERREUR	N.C.m.s	erreur
:	PONCT.W	:
"	PONCT.W	"
.$e->getMessage()	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	D.card.m.p	@card@
21	A.card.m.p	@card@
Modes	N.C.m.p	mode
de	P	de
récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
(	PONCT.W	(
1	A.card.m.s	@card@
)	PONCT.W	)
	N.C.m.s	
PDO::FETCH_ASSOC	N.P.x.s	<unknown>
	P	à
retourner	VW	retourner
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
indexé	VK.m.s	indexer
par	P	par
les	D.def.m.p	le
noms	N.C.m.p	nom
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
comme	C.S	comme
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
retournées	VK.f.p	retourner
dans	P	dans
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
correspondant	A.qual.m.s	correspondant
.	PONCT.S	.

Si	C.S	si
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
contient	V.P.3.s	contenir
de	D.ind.f.p	de
multiples	A.qual.f.p	multiple
colonnes	N.C.f.p	colonne
avec	P	avec
le	D.def.m.s	le
même	A.qual.m.s	même
nom	N.C.m.s	nom
,	PONCT.W	,
PDO::FETCH_ASSOC	N.P.m.s	<unknown>
retourne	V.P.3.s	retourner
une	D.ind.f.s	un
seule	A.ind.f.s	seul
valeur	N.C.f.s	valeur
par	P	par
nom	N.C.m.s	nom
de	P	de
colonne	N.C.f.s	colonne
.	PONCT.S	.

	P	à
PDO::FETCH_NUM	N.P.x.s	<unknown>
	P	à
retourner	VW	retourner
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
indexé	VK.m.s	indexer
par	P	par
le	D.def.m.s	le
numéro	N.C.m.s	numéro
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
comme	C.S	comme
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
retournées	VK.f.p	retourner
dans	P	dans
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
correspondant	VG	correspondre
,	PONCT.W	,
en	P	en
commençant	VG	commencer
à	P	à
0	N.card.m.s	@card@
.	PONCT.S	.

20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.p	@card@
22	A.card.m.s	@card@
Modes	N.C.m.p	mode
de	P	de
récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
(	PONCT.W	(
2	A.card.m.s	@card@
)	PONCT.W	)
	P	à
PDO::FETCH_BOTH	N.P.x.s	<unknown>
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
)	PONCT.W	)
	P	à
retourner	VW	retourner
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
indexé	VK.m.s	indexer
par	P	par
les	D.def.m.p	le
noms	N.C.m.p	nom
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
ainsi	ADV.-	ainsi
que	C.S	que
leurs	D.poss.m.p	leur
numéros	N.C.m.p	numéro
,	PONCT.W	,
comme	C.S	comme
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
retournées	VK.f.p	retourner
dans	P	dans
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
correspondant	VG	correspondre
,	PONCT.W	,
en	P	en
commençant	VG	commencer
à	P	à
0	N.card.m.s	@card@
.	PONCT.S	.

	P	à
PDO::FETCH_OBJ	N.P.x.s	<unknown>
	P	à
retourner	VW	retourner
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
dans	P	dans
un	D.ind.m.s	un
objet	N.C.m.s	objet
avec	P	avec
les	D.def.m.p	le
noms	N.C.m.p	nom
de	P	de
propriétés	N.C.f.p	propriété
correspondant	VG	correspondre
aux	P+D.def.m.p	au
noms	N.C.m.p	nom
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
comme	C.S	comme
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
retournées	VK.f.p	retourner
dans	P	dans
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
.	PONCT.S	.

20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.p	@card@
23	A.card.m.p	@card@
Modes	N.C.m.p	mode
de	P	de
récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
(	PONCT.W	(
3	N.card.m.s	@card@
)	PONCT.W	)
	P	à
PDO::FETCH_BOUND	N.P.x.s	Pdo-
	P	à
retourner	VW	retourner
true	N.C.f.s	true
et	C.C	et
assigner	VW	assigner
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
du	P+D.def.m.s	du
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
dans	P	dans
les	D.def.f.p	le
variables	N.C.f.p	variable
PHP	N.P.m.s	Php
auxquelles	P+PRO.rel.3.f.p	auquel
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
liées	VK.f.p	lier
avec	P	avec
la	D.def.f.s	le
méthode	N.C.f.s	méthode
PDOStatement::bindParam()	N.P.m.s	<unknown>
ou	C.C	ou
la	D.def.f.s	le
méthode	N.C.f.s	méthode
PDOStatement::bindColumn(	N.P.m.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

	P	à
PDO::FETCH_CLASS	N.P.x.s	<unknown>
|	P	à
PDO::FETCH_CLASSTYPE	N.P.x.s	<unknown>
	P	à
retourner	VW	retourner
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
instance	N.C.f.s	instance
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
demandée	VK.f.s	demander
,	PONCT.W	,
liant	VG	lier
les	D.def.f.p	le
colonnes	N.C.f.p	colonne
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
nommées	VK.f.p	nommer
dans	P	dans
la	D.def.f.s	le
classe	N.C.f.s	classe
.	PONCT.S	.

Nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
=	V.P.3.s	être
1ère	A.ord.f.s	1er
colonne	V.P.3.s	colonner
.	PONCT.S	.

20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.p	@card@
24	A.card.m.p	@card@
Modes	N.C.m.p	mode
de	P	de
récupération	N.C.f.s	récupération
des	P+D.def.f.p	du
données	N.C.f.p	donnée
(	PONCT.W	(
4	D.card.m.p	@card@
)	PONCT.W	)
	P	à
PDO::FETCH_INTO	N.P.x.s	<unknown>
	N.C.m.s	
met	V.P.3.s	mettre
à	P	à
jour	N.C.m.s	jour
une	D.ind.f.s	un
instance	N.C.f.s	instance
existante	A.qual.f.s	existant
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
demandée	VK.f.s	demander
,	PONCT.W	,
liant	VG	lier
les	D.def.f.p	le
colonnes	N.C.f.p	colonne
du	P+D.def.m.s	du
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
aux	P+D.def.m.p	au
noms	N.C.m.p	nom
des	P+D.def.f.p	du
propriétés	N.C.f.p	propriété
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
.	PONCT.S	.

	P	à
PDO::FETCH_LAZY	N.P.x.s	<unknown>
	P	à
retourner	VW	retourner
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
en	P	en
tant	ADV.-	tant
qu'	C.S	que
objet	N.C.m.s	objet
avec	P	avec
les	D.def.m.p	le
noms	N.C.m.p	nom
des	P+D.def.m.p	du
attributs	N.C.m.p	attribut
correspondant	VG	correspondre
aux	P+D.def.m.p	au
noms	N.C.m.p	nom
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
retournées	VK.f.p	retourner
dans	P	dans
le	D.def.m.s	le
jeu	N.C.m.s	jeu
de	P	de
résultats	N.C.m.p	résultat
.	PONCT.S	.

	P	à
PDO::FETCH_LAZY	N.P.x.s	<unknown>
crée	V.P.3.s	créer
les	D.def.m.p	le
noms	N.C.m.p	nom
des	P+D.def.m.p	du
attributs	N.C.m.p	attribut
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
comme	C.S	comme
ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
rencontrés	VK.m.p	rencontrer
.	PONCT.S	.

20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
25	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
avec	P	avec
PDO::FETCH_CLASS	N.P.x.s	<unknown>
$stmt	N.P.x.s	<unknown>
=	P	à
$pdo->query(<<<SQL	N.C.m.s	çpdo-çqueryçql
SELECT	N.P.m.s	Select
id	ET	id
,	PONCT.W	,
name	N.C.m.s	name
FROM	N.P.m.s	From
artist	V.P.3.s	<unknown>
WHERE	N.P.m.s	Where
id	ET	id
=	V.P.3.s	être
12	A.card.m.s	@card@
SQL	N.C.m.p	sql
)	PONCT.W	)
;	PONCT.W	;
$stmt->setFetchMode(PDO::FETCH_CLASS	N.P.x.s	<unknown>
,	PONCT.W	,
'	PONCT.W	'
Artist	N.P.m.s	Artist
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
(	PONCT.W	(
$object	N.C.m.s	çobject
=	PONCT.W	=
$stmt->fetch())	N.P.m.s	<unknown>
!	PONCT.S	!

==	V.P.3.s	cevoir
false	N.C.f.s	false
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
$object	N.P.x.s	<unknown>
;	PONCT.W	;
Instancie	N.C.f.s	instancie
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Artist	N.P.m.s	Artist
}	P	à
dont	PRO.rel.m.s	dont
les	D.def.m.p	le
attributs	N.C.m.p	attribut
sont	V.P.3.p	être
supposés	VK.m.p	supposer
être	VW	être
id	A.qual.m.s	id
et	C.C	et
name	N.C.m.s	name
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
26	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
	P+D.def.m.s	c
Déroulement	N.C.m.s	déroulement
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
SQL	N.P.m.s	Sql
1	A.card.f.s	@card@
.	PONCT.S	.

2	A.card.m.s	@card@
.	PONCT.S	.

3	A.card.m.s	@card@
.	PONCT.S	.

4	A.card.m.s	@card@
.	PONCT.S	.

	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	P	à
Analyse	N.P.m.s	Analyse
Compilation	N.C.f.s	compilation
Optimisation	N.C.f.s	optimisation
Exécution	N.C.f.s	exécution
Exécution	N.C.f.s	exécution
répétée	VK.f.s	répéter
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
:	PONCT.W	:
1+2+3+4	D.card.m.p	@card@
Préparation	N.C.f.s	préparation
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
:	PONCT.W	:
1+2+3	D.ind.f.s	@card@
Exécution	N.C.f.s	exécution
répétée	VK.f.s	répéter
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
préparée	A.qual.f.s	préparé
:	PONCT.W	:
4	D.card.f.p	@card@
Préparation	N.C.f.s	préparation
en	P	en
fonction	N.C.f.s	fonction
de	P	de
paramètres	N.C.m.p	paramètre
:	PONCT.W	:
	D.card.m.s	
	N.C.m.s	
20:39:03	D.card.m.p	@card@
Anonymes	N.C.m.p	anonyme
Nommés	VK.m.p	nommer
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
27	A.card.m.s	@card@
20:39:03	A.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
28	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
	P+D.def.m.s	c
PDOStatement	N.C.m.s	pdostatement
PDO::prepare(string	N.P.x.s	Pdoc
statement	ADV.-	statement
[	PONCT.W	[
,	PONCT.W	,
array	ET	array
driver_options	N.C.f.p	driverçoption
]	PONCT.W	]
)	PONCT.W	)
	P+D.def.m.s	c
statement	N.C.m.s	statement
:	PONCT.W	:
la	D.def.f.s	le
requête	N.C.f.s	requête
à	P	à
préparer	VW	préparer
.	PONCT.S	.

Peut	V.P.3.s	pouvoir
contenir	VW	contenir
des	D.ind.m.p	du
paramètres	N.C.m.p	paramètre
anonymes	A.qual.m.p	anonyme
(	PONCT.W	(
?	PONCT.S	?

)	PONCT.W	)
ou	C.C	ou
nommés	VK.m.p	nommer
(	PONCT.W	(
:nom	N.C.m.s	<unknown>
)	PONCT.W	)
	D.card.f.p	
driver_options	N.C.f.p	driverçoption
:	PONCT.W	:
tableau	N.C.m.s	tableau
d'	P	de
options	N.C.f.p	option
du	P+D.def.m.s	du
driver	VW	driver
	N.P.m.s	
retourne	V.P.3.s	retourner
un	D.ind.m.s	un
objet	N.C.m.s	objet
PDOStatement	N.C.m.s	pdostatement
qui	PRO.rel.m.s	qui
effectuera	V.F.3.s	effectuer
l'	D.def.f.s	le
association	N.C.f.s	association
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
et	C.C	et
exécutera	V.F.3.s	exécuter
la	D.def.f.s	le
requête	N.C.f.s	requête
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare(	N.P.x.s	<unknown>
"	PONCT.W	"
SELECT	N.P.m.s	Select
*	N.C.m.p	*
FROM	N.P.m.s	From
user	VW	user
WHERE	N.P.m.s	Where
User=	N.P.m.s	Userë
?	PONCT.S	?

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
29	A.card.m.s	@card@
Association	N.C.f.s	association
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
	P	à
bool	N.C.m.s	bool
PDOStatement::bindValue(mixed	N.P.x.s	<unknown>
parameter	VW	parameter
,	PONCT.W	,
mixed	A.qual.f.s	mixed
value	N.C.f.s	value
[	PONCT.W	[
,	PONCT.W	,
int	V.J.3.s	enir
data_type	N.P.x.s	Dataëtype
]	PONCT.W	]
)	PONCT.W	)
	P	à
parameter	VW	parameter
:	PONCT.W	:
le	D.def.m.s	le
paramètre	N.C.m.s	paramètre
(	PONCT.W	(
nom	N.C.m.s	nom
ou	C.C	ou
position	N.C.f.s	position
[	PONCT.W	[
1…n	N.card.m.s	1än
]	PONCT.W	]
)	PONCT.W	)
	D.card.f.s	
value	N.C.f.s	value
:	PONCT.W	:
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
	P	à
data_type	N.C.m.s	dataëtype
:	PONCT.W	:
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
la	D.def.f.s	le
valeur	N.C.f.s	valeur
	P	à
PDO::PARAM_BOOL	N.P.m.s	<unknown>
booléen	A.qual.m.s	booléen
.	PONCT.S	.

	P	à
PDO::PARAM_NULL	N.P.x.s	<unknown>
NULL	N.P.f.s	Null
SQL	N.P.m.s	Sql
.	PONCT.S	.

	P	à
PDO::PARAM_INT	N.P.x.s	<unknown>
INTEGER	N.P.m.s	Integer
SQL	N.P.m.s	Sql
.	PONCT.S	.

	P	à
PDO::PARAM_STR	N.P.m.s	<unknown>
CHAR	N.P.m.s	Char
,	PONCT.W	,
VARCHAR	N.P.m.s	Varchar
ou	C.C	ou
autre	A.ind.f.s	autre
chaîne	N.C.f.s	chaîne
.	PONCT.S	.

	P	à
PDO::PARAM_LOB	N.P.x.s	<unknown>
"	PONCT.W	"
objet	N.C.m.s	objet
large	A.qual.m.s	large
"	PONCT.W	"
SQL	N.P.m.s	Sql
.	PONCT.S	.

	P	à
bool	ET	bool
PDOStatement::execute([array	N.P.x.s	<unknown>
parameters	N.C.m.p	parameter
]	PONCT.W	]
)	PONCT.W	)
	D.card.m.p	
parameters	N.C.m.p	parameter
:	PONCT.W	:
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
ou	C.C	ou
indexé	VK.m.s	indexer
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
20:39:03	N.card.f.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
30	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
puis	C.C	pui
exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
1	A.card.m.s	@card@
)	PONCT.W	)
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.P.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare(	N.P.x.s	<unknown>
"	PONCT.W	"
SELECT	N.P.m.s	Select
*	N.C.m.p	*
FROM	N.P.m.s	From
user	VW	user
WHERE	N.P.m.s	Where
User=	N.P.m.s	Userë
?	PONCT.S	?

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
paramètre	N.C.m.s	paramètre
anonyme	A.qual.m.s	anonyme
$pdostat->bindValue(1	N.P.x.s	<unknown>
,	PONCT.W	,
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat->execute()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
$pdostat->bindValue(1	N.P.x.s	<unknown>
,	PONCT.W	,
'	PONCT.W	'
cutrona	N.C.m.s	cutrona
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat->execute()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
Association	N.C.f.s	association
Préparation	N.C.f.s	préparation
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
valeur	N.C.f.s	valeur
delalarequête	A.qual.f.s	<unknown>
au	P+D.def.m.s	au
requête	N.C.m.s	requête
1er	A.ord.m.s	1er
paramètre	N.C.m.s	paramètre
Association	N.C.f.s	association
Exécution	N.C.f.s	exécution
d'	P	de
une	PRO.ind.f.s	un
de	P	de
au	P+D.def.m.s	au
1er	A.ord.m.s	1er
paramètre	N.C.m.s	paramètre
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
31	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
puis	C.C	pui
exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
2	N.card.m.s	@card@
)	PONCT.W	)
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.P.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare(	N.P.x.s	<unknown>
"	PONCT.W	"
SELECT	N.P.m.s	Select
*	N.C.m.p	*
FROM	N.P.m.s	From
user	VW	user
WHERE	N.P.m.s	Where
User=	N.P.m.s	Userë
:utilisateur	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
paramètre	N.C.m.s	paramètre
nommé	VK.m.s	nommer
$pdostat->bindValue(':utilisateur	N.P.x.s	Opdostat-çbindvalueçurisateur
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat->execute()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
$pdostat->bindValue(':utilisateur	N.P.x.s	Opdostat-çbindvalueçurisateur
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
cutrona	N.C.m.s	cutrona
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat->execute()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
Association	N.C.f.s	association
Préparation	N.C.f.s	préparation
Exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
de	P	de
dela	D.def.f.s	dele
au	P+D.def.m.s	au
larequête	N.C.m.s	larequête
requête	V.P.3.s	requêter
paramètre	N.C.m.s	paramètre
nommé	VK.m.s	nommer
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
32	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
puis	C.C	pui
exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
3	N.card.m.s	@card@
)	PONCT.W	)
$pdo=new	N.P.m.s	<unknown>
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.P.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare(	N.P.x.s	<unknown>
"	PONCT.W	"
SELECT	N.P.m.s	Select
*	N.C.m.p	*
FROM	N.P.m.s	From
user	VW	user
paramètre	N.C.m.s	paramètre
WHERE	N.P.m.s	Where
User=	N.P.m.s	Userë
?	PONCT.S	?

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
anonyme	A.qual.m.s	anonyme
$pdostat->execute(array('root'))	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
$pdostat->execute(array('cutrona'))	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
Association	N.C.f.s	association
Association	N.C.f.s	association
Préparation	N.C.f.s	préparation
Exécution	N.C.f.s	exécution
d'	P	de
une	PRO.ind.f.s	un
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
valeur	N.C.f.s	valeur
de	P	de
delalarequête	N.C.f.s	<unknown>
au	P+D.def.m.s	au
au	P+D.def.m.s	au
requête	N.C.m.s	requête
1er	A.ord.m.s	1er
1er	A.ord.m.s	1er
paramètre	N.C.m.s	paramètre
paramètre	N.C.m.s	paramètre
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
33	A.card.m.s	@card@
Préparation	N.C.f.s	préparation
puis	C.C	pui
exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
requête	N.C.f.s	requête
(	PONCT.W	(
4	N.card.m.s	@card@
)	PONCT.W	)
$pdo=new	ET	äpdoënew
PDO("mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=mysql	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$pdo->setAttribute(PDO::ATTR_ERRMODE	N.P.x.s	<unknown>
,	PONCT.W	,
PDO::ERRMODE_EXCEPTION	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.P.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare(	N.P.x.s	<unknown>
"	PONCT.W	"
SELECT	N.P.m.s	Select
*	N.C.m.p	*
FROM	N.P.m.s	From
user	VW	user
WHERE	N.P.m.s	Where
User=	N.P.m.s	Userë
:utilisateur	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
paramètre	N.C.m.s	paramètre
nommé	VK.m.s	nommer
;	PONCT.W	;
$pdostat->execute(	N.P.x.s	<unknown>
array(':utilisateur	N.C.m.s	arrayç'outilisateur
'	PONCT.W	'
=>	N.P.x.s	<unknown>
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
$pdostat->execute(	N.P.x.s	<unknown>
array(':utilisateur	N.C.m.s	arrayç'outilisateur
'	PONCT.W	'
=>	N.P.m.s	<unknown>
'	PONCT.W	'
cutrona	V.J.3.s	cutroner
'	PONCT.W	'
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
Association	N.C.f.s	association
Préparation	N.C.f.s	préparation
Exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
de	P	de
dela	D.def.f.s	dele
au	P+D.def.m.s	au
larequête	N.C.m.s	larequête
requête	V.P.3.s	requêter
paramètre	N.C.m.s	paramètre
nommé	VK.m.s	nommer
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
34	A.card.m.s	@card@
Intérêt	N.C.m.s	intérêt
des	P+D.def.f.p	du
requêtes	N.C.f.p	requête
préparées	A.qual.f.p	préparé
	P	à
Amélioration	N.C.f.s	amélioration
des	P+D.def.f.p	du
performances	N.C.f.p	performance
en	P	en
cas	N.C.m.s	cas
d'	P	de
exécutions	N.C.f.p	exécution
répétées	VK.f.p	répéter
	P	à
Émulation	N.C.f.s	émulation
faite	VK.f.s	faire
par	P	par
PDO	N.P.x.s	Pdo
si	C.S	si
le	CL.obj.3.m.s	le
driver	VW	driver
ne	ADV.neg	ne
les	CL.obj.3.f.p	la
supporte	V.P.3.s	supporter
pas	ADV.neg	pas
nativement	ADV.-	nativement
	P	à
Protection	N.C.f.s	protection
automatique	A.qual.f.s	automatique
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
pour	P	pour
interdire	VW	interdire
les	D.def.f.p	le
attaques	N.C.f.p	attaque
par	P	par
injection	N.C.f.s	injection
de	P	de
code	N.C.m.s	code
SQL	N.P.m.s	Sql
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.p	@card@
35	A.card.m.p	@card@
20:39:03	A.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
36	A.card.m.s	@card@
Attaque	N.C.f.s	attaque
par	P	par
injection	N.C.f.s	injection
SQL	N.P.m.s	Sql
?	PONCT.S	?

	P	à
Ex	N.C.m.s	ex
:	PONCT.W	:
validation	N.C.f.s	validation
d'	P	de
un	D.ind.m.s	un
login/pass	N.C.m.s	<unknown>
sur	P	sur
un	D.ind.m.s	un
site	N.C.m.s	site
	N.C.m.s	
Requête	N.C.f.s	requête
consistant	VG	consister
à	P	à
trouver	VW	trouver
un	D.ind.m.s	un
enregistrement	N.C.m.s	enregistrement
correspondant	A.qual.m.s	correspondant
au	P+D.def.m.s	au
couple	A.qual.m.s	couple
login/pass	N.C.m.s	<unknown>
fourni	VK.m.s	fournir
par	P	par
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
	P+D.def.m.s	c
SELECT	N.P.m.s	Select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
WHERE	N.P.m.s	Where
login='{$_GET['login	ET	loginç'çelogin
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
'	PONCT.W	'
AND	ET	and
passwd='{$_GET['passwd	ET	<unknown>
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
'	PONCT.W	'
	N.C.m.s	
Et	C.C	et
si	C.S	si
on	CL.suj.3.m.s	on
essayait	V.I.3.s	essayer
de	P	de
fournir	VW	fournir
un	D.ind.m.s	un
mot	N.C.m.s	mot
de	P	de
passe	N.C.f.s	passe
un	D.ind.m.s	un
peu	ADV.-	peu
particulier	A.qual.m.s	particulier
…	A.qual.m.s	…
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
37	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
concret	A.qual.m.s	concret
d'	P	de
injection	N.C.f.s	injection
SQL	N.P.m.s	Sql
(	PONCT.W	(
1	A.card.m.s	@card@
)	PONCT.W	)
$pdo	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->query($req	N.P.m.s	<unknown>
=	P	à
<<<SQL	N.P.m.s	<unknown>
SELECT	N.P.m.s	Select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
WHERE	N.P.m.s	Where
login='{$_GET['login	ET	loginç'çelogin
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
'	PONCT.W	'
AND	ET	and
passwd='{$_GET['passwd	ET	<unknown>
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
'	PONCT.W	'
SQL	N.P.m.s	Sql
)	PONCT.W	)
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Requête:\n$req\n	N.P.x.s	Requête-Hünequn
"	PONCT.W	"
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
$utilisateur	N.C.m.s	çutilisateur
=	PONCT.W	=
$pdostat->fetch())	N.P.x.s	<unknown>
echo	ET	echo
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
{	P	à
$utilisateur['nom	N.P.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
}	N.C.m.s	}
"	PONCT.W	"
;	PONCT.W	;
else	PPRO.3.f.s	<unknown>
echo	ET	echo
"	PONCT.W	"
Désolé	VK.m.s	désoler
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
38	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
concret	A.qual.m.s	concret
d'	P	de
injection	N.C.f.s	injection
SQL	N.P.f.s	Sql
(	PONCT.W	(
2	N.card.m.s	@card@
)	PONCT.W	)
Saisie	N.C.f.s	saisie
de	P	de
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
par	P	par
formulaire	N.C.m.s	formulaire
:	PONCT.W	:
	D.card.m.s	
mail	N.C.m.s	mail
:	PONCT.W	:
whatever	N.C.m.s	whatever
	P	à
pass	N.C.m.s	pass
:	PONCT.W	:
who_cares	N.C.m.p	whoëcare
?	PONCT.S	?

URL	N.P.f.s	Url
:	PONCT.W	:
?	PONCT.S	?

mail=whatever&passwd=who_cares	N.C.m.p	mailhwhatever-passwoëcare
?	PONCT.S	?

Requête	N.C.f.s	requête
:	PONCT.W	:
SELECT	N.C.m.s	select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
WHERE	N.P.m.s	Where
login='whatever	N.C.m.s	loginç'whatever
'	PONCT.W	'
AND	P	and
passwd='who_cares	N.C.m.p	passwd'whoëcare
?	PONCT.S	?

'	PONCT.W	'
Désolé	VK.m.s	désoler
...	PONCT.S	<unknown>
20:39:03	A.card.m.s	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
39	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
concret	V.P.3.s	concrere
d'	P	de
injection	N.C.f.s	injection
SQL	N.P.m.s	Sql
(	PONCT.W	(
3	N.card.m.s	@card@
)	PONCT.W	)
Saisie	N.C.f.s	saisie
de	P	de
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
:	PONCT.W	:
	D.card.m.s	
mail	N.C.m.s	mail
:	PONCT.W	:
whatever	N.C.m.s	whatever
	P	à
pass	N.C.m.s	pass
:	PONCT.W	:
who_cares	N.C.m.p	whoëcare
?	PONCT.S	?

'	PONCT.W	'
OR	CL.suj.3.m.s	or
true	V.P.3.s	truer
!	PONCT.S	!

=	PONCT.W	=
'	PONCT.W	'
URL	N.P.f.s	Url
:	PONCT.W	:
?	PONCT.S	?

mail=whatever&passwd=who_cares	N.C.m.p	mailhwhatever-passwoëcare
?	PONCT.S	?

'	PONCT.W	'
%20OR%20true	N.C.m.s	<unknown>
!	PONCT.S	!

=	PONCT.W	=
'	PONCT.W	'
Requête	N.C.f.s	requête
:	PONCT.W	:
SELECT	N.C.m.s	select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
WHERE	N.P.m.s	Where
login='whatever	ET	loginç'whatever
'	PONCT.W	'
AND	P	and
passwd='who_cares	N.C.m.p	passwd'whoëcare
?	PONCT.S	?

'	PONCT.W	'
OR	CL.suj.3.m.s	or
true	V.P.3.s	truer
!	PONCT.S	!

=	V.P.3.s	être
''	CL.refl.3.f.s	'e
Bienvenue	N.P.f.s	Bienvenue
John	N.P.m.s	John
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.p	@card@
40	A.card.f.p	@card@
Protection	N.C.f.s	protection
contre	P	contre
les	D.def.f.p	le
injections	N.C.f.p	injection
SQL	N.P.m.s	Sql
(	PONCT.W	(
1	A.card.m.s	@card@
)	PONCT.W	)
$pdo	ET	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->prepare($req	N.P.x.s	<unknown>
=	P	à
<<<SQL	N.P.x.s	<unknown>
SELECT	N.P.m.s	Select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
WHERE	N.P.m.s	Where
login=	ET	loginç
?	PONCT.S	?

AND	P	and
passwd=	N.C.m.s	passwd
?	PONCT.S	?

SQL	N.P.m.s	Sql
)	PONCT.W	)
;	PONCT.W	;
$pdostat->execute(array($_GET['login	N.P.x.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
,	PONCT.W	,
$_GET['passwd	N.P.f.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
$utilisateur	N.C.m.s	çutilisateur
=	PONCT.W	=
$pdostat->fetch())	N.P.x.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
{	P	à
$utilisateur['nom']}\n	ET	çutilisateuro'ç'ëän
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
Désole	N.P.m.s	Désole
...	PONCT.W	<unknown>
\n	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@
41	A.card.f.s	@card@
Protection	N.C.f.s	protection
contre	P	contre
les	D.def.f.p	le
injections	N.C.f.p	injection
SQL	N.P.m.s	Sql
(	PONCT.W	(
2	N.card.m.s	@card@
)	PONCT.W	)
$pdo	ET	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=localhost	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$login	N.C.m.s	çlogin
=	PONCT.W	=
$pdo->quote($_GET['login'])	N.P.x.s	<unknown>
;	PONCT.W	;
$passwd	N.P.m.s	<unknown>
=	PONCT.W	=
$pdo->quote($_GET['passwd'])	N.P.x.s	<unknown>
;	PONCT.W	;
$pdostat	N.C.m.s	<unknown>
=	PONCT.W	=
$pdo->query($req	N.P.m.s	<unknown>
=	P	à
<<<SQL	N.P.x.s	<unknown>
SELECT	N.P.m.s	Select
*	ET	*
FROM	N.P.m.s	From
membre	N.C.m.s	membre
Requête	N.P.f.s	Requête
:	PONCT.W	:
WHERE	N.P.m.s	Where
login=$login	ET	loginçlogin
SELECT	N.P.m.s	Select
*	N.C.m.s	*
AND	N.P.m.s	And
passwd=$passwd	ET	<unknown>
FROM	N.P.m.s	From
membre	N.C.m.s	membre
SQL	N.P.m.s	Sql
WHERE	N.P.m.s	Where
login='whatever	ET	loginç'whatever
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
AND	P	and
passwd='who_cares	A.qual.m.p	passwd'whoëcare
?	PONCT.S	?

\	N.C.m.s	\
'	PONCT.W	'
OR	CL.suj.3.m.s	or
true	V.P.3.s	truer
!	PONCT.S	!

=\	C.C	çù
''	PONCT.W	''
echo	ET	echo
"	PONCT.W	"
Requête:\n$req\n	N.P.x.s	Requête-Hünequn
"	PONCT.W	"
;	PONCT.W	;
Désolé	N.P.m.s	Désolé
...	PONCT.W	<unknown>
if	N.C.m.s	if
(	PONCT.W	(
$utilisateur	N.C.m.s	çutilisateur
=	PONCT.W	=
$pdostat->fetch())	N.P.x.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
{	P	à
$utilisateur['nom']}\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
42	D.card.m.p	@card@
20:39:03	D.card.m.p	@card@
Programmation	N.C.f.s	programmation
Web	N.P.m.s	Web
2013-2014	A.card.m.s	@card@

