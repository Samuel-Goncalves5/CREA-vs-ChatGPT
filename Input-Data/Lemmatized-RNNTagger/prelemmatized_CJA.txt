LE	D.def.m.s	le
LANGAGE	N.P.m.s	Langage
JAVA	N.P.m.s	Java
Petit	N.P.m.s	Petit
mémento	N.C.m.s	mémento
de	P	de
syntaxe	N.C.m.s	syntaxe
&	PONCT.W	&
éléments	N.C.m.p	élément
de	P	de
programmation	N.C.f.s	programmation
SITES	N.C.f.p	site
DE	P	de
REFERENCE	N.C.f.s	reference
Le	D.def.m.s	le
site	N.C.m.s	site
officiel	A.qual.m.s	officiel
de	P	de
Java	N.P.m.s	Java
est	V.P.3.s	être
:	PONCT.W	:
java.sun.com	N.C.m.s	<unknown>
.	PONCT.S	.

On	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
notamment	ADV.-	notamment
y	CL.obj.3.m.s	y
consulter	VW	consulter
avec	P	avec
intérêt	N.C.m.s	intérêt
:	PONCT.W	:
-	PONCT.W	-
des	D.ind.m.p	du
tutoriels	N.C.m.p	tutoriel
:	PONCT.W	:
java.sun.com/docs/books/tutorial/	N.C.m.s	<unknown>
-	PONCT.W	-
une	D.ind.f.s	un
grande	A.qual.f.s	grand
collection	N.C.f.s	collection
de	P	de
petits	A.qual.m.p	petit
exemples	N.C.m.p	exemple
de	P	de
programmes	N.C.m.p	programme
:	PONCT.W	:
java.sun.com/developer/codesamples/examplets/	N.C.f.s	<unknown>
-	PONCT.W	-
des	P+D.def.f.p	du
recommandations	N.C.f.p	recommandation
de	P	de
style	N.C.m.s	style
:	PONCT.W	:
java.sun.com/docs/codeconv/html/CodeConvTOC.doc.html	N.C.m.s	<unknown>
-	PONCT.W	-
le	D.def.m.s	le
descriptif	N.C.m.s	descriptif
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
paquetages	N.C.m.p	paquetage
,	PONCT.W	,
classes	N.C.f.p	classe
et	C.C	et
méthodes	N.C.f.p	méthode
standard	A.qual.m.s	standard
:	PONCT.W	:
java.sun.com/javase/6/docs/api/	N.C.m.s	<unknown>
-	PONCT.W	-
le	D.def.m.s	le
mode	N.C.m.s	mode
d'	P	de
emploi	N.C.m.s	emploi
du	P+D.def.m.s	du
générateur	N.C.m.s	générateur
de	P	de
documentation	N.C.f.s	documentation
javadoc	ET	javadoc
:	PONCT.W	:
java.sun.com/j2se/javadoc/index.jsp	N.C.m.s	<unknown>
-	PONCT.W	-
une	D.ind.f.s	un
préparation	N.C.f.s	préparation
à	P	à
la	D.def.f.s	le
certification	N.C.f.s	certification
de	P	de
programmeur	N.C.m.s	programmeur
Java	N.P.m.s	Java
:	PONCT.W	:
java.sun.com/docs/books/tutorial/extra/certification/	N.C.m.s	<unknown>
SOMMAIRE	N.C.m.s	sommaire
1	D.card.m.s	@card@
LANGAGE	N.C.m.s	langage
ET	C.C	et
PROGRAMMATION	N.C.f.s	programmation
ORIENTÉS	N.P.x.s	Orientés
OBJETS	N.P.m.s	Objets
...	PONCT.W	<unknown>
7	A.card.m.s	@card@
2	A.card.m.s	@card@
PROGRAMME	N.C.m.s	programme
JAVA	N.P.m.s	Java
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.

8	A.card.m.s	@card@
2.1	A.card.m.s	@card@
Style	N.C.m.p	style
de	P	de
programmation	N.C.f.s	programmation
8	D.card.m.p	@card@
2.2	D.card.m.p	@card@
Identificateurs	N.C.m.p	identificateur
...	PONCT.S	<unknown>
8	D.card.m.p	@card@
2.3	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
8	A.card.m.s	@card@
2.3.1	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
8	D.card.m.p	@card@
2.3.2	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
d'	P	de
implémentation	N.C.f.s	implémentation
...	PONCT.S	<unknown>
9	A.card.m.s	@card@
2.4	A.card.m.s	@card@
Fichier	N.P.m.s	Fichier
JAVA	N.P.m.s	Java
...	PONCT.S	<unknown>
9	A.card.m.s	@card@
24.1	A.card.m.s	@card@
Nom	N.P.m.s	Nom
et	C.C	et
contenu	VK.m.s	contenir
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
java	N.C.m.s	java
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
9	A.card.m.s	@card@
24.2	A.card.m.s	@card@
Compilation	N.C.f.s	compilation
,	PONCT.W	,
exécution	N.C.f.s	exécution
,	PONCT.W	,
génération	N.C.f.s	génération
de	P	de
la	D.def.f.s	le
documentation	N.C.f.s	documentation
10	D.card.m.p	@card@
2.5	D.card.m.p	@card@
Paquetages	N.C.m.p	paquetage
...	PONCT.S	<unknown>
10	A.card.m.p	@card@
2.5.1	A.card.m.p	@card@
Paquetages	N.C.m.p	paquetage
standard	A.qual.m.s	standard
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
10	A.card.m.s	@card@
2.5.2	A.card.f.s	@card@
Affectation	N.C.f.s	affectation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
à	P	à
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
10	A.card.m.s	@card@
2.5.3	A.card.f.s	@card@
Importation	N.C.f.s	importation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
d'	P	de
un	D.ind.m.s	un
paquetages	N.C.m.s	paquetage
11	D.card.m.p	@card@
3	D.card.m.p	@card@
CLASSES	N.C.f.p	classe
ET	C.C	et
INTERFACES	N.C.f.p	interface
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
12	A.card.m.s	@card@
3.1	A.card.m.s	@card@
Classes	N.C.f.p	classe
standard	A.qual.m.s	standard
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
12	D.card.f.p	@card@
3.2	D.card.f.p	@card@
Classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
et	C.C	et
sous-classes	N.C.m.p	sous-classe
...	PONCT.S	<unknown>
13	D.card.f.p	@card@
3.2.1	D.card.f.p	@card@
Classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
.	PONCT.S	.

13	A.card.m.s	@card@
3.2.2	D.card.m.p	@card@
Sous-classe	N.P.m.s	Sous-Classe
...	PONCT.W	<unknown>
14	D.card.f.p	@card@
3.3	A.card.f.p	@card@
Interfaces	N.C.f.p	interface
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
15	A.card.m.s	@card@
3.3.1	A.card.f.p	@card@
Interface	N.C.f.s	interface
...	PONCT.S	<unknown>
16	A.card.m.s	@card@
3.3.2	A.card.m.p	@card@
Classe	N.P.m.s	Classe
implantant	VG	implanter
une	D.ind.f.s	un
interface	N.C.f.s	interface
...	PONCT.S	<unknown>
16	A.card.m.s	@card@
3.4	A.card.m.s	@card@
Enumération	N.C.f.s	enumération
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
16	D.card.f.p	@card@
3.5	D.card.f.p	@card@
Classes	N.C.f.p	classe
imbriquées	A.qual.f.p	imbriqué
(	PONCT.W	(
Nested	N.P.m.s	Nested
classes	N.C.f.p	classe
)	PONCT.W	)
...	PONCT.S	<unknown>
17	A.card.m.s	@card@
3.6	A.card.m.s	@card@
Contrôle	N.C.m.s	contrôle
d'	P	de
accès	N.C.m.s	accès
par	P	par
les	D.def.m.p	le
modificateurs	N.C.m.p	modificateur
...	PONCT.W	<unknown>
18	A.card.m.s	@card@
4	A.card.m.s	@card@
INSTANCE	N.C.f.s	instance
DE	P	de
CLASSE	N.P.m.s	Classe
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
20	D.card.f.p	@card@
5	D.card.f.p	@card@
TYPES	N.C.f.p	type
DE	P	de
DONNEES	N.P.m.s	Donnees
...	PONCT.S	<unknown>
.	PONCT.S	.

21	D.card.m.p	@card@
5.1	A.card.m.p	@card@
Types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
...	PONCT.S	<unknown>
21	D.card.m.p	@card@
5.2	D.card.m.p	@card@
Types	N.C.m.p	type
objet	N.C.m.s	objet
(	PONCT.W	(
ou	C.C	ou
types	N.C.m.p	type
référence	N.C.f.s	référence
)	PONCT.W	)
.	PONCT.S	.

..22	D.card.f.p	@card@
5.2.1	D.card.f.p	@card@
Classes	N.C.f.p	classe
enveloppes	N.C.f.p	enveloppe
...	PONCT.W	<unknown>
.	PONCT.S	.
.	PONCT.S	.
22	D.card.f.p	@card@
5.2.2	D.card.f.p	@card@
Chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
non	ADV.neg	non
modifiable	A.qual.m.s	modifiable
(	PONCT.W	(
String	N.P.m.s	String
)	PONCT.W	)
...	PONCT.S	<unknown>
23	D.card.f.p	@card@
5.2.3	A.card.m.p	@card@
Chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
modifiable	A.qual.m.s	modifiable
(	PONCT.W	(
StringBuffer	N.P.m.s	Stringbuffer
)	PONCT.W	)
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.
.	PONCT.S	.
23	A.card.m.s	@card@
5.2.4	A.card.m.s	@card@
Tableau	N.C.m.s	tableau
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
23	A.card.m.s	@card@
5.2.5	A.card.f.s	@card@
Collection	N.C.f.s	collection
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
25	A.card.m.s	@card@
5.3	A.card.m.s	@card@
Transtypage	N.C.m.p	transtypage
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
27	A.card.m.s	@card@
6	A.card.m.s	@card@
OPERATEURS	N.C.m.p	operateur
ET	C.C	et
EXPRESSIONS	N.P.x.s	Expressions
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
29	D.card.m.p	@card@
6.1	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
et	C.C	et
expressions	N.C.f.p	expression
arithmétiques	A.qual.f.p	arithmétique
...	PONCT.S	<unknown>
29	D.card.m.p	@card@
6.2	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
et	C.C	et
expressions	N.C.f.p	expression
booléennes	A.qual.f.p	booléen
...	PONCT.S	<unknown>
30	D.card.m.p	@card@
6.3	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
relationnels	A.qual.m.p	relationnel
...	PONCT.S	<unknown>
30	D.card.m.p	@card@
7	A.card.m.s	@card@
METHODES	N.C.m.p	methode
...	PONCT.S	<unknown>
31	A.card.m.s	@card@
7.1	A.card.f.s	@card@
Définition	N.C.f.s	définition
et	C.C	et
appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
ordinaire	A.qual.f.s	ordinaire
...	PONCT.S	<unknown>
31	A.card.m.s	@card@
7.2	A.card.m.s	@card@
Constructeur	N.C.m.s	constructeur
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
32	A.card.m.s	@card@
7.3	A.card.m.p	@card@
Méthode	N.C.f.s	méthode
main	N.C.f.s	main
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.

33	D.card.f.p	@card@
8	D.card.f.p	@card@
INSTRUCTIONS	N.C.f.p	instruction
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
34	A.card.m.s	@card@
8.1	A.card.f.p	@card@
Instruction	N.C.f.s	instruction
d'	P	de
affectation	N.C.f.s	affectation
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
34	D.card.f.p	@card@
8.2	A.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
contrôle	N.C.m.s	contrôle
...	PONCT.W	<unknown>
34	D.card.f.p	@card@
8.2.1	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
sélection	N.C.f.s	sélection
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
34	D.card.f.p	@card@
8.2.2	A.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
boucle	N.C.f.s	boucle
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
36	D.card.f.p	@card@
8.3	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
...	PONCT.S	<unknown>
38	A.card.m.s	@card@
8.3.1	A.card.f.s	@card@
Notion	N.C.f.s	notion
de	P	de
flux	N.C.m.s	flux
...	PONCT.W	<unknown>
38	A.card.m.s	@card@
8.3.2	A.card.f.s	@card@
Entrée	VK.f.s	entrer
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
terminal	A.qual.m.s	terminal
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
38	A.card.m.s	@card@
8.3.3	A.card.m.s	@card@
Entrée	VK.f.s	entrer
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
fichier	N.C.m.s	fichier
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
39	A.card.m.s	@card@
8.3.4	A.card.m.s	@card@
Lecture	N.C.f.s	lecture
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
formatée	VK.f.s	formater
...	PONCT.S	<unknown>
40	A.card.m.s	@card@
9	A.card.m.s	@card@
HERITAGE	N.C.m.s	heritage
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.

42	D.card.m.p	@card@
9.1	A.card.f.s	@card@
Notion	N.C.f.s	notion
d'	P	de
héritage	N.C.m.s	héritage
...	PONCT.W	<unknown>
42	A.card.m.s	@card@
9.2	A.card.m.s	@card@
Qu'	PRO.int.m.s	que
hérite	V.P.3.s	hériter
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
?	PONCT.S	?

...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
43	A.card.m.s	@card@
9.3	A.card.m.p	@card@
Redéfinir	VW	redéfinir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
...	PONCT.S	<unknown>
43	A.card.m.s	@card@
9.4	A.card.m.s	@card@
Type	N.C.m.s	type
statique	A.qual.m.s	statique
/	PONCT.W	@card@
dynamique	A.qual.f.s	dynamique
-	PONCT.W	-
Liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
...	PONCT.S	<unknown>
46	A.card.m.s	@card@
9.4.1	A.card.m.p	@card@
Type	N.C.m.s	type
statique	A.qual.m.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
-	PONCT.W	-
Transtypage	N.P.m.s	Transtypage
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
46	A.card.m.s	@card@
9.4.2	N.C.m.s	@card@
Liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
...	PONCT.W	<unknown>
47	A.card.m.s	@card@
9.5	A.card.m.s	@card@
Polymorphisme	N.C.m.s	polymorphisme
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
48	D.card.f.p	@card@
9.6	D.card.f.p	@card@
Classes	N.C.f.p	classe
et	C.C	et
méthodes	N.C.f.p	méthode
particulières	A.qual.f.p	particulier
...	PONCT.W	<unknown>
49	D.card.f.p	@card@
9.7	A.card.f.p	@card@
Interfaces	N.C.f.p	interface
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
49	D.card.f.p	@card@
10	D.card.f.p	@card@
EXCEPTIONS	N.C.f.p	exception
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
50	D.card.f.p	@card@
10.1	D.card.f.p	@card@
Exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
et	C.C	et
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
...	PONCT.S	<unknown>
50	D.card.f.p	@card@
10.2	D.card.f.p	@card@
Classes	N.C.f.p	classe
d'	P	de
exception	N.C.f.s	exception
standard	A.qual.f.s	standard
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
51	A.card.m.s	@card@
10.2.1	PRO.card.f.p	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
Error	N.P.m.s	Error
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
51	A.card.m.s	@card@
10.2.2	A.card.m.s	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
Exception	N.P.f.s	Exception
...	PONCT.S	<unknown>
51	A.card.f.s	@card@
10.23	A.card.f.s	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
RuntimeException	N.C.f.s	runtimeexception
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.

...	PONCT.S	<unknown>
51	A.card.m.s	@card@
10.3	A.card.m.s	@card@
Lancement	N.C.m.s	lancement
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
51	A.card.m.s	@card@
10.4	A.card.m.s	@card@
Capture	V.P.3.s	capturer
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
52	D.card.m.p	@card@
10.4.1	A.card.m.p	@card@
Clause	N.P.m.s	Clause
throws	N.C.m.p	throw
...	PONCT.S	<unknown>
52	D.card.f.p	@card@
10.4.2	A.card.f.s	@card@
Instruction	N.C.f.s	instruction
try	ET	try
.	PONCT.S	.
.	PONCT.S	.
catch	N.C.m.s	catch
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
.	PONCT.S	.
.	PONCT.S	.
iii	ADV.-	<unknown>
52	A.card.m.s	@card@
10.5	A.card.m.p	@card@
Définir	VW	définir
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
d'	P	de
exception	N.C.f.s	exception
...	PONCT.S	<unknown>
54	A.card.m.s	@card@
11	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
1	D.card.m.s	@card@
-	PONCT.W	-
PROGRAMMATION	N.C.f.s	programmation
GRAPHIQUE	N.C.m.s	graphique
...	PONCT.S	<unknown>
55	A.card.m.s	@card@
111	A.card.m.s	@card@
SWING	N.C.m.p	swing
.	PONCT.S	.
.	PONCT.S	.
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
55	D.card.m.p	@card@
11.2	D.card.m.p	@card@
Conteneurs	N.C.m.p	conteneur
et	C.C	et
composants	N.C.m.p	composant
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
56	A.card.m.s	@card@
11.3	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
de	P	de
la	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
57	A.card.m.s	@card@
11.4	A.card.m.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
événements	N.C.m.p	événement
...	PONCT.S	<unknown>
58	A.card.m.s	@card@
11.4.1	A.card.f.s	@card@
Notion	N.C.f.s	notion
d'	P	de
événement	N.C.m.s	événement
...	PONCT.W	<unknown>
58	A.card.m.s	@card@
11.4.2	N.card.f.s	@card@
Réaliser	VW	réaliser
un	D.ind.m.s	un
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
59	A.card.m.s	@card@
11.5	A.card.m.s	@card@
Affichage	N.C.m.s	affichage
/	PONCT.W	@card@
fermeture	N.C.f.s	fermeture
d'	P	de
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
graphique	A.qual.f.s	graphique
...	PONCT.S	<unknown>
60	A.card.m.s	@card@
11.6	A.card.m.s	@card@
Architecture	N.C.f.s	architecture
des	P+D.def.m.p	du
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
60	D.card.m.p	@card@
11.7	D.card.m.p	@card@
Applets	N.C.m.p	applet
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
61	A.card.m.s	@card@
12	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
2	A.card.m.s	@card@
-	PONCT.W	-
THREADS	N.P.x.s	Threads
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
63	A.card.m.s	@card@
12.1	A.card.m.s	@card@
Créer	VW	créer
un	D.ind.m.s	un
thread	N.C.m.s	thread
par	P	par
extension	N.C.f.s	extension
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Thread	N.P.m.s	Thread
...	PONCT.S	<unknown>
63	A.card.m.s	@card@
12.2	A.card.m.s	@card@
Créer	VW	créer
un	D.ind.m.s	un
thread	N.C.m.s	thread
par	P	par
implémentation	N.C.f.s	implémentation
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
Runnable	N.P.m.s	Runnable
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.
.	PONCT.S	.
64	A.card.m.s	@card@
12.3	A.card.m.s	@card@
Synchronisation	N.C.f.s	synchronisation
et	C.C	et
communication	N.C.f.s	communication
entre	P	entre
threads	N.C.m.p	thread
...	PONCT.S	<unknown>
64	D.card.f.p	@card@
12.3.1	D.card.f.p	@card@
Sections	N.C.f.p	section
critiques	A.qual.f.p	critique
et	C.C	et
synchronisation	N.C.f.s	synchronisation
...	PONCT.S	<unknown>
64	A.card.m.s	@card@
12.3.2	A.card.m.p	@card@
Communication	N.C.f.s	communication
entre	P	entre
threads	N.C.m.p	thread
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
64	A.card.m.s	@card@
13	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
3	A.card.m.s	@card@
-	PONCT.W	-
CONCEPTION	N.C.f.s	conception
ET	C.C	et
DEVELOPPEMENT	N.C.m.s	developpement
EN	P	en
JAVA	N.P.m.s	Java
...	PONCT.S	<unknown>
66	D.card.m.p	@card@
13.1	D.card.m.p	@card@
Conseils	N.C.m.p	conseil
généraux	A.qual.m.p	général
pour	P	pour
une	D.ind.f.s	un
bonne	A.qual.f.s	bon
conception	N.C.f.s	conception
des	P+D.def.f.p	du
classes	N.C.f.p	classe
...	PONCT.S	<unknown>
66	A.card.m.s	@card@
13.2	A.card.m.s	@card@
Architecture	N.C.f.s	architecture
d'	P	de
une	D.ind.f.s	un
application	N.C.f.s	application
interactive	A.qual.f.s	interactif
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
MVC	N.P.x.s	Mvc
...	PONCT.S	<unknown>
67	D.card.m.p	@card@
13.3	D.card.m.p	@card@
Tests	N.C.m.p	test
unitaires	A.qual.m.p	unitaire
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
70	D.card.f.p	@card@
13.3.1	D.card.f.p	@card@
Définitions	N.C.f.p	définition
...	PONCT.W	<unknown>
70	A.card.m.s	@card@
13.32	A.card.m.s	@card@
JUnit	N.C.m.s	junit
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
.	PONCT.S	.

71	A.card.m.s	@card@
13.4	A.card.m.p	@card@
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
72	D.card.m.p	@card@
13.5	A.card.m.p	@card@
Design	N.C.m.p	design
patterns	N.C.m.p	pattern
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
74	A.card.m.s	@card@
13.5.1	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Singleton	N.P.m.s	Singleton
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
75	A.card.m.s	@card@
13.5.2	A.card.m.s	@card@
Exemple	N.C.m.s	exemple
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Decorator	N.P.m.s	Decorator
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
.	PONCT.S	.
.	PONCT.S	.
...	PONCT.S	<unknown>
75	A.card.m.s	@card@
14	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
4	A.card.m.s	@card@
-	PONCT.W	-
MACHINE	N.C.m.s	machine
VIRTUELLE	N.P.f.s	Virtuelle
JAVA	N.P.m.s	Java
(	PONCT.W	(
JVM	N.P.m.s	Jvm
)	PONCT.W	)
...	PONCT.W	<unknown>
77	A.card.m.s	@card@
15	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
5	A.card.m.s	@card@
-	PONCT.W	-
COMMUNICATION	N.C.f.s	communication
ENTRE	P	entre
JAVA	N.P.m.s	Java
ET	C.C	et
C	N.card.m.s	C
(	PONCT.W	(
JNI	N.C.m.s	jni
)	PONCT.W	)
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
...	PONCT.S	<unknown>
79	A.card.m.s	@card@
15.1	A.card.m.s	@card@
Appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
C	N.P.f.s	C
...	PONCT.S	<unknown>
80	A.card.m.s	@card@
15.1.1	A.card.f.s	@card@
Déclaration	N.C.f.s	déclaration
et	C.C	et
appel	N.C.m.s	appel
java	N.C.m.s	java
.	PONCT.S	.

...	PONCT.S	<unknown>
80	A.card.m.s	@card@
15.1.2	A.card.m.s	@card@
Prototype	N.C.m.s	prototype
C	PONCT.W	C
...	PONCT.W	<unknown>
81	A.card.m.s	@card@
15.1.3	A.card.f.s	@card@
Implémentation	N.C.f.s	implémentation
C	PONCT.W	C
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
81	A.card.m.s	@card@
15.2	A.card.m.s	@card@
Echange	N.C.m.s	echange
de	P	de
données	N.C.f.p	donnée
entre	P	entre
Java	N.P.m.s	Java
et	C.C	et
C	N.P.m.s	C
...	PONCT.W	<unknown>
82	A.card.m.s	@card@
15.2.1	A.card.m.s	@card@
Déclaration	N.C.f.s	déclaration
et	C.C	et
appel	N.C.m.s	appel
java	N.C.m.s	java
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
82	A.card.m.s	@card@
15.2.2	A.card.m.s	@card@
Prototype	N.C.m.s	prototype
C	PONCT.W	C
...	PONCT.S	<unknown>
83	A.card.m.s	@card@
15.2.3	A.card.f.s	@card@
Implémentation	N.C.f.s	implémentation
C	PONCT.W	C
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
83	A.card.m.s	@card@
16	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
6	A.card.m.s	@card@
-	PONCT.W	-
PLATES-FORMES	N.P.m.s	Plates-Formes
JAVA	N.P.m.s	Java
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
84	A.card.m.s	@card@
17	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
7	A.card.m.s	@card@
-	PONCT.W	-
GLOSSAIRE	N.P.m.s	Glossaire
...	PONCT.W	<unknown>
...	PONCT.S	<unknown>
85	A.card.m.s	@card@
1	A.card.m.s	@card@
LANGAGE	N.C.m.s	langage
ET	C.C	et
PROGRAMMATION	N.C.f.s	programmation
ORIENTÉS	N.P.x.s	Orientés
OBJETS	N.P.m.s	Objets
Java	N.P.m.s	Java
[	PONCT.W	[
1	N.card.m.s	@card@
]	PONCT.W	]
est	V.P.3.s	être
un	D.ind.m.s	un
langage	N.C.m.s	langage
de	P	de
programmation	N.C.f.s	programmation
orienté	VK.m.s	orienter
objets	N.C.m.p	objet
.	PONCT.S	.

Un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
une	D.ind.f.s	un
représentation	N.C.f.s	représentation
simplifiée	A.qual.f.s	simplifié
d'	P	de
une	D.ind.f.s	un
entité	N.C.f.s	entité
du	P+D.def.m.s	du
monde	N.C.m.s	monde
réel	A.qual.m.s	réel
:	PONCT.W	:
entité	N.C.f.s	entité
concrète	A.qual.f.s	concret
(	PONCT.W	(
ex	N.C.m.s	ex
:	PONCT.W	:
ma	D.poss.f.s	mon
voiture	N.C.f.s	voiture
)	PONCT.W	)
ou	C.C	ou
non	ADV.neg	non
(	PONCT.W	(
ex	N.C.m.s	ex
:	PONCT.W	:
la	D.def.f.s	le
date	N.C.f.s	date
d'	P	de
aujourd'hui	ADV.-	aujourd'hui
)	PONCT.W	)
.	PONCT.S	.

Un	D.ind.m.s	un
objet	N.C.m.s	objet
se	CL.refl.3.m.s	se
caractérise	V.P.3.s	caractériser
par	P	par
son	D.poss.m.s	son
état	N.C.m.s	état
et	C.C	et
son	D.poss.m.s	son
comportement	N.C.m.s	comportement
.	PONCT.S	.

Un	D.ind.m.s	un
objet	N.C.m.s	objet
stocke	V.P.3.s	stocker
son	D.poss.m.s	son
état	N.C.m.s	état
dans	P	dans
des	D.ind.f.p	du
variables	N.C.f.p	variable
appelées	VK.f.p	appeler
champs	N.C.m.p	champ
(	PONCT.W	(
ou	C.C	ou
attributs	N.C.m.p	attribut
)	PONCT.W	)
et	C.C	et
présente	V.P.3.s	présenter
son	D.poss.m.s	son
comportement	N.C.m.s	comportement
au	P+D.def.m.s	au
travers	N.C.m.s	travers
de	P	de
fonctionnalités	N.C.f.p	fonctionnalité
appelées	VK.f.p	appeler
méthodes	N.C.f.p	méthode
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
objet	N.C.m.s	objet
:	PONCT.W	:
maVoiture	N.C.f.s	mavoiture
=	V.P.3.s	être
{	P	à
valeur	N.C.f.s	valeur
des	P+D.def.m.p	du
attributs	N.C.m.p	attribut
:	PONCT.W	:
Fiat	N.P.m.s	Fiat
,	PONCT.W	,
grise	N.C.f.s	grise
,	PONCT.W	,
6	D.card.m.p	@card@
/100km	N.C.m.p	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.W	.
;	PONCT.W	;
méthodes	N.C.f.p	méthode
:	PONCT.W	:
démarrer	VW	démarrer
,	PONCT.W	,
arrêter	VW	arrêter
,	PONCT.W	,
accélérer	VW	accélérer
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.
}	N.C.m.s	}
Typiquement	ADV.-	typiquement
,	PONCT.W	,
l'	D.def.m.s	le
état	N.C.m.s	état
est	V.P.3.s	être
encapsulé	VK.m.s	encapsuler
au	P+D.def.m.s	au
coeur	N.C.m.s	cœur
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
et	C.C	et
n'	ADV.neg	ne
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
depuis	P	depuis
l'	D.def.m.s	le
extérieur	N.C.m.s	extérieur
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
,	PONCT.W	,
en	P	en
consultation	N.C.f.s	consultation
ou	C.C	ou
modification	N.C.f.s	modification
,	PONCT.W	,
que	C.S	que
via	P	via
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
offertes	VK.f.p	offrir
par	P	par
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
l'	D.def.m.s	le
objet	N.C.m.s	objet
maVoiture	N.C.f.s	mavoiture
getCouleur	N.C.m.s	getcouleur
setCouleur	N.C.m.s	setcouleur
démarrer	VW	démarrer
arrêter	VW	arrêter
accélérer	VW	accélérer
...	PONCT.W	<unknown>
Fiat	N.P.m.s	Fiat
grise	N.C.f.s	grise
6	A.card.f.s	@card@
On	CL.suj.3.m.s	on
interagit	V.P.3.s	interagir
avec	P	avec
un	D.ind.m.s	un
objet	N.C.m.s	objet
en	P	en
lui	CL.obj.3.m.s	lui
envoyant	VG	envoyer
un	D.ind.m.s	un
message	N.C.m.s	message
de	P	de
demande	N.C.f.s	demande
d'	P	de
activation	N.C.f.s	activation
d'	P	de
une	PRO.ind.f.s	un
de	P	de
ses	D.poss.f.p	son
méthodes	N.C.f.p	méthode
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
envoi	N.C.m.s	envoi
d'	P	de
un	D.ind.m.s	un
message	N.C.m.s	message
à	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
:	PONCT.W	:
maVoiture.accélérer(	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
particulière	A.qual.f.s	particulier
,	PONCT.W	,
appelée	VK.f.s	appeler
constructeur	N.C.m.s	constructeur
,	PONCT.W	,
permet	V.P.3.s	permettre
d'	P	de
initialiser	VW	initialiser
l'	D.def.m.s	le
état	N.C.m.s	état
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
à	P	à
sa	D.poss.f.s	son
création	N.C.f.s	création
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
sert	V.P.3.s	servir
à	P	à
regrouper	VW	regrouper
sous	P	sous
une	D.ind.f.s	un
même	A.ind.f.s	même
catégorie	N.C.f.s	catégorie
et	C.C	et
un	D.ind.m.s	un
même	A.ind.m.s	même
nom	N.C.m.s	nom
générique	V.P.3.s	génériquer
les	D.def.m.p	le
objets	N.C.m.p	objet
partageant	VG	partager
le	D.def.m.s	le
même	A.qual.m.s	même
type	N.C.m.s	type
d'	P	de
état	N.C.m.s	état
et	C.C	et
le	D.def.m.s	le
même	A.qual.m.s	même
comportement	N.C.m.s	comportement
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
est	V.P.3.s	être
donc	ADV.-	donc
un	D.ind.m.s	un
type	N.C.m.s	type
d'	P	de
objet	N.C.m.s	objet
;	PONCT.W	;
on	CL.suj.3.m.s	on
dit	V.P.3.s	dire
réciproquement	ADV.-	réciproquement
qu'	C.S	que
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
classe	N.C.f.s	classe
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
classe	N.C.f.s	classe
:	PONCT.W	:
Automobile	N.C.m.s	automobile
=	PONCT.W	=
{	D.card.m.s	{
attributs	N.C.m.p	attribut
:	PONCT.W	:
marque	N.C.f.s	marque
,	PONCT.W	,
couleur	N.C.f.s	couleur
,	PONCT.W	,
consommation	N.C.f.s	consommation
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.W	.
;	PONCT.W	;
méthodes	N.C.f.p	méthode
:	PONCT.W	:
démarrer	VW	démarrer
,	PONCT.W	,
arrêter	VW	arrêter
,	PONCT.W	,
accélérer	VW	accélérer
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.
}	N.C.m.s	}
Les	D.def.f.p	le
classes	N.C.f.p	classe
peuvent	V.P.3.p	pouvoir
être	VW	être
organisées	VK.f.p	organiser
en	P	en
hiérarchies	N.C.f.p	hiérarchie
.	PONCT.S	.

Chaque	D.ind.f.s	chaque
classe	N.C.f.s	classe
hérite	V.P.3.s	hériter
alors	ADV.-	alors
des	D.ind.m.p	du
attributs	N.C.m.p	attribut
et	C.C	et
méthodes	N.C.f.p	méthode
des	P+D.def.f.p	du
classes	N.C.f.p	classe
situées	VK.f.p	situer
sur	P	sur
sa	D.poss.f.s	son
ligne	N.C.f.s	ligne
hiérarchique	A.qual.f.s	hiérarchique
ascendante	A.qual.f.s	ascendant
.	PONCT.S	.

Réaliser	VW	réaliser
un	D.ind.m.s	un
programme	N.C.m.s	programme
dans	P	dans
un	D.ind.m.s	un
langage	N.C.m.s	langage
orienté	VK.m.s	orienter
objets	N.C.m.p	objet
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
:	PONCT.W	:
-	PONCT.W	-
modéliser	VW	modéliser
par	P	par
des	D.ind.f.p	du
classes	N.C.f.p	classe
les	D.def.m.p	le
objets	N.C.m.p	objet
que	PRO.rel.m.p	que
l'	CL.obj.3.m.s	le
on	CL.suj.3.m.s	on
a	V.P.3.s	avoir
à	P	à
manipuler	VW	manipuler
-	PONCT.W	-
écrire	VW	écrire
ces	D.dem.f.p	ce
classes	N.C.f.p	classe
dans	P	dans
le	D.def.m.s	le
langage	N.C.m.s	langage
de	P	de
programmation	N.C.f.s	programmation
orienté	VK.m.s	orienter
objets	N.C.m.p	objet
-	PONCT.W	-
créer	VW	créer
des	D.ind.m.p	du
objets	N.C.m.p	objet
instances	N.C.f.p	instance
de	P	de
ces	D.dem.f.p	ce
classes	N.C.f.p	classe
-	PONCT.W	-
communiquer	VW	communiquer
avec	P	avec
ces	D.dem.m.p	ce
objets	N.C.m.p	objet
en	P	en
invoquant	VG	invoquer
leurs	D.poss.f.p	leur
méthodes	N.C.f.p	méthode
.	PONCT.S	.

[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
Java	N.P.m.s	Java
est	V.P.3.s	être
né	VK.m.s	naître
en	P	en
1995	N.card.f.s	@card@
dans	P	dans
l'	D.def.f.s	le
entreprise	N.C.f.s	entreprise
californienne	A.qual.f.s	californien
Sun	P	sun
Microsystems	N.P.x.s	Microsystems
.	PONCT.S	.

Il	CL.suj.3.m.s	il
a	V.P.3.s	avoir
été	VK.m.s	être
conçu	VK.m.s	concevoir
par	P	par
James	N.P.m.s	James
GOSLING	N.P.m.s	Gosling
&	PONCT.W	&
al	ET	al
.	PONCT.S	.

2	A.card.m.s	@card@
PROGRAMME	N.C.m.s	programme
JAVA	N.P.m.s	Java
2.1	A.card.m.s	@card@
Style	N.C.m.p	style
de	P	de
programmation	N.C.f.s	programmation
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
largement	ADV.-	largement
admis	VK.m.s	admettre
que	C.S	que
le	D.def.m.s	le
respect	N.C.m.s	respect
de	P	de
la	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
et	C.C	et
un	D.ind.m.s	un
programme	N.C.m.s	programme
qui	PRO.rel.m.s	qui
fonctionne	V.P.3.s	fonctionner
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
des	D.ind.m.p	du
critères	N.C.m.p	critère
de	P	de
qualité	N.C.f.s	qualité
suffisants	A.qual.m.p	suffisant
pour	P	pour
un	D.ind.m.s	un
programme	N.C.m.s	programme
.	PONCT.S	.

L'	D.def.f.s	le
expérience	N.C.f.s	expérience
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
a	V.P.3.s	avoir
ainsi	ADV.-	ainsi
conduit	VK.m.s	conduire
à	P	à
établir	VW	établir
des	D.ind.f.p	du
recommandations	N.C.f.p	recommandation
de	P	de
style	N.C.m.s	style
.	PONCT.S	.

Les	CL.obj.3.m.p	le
respecter	VW	respecter
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
techniquement	ADV.-	techniquement
obligatoire	A.qual.m.s	obligatoire
mais	C.C	mais
contribue	V.P.3.s	contribuer
à	P	à
améliorer	VW	améliorer
la	D.def.f.s	le
lisibilité	N.C.f.s	lisibilité
des	P+D.def.m.p	du
programmes	N.C.m.p	programme
.	PONCT.S	.

Ces	D.dem.f.p	ce
conventions	N.C.f.p	convention
visent	V.P.3.p	viser
en	P	en
fait	N.C.m.s	fait
une	D.ind.f.s	un
finalité	N.C.f.s	finalité
économique	A.qual.f.s	économique
:	PONCT.W	:
contribuer	VW	contribuer
à	P	à
produire	VW	produire
des	D.ind.m.p	du
programmes	N.C.m.p	programme
plus	ADV.-	plus
facilement	ADV.-	facilement
maintenables	A.qual.m.p	maintenable
pendant	P	pendant
toute	A.ind.f.s	tout
leur	D.poss.f.s	leur
durée	N.C.f.s	durée
de	P	de
vie	N.C.f.s	vie
.	PONCT.S	.

Dans	P	dans
les	D.def.m.p	le
chapitres	N.C.m.p	chapitre
suivants	A.qual.m.p	suivant
,	PONCT.W	,
les	D.def.m.p	le
exemples	N.C.m.p	exemple
respectent	V.P.3.p	respecter
les	D.def.f.p	le
conventions	N.C.f.p	convention
de	P	de
style	N.C.m.s	style
préconisées	VK.f.p	préconiser
par	P	par
java.sun.com	N.C.m.s	<unknown>
2.2	D.card.m.p	@card@
Identificateurs	N.C.m.p	identificateur
Quelques	D.ind.f.p	quelque
règles	N.C.f.p	règle
et	C.C	et
recommandations	N.C.f.p	recommandation
pour	P	pour
nommer	VW	nommer
les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
:	PONCT.W	:
+	P	p
Le	D.def.m.s	le
caractère	N.C.m.s	caractère
minuscule-majuscule	A.qual.m.s	minuscule-majuscule
des	P+D.def.m.p	du
caractères	N.C.m.p	caractère
est	V.P.3.s	être
discriminant	A.qual.m.s	discriminant
(	PONCT.W	(
règle	N.C.f.s	règle
du	P+D.def.m.s	du
langage	N.C.m.s	langage
Java	N.P.m.s	Java
)	PONCT.W	)
+	P	p
Les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
d'	P	de
objets	N.C.m.p	objet
,	PONCT.W	,
de	P	de
champs	N.C.m.p	champ
et	C.C	et
de	P	de
méthodes	N.C.f.p	méthode
commencent	V.P.3.p	commencer
toujours	ADV.-	toujours
par	P	par
une	D.ind.f.s	un
minuscule	N.C.f.s	minuscule
(	PONCT.W	(
par	P	par
convention	N.C.f.s	convention
)	PONCT.W	)
+	P	p
Les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
de	P	de
classe	N.C.f.s	classe
(	PONCT.W	(
et	C.C	et
d'	P	de
interface	N.C.f.s	interface
)	PONCT.W	)
commencent	V.P.3.p	commencer
toujours	ADV.-	toujours
par	P	par
une	D.ind.f.s	un
majuscule	N.C.f.s	majuscule
(	PONCT.W	(
par	P	par
convention	N.C.f.s	convention
)	PONCT.W	)
+	P	p
Les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
de	P	de
constantes	N.C.f.p	constante
sont	V.P.3.p	être
tout	ADV.-	tout
en	P	en
majuscules	N.C.m.p	majuscule
(	PONCT.W	(
par	P	par
convention	N.C.f.s	convention
)	PONCT.W	)
+	P	p
Les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
de	P	de
méthode	N.C.f.s	méthode
commencent	V.P.3.p	commencer
par	P	par
un	D.ind.m.s	un
verbe	N.C.m.s	verbe
(	PONCT.W	(
recommandation	N.C.f.s	recommandation
)	PONCT.W	)
2.3	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
2.3.1	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
visent	V.P.3.p	viser
à	P	à
décrire	VW	décrire
la	D.def.f.s	le
spécification	N.C.f.s	spécification
du	P+D.def.m.s	du
code	N.C.m.s	code
,	PONCT.W	,
sans	P	sans
considération	N.C.f.s	considération
d'	P	de
implémentation	N.C.f.s	implémentation
.	PONCT.S	.

Ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
destinés	VK.m.p	destiner
à	P	à
des	D.ind.m.p	du
développeurs	N.C.m.p	développeur
et	C.C	et
utilisateurs	N.C.m.p	utilisateur
qui	PRO.rel.m.p	qui
n'	ADV.neg	ne
auraient	V.C.3.p	avoir
pas	ADV.neg	pas
nécessairement	ADV.-	nécessairement
les	D.def.f.p	le
codes	N.C.f.p	code
sources	N.C.f.p	source
sous	P	sous
la	D.def.f.s	le
main	N.C.f.s	main
.	PONCT.S	.

Ces	D.dem.m.p	ce
commentaires	N.C.m.p	commentaire
peuvent	V.P.3.p	pouvoir
être	VW	être
automatiquement	ADV.-	automatiquement
extraits	VK.m.p	extraire
par	P	par
l'	D.def.m.s	le
utilitaire	N.C.m.s	utilitaire
javadoc	A.qual.m.s	javadoc
pour	P	pour
en	CL.obj.3.m.s	en
constituer	VW	constituer
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
de	P	de
documentation	N.C.f.s	documentation
en	P	en
HTML	N.P.m.s	<unknown>
.	PONCT.S	.

La	D.def.f.s	le
documentation	N.C.f.s	documentation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
devrait	V.C.3.s	devoir
inclure	VW	inclure
a	V.P.3.s	avoir
minima	ADV.-	minima
:	PONCT.W	:
-	PONCT.W	-
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
,	PONCT.W	,
sa	D.poss.f.s	son
fonctionnalité	N.C.f.s	fonctionnalité
et	C.C	et
ses	D.poss.f.p	son
grandes	A.qual.f.p	grand
caractéristiques	N.C.f.p	caractéristique
,	PONCT.W	,
son	D.poss.m.s	son
auteur	N.C.m.s	auteur
,	PONCT.W	,
sa	D.poss.f.s	son
version	N.C.f.s	version
-	PONCT.W	-
une	D.ind.f.s	un
documentation	N.C.f.s	documentation
pour	P	pour
chaque	D.ind.m.s	chaque
constructeur	N.C.m.s	constructeur
et	C.C	et
chaque	D.ind.f.s	chaque
méthode	N.C.f.s	méthode
La	D.def.f.s	le
documentation	N.C.f.s	documentation
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
devrait	V.C.3.s	devoir
inclure	VW	inclure
a	V.P.3.s	avoir
minima	ADV.-	minima
:	PONCT.W	:
-	PONCT.W	-
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
,	PONCT.W	,
sa	D.poss.f.s	son
fonctionnalité	N.C.f.s	fonctionnalité
,	PONCT.W	,
une	D.ind.f.s	un
description	N.C.f.s	description
de	P	de
chaque	D.ind.m.s	chaque
paramètre	N.C.m.s	paramètre
et	C.C	et
de	P	de
la	D.def.f.s	le
valeur	N.C.f.s	valeur
retournée	VK.f.s	retourner
,	PONCT.W	,
les	D.def.f.p	le
exceptions	N.C.f.p	exception
susceptibles	A.qual.f.p	susceptible
d'	P	de
être	VW	être
lancées	VK.f.p	lancer
par	P	par
cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
Syntaxe	N.P.m.s	Syntaxe
:	PONCT.W	:
/**	N.C.m.p	<unknown>
*	N.C.m.p	*
commentaires	N.C.m.p	commentaire
*/	C.C	ce
/**	N.C.m.p	<unknown>
commentaire	A.qual.m.s	commentaire
*/	PONCT.W	<unknown>
Principales	A.qual.f.p	principal
balises	N.C.f.p	balise
de	P	de
commentaires	N.C.m.p	commentaire
prédéfinies	VK.f.p	prédéfinir
:	PONCT.W	:
@author	N.P.m.s	<unknown>
@version	N.C.f.s	çversion
@param	N.P.m.s	<unknown>
@return	ET	<unknown>
@see	ET	<unknown>
@throws	ET	<unknown>
2.3.2	D.card.m.p	@card@
Commentaires	N.C.m.p	commentaire
d'	P	de
implémentation	N.C.f.s	implémentation
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
d'	P	de
implémentation	N.C.f.s	implémentation
visent	V.P.3.p	viser
à	P	à
expliciter	VW	expliciter
(	PONCT.W	(
sans	P	sans
paraphraser	VW	paraphraser
)	PONCT.W	)
le	D.def.m.s	le
code	N.C.m.s	code
et	C.C	et
les	D.def.m.p	le
choix	N.C.m.p	choix
d'	P	de
implémentation	N.C.f.s	implémentation
.	PONCT.S	.

Le	D.def.m.s	le
choix	N.C.m.s	choix
des	P+D.def.m.p	du
identificateurs	N.C.m.p	identificateur
et	C.C	et
la	D.def.f.s	le
clarté	N.C.f.s	clarté
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
devrait	V.C.3.s	devoir
permettre	VW	permettre
de	P	de
minimiser	VW	minimiser
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
tels	A.qual.m.p	tel
commentaires	N.C.m.p	commentaire
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
/*	D.card.m.p	<unknown>
*	N.C.m.p	*
commentaires	N.C.m.p	commentaire
*/	C.C	ce
/*	ET	<unknown>
commentaire	A.qual.m.s	commentaire
*/	PONCT.W	<unknown>
//	PONCT.W	@card@
commentaire	N.C.m.s	commentaire
2.4	A.card.m.s	@card@
Fichier	N.P.m.s	Fichier
JAVA	N.P.m.s	Java
2.4.1	A.card.m.s	@card@
Nom	N.P.m.s	Nom
et	C.C	et
contenu	VK.m.s	contenir
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
java	N.C.m.s	java
+	P	p
Chaque	D.ind.m.s	chaque
fichier	N.C.m.s	fichier
source	N.C.f.s	source
java	N.C.f.s	java
contient	V.P.3.s	contenir
une	D.ind.f.s	un
seule	A.ind.f.s	seul
classe	N.C.f.s	classe
publique	A.qual.f.s	publique
.	PONCT.S	.

L'	D.def.f.s	le
organisation	N.C.f.s	organisation
recommandée	VK.f.s	recommander
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
1	N.card.m.s	@card@
)	PONCT.W	)
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
de	P	de
début	N.C.m.s	début
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
un	D.ind.m.s	un
commentaire	N.C.m.s	commentaire
de	P	de
documentation	N.C.f.s	documentation
comprenant	VG	comprendre
typiquement	ADV.-	typiquement
:	PONCT.W	:
l'	D.def.m.s	le
intitulé	N.C.m.s	intitulé
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
et	C.C	et
un	D.ind.m.s	un
descriptif	N.C.m.s	descriptif
sommaire	A.qual.m.s	sommaire
de	P	de
sa	D.poss.f.s	son
fonction	N.C.f.s	fonction
,	PONCT.W	,
l'	D.def.m.s	le
auteur	N.C.m.s	auteur
,	PONCT.W	,
la	D.def.f.s	le
version	N.C.f.s	version
2	A.card.f.s	@card@
)	PONCT.W	)
Les	D.def.f.p	le
instructions	N.C.f.p	instruction
de	P	de
paquetage	N.C.m.s	paquetage
3	A.card.m.s	@card@
)	PONCT.W	)
Les	D.def.f.p	le
instructions	N.C.f.p	instruction
d'	P	de
import	N.C.m.s	import
4	PRO.card.f.p	@card@
)	PONCT.W	)
Les	D.def.f.p	le
déclarations	N.C.f.p	déclaration
des	P+D.def.f.p	du
classes	N.C.f.p	classe
+	P	p
Un	D.ind.m.s	un
fichier	N.C.m.s	fichier
devrait	V.C.3.s	devoir
contenir	VW	contenir
moins	ADV.-	moins
de	P	de
2000	D.card.f.p	@card@
lignes	N.C.f.p	ligne
et	C.C	et
des	D.ind.f.p	du
lignes	N.C.f.p	ligne
de	P	de
moins	ADV.-	moins
de	P	de
80	D.card.m.p	@card@
caractères	N.C.m.p	caractère
,	PONCT.W	,
voire	C.C	voire
70	PRO.card.f.p	@card@
pour	P	pour
les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
(	PONCT.W	(
recommandation	N.C.f.s	recommandation
)	PONCT.W	)
+	P	p
Un	D.ind.m.s	un
fichier	N.C.m.s	fichier
Java	N.P.m.s	Java
porte	V.P.3.s	porter
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
publique	A.qual.f.s	publique
qu'	PRO.rel.f.s	que
il	CL.suj.3.m.s	il
contient	V.P.3.s	contenir
;	PONCT.W	;
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
source	V.P.3.s	sourcer
Java	N.P.m.s	Java
ont	V.P.3.p	avoir
pour	P	pour
suffixe	A.qual.m.s	suffixe
.java	N.P.m.s	<unknown>
;	PONCT.W	;
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
Java	N.P.m.s	Java
compilés	VK.m.p	compiler
ont	V.P.3.p	avoir
pour	P	pour
suffixe	A.qual.m.s	suffixe
.class	N.C.m.p	<unknown>
(	PONCT.W	(
par	P	par
convention	N.C.f.s	convention
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
suffixes	N.C.m.p	suffixe
.java	N.C.f.s	ajava
et	C.C	et
.class	N.C.m.p	<unknown>
sont	V.P.3.p	être
imposés	VK.m.p	imposer
par	P	par
les	D.def.m.p	le
outils	N.C.m.p	outil
.	PONCT.S	.

2.4.2	D.card.f.p	@card@
Compilation	N.C.f.s	compilation
,	PONCT.W	,
exécution	N.C.f.s	exécution
,	PONCT.W	,
génération	N.C.f.s	génération
de	P	de
la	D.def.f.s	le
documentation	N.C.f.s	documentation
Depuis	P	depuis
la	D.def.f.s	le
ligne	N.C.f.s	ligne
de	P	de
commande	N.C.f.s	commande
:	PONCT.W	:
+	P	p
Compilation	N.C.f.s	compilation
:	PONCT.W	:
javac	N.C.m.s	javac
fileName.java	N.P.m.s	<unknown>
+	P	p
Exécution	N.C.f.s	exécution
:	PONCT.W	:
java	ET	java
fileName	N.C.m.s	filename
//	PONCT.W	@card@
fichier	N.C.m.s	fichier
du	P+D.def.m.s	du
main	N.C.m.s	main
+	P	p
Génération	N.C.f.s	génération
de	P	de
la	D.def.f.s	le
documentation	N.C.f.s	documentation
:	PONCT.W	:
javadoc	N.C.m.s	javadoc
*	N.C.m.s	*
.	PONCT.S	.

java	V.J.3.s	javer
Pour	P	pour
avoir	VW	avoir
une	D.ind.f.s	un
documentation	N.C.f.s	documentation
"	PONCT.W	"
programmeur	N.C.m.s	programmeur
"	PONCT.W	"
complète	A.qual.f.s	complet
(	PONCT.W	(
y	CL.obj.3.m.s	y
compris	VK.m.s	comprendre
les	D.def.m.p	le
membres	N.C.m.p	membre
privés	A.qual.m.p	privé
)	PONCT.W	)
de	P	de
toutes	A.ind.f.p	tout
les	D.def.f.p	le
classes	N.C.f.p	classe
et	C.C	et
de	P	de
leur	D.poss.f.s	leur
interaction	N.C.f.s	interaction
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
lancer	VW	lancer
cette	D.dem.f.s	ce
commande	N.C.f.s	commande
avec	P	avec
l'	D.def.f.s	le
option	N.C.f.s	option
-	PONCT.W	-
private	A.qual.f.s	privat
.	PONCT.S	.

2.5	D.card.m.p	@card@
Paquetages	N.C.m.p	paquetage
Un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
(	PONCT.W	(
package	N.C.m.s	package
en	P	en
anglais	N.C.m.s	anglais
)	PONCT.W	)
est	V.P.3.s	être
une	D.ind.f.s	un
bibliothèque	N.C.f.s	bibliothèque
de	P	de
classes	N.C.f.p	classe
organisées	VK.f.p	organiser
de	P	de
façon	N.C.f.s	façon
hiérarchique	A.qual.f.s	hiérarchique
.	PONCT.S	.

Le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
est	V.P.3.s	être
nécessairement	ADV.-	nécessairement
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
son	D.poss.m.s	son
répertoire	N.C.m.s	répertoire
.	PONCT.S	.

Le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
est	V.P.3.s	être
toujours	ADV.-	toujours
en	P	en
lettres	N.C.f.p	lettre
minuscules	A.qual.f.p	minuscule
(	PONCT.W	(
par	P	par
convention	N.C.f.s	convention
)	PONCT.W	)
.	PONCT.S	.

Différents	A.qual.m.p	différent
paquetages	N.C.m.p	paquetage
peuvent	V.P.3.p	pouvoir
être	VW	être
rassemblés	VK.m.p	rassembler
et	C.C	et
compactés	VK.m.p	compacter
dans	P	dans
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
d'	P	de
archive	N.C.f.s	archive
.zip	N.P.x.s	<unknown>
ou	C.C	ou
.jar	P	<unknown>
2.5.1	D.card.m.p	@card@
Paquetages	N.C.m.p	paquetage
standard	V.P.3.s	standard
La	D.def.f.s	le
variable	N.C.f.s	variable
d'	P	de
environnement	N.C.m.s	environnement
CLASSPATH	N.P.m.s	Classpath
indique	V.P.3.s	indiquer
à	P	à
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
où	PRO.rel.f.s	où
trouver	VW	trouver
les	D.def.f.p	le
classes	N.C.f.p	classe
et	C.C	et
bibliothèques	N.C.f.p	bibliothèque
de	P	de
classes	N.C.f.p	classe
dont	PRO.rel.f.p	dont
elle	CL.suj.3.f.s	elle
a	V.P.3.s	avoir
besoin	N.C.m.s	besoin
.	PONCT.S	.

Hiérarchie	N.C.f.s	hiérarchie
partielle	A.qual.f.s	partiel
des	P+D.def.m.p	du
paquetages	N.C.m.p	paquetage
standard	A.qual.m.s	standard
:	PONCT.W	:
java	ET	java
applet	ET	applet
awt	ET	awt
io	ET	io
lang	ET	lang
util	A.qual.m.s	util
event	V.P.3.p	evoir
Paquetages	ADV.-	paquetages
les	D.def.m.p	le
plus	ADV.-	plus
immédiatement	ADV.-	immédiatement
utiles	A.qual.m.p	utile
Paquetage	N.P.m.s	Paquetage
Contenu	VK.m.s	contenir
java.io	ET	javalio
Classes	N.C.f.p	classe
relatives	A.qual.f.p	relatif
aux	P+D.def.f.p	au
entrées/sorties	N.C.f.p	<unknown>
java.lang	N.C.m.s	javallang
Classes	N.C.f.p	classe
fondamentales	A.qual.f.p	fondamental
:	PONCT.W	:
types	N.C.m.p	type
basiques	A.qual.f.p	basique
(	PONCT.W	(
classes	N.C.f.p	classe
enveloppes	N.C.f.p	enveloppe
,	PONCT.W	,
String	N.P.m.s	String
,	PONCT.W	,
StringBuffer	N.P.m.s	Stringbuffer
,	PONCT.W	,
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
)	PONCT.W	)
,	PONCT.W	,
classe	V.P.3.s	classer
Math	N.P.m.s	Math
,	PONCT.W	,
...	PONCT.W	<unknown>
java.util	N.C.m.s	javalutil
Classes	N.P.m.s	Classes
utilitaires	A.qual.f.p	utilitaire
diverses	A.qual.f.p	divers
:	PONCT.W	:
collections	N.C.f.p	collection
(	PONCT.W	(
ArrayList	N.P.m.s	Arraylist
,	PONCT.W	,
Vector	N.P.m.s	Vector
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
,	PONCT.W	,
classe	N.C.f.s	classe
Random	N.P.m.s	Random
,	PONCT.W	,
gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
dates	N.C.f.p	date
et	C.C	et
des	P+D.def.f.p	du
heures	N.C.f.p	heure
,	PONCT.W	,
...	PONCT.S	<unknown>
2.5.2	D.card.f.p	@card@
Affectation	N.C.f.s	affectation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
à	P	à
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
Pour	P	pour
qu'	C.S	que
une	D.ind.f.s	un
classe	N.C.f.s	classe
appartienne	A.qual.f.s	appartien
à	P	à
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
déclarer	VW	déclarer
le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
d'	P	de
appartenance	N.C.f.s	appartenance
en	P	en
tête	N.C.f.s	tête
de	P	de
fichier	N.C.m.s	fichier
source	N.C.f.s	source
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
package	N.C.m.s	package
packageName	N.C.m.s	packagename
;	PONCT.W	;
2.5.3	D.card.f.p	@card@
Importation	N.C.f.s	importation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
d'	P	de
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
Pour	P	pour
utiliser	VW	utiliser
une	D.ind.f.s	un
classe	N.C.f.s	classe
définie	VK.f.s	définir
dans	P	dans
un	D.ind.m.s	un
paquetage	N.C.m.s	paquetage
autre	A.qual.m.s	autre
que	C.S	que
celui	PRO.dem.m.s	celui
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
d'	P	de
utilisation	N.C.f.s	utilisation
,	PONCT.W	,
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
doit	V.P.3.s	devoir
être	VW	être
importée	VK.f.s	importer
en	P	en
tête	N.C.f.s	tête
de	P	de
fichier	N.C.m.s	fichier
source	N.C.f.s	source
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
import	N.C.m.s	import
packageName.CTassName	N.C.m.s	<unknown>
;	PONCT.W	;
import	ET	import
packageName.*	N.C.m.s	packagenamenà
;	PONCT.W	;
//	PONCT.W	@card@
forme	N.C.f.s	forme
déconseillée	VK.f.s	déconseiller
car	C.C	car
peu	ADV.-	peu
informative	A.qual.f.s	informatif
Exemples	N.C.m.p	exemple
:	PONCT.W	:
import	ET	import
java.util.ArrayList	ET	<unknown>
;	PONCT.W	;
import	ET	import
java.util.lterator	N.C.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.io.*	ET	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
forme	N.C.f.s	forme
déconseillée	VK.f.s	déconseiller
car	C.C	car
peu	ADV.-	peu
informative	A.qual.f.s	informatif
Le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
java.lang	A.qual.m.s	javallang
est	V.P.3.s	être
importé	VK.m.s	importer
automatiquement	ADV.-	automatiquement
.	PONCT.S	.

3	D.card.m.p	@card@
CLASSES	N.C.f.p	classe
et	C.C	et
INTERFACES	N.C.f.p	interface
3.1	D.card.m.p	@card@
Classes	N.C.f.p	classe
standard	ET	standard
Syntaxe	N.P.m.s	Syntaxe
:	PONCT.W	:
public	ET	public
class	ET	class
ClassName	N.P.m.s	Classname
{	P	à
Fields	N.P.m.s	Fields
Constructors	N.C.m.p	constructor
Methods	N.P.m.s	Methods
//	PONCT.W	@card@
accessor	ET	accessor
methods	N.C.m.p	method
...	PONCT.W	<unknown>
//	PONCT.W	@card@
mutator	ET	mutator
methods	N.C.m.p	method
...	PONCT.W	<unknown>
}	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
/**	N.C.m.p	<unknown>
*	ET	*
Class	N.P.m.s	Class
RationalNumber	N.P.m.s	Rationalnumber
-	PONCT.W	-
Represents	N.C.m.p	represent
a	V.P.3.s	avoir
rational	A.qual.m.s	rational
number	N.C.m.s	number
num	N.C.m.s	num
/	PONCT.W	@card@
den	P	den
*	N.C.m.s	*
*	N.C.m.p	*
@author	N.P.m.s	<unknown>
AM	N.P.m.s	Am
*	PONCT.W	*
@version	N.C.f.s	çversion
1.0	D.card.m.p	@card@
*	N.C.m.p	*
*/	PONCT.W	<unknown>
public	ET	public
class	ET	class
RationalNumber	N.P.m.s	Rationalnumber
{	P	à
//	PONCT.W	@card@
FIELDS	N.P.x.s	Fields
private	A.qual.f.s	privat
int	ET	int
numerator	N.C.m.s	<unknown>
;	PONCT.W	;
private	A.qual.f.s	privat
int	ET	int
denominator	ET	denominator
;	PONCT.W	;
private	ET	privat
boolean	ET	boolean
reduced	ET	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
CONSTRUCTORS	N.P.x.s	Constructors
/**	ET	éùà
Construct	ET	construct
a	V.P.3.s	avoir
rational	A.qual.m.s	rational
number	ET	number
initialized	ET	<unknown>
to	ET	to
0/1	D.card.m.s	@card@
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
RationalNumber(	N.P.m.s	<unknown>
)	PONCT.W	)
{	P+D.def.m.s	c
numerator	N.C.m.s	<unknown>
=	PONCT.W	=
0	A.card.m.s	@card@
;	PONCT.W	;
denominator	N.C.m.s	denominator
=	PONCT.W	=
1	A.card.m.s	@card@
;	PONCT.W	;
reduced	N.C.m.s	<unknown>
=	P	à
true	N.C.f.s	true
;	PONCT.W	;
}	N.C.m.p	}
//	PONCT.W	@card@
METHODS	N.P.x.s	Methods
-	PONCT.W	-
ACCESSORS	N.P.x.s	Accessors
/**	ET	éùà
Get	N.P.m.s	Get
the	ET	the
numerator	ET	<unknown>
of	ET	of
this	ET	thi
rational	A.qual.m.s	rational
number	ET	number
*/	C.C	ce
public	N.C.m.s	public
int	ET	int
getNumerator(	ET	<unknown>
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
numerator	A.qual.m.s	<unknown>
;	PONCT.W	;
}	ET	}
/**	ET	éùà
Get	ET	get
the	ET	the
denominator	ET	denominator
of	ET	of
this	ET	thi
rational	A.qual.m.s	rational
number	ET	number
*/	C.C	ce
public	N.C.m.s	public
int	ET	int
getDenominator(	ET	<unknown>
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
denominator	A.qual.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.p	}
/**	ET	éùà
Return	ET	return
true	V.P.3.s	truer
iff	ET	iff
the	ET	the
numerator/denominator	N.C.m.s	<unknown>
form	ET	form
is	CL.refl.3.m.s	<unknown>
irreducible	A.qual.m.s	irreducible
*/	PONCT.W	<unknown>
public	ET	public
boolean	ET	boolean
isReduced(	N.P.x.s	<unknown>
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
reduced	A.qual.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
METHODS	N.P.x.s	Methods
-	PONCT.W	-
MUTATORS	N.C.m.p	mutator
/**	ET	éùà
Set	D.poss.m.s	son
this	N.C.m.p	thi
rational	A.qual.m.s	rational
number	ET	number
to	ET	to
_numerator/_denominator	ET	<unknown>
*/	PONCT.W	<unknown>
public	ET	public
void	ET	void
setNumber(int	VK.m.s	setnumberçinre
_numerator	N.P.x.s	<unknown>
,	PONCT.W	,
int	ET	int
_denominator	N.P.x.s	<unknown>
)	PONCT.W	)
{	P	à
numerator	N.C.m.s	<unknown>
=	PONCT.W	=
_numerator	N.P.x.s	<unknown>
;	PONCT.W	;
denominator	N.C.m.s	denominator
=	PONCT.W	=
_denominator	N.P.m.s	<unknown>
;	PONCT.W	;
reduced	N.C.m.s	<unknown>
=	PONCT.W	=
false	N.C.f.s	false
;	PONCT.W	;
}	P	à
/**	N.C.m.p	<unknown>
Set	D.poss.m.s	son
this	N.C.m.p	thi
rational	A.qual.m.s	rational
number	ET	number
to	ET	to
a	V.P.3.s	avoir
irreducible	A.qual.m.s	irreducible
*	A.qual.m.s	*
numerator/denominator	N.C.m.s	<unknown>
form	ET	form
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
void	A.qual.m.s	void
reduce(	N.C.m.s	reduceë
)	PONCT.W	)
{	P	à
int	V.J.3.s	enir
divisor	N.C.m.s	divisor
=	PONCT.W	=
greatestCommonDivisor(numerator	N.C.m.s	<unknown>
,	PONCT.W	,
denominator	N.C.m.s	denominator
j	N.C.m.s	j
)	PONCT.W	)
;	PONCT.W	;
numerator	ET	<unknown>
=	PONCT.W	=
numerator	N.C.m.s	<unknown>
/	PONCT.W	@card@
divisor	N.C.m.s	divisor
;	PONCT.W	;
denominator	N.C.m.s	denominator
=	P	à
denominator	N.C.m.s	denominator
/	PONCT.W	@card@
divisor	N.C.m.s	divisor
;	PONCT.W	;
reduced	N.C.m.s	<unknown>
=	PONCT.W	=
true	N.C.f.s	true
;	PONCT.W	;
}	N.C.m.p	}
//	PONCT.W	@card@
METHODS	N.P.x.s	Methods
-	PONCT.W	-
UTILITIES	N.C.f.p	utilitie
/**	ET	éùà
Return	ET	return
the	ET	the
greatest	ET	greatest
common	ET	common
divisor	ET	divisor
of	ET	of
the	ET	the
two	ET	two
integers	ET	integer
*	ET	*
x	D.card.m.p	x
and	ET	and
y	ET	y
*/	PONCT.W	<unknown>
private	N.C.f.s	privat
int	V.J.3.s	enir
greatestCommonDivisor(int	N.C.m.s	<unknown>
x	N.card.m.s	x
,	PONCT.W	,
int	V.J.3.s	enir
y	CL.obj.3.m.s	y
)	PONCT.W	)
{	P	à
int	V.J.3.s	enir
divisor	N.C.m.s	divisor
;	PONCT.W	;
//	PONCT.W	@card@
...	PONCT.W	<unknown>
à	P	à
implémenter	VW	implémenter
...	PONCT.S	<unknown>
return	N.C.m.s	return
divisor	A.qual.m.s	divisor
;	PONCT.W	;
}	P	à
}	N.C.m.s	}
//	PONCT.W	@card@
end	P	end
class	N.C.m.p	class
RationalNumber	N.P.m.s	Rationalnumber
3.2	D.card.f.p	@card@
Classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
et	C.C	et
sous-classes	N.C.m.p	sous-classe
Une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
possède	V.P.3.s	posséder
au	P	au
moins	ADV.-	moins
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
abstraite	A.qual.f.s	abstrait
(	PONCT.W	(
i.e.	ADV.-	<unknown>
sans	P	sans
corps	N.C.m.p	corps
)	PONCT.W	)
est	V.P.3.s	être
abstraite	A.qual.f.s	abstrait
et	C.C	et
doit	V.P.3.s	devoir
être	VW	être
déclarée	VK.f.s	déclarer
avec	P	avec
le	D.def.m.s	le
modificateur	N.C.m.s	modificateur
abstract	A.qual.m.s	abstract
.	PONCT.S	.

Les	D.def.f.p	le
classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
pas	ADV.neg	pas
être	VW	être
instanciées	VK.f.p	instancier
.	PONCT.S	.

Pour	P	pour
pouvoir	VW	pouvoir
créer	VW	créer
des	D.ind.m.p	du
objets	N.C.m.p	objet
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
créer	VW	créer
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
dans	P	dans
laquelle	PRO.rel.f.s	lequel
toutes	A.ind.f.p	tout
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
abstraites	VK.f.p	abstraire
seront	V.F.3.p	être
définies	VK.f.p	définir
:	PONCT.W	:
cette	D.dem.f.s	ce
sous-	P	<unknown>
classe	N.C.f.s	classe
,	PONCT.W	,
non	ADV.neg	non
abstraite	VK.f.s	abstraire
,	PONCT.W	,
pourra	V.F.3.s	pouvoir
alors	ADV.-	alors
être	VW	être
instanciée	VK.f.s	instancier
.	PONCT.S	.

3.2.1	D.card.f.p	@card@
Classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
Syntaxe	N.P.m.s	Syntaxe
:	PONCT.W	:
public	ET	public
abstract	ET	abstract
class	ET	class
ClassName	N.P.m.s	Classname
{	P	à
Fields	N.P.m.s	Fields
Constructors	N.C.m.p	constructor
Methods	N.P.m.s	Methods
}	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
/**	N.C.m.p	<unknown>
*	ET	*
Abstract	ET	abstract
Class	N.P.m.s	Class
Progression	N.C.f.s	progression
*	ET	*
*	N.C.m.p	*
Represents	N.C.m.p	represent
a	V.P.3.s	avoir
real	ET	real
linear	ET	linear
progression	N.C.f.s	progression
of	ET	of
order	VW	order
1	D.card.m.s	@card@
with	N.C.m.s	with
constant	N.C.m.s	constant
*	D.card.m.p	*
coefficients	N.C.m.p	coefficient
*	N.C.m.s	*
*	N.C.m.s	*
@author	N.P.m.s	<unknown>
AM	N.P.m.s	Am
*	PONCT.W	*
@version	N.C.f.s	çversion
1.0	D.card.m.p	@card@
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
abstract	ET	abstract
class	ET	class
Progression	N.C.f.s	progression
{	P	à
//	PONCT.W	@card@
FIELDS	N.P.x.s	Fields
private	A.qual.f.s	privat
double	A.qual.f.s	double
u0	N.card.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
the	ET	the
first	ET	first
term	ET	term
of	ET	of
the	ET	the
progression	N.C.f.s	progression
//	PONCT.W	@card@
CONSTRUCTORS	N.P.x.s	Constructors
/**	ET	éùà
Define	N.P.f.s	Define
a	V.P.3.s	avoir
progression	N.C.f.s	progression
,	PONCT.W	,
the	ET	the
first	ET	first
term	ET	term
of	ET	of
which	ET	which
is	VK.m.s	aller
u0	A.card.m.s	<unknown>
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
Progression(double	N.P.m.s	Progressionçdouble
u0	A.card.m.s	<unknown>
)	PONCT.W	)
{	P+D.def.m.s	c
this.u0	N.C.m.s	<unknown>
=	PONCT.W	=
u0	N.card.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.p	}
//	PONCT.W	@card@
METHODS	N.P.x.s	Methods
/**	ET	éùà
Get	ET	get
the	ET	the
first	ET	first
term	ET	term
of	ET	of
this	ET	thi
progression	N.C.f.s	progression
*/	PONCT.W	<unknown>
public	N.C.m.s	public
double	A.qual.m.s	double
getu0()	N.C.m.s	getu0ë
{	P	à
return	N.C.m.s	return
u0	N.card.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.s	}
/**	N.C.m.p	<unknown>
Given	N.P.m.s	Given
à	P	à
current	A.qual.m.s	current
term	N.C.m.s	term
u(n)	A.qual.m.s	uänç
,	PONCT.W	,
return	ET	return
the	ET	the
next	ET	next
term	ET	term
u(n+1)	N.C.m.s	uänuté
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
abstract	A.qual.m.s	abstract
double	A.qual.m.s	double
nextTerm(double	A.qual.m.s	nexttermädouble
un	D.ind.m.s	un
)	PONCT.W	)
;	PONCT.W	;
/**	ET	éùà
Return	ET	return
the	ET	the
term	ET	term
of	ET	of
rank	ET	rank
n	ET	n
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
double	A.qual.m.s	double
termOfRank(int	N.C.m.s	termofrankçint
n	N.C.m.s	n
)	PONCT.W	)
{	P+D.def.m.s	c
double	A.qual.m.s	double
u	P+D.def.m.s	u
=	N.C.m.s	=
u0	N.card.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
u(n)	D.ind.m.s	uän
double	A.qual.m.s	double
v	N.C.m.s	v
;	PONCT.W	;
//	PONCT.W	@card@
u(n+1)	N.C.m.s	uänuté
for(int	A.qual.m.s	forçint
i	PONCT.W	i
=	P	à
1	N.card.m.s	@card@
;	PONCT.W	;
i	ADV.-	i
<=	P+D.def.m.s	çù
n	N.C.m.s	n
;	PONCT.W	;
i++	ADV.-	iuu
)	PONCT.W	)
{	D.card.m.s	{
v	A.card.m.s	v
=	PONCT.W	=
nextTerm(u)	N.C.m.s	nexttermuë
;	PONCT.W	;
u	P+D.def.m.s	u
=	V.P.3.s	être
v	A.card.m.s	v
;	PONCT.W	;
}	P	à
return	N.C.m.s	return
u	P+D.def.m.s	u
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
end	P	end
class	N.C.m.p	class
Progression	N.C.f.s	progression
3.2.2	D.card.m.p	@card@
Sous-classe	N.P.m.s	Sous-Classe
Syntaxe	N.P.x.s	Syntaxe
:	PONCT.W	:
public	ET	public
class	ET	class
SubclassName	N.P.m.s	Subclassname
extends	ET	extend
SuperclassName	N.P.m.s	Superclassname
{	P	à
Fields	N.P.m.s	Fields
Constructors	N.C.m.p	constructor
Methods	N.P.m.s	Methods
}	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
/**	N.C.m.s	éùà
*	ET	*
Class	N.P.m.s	Class
ArithGeomProgression	N.P.f.s	Arithgeomprogression
*	ET	*
*	N.C.m.p	*
Represents	N.C.m.p	represent
a	V.P.3.s	avoir
real	ET	real
arithmetic-geometric	ET	<unknown>
progression	N.C.f.s	progression
with	ET	with
constant	N.C.m.s	constant
*	N.C.m.s	*
coefficients	N.C.m.p	coefficient
:	PONCT.W	:
u(n+1)	N.C.m.s	uänuté
=	PONCT.W	=
a*u(n)	N.C.m.s	açuën
+	P	p
b	N.C.m.s	b
*	N.C.m.s	*
*	N.C.m.s	*
@author	N.P.m.s	<unknown>
AM	N.P.m.s	Am
*	PONCT.W	*
@version	N.C.f.s	çversion
1.0	D.card.m.p	@card@
*/	PONCT.W	<unknown>
public	ET	public
class	ET	class
ArithGeomProgression	ET	arithgeomprogression
extends	ET	extend
Progression	N.C.f.s	progression
{	P	à
//	PONCT.W	@card@
FIELDS	N.P.x.s	Fields
private	A.qual.f.s	privat
double	A.qual.m.s	double
a	V.P.3.s	avoir
;	PONCT.W	;
//	ET	@card@
multiplying	ET	multiplying
coefficient	V.P.3.p	coefficier
private	A.qual.f.s	privat
double	A.qual.f.s	double
b	N.C.m.s	b
;	PONCT.W	;
//	PONCT.W	@card@
additive	A.qual.f.s	additif
coefficient	V.P.3.p	coefficier
//	PONCT.W	@card@
CONSTRUCTORS	N.P.x.s	Constructors
/**	ET	éùà
Define	ET	define
an	ET	an
arithmetic-geometric	ET	<unknown>
progression	N.C.f.s	progression
*	ET	*
@param	N.P.m.s	<unknown>
u0O	ET	<unknown>
first	ET	first
term	ET	term
of	ET	of
the	ET	the
progression	N.C.f.s	progression
*	ET	*
@param	N.P.m.s	<unknown>
a	V.P.3.s	avoir
multiplying	N.C.m.s	multiplying
coefficient	V.P.3.p	coefficier
*	N.card.m.s	*
@param	N.C.m.s	<unknown>
b	ET	b
additive	A.qual.f.s	additif
coefficient	V.P.3.p	coefficier
*/	PONCT.W	<unknown>
public	N.C.m.s	public
ArithGeomProgression	N.P.f.s	Arithgeomprogression
(	PONCT.W	(
double	A.qual.m.s	double
u0	N.card.m.s	<unknown>
,	PONCT.W	,
double	A.qual.m.s	double
a	V.P.3.s	avoir
,	PONCT.W	,
double	A.qual.m.s	double
b	N.C.m.s	b
)	PONCT.W	)
{	P	à
super	N.C.m.s	super
(	PONCT.W	(
u0	N.card.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
this.a	N.C.m.s	thisaa
=	PONCT.W	=
a	V.P.3.s	avoir
;	PONCT.W	;
this.b	N.C.m.s	thistb
=	PONCT.W	=
b	N.C.m.s	b
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
METHODS	N.P.x.s	Methods
/**	N.C.m.p	<unknown>
Given	N.P.m.s	Given
à	P	à
current	A.qual.m.s	current
term	N.C.m.s	term
u(n)	A.qual.m.s	uänç
,	PONCT.W	,
return	ET	return
the	ET	the
next	ET	next
term	ET	term
u(n+1)	N.C.m.s	uänuté
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
double	A.qual.m.s	double
nextTerm(double	N.C.m.s	nexttermädouble
u	P+D.def.m.s	u
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
a*u	P+D.def.m.s	açu
+	P	p
b	N.C.m.s	b
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
end	P	end
class	N.C.m.p	class
ArithGeomProgression	N.P.x.s	Arithgeomprogression
3.3	D.card.f.p	@card@
Interfaces	N.C.f.p	interface
Remarque	N.C.f.s	remarque
liminaire	A.qual.f.s	liminaire
.	PONCT.S	.

Le	D.def.m.s	le
terme	N.C.m.s	terme
"	PONCT.W	"
interface	A.qual.m.s	interface
"	PONCT.W	"
a	V.P.3.s	avoir
une	D.ind.f.s	un
sémantique	N.C.f.s	sémantique
multiple	A.qual.f.s	multiple
.	PONCT.S	.

Dans	P	dans
le	D.def.m.s	le
cadre	N.C.m.s	cadre
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
en	P	en
Java	N.P.m.s	Java
,	PONCT.W	,
il	CL.suj.3.m.s	il
peut	V.P.3.s	pouvoir
prendre	VW	prendre
,	PONCT.W	,
selon	P	selon
le	D.def.m.s	le
contexte	N.C.m.s	contexte
,	PONCT.W	,
trois	D.card.m.p	trois
sens	N.C.m.p	sens
distincts	A.qual.m.p	distinct
(	PONCT.W	(
même	ADV.-	même
si	ADV.-	si
conceptuellement	ADV.-	conceptuellement
apparentés	VK.m.p	apparenter
)	PONCT.W	)
:	PONCT.W	:
-	PONCT.W	-
au	P+D.def.m.s	au
sens	N.C.m.s	sens
informatique	A.qual.m.s	informatique
commun	A.qual.m.s	commun
:	PONCT.W	:
une	D.ind.f.s	un
interface	N.C.f.s	interface
est	V.P.3.s	être
une	D.ind.f.s	un
"	PONCT.W	"
jonction	N.C.f.s	jonction
entre	P	entre
deux	D.card.m.p	deux
éléments	N.C.m.p	élément
(	PONCT.W	(
matériels	N.C.m.p	matériel
ou	C.C	ou
logiciels	N.C.m.p	logiciel
)	PONCT.W	)
permettant	VG	permettre
l'	D.def.m.s	le
échange	N.C.m.s	échange
d'	P	de
information	N.C.f.s	information
"	PONCT.W	"
;	PONCT.W	;
par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
l'	D.def.f.s	le
interface	N.C.f.s	interface
homme-machine	N.C.m.s	homme-machine
.	PONCT.S	.

-	PONCT.W	-
au	P+D.def.m.s	au
sens	N.C.m.s	sens
programmation	N.C.f.s	programmation
objet	N.C.m.s	objet
:	PONCT.W	:
l'	D.def.f.s	le
interface	N.C.f.s	interface
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
est	V.P.3.s	être
la	D.def.f.s	le
partie	N.C.f.s	partie
visible	A.qual.f.s	visible
publique	A.qual.f.s	publique
de	P	de
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
;	PONCT.W	;
elle	CL.suj.3.f.s	elle
se	CL.refl.3.f.s	se
définit	V.P.3.s	définir
typiquement	ADV.-	typiquement
par	P	par
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.m.p	du
membres	N.C.m.p	membre
(	PONCT.W	(
attributs	N.C.m.p	attribut
,	PONCT.W	,
constructeurs	N.C.m.p	constructeur
,	PONCT.W	,
méthodes	N.C.f.p	méthode
)	PONCT.W	)
non	ADV.neg	non
privés	A.qual.m.p	privé
associés	VK.m.p	associer
à	P	à
leurs	D.poss.m.p	leur
commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
-	PONCT.W	-
au	P+D.def.m.s	au
sens	N.C.m.s	sens
spécifique	A.qual.m.s	spécifique
du	P+D.def.m.s	du
Langage	N.P.m.s	Langage
Java	N.P.m.s	Java
:	PONCT.W	:
une	D.ind.f.s	un
interface	N.C.f.s	interface
est	V.P.3.s	être
une	D.ind.f.s	un
sorte	N.C.f.s	sorte
de	P	de
classe	N.C.f.s	classe
abstraite	A.qual.f.s	abstrait
possédant	VG	posséder
des	D.ind.f.p	du
caractéristiques	N.C.f.p	caractéristique
particulières	A.qual.f.p	particulier
et	C.C	et
qui	PRO.rel.f.s	qui
définit	V.P.3.s	définir
un	D.ind.m.s	un
protocole	N.C.m.s	protocole
de	P	de
comportement	N.C.m.s	comportement
;	PONCT.W	;
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
sens	N.C.m.s	sens
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
défini	VK.m.s	définir
dans	P	dans
cette	D.dem.f.s	ce
section	N.C.f.s	section
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
son	D.poss.m.s	son
contexte	N.C.m.s	contexte
d'	P	de
utilisation	N.C.f.s	utilisation
qui	PRO.rel.m.s	qui
donne	V.P.3.s	donner
sens	N.C.m.s	sens
au	P+D.def.m.s	au
mot	N.C.m.s	mot
interface	A.qual.m.s	interface
.	PONCT.S	.

Les	D.def.f.p	le
interfaces	N.C.f.p	interface
(	PONCT.W	(
au	P+D.def.m.s	au
sens	N.C.m.s	sens
du	P+D.def.m.s	du
Langage	N.P.m.s	Langage
Java	N.P.m.s	Java
)	PONCT.W	)
sont	V.P.3.p	être
des	D.ind.f.p	du
sortes	N.C.f.p	sorte
de	P	de
classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
sans	P	sans
aucun	D.neg.m.s	aucun
détail	N.C.m.s	détail
d'	P	de
implémentation	N.C.f.s	implémentation
et	C.C	et
qui	PRO.rel.f.p	qui
possèdent	V.P.3.p	posséder
un	D.ind.m.s	un
degré	N.C.m.s	degré
d'	P	de
abstraction	N.C.f.s	abstraction
supérieur	A.qual.m.s	supérieur
à	P	à
celui	PRO.dem.m.s	celui
des	P+D.def.f.p	du
classes	N.C.f.p	classe
abstraites	VK.f.p	abstraire
.	PONCT.S	.

Les	D.def.f.p	le
interfaces	N.C.f.p	interface
:	PONCT.W	:
-	PONCT.W	-
ont	V.P.3.p	avoir
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
qui	PRO.rel.f.p	qui
sont	V.P.3.p	être
toutes	PRO.ind.f.p	tout
implicitement	ADV.-	implicitement
abstraites	VK.f.p	abstraire
(	PONCT.W	(
elles	CL.suj.3.f.p	elle
n'	ADV.neg	ne
ont	V.P.3.p	avoir
pas	ADV.neg	pas
de	P	de
corps	N.C.m.p	corps
)	PONCT.W	)
-	PONCT.W	-
à	P	à
noter	VW	noter
qu'	C.S	que
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
recommandé	VK.m.s	recommander
d'	P	de
ajouter	VW	ajouter
le	D.def.m.s	le
modificateur	N.C.m.s	modificateur
abstract	A.qual.m.s	abstract
puisqu'	C.S	puisque
il	CL.suj.3.m.s	il
est	V.P.3.s	être
implicite	A.qual.m.s	implicite
;	PONCT.W	;
-	PONCT.W	-
ne	ADV.neg	ne
possèdent	V.P.3.p	posséder
pas	ADV.neg	pas
de	P	de
champs	N.C.m.p	champ
,	PONCT.W	,
à	P	à
l'	D.def.f.s	le
exception	N.C.f.s	exception
éventuelle	A.qual.f.s	éventuel
de	P	de
constantes	N.C.f.p	constante
de	P	de
classe	N.C.f.s	classe
(	PONCT.W	(
implicitement	ADV.-	implicitement
static	A.qual.m.s	static
final	A.qual.m.s	final
)	PONCT.W	)
assignées	VK.f.p	assigner
;	PONCT.W	;
-	PONCT.W	-
ses	D.poss.m.p	son
membres	N.C.m.p	membre
sont	V.P.3.p	être
implicitement	ADV.-	implicitement
publics	A.qual.m.p	public
si	C.S	si
l'	D.def.f.s	le
interface	N.C.f.s	interface
est	V.P.3.s	être
publique	A.qual.f.s	publique
.	PONCT.S	.

Une	D.ind.f.s	un
interface	N.C.f.s	interface
spécifie	V.P.3.s	spécifier
la	D.def.f.s	le
signature	N.C.f.s	signature
minimale	A.qual.f.s	minimal
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
l'	CL.obj.3.f.s	la
implémente	V.P.3.s	implémenter
.	PONCT.S	.

Une	D.ind.f.s	un
interface	N.C.f.s	interface
est	V.P.3.s	être
donc	ADV.-	donc
un	D.ind.m.s	un
contrat	N.C.m.s	contrat
à	P	à
respecter	VW	respecter
.	PONCT.S	.

Quand	C.S	quand
une	D.ind.f.s	un
classe	N.C.f.s	classe
implémente	V.P.3.s	implémenter
une	D.ind.f.s	un
interface	N.C.f.s	interface
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
s'	CL.refl.3.f.s	se
engage	V.P.3.s	engager
à	P	à
se	CL.refl.3.f.s	se
conformer	VW	conformer
à	P	à
cette	D.dem.f.s	ce
interface	N.C.f.s	interface
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
implémenter	VW	implémenter
plusieurs	D.ind.f.p	plusieurs
interfaces	N.C.f.p	interface
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
définit	V.P.3.s	définir
un	D.ind.m.s	un
type	N.C.m.s	type
et	C.C	et
son	D.poss.f.s	son
implémentation	N.C.f.s	implémentation
;	PONCT.W	;
une	D.ind.f.s	un
interface	N.C.f.s	interface
définit	V.P.3.s	définir
un	D.ind.m.s	un
type	N.C.m.s	type
sans	P	sans
son	D.poss.f.s	son
implémentation	N.C.f.s	implémentation
.	PONCT.S	.

3.3.1	D.card.f.p	@card@
Interface	N.C.f.s	interface
Syntaxe	N.P.f.s	Syntaxe
:	PONCT.W	:
public	N.C.m.s	public
interface	N.C.f.s	interface
InterfaceName	ET	interfacename
{	D.card.f.p	{
constantAttributes	N.C.f.p	constantattribute
abstractMethods	N.C.m.p	abstractmethod
}	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
interface	N.C.f.s	interface
Measurable	A.qual.m.s	measurable
{	A.qual.m.s	{
double	A.qual.m.s	double
size()	N.C.m.s	sizeëë
;	PONCT.W	;
/**	ET	éùà
@return	N.P.x.s	<unknown>
-1	PONCT.W	@card@
,	PONCT.W	,
0	N.card.m.s	@card@
,	PONCT.W	,
1	D.card.m.s	@card@
if	N.C.m.s	if
this	VK.m.s	thir
is	VK.m.s	aller
<	N.C.m.s	<
,	PONCT.W	,
=	V.P.3.s	être
or	N.C.m.s	or
>	P	à
than	N.C.m.s	than
x	A.card.m.s	X
*/	PONCT.W	<unknown>
int	V.J.3.s	enir
isLargerThan(Measurable	A.qual.m.s	<unknown>
x	A.card.m.s	X
)	PONCT.W	)
;	PONCT.W	;
}	N.C.m.p	}
3.3.2	D.card.m.p	@card@
Classe	N.P.m.s	Classe
implantant	VG	implanter
une	D.ind.f.s	un
interface	N.C.f.s	interface
Syntaxe	N.P.f.s	Syntaxe
:	PONCT.W	:
public	ET	public
class	ET	class
ClassName	N.P.m.s	Classname
implements	ET	implement
InterfaceNamel	N.P.m.s	Interfacenamel
,	PONCT.W	,
InterfaceName2	N.P.m.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	N.C.m.p	class
Square	N.P.m.s	Square
implements	N.C.m.p	implement
Measurable	A.qual.m.s	measurable
{	P	à
private	A.qual.f.s	privat
double	A.qual.m.s	double
width	ET	width
;	PONCT.W	;
public	A.qual.m.s	public
Square(double	N.P.m.s	Squareëdouble
_width	N.P.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
width	ET	width
=	PONCT.W	=
_width	N.P.m.s	<unknown>
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
double	A.qual.m.s	double
size()	N.C.m.s	sizeëë
{	P	à
return	N.C.m.s	return
width*width	A.qual.m.s	widthëwidth
;	PONCT.W	;
}	P+D.def.m.s	c
public	A.qual.m.s	public
int	V.J.3.s	enir
isLargerThan(Measurable	A.qual.m.s	<unknown>
x	A.card.m.s	X
)	PONCT.W	)
{	D.card.m.s	{
if	N.C.m.s	if
(	PONCT.W	(
this.size()	N.C.m.s	thistizeçà
<	P+D.def.m.s	c
x.size())	N.C.m.s	x
{	P	à
return	N.C.m.s	return
-1	PONCT.W	@card@
;	PONCT.W	;
}	D.card.m.s	}
if	N.C.m.s	if
(	PONCT.W	(
this.size()	N.C.m.s	thistizeçà
>	P+D.def.m.s	c
x.size())	N.C.m.s	x
{	P	à
return	N.C.m.s	return
1	A.card.m.s	@card@
;	PONCT.W	;
}	P	à
return	N.C.m.s	return
0	A.card.m.s	@card@
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
3.4	D.card.f.p	@card@
Enumération	N.C.f.s	enumération
Une	D.ind.f.s	un
classe	N.C.f.s	classe
enum	A.qual.f.s	enum
permet	V.P.3.s	permettre
de	P	de
représenter	VW	représenter
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
constantes	N.C.f.p	constante
nommées	VK.f.p	nommer
dont	PRO.rel.f.p	dont
le	D.def.m.s	le
type	N.C.m.s	type
est	V.P.3.s	être
la	D.def.f.s	le
classe	N.C.f.s	classe
elle-même	PRO.refl.f.s	elle-même
.	PONCT.S	.

Ces	D.dem.f.p	ce
classes	N.C.f.p	classe
contribuent	V.P.3.p	contribuer
à	P	à
accroître	VW	accroître
la	D.def.f.s	le
lisibilité	N.C.f.s	lisibilité
des	P+D.def.m.p	du
programmes	N.C.m.p	programme
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
public	A.qual.m.s	public
enum	ET	enum
EnumName	N.C.m.s	enumname
{	P	à
//	PONCT.W	@card@
List	ET	list
of	ET	of
named	ET	named
constants	A.qual.m.p	constant
.	PONCT.S	.

//	PONCT.W	@card@
Possibility	ET	possibility
of	ET	of
other	ET	other
fields	ET	field
and	ET	and
methods	ET	method
.	PONCT.S	.

}	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
enum	N.C.m.s	enum
Direction	N.C.f.s	direction
{	P	à
NORTH	N.P.x.s	North
,	PONCT.W	,
SOUTH	N.P.m.s	South
,	PONCT.W	,
EAST	N.P.m.s	East
,	PONCT.W	,
WEST	N.P.m.s	West
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
class	ET	class
Test	N.P.m.s	Test
{	P	à
private	A.qual.f.s	privat
Direction	N.C.f.s	direction
dir	N.C.m.s	dir
;	PONCT.W	;
public	N.C.m.s	public
setDir(Direction	N.C.f.s	setdirädirection
d){	P+D.def.m.p	duà
dir	VW	dir
=	PONCT.W	=
d	P	d
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
boolean	ET	boolean
isNorthSouth()	N.P.x.s	<unknown>
{	P	à
return	N.C.m.s	return
(	PONCT.W	(
dir	VW	dir
==	P+D.def.m.s	çù
Direction.NORTH	N.P.x.s	<unknown>
)	PONCT.W	)
||	N.P.x.s	<unknown>
(	PONCT.W	(
dir	VW	dir
==	P+D.def.m.s	çù
Direction.SOUTH	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
Sous	P	sous
leur	D.poss.f.s	leur
forme	N.C.f.s	forme
la	D.def.f.s	le
plus	ADV.-	plus
simple	A.qual.f.s	simple
,	PONCT.W	,
les	D.def.f.p	le
classes	N.C.f.p	classe
enum	A.ind.f.p	enum
sont	V.P.3.p	être
souvent	ADV.-	souvent
utilisées	VK.f.p	utiliser
sous	P	sous
la	D.def.f.s	le
forme	N.C.f.s	forme
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
interne	A.qual.f.s	interne
(	PONCT.W	(
inner	ET	inner
class	N.C.m.p	class
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	N.C.m.p	class
MyClass	N.P.m.s	Myclass
{	P	à
private	A.qual.f.s	privat
Direction	N.C.f.s	direction
dir	N.C.m.s	dir
;	PONCT.W	;
...	PONCT.W	<unknown>
private	A.qual.f.s	privat
enum	N.C.m.s	enum
Direction	N.C.f.s	direction
{	P	à
NORTH	N.P.x.s	North
,	PONCT.W	,
SOUTH	N.P.f.s	South
,	PONCT.W	,
EAST	N.P.m.s	East
,	PONCT.W	,
WEST	N.P.m.s	West
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	V.P.3.s	voiler
setNorth()	N.C.m.s	<unknown>
{	P	à
dir	VW	dir
=	PONCT.W	=
Direction.NORTH	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
...	PONCT.W	<unknown>
}	N.C.m.s	}
-	PONCT.W	-
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
d'	P	de
associer	VW	associer
à	P	à
chaque	D.ind.f.s	chaque
constante	N.C.f.s	constante
énumérée	VK.f.s	énumérer
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
d'	P	de
un	D.ind.m.s	un
type	N.C.m.s	type
quelconque	A.qual.m.s	quelconque
-	PONCT.W	-
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
d'	P	de
utiliser	VW	utiliser
un	D.ind.m.s	un
type	N.C.m.s	type
énuméré	VK.m.s	énumérer
dans	P	dans
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
switch	A.qual.f.s	switch
3.5	D.card.f.p	@card@
Classes	N.C.f.p	classe
imbriquées	A.qual.f.p	imbriqué
(	PONCT.W	(
Nested	A.qual.f.p	<unknown>
classes	N.C.f.p	classe
)	PONCT.W	)
Ce	D.dem.m.s	ce
concept	N.C.m.s	concept
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
vital	A.qual.m.s	vital
pour	P	pour
un	D.ind.m.s	un
débutant	N.C.m.s	débutant
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
être	VW	être
définie	VK.f.s	définir
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
une	D.ind.f.s	un
autre	A.ind.f.s	autre
classe	N.C.f.s	classe
.	PONCT.S	.

On	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
classe	N.C.f.s	classe
imbriquée	A.qual.f.s	imbriqué
.	PONCT.S	.

On	CL.suj.3.m.s	on
en	CL.obj.3.m.s	en
distingue	V.P.3.s	distinguer
quatre	D.card.f.p	quatre
catégories	N.C.f.p	catégorie
:	PONCT.W	:
-	PONCT.W	-
les	D.def.f.p	le
classes	N.C.f.p	classe
membres	N.C.m.p	membre
déclarées	VK.f.p	déclarer
static	A.qual.m.s	static
(	PONCT.W	(
static	ET	static
nested	ET	nested
classes	N.C.f.p	classe
)	PONCT.W	)
:	PONCT.W	:
membres	N.C.m.p	membre
statiques	A.qual.m.p	statique
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
englobante	A.qual.f.s	englobant
;	PONCT.W	;
-	PONCT.W	-
les	D.def.f.p	le
classes	N.C.f.p	classe
internes	A.qual.f.p	interne
(	PONCT.W	(
inner	ET	inner
classes	N.C.f.p	classe
)	PONCT.W	)
:	PONCT.W	:
membres	N.C.m.p	membre
non	ADV.neg	non
statiques	A.qual.f.p	statique
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
englobante	A.qual.f.s	englobant
;	PONCT.W	;
-	PONCT.W	-
les	D.def.f.p	le
classes	N.C.f.p	classe
locales	A.qual.f.p	local
(	PONCT.W	(
local	ET	local
classes	N.C.f.p	classe
)	PONCT.W	)
:	PONCT.W	:
classes	N.C.f.p	classe
définies	VK.f.p	définir
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
;	PONCT.W	;
-	PONCT.W	-
les	D.def.f.p	le
classes	N.C.f.p	classe
anonymes	A.qual.f.p	anonyme
(	PONCT.W	(
anonymous	ET	anonymou
classes	N.C.f.p	classe
)	PONCT.W	)
:	PONCT.W	:
classes	N.C.f.p	classe
locales	A.qual.f.p	local
sans	P	sans
nom	N.C.m.s	nom
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	ET	class
OuterClass	N.P.m.s	Outerclass
{	N.C.m.s	{
...	PONCT.W	<unknown>
public	ET	public
static	A.qual.m.s	static
class	ET	class
StaticNestedClass	N.P.m.s	Staticnestedclass
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
private	ET	privat
class	N.C.m.p	class
InnerClass	N.P.m.s	Innerclass
{	N.P.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
Exemple	N.C.m.s	exemple
de	P	de
référence	N.C.f.s	référence
à	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
StaticNestedClass	N.P.m.s	Staticnestedclass
:	PONCT.W	:
//	PONCT.W	@card@
OuterClass.StaticNestedClass	N.P.m.s	<unknown>
Quel	A.int.m.s	quel
intérêt	N.C.m.s	intérêt
peut	V.P.3.s	pouvoir
-il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
avoir	VW	avoir
à	P	à
déclarer	VW	déclarer
des	D.ind.f.p	du
classes	N.C.f.p	classe
imbriquées	A.qual.f.p	imbriqué
?	PONCT.S	?

Potentiellement	ADV.-	potentiellement
un	D.ind.m.s	un
regroupement	N.C.m.s	regroupement
logique	A.qual.m.s	logique
,	PONCT.W	,
une	D.ind.f.s	un
encapsulation	N.C.f.s	encapsulation
accrue	A.qual.f.s	accru
,	PONCT.W	,
un	D.ind.m.s	un
code	N.C.m.s	code
plus	ADV.-	plus
lisible	A.qual.m.s	lisible
et	C.C	et
plus	ADV.-	plus
facilement	ADV.-	facilement
maintenable	A.qual.m.s	maintenable
.	PONCT.S	.

En	P	en
pratique	N.C.f.s	pratique
,	PONCT.W	,
la	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.f.p	du
classes	N.C.f.p	classe
imbriquées	A.qual.f.p	imbriqué
sont	V.P.3.p	être
des	D.ind.f.p	du
classes	N.C.f.p	classe
internes	A.qual.f.p	interne
.	PONCT.S	.

Quant	C.S	quant
aux	P+D.def.f.p	au
classes	N.C.f.p	classe
anonymes	A.qual.f.p	anonyme
,	PONCT.W	,
elles	CL.suj.3.f.p	elle
peuvent	V.P.3.p	pouvoir
rendre	VW	rendre
le	D.def.m.s	le
code	N.C.m.s	code
difficile	A.qual.m.s	difficile
à	P	à
lire	VW	lire
et	C.C	et
doivent	V.P.3.p	devoir
donc	ADV.-	donc
être	VW	être
limitées	VK.f.p	limiter
à	P	à
des	D.ind.f.p	du
classes	N.C.f.p	classe
très	ADV.-	très
petites	A.qual.f.p	petit
(	PONCT.W	(
d'	P	de
une	D.ind.f.s	un
ou	C.C	ou
deux	D.card.f.p	deux
méthodes	N.C.f.p	méthode
)	PONCT.W	)
:	PONCT.W	:
voir	VW	voir
exemple	N.C.m.s	exemple
typique	A.qual.m.s	typique
en	P	en
section	N.C.f.s	section
11.4.2	N.card.f.s	@card@
.	PONCT.S	.

3.6	D.card.m.p	@card@
Contrôle	N.C.m.s	contrôle
d'	P	de
accès	N.C.m.s	accès
par	P	par
les	D.def.m.p	le
modificateurs	N.C.m.p	modificateur
Le	D.def.m.s	le
contrôle	N.C.m.s	contrôle
d'	P	de
accès	N.C.m.s	accès
à	P	à
un	D.ind.m.s	un
membre	N.C.m.s	membre
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
être	VW	être
précisé	VK.m.s	préciser
dans	P	dans
leur	D.poss.f.s	leur
déclaration	N.C.f.s	déclaration
par	P	par
des	D.ind.m.p	du
mots-clés	N.C.m.p	mots-clé
appelés	VK.m.p	appeler
modificateurs	N.C.m.p	modificateur
.	PONCT.S	.

Ces	D.dem.m.p	ce
modificateurs	N.C.m.p	modificateur
permettent	V.P.3.p	permettre
de	P	de
spécifier	VW	spécifier
:	PONCT.W	:
-	PONCT.W	-
la	D.def.f.s	le
visibilité	N.C.f.s	visibilité
du	P+D.def.m.s	du
champ	N.C.m.s	champ
ou	C.C	ou
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
:	PONCT.W	:
private	A.qual.f.s	privat
,	PONCT.W	,
protected	N.C.m.s	protected
ou	C.C	ou
public	A.qual.m.s	public
-	PONCT.W	-
le	D.def.m.s	le
lieu	N.C.m.s	lieu
de	P	de
stockage	N.C.m.s	stockage
:	PONCT.W	:
dans	P	dans
la	D.def.f.s	le
classe	N.C.f.s	classe
(	PONCT.W	(
modificateur	N.C.m.s	modificateur
static	A.qual.m.s	static
)	PONCT.W	)
ou	C.C	ou
dans	P	dans
l'	D.def.m.s	le
objet	N.C.m.s	objet
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
)	PONCT.W	)
-	PONCT.W	-
le	D.def.m.s	le
caractère	N.C.m.s	caractère
modifiable	A.qual.m.s	modifiable
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
)	PONCT.W	)
ou	C.C	ou
non	ADV.neg	non
(	PONCT.W	(
modificateur	N.C.m.s	modificateur
final	A.qual.m.s	final
)	PONCT.W	)
Modificateur*	N.P.m.s	Modificateurä
Commentaires	N.C.m.p	commentaire
et	C.C	et
exemple	N.C.m.s	exemple
private	V.P.3.s	privater
Un	D.ind.m.s	un
membre	N.C.m.s	membre
déclaré	A.qual.m.s	déclaré
private	A.qual.m.s	privat
n'	ADV.neg	ne
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
qu'	C.S	que
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
de	P	de
sa	D.poss.f.s	son
classe	N.C.f.s	classe
de	P	de
définition	N.C.f.s	définition
.	PONCT.S	.

Modificateur	N.C.m.s	modificateur
d'	P	de
accès	N.C.m.s	accès
recommandé	VK.m.s	recommander
pour	P	pour
les	D.def.m.p	le
champs	N.C.m.p	champ
.	PONCT.S	.

protected	V.P.3.s	protectedre
Un	D.ind.m.s	un
membre	N.C.m.s	membre
déclaré	VK.m.s	déclarer
protected	V.P.3.s	protectedre
n'	ADV.neg	ne
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
que	C.S	que
depuis	P	depuis
sa	D.poss.f.s	son
classe	N.C.f.s	classe
de	P	de
déclaration	N.C.f.s	déclaration
,	PONCT.W	,
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
,	PONCT.W	,
ou	C.C	ou
une	D.ind.f.s	un
classe	N.C.f.s	classe
du	P+D.def.m.s	du
même	A.qual.m.s	même
paquetage	N.C.m.s	paquetage
.	PONCT.S	.

Modificateur	N.C.m.s	modificateur
d'	P	de
accès	N.C.m.s	accès
recommandé	VK.m.s	recommander
pour	P	pour
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
des	P+D.def.f.p	du
super-	A.qual.f.p	super-
classes	N.C.f.p	classe
.	PONCT.S	.

public	A.qual.m.s	public
Un	D.ind.m.s	un
membre	N.C.m.s	membre
déclaré	VK.m.s	déclarer
public	A.qual.m.s	public
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
depuis	P	depuis
n'	ADV.neg	ne
importe	V.P.3.s	importer
quelle	D.int.f.s	quel
classe	N.C.f.s	classe
.	PONCT.S	.

Modificateur	N.C.m.s	modificateur
d'	P	de
accès	N.C.m.s	accès
recommandé	VK.m.s	recommander
pour	P	pour
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
static	A.qual.m.s	static
Un	D.ind.m.s	un
champ	N.C.m.s	champ
déclaré	VK.m.s	déclarer
static	A.qual.m.s	static
est	V.P.3.s	être
une	D.ind.f.s	un
variable	N.C.f.s	variable
de	P	de
classe	N.C.f.s	classe
et	C.C	et
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
dupliqué	VK.m.s	dupliquer
dans	P	dans
les	D.def.f.p	le
différentes	A.qual.f.p	différent
instances	N.C.f.p	instance
;	PONCT.W	;
un	D.ind.m.s	un
champ	N.C.m.s	champ
non	ADV.neg	non
static	A.qual.m.s	static
est	V.P.3.s	être
une	D.ind.f.s	un
variable	N.C.f.s	variable
d'	P	de
instance	N.C.f.s	instance
et	C.C	et
est	V.P.3.s	être
dupliqué	VK.m.s	dupliquer
dans	P	dans
chaque	D.ind.f.s	chaque
instance	N.C.f.s	instance
.	PONCT.S	.

Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
déclarée	VK.f.s	déclarer
static	A.qual.f.s	static
est	V.P.3.s	être
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
et	C.C	et
est	V.P.3.s	être
invoquée	VK.f.s	invoquer
sans	P	sans
référence	N.C.f.s	référence
à	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
particulier	A.qual.m.s	particulier
mais	C.C	mais
en	P	en
faisant	VG	faire
référence	N.C.f.s	référence
à	P	à
sa	D.poss.f.s	son
classe	N.C.f.s	classe
;	PONCT.W	;
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
non	ADV.neg	non
static	A.qual.f.s	static
est	V.P.3.s	être
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
et	C.C	et
est	V.P.3.s	être
invoquée	VK.f.s	invoquer
sur	P	sur
un	D.ind.m.s	un
objet	N.C.m.s	objet
particulier	A.qual.m.s	particulier
Voir	VW	voir
également	ADV.-	également
chapitre	N.C.m.s	chapitre
14	A.card.m.s	@card@
.	PONCT.S	.

final	A.qual.m.s	final
Une	D.ind.f.s	un
variable	N.C.f.s	variable
déclarée	VK.f.s	déclarer
final	A.qual.m.s	final
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
plus	ADV.neg	plus
être	VW	être
modifiée	VK.f.s	modifier
après	P	après
qu'	C.S	que
elle	CL.suj.3.f.s	elle
a	V.P.3.s	avoir
été	VK.m.s	être
initialisée	VK.f.s	initialiser
.	PONCT.S	.

Cela	PRO.dem.m.s	cela
permet	V.P.3.s	permettre
en	P	en
particulier	N.C.m.s	particulier
de	P	de
déclarer	VW	déclarer
des	D.ind.m.p	du
champs	N.C.m.p	champ
constants	A.qual.m.p	constant
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
final	A.qual.m.s	final
int	V.J.3.s	enir
SIZE	N.P.m.s	Size
=	PONCT.W	=
10	A.card.m.s	@card@
;	PONCT.W	;
Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
déclarée	VK.f.s	déclarer
final	A.qual.m.s	final
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
redéfinie	VK.f.s	redéfinir
dans	P	dans
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
déclarée	VK.f.s	déclarer
final	A.qual.m.s	final
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
sous-classée	VK.f.s	sous-classer
.	PONCT.S	.

*	N.C.m.s	*
Nota	N.P.m.s	Nota
:	PONCT.W	:
à	P	à
défaut	N.C.m.s	défaut
de	P	de
modificateur	N.C.m.s	modificateur
private	A.qual.m.s	privat
,	PONCT.W	,
protected	V.P.3.s	protectedre
ou	C.C	ou
public	A.qual.m.s	public
,	PONCT.W	,
la	D.def.f.s	le
visibilité	N.C.f.s	visibilité
est	V.P.3.s	être
dite	VK.f.s	dire
"	PONCT.W	"
package	N.C.m.s	package
access	N.C.m.p	access
"	PONCT.W	"
:	PONCT.W	:
le	D.def.m.s	le
membre	N.C.m.s	membre
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
est	V.P.3.s	être
visible	A.qual.f.s	visible
depuis	P	depuis
toutes	A.ind.f.p	tout
les	D.def.f.p	le
classes	N.C.f.p	classe
du	P+D.def.m.s	du
même	A.qual.m.s	même
paquetage	N.C.m.s	paquetage
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
static	A.qual.m.s	static
final	A.qual.m.s	final
double	A.qual.m.s	double
GRAVITY	N.P.x.s	Gravity
=	V.P.3.s	être
9.81	N.card.m.s	@card@
;	PONCT.W	;
4	D.card.f.p	@card@
INSTANCE	N.C.f.s	instance
DE	P	de
CLASSE	N.P.m.s	Classe
Avant	N.P.m.s	Avant
de	P	de
pouvoir	VW	pouvoir
être	VW	être
utilisé	VK.m.s	utiliser
,	PONCT.W	,
un	D.ind.m.s	un
objet	N.C.m.s	objet
-	PONCT.W	-
ou	C.C	ou
instance	N.C.f.s	instance
de	P	de
classe	N.C.f.s	classe
-	PONCT.W	-
doit	V.P.3.s	devoir
être	VW	être
:	PONCT.W	:
1	A.card.m.s	@card@
)	PONCT.W	)
déclaré	VK.m.s	déclarer
ClassName	N.P.m.s	Classname
objectName	N.C.m.s	<unknown>
;	PONCT.W	;
2	A.card.m.s	@card@
)	PONCT.W	)
créé	VK.m.s	créer
puis	C.C	pui
initialisé	VK.m.s	initialiser
objectName	N.C.m.s	<unknown>
=	PONCT.W	=
new	ET	new
constructorCall	A.qual.m.s	<unknown>
;	PONCT.W	;
Exemples	N.C.m.p	exemple
:	PONCT.W	:
GregorianCalendar	N.P.m.s	Gregoriancalendar
cal	A.qual.m.s	cal
;	PONCT.W	;
cal	N.C.m.s	cal
=	PONCT.W	=
GregorianCalendar()	N.P.m.s	Gregoriancalendarçë
;	PONCT.W	;
Timer	N.P.m.s	Timer
myTimer	N.P.x.s	Mytimer
=	PONCT.W	=
new	ET	new
Timer(	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
déclaration	N.C.f.s	déclaration
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
ne	ADV.neg	ne
crée	V.P.3.s	créer
pas	ADV.neg	pas
l'	D.def.m.s	le
objet	N.C.m.s	objet
mais	C.C	mais
uniquement	ADV.-	uniquement
une	D.ind.f.s	un
variable	A.qual.f.s	variable
pointeur	N.C.f.s	pointeur
destinée	VK.f.s	destiner
à	P	à
mémoriser	VW	mémoriser
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
future	A.qual.f.s	futur
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
!	PONCT.S	!

La	D.def.f.s	le
création	N.C.f.s	création
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
en	P	en
lui-même	PPRO.3.m.s	lui-même
(	PONCT.W	(
i.e.	ADV.-	<unknown>
l'	D.def.f.s	le
instance	N.C.f.s	instance
proprement	ADV.-	proprement
dite	VK.f.s	dire
)	PONCT.W	)
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
par	P	par
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
.	PONCT.S	.

L'	D.def.m.s	le
appel	N.C.m.s	appel
au	P+D.def.m.s	au
constructeur	N.C.m.s	constructeur
qui	PRO.rel.m.s	qui
suit	V.P.3.s	suivre
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
a	V.P.3.s	avoir
pour	P	pour
rôle	N.C.m.s	rôle
d'	P	de
initialiser	VW	initialiser
proprement	ADV.-	proprement
l'	D.def.m.s	le
objet	N.C.m.s	objet
ainsi	ADV.-	ainsi
créé	VK.m.s	créer
.	PONCT.S	.

In	CL.suj.3.m.s	in
fine	V.P.3.s	finer
,	PONCT.W	,
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
ainsi	ADV.-	ainsi
créé	VK.m.s	créer
et	C.C	et
initialisé	VK.m.s	initialiser
,	PONCT.W	,
adresse	N.C.f.s	adresse
renvoyée	VK.f.s	renvoyer
par	P	par
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
,	PONCT.W	,
est	V.P.3.s	être
stockée	VK.f.s	stocker
,	PONCT.W	,
grâce	N.C.f.s	grâce
à	P	à
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
d'	P	de
affectation	N.C.f.s	affectation
=	PONCT.W	=
,	PONCT.W	,
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
préalablement	ADV.-	préalablement
déclarée	VK.f.s	déclarer
.	PONCT.S	.

Quelques	D.ind.f.p	quelque
précisions	N.C.f.p	précision
importantes	A.qual.f.p	important
:	PONCT.W	:
*	N.C.m.s	*
Déclaration	N.C.f.s	déclaration
.	PONCT.S	.

La	D.def.f.s	le
déclaration	N.C.f.s	déclaration
ClassName	N.P.m.s	Classname
objectName	N.C.m.s	<unknown>
;	PONCT.W	;
crée	V.P.3.s	créer
une	D.ind.f.s	un
variable	N.C.f.s	variable
de	P	de
nom	N.C.m.s	nom
objectName	N.C.m.s	<unknown>
de	P	de
type	N.C.m.s	type
référence	N.C.f.s	référence
(	PONCT.W	(
i.e.	ADV.-	<unknown>
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
)	PONCT.W	)
et	C.C	et
l'	CL.obj.3.m.s	le
initialise	V.P.3.s	initialiser
automatiquement	ADV.-	automatiquement
à	P	à
null	A.qual.m.s	nul
.	PONCT.S	.

null	A.qual.m.s	nul
est	V.P.3.s	être
une	D.ind.f.s	un
constante	N.C.f.s	constante
littérale	A.qual.f.s	littéral
prédéfinie	VK.f.s	prédéfinir
de	P	de
Java	N.P.m.s	Java
qui	PRO.rel.f.s	qui
peut	V.P.3.s	pouvoir
être	VW	être
assignée	VK.f.s	assigner
à	P	à
toute	D.ind.f.s	tout
variable	N.C.f.s	variable
de	P	de
type	N.C.m.s	type
référence	N.C.f.s	référence
et	C.C	et
qui	PRO.rel.f.s	qui
identifie	V.P.3.s	identifier
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
nul	A.qual.m.s	nul
.	PONCT.S	.

Une	D.ind.f.s	un
variable	N.C.f.s	variable
de	P	de
valeur	N.C.f.s	valeur
null	A.qual.m.s	nul
ne	ADV.neg	ne
pointe	V.P.3.s	pointer
vers	P	vers
aucun	D.neg.m.s	aucun
objet	N.C.m.s	objet
.	PONCT.S	.

Toute	D.ind.f.s	tout
tentative	N.C.f.s	tentative
de	P	de
référer	VW	référer
à	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
à	P	à
partir	VW	partir
d'	P	de
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
null	A.qual.m.s	nul
engendre	V.P.3.s	engendrer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
(	PONCT.W	(
de	P	de
compilation	N.C.f.s	compilation
ou	C.C	ou
d'	P	de
exécution	N.C.f.s	exécution
selon	P	selon
le	D.def.m.s	le
contexte	N.C.m.s	contexte
)	PONCT.W	)
.	PONCT.S	.

*	N.C.m.s	*
Gestion	N.C.f.s	gestion
dynamique	A.qual.f.s	dynamique
de	P	de
la	D.def.f.s	le
mémoire	N.C.f.s	mémoire
.	PONCT.S	.

L'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
crée	V.P.3.s	créer
l'	D.def.f.s	le
instance	N.C.f.s	instance
de	P	de
classe	N.C.f.s	classe
dans	P	dans
une	D.ind.f.s	un
zone	N.C.f.s	zone
mémoire	A.qual.f.s	mémoire
générale	A.qual.f.s	général
appelée	VK.f.s	appeler
"	PONCT.W	"
tas	ET	tas
"	PONCT.W	"
qui	PRO.rel.f.s	qui
contient	V.P.3.s	contenir
toutes	A.ind.f.p	tout
les	D.def.f.p	le
données	N.C.f.p	donnée
allouées	VK.f.p	allouer
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
et	C.C	et
n'	ADV.neg	ne
ayant	VG	avoir
pas	ADV.neg	pas
de	D.ind.f.s	de
portée	N.C.f.s	portée
locale	A.qual.f.s	local
.	PONCT.S	.

L'	D.def.m.s	le
objet	N.C.m.s	objet
ainsi	ADV.-	ainsi
créé	VK.m.s	créer
conserve	V.P.3.s	conserver
donc	ADV.-	donc
une	D.ind.f.s	un
portée	N.C.f.s	portée
globale	A.qual.f.s	global
et	C.C	et
reste	V.P.3.s	rester
"	PONCT.W	"
vivant	VG	vivre
"	PONCT.W	"
tant	ADV.-	tant
qu'	C.S	que
on	CL.suj.3.m.s	on
dispose	V.P.3.s	disposer
d'	P	de
une	D.ind.f.s	un
référence	N.C.f.s	référence
(	PONCT.W	(
i.e.	ADV.-	<unknown>
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
)	PONCT.W	)
permettant	VG	permettre
d'	P	de
y	CL.obj.3.m.s	y
accéder	VW	accéder
.	PONCT.S	.

Quand	C.S	quand
un	D.ind.m.s	un
objet	N.C.m.s	objet
n'	ADV.neg	ne
est	V.P.3.s	être
plus	ADV.neg	plus
référencé	VK.m.s	référencer
,	PONCT.W	,
il	CL.suj.3.m.s	il
devient	V.P.3.s	devenir
définitivement	ADV.-	définitivement
inaccessible	A.qual.m.s	inaccessible
et	C.C	et
"	PONCT.W	"
meurt	A.qual.m.s	meurt
"	PONCT.W	"
:	PONCT.W	:
son	D.poss.m.s	son
espace	N.C.m.s	espace
mémoire	A.qual.m.s	mémoire
est	V.P.3.s	être
automatiquement	ADV.-	automatiquement
désalloué	VK.m.s	désallouer
(	PONCT.W	(
la	D.def.f.s	le
récupération	N.C.f.s	récupération
automatique	A.qual.f.s	automatique
de	P	de
cet	D.dem.m.s	ce
espace	N.C.m.s	espace
mémoire	A.qual.m.s	mémoire
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
par	P	par
un	D.ind.m.s	un
processus	N.C.m.s	processus
appelé	VK.m.s	appeler
ramasse-miettes	N.C.m.s	ramasse-miettes
(	PONCT.W	(
garbage	N.C.m.s	garbage
collector	N.C.m.s	collector
)	PONCT.W	)
)	PONCT.W	)
.	PONCT.S	.

Une	D.ind.f.s	un
façon	N.C.f.s	façon
de	P	de
détruire	VW	détruire
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
donc	ADV.-	donc
d'	P	de
assigner	VW	assigner
la	D.def.f.s	le
valeur	N.C.f.s	valeur
null	A.qual.m.s	nul
aux	P+D.def.f.p	au
variables	N.C.f.p	variable
qui	PRO.rel.f.p	qui
y	CL.obj.3.f.s	y
font	V.P.3.p	faire
référence	N.C.f.s	référence
directement	ADV.-	directement
ou	C.C	ou
indirectement	ADV.-	indirectement
.	PONCT.S	.

5	D.card.f.p	@card@
TYPES	N.C.f.p	type
DE	P	de
DONNEES	N.P.m.s	Donnees
Java	N.P.m.s	Java
connaît	V.P.3.s	connaître
deux	D.card.m.p	deux
types	N.C.m.p	type
de	P	de
données	N.C.f.p	donnée
:	PONCT.W	:
-	PONCT.W	-
Les	D.def.m.p	le
types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
.	PONCT.S	.

Les	D.def.f.p	le
données	N.C.f.p	donnée
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
sont	V.P.3.p	être
stockées	VK.f.p	stocker
directement	ADV.-	directement
dans	P	dans
les	D.def.f.p	le
variables	N.C.f.p	variable
et	C.C	et
ont	V.P.3.p	avoir
une	D.ind.f.s	un
sémantique	N.C.f.s	sémantique
de	P	de
valeur	N.C.f.s	valeur
(	PONCT.W	(
i.e.	ADV.-	<unknown>
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
valeur	N.C.f.s	valeur
qui	PRO.rel.f.s	qui
est	V.P.3.s	être
copiée	VK.f.s	copier
quand	C.S	quand
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
affectée	VK.f.s	affecter
à	P	à
une	D.ind.f.s	un
autre	A.ind.f.s	autre
variable	N.C.f.s	variable
)	PONCT.W	)
.	PONCT.S	.

-	PONCT.W	-
Les	D.def.m.p	le
types	N.C.m.p	type
objet	ET	objet
(	PONCT.W	(
ou	C.C	ou
types	N.C.m.p	type
référence	N.C.f.s	référence
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.f.p	le
données	N.C.f.p	donnée
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
sont	V.P.3.p	être
stockées	VK.f.p	stocker
sous	P	sous
forme	N.C.f.s	forme
de	P	de
référence	N.C.f.s	référence
à	P	à
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
(	PONCT.W	(
et	C.C	et
non	ADV.neg	non
pas	ADV.neg	pas
en	P	en
tant	ADV.-	tant
qu'	C.S	que
objet	N.C.m.s	objet
même	ADV.-	même
)	PONCT.W	)
.	PONCT.S	.

Quand	C.S	quand
une	D.ind.f.s	un
variable	N.C.f.s	variable
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
est	V.P.3.s	être
affectée	VK.f.s	affecter
à	P	à
une	D.ind.f.s	un
autre	A.ind.f.s	autre
variable	N.C.f.s	variable
,	PONCT.W	,
seule	A.ind.f.s	seul
la	D.def.f.s	le
référence	N.C.f.s	référence
est	V.P.3.s	être
copiée	A.qual.f.s	copié
,	PONCT.W	,
pas	ADV.neg	pas
l'	D.def.m.s	le
objet	N.C.m.s	objet
lui-même	PPRO.3.m.s	lui-même
.	PONCT.S	.

Java	N.P.m.s	Java
utilise	V.P.3.s	utiliser
le	D.def.m.s	le
système	N.C.m.s	système
Unicode-4	N.P.m.s	<unknown>
,	PONCT.W	,
en	P	en
interne	N.C.m.s	interne
,	PONCT.W	,
pour	P	pour
coder	VW	coder
les	D.def.m.p	le
caractères	N.C.m.p	caractère
,	PONCT.W	,
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
et	C.C	et
les	D.def.m.p	le
identificateurs	N.C.m.p	identificateur
.	PONCT.S	.

Chaque	D.ind.m.s	chaque
caractère	N.C.m.s	caractère
Unicode	N.P.m.s	Unicode
est	V.P.3.s	être
codé	VK.m.s	coder
sur	P	sur
16	D.card.m.p	@card@
bits	N.C.m.p	bit
,	PONCT.W	,
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
de	P	de
représenter	VW	représenter
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
alphabets	N.C.m.p	alphabet
(	PONCT.W	(
grec	N.C.m.s	grec
,	PONCT.W	,
cyrillique	A.qual.m.s	cyrillique
,	PONCT.W	,
hébreu	N.C.m.s	hébreu
,	PONCT.W	,
arabe	N.C.m.s	arabe
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
ainsi	ADV.-	ainsi
que	C.S	que
les	D.def.m.p	le
symboles	N.C.m.p	symbole
mathématiques	A.qual.m.p	mathématique
et	C.C	et
techniques	A.qual.m.p	technique
.	PONCT.S	.

Bien	ADV.-	bien
qu'	C.S	que
Unicode	N.P.m.s	Unicode
soit	V.S.3.s	être
utilisé	VK.m.s	utiliser
par	P	par
certains	D.ind.m.p	certain
systèmes	N.C.m.p	système
d'	P	de
exploitation	N.C.f.s	exploitation
(	PONCT.W	(
Windows	N.P.f.s	Windows
NT	N.P.f.s	NTM
ou	C.C	ou
Vista	N.P.f.s	Vista
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
,	PONCT.W	,
la	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.m.p	du
systèmes	N.C.m.p	système
d'	P	de
exploitation	N.C.f.s	exploitation
utilisent	V.P.3.p	utiliser
des	D.ind.m.p	du
systèmes	N.C.m.p	système
de	P	de
codage	N.C.m.s	codage
8	D.card.m.p	@card@
bits	N.C.m.p	bit
,	PONCT.W	,
de	P	de
sorte	N.C.f.s	sorte
que	C.S	que
des	D.ind.m.p	du
transcodages	N.C.m.p	transcodage
sont	V.P.3.p	être
nécessaires	A.qual.m.p	nécessaire
et	C.C	et
des	D.ind.m.p	du
problèmes	N.C.m.p	problème
d'	P	de
incompatibilité	N.C.f.s	incompatibilité
peuvent	V.P.3.p	pouvoir
survenir	VW	survenir
à	P	à
l'	D.def.m.s	le
affichage	N.C.m.s	affichage
.	PONCT.S	.

5.1	D.card.m.p	@card@
Types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
Type	N.P.m.s	Type
Description	N.C.f.s	description
Exemples	N.C.m.p	exemple
de	P	de
littéraux	N.C.m.p	littéral
Nombres	A.qual.m.p	nombre
entiers	A.qual.m.p	entier
:	PONCT.W	:
Types	N.C.m.p	type
signés	VK.m.p	signer
:	PONCT.W	:
byte	ET	byte
octet	N.C.m.s	octet
(	PONCT.W	(
entier	N.C.m.s	entier
8	D.card.m.p	@card@
bits	N.C.m.p	bit
)	PONCT.W	)
127	A.card.m.p	@card@
-128	A.card.m.p	@card@
short	N.C.m.s	short
entier	A.qual.m.s	entier
court	A.qual.m.s	court
(	PONCT.W	(
16	D.card.m.p	@card@
bits	N.C.m.p	bit
)	PONCT.W	)
32767	PRO.card.m.p	@card@
-32768	PRO.card.m.p	@card@
int	PRO.card.m.p	<unknown>
entier	A.qual.m.s	entier
(	PONCT.W	(
32	D.card.m.p	@card@
bits	N.C.m.p	bit
)	PONCT.W	)
2147483647	D.card.m.p	@card@
-2147483648	D.card.m.p	@card@
long	A.qual.m.s	long
entier	A.qual.m.s	entier
long	A.qual.m.s	long
(	PONCT.W	(
64	D.card.m.p	@card@
bits	N.C.m.p	bit
)	PONCT.W	)
5123456789L	D.card.m.p	@card@
-55L	N.card.m.p	<unknown>
Nombres	A.qual.m.p	nombre
réels	A.qual.m.p	réel
:	PONCT.W	:
Types	N.C.m.p	type
signés	VK.m.p	signer
:	PONCT.W	:
float	N.C.m.s	float
réel	A.qual.m.s	réel
simple	A.qual.f.s	simple
précision	N.C.f.s	précision
43.889F	D.card.f.p	@card@
341.159E-2F	N.C.f.s	<unknown>
double	A.qual.f.s	double
réel	A.qual.m.s	réel
double	A.qual.f.s	double
précision	N.C.f.s	précision
45.63	D.card.m.p	@card@
-2.4E107	D.card.m.p	@card@
Autres	A.ind.m.p	autre
types	N.C.m.p	type
:	PONCT.W	:
Types	N.C.m.p	type
non	ADV.neg	non
signés	VK.m.p	signer
:	PONCT.W	:
char	A.qual.m.s	char
caractère	N.C.m.s	caractère
(	PONCT.W	(
un	D.ind.m.s	un
seul	A.qual.m.s	seul
;	PONCT.W	;
16	D.card.m.p	@card@
bits	N.C.m.p	bit
)	PONCT.W	)
'	PONCT.W	'
?	PONCT.S	?

'	PONCT.W	'
'	PONCT.W	'
\u00F6	N.P.m.s	<unknown>
'	PONCT.W	'
boolean	N.C.m.s	boolean
valeur	N.C.f.s	valeur
booléenne	A.qual.f.s	booléen
false	A.qual.f.s	fals
true	N.C.f.s	true
+	P	p
Un	D.ind.m.s	un
nombre	N.C.m.s	nombre
sans	P	sans
point	N.C.m.s	point
décimal	A.qual.m.s	décimal
est	V.P.3.s	être
interprété	VK.m.s	interpréter
comme	P	comme
un	D.ind.m.s	un
entier	N.C.m.s	entier
de	P	de
type	N.C.m.s	type
int	V.J.3.s	enir
mais	C.C	mais
immédiatement	ADV.-	immédiatement
converti	VK.m.s	convertir
en	P	en
byte	N.C.m.s	byte
,	PONCT.W	,
short	N.C.f.s	short
ou	C.C	ou
long	A.qual.m.s	long
lors	N.C.m.s	lors
de	P	de
l'	D.def.f.s	le
affection	N.C.f.s	affection
.	PONCT.S	.

On	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
déclarer	VW	déclarer
un	D.ind.m.s	un
littéral	N.C.m.s	littéral
de	P	de
type	N.C.m.s	type
long	A.qual.m.s	long
en	P	en
l'	CL.obj.3.m.s	le
affectant	VG	affecter
du	P+D.def.m.s	du
suffixe	N.C.m.s	suffixe
L.	N.P.m.s	Lo
+	P	p
Un	D.ind.m.s	un
nombre	N.C.m.s	nombre
avec	P	avec
un	D.ind.m.s	un
point	N.C.m.s	point
décimal	A.qual.m.s	décimal
est	V.P.3.s	être
interprété	VK.m.s	interpréter
comme	P	comme
un	D.ind.m.s	un
réel	A.qual.m.s	réel
de	P	de
type	N.C.m.s	type
double	A.qual.m.s	double
.	PONCT.S	.

On	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
déclarer	VW	déclarer
un	D.ind.m.s	un
littéral	N.C.m.s	littéral
de	P	de
type	N.C.m.s	type
float	A.qual.m.s	float
en	P	en
l'	CL.obj.3.m.s	le
affectant	VG	affecter
du	P+D.def.m.s	du
suffixe	N.C.m.s	suffixe
F.	N.P.m.s	Fo
+	P	p
Un	D.ind.m.s	un
caractère	N.C.m.s	caractère
littéral	A.qual.m.s	littéral
peut	V.P.3.s	pouvoir
être	VW	être
écrit	VK.m.s	écrire
sous	P	sous
forme	N.C.f.s	forme
d'	P	de
un	D.ind.m.s	un
unique	A.qual.m.s	unique
caractère	N.C.m.s	caractère
Unicode	N.P.m.s	Unicode
entre	P	entre
apostrophes	N.C.f.p	apostrophe
ou	C.C	ou
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
Unicode	A.qual.f.s	unicode
précédée	VK.f.s	précéder
par	P	par
'	PONCT.W	'
\u	N.C.m.s	çu
'	PONCT.W	'
.	PONCT.S	.

+	P	p
Les	D.def.m.p	le
deux	A.card.m.p	deux
littéraux	N.C.m.p	littéral
booléens	A.qual.m.p	booléen
sont	V.P.3.p	être
true	N.C.f.s	true
et	C.C	et
false	A.qual.f.s	fals
.	PONCT.S	.

+	P	p
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
un	D.ind.m.s	un
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
ne	ADV.neg	ne
référant	VG	référer
pas	ADV.neg	pas
à	P	à
des	D.ind.m.p	du
objets	N.C.m.p	objet
,	PONCT.W	,
elles	CL.suj.3.f.p	elle
n'	ADV.neg	ne
ont	V.P.3.p	avoir
pas	ADV.neg	pas
de	D.ind.f.p	de
méthodes	N.C.f.p	méthode
associées	VK.f.p	associer
.	PONCT.S	.

5.2	D.card.m.p	@card@
Types	N.C.m.p	type
objet	N.C.m.s	objet
(	PONCT.W	(
ou	C.C	ou
types	N.C.m.p	type
référence	N.C.f.s	référence
)	PONCT.W	)
Tous	A.ind.m.p	tous
les	D.def.m.p	le
types	N.C.m.p	type
autres	A.qual.m.p	autre
que	C.S	que
les	D.def.m.p	le
types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
sont	V.P.3.p	être
des	D.ind.m.p	du
types	N.C.m.p	type
objet	N.C.m.s	objet
.	PONCT.S	.

Ils	CL.suj.3.m.p	il
incluent	V.P.3.p	inclure
les	D.def.f.p	le
classes	N.C.f.p	classe
(	PONCT.W	(
non	ADV.neg	non
abstraites	VK.f.p	abstraire
)	PONCT.W	)
des	P+D.def.f.p	du
bibliothèques	N.C.f.p	bibliothèque
standard	ET	standard
Java	N.P.m.s	Java
(	PONCT.W	(
tels	A.qual.m.p	tel
que	C.S	que
le	D.def.m.s	le
type	N.C.m.s	type
String	N.P.m.s	String
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
ainsi	ADV.-	ainsi
que	C.S	que
les	D.def.f.p	le
classes	N.C.f.p	classe
définies	VK.f.p	définir
par	P	par
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Une	D.ind.f.s	un
variable	N.C.f.s	variable
d'	P	de
un	D.ind.m.s	un
type	N.C.m.s	type
objet	N.C.m.s	objet
contient	V.P.3.s	contenir
une	D.ind.f.s	un
référence	N.C.f.s	référence
(	PONCT.W	(
ou	C.C	ou
pointeur	N.C.m.s	pointeur
)	PONCT.W	)
sur	P	sur
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
.	PONCT.S	.

Les	D.def.f.p	le
affectations	N.C.f.p	affectation
et	C.C	et
passages	N.C.m.p	passage
de	P	de
paramètres	N.C.m.p	paramètre
ont	V.P.3.p	avoir
une	D.ind.f.s	un
sémantique	N.C.f.s	sémantique
de	P	de
référence	N.C.f.s	référence
(	PONCT.W	(
i.e.	ADV.-	<unknown>
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
référence	N.C.f.s	référence
qui	PRO.rel.f.s	qui
est	V.P.3.s	être
copiée	VK.f.s	copier
et	C.C	et
non	ADV.neg	non
l'	D.def.m.s	le
objet	N.C.m.s	objet
lui-même	PPRO.3.m.s	lui-même
)	PONCT.W	)
.	PONCT.S	.

Après	P	après
l'	D.def.f.s	le
affectation	N.C.f.s	affectation
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
à	P	à
une	D.ind.f.s	un
autre	PRO.ind.f.s	autre
,	PONCT.W	,
les	D.def.f.p	le
deux	A.card.f.p	deux
variables	N.C.f.p	variable
réfèrent	V.P.3.p	référer
au	P+D.def.m.s	au
même	A.qual.m.s	même
objet	N.C.m.s	objet
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
donc	ADV.-	donc
d'	P	de
une	D.ind.f.s	un
copie	N.C.f.s	copie
de	P	de
surface	N.C.f.s	surface
(	PONCT.W	(
par	P	par
opposition	N.C.f.s	opposition
à	P	à
une	D.ind.f.s	un
copie	N.C.f.s	copie
profonde	A.qual.f.s	profond
qui	PRO.rel.f.s	qui
dupliquerait	V.C.3.s	dupliquer
les	D.def.m.p	le
objets	N.C.m.p	objet
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.f.p	le
deux	A.card.f.p	deux
variables	N.C.f.p	variable
sont	V.P.3.p	être
alors	ADV.-	alors
dites	VK.f.p	dire
alias	N.C.f.p	alia
pour	P	pour
le	D.def.m.s	le
même	A.qual.m.s	même
objet	N.C.m.s	objet
.	PONCT.S	.

5.2.1	D.card.f.p	@card@
Classes	N.C.f.p	classe
enveloppes	VK.f.p	<unknown>
Les	D.def.f.p	le
classes	N.C.f.p	classe
enveloppes	N.C.f.p	enveloppe
permettent	V.P.3.p	permettre
de	P	de
transformer	VW	transformer
un	D.ind.m.s	un
type	N.C.m.s	type
simple	A.qual.m.s	simple
en	P	en
objet	N.C.m.s	objet
(	PONCT.W	(
cette	D.dem.f.s	ce
opération	N.C.f.s	opération
est	V.P.3.s	être
appelée	VK.f.s	appeler
,	PONCT.W	,
en	P	en
anglais	N.C.m.s	anglais
,	PONCT.W	,
boxing	N.C.m.s	boxing
)	PONCT.W	)
.	PONCT.S	.

Classe	N.P.m.s	Classe
enveloppe	V.P.3.s	envelopper
Type	N.P.m.s	Type
primitif	A.qual.m.s	primitif
Boolean	ET	boolean
boolean	ET	boolean
Byte	N.P.m.s	Byte
byte	V.P.3.s	byter
Character	N.P.m.s	Character
char	ET	char
Double	N.P.m.s	Double
double	A.qual.m.s	double
Float	N.P.m.s	Float
float	N.C.m.s	float
Integer	N.P.m.s	Integer
int	V.J.3.s	enir
Long	N.P.m.s	Long
long	A.qual.m.s	long
Short	N.P.m.s	Short
short	ET	short
Exemples	N.C.m.p	exemple
:	PONCT.W	:
//	PONCT.W	@card@
convert	V.P.3.s	converir
primitive	A.qual.f.s	primitif
type	N.C.m.s	type
>	P	à
wrapper	VW	wrapper
type	N.C.m.s	type
Integer	N.P.m.s	Integer
k	ET	k
=	ET	=
new	ET	new
Integer(456)	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
convert	V.P.3.s	converir
wrapper	VW	wrapper
type	N.C.m.s	type
>	ET	>
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
double	A.qual.m.s	double
x	N.card.m.s	x
=	PONCT.W	=
K.doubleValue(	N.P.m.s	Krdoublevalueë
)	PONCT.W	)
;	PONCT.W	;
Les	D.def.f.p	le
classes	N.C.f.p	classe
enveloppes	N.C.f.p	enveloppe
sont	V.P.3.p	être
utiles	A.qual.f.p	utile
quand	C.S	quand
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
n'	ADV.neg	ne
accepte	V.P.3.s	accepter
pas	ADV.neg	pas
les	D.def.m.p	le
types	N.C.m.p	type
simples	A.qual.m.p	simple
mais	C.C	mais
requiert	V.P.3.s	requérir
des	P+D.def.m.p	du
objets	N.C.m.p	objet
.	PONCT.S	.

Toutefois	ADV.-	toutefois
,	PONCT.W	,
depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
sont	V.P.3.p	être
,	PONCT.W	,
en	P	en
cas	N.C.m.s	cas
de	P	de
besoin	N.C.m.s	besoin
,	PONCT.W	,
implicitement	ADV.-	implicitement
converties	VK.f.p	convertir
en	P	en
l'	D.def.m.s	le
objet	N.C.m.s	objet
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
enveloppe	N.C.f.s	enveloppe
correspondante	A.qual.f.s	correspondant
(	PONCT.W	(
autoboxing	N.C.m.s	autoboxing
)	PONCT.W	)
,	PONCT.W	,
et	C.C	et
réciproquement	N.C.m.s	réciproquement
(	PONCT.W	(
unboxing	N.C.m.s	unboxing
)	PONCT.W	)
.	PONCT.S	.

Auparavant	ADV.-	auparavant
,	PONCT.W	,
la	D.def.f.s	le
conversion	N.C.f.s	conversion
devait	V.I.3.s	devoir
être	VW	être
explicite	VK.f.s	explicir
.	PONCT.S	.

Les	D.def.m.p	le
objets	N.C.m.p	objet
de	P	de
telles	A.qual.f.p	tel
classes	N.C.f.p	classe
sont	V.P.3.p	être
immuables	A.qual.f.p	immuable
(	PONCT.W	(
immutable	A.qual.m.s	immutable
)	PONCT.W	)
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
non	ADV.neg	non
modifiables	A.qual.m.p	modifiable
une	D.ind.f.s	un
fois	N.C.f.s	foi
créés	VK.m.p	créer
.	PONCT.S	.

En	P	en
conséquence	N.C.f.s	conséquence
,	PONCT.W	,
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
avoir	VW	avoir
de	D.ind.m.p	de
paramètres	N.C.m.p	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
tels	A.qual.m.p	tel
types	N.C.m.p	type
.	PONCT.S	.

Les	D.def.f.p	le
classes	N.C.f.p	classe
enveloppes	N.C.f.p	enveloppe
présentent	V.P.3.p	présenter
surtout	ADV.-	surtout
l'	D.def.m.s	le
intérêt	N.C.m.s	intérêt
d'	P	de
offrir	VW	offrir
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
de	P	de
conversion	N.C.f.s	conversion
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
<->	A.ind.m.s	<unknown>
String	N.P.m.s	String
,	PONCT.W	,
ainsi	ADV.-	ainsi
que	C.S	que
des	D.ind.m.p	du
utilitaires	N.C.m.p	utilitaire
pour	P	pour
des	D.ind.f.p	du
données	N.C.f.p	donnée
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	PONCT.W	@card@
Convert	N.P.m.s	Convert
String	N.P.m.s	String
type	N.C.m.s	type
->	ET	-
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
double	A.qual.m.s	double
x	N.card.m.s	x
=	PONCT.W	=
Double.parseDouble(	N.P.m.s	<unknown>
"	PONCT.W	"
3.14159	PRO.card.m.p	@card@
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
5.2.2	D.card.f.p	@card@
Chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
non	ADV.neg	non
modifiable	A.qual.m.s	modifiable
(	PONCT.W	(
String	N.P.m.s	String
)	PONCT.W	)
Bien	ADV.-	bien
que	C.S	que
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
de	P	de
type	N.C.m.s	type
String	N.P.m.s	String
soient	V.S.3.p	être
des	D.ind.m.p	du
objets	N.C.m.p	objet
,	PONCT.W	,
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
nécessaire	A.qual.m.s	nécessaire
d'	P	de
avoir	VW	avoir
recours	N.C.m.s	recours
à	P	à
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
pour	P	pour
les	CL.obj.3.m.p	le
créer	VW	créer
.	PONCT.S	.

Les	D.def.m.p	le
caractères	N.C.m.p	caractère
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
chaine	A.qual.m.p	chain
sont	V.P.3.p	être
indicés	VK.m.p	indicer
de	P	de
0	D.card.m.s	@card@
à	P	à
chaine.length()-1	N.C.f.s	<unknown>
Une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
littérale	A.qual.f.s	littéral
est	V.P.3.s	être
notée	VK.f.s	noter
entre	P	entre
apostrophes	N.C.f.p	apostrophe
.	PONCT.S	.

L'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
+	P	p
est	V.P.3.s	être
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
de	P	de
concaténation	N.C.f.s	concaténation
de	P	de
chaînes	N.C.f.p	chaîne
.	PONCT.S	.

Il	CL.suj.3.m.s	il
produit	V.P.3.s	produire
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
chaîne	N.C.f.s	chaîne
sans	P	sans
éléments	N.C.m.p	élément
physiquement	ADV.-	physiquement
partagés	VK.m.p	partager
avec	P	avec
ses	D.poss.f.p	son
opérandes	N.C.f.p	opérande
.	PONCT.S	.

La	D.def.f.s	le
comparaison	N.C.f.s	comparaison
de	P	de
deux	D.card.f.p	deux
chaînes	N.C.f.p	chaîne
(	PONCT.W	(
caractère	N.C.m.s	caractère
par	P	par
caractère	N.C.m.s	caractère
)	PONCT.W	)
nécessite	V.P.3.s	nécessiter
de	P	de
faire	VW	faire
appel	N.C.m.s	appel
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
equals()	ET	equalsçë
,	PONCT.W	,
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
==	V.P.3.s	cevoir
ne	ADV.neg	ne
donnant	VG	donner
le	D.def.m.s	le
résultat	N.C.m.s	résultat
intuitivement	ADV.-	intuitivement
attendu	VK.m.s	attendre
que	ADV.-	que
dans	P	dans
un	D.ind.m.s	un
cas	N.C.m.s	cas
particulier	A.qual.m.s	particulier
.	PONCT.S	.

Les	D.def.m.p	le
objets	N.C.m.p	objet
de	P	de
type	N.C.m.s	type
String	N.P.m.s	String
sont	V.P.3.p	être
immuables	A.qual.m.p	immuable
(	PONCT.W	(
immutable	A.qual.m.s	immutable
)	PONCT.W	)
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
non	ADV.neg	non
modifiables	A.qual.m.p	modifiable
une	D.ind.f.s	un
fois	N.C.f.s	foi
créés	VK.m.p	créer
.	PONCT.S	.

En	P	en
conséquence	N.C.f.s	conséquence
,	PONCT.W	,
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
avoir	VW	avoir
de	D.ind.m.p	de
paramètres	N.C.m.p	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
type	N.C.m.s	type
String	N.P.m.s	String
.	PONCT.S	.

La	D.def.f.s	le
classe	N.C.f.s	classe
String	N.P.m.s	String
appartient	V.P.3.s	appartenir
au	P+D.def.m.s	au
paquetage	N.C.m.s	paquetage
java.lang	A.qual.m.s	javallang
Exemple	N.C.m.s	exemple
:	PONCT.W	:
String	N.P.m.s	String
chaine	N.C.f.s	chaine
=	PONCT.W	=
"	PONCT.W	"
Exemple	N.C.m.s	exemple
n°	N.C.m.s	nà
"	PONCT.W	"
+	P	p
1	D.card.m.s	@card@
+	P	p
"	PONCT.W	"
de	P	de
chaine	N.C.f.s	chaine
littérale	A.qual.f.s	littéral
"	PONCT.W	"
;	PONCT.W	;
System.out.println("Longueur	N.C.m.s	<unknown>
de	P	de
\	N.C.m.s	\
"	PONCT.W	"
"	PONCT.W	"
+	P	p
chaine	N.C.f.s	chaine
+	P	p
"	PONCT.W	"
\	N.C.m.s	\
"	PONCT.W	"
=	N.C.m.s	=
"	PONCT.W	"
+	P	p
chaine.length()	N.C.m.s	chainelenghëc
)	PONCT.W	)
;	PONCT.W	;
5.2.3	D.card.m.p	@card@
Chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
modifiable	A.qual.m.s	modifiable
(	PONCT.W	(
StringBuffer	N.P.m.s	Stringbuffer
)	PONCT.W	)
Ces	D.dem.f.p	ce
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
,	PONCT.W	,
contrairement	ADV.-	contrairement
aux	P+D.def.f.p	au
chaînes	N.C.f.p	chaîne
de	P	de
type	N.C.m.s	type
String	N.P.m.s	String
,	PONCT.W	,
peuvent	V.P.3.p	pouvoir
être	VW	être
modifiées	VK.f.p	modifier
.	PONCT.S	.

L'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
est	V.P.3.s	être
indispensable	A.qual.m.s	indispensable
pour	P	pour
créer	VW	créer
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
type	N.C.m.s	type
StringBuffer	N.P.m.s	Stringbuffer
.	PONCT.S	.

La	D.def.f.s	le
classe	N.C.f.s	classe
StringBuffer	N.P.m.s	Stringbuffer
appartient	V.P.3.s	appartenir
au	P+D.def.m.s	au
paquetage	N.C.m.s	paquetage
java.lang	A.qual.m.s	javallang
Exemple	N.C.m.s	exemple
:	PONCT.W	:
StringBuffer	N.P.m.s	Stringbuffer
chaine	N.C.f.s	chaine
;	PONCT.W	;
chaine	N.C.f.s	chaine
=	ET	=
new	ET	new
StringBuffer	N.P.x.s	Stringbuffer
(	PONCT.W	(
"	PONCT.W	"
Meeting	N.P.m.s	Meeting
at	V.P.3.s	avoir
6	D.card.m.p	@card@
pm	N.C.m.p	<unknown>
!	PONCT.S	!

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
chaine.setCharAt(11	N.C.f.s	<unknown>
,	PONCT.W	,
'	PONCT.W	'
5	N.card.m.s	@card@
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
meeting	ET	meeting
at	N.C.m.s	at
5	D.card.m.p	@card@
and	ET	and
not	V.P.3.p	notre
6	A.card.m.s	@card@
!	PONCT.S	!

System.out.println(chaine)	N.P.m.s	<unknown>
;	PONCT.W	;
5.2.4	D.card.m.p	@card@
Tableau	N.C.m.s	tableau
Un	D.ind.m.s	un
tableau	N.C.m.s	tableau
est	V.P.3.s	être
une	D.ind.f.s	un
collection	N.C.f.s	collection
de	P	de
taille	N.C.f.s	taille
fixe	A.qual.f.s	fixe
d'	P	de
éléments	N.C.m.p	élément
de	P	de
même	A.qual.m.s	même
type	N.C.m.s	type
.	PONCT.S	.

Chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
est	V.P.3.s	être
repéré	VK.m.s	repérer
par	P	par
son	D.poss.m.s	son
indice	N.C.m.s	indice
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
un	D.ind.m.s	un
accès	N.C.m.s	accès
direct	A.qual.m.s	direct
à	P	à
l'	D.def.m.s	le
élément	N.C.m.s	élément
.	PONCT.S	.

A	P	à
tout	D.ind.m.s	tout
tableau	N.C.m.s	tableau
est	V.P.3.s	être
automatiquement	ADV.-	automatiquement
associée	VK.f.s	associer
une	D.ind.f.s	un
classe	N.C.f.s	classe
dérivée	A.qual.f.s	dérivé
d'	P	de
Object	N.P.m.s	Object
et	C.C	et
partagée	VK.f.s	partager
par	P	par
tous	A.ind.m.p	tous
les	D.def.m.p	le
tableaux	N.C.m.p	tableau
ayant	VG	avoir
le	D.def.m.s	le
même	A.qual.m.s	même
type	N.C.m.s	type
d'	P	de
éléments	N.C.m.p	élément
.	PONCT.S	.

L'	D.def.m.s	le
attribut	N.C.m.s	attribut
d'	P	de
instance	N.C.f.s	instance
length	A.qual.m.s	<unknown>
(	PONCT.W	(
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
un	D.ind.m.s	un
champ	N.C.m.s	champ
public	A.qual.m.s	public
et	C.C	et
non	ADV.neg	non
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
)	PONCT.W	)
contient	V.P.3.s	contenir
le	D.def.m.s	le
nombre	N.C.m.s	nombre
d'	P	de
éléments	N.C.m.p	élément
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
.	PONCT.S	.

Les	D.def.m.p	le
éléments	N.C.m.p	élément
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
array	A.qual.m.s	array
sont	V.P.3.p	être
indicés	VK.m.p	indicer
de	P	de
0	D.card.m.s	@card@
à	P	à
array.length	N.C.m.s	<unknown>
-	PONCT.W	-
1	N.card.m.s	@card@
Quand	C.S	quand
on	CL.suj.3.m.s	on
tente	V.P.3.s	tenter
d'	P	de
accéder	VW	accéder
à	P	à
un	D.ind.m.s	un
élément	N.C.m.s	élément
dont	PRO.rel.m.s	dont
l'	D.def.m.s	le
indice	N.C.m.s	indice
est	V.P.3.s	être
hors	ADV.-	hors
de	P	de
la	D.def.f.s	le
plage	N.C.f.s	plage
permise	A.qual.f.s	permis
,	PONCT.W	,
une	D.ind.f.s	un
exception	N.C.f.s	exception
de	P	de
type	N.C.m.s	type
IndexOutOfBoundsException	N.P.x.s	Indexoutoundsexception
est	V.P.3.s	être
levée	VK.f.s	lever
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
à	P	à
noter	VW	noter
qu'	C.S	que
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
de	P	de
caractères	N.C.m.p	caractère
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
type	N.C.m.s	type
Siring	N.P.m.s	Siring
et	C.C	et
réciproquement	N.C.m.s	réciproquement
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
(	PONCT.W	(
pour	P	pour
le	D.def.m.s	le
cas	N.C.m.s	cas
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
mono-dimensionnel	A.qual.m.s	mono-dimensionnel
)	PONCT.W	)
:	PONCT.W	:
//	PONCT.W	@card@
Declaring	N.P.m.s	Declaring
an	ET	an
array	ET	array
variable	A.qual.m.s	variable
TypeOfElements[	N.P.x.s	<unknown>
]	PONCT.W	]
arrayVariable	A.qual.m.s	arrayvariable
;	PONCT.W	;
//	PONCT.W	@card@
Creating	ET	creating
an	ET	an
array	ET	array
object	N.C.m.s	object
arrayVariable	A.qual.m.s	arrayvariable
=	PONCT.W	=
new	ET	new
TypeOfElements[numberOfElements	N.C.m.p	typeofelements-numberement
]	PONCT.W	]
;	PONCT.W	;
//	PONCT.W	@card@
Referring	ET	referring
to	ET	to
an	ET	an
element	ADV.-	element
arrayVariable[integerIndex	A.qual.m.s	<unknown>
]	PONCT.W	]
Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	PONCT.W	@card@
Declaring	N.P.m.s	Declaring
an	ET	an
array	ET	array
variable	A.qual.m.s	variable
private	A.qual.f.s	privat
double[	A.qual.f.s	doubleë
]	PONCT.W	]
marks	N.C.m.p	mark
;	PONCT.W	;
//	ET	@card@
Creating	ET	creating
an	ET	an
array	ET	array
object	ET	object
static	A.qual.m.s	static
final	A.qual.m.s	final
int	V.J.3.s	enir
NB_OF_STUDENTS	N.P.x.s	Nbçofçstudents
=	V.P.3.s	être
48	D.card.m.p	@card@
;	PONCT.W	;
marks	N.C.m.p	mark
=	PONCT.W	=
new	ET	new
double[NB_OF_STUDENTS	N.C.m.p	<unknown>
]	PONCT.W	]
;	PONCT.W	;
//	PONCT.W	@card@
Using	ET	using
an	ET	an
array	ET	array
object	ET	object
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
1	A.card.m.s	@card@
=	PONCT.W	=
0	A.card.m.s	@card@
;	PONCT.W	;
1	D.card.m.s	@card@
<	D.card.m.s	<
marks.length	N.C.m.s	<unknown>
;	PONCT.W	;
i++	N.C.m.s	iu
)	PONCT.W	)
{	P+D.def.m.s	c
marks[i	N.C.m.s	markshi
]	PONCT.W	]
=	PONCT.W	=
Math.random()	N.P.m.s	<unknown>
*	N.C.m.s	*
20.0	N.card.m.s	@card@
;	PONCT.W	;
System.out.println("marks[	N.P.m.s	<unknown>
"	PONCT.W	"
+	P	p
1	D.card.m.s	@card@
+	N.C.m.s	ran
"	PONCT.W	"
]	PONCT.W	]
=	N.C.m.s	=
"	PONCT.W	"
+	P	p
marks[i	N.C.m.s	markshi
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
static	N.C.m.s	static
final	A.qual.m.s	final
int	VK.m.s	indre
NROW	N.P.m.s	Nrow
10	A.card.m.s	@card@
;	PONCT.W	;
static	N.C.m.s	static
final	A.qual.m.s	final
int	V.J.3.s	enir
NCOL	N.P.m.s	Ncol
=	PONCT.W	=
20	N.card.m.s	@card@
;	PONCT.W	;
String[][	N.P.m.s	Stringçëë
]	PONCT.W	]
matrix	N.C.m.s	matrix
=	PONCT.W	=
new	ET	new
String[NROW][NCOL	N.P.m.s	Stringänrowcol
]	PONCT.W	]
;	PONCT.W	;
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
créer	VW	créer
et	C.C	et
d'	P	de
initialiser	VW	initialiser
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
à	P	à
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
int[	PRO.card.m.p	<unknown>
]	PONCT.W	]
t	PONCT.W	t
=	V.P.3.s	être
{	VK.m.s	être
150	N.card.m.s	@card@
,	PONCT.W	,
-300	N.card.m.s	@card@
,	PONCT.W	,
40	N.card.m.s	@card@
,	PONCT.W	,
500	D.card.m.p	@card@
}	N.C.m.p	}
;	PONCT.W	;
System.out.println(t[0	N.P.m.s	<unknown>
]	PONCT.W	]
+	P	p
"	PONCT.W	"
"	PONCT.W	"
+	P	p
t[3	PRO.card.m.p	<unknown>
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
150	D.card.m.p	@card@
500	D.card.m.p	@card@
String[	N.C.m.p	stringà
][	PONCT.W	<unknown>
]	PONCT.W	]
s	PONCT.W	s
=	PONCT.W	=
{	N.C.m.s	{
{	N.C.m.s	{
"	PONCT.W	"
Mr	N.C.m.s	mr
.	PONCT.S	.

"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Mrs	N.C.m.p	mr
.	PONCT.S	.

"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Ms	N.C.m.p	m
.	PONCT.S	.

"	PONCT.W	"
}	N.C.m.s	}
,	PONCT.W	,
//	PONCT.W	@card@
row	N.C.m.s	row
0	D.card.m.s	@card@
{	N.C.m.s	{
"	PONCT.W	"
Smith	N.P.m.s	Smith
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Jones	N.P.m.s	Jones
"	PONCT.W	"
}	N.C.m.s	}
//	PONCT.W	@card@
row	N.C.m.s	row
1	D.card.m.s	@card@
}	N.C.m.s	}
;	PONCT.W	;
System.out.print(s[0][2	N.P.x.s	<unknown>
]	PONCT.W	]
+	P	p
s[1][1	N.C.f.s	<unknown>
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Ms	N.C.m.p	m
.	PONCT.S	.

Jones	N.P.m.s	Jones
La	D.def.f.s	le
classe	N.C.f.s	classe
java.util.Arrays	ET	<unknown>
offre	V.P.3.s	offrir
diverses	D.ind.f.p	divers
méthodes	N.C.f.p	méthode
utilitaires	A.qual.f.p	utilitaire
applicables	A.qual.f.p	applicable
à	P	à
des	D.ind.m.p	du
tableaux	N.C.m.p	tableau
(	PONCT.W	(
comparaison	N.C.f.s	comparaison
,	PONCT.W	,
tri	N.C.m.s	tri
,	PONCT.W	,
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
Java	N.P.m.s	Java
offre	V.P.3.s	offrir
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
For	N.P.m.s	For
simplifiée	VK.f.s	simplifier
pour	P	pour
parcourir	VW	parcourir
les	D.def.m.p	le
éléments	N.C.m.p	élément
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	ET	@card@
for	ET	for
each	ET	each
element	ET	element
of	ET	of
my	ET	my
array	ET	array
of	ET	of
doubles	A.qual.m.p	double
,	PONCT.W	,
print	V.J.3.s	prendre
this	N.C.m.p	thi
element	ADV.-	element
for	A.qual.m.s	for
(	PONCT.W	(
double	A.qual.m.s	double
e	PONCT.W	e
:	PONCT.W	:
myArrayOfDoubles	N.C.m.p	<unknown>
)	PONCT.W	)
{	N.C.m.s	{
System.out.println(e)	N.P.m.s	<unknown>
;	PONCT.W	;
}	V.P.3.s	être
5.2.5	A.card.f.s	@card@
Collection	N.C.f.s	collection
Une	D.ind.f.s	un
collection	N.C.f.s	collection
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
représentant	VG	représenter
un	D.ind.m.s	un
groupe	N.C.m.s	groupe
d'	P	de
objets	N.C.m.p	objet
.	PONCT.S	.

Une	D.ind.f.s	un
collection	N.C.f.s	collection
est	V.P.3.s	être
un	D.ind.m.s	un
agrégat	N.C.m.s	agrégat
qui	PRO.rel.m.s	qui
regroupe	V.P.3.s	regrouper
des	D.ind.m.p	du
éléments	N.C.m.p	élément
multiples	A.qual.m.p	multiple
en	P	en
une	D.ind.f.s	un
seule	A.ind.f.s	seul
entité	N.C.f.s	entité
.	PONCT.S	.

Aucune	D.neg.f.s	aucun
hypothèse	N.C.f.s	hypothèse
n'	ADV.neg	ne
est	V.P.3.s	être
faite	VK.f.s	faire
a	V.P.3.s	avoir
priori	VK.m.s	priorir
sur	P	sur
le	D.def.m.s	le
type	N.C.m.s	type
des	P+D.def.m.p	du
éléments	N.C.m.p	élément
,	PONCT.W	,
ni	C.C	ni
sur	P	sur
l'	D.def.m.s	le
ordre	N.C.m.s	ordre
des	P+D.def.m.p	du
éléments	N.C.m.p	élément
,	PONCT.W	,
ni	C.C	ni
sur	P	sur
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
éléments	N.C.m.p	élément
dupliqués	VK.m.p	dupliquer
.	PONCT.S	.

Plus	ADV.-	plus
formellement	ADV.-	formellement
,	PONCT.W	,
en	P	en
Java	N.P.m.s	Java
,	PONCT.W	,
une	D.ind.f.s	un
collection	N.C.f.s	collection
d'	P	de
éléments	N.C.m.p	élément
de	P	de
type	N.C.m.s	type
E	PONCT.W	e
est	V.P.3.s	être
une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
implémente	V.P.3.s	implémenter
l'	D.def.f.s	le
interface	N.C.f.s	interface
Collection<E>	N.P.f.s	Collectionçeë
.	PONCT.S	.

Le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
standard	A.qual.m.s	standard
java.util	A.qual.m.s	<unknown>
offre	V.P.3.s	offrir
une	D.ind.f.s	un
variété	N.C.f.s	variété
de	P	de
collections	N.C.f.p	collection
(	PONCT.W	(
collections	N.C.f.p	collection
framework	A.qual.f.p	framework
)	PONCT.W	)
qui	PRO.rel.f.p	qui
répondent	V.P.3.p	répondre
aux	P+D.def.m.p	au
besoins	N.C.m.p	besoin
les	D.def.m.p	le
plus	ADV.-	plus
fréquents	A.qual.m.p	fréquent
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
ArrayList<E>	N.P.f.s	Arraylistçeë
,	PONCT.W	,
Vector<E>	N.P.f.s	Vectorçeë
,	PONCT.W	,
LinkedList<E>	N.P.m.s	Linkedlistçeë
,	PONCT.W	,
Stack<E>	N.P.f.s	Stackçeë
,	PONCT.W	,
Hashtable<K,V>	N.P.m.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.

5.2.5.1	A.ord.f.s	@card@
Généricité	N.C.f.s	généricité
Cette	D.dem.f.s	ce
notion	N.C.f.s	notion
n'	ADV.neg	ne
existe	V.P.3.s	exister
en	P	en
Java	N.P.m.s	Java
que	ADV.neg	que
depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Cette	D.dem.f.s	ce
version	N.C.f.s	version
5.0	N.card.f.s	@card@
introduit	V.P.3.s	introduire
une	D.ind.f.s	un
révision	N.C.f.s	révision
majeure	A.qual.f.s	majeur
par	P	par
rapport	N.C.m.s	rapport
à	P	à
la	D.def.f.s	le
précédente	N.C.f.s	précédent
,	PONCT.W	,
notamment	ADV.-	notamment
en	P	en
matière	N.C.f.s	matière
de	P	de
gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
collections	N.C.f.p	collection
.	PONCT.S	.

L'	D.def.f.s	le
apparition	N.C.f.s	apparition
de	P	de
types	N.C.m.p	type
génériques	A.qual.m.p	générique
en	P	en
est	V.P.3.s	être
probablement	ADV.-	probablement
l'	D.def.f.s	le
évolution	N.C.f.s	évolution
la	D.def.f.s	le
plus	ADV.-	plus
marquante	A.qual.f.s	marquant
.	PONCT.S	.

La	D.def.f.s	le
généricité	N.C.f.s	généricité
permet	V.P.3.s	permettre
de	P	de
communiquer	VW	communiquer
au	P+D.def.m.s	au
compilateur	N.C.m.s	compilateur
le	D.def.m.s	le
type	N.C.m.s	type
des	P+D.def.m.p	du
éléments	N.C.m.p	élément
d'	P	de
une	D.ind.f.s	un
collection	N.C.f.s	collection
au	P+D.def.m.s	au
moment	N.C.m.s	moment
de	P	de
la	D.def.f.s	le
création	N.C.f.s	création
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
et	C.C	et
non	ADV.neg	non
pas	ADV.neg	pas
en	P	en
le	CL.obj.3.m.s	le
fixant	VG	fixer
a	V.P.3.s	avoir
priori	VK.m.s	priorir
dans	P	dans
la	D.def.f.s	le
définition	N.C.f.s	définition
de	P	de
classe	N.C.f.s	classe
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
classe	N.C.f.s	classe
générique	A.qual.f.s	générique
:	PONCT.W	:
//	PONCT.W	@card@
Defining	N.P.m.s	Defining
a	V.P.3.s	avoir
generic	A.qual.m.s	<unknown>
collection	N.C.f.s	collection
.	PONCT.S	.

//	PONCT.W	@card@
The	ET	the
formal	A.qual.m.s	formal
parameter	VW	parameter
T	C.S	t
is	ET	is
the	ET	the
generic	ET	generic
type	ET	type
of	ET	of
the	ET	the
elements	N.C.m.p	element
.	PONCT.S	.

public	A.qual.m.s	public
class	ET	class
MyCollection<T>	N.P.m.s	<unknown>
implements	ADV.-	implements
List<T>	N.P.x.s	Listütë
{	N.C.m.s	{
...	PONCT.W	<unknown>
//	PONCT.W	@card@
T	C.C	t
can	N.C.m.s	can
be	A.qual.m.s	be
used	ET	used
here	ET	here
as	ET	as
any	ET	any
type	N.C.m.s	type
...	PONCT.W	<unknown>
}	N.C.m.s	}
//	PONCT.W	@card@
Creating	N.P.m.s	Creating
a	V.P.3.s	avoir
collection	N.C.f.s	collection
of	ET	of
Integers	N.P.m.s	Integers
MyCollection<Integer>	N.P.m.s	Mycollectionçinçegerë
collectionOfIntegers	N.C.m.p	collectionofinteger
;	PONCT.W	;
CollectionOfIntegers	N.P.x.s	Collectionofintegers
=	ET	=
new	ET	new
MyCollection<Integer>()	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Creating	N.P.m.s	Creating
a	V.P.3.s	avoir
collection	N.C.f.s	collection
of	ET	of
Strings	N.P.m.s	Strings
MyCollection<String>	N.P.m.s	<unknown>
collectionOfStrings	N.C.m.p	collectionofstring
;	PONCT.W	;
CollectionOfStrings	N.C.m.p	collectionofstring
=	PONCT.W	=
new	ET	new
MyCollection<String>()	N.P.x.s	Mycollectionçstringçëë
;	PONCT.W	;
Tout	ADV.-	tout
comme	P	comme
les	D.def.f.p	le
déclarations	N.C.f.p	déclaration
de	P	de
type	N.C.m.s	type
peuvent	V.P.3.p	pouvoir
être	VW	être
génériques	A.qual.f.p	générique
,	PONCT.W	,
les	D.def.f.p	le
déclarations	N.C.f.p	déclaration
de	P	de
méthodes	N.C.f.p	méthode
peuvent	V.P.3.p	pouvoir
être	VW	être
aussi	ADV.-	aussi
génériques	A.qual.f.p	générique
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
paramétrisées	VK.f.p	paramétriser
par	P	par
un	D.ind.m.s	un
ou	C.C	ou
plusieurs	D.ind.m.p	plusieurs
paramètres	N.C.m.p	paramètre
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
méthode	N.C.f.s	méthode
générique	A.qual.f.s	générique
:	PONCT.W	:
//	PONCT.W	@card@
Defining	N.P.m.s	Defining
public	A.qual.m.s	public
static	A.qual.m.s	static
<T>	N.P.x.s	<unknown>
void	V.P.3.s	voiler
fromArrayToCollection(T[	N.C.f.p	<unknown>
]	PONCT.W	]
a	V.P.3.s	avoir
,	PONCT.W	,
Collection<T>	N.C.m.s	collectionçtà
c){	ET	cçë
for	N.C.m.s	for
(	PONCT.W	(
T	N.card.m.s	t
o	PONCT.W	o
:	PONCT.W	:
a	V.P.3.s	avoir
)	PONCT.W	)
{	D.card.m.s	{
c.add(o)	N.C.m.s	coaddooë
;	PONCT.W	;
}	D.card.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
Using	N.P.m.s	Using
it	C.C	it
String[	N.P.m.s	Stringü
]	PONCT.W	]
a1	V.P.3.s	avoir
=	PONCT.W	=
{	N.C.m.s	{
"	PONCT.W	"
datal	N.C.m.s	datal
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
data2	N.C.m.p	<unknown>
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
data3	N.P.m.s	<unknown>
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
data4	N.C.m.p	<unknown>
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
data5	N.P.m.s	<unknown>
"	PONCT.W	"
}	N.C.m.s	}
;	PONCT.W	;
Collection<Object>	N.P.m.s	Collectionçobjectë
c1	A.card.m.s	<unknown>
=	ET	=
new	ET	new
ArrayList<String>()	N.P.x.s	Arraylist-Stringëë
;	PONCT.W	;
fromArrayToCollection(a1	N.C.f.s	<unknown>
,	PONCT.W	,
c1	N.card.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Nota	N.P.m.s	Nota
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
à	P	à
signaler	VW	signaler
que	C.S	que
les	D.def.m.p	le
tableaux	N.C.m.p	tableau
et	C.C	et
les	D.def.m.p	le
génériques	N.C.m.p	générique
ne	ADV.neg	ne
font	V.P.3.p	faire
pas	ADV.neg	pas
encore	ADV.-	encore
bon	A.qual.m.s	bon
ménage	N.C.m.s	ménage
!	PONCT.S	!

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Vector<Integer>[	N.C.m.s	vectorçintegerçç
]	PONCT.W	]
sheets	N.C.m.p	sheet
=	PONCT.W	=
new	ET	new
Vector<Integer>[NBOFSHEETS	N.P.x.s	Vectorçintegerçofss
]	PONCT.W	]
;	PONCT.W	;
produit	V.P.3.s	produire
l'	D.def.f.s	le
erreur	N.C.f.s	erreur
classique	A.qual.m.s	classique
"	PONCT.W	"
Generic	N.P.m.s	Generic
array	ET	array
creation	N.C.f.s	creation
"	PONCT.W	"
.	PONCT.S	.

Dans	P	dans
cet	D.dem.m.s	ce
exemple	N.C.m.s	exemple
,	PONCT.W	,
une	D.ind.f.s	un
solution	N.C.f.s	solution
pourrait	V.C.3.s	pouvoir
consister	VW	consister
à	P	à
passer	VW	passer
par	P	par
une	D.ind.f.s	un
classe	N.C.f.s	classe
intermédiaire	A.qual.f.s	intermédiaire
simplement	ADV.-	simplement
définie	VK.f.s	définir
par	P	par
:	PONCT.W	:
class	N.C.m.p	class
VectorOfIntegers	N.P.m.s	Vectorofintegers
extends	N.C.m.p	extend
Vector<Integer>	N.P.m.s	Vectorçintegerä
{	N.C.m.s	{
}	N.C.m.s	}
Le	D.def.m.s	le
type	N.C.m.s	type
?	PONCT.S	?

est	V.P.3.s	être
appelé	VK.m.s	appeler
type	N.C.m.s	type
joker	N.C.m.s	joker
(	PONCT.W	(
wildcard	ET	wildcard
type	N.C.m.s	type
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
permet	V.P.3.s	permettre
de	P	de
représenter	VW	représenter
tout	D.ind.m.s	tout
type	N.C.m.s	type
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
void	V.P.3.s	voiler
printAll(Collection<	A.qual.m.s	printallccollectionç
?	PONCT.S	?

>	N.C.m.s	>
c	N.C.m.s	c
)	PONCT.W	)
{	P	à
for	N.C.m.s	for
(	PONCT.W	(
Object	N.C.m.s	object
o	PONCT.W	o
:	PONCT.W	:
c	N.C.f.s	c
)	PONCT.W	)
{	N.C.m.s	{
System.out.println(o)	N.P.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
borner	VW	borner
le	D.def.m.s	le
type	N.C.m.s	type
joker	N.C.m.s	joker
.	PONCT.S	.

Un	D.ind.m.s	un
caractère	N.C.m.s	caractère
joker	A.qual.m.s	joker
avec	P	avec
une	D.ind.f.s	un
borne	A.qual.f.s	borne
supérieure	A.qual.f.s	supérieur
est	V.P.3.s	être
spécifié	VK.m.s	spécifier
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

extends	N.C.m.p	extend
Type>	N.P.m.s	Typeë
et	C.C	et
représente	V.P.3.s	représenter
tous	A.ind.m.p	tous
les	D.def.m.p	le
sous-types	N.C.m.p	sous-type
de	P	de
Type	N.P.m.s	Type
.	PONCT.S	.

Un	D.ind.m.s	un
caractère	N.C.m.s	caractère
joker	A.qual.m.s	joker
avec	P	avec
une	D.ind.f.s	un
borne	N.C.f.s	borne
inférieure	A.qual.f.s	inférieur
est	V.P.3.s	être
spécifié	VK.m.s	spécifier
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

super	VW	super
Type>	N.P.m.s	Typeë
et	C.C	et
représente	V.P.3.s	représenter
tous	A.ind.m.p	tous
les	D.def.m.p	le
types	N.C.m.p	type
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
des	D.ind.m.p	du
super-types	N.C.m.p	super-type
de	P	de
Type	N.P.f.s	Type
.	PONCT.S	.

5.2.5.2	D.card.m.p	@card@
Exemple	N.C.m.s	exemple
de	P	de
collection	N.C.f.s	collection
:	PONCT.W	:
ArrayList	N.P.m.s	Arraylist
Un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
type	N.C.m.s	type
ArrayList<E>	N.P.m.s	Arraylistçeë
est	V.P.3.s	être
une	D.ind.f.s	un
collection	N.C.f.s	collection
de	P	de
taille	N.C.f.s	taille
variable	A.qual.f.s	variable
d'	P	de
éléments	N.C.m.p	élément
de	P	de
type	N.C.m.s	type
E.	N.P.m.s	E
Chaque	D.ind.m.s	chaque
élément	N.C.m.s	élément
est	V.P.3.s	être
repéré	VK.m.s	repérer
par	P	par
son	D.poss.m.s	son
indice	N.C.m.s	indice
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
un	D.ind.m.s	un
accès	N.C.m.s	accès
direct	A.qual.m.s	direct
à	P	à
l'	D.def.m.s	le
élément	N.C.m.s	élément
.	PONCT.S	.

Une	D.ind.f.s	un
liste-tableau	N.C.f.s	liste-tableau
supporte	V.P.3.s	supporter
les	D.def.f.p	le
principales	A.qual.f.p	principal
fonctionnalités	N.C.f.p	fonctionnalité
suivantes	A.qual.f.p	suivant
:	PONCT.W	:
-	PONCT.W	-
ajout	N.C.m.s	ajout
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
en	P	en
fin	N.C.f.s	fin
de	P	de
tableau	N.C.m.s	tableau
(	PONCT.W	(
méthode	N.C.f.s	méthode
add(E))	N.C.m.s	addceç
-	PONCT.W	-
accès	N.C.m.s	accès
à	P	à
un	D.ind.m.s	un
élément	N.C.m.s	élément
d'	P	de
indice	N.C.m.s	indice
donné	A.qual.m.s	donné
(	PONCT.W	(
méthodes	N.C.f.p	méthode
get(int)	A.qual.m.s	getçintà
et	C.C	et
add(int	N.C.m.s	addçint
,	PONCT.W	,
E	PONCT.W	e
)	PONCT.W	)
)	PONCT.W	)
-	PONCT.W	-
suppression	N.C.f.s	suppression
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
d'	P	de
indice	N.C.m.s	indice
donné	A.qual.m.s	donné
(	PONCT.W	(
méthode	N.C.f.s	méthode
remove	V.P.3.s	remover
(int))	N.C.m.s	çintçë
-	PONCT.W	-
consultation	N.C.f.s	consultation
du	P+D.def.m.s	du
nombre	N.C.m.s	nombre
d'	P	de
éléments	N.C.m.p	élément
(	PONCT.W	(
méthode	N.C.f.s	méthode
size())	V.P.3.s	sizecer
Les	D.def.m.p	le
éléments	N.C.m.p	élément
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
collection	N.C.f.s	collection
de	P	de
type	N.C.m.s	type
ArrayList<E>	N.P.m.s	Arraylistçeë
sont	V.P.3.p	être
indicés	VK.m.p	indicer
de	P	de
0	D.card.m.s	@card@
à	P	à
collection.size(	N.C.m.s	<unknown>
)	PONCT.W	)
-	PONCT.W	-
1	A.card.m.s	@card@
La	D.def.f.s	le
classe	N.C.f.s	classe
ArrayList<E>	N.P.m.s	Arraylistçeë
doit	V.P.3.s	devoir
être	VW	être
importée	VK.f.s	importer
du	P+D.def.m.s	du
paquetage	N.C.m.s	paquetage
java.util	A.qual.m.s	<unknown>
par	P	par
:	PONCT.W	:
import	N.C.m.s	import
java.util.ArrayList	ET	<unknown>
;	PONCT.W	;
Exemple	N.C.m.s	exemple
:	PONCT.W	:
ArrayList<Integer>	N.P.x.s	Arraylist-Integerë
myCollectionOfIntegers	N.C.m.p	mycollectionofinteger
;	PONCT.W	;
myCollectionOfIntegers	N.C.m.p	mycollectionofinteger
=	ET	=
new	ET	new
ArrayList<Integer>()	N.P.x.s	Arraylist-Integerç
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
1	A.card.m.s	@card@
=	PONCT.W	=
0	A.card.m.s	@card@
;	PONCT.W	;
1	A.card.m.s	@card@
<	N.C.m.s	<
10	A.card.m.s	@card@
;	PONCT.W	;
i++	ADV.-	iuu
)	PONCT.W	)
{	D.card.m.s	{
listOfintegers.add(i	N.C.m.s	<unknown>
,	PONCT.W	,
0	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
}	VK.m.s	être
5.2.5.3	D.card.m.p	@card@
Parcours	N.C.m.p	parcours
d'	P	de
une	D.ind.f.s	un
collection	N.C.f.s	collection
--	PONCT.W	--
Itérateur	N.C.m.s	itérateur
Le	D.def.m.s	le
parcours	N.C.m.s	parcours
d'	P	de
une	D.ind.f.s	un
collection	N.C.f.s	collection
est	V.P.3.s	être
l'	D.def.f.s	le
opération	N.C.f.s	opération
qui	PRO.rel.f.s	qui
consiste	V.P.3.s	consister
à	P	à
explorer	VW	explorer
cette	D.dem.f.s	ce
collection	N.C.f.s	collection
élément	N.C.m.s	élément
par	P	par
élément	N.C.m.s	élément
.	PONCT.S	.

Deux	D.card.f.p	deux
façons	N.C.f.p	façon
de	P	de
faire	VW	faire
pour	P	pour
parcourir	VW	parcourir
une	D.ind.f.s	un
collection	N.C.f.s	collection
:	PONCT.W	:
-	PONCT.W	-
Soit	C.C	soit
utiliser	VW	utiliser
un	D.ind.m.s	un
itérateur	N.C.m.s	itérateur
.	PONCT.S	.

Un	D.ind.m.s	un
itérateur	N.C.m.s	itérateur
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
type	N.C.m.s	type
Iterator<E>	N.P.x.s	Iteratorçeë
.	PONCT.S	.

Les	D.def.f.p	le
trois	A.card.f.p	trois
fonctionnalités	N.C.f.p	fonctionnalité
les	D.def.f.p	le
plus	ADV.-	plus
utiles	A.qual.f.p	utile
pour	P	pour
créer	VW	créer
et	C.C	et
gérer	VW	gérer
un	D.ind.m.s	un
itérateur	N.C.m.s	itérateur
sont	V.P.3.p	être
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
:	PONCT.W	:
iterator()	N.C.m.s	iteratorçë
(	PONCT.W	(
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Collection	N.C.f.s	collection
)	PONCT.W	)
,	PONCT.W	,
hasNext()	N.C.m.s	hasnextçë
et	C.C	et
next()	N.C.m.s	nextçë
(	PONCT.W	(
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Iterator	N.P.m.s	Iterator
)	PONCT.W	)
.	PONCT.S	.

A	P	à
noter	VW	noter
que	C.S	que
la	D.def.f.s	le
suppression	N.C.f.s	suppression
d'	P	de
éléments	N.C.m.p	élément
de	P	de
la	D.def.f.s	le
collection	N.C.f.s	collection
en	P	en
cours	N.C.m.s	cours
de	P	de
parcours	N.C.m.p	parcours
relève	V.P.3.s	relever
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
remove()	N.C.m.s	removeçà
de	P	de
l'	D.def.m.s	le
itérateur	N.C.m.s	itérateur
et	C.C	et
non	ADV.neg	non
de	P	de
celle	PRO.dem.f.s	celui
de	P	de
la	D.def.f.s	le
collection	N.C.f.s	collection
.	PONCT.S	.

La	D.def.f.s	le
classe	N.C.f.s	classe
Iterator<E>	N.P.f.s	Iteratorçeë
doit	V.P.3.s	devoir
être	VW	être
importée	VK.f.s	importer
du	P+D.def.m.s	du
paquetage	N.C.m.s	paquetage
java.util	A.qual.m.s	<unknown>
par	P	par
:	PONCT.W	:
import	N.C.m.s	import
java.util.Iterator	N.C.m.s	<unknown>
;	PONCT.W	;
Les	D.def.m.p	le
itérateurs	N.C.m.p	itérateur
sont	V.P.3.p	être
la	D.def.f.s	le
façon	N.C.f.s	façon
de	P	de
faire	VW	faire
historique	A.qual.m.s	historique
pour	P	pour
parcourir	VW	parcourir
une	D.ind.f.s	un
collection	N.C.f.s	collection
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
version	N.C.f.s	version
5.0	D.card.m.p	@card@
ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
génériques	A.qual.m.p	générique
.	PONCT.S	.

-	PONCT.W	-
Soit	C.C	soit
utiliser	VW	utiliser
une	D.ind.f.s	un
boucle	A.qual.f.s	boucle
for	N.C.f.s	for
généralisée	VK.f.s	généraliser
.	PONCT.S	.

Une	D.ind.f.s	un
telle	A.qual.f.s	tel
boucle	N.C.f.s	boucle
permet	V.P.3.s	permettre
de	P	de
s'	CL.refl.3.f.s	se
affranchir	VW	affranchir
des	D.ind.m.p	du
itérateurs	N.C.m.p	itérateur
et	C.C	et
de	P	de
parcourir	VW	parcourir
très	ADV.-	très
simplement	ADV.-	simplement
une	D.ind.f.s	un
collection	N.C.f.s	collection
quelconque	A.qual.f.s	quelconque
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
n'	ADV.neg	ne
est	V.P.3.s	être
offerte	VK.f.s	offrir
que	ADV.neg	que
depuis	P	depuis
la	D.def.f.s	le
version	N.C.f.s	version
5.0	A.card.f.s	@card@
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
parcours	N.C.m.p	parcours
avec	P	avec
itérateur	N.C.m.s	itérateur
:	PONCT.W	:
Iterator<Integer>	N.P.m.s	<unknown>
it	C.C	it
=	PONCT.W	=
myCollectionOfIntegers.iterator()	N.C.m.s	<unknown>
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
it.hasNext()	N.C.m.s	<unknown>
)	PONCT.W	)
{	ET	{
//	PONCT.W	@card@
call	ET	call
it.next()	ET	<unknown>
to	ET	to
get	ET	get
the	ET	the
next	ET	next
object	ET	object
of	ET	of
the	ET	the
collection	N.C.f.s	collection
//	PONCT.W	@card@
and	ET	and
do	ET	do
something	ET	something
with	ET	with
that	ET	that
object	N.C.m.s	object
}	P+D.def.m.s	c
Exemple	N.C.m.s	exemple
de	P	de
parcours	N.C.m.p	parcours
sans	P	sans
itérateur	N.C.m.s	itérateur
:	PONCT.W	:
//	ET	@card@
for	ET	for
each	ET	each
element	ET	element
of	ET	of
my	ET	my
collection	ET	collection
of	ET	of
Integers	ET	integer
,	PONCT.W	,
print	ET	print
it	C.C	it
for	N.C.m.s	for
(	PONCT.W	(
Integer	N.P.m.s	Integer
v	N.card.m.s	v
:	PONCT.W	:
myCollectionOfIntegers	N.C.m.p	mycollectionofinteger
)	PONCT.W	)
{	N.P.m.s	{
System.out.println(v)	N.P.m.s	<unknown>
;	PONCT.W	;
}	V.P.3.s	être
5.3	D.card.m.p	@card@
Transtypage	N.C.m.p	transtypage
Le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
(	PONCT.W	(
en	P	en
anglais	N.C.m.s	anglais
:	PONCT.W	:
cast	N.C.m.s	cast
/	PONCT.W	@card@
casting	N.C.m.s	casting
)	PONCT.W	)
est	V.P.3.s	être
une	D.ind.f.s	un
opération	N.C.f.s	opération
qui	PRO.rel.f.s	qui
consiste	V.P.3.s	consister
à	P	à
convertir	VW	convertir
le	D.def.m.s	le
type	N.C.m.s	type
d'	P	de
une	D.ind.f.s	un
expression	N.C.f.s	expression
.	PONCT.S	.

La	D.def.f.s	le
conversion	N.C.f.s	conversion
de	P	de
type	N.C.m.s	type
se	CL.refl.3.f.s	se
réalise	V.P.3.s	réaliser
en	P	en
faisant	VG	faire
précéder	VW	précéder
l'	D.def.f.s	le
expression	N.C.f.s	expression
par	P	par
le	D.def.m.s	le
type	N.C.m.s	type
cible	A.qual.m.s	cible
entre	P	entre
parenthèses	N.C.f.p	parenthèse
.	PONCT.S	.

Cette	D.dem.f.s	ce
proposition	N.C.f.s	proposition
s'	CL.refl.3.f.s	se
applique	V.P.3.s	appliquer
à	P	à
certains	D.ind.m.p	certain
types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
et	C.C	et
aux	P+D.def.m.p	au
types	N.C.m.p	type
objets	N.C.m.p	objet
liés	VK.m.p	lier
par	P	par
une	D.ind.f.s	un
relation	N.C.f.s	relation
d'	P	de
héritage	N.C.m.s	héritage
.	PONCT.S	.

Les	D.def.f.p	le
conversions	N.C.f.p	conversion
incorrectes	A.qual.f.p	incorrect
provoquent	V.P.3.p	provoquer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
ou	C.C	ou
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
.	PONCT.S	.

A	P	à
noter	VW	noter
qu'	C.S	que
un	D.ind.m.s	un
transtypage	N.C.m.s	transtypage
ne	ADV.neg	ne
change	V.P.3.s	changer
pas	ADV.neg	pas
le	D.def.m.s	le
type	N.C.m.s	type
des	P+D.def.f.p	du
variables	N.C.f.p	variable
concernées	VK.f.p	concerner
(	PONCT.W	(
le	D.def.m.s	le
type	N.C.m.s	type
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
défini	VK.m.s	définir
une	D.ind.f.s	un
fois	N.C.f.s	foi
pour	P	pour
toute	A.ind.f.s	tout
dès	P	dès
sa	D.poss.f.s	son
création	N.C.f.s	création
)	PONCT.W	)
:	PONCT.W	:
l'	D.def.f.s	le
opération	N.C.f.s	opération
de	P	de
transtypage	N.C.m.s	transtypage
est	V.P.3.s	être
simplement	ADV.-	simplement
un	D.ind.m.s	un
changement	N.C.m.s	changement
de	P	de
point	N.C.m.s	point
de	P	de
vue	N.C.f.s	vue
qu'	PRO.rel.m.s	que
on	CL.suj.3.m.s	on
demande	V.P.3.s	demander
au	P+D.def.m.s	au
compilateur	N.C.m.s	compilateur
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
(	PONCT.W	(
newType	N.C.m.s	newtype
)	PONCT.W	)
expression	N.C.f.s	expression
Exemple	N.C.m.s	exemple
:	PONCT.W	:
int	PRO.card.m.p	<unknown>
n	N.C.m.s	n
=	V.P.3.s	être
87	N.card.m.s	@card@
;	PONCT.W	;
char	N.C.m.s	char
c	PONCT.W	c
=	N.C.m.s	=
(	PONCT.W	(
char	N.C.m.s	char
)	PONCT.W	)
(	PONCT.W	(
n	N.C.m.s	n
/	PONCT.W	@card@
2	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
Mais	C.C	mais
certaines	D.ind.f.p	certain
classes	N.C.f.p	classe
offrent	V.P.3.p	offrir
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
spécifiques	A.qual.f.p	spécifique
plus	ADV.-	plus
adéquates	A.qual.f.p	adéquat
,	PONCT.W	,
notamment	ADV.-	notamment
:	PONCT.W	:
°	N.C.m.s	°
pour	P	pour
les	D.def.f.p	le
conversions	N.C.f.p	conversion
réel	A.qual.m.s	réel
->	A.ind.m.s	-
entier	A.qual.m.s	entier
:	PONCT.W	:
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
Math	N.P.m.s	Math
.	PONCT.S	.

round(realValue)	A.qual.m.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
convertir	VW	convertir
un	D.ind.m.s	un
réel	A.qual.m.s	réel
en	P	en
l'	D.def.m.s	le
entier	N.C.m.s	entier
le	D.def.m.s	le
plus	ADV.-	plus
proche	A.qual.m.s	proche
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
Math.floor(realValue)	N.P.m.s	<unknown>
associée	VK.f.s	associer
à	P	à
une	D.ind.f.s	un
conversion	N.C.f.s	conversion
en	P	en
entier	N.C.m.s	entier
fournit	V.P.3.s	fournir
le	D.def.m.s	le
plus	ADV.-	plus
grand	A.qual.m.s	grand
entier	N.C.m.s	entier
inférieur	A.qual.m.s	inférieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
l'	D.def.m.s	le
argument	N.C.m.s	argument
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
(int)Math.floor(15.7)	N.C.m.s	<unknown>
vaut	V.P.3.s	valoir
15	PRO.card.f.p	@card@
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
Math.ceil(realValue)	N.P.m.s	<unknown>
associée	VK.f.s	associer
à	P	à
une	D.ind.f.s	un
conversion	N.C.f.s	conversion
en	P	en
entier	N.C.m.s	entier
fournit	V.P.3.s	fournir
le	D.def.m.s	le
plus	ADV.-	plus
petit	A.qual.m.s	petit
entier	N.C.m.s	entier
supérieur	A.qual.m.s	supérieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
l'	D.def.m.s	le
argument	N.C.m.s	argument
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
(int)Math.cei1(15.7)	N.C.m.s	<unknown>
vaut	V.P.3.s	valoir
16	D.card.m.p	@card@
°	N.C.m.s	°
pour	P	pour
les	D.def.f.p	le
conversions	N.C.f.p	conversion
en	P	en
ou	C.C	ou
à	P	à
partir	VW	partir
de	P	de
String	N.P.m.s	String
:	PONCT.W	:
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
toString()	N.P.m.s	Tostringçë
,	PONCT.W	,
dont	PRO.rel.f.s	dont
hérite	V.P.3.s	hériter
tout	D.ind.m.s	tout
objet	N.C.m.s	objet
,	PONCT.W	,
permet	V.P.3.s	permettre
de	P	de
convertir	VW	convertir
un	D.ind.m.s	un
objet	N.C.m.s	objet
en	P	en
String	N.P.m.s	String
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
valueOf(primitiveTypeExpression)	V.P.3.s	<unknown>
,	PONCT.W	,
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
String	N.P.m.s	String
,	PONCT.W	,
renvoie	V.P.3.s	renvoyer
la	D.def.f.s	le
représentation	N.C.f.s	représentation
String	N.P.m.s	String
de	P	de
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
son	D.poss.m.s	son
argument	N.C.m.s	argument
-	PONCT.W	-
la	D.def.f.s	le
méthode	N.C.f.s	méthode
valueOf(string)	V.P.3.s	<unknown>
,	PONCT.W	,
dont	PRO.rel.f.s	dont
dispose	V.P.3.s	disposer
toute	D.ind.f.s	tout
classe	N.C.f.s	classe
enveloppe	V.P.3.s	envelopper
,	PONCT.W	,
renvoie	V.P.3.s	renvoyer
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
enveloppe	V.P.3.s	envelopper
contenant	VG	contenir
la	D.def.f.s	le
valeur	N.C.f.s	valeur
représentée	VK.f.s	représenter
par	P	par
l'	D.def.m.s	le
argument	N.C.m.s	argument
de	P	de
type	N.C.m.s	type
String	N.P.m.s	String
Exemples	N.C.m.p	exemple
:	PONCT.W	:
//	PONCT.W	@card@
Convert	N.P.m.s	Convert
String	N.P.m.s	String
type	N.C.m.s	type
->	ET	-
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
double	A.qual.m.s	double
x	N.card.m.s	x
=	PONCT.W	=
Double.parseDouble("3.14159")	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Convert	N.P.m.s	Convert
String	N.P.m.s	String
type	N.C.m.s	type
->	ET	-
wrapped	ET	wrapped
type	N.C.m.s	type
Double	N.P.m.s	Double
pi	N.C.m.s	pi
=	PONCT.W	=
Double.valueOf("3.14159")	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Convert	ET	convert
wrapped	ET	wrapped
type	N.C.m.s	type
->	ET	-
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
int	V.P.3.s	indre
k	N.P.x.s	K
=	PONCT.W	=
Integer.valueOf("1789").intValue()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Convert	N.P.m.s	Convert
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
->	ET	-
String	N.P.m.s	String
type	N.C.m.s	type
String	N.P.m.s	String
piStr	ET	<unknown>
=	PONCT.W	=
String.valueOf(3.14159)	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Convert	N.P.m.s	Convert
primitive	A.qual.m.s	primitif
type	N.C.m.s	type
->	ET	-
String	N.P.m.s	String
type	N.C.m.s	type
Double	N.P.m.s	Double
pi	N.C.m.s	pi
=	ET	=
new	ET	new
Double(3.14159)	N.P.f.s	<unknown>
;	PONCT.W	;
String	N.P.m.s	String
s	CL.refl.3.m.s	s
=	PONCT.W	=
pi.toString()	N.C.m.s	pirtostringçë
;	PONCT.W	;
Autoboxing	N.P.m.s	Autoboxing
/	PONCT.W	@card@
unboxing	N.C.m.s	unboxing
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
sont	V.P.3.p	être
,	PONCT.W	,
en	P	en
cas	N.C.m.s	cas
de	P	de
besoin	N.C.m.s	besoin
,	PONCT.W	,
implicitement	ADV.-	implicitement
converties	VK.f.p	convertir
en	P	en
l'	D.def.m.s	le
objet	N.C.m.s	objet
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
enveloppe	N.C.f.s	enveloppe
correspondante	A.qual.f.s	correspondant
(	PONCT.W	(
autoboxing	N.C.m.s	autoboxing
)	PONCT.W	)
,	PONCT.W	,
et	C.C	et
réciproquement	N.C.m.s	réciproquement
(	PONCT.W	(
unboxing	N.C.m.s	unboxing
)	PONCT.W	)
.	PONCT.S	.

Auparavant	ADV.-	auparavant
,	PONCT.W	,
la	D.def.f.s	le
conversion	N.C.f.s	conversion
devait	V.I.3.s	devoir
être	VW	être
explicite	VK.f.s	explicir
.	PONCT.S	.

6	D.card.m.p	@card@
OPERATEURS	N.C.m.p	operateur
ET	C.C	et
EXPRESSIONS	N.P.x.s	Expressions
Java	N.P.m.s	Java
possède	V.P.3.s	posséder
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
considérable	A.qual.m.s	considérable
d'	P	de
opérateurs	N.C.m.p	opérateur
arithmétiques	A.qual.m.p	arithmétique
et	C.C	et
logiques	A.qual.m.p	logique
.	PONCT.S	.

Les	D.def.f.p	le
expressions	N.C.f.p	expression
sont	V.P.3.p	être
constituées	VK.f.p	constituer
d'	P	de
opérandes	N.C.f.p	opérande
et	C.C	et
d'	P	de
opérateurs	N.C.m.p	opérateur
.	PONCT.S	.

Les	D.def.f.p	le
opérandes	N.C.f.p	opérande
peuvent	V.P.3.p	pouvoir
être	VW	être
de	P	de
différentes	A.qual.f.p	différent
natures	N.C.f.p	nature
:	PONCT.W	:
variable	N.C.f.s	variable
,	PONCT.W	,
constante	N.C.f.s	constante
,	PONCT.W	,
appel	N.C.m.s	appel
de	P	de
fonction	N.C.f.s	fonction
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
expression	N.C.f.s	expression
,	PONCT.W	,
tous	A.ind.m.p	tous
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
doivent	V.P.3.p	devoir
être	VW	être
explicites	A.qual.m.p	explicite
.	PONCT.S	.

Quand	C.S	quand
plus	ADV.-	plus
d'	P	de
un	D.ind.m.s	un
opérateur	N.C.m.s	opérateur
apparaît	V.P.3.s	apparaître
dans	P	dans
une	D.ind.f.s	un
seule	A.ind.f.s	seul
expression	N.C.f.s	expression
,	PONCT.W	,
alors	ADV.-	alors
des	D.ind.f.p	du
règles	N.C.f.p	règle
de	P	de
précédence	N.C.f.s	précédence
sont	V.P.3.p	être
utilisées	VK.f.p	utiliser
pour	P	pour
déterminer	VW	déterminer
l'	D.def.m.s	le
ordre	N.C.m.s	ordre
d'	P	de
application	N.C.f.s	application
.	PONCT.S	.

S'	C.S	si
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
d'	P	de
altérer	VW	altérer
l'	D.def.m.s	le
ordre	N.C.m.s	ordre
normal	A.qual.m.s	normal
d'	P	de
évaluation	N.C.f.s	évaluation
,	PONCT.W	,
des	D.ind.f.p	du
parenthèses	N.C.f.p	parenthèse
peuvent	V.P.3.p	pouvoir
être	VW	être
utilisées	VK.f.p	utiliser
.	PONCT.S	.

À	P	à
précédences	N.C.f.p	précédence
égales	A.qual.f.p	égal
,	PONCT.W	,
l'	D.def.f.s	le
expression	N.C.f.s	expression
est	V.P.3.s	être
évaluée	VK.f.s	évaluer
de	P	de
gauche	N.C.f.s	gauche
à	P	à
droite	N.C.f.s	droite
.	PONCT.S	.

Recommandations	N.C.f.p	recommandation
de	P	de
style	N.C.m.s	style
:	PONCT.W	:
+	P	p
Utiliser	VW	utiliser
les	D.def.f.p	le
parenthèses	N.C.f.p	parenthèse
pour	P	pour
isoler	VW	isoler
les	D.def.f.p	le
sous-expressions	N.C.f.p	sous-expression
afin	ADV.-	afin
d'	P	de
éviter	VW	éviter
les	D.def.m.p	le
problèmes	N.C.m.p	problème
de	P	de
précédence	N.C.f.s	précédence
d'	P	de
opérateur	N.C.m.s	opérateur
et	C.C	et
rendre	VW	rendre
le	D.def.m.s	le
code	N.C.m.s	code
plus	ADV.-	plus
lisible	A.qual.m.s	lisible
pour	P	pour
tout	D.ind.m.s	tout
programmeur	N.C.m.s	programmeur
.	PONCT.S	.

+	P	p
Insérer	VW	insérer
un	D.ind.m.s	un
espace	N.C.m.s	espace
avant	ADV.-	avant
et	C.C	et
après	P	après
chaque	D.ind.m.s	chaque
opérateur	N.C.m.s	opérateur
autre	A.qual.m.s	autre
que	C.S	que
le	D.def.m.s	le
point	N.C.m.s	point
6.1	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
et	C.C	et
expressions	N.C.f.p	expression
arithmétiques	A.qual.f.p	arithmétique
Quelques	D.ind.m.p	quelque
opérateurs	N.C.m.p	opérateur
arithmétiques	A.qual.m.p	arithmétique
binaires	A.qual.m.p	binaire
Opérateur	N.P.m.s	Opérateur
Fonction	N.C.f.s	fonction
Champ	N.P.m.s	Champ
d'	P	de
application	N.C.f.s	application
/	PONCT.W	@card@
division	N.C.f.s	division
réelle	A.qual.f.s	réel
Réels	N.C.m.p	réel
/	PONCT.W	@card@
division	N.C.f.s	division
entière	A.qual.f.s	entier
Entiers	N.C.m.p	entier
#	P	à
modulo	N.C.m.s	modulo
(	PONCT.W	(
reste	N.C.m.s	reste
de	P	de
la	D.def.f.s	le
division	N.C.f.s	division
entière)*	A.qual.m.p	<unknown>
Entiers	N.C.m.p	entier
*	N.C.m.s	*
Nota	N.P.m.s	Nota
1	N.card.m.s	@card@
.	PONCT.S	.

En	P	en
Java	N.P.m.s	Java
comme	P	comme
dans	P	dans
la	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.m.p	du
langages	N.C.m.p	langage
de	P	de
programmation	N.C.f.s	programmation
,	PONCT.W	,
A	P	à
%	N.C.m.s	%
B	N.C.m.s	b
est	V.P.3.s	être
toujours	ADV.-	toujours
du	P+D.def.m.s	du
signe	N.C.m.s	signe
de	P	de
A	N.C.m.s	a
(	PONCT.W	(
alors	ADV.-	alors
qu'	C.S	que
en	P	en
mathématiques	N.C.f.p	mathématique
le	D.def.m.s	le
reste	N.C.m.s	reste
de	P	de
la	D.def.f.s	le
division	N.C.f.s	division
euclidienne	A.qual.f.s	euclidien
est	V.P.3.s	être
toujours	ADV.-	toujours
positif	A.qual.m.s	positif
,	PONCT.W	,
le	D.def.m.s	le
quotient	N.C.m.s	quotient
se	CL.refl.3.m.s	se
calculant	VG	calculer
en	P	en
conséquence	N.C.f.s	conséquence
)	PONCT.W	)
.	PONCT.S	.

Pour	P	pour
Java	N.P.m.s	Java
:	PONCT.W	:
A/B	N.P.x.s	Adb
=	PONCT.W	=
sgn(A)*sgn(B)*|A|/|B|	N.P.x.s	<unknown>
;	PONCT.W	;
A%B	N.P.x.s	Aëb
=	V.P.3.s	être
A-(A/B)*B	N.P.x.s	A-çambëëb
-7	D.card.m.p	@card@
%	N.C.m.p	%
5	A.card.m.s	@card@
-7	A.card.m.s	@card@
/	PONCT.W	@card@
5	PRO.card.m.p	@card@
En	P	en
java	N.C.m.s	java
-2	CL.suj.3.m.s	@card@
-1	CL.suj.3.m.s	@card@
En	P	en
math	N.C.m.s	math
3	A.card.m.s	@card@
-2	A.card.m.s	@card@
*	N.C.m.s	*
Nota	N.P.m.s	Nota
2	A.card.m.s	@card@
.	PONCT.S	.

En	P	en
Java	N.P.m.s	Java
,	PONCT.W	,
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
modulo	ET	modulo
%	N.C.m.s	%
peut	V.P.3.s	pouvoir
aussi	ADV.-	aussi
être	VW	être
appliqué	VK.m.s	appliquer
sur	P	sur
des	D.ind.m.p	du
réels	N.C.m.p	réel
.	PONCT.S	.

Le	D.def.m.s	le
résultat	N.C.m.s	résultat
est	V.P.3.s	être
alors	ADV.-	alors
le	D.def.m.s	le
reste	N.C.m.s	reste
obtenu	VK.m.s	obtenir
après	P	après
soustraction	N.C.f.s	soustraction
de	P	de
l'	D.def.f.s	le
opérande	N.C.f.s	opérande
droit	N.C.m.s	droit
à	P	à
l'	D.def.f.s	le
opérande	N.C.f.s	opérande
gauche	V.P.3.s	gaucher
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
entier	A.qual.m.s	entier
de	P	de
fois	N.C.f.p	foi
.	PONCT.S	.

Toutefois	ADV.-	toutefois
,	PONCT.W	,
à	P	à
cause	N.C.f.s	cause
des	P+D.def.m.p	du
arrondis	N.C.m.p	arrondi
de	P	de
calculs	N.C.m.p	calcul
,	PONCT.W	,
le	D.def.m.s	le
résultat	N.C.m.s	résultat
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
toujours	ADV.-	toujours
celui	PRO.dem.m.s	celui
qu'	PRO.rel.m.s	que
on	CL.suj.3.m.s	on
attendrait	V.C.3.s	attendre
(	PONCT.W	(
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
64.5	D.card.m.p	@card@
%	N.C.m.p	%
6.45	D.card.m.p	@card@
donne	V.P.3.s	donner
6.449999999999998	N.P.f.s	@card@
et	C.C	et
non	ADV.neg	non
0.0	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Grande	A.qual.f.s	grand
prudence	N.C.f.s	prudence
,	PONCT.W	,
donc	ADV.-	donc
,	PONCT.W	,
avec	P	avec
cet	D.dem.m.s	ce
opérateur	N.C.m.s	opérateur
appliqué	VK.m.s	appliquer
sur	P	sur
des	D.ind.m.p	du
réels	N.C.m.p	réel
.	PONCT.S	.

Quelques	D.ind.m.p	quelque
opérateurs	N.C.m.p	opérateur
arithmétiques	A.qual.m.p	arithmétique
unaires	A.qual.m.p	unaire
Opérateur	ET	opérateur
Fonction	N.C.f.s	fonction
Champ	N.P.m.s	Champ
d'	P	de
application	N.C.f.s	application
++	P	uu
Incrémentation	N.C.f.s	incrémentation
Entiers	A.qual.m.p	entier
ou	C.C	ou
réels	A.qual.m.p	réel
--	PONCT.W	--
décrémentation	N.C.f.s	décrémentation
Entiers	A.qual.m.p	entier
ou	C.C	ou
réels	A.qual.m.p	réel
6.2	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
et	C.C	et
expressions	N.C.f.p	expression
booléennes	A.qual.f.p	booléen
Quelques	D.ind.m.p	quelque
opérateurs	N.C.m.p	opérateur
booléens	A.qual.m.p	booléen
binaires	A.qual.m.p	binaire
Opérateur	N.P.m.s	Opérateur
Fonction	N.C.f.s	fonction
&&	PONCT.W	<unknown>
ET	C.C	et
logique	N.C.f.s	logique
conditionnel	A.qual.m.s	conditionnel
*	N.C.m.s	*
||	N.C.m.s	<unknown>
OU	D.ind.f.s	ou
logique	N.C.f.s	logique
conditionnel	A.qual.m.s	conditionnel
*	N.C.m.s	*
^	P	à
OU	PRO.rel.m.s	ou
logique	N.C.f.s	logique
exclusif	A.qual.m.s	exclusif
*	N.C.m.s	*
Avec	P	avec
ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
,	PONCT.W	,
l'	D.def.f.s	le
évaluation	N.C.f.s	évaluation
de	P	de
l'	D.def.f.s	le
expression	N.C.f.s	expression
logique	A.qual.f.s	logique
s'	CL.refl.3.f.s	se
arrête	V.P.3.s	arrêter
dès	P	dès
qu'	C.S	que
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
d'	P	de
inférer	VW	inférer
la	D.def.f.s	le
valeur	N.C.f.s	valeur
finale	A.qual.f.s	final
de	P	de
l'	D.def.f.s	le
expression	N.C.f.s	expression
;	PONCT.W	;
tous	A.ind.f.p	tous
les	D.def.f.p	le
opérandes	N.C.f.p	opérande
ne	ADV.neg	ne
sont	V.P.3.p	être
donc	ADV.-	donc
pas	ADV.neg	pas
nécessairement	ADV.-	nécessairement
évalués	VK.m.p	évaluer
.	PONCT.S	.

Opérateur	N.C.m.s	opérateur
booléen	A.qual.m.s	booléen
unaire	A.qual.m.s	unaire
Opérateur	N.P.m.s	Opérateur
Fonction	N.C.f.s	fonction
!	PONCT.S	!

Négation	N.C.f.s	négation
logique	A.qual.f.s	logique
6.3	D.card.m.p	@card@
Opérateurs	N.C.m.p	opérateur
relationnels	A.qual.m.p	relationnel
Quelques	D.ind.m.p	quelque
opérateurs	N.C.m.p	opérateur
relationnels	A.qual.m.p	relationnel
(	PONCT.W	(
ou	C.C	ou
de	P	de
comparaison	N.C.f.s	comparaison
)	PONCT.W	)
Opérateur	N.P.m.s	Opérateur
Fonction	N.C.f.s	fonction
==	V.P.3.s	cevoir
égal	A.qual.m.s	égal
à	P	à
!	PONCT.S	!

=	PONCT.W	=
non	ADV.neg	non
égal	A.qual.m.s	égal
à	P	à
<	N.C.m.s	<
inférieur	A.qual.m.s	inférieur
à	P	à
<=	N.C.m.s	<unknown>
inférieur	A.qual.m.s	inférieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
>	N.C.m.s	>
supérieur	A.qual.m.s	supérieur
à	P	à
>=	N.C.m.s	<unknown>
supérieur	A.qual.m.s	supérieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
7	D.card.m.p	@card@
METHODES	N.C.m.p	methode
7.1	A.card.f.s	@card@
Définition	N.C.f.s	définition
et	C.C	et
appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
ordinaire	A.qual.f.s	ordinaire
Définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
Définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
public	A.qual.f.s	public
void	ET	void
procName(formalParams)	N.C.m.s	<unknown>
public	A.qual.m.s	public
fctlype	N.C.m.s	<unknown>
fctName(formalParams)	N.P.m.s	<unknown>
{	P	à
{	D.card.f.p	{
declarations	N.C.f.p	declaration
declarations	N.C.f.p	declaration
statements	N.C.m.p	statement
statements	N.C.m.p	statement
}	P	à
return	N.C.m.s	return
expression	N.C.f.s	expression
;	PONCT.W	;
}	P+D.def.m.s	c
Appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
Appel	N.P.m.s	Appel
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
Appel	N.P.m.s	Appel
interne	A.qual.m.s	interne
à	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
définition	N.C.f.s	définition
:	PONCT.W	:
Appel	N.P.m.s	Appel
interne	A.qual.m.s	interne
à	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
définition	N.C.f.s	définition
:	PONCT.W	:
procName(actualParams)	N.C.m.s	<unknown>
;	PONCT.W	;
variable	N.C.f.s	variable
=	PONCT.W	=
fctName(actualParams)	N.C.m.s	<unknown>
;	PONCT.W	;
Appel	N.P.m.s	Appel
externe	A.qual.m.s	externe
à	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
définition	N.C.f.s	définition
:	PONCT.W	:
Appel	N.P.m.s	Appel
externe	A.qual.m.s	externe
à	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
définition	N.C.f.s	définition
:	PONCT.W	:
-	PONCT.W	-
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
-	PONCT.W	-
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
objectName.procName(actualParams)	N.P.m.s	<unknown>
;	PONCT.W	;
variable	N.C.f.s	variable
=	PONCT.W	=
objectName.fctName(actualParams)	N.C.m.s	<unknown>
;	PONCT.W	;
-	PONCT.W	-
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
-	PONCT.W	-
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
ClassName.procName(actualParams)	N.P.m.s	<unknown>
;	PONCT.W	;
variable	N.C.f.s	variable
=	PONCT.W	=
ClassName	N.P.m.s	Classname
.	PONCT.S	.

fctName(actualParams)	N.C.m.s	<unknown>
;	PONCT.W	;
Déclaration	N.C.f.s	déclaration
d'	P	de
un	D.ind.m.s	un
paramètre	N.C.m.s	paramètre
formel	A.qual.m.s	formel
Spécification	N.C.f.s	spécification
d'	P	de
un	D.ind.m.s	un
paramètre	N.C.m.s	paramètre
effectif	A.qual.m.s	effectif
(	PONCT.W	(
formal	A.qual.m.s	formal
parameter	VW	parameter
)	PONCT.W	)
(	PONCT.W	(
actual	N.C.m.s	actual
parameter	N.C.m.s	parameter
)	PONCT.W	)
Paramètre	N.C.m.s	paramètre
d'	P	de
entrée	N.C.f.s	entrée
(	PONCT.W	(
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
ou	C.C	ou
objet	N.C.m.s	objet
)	PONCT.W	)
:	PONCT.W	:
Paramètre	N.C.m.s	paramètre
d'	P	de
entrée	N.C.f.s	entrée
(	PONCT.W	(
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
ou	C.C	ou
objet	N.C.m.s	objet
)	PONCT.W	)
:	PONCT.W	:
parameterType	N.C.m.s	parametertype
parameterName	A.qual.f.s	parametername
Expression	N.C.f.s	expression
Paramètre	N.C.m.s	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
:	PONCT.W	:
Paramètre	N.C.m.s	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
:	PONCT.W	:
Impossible	A.qual.m.s	impossible
(	PONCT.W	(
utiliser	VW	utiliser
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
ou	C.C	ou
passer	VW	passer
Impossible	A.qual.m.s	impossible
un	D.ind.m.s	un
paramètre	N.C.m.s	paramètre
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
)	PONCT.W	)
Paramètre	N.C.m.s	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
:	PONCT.W	:
Paramètre	N.C.m.s	paramètre
de	P	de
sortie	N.C.f.s	sortie
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
:	PONCT.W	:
parameterType	N.C.m.s	parametertype
parameterName	A.qual.m.s	parametername
objectName	N.C.m.s	<unknown>
+	P	p
Les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
spécifiés	A.qual.m.p	spécifié
dans	P	dans
la	D.def.f.s	le
définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
sont	V.P.3.p	être
appelés	VK.m.p	appeler
paramètres	N.C.m.p	paramètre
formels	A.qual.m.p	formel
;	PONCT.W	;
ils	CL.suj.3.m.p	il
doivent	V.P.3.p	devoir
être	VW	être
précédés	VK.m.p	précéder
de	P	de
leur	D.poss.m.s	leur
type	N.C.m.s	type
.	PONCT.S	.

Les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
apparaissant	VG	apparaître
dans	P	dans
la	D.def.f.s	le
forme	N.C.f.s	forme
d'	P	de
appel	N.C.m.s	appel
sont	V.P.3.p	être
appelés	VK.m.p	appeler
paramètres	N.C.m.p	paramètre
effectifs	A.qual.m.p	effectif
.	PONCT.S	.

S'	C.S	si
il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
plusieurs	D.ind.m.p	plusieurs
paramètres	N.C.m.p	paramètre
,	PONCT.W	,
ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
séparés	VK.m.p	séparer
par	P	par
des	D.ind.f.p	du
virgules	N.C.f.p	virgule
.	PONCT.S	.

+	P	p
Tous	A.ind.m.p	tous
les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
sont	V.P.3.p	être
passés	VK.m.p	passer
par	P	par
valeur	N.C.f.s	valeur
(	PONCT.W	(
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
une	D.ind.f.s	un
copie	N.C.f.s	copie
de	P	de
cet	D.dem.m.s	ce
argument	N.C.m.s	argument
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
transmise	VK.f.s	transmettre
à	P	à
la	D.def.f.s	le
méthode	N.C.f.s	méthode
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
ne	ADV.neg	ne
dispose	V.P.3.s	disposer
pas	ADV.neg	pas
de	P	de
l'	D.def.m.s	le
original	N.C.m.s	original
)	PONCT.W	)
.	PONCT.S	.

Tous	A.ind.m.p	tous
les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
sont	V.P.3.p	être
passés	VK.m.p	passer
par	P	par
référence	N.C.f.s	référence
(	PONCT.W	(
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
une	D.ind.f.s	un
référence	N.C.f.s	référence
,	PONCT.W	,
i.e.	P	<unknown>
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
,	PONCT.W	,
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
transmis	VK.m.s	transmettre
à	P	à
la	D.def.f.s	le
méthode	N.C.f.s	méthode
,	PONCT.W	,
et	C.C	et
pas	ADV.neg	pas
l'	D.def.m.s	le
objet	N.C.m.s	objet
lui-même	PPRO.3.m.s	lui-même
)	PONCT.W	)
.	PONCT.S	.

+	P	p
Par	P	par
défaut	N.C.m.s	défaut
,	PONCT.W	,
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
sont	V.P.3.p	être
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
d'	P	de
instance	N.C.f.s	instance
:	PONCT.W	:
elles	CL.suj.3.f.p	elle
sont	V.P.3.p	être
invoquées	VK.f.p	invoquer
sur	P	sur
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
classe	N.C.f.s	classe
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
aussi	ADV.-	aussi
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
de	P	de
classe	N.C.f.s	classe
qui	PRO.rel.f.p	qui
peuvent	V.P.3.p	pouvoir
être	VW	être
invoquées	VK.f.p	invoquer
sans	P	sans
instance	N.C.f.s	instance
.	PONCT.S	.

On	CL.suj.3.m.s	on
spécifie	V.P.3.s	spécifier
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
en	P	en
la	CL.obj.3.f.s	la
déclarant	VG	déclarer
static	N.C.m.s	static
+	P	p
La	D.def.f.s	le
signature	N.C.f.s	signature
[	PONCT.W	[
1	N.card.m.s	@card@
]	PONCT.W	]
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
est	V.P.3.s	être
constituée	VK.f.s	constituer
de	P	de
son	D.poss.m.s	son
nom	N.C.m.s	nom
et	C.C	et
de	P	de
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.m.p	du
types	N.C.m.p	type
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
même	A.qual.f.s	même
classe	N.C.f.s	classe
,	PONCT.W	,
deux	D.card.f.p	deux
méthodes	N.C.f.p	méthode
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
pas	ADV.neg	pas
avoir	VW	avoir
la	D.def.f.s	le
même	A.qual.f.s	même
signature	N.C.f.s	signature
;	PONCT.W	;
elles	CL.suj.3.f.p	elle
peuvent	V.P.3.p	pouvoir
toutefois	ADV.-	toutefois
porter	VW	porter
le	D.def.m.s	le
même	A.ind.m.s	même
nom	N.C.m.s	nom
(	PONCT.W	(
cela	PRO.dem.m.s	cela
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
la	D.def.f.s	le
surcharge	N.C.f.s	surcharge
)	PONCT.W	)
.	PONCT.S	.

+	ADV.-	al
Dans	P	dans
toute	D.ind.f.s	tout
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
ou	C.C	ou
constructeur	N.C.m.s	constructeur
,	PONCT.W	,
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
référer	VW	référer
à	P	à
l'	D.def.m.s	le
objet	N.C.m.s	objet
courant	A.qual.m.s	courant
(	PONCT.W	(
i.e.	VW	<unknown>
l'	D.def.m.s	le
objet	N.C.m.s	objet
dont	PRO.rel.m.s	dont
la	D.def.f.s	le
méthode	N.C.f.s	méthode
ou	C.C	ou
le	D.def.m.s	le
constructeur	N.C.m.s	constructeur
est	V.P.3.s	être
en	P	en
cours	N.C.m.s	cours
d'	P	de
appel	N.C.m.s	appel
)	PONCT.W	)
par	P	par
le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
this	VK.m.s	thir
.	PONCT.S	.

On	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
ainsi	ADV.-	ainsi
référer	VW	référer
à	P	à
tout	D.ind.m.s	tout
membre	N.C.m.s	membre
(	PONCT.W	(
champ	N.C.m.s	champ
ou	C.C	ou
méthode	N.C.f.s	méthode
)	PONCT.W	)
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
courant	A.qual.m.s	courant
par	P	par
un	D.ind.m.s	un
identifiant	N.C.m.s	identifiant
de	P	de
la	D.def.f.s	le
forme	N.C.f.s	forme
this.membre	N.C.m.s	thistmembre
7.2	A.card.m.s	@card@
Constructeur	N.C.m.s	constructeur
Un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
est	V.P.3.s	être
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
particulière	A.qual.f.s	particulier
dont	PRO.rel.f.s	dont
l'	D.def.f.s	le
invocation	N.C.f.s	invocation
est	V.P.3.s	être
explicitement	ADV.-	explicitement
associée	VK.f.s	associer
à	P	à
la	D.def.f.s	le
création	N.C.f.s	création
d'	P	de
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
classe	N.C.f.s	classe
et	C.C	et
dont	PRO.rel.f.s	dont
la	D.def.f.s	le
finalité	N.C.f.s	finalité
est	V.P.3.s	être
d'	P	de
initialiser	VW	initialiser
proprement	ADV.-	proprement
l'	D.def.m.s	le
état	N.C.m.s	état
de	P	de
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
lors	A.qual.m.s	lors
de	P	de
sa	D.poss.f.s	son
création	N.C.f.s	création
.	PONCT.S	.

La	D.def.f.s	le
définition	N.C.f.s	définition
d'	P	de
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
suit	V.P.3.s	suivre
des	D.ind.f.p	du
règles	N.C.f.p	règle
syntaxiques	A.qual.f.p	syntaxique
spécifiques	A.qual.f.p	spécifique
:	PONCT.W	:
le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
est	V.P.3.s	être
obligatoirement	ADV.-	obligatoirement
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
sa	D.poss.f.s	son
classe	N.C.f.s	classe
d'	P	de
appartenance	N.C.f.s	appartenance
;	PONCT.W	;
l'	D.def.f.s	le
en-tête	N.C.f.s	en-tête
de	P	de
sa	D.poss.f.s	son
définition	N.C.f.s	définition
ne	ADV.neg	ne
lui	CL.obj.3.f.s	lui
spécifie	V.P.3.s	spécifier
pas	ADV.neg	pas
de	P	de
type	N.C.m.s	type
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
de	P	de
définition	N.C.f.s	définition
d'	P	de
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
de	P	de
nom	N.C.m.s	nom
ClassName	N.P.m.s	Classname
:	PONCT.W	:
public	N.C.m.s	public
ClassName(formalParameters)	N.P.m.s	Classnameëfarsersersersersersersers
{	N.C.m.s	{
//	PONCT.W	@card@
...	PONCT.W	<unknown>
Fields	N.P.m.s	Fields
initializations	N.C.f.p	initialization
...	PONCT.W	<unknown>
}	N.C.m.s	}
Un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
est	V.P.3.s	être
typiquement	ADV.-	typiquement
utilisé	VK.m.s	utiliser
en	P	en
association	N.C.f.s	association
avec	P	avec
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
new	ET	new
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
syntaxe	N.C.m.s	syntaxe
d'	P	de
utilisation	N.C.f.s	utilisation
d'	P	de
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
de	P	de
nom	N.C.m.s	nom
ClassName	N.P.m.s	Classname
:	PONCT.W	:
ClassName	N.P.m.s	Classname
object	N.C.m.s	object
=	PONCT.W	=
new	ET	new
ClassName(actualParameters)	N.P.m.s	Classname-Actualparserserserser
;	PONCT.W	;
Une	D.ind.f.s	un
même	A.ind.f.s	même
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
comporter	VW	comporter
plusieurs	D.ind.m.p	plusieurs
constructeurs	N.C.m.p	constructeur
sous	P	sous
condition	N.C.f.s	condition
qu'	C.S	que
ils	CL.suj.3.m.p	il
n'	ADV.neg	ne
aient	V.S.3.p	avoir
pas	ADV.neg	pas
les	D.def.m.p	le
mêmes	A.ind.m.p	même
paramètres	N.C.m.p	paramètre
.	PONCT.S	.

Dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
,	PONCT.W	,
pour	P	pour
éviter	VW	éviter
de	P	de
la	D.def.f.s	le
duplication	N.C.f.s	duplication
de	P	de
code	N.C.m.s	code
,	PONCT.W	,
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
peut	V.P.3.s	pouvoir
en	CL.obj.3.m.s	en
appeler	VW	appeler
un	D.ind.m.s	un
autre	PRO.ind.m.s	autre
avec	P	avec
la	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
:	PONCT.W	:
this(actualParameters	N.C.m.p	this-actualparameter
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	ET	class
Point	N.P.m.s	Point
{	P	à
private	N.C.f.s	privat
int	V.J.3.s	enir
x	N.C.m.p	x
,	PONCT.W	,
y	CL.obj.3.m.s	y
;	PONCT.W	;
public	N.C.m.s	public
Pointe	N.P.f.s	Pointe
int	V.J.3.s	enir
x	N.C.m.p	x
,	PONCT.W	,
int	V.J.3.s	enir
y	CL.obj.3.m.s	y
)	PONCT.W	)
{	N.C.m.s	{
//	PONCT.W	@card@
A	P	à
first	A.qual.m.s	first
constructor	N.C.m.s	constructor
this.x	N.C.m.s	thistx
=	PONCT.W	=
X	N.card.m.s	X
;	PONCT.W	;
this.y	ET	thisyy
=	PONCT.W	=
y	CL.obj.3.m.s	y
;	PONCT.W	;
}	P	à
public	A.qual.m.s	public
Point()	N.P.m.s	Pointçë
{	N.C.m.s	{
//	PONCT.W	@card@
A	P	à
second	A.ord.m.s	second
constructor	N.C.m.s	constructor
this(	N.C.m.s	thisà
0	N.card.m.s	@card@
,	PONCT.W	,
0	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
}	N.card.m.s	}
//	PONCT.W	@card@
...	PONCT.W	<unknown>
}	N.C.m.s	}
[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
À	P	à
noter	VW	noter
que	C.S	que
cette	D.dem.f.s	ce
définition	N.C.f.s	définition
,	PONCT.W	,
adoptée	VK.f.s	adopter
par	P	par
Java	N.P.m.s	Java
,	PONCT.W	,
ne	ADV.neg	ne
prend	V.P.3.s	prendre
pas	ADV.neg	pas
en	P	en
considération	N.C.f.s	considération
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
.	PONCT.S	.

En	P	en
ce	D.dem.m.s	ce
sens	N.C.m.s	sens
,	PONCT.W	,
la	D.def.f.s	le
"	PONCT.W	"
signature	N.C.f.s	signature
"	PONCT.W	"
correspond	V.P.3.s	correspondre
à	P	à
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
parfois	ADV.-	parfois
appelé	VK.m.s	appeler
par	P	par
ailleurs	ADV.-	ailleurs
"	PONCT.W	"
profil	A.qual.m.s	profil
"	PONCT.W	"
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
.	PONCT.S	.

7.3	D.card.m.p	@card@
Méthode	N.P.f.s	Méthode
main	N.C.f.s	main
La	D.def.f.s	le
méthode	N.C.f.s	méthode
main	V.P.3.s	<unknown>
,	PONCT.W	,
comme	P	comme
en	P	en
C	PONCT.W	C
ou	C.C	ou
C++	N.P.x.s	Can
,	PONCT.W	,
est	V.P.3.s	être
le	D.def.m.s	le
point	N.C.m.s	point
d'	P	de
entrée	N.C.f.s	entrée
d'	P	de
une	D.ind.f.s	un
application	N.C.f.s	application
au	P+D.def.m.s	au
lancement	N.C.m.s	lancement
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
public	N.C.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	N.C.m.s	mainçstringë
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
L'	D.def.m.s	le
argument	N.C.m.s	argument
args	A.qual.m.s	arg
capte	V.P.3.s	capter
les	D.def.m.p	le
éventuels	A.qual.m.p	éventuel
arguments	N.C.m.p	argument
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
de	P	de
commande	N.C.f.s	commande
,	PONCT.W	,
le	D.def.m.s	le
premier	A.ord.m.s	premier
argument	N.C.m.s	argument
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
de	P	de
commande	N.C.f.s	commande
étant	VG	être
stocké	VK.m.s	stocker
dans	P	dans
args[0	N.C.m.s	<unknown>
]	PONCT.W	]
(	PONCT.W	(
et	C.C	et
non	ADV.neg	non
dans	P	dans
args[1	N.C.m.s	<unknown>
]	PONCT.W	]
comme	P	comme
en	P	en
C/C++	N.P.x.s	Cécu
)	PONCT.W	)
Exemple	N.C.m.s	exemple
:	PONCT.W	:
Considérons	V.Y.1.p	considérer
une	D.ind.f.s	un
application	N.C.f.s	application
dont	PRO.rel.f.s	dont
la	D.def.f.s	le
classe	N.C.f.s	classe
principale	A.qual.f.s	principal
-	PONCT.W	-
celle	PRO.dem.f.s	celui
contenant	VG	contenir
la	D.def.f.s	le
méthode	N.C.f.s	méthode
main	PRO.rel.f.s	main
-	PONCT.W	-
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
Game	N.P.f.s	Game
.	PONCT.S	.

Supposons	V.P.1.p	supposer
que	C.S	que
l'	D.def.f.s	le
application	N.C.f.s	application
dépende	V.S.3.s	dépendre
de	P	de
deux	D.card.m.p	deux
paramètres	N.C.m.p	paramètre
dont	PRO.rel.m.p	dont
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
doivent	V.P.3.p	devoir
être	VW	être
fournies	VK.f.p	fournir
au	P+D.def.m.s	au
lancement	N.C.m.s	lancement
.	PONCT.S	.

Supposons	V.P.1.p	supposer
également	ADV.-	également
que	C.S	que
le	D.def.m.s	le
fichier	N.C.m.s	fichier
source	V.P.3.s	sourcer
Game	N.P.m.s	Game
.	PONCT.S	.

java	N.C.m.s	java
ait	V.S.3.s	avoir
été	VK.m.s	être
compilé	VK.m.s	compiler
en	P	en
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
exécutable	A.qual.m.s	exécutable
Game.class	N.P.m.s	Gameclass
.	PONCT.S	.

Le	D.def.m.s	le
lancement	N.C.m.s	lancement
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
par	P	par
la	D.def.f.s	le
commande	N.C.f.s	commande
:	PONCT.W	:
java	N.C.m.s	java
Game	N.P.m.s	Game
Daniel	N.P.m.s	Daniel
20	N.card.m.s	@card@
attribuera	V.F.3.s	attribuer
à	P	à
args	N.C.m.p	arg
le	D.def.m.s	le
tableau	N.C.m.s	tableau
{	N.C.m.s	{
"	PONCT.W	"
Daniel	N.P.m.s	Daniel
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
20	N.card.m.s	@card@
"	PONCT.W	"
}	V.P.3.s	être
8	D.card.f.p	@card@
INSTRUCTIONS	N.C.f.p	instruction
Sur	P	sur
le	D.def.m.s	le
plan	N.C.m.s	plan
syntaxique	A.qual.m.s	syntaxique
,	PONCT.W	,
les	D.def.f.p	le
instructions	N.C.f.p	instruction
(	PONCT.W	(
statements	N.C.m.p	statement
)	PONCT.W	)
peuvent	V.P.3.p	pouvoir
être	VW	être
regroupées	VK.f.p	regrouper
en	P	en
3	D.card.f.p	@card@
grandes	A.qual.f.p	grand
catégories	N.C.f.p	catégorie
:	PONCT.W	:
-	PONCT.W	-
les	D.def.f.p	le
instructions	N.C.f.p	instruction
simples	A.qual.f.p	simple
:	PONCT.W	:
instructions	N.C.f.p	instruction
d'	P	de
affectation	N.C.f.s	affectation
,	PONCT.W	,
instructions	N.C.f.p	instruction
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
,	PONCT.W	,
instructions	N.C.f.p	instruction
d'	P	de
appel	N.C.m.s	appel
à	P	à
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
.	PONCT.S	.

Une	D.ind.f.s	un
instruction	N.C.f.s	instruction
simple	A.qual.f.s	simple
se	CL.refl.3.f.s	se
termine	V.P.3.s	terminer
toujours	ADV.-	toujours
par	P	par
un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
.	PONCT.S	.

Un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
seul	A.qual.m.s	seul
définit	V.P.3.s	définir
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
vide	A.qual.f.s	vide
.	PONCT.S	.

-	PONCT.W	-
les	D.def.f.p	le
instructions	N.C.f.p	instruction
de	P	de
contrôle	N.C.m.s	contrôle
:	PONCT.W	:
instructions	N.C.f.p	instruction
de	P	de
sélection	N.C.f.s	sélection
,	PONCT.W	,
instructions	N.C.f.p	instruction
de	P	de
boucle	N.C.f.s	boucle
,	PONCT.W	,
instructions	N.C.f.p	instruction
de	P	de
rupture	N.C.f.s	rupture
de	P	de
séquence	N.C.f.s	séquence
.	PONCT.S	.

-	PONCT.W	-
les	D.def.m.p	le
blocs	N.C.m.p	bloc
d'	P	de
instructions	N.C.f.p	instruction
.	PONCT.S	.

Un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
-	PONCT.W	-
aussi	ADV.-	aussi
appelé	VK.m.s	appeler
instruction	N.C.f.s	instruction
composée	VK.f.s	composer
-	PONCT.W	-
est	V.P.3.s	être
une	D.ind.f.s	un
séquence	N.C.f.s	séquence
d'	P	de
instructions	N.C.f.p	instruction
enserrée	VK.f.s	enserrer
entre	P	entre
accolades	N.C.f.p	accolade
.	PONCT.S	.

Le	D.def.m.s	le
bloc	N.C.m.s	bloc
{	A.qual.m.s	{
}	N.C.m.s	}
définit	V.P.3.s	définir
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
vide	A.qual.f.s	vide
.	PONCT.S	.

8.1	A.card.f.s	@card@
Instruction	N.C.f.s	instruction
d'	P	de
affectation	N.C.f.s	affectation
Syntaxe	N.P.f.s	Syntaxe
:	PONCT.W	:
variable	N.C.f.s	variable
=	PONCT.W	=
expression	N.C.f.s	expression
;	PONCT.W	;
Le	D.def.m.s	le
symbole	N.C.m.s	symbole
=	V.P.3.s	être
est	V.P.3.s	être
l'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
d'	P	de
affectation	N.C.f.s	affectation
.	PONCT.S	.

La	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
l'	D.def.f.s	le
expression	N.C.f.s	expression
située	VK.f.s	situer
en	P	en
partie	N.C.f.s	partie
droite	A.qual.f.s	droit
est	V.P.3.s	être
affectée	VK.f.s	affecter
à	P	à
la	D.def.f.s	le
variable	N.C.f.s	variable
spécifiée	VK.f.s	spécifier
en	P	en
partie	N.C.f.s	partie
gauche	A.qual.f.s	gauche
.	PONCT.S	.

Le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
l'	D.def.f.s	le
expression	N.C.f.s	expression
doit	V.P.3.s	devoir
s'	CL.refl.3.m.s	se
apparier	VW	apparier
au	P+D.def.m.s	au
type	N.C.m.s	type
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
.	PONCT.S	.

L'	D.def.m.s	le
impact	N.C.m.s	impact
physique	A.qual.m.s	physique
est	V.P.3.s	être
différent	A.qual.m.s	différent
selon	P	selon
que	C.S	que
l'	D.def.f.s	le
expression	N.C.f.s	expression
est	V.P.3.s	être
de	P	de
type	N.C.m.s	type
primitif	A.qual.m.s	primitif
ou	C.C	ou
objet	N.C.m.s	objet
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
5	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

8.2	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
contrôle	N.C.m.s	contrôle
8.2.1	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
sélection	N.C.f.s	sélection
8.2.1.1	D.card.m.p	@card@
if-else	V.P.3.s	if-elser
Première	A.ord.f.s	premier
forme	N.C.f.s	forme
:	PONCT.W	:
Deuxième	A.ord.f.s	deuxième
forme	N.C.f.s	forme
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	P	à
statements	N.C.m.p	statement
statements	N.C.m.p	statement
}	P	à
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
statements	N.C.m.p	statement
}	P+D.def.m.s	c
Exemple	N.C.m.s	exemple
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
field.size()	N.C.m.s	<unknown>
==	P+D.def.m.s	çù
0	A.card.m.s	@card@
)	PONCT.W	)
{	ET	{
System.out.println("The	N.P.m.s	<unknown>
field	ET	field
is	ET	is
empty	ET	empty
.	PONCT.W	.
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
number	N.C.m.s	number
<	N.C.m.s	<
0	A.card.m.s	@card@
)	PONCT.W	)
{	P+D.def.m.s	c
reportError()	N.C.m.s	reporterrorçë
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
{	P+D.def.m.s	c
processNumber(number)	N.C.m.s	processnumberänumberë
;	PONCT.W	;
}	P+D.def.m.s	c
Exemple	N.C.m.s	exemple
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
n	N.C.m.s	n
<	N.C.m.s	<
0	A.card.m.s	@card@
)	PONCT.W	)
{	P	à
handleNegative()	N.C.m.s	handlenegativeçç
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
if	ET	if
(	PONCT.W	(
n	N.C.m.s	n
==	V.P.3.s	cevoir
0	A.card.m.s	@card@
)	PONCT.W	)
{	P+D.def.m.s	c
handlezero()	N.C.m.s	handlezeroçà
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
{	P+D.def.m.s	c
handlePositive()	N.C.m.s	handlepositiveë-
;	PONCT.W	;
}	D.card.m.s	}
8.2.1.2	D.card.m.p	@card@
switch	N.C.m.p	switch
Première	A.ord.f.s	premier
forme	N.C.f.s	forme
:	PONCT.W	:
Deuxième	A.ord.f.s	deuxième
forme	N.C.f.s	forme
:	PONCT.W	:
switch	ET	switch
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	D.card.m.s	{
switch	N.C.m.s	switch
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
value1	N.C.f.s	<unknown>
:	PONCT.W	:
case	N.C.f.s	case
value1	N.C.f.s	<unknown>
:	PONCT.W	:
statements	N.C.m.p	statement
;	PONCT.W	;
/*	ET	<unknown>
falls	ET	fall
through	ET	through
*/	PONCT.W	<unknown>
break	N.C.m.s	break
;	PONCT.W	;
case	N.C.f.s	case
value2	N.C.f.s	<unknown>
:	PONCT.W	:
case	N.C.f.s	case
value2	N.C.f.s	<unknown>
:	PONCT.W	:
/*	D.card.m.p	<unknown>
falls	A.qual.m.p	fall
through	ET	through
*/	PONCT.W	<unknown>
statements	N.C.m.p	statement
;	PONCT.W	;
case	N.C.f.s	case
value3	N.C.f.s	<unknown>
:	PONCT.W	:
break	ET	break
;	PONCT.W	;
statements	N.C.m.p	statement
;	PONCT.W	;
default	ET	default
:	PONCT.W	:
break	ET	break
;	PONCT.W	;
statements	N.C.m.p	statement
;	PONCT.W	;
case	N.C.f.s	case
value4	N.C.f.p	<unknown>
:	PONCT.W	:
break	ET	break
;	PONCT.W	;
/*	ET	<unknown>
falls	A.qual.m.p	fall
through	ET	through
*/	PONCT.W	<unknown>
}	P	à
case	N.C.f.s	case
value5	N.C.f.s	<unknown>
:	PONCT.W	:
statements	N.C.m.p	statement
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
default	N.C.m.s	default
:	PONCT.W	:
statements	N.C.m.p	statement
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
}	N.C.m.s	}
+	P	p
Une	D.ind.f.s	un
instruction	N.C.f.s	instruction
switch	A.qual.f.s	switch
peut	V.P.3.s	pouvoir
avoir	VW	avoir
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
quelconque	A.qual.m.s	quelconque
de	P	de
labels	N.C.m.p	label
case	V.P.3.s	caser
+	P	p
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
break	ET	break
met	V.P.3.s	mettre
fin	N.C.f.s	fin
à	P	à
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
switch	A.qual.f.s	switch
.	PONCT.S	.

A	P	à
défaut	N.C.m.s	défaut
d'	P	de
instruction	N.C.f.s	instruction
break	ET	break
,	PONCT.W	,
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
se	CL.refl.3.f.s	se
poursuit	V.P.3.s	poursuivre
sur	P	sur
les	D.def.f.p	le
instructions	N.C.f.p	instruction
des	P+D.def.m.p	du
labels	N.C.m.p	label
suivants	A.qual.m.p	suivant
.	PONCT.S	.

La	D.def.f.s	le
deuxième	A.ord.f.s	deuxième
forme	N.C.f.s	forme
ci-	PRO.dem.m.s	<unknown>
dessus	ADV.-	dessus
exploite	V.P.3.s	exploiter
ce	D.dem.m.s	ce
comportement	N.C.m.s	comportement
:	PONCT.W	:
chacune	PRO.ind.f.s	chacun
des	P+D.def.f.p	du
trois	A.card.f.p	trois
premières	A.ord.f.p	premier
valeurs	N.C.f.p	valeur
conduira	V.F.3.s	conduire
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
la	D.def.f.s	le
partie	N.C.f.s	partie
statements	N.C.m.p	statement
associée	VK.f.s	associer
à	P	à
value3	N.C.f.s	<unknown>
;	PONCT.W	;
chacune	PRO.ind.f.s	chacun
des	P+D.def.f.p	du
deux	A.card.f.p	deux
valeurs	N.C.f.p	valeur
suivantes	A.qual.f.p	suivant
conduira	V.F.3.s	conduire
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
la	D.def.f.s	le
partie	N.C.f.s	partie
statements	N.C.m.p	statement
associée	VK.f.s	associer
à	P	à
value5	N.C.f.s	<unknown>
;	PONCT.W	;
+	P	p
La	D.def.f.s	le
clause	N.C.f.s	clause
default	A.qual.f.s	default
est	V.P.3.s	être
optionnelle	A.qual.f.s	optionnel
,	PONCT.W	,
mais	C.C	mais
recommandée	VK.f.s	recommander
.	PONCT.S	.

A	P	à
défaut	N.C.m.s	défaut
,	PONCT.W	,
il	CL.suj.3.m.s	il
se	CL.refl.3.m.s	se
peut	V.P.3.s	pouvoir
qu'	C.S	que
aucun	D.neg.m.s	aucun
cas	N.C.m.s	cas
ne	ADV.neg	ne
conduise	V.S.3.s	conduire
à	P	à
une	D.ind.f.s	un
exécution	N.C.f.s	exécution
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
switch	ET	switch
(	PONCT.W	(
day	ET	day
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
1	D.card.m.s	@card@
:	PONCT.W	:
dayString	N.C.m.s	daystring
=	PONCT.W	=
"	PONCT.W	"
Monday	N.P.m.s	Monday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
2	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Tuesday	ET	tuesday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
3	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Wednesday	ET	wednesday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
4	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Thursday	N.P.m.s	Thursday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
5	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Friday	N.P.m.s	Friday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
6	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Saturday	N.P.m.s	Saturday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
7	A.card.m.s	@card@
:	PONCT.W	:
dayString	ET	daystring
=	PONCT.W	=
"	PONCT.W	"
Sunday	N.P.m.s	Sunday
"	PONCT.W	"
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
default	ET	default
:	PONCT.W	:
error()	N.C.m.s	errorçë
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
}	ET	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
switch	ET	switch
(	PONCT.W	(
winterMonth	N.C.m.s	wintermonth
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
11	A.card.f.s	@card@
:	PONCT.W	:
numberOfDays	N.C.m.p	numberofday
=	PONCT.W	=
30	PRO.card.m.p	@card@
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
12	A.card.m.s	@card@
:	PONCT.W	:
/*	D.card.m.p	<unknown>
falls	A.qual.m.p	fall
through	ET	through
*/	PONCT.W	<unknown>
case	N.C.f.s	case
1	A.card.f.s	@card@
:	PONCT.W	:
numberOfDays	N.C.m.p	numberofday
=	PONCT.W	=
31	PRO.card.m.p	@card@
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
case	N.C.f.s	case
2	A.card.m.s	@card@
:	PONCT.W	:
if	ET	if
(isLeapYear())	N.C.m.s	<unknown>
{	D.card.m.p	{
numberOfDays	N.C.m.p	numberofday
=	P	à
29	N.card.m.s	@card@
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
{	D.card.m.p	{
numberOfDays	N.C.m.p	numberofday
=	PONCT.W	=
28	N.card.m.s	@card@
;	PONCT.W	;
}	D.card.m.s	}
break	N.C.m.s	break
;	PONCT.W	;
default	N.C.m.s	default
:	PONCT.W	:
error()	N.C.m.s	errorçë
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
}	D.card.f.p	}
8.2.2	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
de	P	de
boucle	N.C.f.s	boucle
8.2.2.1	N.card.f.s	@card@
while	N.C.m.s	while
La	D.def.f.s	le
boucle	A.qual.f.s	boucle
while	N.C.m.s	while
exécute	V.P.3.s	exécuter
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
aussi	ADV.-	aussi
longtemps	ADV.-	longtemps
que	C.S	que
la	D.def.f.s	le
valeur	N.C.f.s	valeur
d'	P	de
une	D.ind.f.s	un
expression	N.C.f.s	expression
donnée	VK.f.s	donner
est	V.P.3.s	être
true	A.qual.f.s	tru
.	PONCT.S	.

L'	D.def.f.s	le
expression	N.C.f.s	expression
est	V.P.3.s	être
testée	VK.f.s	tester
avant	P	avant
chaque	D.ind.f.s	chaque
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
,	PONCT.W	,
si	ADV.-	si
bien	ADV.-	bien
que	C.S	que
le	D.def.m.s	le
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
peut	V.P.3.s	pouvoir
être	VW	être
exécuté	VK.m.s	exécuter
0	D.card.f.p	@card@
fois	N.C.f.p	foi
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
while	N.C.m.s	while
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	P	à
statements	N.C.m.p	statement
}	P+D.def.m.s	c
Exemple	N.C.m.s	exemple
:	PONCT.W	:
int	PRO.card.m.p	<unknown>
i	PONCT.W	i
=	PONCT.W	=
0	A.card.m.s	@card@
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
1	A.card.m.s	@card@
<	N.C.m.s	<
text.size())	N.C.m.s	textizeë
{	N.C.m.s	{
System.out.printl(text.get())	N.P.m.s	<unknown>
;	PONCT.W	;
i++	N.C.m.s	iu
;	PONCT.W	;
}	ET	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
while	N.C.m.s	while
(iter.hasNext())	N.C.m.s	<unknown>
{	P+D.def.m.s	c
processObject(iter.next()	N.C.m.s	processobject-iterc
;	PONCT.W	;
}	D.card.m.s	}
8.2.2.2	D.card.m.s	@card@
do-while	N.C.m.s	do-while
La	D.def.f.s	le
boucle	V.P.3.s	boucler
do-while	N.C.m.s	do-while
le	CL.obj.3.m.s	le
exécute	V.P.3.s	exécuter
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
aussi	ADV.-	aussi
longtemps	ADV.-	longtemps
que	C.S	que
la	D.def.f.s	le
valeur	N.C.f.s	valeur
d'	P	de
une	D.ind.f.s	un
expression	N.C.f.s	expression
donnée	VK.f.s	donner
est	V.P.3.s	être
true	A.qual.f.s	tru
.	PONCT.S	.

L'	D.def.f.s	le
expression	N.C.f.s	expression
est	V.P.3.s	être
testée	VK.f.s	tester
après	P	après
chaque	D.ind.f.s	chaque
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
,	PONCT.W	,
si	ADV.-	si
bien	ADV.-	bien
que	C.S	que
le	D.def.m.s	le
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
est	V.P.3.s	être
toujours	ADV.-	toujours
exécuté	VK.m.s	exécuter
au	P	au
moins	ADV.-	moins
1	D.card.f.p	@card@
fois	N.C.f.p	foi
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
do	N.C.m.s	do
{	P	à
statements	N.C.m.p	statement
}	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
;	PONCT.W	;
Exemple	N.C.m.s	exemple
:	PONCT.W	:
do	N.C.m.s	do
{	N.C.m.s	{
input	N.C.m.s	input
=	PONCT.W	=
readInput()	N.C.m.s	<unknown>
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
input	N.C.m.s	input
==	P+D.def.m.s	çù
null	A.qual.m.s	nul
)	PONCT.W	)
{	ET	{
System.out.printl("Try	ET	systemoutry
again	A.qual.m.s	again
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	N.C.m.s	}
}	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
input	N.C.m.s	input
==	V.P.3.s	cevoir
null	A.qual.m.s	nul
)	PONCT.W	)
;	PONCT.W	;
8.2.2.3	D.card.f.p	@card@
for	N.C.m.s	for
La	D.def.f.s	le
boucle	A.qual.f.s	boucle
for	N.C.m.s	for
s'	CL.refl.3.f.s	se
exécute	V.P.3.s	exécuter
aussi	ADV.-	aussi
longtemps	ADV.-	longtemps
qu'	C.S	que
une	D.ind.f.s	un
condition	N.C.f.s	condition
s'	CL.refl.3.f.s	se
évalue	V.P.3.s	évaluer
à	P	à
true	N.C.f.s	true
.	PONCT.S	.

Avant	P	avant
que	C.S	que
la	D.def.f.s	le
boucle	N.C.f.s	boucle
ne	ADV.neg	ne
démarre	V.P.3.s	démarrer
,	PONCT.W	,
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
d'	P	de
initialisation	N.C.f.s	initialisation
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
exactement	ADV.-	exactement
1	D.card.f.p	@card@
fois	N.C.f.p	foi
.	PONCT.S	.

La	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
évaluée	VK.f.s	évaluer
avant	P	avant
chaque	D.ind.f.s	chaque
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
(	PONCT.W	(
comme	P	comme
pour	P	pour
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
while	N.C.m.s	while
)	PONCT.W	)
.	PONCT.S	.

Une	D.ind.f.s	un
instruction	N.C.f.s	instruction
de	P	de
mise	N.C.f.s	mise
à	P	à
jour	N.C.m.s	jour
des	D.ind.f.p	du
variables	N.C.f.p	variable
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
après	P	après
chaque	D.ind.f.s	chaque
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
corps	N.C.m.s	corps
de	P	de
boucle	N.C.f.s	boucle
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
initialization	N.C.f.s	initialization
;	PONCT.W	;
condition	N.C.f.s	condition
;	PONCT.W	;
update	N.C.m.s	update
)	PONCT.W	)
{	P	à
statements	N.C.m.p	statement
}	P+D.def.m.s	c
Exemple	N.C.m.s	exemple
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
1	A.card.m.s	@card@
=	PONCT.W	=
0	A.card.m.s	@card@
;	PONCT.W	;
1	A.card.m.s	@card@
<	N.C.m.s	<
text.size()	N.C.m.s	textizeë
;	PONCT.W	;
i++	ADV.-	iuu
)	PONCT.W	)
{	P	à
System.out.println(text.get())	N.P.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.s	}
8.2.2.4	D.card.m.p	@card@
foreach	N.C.m.s	foreach
Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
Java	N.P.m.s	Java
offre	V.P.3.s	offrir
une	D.ind.f.s	un
boucle	A.qual.f.s	boucle
for	N.C.f.s	for
améliorée	VK.f.s	améliorer
pour	P	pour
parcourir	VW	parcourir
les	D.def.m.p	le
éléments	N.C.m.p	élément
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
ou	C.C	ou
d'	P	de
une	D.ind.f.s	un
collection	N.C.f.s	collection
(	PONCT.W	(
se	CL.refl.3.f.s	se
reporter	VW	reporter
aux	P+D.def.f.p	au
sections	N.C.f.p	section
respectives	A.qual.f.p	respectif
)	PONCT.W	)
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
//	ET	@card@
for	ET	for
each	ET	each
element	ET	element
of	ET	of
the	ET	the
collection	N.C.f.s	collection
,	PONCT.W	,
process	N.C.m.p	process
element	ADV.-	element
for	A.qual.m.s	for
(	PONCT.W	(
TypeOfElements	N.C.m.p	typeofelement
element	ADV.-	element
:	PONCT.W	:
collectionOfElements	N.C.m.p	collectionofelement
)	PONCT.W	)
{	D.card.m.p	{
//	PONCT.W	@card@
...	PONCT.W	<unknown>
process	N.C.m.p	process
element	ADV.-	element
...	PONCT.S	<unknown>
}	N.C.m.s	}
8.3	D.card.f.p	@card@
Instructions	N.C.f.p	instruction
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
Java	N.P.m.s	Java
offre	V.P.3.s	offrir
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
considérable	A.qual.m.s	considérable
de	P	de
fonctions	N.C.f.p	fonction
et	C.C	et
procédures	N.C.f.p	procédure
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
,	PONCT.W	,
tant	ADV.-	tant
en	P	en
mode	N.C.f.s	mode
texte	N.C.m.s	texte
que	C.S	que
graphique	A.qual.m.s	graphique
.	PONCT.S	.

Nous	CL.suj.1.m.p	nous
nous	CL.refl.1.m.p	nous
limitons	V.P.1.p	limiter
dans	P	dans
cette	D.dem.f.s	ce
section	N.C.f.s	section
aux	P+D.def.f.p	au
principales	A.qual.f.p	principal
instructions	N.C.f.p	instruction
d'	P	de
entrées/sorties	N.C.f.p	<unknown>
en	P	en
mode	N.C.f.s	mode
texte	A.qual.f.s	texte
;	PONCT.W	;
pour	P	pour
des	D.ind.f.p	du
entrées/sorties	N.C.f.p	<unknown>
en	P	en
mode	N.C.f.s	mode
graphique	A.qual.f.s	graphique
,	PONCT.W	,
voir	VW	voir
chapitre	N.C.m.s	chapitre
11	A.card.m.s	@card@
.	PONCT.S	.

Les	D.def.f.p	le
méthodes	N.C.f.p	méthode
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
primaires	A.qual.f.p	primaire
appartiennent	V.P.3.p	appartenir
aux	P+D.def.f.p	au
classes	N.C.f.p	classe
du	P+D.def.m.s	du
paquetage	N.C.m.s	paquetage
java	A.qual.m.s	java
.	PONCT.S	.

io	I	io
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
la	D.def.f.s	le
classe	N.C.f.s	classe
Scanner	N.P.m.s	Scanner
du	P+D.def.m.s	du
paquetage	N.C.m.s	paquetage
java.uti1	A.qual.m.s	<unknown>
offre	V.P.3.s	offrir
:	PONCT.W	:
-	PONCT.W	-
des	D.ind.f.p	du
fonctionnalités	N.C.f.p	fonctionnalité
de	P	de
base	N.C.f.s	base
pour	P	pour
lire	VW	lire
facilement	ADV.-	facilement
des	D.ind.f.p	du
données	N.C.f.p	donnée
depuis	P	depuis
tout	D.ind.m.s	tout
flux	N.C.m.s	flux
d'	P	de
entrée	N.C.f.s	entrée
;	PONCT.W	;
-	PONCT.W	-
des	D.ind.f.p	du
sorties	N.C.f.p	sortie
formatées	VK.f.p	formater
comme	P	comme
en	P	en
C.	PONCT.S	Co
En	P	en
complément	N.C.m.s	complément
,	PONCT.W	,
la	D.def.f.s	le
classe	N.C.f.s	classe
java.util.Formatter	N.C.m.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
spécifier	VW	spécifier
des	D.ind.m.p	du
formats	N.C.m.p	format
d'	P	de
entrée	N.C.f.s	entrée
ou	C.C	ou
de	P	de
sortie	N.C.f.s	sortie
.	PONCT.S	.

8.3.1	A.card.f.s	@card@
Notion	N.C.f.s	notion
de	P	de
flux	N.C.m.p	flux
Les	D.def.m.p	le
flux	N.C.m.p	flux
ou	C.C	ou
flots	N.C.m.p	flot
(	PONCT.W	(
streams	N.C.m.p	stream
en	P	en
anglais	N.C.m.s	anglais
)	PONCT.W	)
généralisent	V.P.3.p	généraliser
la	D.def.f.s	le
notion	N.C.f.s	notion
de	P	de
périphérique	N.C.f.s	périphérique
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
.	PONCT.S	.

Un	D.ind.m.s	un
flux	N.C.m.s	flux
peut	V.P.3.s	pouvoir
être	VW	être
vu	VK.m.s	voir
comme	P	comme
une	D.ind.f.s	un
interface	N.C.f.s	interface
intelligente	A.qual.f.s	intelligent
unidirectionnelle	A.qual.f.s	unidirectionnel
reliant	VG	relier
la	D.def.f.s	le
machine	N.C.f.s	machine
Java	N.P.m.s	Java
et	C.C	et
le	D.def.m.s	le
périphérique	N.C.m.s	périphérique
,	PONCT.W	,
et	C.C	et
qui	PRO.rel.f.s	qui
permet	V.P.3.s	permettre
,	PONCT.W	,
en	P	en
lecture	N.C.f.s	lecture
aussi	ADV.-	aussi
bien	ADV.-	bien
qu'	C.S	que
en	P	en
écriture	N.C.f.s	écriture
,	PONCT.W	,
de	P	de
s'	CL.refl.3.f.s	se
affranchir	VW	affranchir
des	P+D.def.f.p	du
spécificités	N.C.f.p	spécificité
du	P+D.def.m.s	du
périphérique	N.C.m.s	périphérique
concerné	VK.m.s	concerner
.	PONCT.S	.

Réaliser	VW	réaliser
une	D.ind.f.s	un
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
consiste	V.P.3.s	consister
ainsi	ADV.-	ainsi
à	P	à
:	PONCT.W	:
1	N.card.m.s	@card@
)	PONCT.W	)
créer	VW	créer
un	D.ind.m.s	un
flux	N.C.m.s	flux
du	P+D.def.m.s	du
type	N.C.m.s	type
approprié	A.qual.m.s	approprié
(	PONCT.W	(
sauf	P	sauf
s'	C.S	si
il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
déjà	ADV.-	déjà
,	PONCT.W	,
ou	C.C	ou
est	V.P.3.s	être
prédéfini	VK.m.s	prédéfinir
(	PONCT.W	(
System.in	N.P.m.s	Systemin
,	PONCT.W	,
System.out	N.P.x.s	Systemout
ou	C.C	ou
System.err	N.P.x.s	<unknown>
)	PONCT.W	)
)	PONCT.W	)
2	A.card.m.s	@card@
)	PONCT.W	)
lire	VW	lire
ou	C.C	ou
écrire	VW	écrire
,	PONCT.W	,
selon	P	selon
le	D.def.m.s	le
cas	N.C.m.s	cas
,	PONCT.W	,
dans	P	dans
ce	D.dem.m.s	ce
flux	N.C.m.s	flux
3	A.card.m.s	@card@
)	PONCT.W	)
et	C.C	et
souvent	ADV.-	souvent
,	PONCT.W	,
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
d'	P	de
une	D.ind.f.s	un
lecture	N.C.f.s	lecture
,	PONCT.W	,
convertir	VW	convertir
la	D.def.f.s	le
donnée	N.C.f.s	donnée
lue	VK.f.s	lire
dans	P	dans
le	D.def.m.s	le
type	N.C.m.s	type
cible	A.qual.m.s	cible
souhaité	VK.m.s	souhaiter
Pour	P	pour
une	D.ind.f.s	un
première	A.ord.f.s	premier
approche	N.C.f.s	approche
,	PONCT.W	,
nous	CL.suj.1.m.p	nous
nous	CL.refl.1.m.p	nous
limiterons	V.F.1.p	limiter
à	P	à
des	D.ind.m.p	du
flux	N.C.m.p	flux
à	P	à
accès	N.C.m.s	accès
séquentiel	A.qual.m.s	séquentiel
.	PONCT.S	.

8.3.2	A.card.f.s	@card@
Entrée	VK.f.s	entrer
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
terminal	A.qual.m.s	terminal
Les	D.def.f.p	le
solutions	N.C.f.p	solution
suivantes	A.qual.f.p	suivant
ne	ADV.neg	ne
s'	CL.refl.3.f.p	se
affranchissent	V.P.3.p	affranchir
pas	ADV.neg	pas
des	D.ind.f.p	du
erreurs	N.C.f.p	erreur
de	P	de
saisie	N.C.f.s	saisie
.	PONCT.S	.

Pour	P	pour
gérer	VW	gérer
ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
erreur	N.C.f.s	erreur
,	PONCT.W	,
se	CL.refl.3.m.s	se
reporter	VW	reporter
au	P+D.def.m.s	au
chapitre	N.C.m.s	chapitre
Exceptions	N.P.m.s	Exceptions
(	PONCT.W	(
chapitre	N.C.m.s	chapitre
10	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

8.3.2.1	D.card.m.p	@card@
Affichage	N.C.m.s	affichage
écran	A.qual.m.s	écran
Syntaxe	N.C.m.s	syntaxe
d'	P	de
un	D.ind.m.s	un
affichage	N.C.m.s	affichage
écran	A.qual.m.s	écran
en	P	en
mode	N.C.f.s	mode
texte	N.C.m.s	texte
:	PONCT.W	:
System.out.print(string)	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.println(string)	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.print(primitiveTypeExpression)	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.println(primitiveTypeExpresstion)	N.P.m.s	<unknown>
;	PONCT.W	;
8.3.2.2	D.card.m.p	@card@
Affichage	N.C.m.s	affichage
formaté	VK.m.s	formater
Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
,	PONCT.W	,
Java	N.P.m.s	Java
offre	V.P.3.s	offrir
également	ADV.-	également
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
printf	A.qual.f.s	<unknown>
permettant	VG	permettre
des	D.ind.f.p	du
sorties	N.C.f.p	sortie
formatées	VK.f.p	formater
comme	P	comme
en	P	en
C	CL.obj.3.m.s	c
(	PONCT.W	(
voir	VW	voir
classe	N.C.f.s	classe
java.util.Formatter	VW	javalutilmatter
pour	P	pour
la	D.def.f.s	le
spécification	N.C.f.s	spécification
des	P+D.def.m.p	du
formats	N.C.m.p	format
)	PONCT.W	)
.	PONCT.S	.

Exemples	N.C.m.p	exemple
:	PONCT.W	:
System.out.println("count	N.C.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
+	P	p
count	N.C.m.s	count
)	PONCT.W	)
;	PONCT.W	;
System.out.printf("%s	N.C.m.p	systemout-
%5d	N.C.m.p	<unknown>
\n	N.C.m.s	<unknown>
"	PONCT.W	"
,	PONCT.W	,
user	VW	user
,	PONCT.W	,
total	N.C.m.s	total
)	PONCT.W	)
;	PONCT.W	;
Fonctionnement	N.C.m.s	fonctionnement
du	P+D.def.m.s	du
printf	N.C.m.s	<unknown>
et	C.C	et
codes	N.C.m.p	code
de	P	de
formatage	N.C.m.s	formatage
:	PONCT.W	:
Un	D.ind.m.s	un
printf	N.C.m.s	<unknown>
réclame	V.P.3.s	réclamer
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
en	P	en
premier	A.ord.m.s	premier
paramètre	N.C.m.s	paramètre
.	PONCT.S	.

Cette	D.dem.f.s	ce
chaîne	N.C.f.s	chaîne
peut	V.P.3.s	pouvoir
être	VW	être
suivie	VK.f.s	suivre
de	P	de
n	N.C.m.s	n
variables	N.C.f.p	variable
,	PONCT.W	,
n>0	N.C.m.s	<unknown>
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
cette	D.dem.f.s	ce
chaîne	N.C.f.s	chaîne
,	PONCT.W	,
qui	PRO.rel.f.s	qui
peut	V.P.3.s	pouvoir
contenir	VW	contenir
des	D.ind.m.p	du
codes	N.C.m.p	code
de	P	de
formatage	N.C.m.s	formatage
,	PONCT.W	,
qui	PRO.rel.f.s	qui
est	V.P.3.s	être
imprimée	VK.f.s	imprimer
.	PONCT.S	.

Un	D.ind.m.s	un
code	N.C.m.s	code
de	P	de
formatage	N.C.m.s	formatage
commence	V.P.3.s	commencer
par	P	par
le	D.def.m.s	le
caractère	N.C.m.s	caractère
%	N.C.m.s	%
.	PONCT.S	.

A	P	à
chaque	D.ind.f.s	chaque
fois	N.C.f.s	foi
qu'	C.S	que
un	D.ind.m.s	un
code	N.C.m.s	code
de	P	de
formatage	N.C.m.s	formatage
est	V.P.3.s	être
rencontré	VK.m.s	rencontrer
,	PONCT.W	,
printf	N.C.m.s	<unknown>
imprime	V.P.3.s	imprimer
la	D.def.f.s	le
variable	N.C.f.s	variable
suivante	A.qual.f.s	suivant
dans	P	dans
la	D.def.f.s	le
liste	N.C.f.s	liste
de	P	de
ses	D.poss.m.p	son
paramètres	N.C.m.p	paramètre
.	PONCT.S	.

Principaux	A.qual.m.p	principal
codes	N.C.m.p	code
de	P	de
formatage	N.C.m.s	formatage
Commande	N.P.x.s	Commande
l'	D.def.m.s	le
affichage	N.C.m.s	affichage
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
de	P	de
type	N.C.m.s	type
:	PONCT.W	:
%c	N.C.m.s	cc
Caractère	N.P.m.s	Caractère
%d	N.C.m.s	<unknown>
Entier	N.P.m.s	Entier
%e	N.C.m.s	<unknown>
Réel	N.P.m.s	Réel
(	PONCT.W	(
en	P	en
notation	N.C.f.s	notation
avec	P	avec
exposant	A.qual.m.s	exposant
)	PONCT.W	)
%f	N.C.m.s	ff
Réel	N.P.m.s	Réel
#s	N.P.m.s	<unknown>
Chaîne	N.P.f.s	Chaîne
de	P	de
caractères	N.C.m.p	caractère
Le	D.def.m.s	le
code	N.C.m.s	code
de	P	de
formatage	N.C.m.s	formatage
peut	V.P.3.s	pouvoir
inclure	VW	inclure
une	D.ind.f.s	un
spécification	N.C.f.s	spécification
de	P	de
format	N.C.m.s	format
du	P+D.def.m.s	du
champ	N.C.m.s	champ
d'	P	de
affichage	N.C.m.s	affichage
.	PONCT.S	.

Exemples	N.C.m.p	exemple
de	P	de
codes	N.C.m.p	code
de	P	de
formatage	N.C.m.s	formatage
Champ	N.P.m.s	Champ
d'	P	de
affichage	N.C.m.s	affichage
spécifié	A.qual.m.s	spécifié
pour	P	pour
le	D.def.m.s	le
paramètre	N.C.m.s	paramètre
du	P+D.def.m.s	du
type	N.C.m.s	type
considéré	VK.m.s	considérer
:	PONCT.W	:
%6d	N.C.m.s	<unknown>
Champ	N.P.m.s	Champ
de	P	de
6	D.card.m.p	@card@
caractères	N.C.m.p	caractère
%-6d	N.C.m.p	<unknown>
Champ	N.P.m.s	Champ
de	P	de
6	D.card.m.p	@card@
caractères	N.C.m.p	caractère
avec	P	avec
justification	N.C.f.s	justification
à	P	à
gauche	A.qual.m.s	gauche
%8.2f	N.C.m.s	<unknown>
Champ	N.P.m.s	Champ
de	P	de
8	D.card.m.p	@card@
caractères	N.C.m.p	caractère
dont	PRO.rel.m.p	dont
2	A.card.m.s	@card@
à	P	à
droite	N.C.f.s	droite
de	P	de
la	D.def.f.s	le
virgule	N.C.f.s	virgule
8.3.2.3	D.card.m.p	@card@
Lecture	ET	lecture
clavier	N.C.m.s	clavier
Exemple	N.P.m.s	Exemple
:	PONCT.W	:
Scanner	N.P.m.s	Scanner
input	N.C.m.s	input
=	P	à
new	ET	new
Scanner(System.in)	N.P.m.s	Scannerästem
;	PONCT.W	;
String	N.P.m.s	String
s1	CL.refl.3.m.s	<unknown>
=	PONCT.W	=
input.next()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
read	N.C.m.s	read
a	V.P.3.s	avoir
string	N.C.f.s	string
(	PONCT.W	(
a	V.P.3.s	avoir
word	N.C.m.s	word
)	PONCT.W	)
String	N.P.m.s	String
s2	A.card.m.s	<unknown>
=	PONCT.W	=
input.nextLine()	N.C.m.s	<unknown>
;	PONCT.W	;
//	ET	@card@
read	ET	read
the	ET	the
rest	V.P.3.s	reseoir
of	ET	of
the	ET	the
line	N.C.f.s	line
int	V.J.3.s	enir
n	N.C.m.s	n
=	PONCT.W	=
input.nextInt()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
read	ET	read
an	ET	an
integer	ET	integer
double	A.qual.m.s	double
r	PONCT.W	r
=	PONCT.W	=
input.nextDouble()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
read	N.C.m.s	read
a	V.P.3.s	avoir
double	A.qual.m.s	double
input.close()	N.C.m.s	<unknown>
;	PONCT.W	;
8.3.3	D.card.m.p	@card@
Entrée	VK.f.s	entrer
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
fichier	VW	fichier
Opérer	VW	opérer
sur	P	sur
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
consiste	V.P.3.s	consister
à	P	à
:	PONCT.W	:
1	N.card.m.s	@card@
)	PONCT.W	)
créer	VW	créer
un	D.ind.m.s	un
flux	N.C.m.s	flux
approprié	A.qual.m.s	approprié
aux	P+D.def.f.p	au
opérations	N.C.f.p	opération
souhaitées	VK.f.p	souhaiter
2	A.card.m.s	@card@
)	PONCT.W	)
lire	VW	lire
ou	C.C	ou
écrire	VW	écrire
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
3	A.card.m.s	@card@
)	PONCT.W	)
fermer	VW	fermer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
Les	D.def.f.p	le
solutions	N.C.f.p	solution
suivantes	A.qual.f.p	suivant
ne	ADV.neg	ne
s'	CL.refl.3.f.p	se
affranchissent	V.P.3.p	affranchir
pas	ADV.neg	pas
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
d'	P	de
entrée	N.C.f.s	entrée
/	PONCT.W	@card@
sortie	N.C.f.s	sortie
.	PONCT.S	.

Pour	P	pour
gérer	VW	gérer
ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
erreur	N.C.f.s	erreur
,	PONCT.W	,
se	CL.refl.3.m.s	se
reporter	VW	reporter
au	P+D.def.m.s	au
chapitre	N.C.m.s	chapitre
Exceptions	N.P.m.s	Exceptions
(	PONCT.W	(
chapitre	N.C.m.s	chapitre
10	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

8.3.3.1	D.card.m.p	@card@
Ecriture	N.C.f.s	ecriture
fichier	VW	fichier
Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
,	PONCT.W	,
Java	N.P.m.s	Java
offre	V.P.3.s	offrir
également	ADV.-	également
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
printf	A.qual.f.s	<unknown>
permettant	VG	permettre
des	D.ind.f.p	du
sorties	N.C.f.p	sortie
formatées	VK.f.p	formater
comme	P	comme
en	P	en
C	CL.obj.3.m.s	c
(	PONCT.W	(
voir	VW	voir
classe	N.C.f.s	classe
java.util.Formatter	VW	javalutilmatter
pour	P	pour
la	D.def.f.s	le
spécification	N.C.f.s	spécification
des	P+D.def.m.p	du
formats	N.C.m.p	format
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
écriture	N.C.f.s	écriture
dans	P	dans
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
texte	N.C.m.s	texte
:	PONCT.W	:
PrintWriter	N.P.m.s	Printwriter
out	ADV.-	out
=	P	à
new	ET	new
PrintWriter(outputFileName)	N.P.m.s	Printwriterçoutfumenamen
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
i=0	PRO.card.m.p	<unknown>
;	PONCT.W	;
i<10	N.C.m.p	<unknown>
;	PONCT.W	;
i++	ADV.-	iuu
)	PONCT.W	)
out.printf("%c%d",'\t',i)	N.C.m.s	<unknown>
;	PONCT.W	;
out.close()	N.C.m.s	outcoloceç
;	PONCT.W	;
8.3.3.2	D.card.m.p	@card@
Lecture	N.C.f.s	lecture
fichier	A.qual.m.s	fichier
Exemple	N.C.m.s	exemple
de	P	de
lecture	N.C.f.s	lecture
d'	P	de
un	D.ind.m.s	un
fichier	A.qual.m.s	fichier
texte	A.qual.m.s	texte
mot	N.C.m.s	mot
à	P	à
mot	N.C.m.s	mot
:	PONCT.W	:
Scanner	N.P.m.s	Scanner
in	ET	in
=	ET	=
new	ET	new
Scanner(new	N.P.m.s	Scanneränew
File(inputFileName))	N.P.m.s	Fileüinputenameë
;	PONCT.W	;
String	N.P.m.s	String
s	CL.refl.3.m.s	s
;	PONCT.W	;
while	N.C.m.s	while
(in.hasNext())	N.C.m.s	cin
{	N.C.m.s	{
s	A.card.m.s	s
=	PONCT.W	=
in.next()	N.C.m.s	intnextçë
;	PONCT.W	;
//	PONCT.W	@card@
read	N.C.m.s	read
a	V.P.3.s	avoir
string	N.C.f.s	string
(	PONCT.W	(
a	V.P.3.s	avoir
word	N.C.m.s	word
)	PONCT.W	)
System.out.println(s)	N.P.m.s	<unknown>
;	PONCT.W	;
}	P	à
in.close()	N.C.m.s	<unknown>
;	PONCT.W	;
8.3.3.3	D.card.m.p	@card@
Contextes	N.C.m.p	contexte
particuliers	A.qual.m.p	particulier
Cas1	N.P.f.s	Casc
.	PONCT.S	.

Ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
d'	P	de
un	D.ind.m.s	un
fichier	A.qual.m.s	fichier
texte	N.C.m.s	texte
stocké	VK.m.s	stocker
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
.jar	N.P.m.s	<unknown>
exécuté	VK.m.s	exécuter
import	ET	import
java.io.InputStream	ET	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.util.Scanner	N.C.m.s	<unknown>
;	PONCT.W	;
ClassLoader	N.P.x.s	Classloader
cl	ET	cl
=	PONCT.W	=
ClassLoader.getSystemClassLoader()	N.P.m.s	<unknown>
;	PONCT.W	;
InputStream	N.P.m.s	Inputstream
is	A.card.m.s	<unknown>
=	PONCT.W	=
cl.getResourceAsStream(inputFileName)	N.C.m.s	<unknown>
;	PONCT.W	;
Scanner	N.P.m.s	Scanner
in	CL.suj.3.m.s	in
=	V.P.3.s	être
new	ET	new
Scanner(is)	N.P.m.s	<unknown>
;	PONCT.W	;
Cas2	N.P.m.s	<unknown>
.	PONCT.S	.

Ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
d'	P	de
un	D.ind.m.s	un
fichier	A.qual.m.s	fichier
texte	N.C.m.s	texte
distant	A.qual.m.s	distant
identifié	VK.m.s	identifier
par	P	par
une	D.ind.f.s	un
URL	N.P.f.s	Url
import	N.C.m.s	import
java.net.URL	N.P.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.util.Scanner	N.C.m.s	<unknown>
;	PONCT.W	;
URL	N.P.f.s	Url
url	A.qual.m.s	url
=	ET	=
new	ET	new
URL("http://www.esiee.fr/	N.P.x.s	<unknown>
...	PONCT.W	<unknown>
/inputFileName	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
Scanner	N.P.m.s	Scanner
in	CL.suj.3.m.s	in
=	ET	=
new	ET	new
Scanner	N.P.m.s	Scanner
(url.openStream())	N.C.m.s	<unknown>
;	PONCT.W	;
Nota	N.P.m.s	Nota
.	PONCT.S	.

Solution	N.C.f.s	solution
non	ADV.neg	non
applicable	A.qual.f.s	applicable
depuis	P	depuis
une	D.ind.f.s	un
applet	N.C.f.s	applet
.	PONCT.S	.

En	P	en
outre	P	outre
,	PONCT.W	,
bien	ADV.-	bien
s'	CL.refl.3.m.s	se
assurer	VW	assurer
que	C.S	que
toutes	A.ind.f.p	tout
les	D.def.f.p	le
conditions	N.C.f.p	condition
d'	P	de
accessibilité	N.C.f.s	accessibilité
au	P+D.def.m.s	au
fichier	N.C.m.s	fichier
sont	V.P.3.p	être
levées	VK.f.p	lever
(	PONCT.W	(
pas	ADV.neg	pas
d'	P	de
interdiction	N.C.f.s	interdiction
par	P	par
le	D.def.m.s	le
pare-feu	N.C.m.s	pare-feu
local	A.qual.m.s	local
notamment	ADV.-	notamment
!	PONCT.S	!

)	PONCT.W	)
Cas3	N.P.m.s	<unknown>
.	PONCT.S	.

Ouverture	N.C.f.s	ouverture
d'	P	de
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
page	N.C.f.s	page
html	ADV.-	<unknown>
depuis	P	depuis
une	D.ind.f.s	un
applet	N.C.f.s	applet
(	PONCT.W	(
de	P	de
même	A.qual.m.s	même
répertoire	N.C.m.s	répertoire
)	PONCT.W	)
import	N.C.m.s	import
java.net.URL	N.P.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
javax.swing.JApplet	N.C.m.s	javax
;	PONCT.W	;
URL	N.P.f.s	Url
url	A.qual.m.s	url
=	ET	=
new	ET	new
URL(getDocumentBase()	N.P.m.s	Urlägetdocumentbaseë
,	PONCT.W	,
"	PONCT.W	"
myFile.html	N.P.x.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
getAppletContext().showDocument(url	N.C.m.s	<unknown>
,	PONCT.W	,
"	PONCT.W	"
_blank	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
repaint()	N.C.m.s	repaintçë
;	PONCT.W	;
8.3.4	D.card.m.s	@card@
Lecture	N.C.f.s	lecture
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
formatée	VK.f.s	formater
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
fréquent	A.qual.m.s	fréquent
d'	P	de
avoir	VW	avoir
à	P	à
lire	VW	lire
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
dont	PRO.rel.m.p	dont
on	CL.suj.3.m.s	on
connaît	V.P.3.s	connaître
le	D.def.m.s	le
format	N.C.m.s	format
,	PONCT.W	,
quel	A.int.m.s	quel
que	PRO.rel.m.s	que
soit	V.S.3.s	être
le	D.def.m.s	le
flux	N.C.m.s	flux
d'	P	de
entrée	N.C.f.s	entrée
(	PONCT.W	(
terminal	N.C.m.s	terminal
ou	C.C	ou
fichier	A.qual.m.s	fichier
)	PONCT.W	)
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
,	PONCT.W	,
la	D.def.f.s	le
classe	N.C.f.s	classe
Scanner	N.P.m.s	Scanner
du	P+D.def.m.s	du
paquetage	N.C.m.s	paquetage
java.util	A.qual.m.s	<unknown>
offre	V.P.3.s	offrir
des	D.ind.f.p	du
fonctionnalités	N.C.f.p	fonctionnalité
très	ADV.-	très
pratiques	A.qual.f.p	pratique
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
lecture	N.C.f.s	lecture
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
formatée	VK.f.s	formater
:	PONCT.W	:
String	N.P.m.s	String
str	N.C.m.s	<unknown>
=	N.C.m.s	=
"	PONCT.W	"
1	D.card.m.s	@card@
XXX	A.card.m.s	XXX
2	A.card.m.s	@card@
XXX	A.card.m.s	XXX
yellow	ET	yellow
XXX	A.card.m.s	XXX
blue	V.P.3.s	bluer
XXX	A.card.m.s	XXX
'	PONCT.W	'
"	PONCT.W	"
'	PONCT.W	'
;	PONCT.W	;
Scanner	N.P.m.s	Scanner
in	ET	in
=	ET	=
new	ET	new
Scanner(str).useDelimiter("\\s*XXX\\s*")	N.P.m.s	Scannerästräé
;	PONCT.W	;
System.out.println(in.nextInt())	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.println(in.nextInt())	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.println(in.next())	N.P.x.s	<unknown>
;	PONCT.W	;
System.out.println(in.next())	N.P.x.s	<unknown>
;	PONCT.W	;
in.close()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Will	N.P.x.s	Will
display	N.C.m.s	display
:	PONCT.W	:
//	PONCT.W	@card@
1	D.card.m.s	@card@
//	PONCT.W	@card@
2	A.card.m.s	@card@
//	PONCT.W	@card@
yellow	ET	yellow
//	PONCT.W	@card@
blue	V.P.3.s	bluer
9	A.card.m.s	@card@
HERITAGE	N.C.m.s	heritage
9.1	A.card.f.s	@card@
Notion	N.C.f.s	notion
d'	P	de
héritage	N.C.m.s	héritage
L'	D.def.m.s	le
héritage	N.C.m.s	héritage
est	V.P.3.s	être
une	D.ind.f.s	un
technique	N.C.f.s	technique
qui	PRO.rel.f.s	qui
offre	V.P.3.s	offrir
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
avantages	N.C.m.p	avantage
:	PONCT.W	:
-	PONCT.W	-
évite	V.P.3.s	éviter
la	D.def.f.s	le
duplication	N.C.f.s	duplication
de	P	de
code	N.C.m.s	code
-	PONCT.W	-
permet	V.P.3.s	permettre
la	D.def.f.s	le
réutilisation	N.C.f.s	réutilisation
de	P	de
code	N.C.m.s	code
dans	P	dans
un	D.ind.m.s	un
autre	A.ind.m.s	autre
contexte	N.C.m.s	contexte
-	PONCT.W	-
facilite	V.P.3.s	faciliter
la	D.def.f.s	le
maintenance	N.C.f.s	maintenance
des	P+D.def.m.p	du
programmes	N.C.m.p	programme
-	PONCT.W	-
facilite	V.P.3.s	faciliter
l'	D.def.f.s	le
extension	N.C.f.s	extension
d'	P	de
applications	N.C.f.p	application
existantes	A.qual.f.p	existant
.	PONCT.S	.

L'	D.def.m.s	le
héritage	N.C.m.s	héritage
(	PONCT.W	(
inheritance	N.C.f.s	inheritance
)	PONCT.W	)
est	V.P.3.s	être
une	D.ind.f.s	un
relation	N.C.f.s	relation
"	PONCT.W	"
est_un	N.C.m.s	estçun
"	PONCT.W	"
(	PONCT.W	(
non	ADV.neg	non
pas	ADV.neg	pas
"	PONCT.W	"
a_un	PRO.ind.m.s	açun
"	PONCT.W	"
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

)	PONCT.W	)
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
de	P	de
définir	VW	définir
une	D.ind.f.s	un
classe	N.C.f.s	classe
comme	P	comme
l'	D.def.f.s	le
extension	N.C.f.s	extension
d'	P	de
une	D.ind.f.s	un
autre	A.qual.f.s	autre
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Classe	N.P.m.s	Classe
Astre	A.ind.m.s	astre
est_un	N.C.m.s	estçun
est_un	A.qual.m.s	estçun
Classe	N.P.m.s	Classe
Etoile	N.P.m.s	Etoile
Classe	N.P.m.s	Classe
Planète	V.P.3.s	planeter
Une	D.ind.f.s	un
étoile	N.C.f.s	étoile
est	V.P.3.s	être
un	D.ind.m.s	un
astre	N.C.m.s	astre
;	PONCT.W	;
une	D.ind.f.s	un
planète	N.C.f.s	planète
est	V.P.3.s	être
un	D.ind.m.s	un
astre	N.C.m.s	astre
.	PONCT.S	.

La	D.def.f.s	le
classe	N.C.f.s	classe
Etoile	N.P.m.s	Etoile
étend	V.P.3.s	étendre
la	D.def.f.s	le
classe	N.C.f.s	classe
Astre	N.P.m.s	Astre
=	P	à
la	D.def.f.s	le
classe	N.C.f.s	classe
Etoile	N.P.m.s	Etoile
hérite	V.P.3.s	hériter
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Astre	N.P.m.s	Astre
.	PONCT.S	.

Une	D.ind.f.s	un
super-classe	N.C.f.s	super-classe
est	V.P.3.s	être
une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
est	V.P.3.s	être
étendue	VK.f.s	étendre
par	P	par
d'	D.ind.f.p	de
autres	A.ind.f.p	autre
classes	N.C.f.p	classe
.	PONCT.S	.

Une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
est	V.P.3.s	être
une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
étend	V.P.3.s	étendre
(	PONCT.W	(
hérite	A.qual.f.s	hérite
de	P	de
)	PONCT.W	)
une	D.ind.f.s	un
autre	A.ind.f.s	autre
classe	N.C.f.s	classe
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
hérite	V.P.3.s	hériter
l'	D.def.m.s	le
état	N.C.m.s	état
et	C.C	et
le	D.def.m.s	le
comportement	N.C.m.s	comportement
de	P	de
tous	A.ind.m.p	tous
ses	D.poss.f.p	son
ancêtres	N.C.f.p	ancêtre
,	PONCT.W	,
mais	C.C	mais
peut	V.P.3.s	pouvoir
aussi	ADV.-	aussi
les	CL.obj.3.m.p	le
redéfinir	VW	redéfinir
.	PONCT.S	.

Les	D.def.f.p	le
classes	N.C.f.p	classe
qui	PRO.rel.f.p	qui
sont	V.P.3.p	être
liées	VK.f.p	lier
par	P	par
des	D.ind.f.p	du
relations	N.C.f.p	relation
d'	P	de
héritage	N.C.m.s	héritage
forment	V.P.3.p	former
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
héritage	N.C.m.s	héritage
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
héritage	N.C.m.s	héritage
:	PONCT.W	:
Astre	N.P.m.s	Astre
Etoile	N.P.m.s	Etoile
Planète	N.C.f.s	planète
Exoplanète	A.qual.f.s	exoplanète
Planète	N.C.f.s	planète
Solaire	N.P.m.s	Solaire
Pégaside	N.P.m.s	Pégaside
Chtonienne	N.P.f.s	Chtonienne
Tellurique	A.qual.f.s	tellurique
Habitable	N.P.m.s	Habitable
Le	D.def.m.s	le
constructeur	N.C.m.s	constructeur
d'	P	de
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
doit	V.P.3.s	devoir
toujours	ADV.-	toujours
invoquer	VW	invoquer
le	D.def.m.s	le
constructeur	N.C.m.s	constructeur
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
en	P	en
première	A.ord.f.s	premier
instruction	N.C.f.s	instruction
(	PONCT.W	(
à	P	à
défaut	N.C.m.s	défaut
,	PONCT.W	,
Java	N.P.m.s	Java
essaiera	V.F.3.s	essayer
d'	P	de
insérer	VW	insérer
un	D.ind.m.s	un
appel	N.C.m.s	appel
automatique	A.qual.m.s	automatique
)	PONCT.W	)
.	PONCT.S	.

La	D.def.f.s	le
forme	N.C.f.s	forme
d'	P	de
appel	N.C.m.s	appel
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
super(actualParameters)	N.C.f.s	<unknown>
;	PONCT.W	;
Toute	D.ind.f.s	tout
classe	N.C.f.s	classe
sans	P	sans
super-classe	N.C.m.s	super-classe
explicite	A.qual.f.s	explicite
a	V.P.3.s	avoir
Object	N.C.m.s	object
comme	P	comme
super-classe	N.C.m.s	super-classe
.	PONCT.S	.

Comme	P	comme
pour	P	pour
la	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
de	P	de
classes	N.C.f.p	classe
,	PONCT.W	,
les	D.def.m.p	le
types	N.C.m.p	type
forment	V.P.3.p	former
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
de	P	de
types	N.C.m.p	type
.	PONCT.S	.

Le	D.def.m.s	le
type	N.C.m.s	type
défini	VK.m.s	définir
par	P	par
la	D.def.f.s	le
définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
est	V.P.3.s	être
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
du	P+D.def.m.s	du
type	N.C.m.s	type
défini	VK.m.s	définir
par	P	par
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Etoile	N.P.m.s	Etoile
est	V.P.3.s	être
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
du	P+D.def.m.s	du
type	N.C.m.s	type
Astre	P	astre
Une	D.ind.f.s	un
variable	N.C.f.s	variable
peut	V.P.3.s	pouvoir
contenir	VW	contenir
:	PONCT.W	:
-	PONCT.W	-
un	D.ind.m.s	un
objet	N.C.m.s	objet
du	P+D.def.m.s	du
type	N.C.m.s	type
déclaré	VK.m.s	déclarer
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
-	PONCT.W	-
ou	C.C	ou
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
tout	D.ind.m.s	tout
sous-type	N.C.m.s	sous-type
de	P	de
ce	D.dem.m.s	ce
type	N.C.m.s	type
déclaré	VK.m.s	déclarer
Exemple	N.C.m.s	exemple
:	PONCT.W	:
Astre	N.P.m.s	Astre
al	ET	al
=	ET	=
new	ET	new
Astre()	ET	astreçë
;	PONCT.W	;
//	PONCT.W	@card@
correct	A.qual.m.s	correct
Astre	N.C.m.s	astre
a2	N.C.m.s	<unknown>
=	PONCT.W	=
new	ET	new
Etoile	N.C.m.s	etoile
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
correct	A.qual.m.s	correct
(	PONCT.W	(
transtypage	N.C.m.s	transtypage
ascendant	A.qual.m.s	ascendant
)	PONCT.W	)
Astre	N.P.m.s	Astre
a3	N.card.f.s	<unknown>
=	PONCT.W	=
new	ET	new
Planete()	N.P.m.s	Planeteëë
;	PONCT.W	;
//	PONCT.W	@card@
correct	A.qual.m.s	correct
(	PONCT.W	(
transtypage	N.C.m.s	transtypage
ascendant	A.qual.m.s	ascendant
)	PONCT.W	)
Etoile	N.P.m.s	Etoile
el	CL.suj.3.f.s	el
=	V.P.3.s	être
new	ET	new
Astre()	N.C.m.s	astreçà
;	PONCT.W	;
//	PONCT.W	@card@
erreur	N.C.f.s	erreur
Etoile	N.P.m.s	Etoile
e3	A.card.m.s	<unknown>
=	PONCT.W	=
(Etoile)a2	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
correct	A.qual.m.s	correct
(	PONCT.W	(
un	D.ind.m.s	un
transtypage	N.C.m.s	transtypage
descendant	VG	descendre
//	PONCT.W	@card@
doit	V.P.3.s	devoir
être	VW	être
explicite	A.qual.m.s	explicite
)	PONCT.W	)
Un	D.ind.m.s	un
objet	N.C.m.s	objet
d'	P	de
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
peut-être	ADV.-	peut-être
utilisé	VK.m.s	utiliser
partout	ADV.-	partout
où	PRO.rel.m.s	où
un	D.ind.m.s	un
objet	N.C.m.s	objet
d'	P	de
un	D.ind.m.s	un
super-type	N.C.m.s	super-type
est	V.P.3.s	être
attendu	VK.m.s	attendre
.	PONCT.S	.

Ceci	PRO.dem.m.s	ceci
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
la	D.def.f.s	le
substitution	N.C.f.s	substitution
.	PONCT.S	.

Java	N.P.m.s	Java
ne	ADV.neg	ne
permet	V.P.3.s	permettre
pas	ADV.neg	pas
l'	D.def.m.s	le
héritage	N.C.m.s	héritage
multiple	A.qual.m.s	multiple
:	PONCT.W	:
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
hériter	VW	hériter
directement	ADV.-	directement
que	ADV.neg	que
d'	P	de
une	D.ind.f.s	un
seule	A.qual.f.s	seul
super-classe	N.C.f.s	super-classe
.	PONCT.S	.

9.2	N.card.f.s	@card@
Qu'	PRO.int.m.s	que
hérite	V.P.3.s	hériter
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
?	PONCT.S	?

Une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
hérite	V.P.3.s	hériter
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
membres	N.C.m.p	membre
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
accessibles	A.qual.m.p	accessible
,	PONCT.W	,
sauf	P	sauf
si	C.S	si
ce	D.dem.m.s	ce
membre	N.C.m.s	membre
(	PONCT.W	(
attribut	N.C.m.s	attribut
ou	C.C	ou
méthode	N.C.f.s	méthode
)	PONCT.W	)
est	V.P.3.s	être
redéfini	VK.m.s	redéfinir
dans	P	dans
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
.	PONCT.S	.

Une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
hérite	V.P.3.s	hériter
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
:	PONCT.W	:
-	PONCT.W	-
les	D.def.m.p	le
membres	N.C.m.p	membre
déclarés	VK.m.p	déclarer
public	A.qual.m.s	public
ou	C.C	ou
protected	V.P.3.s	protectedre
-	PONCT.W	-
les	D.def.m.p	le
membres	N.C.m.p	membre
déclarés	VK.m.p	déclarer
sans	P	sans
modificateur	N.C.m.s	modificateur
d'	P	de
accès	N.C.m.s	accès
,	PONCT.W	,
si	C.S	si
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
est	V.P.3.s	être
dans	P	dans
le	D.def.m.s	le
même	A.ind.m.s	même
paquetage	N.C.m.s	paquetage
que	C.S	que
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
.	PONCT.S	.

Une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
n'	ADV.neg	ne
hérite	V.P.3.s	hériter
pas	ADV.neg	pas
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
:	PONCT.W	:
-	PONCT.W	-
les	D.def.m.p	le
membres	N.C.m.p	membre
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
redéfinis	VK.m.p	redéfinir
dans	P	dans
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
-	PONCT.W	-
les	D.def.m.p	le
constructeurs	N.C.m.p	constructeur
.	PONCT.S	.

Attention	N.C.f.s	attention
au	P+D.def.m.s	au
choix	N.C.m.s	choix
des	P+D.def.m.p	du
identificateurs	N.C.m.p	identificateur
dans	P	dans
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
:	PONCT.W	:
ce	D.dem.m.s	ce
choix	N.C.m.s	choix
peut	V.P.3.s	pouvoir
involontairement	ADV.-	involontairement
masquer	VW	masquer
un	D.ind.m.s	un
membre	N.C.m.s	membre
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
!	PONCT.S	!

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
particulièrement	ADV.-	particulièrement
le	D.def.m.s	le
cas	N.C.m.s	cas
pour	P	pour
les	D.def.m.p	le
attributs	N.C.m.p	attribut
:	PONCT.W	:
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
ayant	VG	avoir
le	D.def.m.s	le
même	A.ind.m.s	même
nom	N.C.m.s	nom
qu'	C.S	que
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
masque	V.P.3.s	masquer
l'	D.def.m.s	le
attribut	N.C.m.s	attribut
de	P	de
la	D.def.f.s	le
super-	N.C.f.s	super-
classe	N.C.f.s	classe
,	PONCT.W	,
même	ADV.-	même
s'	C.S	si
ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
de	P	de
types	N.C.m.p	type
différents	A.qual.m.p	différent
.	PONCT.S	.

9.3	N.card.f.s	@card@
Redéfinir	VW	redéfinir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
Pour	P	pour
redéfinir	VW	redéfinir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
dans	P	dans
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
qu'	C.S	que
elle	CL.suj.3.f.s	elle
ait	V.S.3.s	avoir
la	D.def.f.s	le
même	A.ind.f.s	même
signature	N.C.f.s	signature
et	C.C	et
le	D.def.m.s	le
même	A.qual.m.s	même
type	N.C.m.s	type
de	P	de
retour	N.C.m.s	retour
que	PRO.rel.m.s	que
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
.	PONCT.S	.

La	D.def.f.s	le
méthode	N.C.f.s	méthode
redéfinie	VK.f.s	redéfinir
peut	V.P.3.s	pouvoir
autoriser	VW	autoriser
un	D.ind.m.s	un
accès	N.C.m.s	accès
plus	ADV.-	plus
large	A.qual.m.s	large
mais	C.C	mais
pas	ADV.neg	pas
moins	ADV.-	moins
(	PONCT.W	(
ex	N.C.m.s	ex
:	PONCT.W	:
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
déclarée	VK.f.s	déclarer
protected	V.P.3.s	protectedre
dans	P	dans
la	D.def.f.s	le
super-	N.C.f.s	super-
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
être	VW	être
redéfinie	VK.f.s	redéfinir
public	A.qual.m.s	public
dans	P	dans
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
,	PONCT.W	,
mais	C.C	mais
pas	ADV.neg	pas
private	A.qual.f.s	privat
)	PONCT.W	)
.	PONCT.S	.

L'	D.def.m.s	le
exemple	N.C.m.s	exemple
typique	A.qual.m.s	typique
est	V.P.3.s	être
la	D.def.f.s	le
méthode	N.C.f.s	méthode
toString	N.C.m.s	tostring
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Object	N.P.m.s	Object
:	PONCT.W	:
appliquée	VK.f.s	appliquer
à	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
produit	V.P.3.s	produire
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
formée	VK.f.s	former
du	P+D.def.m.s	du
nom	N.C.m.s	nom
de	P	de
sa	D.poss.f.s	son
classe	N.C.f.s	classe
et	C.C	et
de	P	de
son	D.poss.m.s	son
code	N.C.m.s	code
de	P	de
hachage	N.C.m.s	hachage
,	PONCT.W	,
mais	C.C	mais
cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
peut	V.P.3.s	pouvoir
être	VW	être
redéfinie	VK.f.s	redéfinir
dans	P	dans
toute	D.ind.f.s	tout
classe	N.C.f.s	classe
.	PONCT.S	.

Si	C.S	si
la	D.def.f.s	le
méthode	N.C.f.s	méthode
redéfinie	VK.f.s	redéfinir
dans	P	dans
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
a	V.P.3.s	avoir
simplement	ADV.-	simplement
besoin	N.C.m.s	besoin
d'	P	de
ajouter	VW	ajouter
quelques	D.ind.f.p	quelque
fonctionnalités	N.C.f.p	fonctionnalité
complémentaires	A.qual.f.p	complémentaire
à	P	à
celles	PRO.dem.f.p	celui
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
,	PONCT.W	,
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
besoin	N.C.m.s	besoin
de	P	de
la	CL.obj.3.f.s	la
réécrire	VW	réécrire
complètement	ADV.-	complètement
car	C.C	car
elle	CL.suj.3.f.s	elle
peut	V.P.3.s	pouvoir
appeler	VW	appeler
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
par	P	par
:	PONCT.W	:
super.superclassMethodName(actualParameters)	N.C.f.s	<unknown>
Quelques	D.ind.f.p	quelque
règles	N.C.f.p	règle
:	PONCT.W	:
-	PONCT.W	-
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
redéfinir	VW	redéfinir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
,	PONCT.W	,
et	C.C	et
réciproquement	N.C.m.s	réciproquement
-	PONCT.W	-
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
d'	P	de
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
ayant	VG	avoir
les	D.def.f.p	le
mêmes	A.qual.f.p	même
signature	N.C.f.s	signature
et	C.C	et
type	N.C.m.s	type
qu'	C.S	que
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
dans	P	dans
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
redéfinit	V.P.3.s	redéfinir
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
:	PONCT.W	:
la	D.def.f.s	le
version	N.C.f.s	version
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
invoquée	VK.f.s	invoquer
sur	P	sur
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
(	PONCT.W	(
type	N.C.m.s	type
dynamique	A.qual.f.s	dynamique
car	C.C	car
liaison	N.C.f.s	liaison
dynamique	A.qual.f.s	dynamique
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
d'	P	de
instance	N.C.f.s	instance
)	PONCT.W	)
est	V.P.3.s	être
celle	PRO.dem.f.s	celui
de	P	de
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
.	PONCT.S	.

-	PONCT.W	-
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
d'	P	de
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
ayant	VG	avoir
les	D.def.f.p	le
mêmes	A.qual.f.p	même
signature	N.C.f.s	signature
et	C.C	et
type	N.C.m.s	type
qu'	C.S	que
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
dans	P	dans
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
masque	V.P.3.s	masquer
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
:	PONCT.W	:
la	D.def.f.s	le
version	N.C.f.s	version
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
invoquée	VK.f.s	invoquer
dépend	V.P.3.s	dépendre
de	P	de
si	C.S	si
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
appelée	VK.f.s	appeler
sur	P	sur
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
ou	C.C	ou
sur	P	sur
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
(	PONCT.W	(
car	C.C	car
liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
de	P	de
classe	N.C.f.s	classe
)	PONCT.W	)
.	PONCT.S	.

-	PONCT.W	-
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
redéfinir	VW	redéfinir
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
déclarées	VK.f.p	déclarer
final	A.qual.m.s	final
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
-	PONCT.W	-
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
doit	V.P.3.s	devoir
redéfinir	VW	redéfinir
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
déclarées	VK.f.p	déclarer
abstract	A.qual.m.s	abstract
dans	P	dans
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
,	PONCT.W	,
à	P	à
moins	ADV.-	moins
que	C.S	que
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
soit	V.S.3.s	être
elle-même	PRO.refl.f.s	elle-même
déclarée	VK.f.s	déclarer
abstract	A.qual.m.s	abstract
.	PONCT.S	.

Depuis	P	depuis
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	N.card.f.s	@card@
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
:	PONCT.W	:
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
conseillé	VK.m.s	conseiller
d'	P	de
utiliser	VW	utiliser
l'	D.def.f.s	le
annotation	N.C.f.s	annotation
(	PONCT.W	(
ou	C.C	ou
méta-donnée	VK.f.s	méta-donner
)	PONCT.W	)
@Override	N.C.m.s	çoverride
pour	P	pour
marquer	VW	marquer
toute	D.ind.f.s	tout
méthode	N.C.f.s	méthode
qui	PRO.rel.f.s	qui
est	V.P.3.s	être
supposée	VK.f.s	supposer
redéfinir	VW	redéfinir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
héritée	VK.f.s	hériter
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
parent	V.P.3.p	parer
.	PONCT.S	.

Cela	PRO.dem.m.s	cela
permet	V.P.3.s	permettre
au	P+D.def.m.s	au
compilateur	N.C.m.s	compilateur
de	P	de
signaler	VW	signaler
immédiatement	ADV.-	immédiatement
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
si	C.S	si
jamais	ADV.neg	jamais
la	D.def.f.s	le
redéfinition	N.C.f.s	redéfinition
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
avérée	VK.f.s	avérer
(	PONCT.W	(
à	P	à
cause	N.C.f.s	cause
par	P	par
exemple	N.C.m.s	exemple
d'	P	de
une	D.ind.f.s	un
faute	N.C.f.s	faute
de	P	de
frappe	N.C.f.s	frappe
dans	P	dans
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
)	PONCT.W	)
.	PONCT.S	.

En	P	en
outre	P	outre
,	PONCT.W	,
en	P	en
signalant	VG	signaler
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
redéfinies	VK.f.p	redéfinir
,	PONCT.W	,
l'	D.def.f.s	le
annotation	N.C.f.s	annotation
@Override	A.qual.f.s	çoverride
permet	V.P.3.s	permettre
d'	P	de
accroître	VW	accroître
la	D.def.f.s	le
lisibilité	N.C.f.s	lisibilité
du	P+D.def.m.s	du
code	N.C.m.s	code
.	PONCT.S	.

La	D.def.f.s	le
covariance	N.C.f.s	covariance
des	P+D.def.m.p	du
types	N.C.m.p	type
de	P	de
retour	N.C.m.s	retour
est	V.P.3.s	être
autorisée	VK.f.s	autoriser
:	PONCT.W	:
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
peut	V.P.3.s	pouvoir
retourner	VW	retourner
un	D.ind.m.s	un
objet	N.C.m.s	objet
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
type	N.C.m.s	type
est	V.P.3.s	être
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
du	P+D.def.m.s	du
type	N.C.m.s	type
retourné	VK.m.s	retourner
par	P	par
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
même	A.qual.f.s	même
signature	N.C.f.s	signature
dans	P	dans
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
.	PONCT.S	.

Cette	D.dem.f.s	ce
caractéristique	N.C.f.s	caractéristique
supprime	V.P.3.s	supprimer
le	D.def.m.s	le
besoin	N.C.m.s	besoin
de	P	de
tests	N.C.m.p	test
et	C.C	et
de	P	de
conversions	N.C.f.p	conversion
de	P	de
types	N.C.m.p	type
excessifs	A.qual.m.p	excessif
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
@Override	N.C.m.s	çoverride
public	A.qual.m.s	public
String	N.P.m.s	String
toString()	N.C.m.s	tostringçë
{	N.C.m.s	{
//	PONCT.W	@card@
...	PONCT.W	<unknown>
}	N.C.m.s	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
Soit	C.C	soit
une	D.ind.f.s	un
classe	N.C.f.s	classe
Point	N.P.m.s	Point
possédant	VG	posséder
deux	D.card.m.p	deux
attributs	N.C.m.p	attribut
x	PRO.card.m.p	x
et	C.C	et
y	CL.obj.3.m.s	y
;	PONCT.W	;
soit	C.C	soit
une	D.ind.f.s	un
classe	N.C.f.s	classe
ColoredPoint	N.P.m.s	Coloredpoint
héritant	VG	hériter
de	P	de
Point	N.P.m.s	Point
et	C.C	et
possédant	VG	posséder
un	D.ind.m.s	un
attribut	N.C.m.s	attribut
spécifique	A.qual.m.s	spécifique
color	N.C.m.s	color
.	PONCT.S	.

Où	ADV.int	où
et	C.C	et
comment	ADV.int	comment
écrire	VW	écrire
la	D.def.f.s	le
méthode	N.C.f.s	méthode
equals	A.qual.m.p	equal
sans	P	sans
duplication	N.C.f.s	duplication
de	P	de
code	N.C.m.s	code
?	PONCT.S	?

/*	ET	<unknown>
In	CL.suj.3.m.s	in
the	ET	the
class	ET	class
Point	N.P.m.s	Point
*/	PONCT.W	<unknown>
@Override	ET	çoverride
public	A.qual.m.s	public
boolean	ET	boolean
equals(	ET	equalsà
Object	ET	object
o	PONCT.W	o
)	PONCT.W	)
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
o	ET	o
==	V.P.3.s	cevoir
null	A.qual.m.s	nul
)	PONCT.W	)
return	ET	return
false	A.qual.f.s	fals
;	PONCT.W	;
//	PONCT.W	@card@
case	V.P.3.s	caser
null	D.neg.m.s	<unknown>
if	A.qual.m.s	if
(	PONCT.W	(
this	N.C.m.p	thi
==	N.card.m.s	<unknown>
o	PONCT.W	o
)	PONCT.W	)
return	N.C.m.s	return
true	N.C.f.s	true
;	PONCT.W	;
//	ET	@card@
reflexivity	ET	reflexivity
if	ET	if
(	PONCT.W	(
this.getClass()	N.C.m.s	<unknown>
!	PONCT.S	!

=	PONCT.W	=
o.getClass()	N.C.m.s	<unknown>
)	PONCT.W	)
return	V.P.3.s	<unknown>
false	A.qual.f.s	fals
;	PONCT.W	;
//	PONCT.W	@card@
symmetry	ET	symmetry
//	PONCT.W	@card@
Now	N.P.m.s	Now
,	PONCT.W	,
this	ET	thi
and	ET	and
o	PONCT.W	o
having	ET	having
the	ET	the
same	A.qual.m.s	same
class	N.C.m.p	class
,	PONCT.W	,
compare	V.P.3.s	comparer
the	ET	the
fields	ET	field
Point	N.P.m.s	Point
p	N.C.f.p	p
=	PONCT.W	=
(Point)o	N.P.m.s	<unknown>
;	PONCT.W	;
return	N.C.m.s	return
(	PONCT.W	(
this.x	N.C.m.p	thistx
==	P+D.def.m.s	çù
p.x	N.C.m.s	pox
)	PONCT.W	)
&&	PRO.card.m.p	<unknown>
(	PONCT.W	(
this.y	ET	thisyy
==	P	çà
p.y	N.C.m.s	pry
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.p	}
/*	ET	<unknown>
In	CL.suj.3.m.s	in
the	ET	the
class	ET	class
ColoredPoint	N.P.m.s	Coloredpoint
extending	ET	extending
Point	N.P.m.s	Point
*/	PONCT.W	<unknown>
@Override	ET	çoverride
public	A.qual.m.s	public
boolean	ET	boolean
equals(	ET	equalsà
Object	ET	object
o	PONCT.W	o
)	PONCT.W	)
{	ET	{
//	PONCT.W	@card@
Verify	N.P.m.s	Verify
if	ET	if
this	ET	thi
and	ET	and
o	ET	o
have	ET	have
the	ET	the
same	ET	same
class	ET	class
and	ET	and
if	ET	if
their	ET	their
super	ET	super
//	PONCT.W	@card@
fields	ET	field
are	ET	are
equal	ET	equal
if	ET	if
(	PONCT.W	(
!	PONCT.S	!

super.equals(o)	N.C.m.s	<unknown>
)	PONCT.W	)
return	N.C.m.s	return
false	A.qual.m.s	fals
;	PONCT.W	;
//	PONCT.W	@card@
Now	N.P.m.s	Now
compare	V.P.3.s	comparer
the	ET	the
specific	ET	specific
fields	ET	field
ColoredPoint	N.P.m.s	Coloredpoint
cp	ET	<unknown>
=	PONCT.W	=
(ColoredPoint)o	N.P.m.s	<unknown>
;	PONCT.W	;
return	ET	return
this.color.equals(cp.color)	N.C.m.s	<unknown>
;	PONCT.W	;
}	ET	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	ET	public
class	ET	class
MotherClass	N.P.m.s	Motherclass
{	ET	{
public	N.C.m.s	public
void	A.qual.m.s	void
normal()	N.C.m.s	normalçë
{	P	à
System.out.println("the	N.P.m.s	<unknown>
normal	A.qual.m.s	normal
method	ET	method
in	ET	in
MotherClass	N.P.m.s	Motherclass
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	ET	public
static	A.qual.m.s	static
void	A.qual.m.s	void
hide()	N.C.m.s	hideçà
{	P	à
System.out.println("the	ET	<unknown>
hide	ET	hide
method	ET	method
in	ET	in
MotherClass	N.P.m.s	Motherclass
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	ET	public
void	ET	void
override()	N.C.m.s	overrideë
{	ET	{
System.out.println("the	ET	<unknown>
override	ET	override
method	ET	method
in	ET	in
MotherClass	N.P.m.s	Motherclass
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
//	PONCT.W	@card@
end	ET	end
MotherClass	N.P.m.s	Motherclass
public	ET	public
class	ET	class
DaughterClass	N.P.m.s	Daughterclass
extends	ET	extend
MotherClass	N.P.m.s	Motherclass
{	P	à
@Override	ET	çoverride
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
hide()	N.C.m.s	hideçà
{	P	à
System.out.println("the	ET	<unknown>
hide	ET	hide
method	ET	method
in	ET	in
DaughterClass	N.P.m.s	Daughterclass
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
@Override	ET	çoverride
public	ET	public
void	ET	void
override()	N.C.m.s	overrideë
{	ET	{
System.out.println("the	ET	<unknown>
override	ET	override
method	ET	method
in	ET	in
DaughterClass	N.P.m.s	Daughterclass
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	ET	mainästringë
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	P	à
DaughterClass	N.P.m.s	Daughterclass
o1	N.C.m.p	oc
=	PONCT.W	=
new	ET	new
DaughterClass()	N.P.m.s	<unknown>
;	PONCT.W	;
MotherClass	N.P.x.s	Motherclass
o2	N.card.m.s	<unknown>
o1	N.C.m.p	oc
;	PONCT.W	;
o1.normal()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
super.normal()	A.qual.m.s	<unknown>
o2.normal()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
super.normal()	A.qual.m.s	<unknown>
o1.hide()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
this.hide()	ET	thishhideçà
o2.hide()	ET	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
super.hide()	ET	supervhideçà
!	PONCT.S	!

!	PONCT.S	!

liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
o1.override()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
this.override()	N.C.m.s	thistoverrideëç
o2.override()	ET	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
call	ET	call
this.override()	N.C.m.s	thistoverrideëç
!	PONCT.S	!

!	PONCT.S	!

Tiaison	N.C.f.s	tiaison
dynamique	A.qual.f.s	dynamique
}	P	à
}	N.C.m.s	}
//	PONCT.W	@card@
end	V.P.3.s	endre
DaughterClass	N.P.m.s	Daughterclass
La	D.def.f.s	le
méthode	N.C.f.s	méthode
main	ADV.-	main
affichera	V.F.3.s	afficher
:	PONCT.W	:
the	ET	the
normal	A.qual.m.s	normal
method	ET	method
in	ET	in
MotherClass	ET	motherclass
the	ET	the
normal	A.qual.m.s	normal
method	ET	method
in	ET	in
MotherClass	ET	motherclass
the	ET	the
hide	ET	hide
method	ET	method
in	ET	in
DaugterClass	ET	daugterclass
the	ET	the
hide	ET	hide
method	ET	method
in	ET	in
MotherClass	ET	motherclass
the	ET	the
override	ET	override
method	ET	method
in	ET	in
DaugterClass	ET	daugterclass
the	ET	the
override	ET	override
method	ET	method
in	ET	in
DaugterClass	N.P.m.s	Daugterclass
9.4	D.card.m.p	@card@
Type	N.C.m.p	type
statique	A.qual.m.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
-	PONCT.W	-
Liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
/	PONCT.W	@card@
dynamique	V.P.3.s	dynamiquer
Cette	D.dem.f.s	ce
section	N.C.f.s	section
reprend	V.P.3.s	reprendre
et	C.C	et
formalise	V.P.3.s	formaliser
quelques	D.ind.m.p	quelque
uns	PRO.ind.m.p	un
des	P+D.def.m.p	du
importants	A.qual.m.p	important
concepts	N.C.m.p	concept
introduits	VK.m.p	introduire
dans	P	dans
les	D.def.f.p	le
sections	N.C.f.p	section
précédentes	A.qual.f.p	précédent
.	PONCT.S	.

9.4.1	D.card.m.p	@card@
Type	N.C.m.s	type
statique	A.qual.m.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
-	PONCT.W	-
Transtypage	V.P.3.s	transtypager
Le	D.def.m.s	le
type	N.C.m.s	type
statique	A.qual.m.s	statique
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
spécifié	A.qual.m.s	spécifié
par	P	par
sa	D.poss.f.s	son
déclaration	N.C.f.s	déclaration
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
déclaré	A.qual.m.s	déclaré
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
.	PONCT.S	.

Le	D.def.m.s	le
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
(	PONCT.W	(
i.e.	ADV.-	<unknown>
la	D.def.f.s	le
classe	N.C.f.s	classe
d'	P	de
appartenance	N.C.f.s	appartenance
)	PONCT.W	)
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
instancié	A.qual.m.s	instancié
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
constaté	VK.m.s	constater
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
effectif	A.qual.m.s	effectif
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
.	PONCT.S	.

Le	D.def.m.s	le
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
toujours	ADV.-	toujours
soit	C.C	soit
son	D.poss.m.s	son
type	N.C.m.s	type
statique	A.qual.m.s	statique
soit	V.S.3.s	être
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
de	P	de
son	D.poss.m.s	son
type	N.C.m.s	type
statique	A.qual.m.s	statique
(	PONCT.W	(
sauf	P	sauf
exceptions	N.C.f.p	exception
dues	VK.f.p	devoir
aux	P+D.def.m.p	au
transtypages	N.C.m.p	transtypage
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Soient	V.P.3.p	soier
une	D.ind.f.s	un
classe	N.C.f.s	classe
A	P	à
et	C.C	et
une	D.ind.f.s	un
classe	N.C.f.s	classe
B	N.C.m.s	b
sous-classe	N.C.m.s	sous-classe
de	P	de
A.	P	ao
Considérons	V.Y.1.p	considérer
le	D.def.m.s	le
code	N.C.m.s	code
suivant	A.qual.m.s	suivant
:	PONCT.W	:
A	P	à
a	V.P.3.s	avoir
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
myClass.booleanRandom()	N.C.m.s	<unknown>
)	PONCT.W	)
{	N.P.x.s	{
a	V.P.3.s	avoir
=	P	à
new	ET	new
A()	N.C.m.s	aùà
;	PONCT.W	;
}	N.card.m.s	}
else	CL.suj.3.f.s	else
{	CL.obj.3.m.s	c
a	V.P.3.s	avoir
=	P	à
new	ET	new
B()	N.C.m.s	bçë
;	PONCT.W	;
//	PONCT.W	@card@
transtypage	N.C.m.s	transtypage
ascendant	A.qual.m.s	ascendant
implicite	A.qual.m.s	implicite
}	P	à
Le	D.def.m.s	le
type	N.C.m.s	type
statique	A.qual.m.s	statique
de	P	de
a	V.P.3.s	avoir
est	V.P.3.s	être
A	N.C.m.s	a
;	PONCT.W	;
le	D.def.m.s	le
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
de	P	de
a	V.P.3.s	avoir
sera	V.F.3.s	être
A	P	à
ou	C.C	ou
B	N.C.m.s	b
mais	C.C	mais
ne	ADV.neg	ne
pourra	V.F.3.s	pouvoir
être	VW	être
constaté	VK.m.s	constater
qu'	ADV.neg	qu'
après	P	après
que	C.S	que
la	D.def.f.s	le
condition	N.C.f.s	condition
aura	V.F.3.s	avoir
été	VK.m.s	être
évaluée	VK.f.s	évaluer
.	PONCT.S	.

Le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
(	PONCT.W	(
casting	N.C.m.s	casting
)	PONCT.W	)
appliqué	VK.m.s	appliquer
à	P	à
une	D.ind.f.s	un
référence	N.C.f.s	référence
n'	ADV.neg	ne
est	V.P.3.s	être
que	ADV.neg	que
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
avoir	VW	avoir
une	D.ind.f.s	un
vue	N.C.f.s	vue
spécifique	A.qual.f.s	spécifique
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
pointé	VK.m.s	pointer
.	PONCT.S	.

Il	CL.suj.3.m.s	il
ne	ADV.neg	ne
change	V.P.3.s	changer
en	P	en
rien	PRO.neg.m.s	rien
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
sous-jacent	A.qual.m.s	sous-jacent
!	PONCT.S	!

(	PONCT.W	(
qui	PRO.rel.m.s	qui
garde	V.P.3.s	garder
bien	ADV.-	bien
évidemment	ADV.-	évidemment
tout	PRO.ind.m.s	tout
au	P+D.def.m.s	au
long	N.C.m.s	long
de	P	de
sa	D.poss.f.s	son
vie	N.C.f.s	vie
le	D.def.m.s	le
type	N.C.m.s	type
avec	P	avec
lequel	PRO.rel.m.s	lequel
il	CL.suj.3.m.s	il
a	V.P.3.s	avoir
été	VK.m.s	être
créé	VK.m.s	créer
)	PONCT.W	)
.	PONCT.S	.

L'	D.def.f.s	le
opération	N.C.f.s	opération
de	P	de
transtypage	N.C.m.s	transtypage
est	V.P.3.s	être
purement	ADV.-	purement
syntaxique	A.qual.f.s	syntaxique
et	C.C	et
ne	ADV.neg	ne
fait	V.P.3.s	faire
qu'	ADV.neg	qu'
indiquer	VW	indiquer
au	P+D.def.m.s	au
compilateur	N.C.m.s	compilateur
le	D.def.m.s	le
point	N.C.m.s	point
de	P	de
vue	N.C.f.s	vue
depuis	P	depuis
lequel	PRO.rel.m.s	lequel
il	CL.suj.3.m.s	il
doit	V.P.3.s	devoir
voir	VW	voir
l'	D.def.m.s	le
objet	N.C.m.s	objet
.	PONCT.S	.

Le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
vers	P	vers
un	D.ind.m.s	un
sur-type	N.C.m.s	sur-type
est	V.P.3.s	être
dit	VK.m.s	dire
ascendant	A.qual.m.s	ascendant
.	PONCT.S	.

Le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
ascendant	A.qual.m.s	ascendant
est	V.P.3.s	être
implicite	A.qual.m.s	implicite
.	PONCT.S	.

Le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
vers	P	vers
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
est	V.P.3.s	être
dit	VK.m.s	dire
descendant	A.qual.m.s	descendant
.	PONCT.S	.

Un	D.ind.m.s	un
transtypage	N.C.m.s	transtypage
descendant	VG	descendre
doit	V.P.3.s	devoir
être	VW	être
explicite	VK.f.s	explicir
.	PONCT.S	.

Il	CL.suj.3.m.s	il
permet	V.P.3.s	permettre
de	P	de
forcer	VW	forcer
la	D.def.f.s	le
compilation	N.C.f.s	compilation
mais	C.C	mais
ne	ADV.neg	ne
garantit	V.P.3.s	garantir
pas	ADV.neg	pas
nécessairement	ADV.-	nécessairement
l'	D.def.f.s	le
absence	N.C.f.s	absence
d'	P	de
erreur	N.C.f.s	erreur
d'	P	de
exécution	N.C.f.s	exécution
.	PONCT.S	.

Un	D.ind.m.s	un
transtypage	N.C.m.s	transtypage
n'	ADV.neg	ne
est	V.P.3.s	être
garanti	VK.m.s	garantir
correct	A.qual.m.s	correct
que	C.S	que
s'	C.S	si
il	CL.suj.3.m.s	il
respecte	V.P.3.s	respecter
la	D.def.f.s	le
règle	N.C.f.s	règle
suivante	A.qual.f.s	suivant
:	PONCT.W	:
Soient	V.S.3.p	être
T1	D.card.m.p	<unknown>
et	C.C	et
T2	D.card.m.p	<unknown>
deux	D.card.m.p	deux
types	N.C.m.p	type
définis	VK.m.p	définir
.	PONCT.S	.

Soit	C.C	soit
o	PONCT.W	o
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
T3	PRO.card.m.p	tc
.	PONCT.S	.

Considérons	V.Y.1.p	considérer
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
:	PONCT.W	:
T1	D.card.m.p	<unknown>
obj	N.C.m.p	obj
=	P	à
(T2)o	N.C.m.s	<unknown>
;	PONCT.W	;
Ce	D.dem.m.s	ce
transtypage	N.C.m.s	transtypage
est	V.P.3.s	être
garanti	VK.m.s	garantir
possible	A.qual.m.s	possible
,	PONCT.W	,
tant	ADV.-	tant
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
qu'	C.S	que
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
,	PONCT.W	,
si	C.S	si
et	C.C	et
seulement	ADV.-	seulement
si	C.S	si
T3	PRO.card.m.p	tc
est	V.P.3.s	être
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
de	P	de
T2	N.C.m.s	<unknown>
et	C.C	et
T2	N.C.m.p	ta
un	D.ind.m.s	un
sous-type	N.C.m.s	sous-type
de	P	de
T1	N.C.f.s	ta
.	PONCT.S	.

L'	D.def.m.s	le
opérateur	N.C.m.s	opérateur
instanceof	A.qual.m.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
tester	VW	tester
si	C.S	si
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
d'	P	de
un	D.ind.m.s	un
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
donné	VK.m.s	donner
ou	C.C	ou
de	P	de
tout	D.ind.m.s	tout
sous-type	N.C.m.s	sous-type
de	P	de
ce	D.dem.m.s	ce
type	N.C.m.s	type
donné	A.qual.m.s	donné
.	PONCT.S	.

Il	CL.suj.3.m.s	il
peut	V.P.3.s	pouvoir
donc	ADV.-	donc
permettre	VW	permettre
vérifier	VW	vérifier
la	D.def.f.s	le
compatibilité	N.C.f.s	compatibilité
des	P+D.def.m.p	du
types	N.C.m.p	type
avant	VG	avoir
d'	P	de
opérer	VW	opérer
un	D.ind.m.s	un
transtypage	N.C.m.s	transtypage
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Supposons	V.Y.1.p	supposer
définies	VK.f.p	définir
:	PONCT.W	:
public	ET	public
class	N.C.m.p	class
Shape2D	N.P.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	ET	}
public	ET	public
class	ET	class
Circle	ET	circle
extends	ET	extend
Shape2D	N.P.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	ET	}
public	ET	public
class	ET	class
Triangle	ET	triangle
extends	ET	extend
Shape2D	N.P.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
public	A.qual.m.s	public
class	N.C.m.p	class
Date	N.P.f.s	Date
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
Les	D.def.f.p	le
déclarations	N.C.f.p	déclaration
suivantes	A.qual.f.p	suivant
génèreraient	V.C.3.p	générer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
pour	P	pour
incompatibilité	N.C.f.s	incompatibilité
de	P	de
types	N.C.m.p	type
:	PONCT.W	:
Shape2D	N.P.m.s	<unknown>
s	PONCT.W	s
=	ET	=
(	PONCT.W	(
Shape2D	N.P.m.s	<unknown>
)	PONCT.W	)
(	PONCT.W	(
new	ET	new
Date())	N.P.m.s	Dateëç
;	PONCT.W	;
//	PONCT.W	@card@
erreur	N.C.f.s	erreur
de	P	de
compilation	N.C.f.s	compilation
Circle	N.P.m.s	Circle
c	PONCT.W	c
=	ET	=
new	ET	new
Shape2D()	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
erreur	N.C.f.s	erreur
de	P	de
compilation	N.C.f.s	compilation
Circle	N.P.m.s	Circle
c	PONCT.W	c
=	P	à
(Circle)(new	N.P.m.s	<unknown>
Shape2D())	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
erreur	N.C.f.s	erreur
d'	P	de
exécution	N.C.f.s	exécution
Triangle	N.P.f.s	Triangle
t	PONCT.W	t
=	ET	=
new	ET	new
Triangle()	N.P.m.s	Triangleëù
;	PONCT.W	;
Circle	N.P.m.s	Circle
c	PONCT.W	c
=	V.P.3.s	être
(Circle)t	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
erreur	N.C.f.s	erreur
d'	P	de
exécution	N.C.f.s	exécution
Les	D.def.f.p	le
déclarations	N.C.f.p	déclaration
suivantes	A.qual.f.p	suivant
sont	V.P.3.p	être
saines	A.qual.f.p	sain
:	PONCT.W	:
Shape2D	N.P.m.s	<unknown>
s	ET	s
=	ET	=
new	ET	new
Circle()	N.P.m.s	Circleëù
;	PONCT.W	;
Circle	N.P.m.s	Circle
c	PONCT.W	c
=	P	à
(Circle)s	N.C.m.p	ccircleë
;	PONCT.W	;
Shape2D	N.P.m.s	<unknown>
s	ET	s
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
obj	ET	obj
instanceof	ET	instanceof
Shape2D	N.P.m.s	<unknown>
)	PONCT.W	)
s	A.card.m.s	s
=	ET	=
(Shaped2D)obj	N.P.m.s	<unknown>
;	PONCT.W	;
9.4.2	D.card.m.p	@card@
Liaison	N.C.f.s	liaison
statique	A.qual.f.s	statique
/	PONCT.W	@card@
dynamique	N.C.f.s	dynamique
Considérons	V.Y.1.p	considérer
l'	D.def.f.s	le
invocation	N.C.f.s	invocation
o.m	N.C.m.s	<unknown>
où	PRO.rel.f.s	où
o	PONCT.W	o
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
de	P	de
type	N.C.m.s	type
statique	A.qual.m.s	statique
T	C.C	t
et	C.C	et
de	P	de
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
T	C.C	t
'	PONCT.W	'
,	PONCT.W	,
et	C.C	et
m	PONCT.W	m
un	D.ind.m.s	un
message	N.C.m.s	message
(	PONCT.W	(
attribut	N.C.m.s	attribut
ou	C.C	ou
méthode	N.C.f.s	méthode
)	PONCT.W	)
envoyé	VK.m.s	envoyer
à	P	à
o.	CL.suj.3.m.s	ou
Si	C.S	si
le	D.def.m.s	le
message	N.C.m.s	message
m	A.qual.m.s	m
exécuté	VK.m.s	exécuter
est	V.P.3.s	être
celui	PRO.dem.m.s	celui
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
code	N.C.m.s	code
est	V.P.3.s	être
accessible	A.qual.m.s	accessible
depuis	P	depuis
la	D.def.f.s	le
classe	N.C.f.s	classe
T	N.P.m.s	T
,	PONCT.W	,
alors	ADV.-	alors
la	D.def.f.s	le
liaison	N.C.f.s	liaison
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
au	P+D.def.m.s	au
message	N.C.m.s	message
sera	V.F.3.s	être
dite	VK.f.s	dire
statique	A.qual.f.s	statique
(	PONCT.W	(
liaison	N.C.f.s	liaison
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
)	PONCT.W	)
sinon	C.C	sinon
elle	CL.suj.3.f.s	elle
sera	V.F.3.s	être
dite	VK.f.s	dire
dynamique	A.qual.f.s	dynamique
(	PONCT.W	(
liaison	N.C.f.s	liaison
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
)	PONCT.W	)
.	PONCT.S	.

En	P	en
java	N.C.m.s	java
:	PONCT.W	:
-	PONCT.W	-
la	D.def.f.s	le
liaison	N.C.f.s	liaison
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
avec	P	avec
ses	D.poss.f.p	son
variables	N.C.f.p	variable
d'	P	de
instance	N.C.f.s	instance
est	V.P.3.s	être
statique	A.qual.f.s	statique
;	PONCT.W	;
-	PONCT.W	-
la	D.def.f.s	le
liaison	N.C.f.s	liaison
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
avec	P	avec
ses	D.poss.f.p	son
méthodes	N.C.f.p	méthode
est	V.P.3.s	être
dynamique	A.qual.f.s	dynamique
(	PONCT.W	(
sauf	P	sauf
si	ADV.-	si
méthode	N.C.f.s	méthode
static	A.qual.m.s	static
ou	C.C	ou
final	A.qual.m.s	final
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	N.C.m.p	class
A	P	à
{	ET	{
public	A.qual.m.s	public
boolean	ET	boolean
m1(A	N.C.m.s	<unknown>
a	V.P.3.s	avoir
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
true	A.qual.m.s	tru
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
boolean	ET	boolean
m2(A	N.C.m.s	<unknown>
a	V.P.3.s	avoir
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
true	A.qual.f.s	tru
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
public	A.qual.m.s	public
class	ET	class
B	A.qual.m.s	b
extends	N.C.m.p	extend
A	P	à
{	ET	{
public	A.qual.m.s	public
boolean	ET	boolean
m1(A	N.C.m.s	<unknown>
a	V.P.3.s	avoir
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
false	A.qual.m.s	fals
;	PONCT.W	;
}	ET	}
public	ET	public
boolean	ET	boolean
m3(A	N.C.m.s	<unknown>
a	V.P.3.s	avoir
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
false	A.qual.m.s	fals
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	ET	mainästringë
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	N.card.m.s	{
A	N.C.m.s	a
a	V.P.3.s	avoir
=	P	à
new	ET	new
B()	N.P.m.s	Büë
;	PONCT.W	;
System.out.prinln(a.m1(a))	N.P.m.s	<unknown>
;	PONCT.W	;
System.out.prinln(a.m2(a))	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
System.out.prinln(a.m3(a))	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
problème	N.C.m.s	problème
}	N.C.m.s	}
}	P	à
La	D.def.f.s	le
méthode	N.C.f.s	méthode
main	N.C.f.s	main
affichera	V.F.3.s	afficher
:	PONCT.W	:
false	A.qual.f.s	fals
true	N.C.f.s	true
Pourquoi	ADV.int	pourquoi
?	PONCT.S	?

Le	D.def.m.s	le
type	N.C.m.s	type
statique	A.qual.m.s	statique
de	P	de
a	V.P.3.s	avoir
est	V.P.3.s	être
A	N.C.m.s	a
,	PONCT.W	,
et	C.C	et
son	D.poss.m.s	son
type	N.C.m.s	type
dynamique	A.qual.m.s	dynamique
B.	N.P.m.s	Bo
C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
donc	ADV.-	donc
le	D.def.m.s	le
m1	N.C.m.s	<unknown>
de	P	de
B	N.C.m.s	b
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
.	PONCT.S	.

Quant	VG	quer
à	P	à
la	D.def.f.s	le
méthode	N.C.f.s	méthode
m2	N.C.m.p	<unknown>
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
définie	VK.f.s	définir
dans	P	dans
B	N.C.m.s	b
mais	C.C	mais
dans	P	dans
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
A	N.C.m.s	a
:	PONCT.W	:
B	N.C.m.s	b
hérite	V.P.3.s	hériter
donc	ADV.-	donc
normalement	ADV.-	normalement
de	P	de
m2	N.C.m.p	<unknown>
et	C.C	et
m2	N.C.m.p	<unknown>
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
.	PONCT.S	.

La	D.def.f.s	le
dernière	A.qual.f.s	dernier
instruction	N.C.f.s	instruction
System.out.prinln(a.m3(a))	N.P.m.s	<unknown>
provoquerait	V.C.3.s	provoquer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
.	PONCT.S	.

Pourquoi	ADV.int	pourquoi
?	PONCT.S	?

Parce	N.C.f.s	parce
que	C.S	que
le	D.def.m.s	le
compilateur	N.C.m.s	compilateur
ne	ADV.neg	ne
connaît	V.P.3.s	connaître
que	ADV.neg	que
le	D.def.m.s	le
type	N.C.m.s	type
statique	A.qual.m.s	statique
(	PONCT.W	(
i.e.	ADV.-	<unknown>
le	D.def.m.s	le
type	N.C.m.s	type
déclaré	A.qual.m.s	déclaré
)	PONCT.W	)
:	PONCT.W	:
la	D.def.f.s	le
méthode	N.C.f.s	méthode
m3	N.card.f.s	<unknown>
n'	ADV.neg	ne
étant	VG	être
pas	ADV.neg	pas
définie	VK.f.s	définir
dans	P	dans
la	D.def.f.s	le
classe	N.C.f.s	classe
A	P	à
ni	C.C	ni
dans	P	dans
une	PRO.ind.f.s	un
de	P	de
ses	D.poss.f.p	son
super-classes	N.C.f.p	super-classe
,	PONCT.W	,
le	D.def.m.s	le
compilateur	N.C.m.s	compilateur
ne	ADV.neg	ne
trouve	V.P.3.s	trouver
pas	ADV.neg	pas
la	D.def.f.s	le
définition	N.C.f.s	définition
de	P	de
m3	N.card.f.s	<unknown>
(	PONCT.W	(
bien	ADV.-	bien
que	C.S	que
dans	P	dans
B	N.C.m.s	b
)	PONCT.W	)
et	C.C	et
génère	V.P.3.s	générer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
.	PONCT.S	.

La	D.def.f.s	le
solution	N.C.f.s	solution
serait	V.C.3.s	être
le	D.def.m.s	le
transtypage	N.C.m.s	transtypage
descendant	VG	descendre
préalable	A.qual.m.s	préalable
de	P	de
a	V.P.3.s	avoir
:	PONCT.W	:
System.out.prinln(((B)a).m3(a)	N.P.f.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Ce	D.dem.m.s	ce
transtypage	N.C.m.s	transtypage
serait	V.C.3.s	être
correct	A.qual.m.s	correct
car	C.C	car
à	P	à
possède	N.C.m.s	possède
déjà	ADV.-	déjà
,	PONCT.W	,
par	P	par
création	N.C.f.s	création
,	PONCT.W	,
tous	A.ind.m.p	tous
les	D.def.m.p	le
attributs	N.C.m.p	attribut
d'	P	de
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
B.	N.P.m.s	Bo
9.5	D.card.m.p	@card@
Polymorphisme	N.P.m.s	Polymorphisme
Un	D.ind.m.s	un
même	A.qual.m.s	même
appel	N.C.m.s	appel
de	P	de
méthode	N.C.f.s	méthode
peut	V.P.3.s	pouvoir
invoquer	VW	invoquer
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
différentes	A.qual.f.p	différent
car	C.C	car
la	D.def.f.s	le
liaison	N.C.f.s	liaison
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
dynamiquement	ADV.-	dynamiquement
(	PONCT.W	(
i.e.	ADV.-	<unknown>
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
et	C.C	et
non	ADV.neg	non
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
)	PONCT.W	)
,	PONCT.W	,
l'	D.def.f.s	le
identification	N.C.f.s	identification
du	P+D.def.m.s	du
type	N.C.m.s	type
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
associé	VK.m.s	associer
à	P	à
l'	D.def.m.s	le
appel	N.C.m.s	appel
étant	VG	être
dynamique	A.qual.m.s	dynamique
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
polymorphisme	N.C.m.s	polymorphisme
d'	P	de
héritage	N.C.m.s	héritage
:	PONCT.W	:
public	ET	public
class	ET	class
Shape	ET	shape
{	ET	{
public	ET	public
void	ET	void
draw()	N.C.m.s	drawçh
{	ET	{
System.out.println(	ET	<unknown>
this	N.C.m.p	thi
+	P	p
"	PONCT.W	"
.draw()	ET	wdrwwüë
;	PONCT.W	;
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
}	ET	}
public	ET	public
class	ET	class
Circle	ET	circle
extends	ET	extend
Shape	N.P.f.s	Shape
{	P	à
@Override	N.C.m.s	çoverride
public	A.qual.m.s	public
String	N.P.m.s	String
toString()	N.C.m.s	tostringçë
{	P	à
return	N.C.m.s	return
"	PONCT.W	"
circle	A.qual.m.s	circle
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	ET	}
public	ET	public
class	ET	class
Square	N.P.m.s	Square
extends	ET	extend
Shape	N.P.m.s	Shape
{	P	à
@Override	N.C.m.s	çoverride
public	A.qual.m.s	public
String	N.P.m.s	String
toString()	N.C.m.s	tostringçë
{	P	à
return	N.C.m.s	return
"	PONCT.W	"
square	A.qual.m.s	square
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
public	ET	public
class	ET	class
Picture	N.C.f.s	picture
{	P	à
public	N.C.m.s	public
static	A.qual.m.s	static
void	V.P.3.s	voiler
main(String[	ET	mainästringë
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	ET	{
Vector<Shape>	N.P.m.s	Vectorçshapeë
v	A.card.m.s	v
=	ET	=
new	ET	new
Vector<Shape>()	ET	vectorçshapeçë
;	PONCT.W	;
v.add(	ET	voaddà
new	ET	new
Circle()	ET	circleëë
)	PONCT.W	)
;	PONCT.W	;
v.add(	ET	voaddà
new	ET	new
Square()	N.P.m.s	Squareçë
)	PONCT.W	)
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
Shape	N.P.f.s	Shape
s	N.card.m.s	s
:	PONCT.W	:
v	N.card.m.s	v
)	PONCT.W	)
{	ET	{
System.out.prinln(	ET	<unknown>
s.draw()	ET	sodrawwë
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
polymorphism	N.C.m.s	<unknown>
}	P	à
La	D.def.f.s	le
méthode	N.C.f.s	méthode
main	ADV.-	main
affichera	V.F.3.s	afficher
:	PONCT.W	:
circle.draw()	N.C.m.s	<unknown>
;	PONCT.W	;
square.draw()	N.C.m.s	squaredraw
;	PONCT.W	;
9.6	D.card.f.p	@card@
Classes	N.C.f.p	classe
et	C.C	et
méthodes	N.C.f.p	méthode
particulières	A.qual.f.p	particulier
Une	D.ind.f.s	un
classe	N.C.f.s	classe
déclarée	VK.f.s	déclarer
final	A.qual.m.s	final
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
sous-classée	VK.f.s	sous-classer
.	PONCT.S	.

Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
déclarée	VK.f.s	déclarer
final	A.qual.m.s	final
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
redéfinie	VK.f.s	redéfinir
dans	P	dans
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
déclarée	VK.f.s	déclarer
abstract	N.C.m.s	abstract
représente	V.P.3.s	représenter
un	D.ind.m.s	un
concept	N.C.m.s	concept
abstrait	A.qual.m.s	abstrait
:	PONCT.W	:
elle	CL.suj.3.f.s	elle
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
instanciée	VK.f.s	instancier
et	C.C	et
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
être	VW	être
que	ADV.neg	que
sous-classée	VK.f.s	sous-classer
.	PONCT.S	.

Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
déclarée	VK.f.s	déclarer
abstract	N.C.m.s	abstract
est	V.P.3.s	être
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
dont	PRO.rel.f.s	dont
le	D.def.m.s	le
corps	N.C.m.s	corps
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
spécifié	VK.m.s	spécifier
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
abstraite	A.qual.f.s	abstrait
peut	V.P.3.s	pouvoir
contenir	VW	contenir
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
non	ADV.neg	non
abstraites	VK.f.p	abstraire
,	PONCT.W	,
mais	C.C	mais
toute	D.ind.f.s	tout
classe	N.C.f.s	classe
contenant	VG	contenir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
abstraite	A.qual.f.s	abstrait
doit	V.P.3.s	devoir
être	VW	être
déclarée	VK.f.s	déclarer
abstract	A.qual.m.s	abstract
.	PONCT.S	.

Si	C.S	si
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
n'	ADV.neg	ne
implémente	V.P.3.s	implémenter
pas	ADV.neg	pas
toutes	A.ind.f.p	tout
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
abstraites	VK.f.p	abstraire
de	P	de
sa	D.poss.f.s	son
super-classe	N.C.f.s	super-classe
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
doit	V.P.3.s	devoir
être	VW	être
déclarée	VK.f.s	déclarer
abstract	A.qual.m.s	abstract
.	PONCT.S	.

9.7	D.card.f.p	@card@
Interfaces	N.C.f.p	interface
Une	D.ind.f.s	un
interface	N.C.f.s	interface
(	PONCT.W	(
au	P+D.def.m.s	au
sens	N.C.m.s	sens
du	P+D.def.m.s	du
langage	N.C.m.s	langage
Java	N.P.m.s	Java
,	PONCT.W	,
cf	ET	cf
section	N.C.f.s	section
3.3	A.card.f.s	@card@
)	PONCT.W	)
est	V.P.3.s	être
un	D.ind.m.s	un
protocole	N.C.m.s	protocole
de	P	de
comportement	N.C.m.s	comportement
qui	PRO.rel.m.s	qui
peut	V.P.3.s	pouvoir
être	VW	être
implanté	VK.m.s	implanter
par	P	par
toute	D.ind.f.s	tout
classe	N.C.f.s	classe
.	PONCT.S	.

Une	D.ind.f.s	un
interface	N.C.f.s	interface
est	V.P.3.s	être
en	P	en
dehors	N.C.m.p	dehors
de	P	de
la	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
des	P+D.def.f.p	du
classes	N.C.f.p	classe
.	PONCT.S	.

Une	D.ind.f.s	un
interface	N.C.f.s	interface
se	CL.refl.3.f.s	se
différencie	V.P.3.s	différencier
principalement	ADV.-	principalement
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
abstraite	VK.f.s	abstraire
par	P	par
ces	D.dem.f.p	ce
caractéristiques	N.C.f.p	caractéristique
:	PONCT.W	:
-	PONCT.W	-
aucune	D.neg.f.s	aucun
méthode	N.C.f.s	méthode
concrète	A.qual.f.s	concret
(	PONCT.W	(
par	P	par
opposition	N.C.f.s	opposition
à	P	à
abstraite	N.C.f.s	abstraite
)	PONCT.W	)
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
être	VW	être
définie	VK.f.s	définir
dans	P	dans
une	D.ind.f.s	un
interface	N.C.f.s	interface
;	PONCT.W	;
-	PONCT.W	-
une	D.ind.f.s	un
classe	N.C.f.s	classe
peut	V.P.3.s	pouvoir
implémenter	VW	implémenter
plusieurs	D.ind.f.p	plusieurs
interfaces	N.C.f.p	interface
.	PONCT.S	.

Tout	ADV.-	tout
comme	C.S	comme
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
construire	VW	construire
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
de	P	de
classes	N.C.f.p	classe
,	PONCT.W	,
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
construire	VW	construire
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
interfaces	N.C.f.p	interface
.	PONCT.S	.

Mais	C.C	mais
alors	ADV.-	alors
qu'	C.S	que
une	D.ind.f.s	un
classe	N.C.f.s	classe
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
étendre	VW	étendre
directement	ADV.-	directement
qu'	ADV.neg	qu'
une	D.ind.f.s	un
seule	A.qual.f.s	seul
super-classe	N.C.f.s	super-classe
,	PONCT.W	,
(	PONCT.W	(
pas	ADV.neg	pas
d'	P	de
héritage	N.C.m.s	héritage
multiple	A.qual.m.s	multiple
)	PONCT.W	)
,	PONCT.W	,
une	D.ind.f.s	un
interface	N.C.f.s	interface
peut	V.P.3.s	pouvoir
étendre	VW	étendre
directement	ADV.-	directement
plusieurs	D.ind.f.p	plusieurs
super-interfaces	N.C.f.p	super-interface
(	PONCT.W	(
héritage	N.C.m.s	héritage
multiple	A.qual.m.s	multiple
possible	A.qual.m.s	possible
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
List<E>	N.P.m.s	Listüeë
extends	ET	extend
Collection<E>	N.P.f.s	Collectionçeë
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
Predator	N.P.m.s	Predator
{	ET	{
boolean	ET	boolean
chasePrey(Prey	ET	chasepreyprey
p	N.C.f.p	p
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
Prey	N.P.m.s	Prey
{	ET	{
boolean	ET	boolean
isChasedBy(Predator	N.P.m.s	<unknown>
p	ET	p
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
Venomous	N.P.m.s	Venomous
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
VenomousPredator	N.P.m.s	Venomouspredator
extends	ET	extend
Predator	N.P.m.s	Predator
,	PONCT.W	,
Venomous	N.P.m.s	Venomous
{	N.P.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
public	A.qual.m.s	public
class	ET	class
Pet	C.C	pet
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	ET	}
public	ET	public
class	ET	class
Cat	ET	cat
extends	N.C.m.p	extend
Pet	C.C	pet
implements	N.C.m.p	implement
Predator	N.P.x.s	Predator
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
public	ET	public
class	ET	class
Frog	N.P.m.s	Frog
implements	ET	implement
Predator	N.P.m.s	Predator
,	PONCT.W	,
Prey	N.P.m.s	Prey
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
10	D.card.f.p	@card@
EXCEPTIONS	N.C.f.p	exception
Une	D.ind.f.s	un
exception	N.C.f.s	exception
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
fournissant	A.qual.m.s	fournissant
des	D.ind.f.p	du
informations	N.C.f.p	information
relatives	A.qual.f.p	relatif
à	P	à
une	D.ind.f.s	un
défaillance	N.C.f.s	défaillance
du	P+D.def.m.s	du
programme	N.C.m.s	programme
.	PONCT.S	.

Une	D.ind.f.s	un
exception	N.C.f.s	exception
est	V.P.3.s	être
générée	VK.f.s	générer
dans	P	dans
chacune	PRO.ind.f.s	chacun
des	P+D.def.f.p	du
situations	N.C.f.p	situation
suivantes	A.qual.f.p	suivant
:	PONCT.W	:
-	PONCT.W	-
condition	N.C.f.s	condition
d'	P	de
exécution	N.C.f.s	exécution
anormale	A.qual.f.s	anormal
,	PONCT.W	,
comme	P	comme
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
tentative	N.C.f.s	tentative
de	P	de
division	N.C.f.s	division
par	P	par
zéro	N.C.m.s	zéro
,	PONCT.W	,
mémoire	N.C.f.s	mémoire
insuffisante	A.qual.f.s	insuffisant
,	PONCT.W	,
-	PONCT.W	-
exécution	N.C.f.s	exécution
d'	P	de
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
throw	N.C.m.s	throw
Le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
java	A.qual.m.s	java
.	PONCT.S	.

lang	ET	lang
définit	V.P.3.s	définir
nombre	N.C.m.s	nombre
de	P	de
classes	N.C.f.p	classe
d'	P	de
exception	N.C.f.s	exception
qui	PRO.rel.f.p	qui
couvrent	V.P.3.p	couvrir
les	D.def.m.p	le
cas	N.C.m.p	cas
les	D.def.m.p	le
plus	ADV.-	plus
courants	A.qual.m.p	courant
.	PONCT.S	.

10.1	D.card.f.p	@card@
Exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
et	C.C	et
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
Toute	D.ind.f.s	tout
exception	N.C.f.s	exception
est	V.P.3.s	être
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Throwable	A.qual.f.s	throwable
ou	C.C	ou
une	PRO.ind.f.s	un
de	P	de
ses	D.poss.m.p	son
sous-classes	N.C.m.p	sous-classe
:	PONCT.W	:
Object	ET	object
Throwable	ET	throwable
Error	N.P.m.s	Error
Exception	N.P.m.s	Exception
MyCheckedException	N.P.m.s	Mycheckedexception
RunTimeException	N.P.m.s	Runtimeexception
MyUncheckedException	N.P.m.s	Myuncheckedexception
Java	N.P.m.s	Java
divise	V.P.3.s	diviser
les	D.def.f.p	le
classes	N.C.f.p	classe
d'	P	de
exception	N.C.f.s	exception
en	P	en
deux	D.card.f.p	deux
catégories	N.C.f.p	catégorie
:	PONCT.W	:
-	PONCT.W	-
Les	D.def.f.p	le
exceptions	N.C.f.p	exception
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
(	PONCT.W	(
unchecked	ET	unchecked
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
exceptions	N.C.f.p	exception
concernent	V.P.3.p	concerner
les	D.def.m.p	le
cas	N.C.m.p	cas
"	PONCT.W	"
imprévus	A.qual.m.p	imprévu
"	PONCT.W	"
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
les	D.def.f.p	le
situations	N.C.f.p	situation
où	PRO.rel.f.p	où
il	CL.suj.3.m.s	il
ne	ADV.neg	ne
devrait	V.C.3.s	devoir
pas	ADV.neg	pas
y	CL.obj.3.m.s	y
avoir	VW	avoir
de	D.ind.f.s	de
défaillance	N.C.f.s	défaillance
en	P	en
fonctionnement	N.C.m.s	fonctionnement
normal	A.qual.m.s	normal
.	PONCT.S	.

Elles	CL.suj.3.f.p	elle
concernent	V.P.3.p	concerner
des	D.ind.f.p	du
situations	N.C.f.p	situation
qui	PRO.rel.f.p	qui
pourraient	V.C.3.p	pouvoir
être	VW	être
raisonnablement	ADV.-	raisonnablement
évitées	VK.f.p	éviter
(	PONCT.W	(
exemple	N.C.m.s	exemple
:	PONCT.W	:
un	D.ind.m.s	un
indice	N.C.m.s	indice
de	P	de
tableau	N.C.m.s	tableau
hors	P	hors
limite	N.C.f.s	limite
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
exceptions	N.C.f.p	exception
indiquent	V.P.3.p	indiquer
généralement	ADV.-	généralement
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
de	P	de
programme	N.C.m.s	programme
.	PONCT.S	.

Elles	CL.suj.3.f.p	elle
ont	V.P.3.p	avoir
normalement	ADV.-	normalement
vocation	N.C.f.s	vocation
à	P	à
conduire	VW	conduire
à	P	à
un	D.ind.m.s	un
arrêt	N.C.m.s	arrêt
immédiat	A.qual.m.s	immédiat
et	C.C	et
définitif	A.qual.m.s	définitif
du	P+D.def.m.s	du
programme	N.C.m.s	programme
.	PONCT.S	.

-	PONCT.W	-
Les	D.def.f.p	le
exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
(	PONCT.W	(
checked	N.C.m.s	checked
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
exceptions	N.C.f.p	exception
concernent	V.P.3.p	concerner
les	D.def.m.p	le
cas	N.C.m.p	cas
"	PONCT.W	"
prévus	VK.m.p	prévoir
"	PONCT.W	"
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
les	D.def.f.p	le
situations	N.C.f.p	situation
où	PRO.rel.f.p	où
le	D.def.m.s	le
programmeur	N.C.m.s	programmeur
devrait	V.C.3.s	devoir
s'	CL.refl.3.m.s	se
attendre	VW	attendre
à	P	à
ce	PRO.dem.m.s	ce
qu'	PRO.rel.m.s	que
une	D.ind.f.s	un
opération	N.C.f.s	opération
puisse	A.qual.f.s	puisse
échouer	VW	échouer
.	PONCT.S	.

Elles	CL.suj.3.f.p	elle
concernent	V.P.3.p	concerner
des	D.ind.f.p	du
situations	N.C.f.p	situation
de	P	de
défaillance	N.C.f.s	défaillance
qui	PRO.rel.f.p	qui
sont	V.P.3.p	être
au	P+D.def.m.s	au
delà	ADV.-	delà
du	P+D.def.m.s	du
contrôle	N.C.m.s	contrôle
du	P+D.def.m.s	du
programmeur	N.C.m.s	programmeur
(	PONCT.W	(
exemple	N.C.m.s	exemple
:	PONCT.W	:
un	D.ind.m.s	un
disque	N.C.m.s	disque
devenu	VK.m.s	devenir
plein	A.qual.m.s	plein
rendant	VG	rendre
impossible	A.qual.m.s	impossible
une	D.ind.f.s	un
écriture	N.C.f.s	écriture
dans	P	dans
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
exceptions	N.C.f.p	exception
ont	V.P.3.p	avoir
normalement	ADV.-	normalement
vocation	N.C.f.s	vocation
à	P	à
être	VW	être
récupérées	VK.f.p	récupérer
pour	P	pour
permettre	VW	permettre
au	P+D.def.m.s	au
programme	N.C.m.s	programme
de	P	de
se	CL.refl.3.f.p	se
poursuivre	VW	poursuivre
normalement	ADV.-	normalement
.	PONCT.S	.

La	D.def.f.s	le
gestion	N.C.f.s	gestion
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
contrôlée	VK.f.s	contrôler
impose	V.P.3.s	imposer
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
de	P	de
la	D.def.f.s	le
clause	N.C.f.s	clause
throws	N.C.m.p	throw
et	C.C	et
de	P	de
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
de	P	de
contrôle	N.C.m.s	contrôle
try	A.qual.m.s	try
.	PONCT.S	.
.	PONCT.S	.
catch	N.C.m.s	catch
.	PONCT.S	.

Les	D.def.f.p	le
exceptions	N.C.f.p	exception
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
sont	V.P.3.p	être
les	D.def.f.p	le
classes	N.C.f.p	classe
RuntimeException	N.P.x.s	Runtimeexception
,	PONCT.W	,
Error	N.P.m.s	Error
et	C.C	et
leurs	D.poss.f.p	leur
sous-	P	<unknown>
classes	N.C.f.p	classe
;	PONCT.W	;
toutes	A.ind.f.p	tout
les	D.def.f.p	le
autres	A.ind.f.p	autre
classes	N.C.f.p	classe
et	C.C	et
sous-classes	N.C.m.p	sous-classe
sont	V.P.3.p	être
des	D.ind.f.p	du
exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
.	PONCT.S	.

10.2	D.card.f.p	@card@
Classes	N.C.f.p	classe
d'	P	de
exception	N.C.f.s	exception
standard	A.qual.f.s	standard
10.2.1	PRO.card.f.p	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
Error	N.P.m.s	Error
La	D.def.f.s	le
classe	N.C.f.s	classe
Error	N.P.m.s	Error
est	V.P.3.s	être
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
d'	P	de
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
erreurs	N.C.f.p	erreur
graves	A.qual.f.p	grave
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
.	PONCT.S	.

Cette	D.dem.f.s	ce
hiérarchie	N.C.f.s	hiérarchie
est	V.P.3.s	être
habituellement	ADV.-	habituellement
réservée	VK.f.s	réserver
aux	P+D.def.f.p	au
erreurs	N.C.f.p	erreur
d'	P	de
exécution	N.C.f.s	exécution
système	N.C.m.s	système
.	PONCT.S	.

Exemples	N.C.m.p	exemple
de	P	de
sous-	P	<unknown>
classes	N.C.f.p	classe
prédéfinies	VK.f.p	prédéfinir
:	PONCT.W	:
NoSuchMethodError	N.P.m.s	Nosuchmethoderror
StackOverFlowError	N.P.m.s	Stackoverflower
OutOfMemoryError	N.P.m.s	Outofmemoryerror
IllegalAccessError	N.P.m.s	Illegalaccesserror
10.22	N.card.m.s	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
Exception	N.C.f.s	exception
La	D.def.f.s	le
classe	N.C.f.s	classe
Exception	N.P.f.s	Exception
est	V.P.3.s	être
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
d'	P	de
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
exceptions	N.C.f.p	exception
,	PONCT.W	,
exclusion	N.C.f.s	exclusion
faite	VK.f.s	faire
de	P	de
la	D.def.f.s	le
sous-hiérarchie	N.C.f.s	sous-hiérarchie
RuntimeException	N.C.f.s	runtimeexception
,	PONCT.W	,
contrôlées	VK.f.p	contrôler
.	PONCT.S	.

Exemples	N.C.m.p	exemple
de	P	de
sous-classes	N.C.m.p	sous-classe
d'	P	de
exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
prédéfinies	VK.f.p	prédéfinir
:	PONCT.W	:
DataFormatException	N.C.f.s	dataformatexception
IOException	N.P.m.s	Ioexception
EOFException	N.P.m.s	Eofexception
FileNotFoundException	N.C.f.s	filenotfoundexception
10.23	N.card.f.s	@card@
La	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
RuntimeException	N.C.f.s	runtimeexception
La	D.def.f.s	le
classe	N.C.f.s	classe
RuntimeException	N.C.f.s	runtimeexception
est	V.P.3.s	être
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
d'	P	de
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
exceptions	N.C.f.p	exception
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
.	PONCT.S	.

Exemples	N.C.m.p	exemple
de	P	de
sous-classes	N.C.m.p	sous-classe
prédéfinies	VK.f.p	prédéfinir
:	PONCT.W	:
ArithmeticException	N.C.f.s	arithmeticexception
IllegalArgumentException	N.P.m.s	Illegalargumentexcextion
NumberFormatException	N.C.f.s	numberformatexception
IllegalStateException	N.P.m.s	Illegalstateexception
IndexOutOfBoundsException	N.P.m.s	Indexoutoundsexception
NullPointerException	N.P.m.s	Nullpointerexception
10.3	A.card.m.s	@card@
Lancement	N.C.m.s	lancement
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
throw	ET	throw
permet	V.P.3.s	permettre
de	P	de
lancer	VW	lancer
une	D.ind.f.s	un
exception	N.C.f.s	exception
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
recommandé	VK.m.s	recommander
de	P	de
ne	ADV.neg	ne
l'	CL.obj.3.m.s	le
appliquer	VW	appliquer
qu'	ADV.neg	qu'
à	P	à
des	D.ind.f.p	du
exceptions	N.C.f.p	exception
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
throw	ET	throw
new	ET	new
ClassOfException(	ET	classofexceptionç
"	PONCT.W	"
diagnostic	ET	diagnostic
message	N.C.m.s	message
to	ET	to
print	A.qual.m.s	print
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
Exemple	N.C.m.s	exemple
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
key	ET	key
==	ET	çù
null	A.qual.m.s	nul
)	PONCT.W	)
{	ET	{
throw	ET	throw
new	ET	new
NullPointerException("null	ET	nullpointerexceptionlull
key	ET	key
found	ET	found
in	ET	in
method	ET	method
x	N.card.m.s	x
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
Exemple	N.C.m.s	exemple
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
key	ET	key
==	V.P.3.s	cevoir
0	N.card.m.s	@card@
)	PONCT.W	)
{	ET	{
throw	ET	throw
new	ET	new
IllegalArgumentException("empty	ET	illegalargumentexceptionpty
key	ET	key
received	ET	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
Exemple	N.C.m.s	exemple
(	PONCT.W	(
dans	P	dans
un	D.ind.m.s	un
constructeur	N.C.m.s	constructeur
)	PONCT.W	)
:	PONCT.W	:
if	ET	if
(	PONCT.W	(
this.name.length()	N.C.m.s	<unknown>
==	P+D.def.m.s	çù
0	N.card.m.s	@card@
)	PONCT.W	)
{	ET	{
throw	ET	throw
new	ET	new
IllegalStateException(	ET	<unknown>
"	PONCT.W	"
name	ET	name
must	ET	must
be	A.qual.m.s	be
provided	ET	provided
-	PONCT.W	-
"	PONCT.W	"
+	ADV.-	al
"	PONCT.W	"
object	N.C.m.s	object
creation	N.C.f.s	creation
aborted	ET	aborted
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
Exemple	N.C.m.s	exemple
.	PONCT.S	.

L'	D.def.f.s	le
opération	N.C.f.s	opération
remove()	V.P.3.s	<unknown>
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
Iterator	N.P.m.s	Iterator
est	V.P.3.s	être
spécifiée	A.qual.f.s	spécifié
optionnelle	A.qual.f.s	optionnel
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
son	D.poss.f.s	son
implémentation	N.C.f.s	implémentation
pourrait	V.C.3.s	pouvoir
être	VW	être
dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
:	PONCT.W	:
public	A.qual.m.s	public
void	A.qual.m.s	void
remove()	N.C.m.s	removeçà
{	P+D.def.m.s	c
throw	N.C.m.s	throw
new	ET	new
UnsupportedOperationException()	N.P.m.s	Unsupportedoperationceptionçençon
;	PONCT.W	;
}	N.C.m.s	}
10.4	A.card.m.s	@card@
Capture	N.C.f.s	capture
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
La	D.def.f.s	le
capture	N.C.f.s	capture
d'	P	de
une	D.ind.f.s	un
exception	N.C.f.s	exception
n'	ADV.neg	ne
est	V.P.3.s	être
obligatoire	A.qual.f.s	obligatoire
que	ADV.neg	que
pour	P	pour
les	D.def.f.p	le
exceptions	N.C.f.p	exception
que	PRO.rel.f.p	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
veut	V.P.3.s	vouloir
contrôler	VW	contrôler
.	PONCT.S	.

Dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
des	P+D.def.f.p	du
exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
,	PONCT.W	,
le	D.def.m.s	le
compilateur	N.C.m.s	compilateur
renforce	V.P.3.s	renforcer
ses	D.poss.m.p	son
contrôles	N.C.m.p	contrôle
à	P	à
la	D.def.f.s	le
fois	N.C.f.s	foi
dans	P	dans
la	D.def.f.s	le
méthode	N.C.f.s	méthode
qui	PRO.rel.f.s	qui
lance	V.P.3.s	lancer
une	D.ind.f.s	un
telle	A.qual.f.s	tel
exception	N.C.f.s	exception
et	C.C	et
dans	P	dans
l'	D.def.m.s	le
appelant	N.C.m.s	appelant
de	P	de
cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
.	PONCT.S	.

10.41	D.card.m.p	@card@
Clause	A.qual.f.s	claux
throws	N.C.m.p	throw
Une	D.ind.f.s	un
clause	N.C.f.s	clause
throws	N.C.m.p	throw
est	V.P.3.s	être
une	D.ind.f.s	un
déclaration	N.C.f.s	déclaration
ajoutée	VK.f.s	ajouter
à	P	à
l'	D.def.f.s	le
en-tête	N.C.f.s	en-tête
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
susceptible	A.qual.f.s	susceptible
de	P	de
lever	VW	lever
une	D.ind.f.s	un
exception	N.C.f.s	exception
contrôlée	VK.f.s	contrôler
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
déclare	V.P.3.s	déclarer
les	D.def.f.p	le
exceptions	N.C.f.p	exception
contrôlées	VK.f.p	contrôler
à	P	à
prendre	VW	prendre
en	P	en
compte	N.C.m.s	compte
dans	P	dans
le	D.def.m.s	le
cadre	N.C.m.s	cadre
de	P	de
cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
.	PONCT.S	.

Ceci	PRO.dem.m.s	ceci
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
pour	P	pour
que	C.S	que
le	D.def.m.s	le
compilateur	N.C.m.s	compilateur
puisse	V.S.3.s	pouvoir
savoir	VW	savoir
quelles	D.int.f.p	quel
exceptions	N.C.f.p	exception
contrôler	VW	contrôler
.	PONCT.S	.

Par	P	par
convention	N.C.f.s	convention
,	PONCT.W	,
les	D.def.f.p	le
exceptions	N.C.f.p	exception
non	ADV.neg	non
contrôlées	VK.f.p	contrôler
ne	ADV.neg	ne
devraient	V.C.3.p	devoir
pas	ADV.neg	pas
être	VW	être
incluses	VK.f.p	inclure
dans	P	dans
une	D.ind.f.s	un
clause	N.C.f.s	clause
throws	A.qual.f.s	throw
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
throws	ET	throw
ExceptionClass1	N.P.f.s	<unknown>
,	PONCT.W	,
ExceptionClass2	N.P.f.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	ET	public
void	ET	void
saveToFile(String	N.C.m.s	savetofileçstring
filename	N.C.m.s	filename
)	PONCT.W	)
throws	ET	throw
IOException	N.P.m.s	Ioexception
{	N.P.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
10.42	D.card.f.p	@card@
Instruction	N.C.f.s	instruction
try	CL.obj.3.m.s	try
.	PONCT.S	.
.	PONCT.S	.
catch	N.C.m.s	catch
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
try	ET	try
.	PONCT.S	.
.	PONCT.S	.
catch	N.C.m.s	catch
permet	V.P.3.s	permettre
de	P	de
capturer	VW	capturer
une	D.ind.f.s	un
exception	N.C.f.s	exception
générée	VK.f.s	générer
par	P	par
l'	D.def.m.s	le
appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
.	PONCT.S	.

Quand	C.S	quand
une	D.ind.f.s	un
exception	N.C.f.s	exception
est	V.P.3.s	être
générée	VK.f.s	générer
,	PONCT.W	,
le	D.def.m.s	le
contrôle	N.C.m.s	contrôle
est	V.P.3.s	être
transféré	VK.m.s	transférer
du	P+D.def.m.s	du
code	N.C.m.s	code
qui	PRO.rel.m.s	qui
a	V.P.3.s	avoir
généré	VK.m.s	générer
l'	D.def.f.s	le
exception	N.C.f.s	exception
à	P	à
la	D.def.f.s	le
clause	N.C.f.s	clause
catch	N.C.m.s	catch
qui	PRO.rel.f.s	qui
a	V.P.3.s	avoir
capturé	VK.m.s	capturer
l'	D.def.f.s	le
exception	N.C.f.s	exception
.	PONCT.S	.

La	D.def.f.s	le
clause	N.C.f.s	clause
catch	ET	catch
doit	V.P.3.s	devoir
avoir	VW	avoir
un	D.ind.m.s	un
seul	A.qual.m.s	seul
paramètre	N.C.m.s	paramètre
formel	A.qual.m.s	formel
.	PONCT.S	.

Le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
ce	D.dem.m.s	ce
paramètre	N.C.m.s	paramètre
doit	V.P.3.s	devoir
être	VW	être
la	D.def.f.s	le
classe	N.C.f.s	classe
Throwable	A.qual.f.s	throwable
ou	C.C	ou
une	PRO.ind.f.s	un
de	P	de
ses	D.poss.m.p	son
sous-classes	N.C.m.p	sous-classe
.	PONCT.S	.

Une	D.ind.f.s	un
instruction	N.C.f.s	instruction
try	PRO.rel.f.s	try
peut	V.P.3.s	pouvoir
contenir	VW	contenir
plusieurs	D.ind.m.p	plusieurs
blocs	N.C.m.p	bloc
catch	N.C.m.p	catch
.	PONCT.S	.

Dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
,	PONCT.W	,
l'	D.def.f.s	le
exception	N.C.f.s	exception
la	D.def.f.s	le
plus	ADV.-	plus
générale	A.qual.f.s	général
doit	V.P.3.s	devoir
être	VW	être
traitée	VK.f.s	traiter
en	P	en
dernier	A.qual.m.s	dernier
.	PONCT.S	.

Syntaxe	N.C.m.s	syntaxe
:	PONCT.W	:
try	ET	try
{	N.C.m.s	{
//	PONCT.W	@card@
protect	N.C.m.s	protect
one	ET	one
or	ET	or
more	ET	more
statement	ADV.-	statement
here	A.qual.f.s	here
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
ExceptionClass	N.P.m.s	Exceptionclass
e	P	e
)	PONCT.W	)
{	ET	{
//	PONCT.W	@card@
report	ET	report
and	ET	and
recover	VW	recover
from	ET	from
the	ET	the
exception	N.C.f.s	exception
here	A.qual.f.s	here
}	P	à
finally	N.P.m.s	Finally
{	P	à
//	PONCT.W	@card@
in	CL.suj.3.m.s	in
fine	V.P.3.s	finer
,	PONCT.W	,
in	ET	in
any	ET	any
case	N.C.f.s	case
,	PONCT.W	,
always	N.C.m.p	alway
execute	V.P.3.s	executer
these	N.C.f.s	these
statements	N.C.m.p	statement
}	P	à
Le	D.def.m.s	le
bloc	N.C.m.s	bloc
finally	A.qual.m.s	finally
est	V.P.3.s	être
optionnel	A.qual.m.s	optionnel
,	PONCT.W	,
mais	C.C	mais
il	CL.suj.3.m.s	il
permet	V.P.3.s	permettre
souvent	ADV.-	souvent
d'	P	de
éviter	VW	éviter
la	D.def.f.s	le
duplication	N.C.f.s	duplication
de	P	de
code	N.C.m.s	code
.	PONCT.S	.

Exemple	N.C.m.s	exemple
(	PONCT.W	(
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	A.card.f.s	@card@
)	PONCT.W	)
:	PONCT.W	:
//	PONCT.W	@card@
Read	N.P.m.s	Read
a	V.P.3.s	avoir
double	A.qual.m.s	double
from	ET	from
the	ET	the
standard	ET	standard
input	ET	input
stream	A.qual.m.s	stream
Scanner	N.P.m.s	Scanner
input	A.qual.m.s	input
=	P	à
new	ET	new
Scanner(System.in)	N.P.m.s	Scannerästem
;	PONCT.W	;
double	A.qual.m.s	double
x	N.C.m.p	x
;	PONCT.W	;
try	ET	try
{	D.card.m.s	{
x	N.C.m.p	x
=	PONCT.W	=
input.nextDouble()	N.C.m.s	<unknown>
;	PONCT.W	;
}	P	à
catch(InputMismatchException	N.C.f.s	catchëinputmismatchexception
e	PONCT.W	e
)	PONCT.W	)
{	P	à
System.err.println("Error	N.P.m.s	<unknown>
-	PONCT.W	-
Double	N.P.m.s	Double
waited	ET	waited
-	PONCT.W	-
"	PONCT.W	"
+	P	p
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
input.close()	N.C.m.s	<unknown>
;	PONCT.W	;
Exemple	N.C.m.s	exemple
(	PONCT.W	(
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	A.card.f.s	@card@
)	PONCT.W	)
:	PONCT.W	:
//	PONCT.W	@card@
Create	N.P.f.s	Create
a	V.P.3.s	avoir
copy	ET	copy
of	ET	of
a	V.P.3.s	avoir
text	VK.m.s	<unknown>
file	N.C.f.s	file
Scanner	N.P.m.s	Scanner
in	CL.suj.3.m.s	in
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
PrintWriter	N.P.x.s	Printwriter
out	PRO.ind.m.s	out
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
try	ET	try
{	P	à
in	CL.suj.3.m.s	in
=	PONCT.W	=
new	ET	new
Scanner(new	N.P.m.s	Scanneränew
File(inputFileName))	N.P.m.s	Fileüinputenameë
;	PONCT.W	;
out	ADV.-	out
=	ET	=
new	ET	new
PrintWriter(outputFileName)	N.P.m.s	Printwriterçoutfumenamen
;	PONCT.W	;
while	N.C.m.s	while
(in.hasNext())	N.C.m.s	cin
{	N.C.m.s	{
out.println(in.nextLine())	N.C.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.s	}
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
e	PONCT.W	e
)	PONCT.W	)
{	N.C.m.s	{
System.err.println("Error	N.P.m.s	<unknown>
in	D.ind.m.s	in
reading/writing	N.C.m.s	readingéwriting
file	V.P.3.s	filer
-	PONCT.W	-
"	PONCT.W	"
+	ADV.-	al
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
finally	ET	finally
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
in	I	in
!	PONCT.S	!

=	PONCT.W	=
null	A.qual.m.s	nul
)	PONCT.W	)
in.close())	A.qual.m.s	<unknown>
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
out	I	out
!	PONCT.S	!

=	PONCT.W	=
null	A.qual.m.s	nul
)	PONCT.W	)
out.close()	N.C.m.s	outcoloceç
;	PONCT.W	;
}	D.card.m.s	}
Exemple	N.C.m.s	exemple
(	PONCT.W	(
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
5.0	A.card.f.s	@card@
)	PONCT.W	)
:	PONCT.W	:
//	ET	@card@
Read	ET	read
and	ET	and
print	V.J.3.s	prendre
a	V.P.3.s	avoir
text	VK.m.s	<unknown>
file	ET	file
of	ET	of
doubles	A.qual.m.p	double
Scanner	N.P.m.s	Scanner
in	ET	in
=	V.P.3.s	être
null	A.qual.m.s	nul
;	PONCT.W	;
try	ET	try
{	P	à
in	N.C.m.s	in
=	PONCT.W	=
new	ET	new
Scanner(new	N.P.m.s	Scanneränew
File(inputFileName))	N.P.m.s	Fileüinputenameë
;	PONCT.W	;
while(in.hasNext())	N.C.m.s	whileçinaastëë
{	P+D.def.m.s	c
System.out.println(Double.parseDouble(in.next()))	N.P.m.s	<unknown>
;	PONCT.W	;
}	ET	}
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
FileNotFoundException	N.P.m.s	Filenotfoundexception
e	PONCT.W	e
)	PONCT.W	)
{	ET	{
System.err.println("Unable	N.P.m.s	<unknown>
to	ET	to
open	ET	open
the	ET	the
input	N.C.m.s	input
file	N.C.f.s	file
.	PONCT.W	.
"	PONCT.S	"

+	P	p
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
NumberFormatException	N.C.f.s	numberformatexception
e	PONCT.W	e
)	PONCT.W	)
{	P	à
System.err.println("A	N.P.m.s	<unknown>
token	ET	token
is	CL.suj.3.m.p	is
not	V.P.3.p	notre
a	V.P.3.s	avoir
double	A.qual.m.s	double
.	PONCT.W	.
"	PONCT.S	"

+	P	p
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
e	PONCT.W	e
)	PONCT.W	)
'	PONCT.W	'
System.err.println("Problem	N.P.m.s	<unknown>
in	CL.suj.3.m.s	in
reading	V.P.3.s	<unknown>
the	ET	the
file	N.C.f.s	file
"	PONCT.W	"
+	P	p
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
finally	ET	finally
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
in	I	in
!	PONCT.S	!

=	PONCT.W	=
null	A.qual.m.s	nul
)	PONCT.W	)
{	D.card.m.s	{
try	ET	try
{	P	à
in.close()	N.C.m.s	<unknown>
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
e	PONCT.W	e
)	PONCT.W	)
{	N.C.m.s	{
System.err.println("Error	N.P.m.s	<unknown>
in	CL.suj.3.m.s	in
closing	N.C.m.s	closing
the	ET	the
file	N.C.f.s	file
.	PONCT.W	.
"	PONCT.S	"

+	P	p
e	PONCT.W	e
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
10.5	PRO.card.m.p	@card@
Définir	VW	définir
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
d'	P	de
exception	N.C.f.s	exception
Une	PRO.ind.f.s	un
des	P+D.def.f.p	du
principales	A.qual.f.p	principal
raisons	N.C.f.p	raison
conduisant	VG	conduire
à	P	à
la	D.def.f.s	le
définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
d'	P	de
exception	N.C.f.s	exception
est	V.P.3.s	être
le	D.def.m.s	le
besoin	N.C.m.s	besoin
d'	P	de
inclure	VW	inclure
des	D.ind.f.p	du
informations	N.C.f.p	information
complémentaires	A.qual.f.p	complémentaire
dans	P	dans
l'	D.def.m.s	le
objet	N.C.m.s	objet
exception	N.C.f.s	exception
afin	V.P.3.s	<unknown>
de	P	de
permettre	VW	permettre
le	D.def.m.s	le
diagnostic	N.C.m.s	diagnostic
et	C.C	et
la	D.def.f.s	le
récupération	N.C.f.s	récupération
de	P	de
l'	D.def.f.s	le
erreur	N.C.f.s	erreur
.	PONCT.S	.

Toute	D.ind.f.s	tout
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
d'	P	de
exception	N.C.f.s	exception
sera	V.F.3.s	être
définie	VK.f.s	définir
comme	P	comme
sous-classe	N.C.m.s	sous-classe
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
d'	P	de
exception	N.C.f.s	exception
existante	A.qual.f.s	existant
de	P	de
la	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
Exception	N.P.f.s	Exception
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	ET	public
class	ET	class
WrongValueException	ET	wrongvalueexception
extends	ET	extend
Exception	N.C.f.s	exception
{	P	à
private	ET	privat
String	N.P.m.s	String
key	ET	key
;	PONCT.W	;
public	ET	public
WrongValueException(String	ET	wrongvalueexceptionçring
key	ET	key
)	PONCT.W	)
{	ET	{
this.key	ET	thistkey
=	PONCT.W	=
key	ET	key
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
String	N.P.m.s	String
getKey()	N.C.m.s	getkeyçë
{	P	à
return	N.C.m.s	return
key	A.qual.m.s	key
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
String	N.P.m.s	String
toString()	N.C.m.s	tostringçë
{	P	à
return	N.C.m.s	return
"	PONCT.W	"
Wrong	N.P.m.s	Wrong
value	N.C.f.s	value
"	PONCT.W	"
+	P	p
key	ET	key
+	P	p
"	PONCT.W	"
found	N.C.m.s	found
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
11	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
1	D.card.m.s	@card@
-	PONCT.W	-
PROGRAMMATION	N.C.f.s	programmation
GRAPHIQUE	N.C.m.s	graphique
Références	N.C.f.p	référence
:	PONCT.W	:
Bases	N.P.m.s	Bases
de	P	de
Swing	N.P.m.s	Swing
et	C.C	et
exemples	N.C.m.p	exemple
de	P	de
programmation	N.C.f.s	programmation
d'	P	de
interfaces	N.C.f.p	interface
graphiques	A.qual.f.p	graphique
:	PONCT.W	:
java.sun.com/docs/books/tutorial/uiswing/mini/index.html	ET	<unknown>
Gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
événements	N.C.m.p	événement
et	C.C	et
exemples	N.C.m.p	exemple
de	P	de
programmation	N.C.f.s	programmation
:	PONCT.W	:
java.sun.com/docs/books/tutorial/uiswing/events/api.html	ET	<unknown>
Swing	N.P.m.s	Swing
Architecture	ET	architecture
Overview	N.P.m.s	Overview
java.sun.com/products/jfc/isc/articles/architecture	V.P.3.s	<unknown>
Ce	D.dem.m.s	ce
chapitre	N.C.m.s	chapitre
introduit	V.P.3.s	introduire
à	P	à
la	D.def.f.s	le
programmation	N.C.f.s	programmation
graphique	A.qual.f.s	graphique
avec	P	avec
la	D.def.f.s	le
bibliothèque	N.C.f.s	bibliothèque
javax.swing	N.C.m.s	javaxswing
11.1	A.card.f.s	@card@
Swing	N.P.m.s	Swing
Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
deux	D.card.m.p	deux
grands	A.qual.m.p	grand
paquetages	N.C.m.p	paquetage
d'	P	de
utilitaires	N.C.m.p	utilitaire
Java	N.P.m.s	Java
pour	P	pour
réaliser	VW	réaliser
des	D.ind.f.p	du
interfaces	N.C.f.p	interface
graphiques	A.qual.f.p	graphique
:	PONCT.W	:
-	PONCT.W	-
AWT	N.P.m.s	Awt
(	PONCT.W	(
Abstract	N.P.m.s	Abstract
Window	N.P.m.s	Window
Toolkit	N.P.m.s	Toolkit
)	PONCT.W	)
:	PONCT.W	:
le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
primitif	A.qual.m.s	primitif
.	PONCT.S	.

Les	D.def.m.p	le
composants	N.C.m.p	composant
de	P	de
ce	D.dem.m.s	ce
paquetage	N.C.m.s	paquetage
s'	CL.refl.3.m.p	se
importent	V.P.3.p	importer
par	P	par
:	PONCT.W	:
import	N.C.m.s	import
java.awt.*	ET	javalawt
;	PONCT.W	;
-	PONCT.W	-
Swing	N.P.m.s	Swing
:	PONCT.W	:
le	D.def.m.s	le
plus	ADV.-	plus
récent	A.qual.m.s	récent
et	C.C	et
le	D.def.m.s	le
plus	ADV.-	plus
évolué	A.qual.m.s	évolué
,	PONCT.W	,
construit	VK.m.s	construire
sur	P	sur
AWT	N.P.m.s	Awt
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
paquetage	N.C.m.s	paquetage
recommandé	VK.m.s	recommander
.	PONCT.S	.

Les	D.def.m.p	le
composants	N.C.m.p	composant
de	P	de
ce	D.dem.m.s	ce
paquetage	N.C.m.s	paquetage
s'	CL.refl.3.m.p	se
importent	V.P.3.p	importer
par	P	par
:	PONCT.W	:
import	N.C.m.s	import
javax.swing.*	ET	javaxswing
;	PONCT.W	;
Les	D.def.m.p	le
deux	A.card.m.p	deux
paquetages	N.C.m.p	paquetage
Swing	N.P.m.s	Swing
les	D.def.m.p	le
plus	ADV.-	plus
communément	ADV.-	communément
utilisés	VK.m.p	utiliser
sont	V.P.3.p	être
:	PONCT.W	:
javax.swing	ET	javaxswing
javax.swing.event	ADV.-	javaxswint
Les	D.def.f.p	le
classes	N.C.f.p	classe
de	P	de
javax.swing	N.C.m.s	javaxswing
les	D.def.f.p	le
plus	ADV.-	plus
courantes	A.qual.f.p	courant
sont	V.P.3.p	être
:	PONCT.W	:
JFrame	N.P.m.s	Jframe
JPanel	N.P.m.s	Jpanel
JLabel	N.P.m.s	Jlabel
JTextField	N.P.m.s	Jtextfield
JButton	N.P.m.s	Jbutton
JOPtionPane	N.P.m.s	Joptionpane
Exemple	N.C.m.s	exemple
de	P	de
saisie	N.C.f.s	saisie
/	PONCT.W	@card@
affichage	N.C.m.s	affichage
dans	P	dans
une	D.ind.f.s	un
boîte	N.C.f.s	boîte
de	P	de
dialogue	N.C.m.s	dialogue
:	PONCT.W	:
//	PONCT.W	@card@
import	N.C.m.s	import
javax.swing.JOptionPane	N.C.f.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
use	ET	use
method	ET	method
showInputDialog	ET	<unknown>
to	ET	to
prompt	V.P.3.s	prompter
for	ET	for
some	ET	some
input	N.C.m.s	input
String	N.P.m.s	String
inputValue	A.qual.f.s	<unknown>
=	P	à
JOptionPane.showInputDialog("Value	N.P.x.s	<unknown>
?	PONCT.S	?

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
use	ET	use
method	ET	method
showMessageDialog	ET	<unknown>
to	ET	to
display	ET	display
a	V.P.3.s	avoir
message	N.C.m.s	message
JOptionPane.showMessageDialog(null,"A	N.P.m.s	<unknown>
message	N.C.m.s	message
...	PONCT.W	<unknown>
"	PONCT.W	"
)	PONCT.W	)
11.2	D.card.m.p	@card@
Conteneurs	N.C.m.p	conteneur
et	C.C	et
composants	N.C.m.p	composant
Tout	D.ind.m.s	tout
objet	N.C.m.s	objet
graphique	A.qual.m.s	graphique
est	V.P.3.s	être
composé	VK.m.s	composer
de	P	de
différents	A.qual.m.p	différent
objets	N.C.m.p	objet
:	PONCT.W	:
des	D.ind.m.p	du
conteneurs	N.C.m.p	conteneur
(	PONCT.W	(
containers	N.C.m.p	container
)	PONCT.W	)
et	C.C	et
des	D.ind.m.p	du
composants	N.C.m.p	composant
atomiques	A.qual.m.p	atomique
,	PONCT.W	,
ces	D.dem.m.p	ce
différents	A.qual.m.p	différent
constituants	N.C.m.p	constituant
étant	VG	être
organisés	VK.m.p	organiser
en	P	en
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
inclusion	N.C.f.s	inclusion
.	PONCT.S	.

Principales	A.qual.f.p	principal
catégories	N.C.f.p	catégorie
de	P	de
conteneurs	N.C.m.p	conteneur
et	C.C	et
composants	N.C.m.p	composant
:	PONCT.W	:
+	P	p
les	D.def.m.p	le
conteneurs	N.C.m.p	conteneur
de	P	de
plus	ADV.-	plus
haut	A.qual.m.s	haut
niveau	N.C.m.s	niveau
Pour	P	pour
qu'	C.S	que
un	D.ind.m.s	un
objet	N.C.m.s	objet
graphique	A.qual.m.s	graphique
puisse	V.S.3.s	pouvoir
être	VW	être
affiché	VK.m.s	afficher
à	P	à
l'	D.def.m.s	le
écran	N.C.m.s	écran
,	PONCT.W	,
la	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
de	P	de
ses	D.poss.m.p	son
constituants	N.C.m.p	constituant
doit	V.P.3.s	devoir
nécessairement	ADV.-	nécessairement
avoir	VW	avoir
pour	P	pour
racine	N.C.f.s	racine
l'	D.def.m.s	le
un	PRO.ind.m.s	un
des	P+D.def.m.p	du
trois	A.card.m.p	trois
conteneurs	N.C.m.p	conteneur
suivants	A.qual.m.p	suivant
:	PONCT.W	:
>	P	à
Frame	N.P.m.s	Frame
(	PONCT.W	(
classe	N.C.f.s	classe
JFrame	N.P.m.s	Jframe
)	PONCT.W	)
:	PONCT.W	:
conteneur	N.C.m.s	conteneur
le	D.def.m.s	le
plus	ADV.-	plus
général	A.qual.m.s	général
,	PONCT.W	,
il	CL.suj.3.m.s	il
fournit	V.P.3.s	fournir
la	D.def.f.s	le
fenêtre	N.C.f.s	fenêtre
principale	A.qual.f.s	principal
dans	P	dans
laquelle	PRO.rel.f.s	lequel
les	D.def.m.p	le
autres	A.ind.m.p	autre
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
pourront	V.F.3.p	pouvoir
se	CL.refl.3.m.p	se
dessiner	VW	dessiner
.	PONCT.S	.

>	P	à
Dialog	N.P.m.s	Dialog
(	PONCT.W	(
classe	N.C.f.s	classe
JDialog	N.P.m.s	Jdialog
)	PONCT.W	)
:	PONCT.W	:
plus	ADV.-	plus
limité	VK.m.s	limiter
qu'	C.S	que
un	D.ind.m.s	un
Frame	N.C.m.s	frame
,	PONCT.W	,
il	CL.suj.3.m.s	il
fournit	V.P.3.s	fournir
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
de	P	de
dialogue	N.C.m.s	dialogue
;	PONCT.W	;
la	D.def.f.s	le
classe	N.C.f.s	classe
J0ptionPane	N.P.f.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
des	D.ind.f.p	du
fenêtres	N.C.f.p	fenêtre
de	P	de
dialogue	N.C.m.s	dialogue
simples	A.qual.f.p	simple
et	C.C	et
standard	A.qual.m.s	standard
;	PONCT.W	;
la	D.def.f.s	le
classe	N.C.f.s	classe
JDialog	N.P.m.s	Jdialog
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
des	D.ind.f.p	du
fenêtres	N.C.f.p	fenêtre
de	P	de
dialogue	N.C.m.s	dialogue
personnalisées	VK.f.p	personnaliser
.	PONCT.S	.

>	P	à
Applet	N.P.m.s	Applet
(	PONCT.W	(
classe	N.C.f.s	classe
JApplet	N.P.m.s	Japplet
)	PONCT.W	)
:	PONCT.W	:
spécialisé	VK.m.s	spécialiser
pour	P	pour
des	D.ind.f.p	du
interfaces	N.C.f.p	interface
web	N.C.m.s	web
,	PONCT.W	,
il	CL.suj.3.m.s	il
fournit	V.P.3.s	fournir
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
qui	PRO.rel.f.s	qui
sera	V.F.3.s	être
affichée	VK.f.s	afficher
par	P	par
un	D.ind.m.s	un
navigateur	N.C.m.s	navigateur
web	A.qual.m.s	web
.	PONCT.S	.

+	P	p
les	D.def.m.p	le
conteneurs	N.C.m.p	conteneur
intermédiaires	A.qual.m.p	intermédiaire
,	PONCT.W	,
notamment	ADV.-	notamment
:	PONCT.W	:
>	P	à
Panel	N.P.m.s	Panel
(	PONCT.W	(
classe	N.C.f.s	classe
JPanel	N.P.m.s	Jpanel
)	PONCT.W	)
:	PONCT.W	:
simplifie	V.P.3.s	simplifier
le	D.def.m.s	le
positionnement	N.C.m.s	positionnement
des	P+D.def.m.p	du
objets	N.C.m.p	objet
graphiques	A.qual.m.p	graphique
atomiques	A.qual.m.p	atomique
.	PONCT.S	.

Tout	D.ind.m.s	tout
conteneur	N.C.m.s	conteneur
de	P	de
haut	A.qual.m.s	haut
niveau	N.C.m.s	niveau
contient	V.P.3.s	contenir
un	D.ind.m.s	un
conteneur	N.C.m.s	conteneur
intermédiaire	A.qual.m.s	intermédiaire
spécial	A.qual.m.s	spécial
appelé	VK.m.s	appeler
ContentPane	N.P.f.s	Contentpane
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
conteneur	N.C.m.s	conteneur
intermédiaire	A.qual.m.s	intermédiaire
principal	A.qual.m.s	principal
.	PONCT.S	.

Il	CL.suj.3.m.s	il
contient	V.P.3.s	contenir
typiquement	ADV.-	typiquement
un	D.ind.m.s	un
ou	C.C	ou
plusieurs	D.ind.m.p	plusieurs
panels	N.C.m.p	panel
.	PONCT.S	.

+	P	p
les	D.def.m.p	le
composants	N.C.m.p	composant
atomiques	A.qual.m.p	atomique
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
>	N.C.m.s	>
Button	N.P.m.s	Button
(	PONCT.W	(
classe	N.C.f.s	classe
JButton	N.P.m.s	Jbutton
)	PONCT.W	)
>	N.P.m.s	>
Label	N.P.m.s	Label
(	PONCT.W	(
classe	N.C.f.s	classe
JLabel	N.P.m.s	Jlabel
)	PONCT.W	)
>	N.P.m.s	>
Text	N.P.m.s	Text
field	ET	field
(	PONCT.W	(
classe	N.C.f.s	classe
JTextField	N.P.m.s	Jtextfield
)	PONCT.W	)
Sauf	P	sauf
pour	P	pour
les	D.def.m.p	le
conteneurs	N.C.m.p	conteneur
de	P	de
plus	ADV.-	plus
haut	A.qual.m.s	haut
niveau	N.C.m.s	niveau
,	PONCT.W	,
tous	A.ind.m.p	tous
les	D.def.m.p	le
composants	N.C.m.p	composant
(	PONCT.W	(
conteneur	N.C.m.s	conteneur
intermédiaire	A.qual.m.s	intermédiaire
ou	C.C	ou
composant	N.C.m.s	composant
atomique	A.qual.m.s	atomique
)	PONCT.W	)
qui	PRO.rel.m.p	qui
commencent	V.P.3.p	commencer
par	P	par
J	N.P.m.s	J
héritent	V.P.3.p	hériter
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
JComponent	N.P.m.s	Jcomponent
.	PONCT.S	.

Pour	P	pour
ajouter	VW	ajouter
un	D.ind.m.s	un
objet	N.C.m.s	objet
à	P	à
un	D.ind.m.s	un
conteneur	N.C.m.s	conteneur
,	PONCT.W	,
on	CL.suj.3.m.s	on
utilise	V.P.3.s	utiliser
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
add	A.qual.f.s	add
.	PONCT.S	.

Cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
prend	V.P.3.s	prendre
en	P	en
général	N.C.m.s	général
un	D.ind.m.s	un
deuxième	A.ord.m.s	deuxième
argument	N.C.m.s	argument
qui	PRO.rel.m.s	qui
spécifie	V.P.3.s	spécifier
la	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	PONCT.W	@card@
import	N.C.m.s	import
javax.swing.*	ET	javaxswing
;	PONCT.W	;
frame	N.C.f.s	frame
=	ET	=
new	ET	new
JFrame(	N.P.m.s	Jframeë
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.
)	PONCT.W	)
;	PONCT.W	;
pane	N.C.f.s	pane
=	PONCT.W	=
new	ET	new
JPanel()	N.P.m.s	Jpanelçë
;	PONCT.W	;
button	N.C.m.s	button
=	PONCT.W	=
new	ET	new
JButton(	N.P.m.s	Jbuttonç
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.
)	PONCT.W	)
;	PONCT.W	;
label	N.C.m.s	label
=	ET	=
new	ET	new
JLabel(	N.P.m.s	<unknown>
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.
)	PONCT.W	)
;	PONCT.W	;
pane.add(button)	N.C.m.s	paneaddçbuttonç
;	PONCT.W	;
pane.add(1abel)	N.C.m.s	<unknown>
;	PONCT.W	;
frame.getContentPane().add(pane	N.C.m.s	<unknown>
,	PONCT.W	,
BorderLayout.CENTER	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
frame.pack()	N.C.m.s	framepackhë
;	PONCT.W	;
//	PONCT.W	@card@
sizes	N.C.m.p	size
at	ET	at
or	ET	or
above	ET	above
preferred	N.C.m.s	preferred
sizes	N.C.m.s	size
frame.setVisible(true)	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
l'	D.def.m.s	le
objet	N.C.m.s	objet
frame	V.P.3.s	framer
ainsi	ADV.-	ainsi
créé	VK.m.s	créer
a	V.P.3.s	avoir
pour	P	pour
hiérarchie	N.C.f.s	hiérarchie
:	PONCT.W	:
JFrame	N.P.m.s	Jframe
ContentPane	N.P.m.s	Contentpane
JPanel	N.P.m.s	Jpanel
JButton	N.P.m.s	Jbutton
JLabel	N.P.m.s	Jlabel
Exemple	N.P.m.s	Exemple
:	PONCT.W	:
import	ET	import
javax.swing.JApplet	N.C.m.s	javax
;	PONCT.W	;
public	ET	public
class	ET	class
AppletExample	ET	appletexample
extends	ET	extend
JApplet	N.P.m.s	Japplet
{	ET	{
public	N.C.m.s	public
void	ET	void
init	A.qual.m.s	init
)	PONCT.W	)
{	P+D.def.m.s	c
JPanel	N.P.m.s	Jpanel
pane	V.P.3.s	paner
=	PONCT.W	=
new	ET	new
JPanel()	N.P.m.s	Jpanelçë
;	PONCT.W	;
pane.add(new	ET	paneadddnew
JLabel("Hello	N.P.m.s	Jlabelçhello
,	PONCT.W	,
World	N.P.m.s	World
!	PONCT.S	!

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
this.setContentPane(pane)	N.C.m.s	<unknown>
;	PONCT.W	;
11.3	D.card.m.s	@card@
Gestion	N.C.f.s	gestion
de	P	de
la	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
La	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
(	PONCT.W	(
layout	N.C.m.s	layout
)	PONCT.W	)
consiste	V.P.3.s	consister
à	P	à
fixer	VW	fixer
la	D.def.f.s	le
taille	N.C.f.s	taille
et	C.C	et
la	D.def.f.s	le
position	N.C.f.s	position
des	P+D.def.m.p	du
composants	N.C.m.p	composant
.	PONCT.S	.

Tout	D.ind.m.s	tout
conteneur	N.C.m.s	conteneur
possède	V.P.3.s	posséder
un	D.ind.m.s	un
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
par	P	par
défaut	N.C.m.s	défaut
.	PONCT.S	.

S'	C.S	si
il	CL.suj.3.m.s	il
ne	ADV.neg	ne
convient	V.P.3.p	convier
pas	ADV.neg	pas
,	PONCT.W	,
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
le	CL.obj.3.m.s	le
remplacer	VW	remplacer
.	PONCT.S	.

Les	D.def.m.p	le
composants	N.C.m.p	composant
peuvent	V.P.3.p	pouvoir
solliciter	VW	solliciter
une	D.ind.f.s	un
taille	N.C.f.s	taille
et	C.C	et
un	D.ind.m.s	un
alignement	N.C.m.s	alignement
donnés	VK.m.p	donner
,	PONCT.W	,
mais	C.C	mais
,	PONCT.W	,
in	CL.suj.3.m.s	in
fine	V.P.3.s	finer
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
gestionnaires	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
du	P+D.def.m.s	du
conteneur	N.C.m.s	conteneur
qui	PRO.rel.m.s	qui
conserve	V.P.3.s	conserver
la	D.def.f.s	le
décision	N.C.f.s	décision
finale	A.qual.f.s	final
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
6	D.card.m.p	@card@
gestionnaires	N.C.m.p	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
:	PONCT.W	:
+	ADV.-	al
BorderLayout	N.P.m.s	Borderlayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
par	P	par
défaut	N.C.m.s	défaut
pour	P	pour
tout	D.ind.m.s	tout
ContentPane	N.C.m.s	contentpane
;	PONCT.W	;
définit	V.P.3.s	définir
5	D.card.f.p	@card@
zones	N.C.f.p	zone
de	P	de
placement	N.C.m.s	placement
:	PONCT.W	:
NORTH	N.P.x.s	North
,	PONCT.W	,
SOUTH	N.P.f.s	South
,	PONCT.W	,
EAST	N.P.m.s	East
,	PONCT.W	,
WEST	N.P.m.s	West
,	PONCT.W	,
CENTER	N.P.m.s	Center
+	P	p
FlowLayout	N.P.m.s	Flowlayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
par	P	par
défaut	N.C.m.s	défaut
pour	P	pour
tout	A.ind.m.s	tout
JPanel	N.P.m.s	Jpanel
;	PONCT.W	;
positionne	V.P.3.s	positionner
simplement	ADV.-	simplement
les	D.def.m.p	le
composants	N.C.m.p	composant
de	P	de
gauche	N.C.f.s	gauche
à	P	à
droite	N.C.f.s	droite
,	PONCT.W	,
passant	VG	passer
à	P	à
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
ligne	N.C.f.s	ligne
si	ADV.-	si
nécessaire	A.qual.f.s	nécessaire
+	P	p
BoxLayout	N.P.m.s	Boxlayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
très	ADV.-	très
flexible	A.qual.f.s	flexible
;	PONCT.W	;
positionne	V.P.3.s	positionner
les	D.def.m.p	le
composants	N.C.m.p	composant
sur	P	sur
une	D.ind.f.s	un
seule	A.ind.f.s	seul
ligne	N.C.f.s	ligne
ou	C.C	ou
colonne	V.P.3.s	colonner
en	P	en
respectant	VG	respecter
les	D.def.f.p	le
attentes	N.C.f.p	attente
de	P	de
composants	N.C.m.p	composant
en	P	en
matière	N.C.f.s	matière
de	P	de
taille	N.C.f.s	taille
maximale	A.qual.f.s	maximal
et	C.C	et
d'	P	de
alignement	N.C.m.s	alignement
+	P	p
GridLayout	N.P.m.s	Gridlayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
très	ADV.-	très
simple	A.qual.f.s	simple
;	PONCT.W	;
crée	V.P.3.s	créer
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
composants	N.C.m.p	composant
de	P	de
même	A.ind.f.s	même
taille	N.C.f.s	taille
et	C.C	et
les	CL.obj.3.m.p	le
affiche	V.P.3.s	afficher
dans	P	dans
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
lignes	N.C.f.p	ligne
et	C.C	et
de	P	de
colonnes	N.C.f.p	colonne
spécifié	A.qual.m.s	spécifié
+	P	p
GridBagLayout	N.P.m.s	Gridbaglayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
le	D.def.m.s	le
plus	ADV.-	plus
sophistiqué	A.qual.m.s	sophistiqué
et	C.C	et
le	D.def.m.s	le
plus	ADV.-	plus
flexible	A.qual.m.s	flexible
;	PONCT.W	;
aligne	V.P.3.s	aligner
les	D.def.m.p	le
composants	N.C.m.p	composant
en	P	en
les	CL.obj.3.m.p	le
plaçant	VG	placer
dans	P	dans
une	D.ind.f.s	un
grille	N.C.f.s	grille
de	P	de
cellules	N.C.f.p	cellule
,	PONCT.W	,
permettant	VG	permettre
à	P	à
certains	PRO.ind.m.p	certain
de	P	de
s'	CL.refl.3.m.p	se
étendre	VW	étendre
sur	P	sur
plusieurs	D.ind.f.p	plusieurs
cellules	N.C.f.p	cellule
(	PONCT.W	(
les	D.def.f.p	le
largeurs	N.C.f.p	largeur
des	P+D.def.f.p	du
rangées	N.C.f.p	rangée
et	C.C	et
les	D.def.m.p	le
hauteurs	N.C.m.p	hauteur
des	P+D.def.f.p	du
colonnes	N.C.f.p	colonne
,	PONCT.W	,
respectivement	ADV.-	respectivement
,	PONCT.W	,
peuvent	V.P.3.p	pouvoir
être	VW	être
différentes	A.qual.f.p	différent
)	PONCT.W	)
+	P	p
CardLayout	N.P.m.s	Cardlayout
:	PONCT.W	:
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
pour	P	pour
usage	N.C.m.s	usage
spécial	A.qual.m.s	spécial
;	PONCT.W	;
permet	V.P.3.s	permettre
d'	P	de
implémenter	VW	implémenter
une	D.ind.f.s	un
zone	N.C.f.s	zone
qui	PRO.rel.f.s	qui
contient	V.P.3.s	contenir
différents	D.ind.m.p	différent
composants	N.C.m.p	composant
à	P	à
différents	D.ind.m.p	différent
moments	N.C.m.p	moment
;	PONCT.W	;
utilisé	VK.m.s	utiliser
en	P	en
combinaison	N.C.f.s	combinaison
avec	P	avec
d'	D.ind.m.p	de
autres	A.ind.m.p	autre
gestionnaires	N.C.m.p	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
Exemple	N.C.m.s	exemple
de	P	de
changement	N.C.m.s	changement
du	P+D.def.m.s	du
gestionnaire	N.C.m.s	gestionnaire
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
par	P	par
défaut	N.C.m.s	défaut
:	PONCT.W	:
JPanel	N.P.m.s	Jpanel
pane	V.P.3.s	paner
=	P	à
new	ET	new
JPanel()	N.P.m.s	Jpanelçë
;	PONCT.W	;
pane.setLayout(new	N.C.m.s	panesetlayoutänew
BorderLayout())	N.P.m.s	Borderlayoutçë
;	PONCT.W	;
La	D.def.f.s	le
taille	N.C.f.s	taille
et	C.C	et
l'	D.def.m.s	le
alignement	N.C.m.s	alignement
d'	P	de
un	D.ind.m.s	un
composant	N.C.m.s	composant
peut	V.P.3.s	pouvoir
être	VW	être
spécifié	VK.m.s	spécifier
par	P	par
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
suivantes	A.qual.f.p	suivant
:	PONCT.W	:
setMinimumSize	N.C.m.s	<unknown>
,	PONCT.W	,
setPreferredSize	N.C.m.s	<unknown>
,	PONCT.W	,
setMaximumSize	N.C.m.s	setmaximumsize
,	PONCT.W	,
setAlignmentX	N.C.m.s	<unknown>
,	PONCT.W	,
setAlignmentY	N.C.m.s	<unknown>
.	PONCT.S	.

11.4	A.card.f.s	@card@
Gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
événements	N.C.m.p	événement
11.4.1	A.ord.f.s	@card@
Notion	N.C.f.s	notion
d'	P	de
événement	N.C.m.s	événement
A	P	à
chaque	D.ind.f.s	chaque
fois	N.C.f.s	foi
que	C.S	que
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
agit	V.P.3.s	agir
sur	P	sur
le	D.def.m.s	le
clavier	N.C.m.s	clavier
ou	C.C	ou
la	D.def.f.s	le
souris	N.C.f.s	souris
,	PONCT.W	,
un	D.ind.m.s	un
événement	N.C.m.s	événement
survient	V.P.3.s	survenir
,	PONCT.W	,
un	D.ind.m.s	un
objet	N.C.m.s	objet
événement	A.qual.m.s	événement
est	V.P.3.s	être
généré	VK.m.s	générer
.	PONCT.S	.

Un	D.ind.m.s	un
objet	N.C.m.s	objet
événement	A.qual.m.s	événement
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
contenant	VG	contenir
des	D.ind.f.p	du
informations	N.C.f.p	information
sur	P	sur
la	D.def.f.s	le
source	N.C.f.s	source
et	C.C	et
la	D.def.f.s	le
nature	N.C.f.s	nature
de	P	de
l'	D.def.m.s	le
événement	N.C.m.s	événement
survenu	VK.m.s	survenir
.	PONCT.S	.

Swing	N.P.m.s	Swing
offre	N.C.f.s	offre
des	D.ind.f.p	du
interfaces	N.C.f.p	interface
(	PONCT.W	(
au	P+D.def.m.s	au
sens	N.C.m.s	sens
Java	N.P.m.s	Java
)	PONCT.W	)
appelées	VK.f.p	appeler
"	PONCT.W	"
écouteurs	N.C.m.p	écouteur
d'	P	de
événements	N.C.m.p	événement
"	PONCT.W	"
(	PONCT.W	(
event	V.P.3.p	evoir
listeners	N.C.m.p	listener
)	PONCT.W	)
qui	PRO.rel.m.p	qui
permettent	V.P.3.p	permettre
de	P	de
capter	VW	capter
les	D.def.m.p	le
événements	N.C.m.p	événement
de	P	de
façon	N.C.f.s	façon
sélective	A.qual.f.s	sélectif
afin	N.C.f.s	afin
de	P	de
pouvoir	VW	pouvoir
les	CL.obj.3.m.p	le
traiter	VW	traiter
.	PONCT.S	.

Event	ET	event
Source	N.C.f.s	source
Event	ET	event
object	N.C.m.s	object
Event	ET	event
listener	VW	listener
Event	N.P.m.s	Event
listener	VW	listener
Event	N.P.m.s	Event
listener	VW	listener
Exemple	N.C.m.s	exemple
d'	P	de
événement	N.C.m.s	événement
Type	N.P.m.s	Type
de	P	de
Listener	N.P.m.s	Listener
Clic	N.P.m.s	Clic
d'	P	de
un	D.ind.m.s	un
bouton	N.C.m.s	bouton
graphique	A.qual.m.s	graphique
ou	C.C	ou
enfoncement	N.C.m.s	enfoncement
de	P	de
la	D.def.f.s	le
touche	N.C.f.s	touche
return	N.C.m.s	return
ActionListener	N.P.m.s	Actionlistener
lors	ADV.-	lors
d'	P	de
une	D.ind.f.s	un
saisie	N.C.f.s	saisie
dans	P	dans
un	D.ind.m.s	un
champ	N.C.m.s	champ
texte	A.qual.m.s	texte
Fermeture	N.C.f.s	fermeture
d'	P	de
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
WindowListener	N.P.m.s	Windowlistener
graphique	A.qual.f.s	graphique
(	PONCT.W	(
frame	N.C.f.s	frame
)	PONCT.W	)
Clic	N.P.m.s	Clic
de	P	de
la	D.def.f.s	le
souris	N.C.f.s	souris
lors	ADV.-	lors
du	P+D.def.m.s	du
passage	N.C.m.s	passage
du	P+D.def.m.s	du
curseur	N.C.m.s	curseur
sur	P	sur
un	D.ind.m.s	un
composant	N.C.m.s	composant
MouseListener	N.C.m.s	mouselistener
graphique	A.qual.m.s	graphique
Afin	N.P.m.s	Afin
de	P	de
faciliter	VW	faciliter
le	D.def.m.s	le
travail	N.C.m.s	travail
du	P+D.def.m.s	du
programmeur	N.C.m.s	programmeur
,	PONCT.W	,
Swing	N.P.m.s	Swing
associe	V.P.3.s	associer
généralement	ADV.-	généralement
à	P	à
chaque	D.ind.f.s	chaque
interface	N.C.f.s	interface
Listener	VW	listener
une	D.ind.f.s	un
classe	N.C.f.s	classe
adaptateur	N.C.m.s	adaptateur
(	PONCT.W	(
Adapter	N.P.m.s	Adapter
)	PONCT.W	)
.	PONCT.S	.

Si	C.S	si
cet	D.dem.m.s	ce
adaptateur	N.C.m.s	adaptateur
existe	V.P.3.s	exister
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
avec	P	avec
lui	PPRO.3.m.s	lui
que	C.S	que
l'	CL.obj.3.m.s	le
on	CL.suj.3.m.s	on
travaille	V.P.3.s	travailler
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
interface	N.C.f.s	interface
Listener	N.P.m.s	Listener
Classe	N.P.m.s	Classe
Adapter	N.P.m.s	Adapter
associée	V.P.3.s	associéer
ActionListener	N.P.m.s	Actionlistener
None	N.P.m.s	None
WindowListener	N.P.m.s	Windowlistener
WindowAdapter	N.P.m.s	Windowadapter
MouseListener	N.P.m.s	Mouselistener
MouseAdapter	N.P.m.s	Mouseadapter
KeyListener	N.P.m.s	Keylistener
KeyAdapter	N.P.m.s	Keyadapter
11.4.2	N.card.f.s	@card@
Réaliser	VW	réaliser
un	D.ind.m.s	un
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
Réaliser	VW	réaliser
un	D.ind.m.s	un
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
(	PONCT.W	(
event	ET	event
handler	ET	handler
)	PONCT.W	)
requiert	V.P.3.s	requérir
trois	D.card.m.p	trois
éléments	N.C.m.p	élément
de	P	de
code	N.C.f.s	code
:	PONCT.W	:
+	ADV.-	al
déclarer	VW	déclarer
une	D.ind.f.s	un
classe	N.C.f.s	classe
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
:	PONCT.W	:
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
doit	V.P.3.s	devoir
implémenter	VW	implémenter
une	D.ind.f.s	un
interface	N.C.f.s	interface
Listener	VW	listener
ou	C.C	ou
étendre	VW	étendre
une	D.ind.f.s	un
classe	N.C.f.s	classe
Adapter	N.P.m.s	Adapter
Exemple	N.C.m.s	exemple
:	PONCT.W	:
import	N.C.m.s	import
java.awt.event.*	ET	<unknown>
;	PONCT.W	;
public	ET	public
class	ET	class
MyClass	N.P.m.s	Myclass
implements	ADV.-	implements
ActionListener	VW	actionlistener
{	N.P.m.s	{
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.

}	P	à
+	P	p
définir	VW	définir
dans	P	dans
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
Listener	N.P.m.s	Listener
Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
void	N.C.m.s	void
actionPerformed(ActionEvent	A.qual.m.s	<unknown>
e	PONCT.W	e
)	PONCT.W	)
{	N.C.m.s	{
.	PONCT.S	.
.	PONCT.S	.
.	PONCT.S	.

}	N.C.m.s	}
+	P	p
définir	VW	définir
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
et	C.C	et
l'	CL.obj.3.f.s	la
enregistrer	VW	enregistrer
sur	P	sur
le(s)	N.P.m.s	Leësë
composant(s)	N.C.m.s	composantçsë
concerné(s)	PONCT.W	concernéësë
Exemple	N.C.m.s	exemple
:	PONCT.W	:
someComponent.addActionListener(instanceOfMyClass)	N.C.f.s	<unknown>
;	PONCT.W	;
Le	D.def.m.s	le
type	N.C.m.s	type
ActionListener	N.P.m.s	Actionlistener
permet	V.P.3.s	permettre
de	P	de
définir	VW	définir
les	D.def.m.p	le
gestionnaires	N.C.m.p	gestionnaire
d'	P	de
événement	N.C.m.s	événement
les	D.def.m.p	le
plus	ADV.-	plus
simples	A.qual.m.p	simple
et	C.C	et
les	D.def.m.p	le
plus	ADV.-	plus
communs	A.qual.m.p	commun
.	PONCT.S	.

Lorsqu'	C.S	lorsque
un	D.ind.m.s	un
événement	N.C.m.s	événement
de	P	de
ce	D.dem.m.s	ce
type	N.C.m.s	type
est	V.P.3.s	être
généré	VK.m.s	générer
(	PONCT.W	(
clic	N.C.m.s	clic
d'	P	de
un	D.ind.m.s	un
bouton	N.C.m.s	bouton
graphique	A.qual.m.s	graphique
ou	C.C	ou
enfoncement	N.C.m.s	enfoncement
de	P	de
la	D.def.f.s	le
touche	N.C.f.s	touche
return	N.C.m.s	return
lors	ADV.-	lors
d'	P	de
une	D.ind.f.s	un
saisie	N.C.f.s	saisie
dans	P	dans
un	D.ind.m.s	un
champ	N.C.m.s	champ
texte	A.qual.m.s	texte
)	PONCT.W	)
,	PONCT.W	,
un	D.ind.m.s	un
message	N.C.m.s	message
actionPerformed	A.qual.m.s	<unknown>
est	V.P.3.s	être
envoyé	VK.m.s	envoyer
à	P	à
tous	A.ind.m.p	tous
les	D.def.m.p	le
écouteurs	N.C.m.p	écouteur
d'	P	de
événements	N.C.m.p	événement
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
enregistrés	VK.m.p	enregistrer
sur	P	sur
le	D.def.m.s	le
composant	N.C.m.s	composant
concerné	VK.m.s	concerner
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
est	V.P.3.s	être
généralement	ADV.-	généralement
implantée	VK.f.s	implanter
sous	P	sous
la	D.def.f.s	le
forme	N.C.f.s	forme
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
interne	A.qual.f.s	interne
(	PONCT.W	(
inner	ET	inner
class	N.C.m.p	class
)	PONCT.W	)
au	P+D.def.m.s	au
sein	N.C.m.s	sein
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
graphique	A.qual.f.s	graphique
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	PONCT.W	@card@
Ecriture	N.C.f.s	ecriture
d'	P	de
un	D.ind.m.s	un
MouseListener	N.C.m.s	mouselistener
public	A.qual.m.s	public
class	ET	class
myClass	N.C.m.p	myclass
extends	ET	extend
JPanel	N.P.m.s	Jpanel
{	N.P.m.s	{
...	PONCT.W	<unknown>
someObject.addMouseListener	N.C.m.s	<unknown>
(	PONCT.W	(
new	ET	new
MyAdapter())	N.P.m.s	Myadapterçç
;	PONCT.W	;
...	PONCT.W	<unknown>
class	ET	class
MyAdapter	N.P.m.s	Myadapter
extends	ET	extend
MouseAdapter	N.P.m.s	Mouseadapter
{	ET	{
public	N.C.m.s	public
void	ET	void
mouseClicked(MouseEvent	A.qual.m.s	<unknown>
e	P	e
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
}	N.C.m.s	}
Typiquement	ADV.-	typiquement
,	PONCT.W	,
une	D.ind.f.s	un
classe	N.C.f.s	classe
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
est	V.P.3.s	être
implantée	VK.f.s	implanter
sous	P	sous
la	D.def.f.s	le
forme	N.C.f.s	forme
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
interne	A.qual.f.s	interne
anonyme	A.qual.f.s	anonyme
.	PONCT.S	.

Exemple	N.C.m.s	exemple
(	PONCT.W	(
solution	N.C.f.s	solution
équivalente	A.qual.f.s	équivalent
à	P	à
celle	PRO.dem.f.s	celui
de	P	de
l'	D.def.m.s	le
exemple	N.C.m.s	exemple
précédent	A.qual.m.s	précédent
)	PONCT.W	)
:	PONCT.W	:
//	PONCT.W	@card@
Ecriture	N.C.f.s	ecriture
d'	P	de
un	D.ind.m.s	un
MouseListener	N.C.m.s	mouselistener
public	A.qual.m.s	public
class	ET	class
myClass	N.C.m.p	myclass
extends	ET	extend
JPanel	N.P.m.s	Jpanel
{	N.P.m.s	{
...	PONCT.W	<unknown>
someObject.addMouseListener(new	ET	<unknown>
MouseAdapter()	N.P.m.s	<unknown>
{	ET	{
public	ET	public
void	ET	void
mouseClicked(MouseEvent	A.qual.m.s	<unknown>
e	PONCT.W	e
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
)	PONCT.W	)
;	PONCT.W	;
...	PONCT.W	<unknown>
}	N.C.m.s	}
11.5	A.card.m.s	@card@
Affichage	N.C.m.s	affichage
/	C.C	@card@
fermeture	N.C.f.s	fermeture
d'	P	de
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
graphique	A.qual.f.s	graphique
L'	D.def.m.s	le
affichage	N.C.m.s	affichage
/	PONCT.W	@card@
le	D.def.m.s	le
masquage	N.C.m.s	masquage
d'	P	de
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
graphique	A.qual.f.s	graphique
de	P	de
type	N.C.m.s	type
JFrame	N.P.m.s	Jframe
se	CL.refl.3.f.s	se
commande	V.P.3.s	commander
par	P	par
la	D.def.f.s	le
méthode	N.C.f.s	méthode
setVisible	A.qual.f.s	setvisible
.	PONCT.S	.

Quand	C.S	quand
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
ferme	V.P.3.s	fermer
une	D.ind.f.s	un
fenêtre	N.C.f.s	fenêtre
graphique	A.qual.f.s	graphique
de	P	de
type	N.C.m.s	type
JFrame	N.P.m.s	Jframe
,	PONCT.W	,
cette	D.dem.f.s	ce
fenêtre	N.C.f.s	fenêtre
n'	ADV.neg	ne
est	V.P.3.s	être
en	P	en
fait	N.C.m.s	fait
,	PONCT.W	,
par	P	par
défaut	N.C.m.s	défaut
,	PONCT.W	,
que	ADV.-	que
masquée	VK.f.s	masquer
.	PONCT.S	.

Quoiqu'	PRO.int.m.s	quoique
invisible	A.qual.m.s	invisible
,	PONCT.W	,
l'	D.def.m.s	le
objet	N.C.m.s	objet
graphique	A.qual.m.s	graphique
existe	V.P.3.s	exister
toujours	ADV.-	toujours
et	C.C	et
le	D.def.m.s	le
programme	N.C.m.s	programme
peut	V.P.3.s	pouvoir
à	P	à
nouveau	A.qual.m.s	nouveau
le	CL.obj.3.m.s	le
rendre	VW	rendre
visible	A.qual.m.s	visible
.	PONCT.S	.

Si	C.S	si
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
désire	V.P.3.s	désirer
un	D.ind.m.s	un
comportement	N.C.m.s	comportement
différent	A.qual.m.s	différent
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
:	PONCT.W	:
-	PONCT.W	-
soit	C.C	soit
d'	P	de
enregistrer	VW	enregistrer
sur	P	sur
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
graphique	A.qual.m.s	graphique
un	D.ind.m.s	un
gestionnaire	N.C.m.s	gestionnaire
d'	P	de
événement	N.C.m.s	événement
de	P	de
type	N.C.m.s	type
WindowListener	N.P.m.s	Windowlistener
et	C.C	et
de	P	de
capter	VW	capter
le	D.def.m.s	le
message	N.C.m.s	message
windowClosing	A.qual.m.s	windowclosing
-	PONCT.W	-
soit	C.C	soit
de	P	de
spécifier	VW	spécifier
le	D.def.m.s	le
comportement	N.C.m.s	comportement
par	P	par
défaut	N.C.m.s	défaut
en	P	en
utilisant	VG	utiliser
la	D.def.f.s	le
méthode	N.C.f.s	méthode
setDefaultCloseOperation	N.C.f.s	<unknown>
.	PONCT.S	.

Le	D.def.m.s	le
comportement	N.C.m.s	comportement
est	V.P.3.s	être
indiqué	VK.m.s	indiquer
en	P	en
argument	N.C.m.s	argument
par	P	par
une	D.ind.f.s	un
constante	N.C.f.s	constante
(	PONCT.W	(
définie	VK.f.s	définir
dans	P	dans
l'	D.def.f.s	le
interface	N.C.f.s	interface
WindowConstants	N.P.m.s	Windowconstants
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
argument	N.C.m.s	argument
:	PONCT.W	:
DISPOSE_ON_CLOSE	N.P.x.s	Disposeçonçlose
11.6	A.card.f.s	@card@
Architecture	N.C.f.s	architecture
des	P+D.def.m.p	du
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
Objectif	N.C.m.s	objectif
:	PONCT.W	:
des	D.ind.f.p	du
applications	N.C.f.p	application
facilement	ADV.-	facilement
adaptables	A.qual.f.p	adaptable
.	PONCT.S	.

L'	D.def.f.s	le
architecture	N.C.f.s	architecture
des	P+D.def.m.p	du
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
est	V.P.3.s	être
basée	VK.f.s	baser
sur	P	sur
une	D.ind.f.s	un
adaptation	N.C.f.s	adaptation
de	P	de
la	D.def.f.s	le
très	ADV.-	très
renommée	VK.f.s	renommer
architecture	N.C.f.s	architecture
MVC	N.P.m.s	Mvc
(	PONCT.W	(
"	PONCT.W	"
Modèle-Vue-Contrôleur	N.P.m.s	Modèle-Vue-Contrôleur
"	PONCT.W	"
;	PONCT.W	;
voir	VW	voir
section	N.C.f.s	section
13.2	A.card.f.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Dans	P	dans
la	D.def.f.s	le
communauté	N.C.f.s	communauté
Swing	N.P.f.s	Swing
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
appelée	VK.f.s	appeler
"	PONCT.W	"
Architecture	N.C.f.s	architecture
à	P	à
modèle	N.C.m.s	modèle
séparable	A.qual.m.s	séparable
"	PONCT.W	"
:	PONCT.W	:
La	D.def.f.s	le
partie	N.C.f.s	partie
Modèle	N.P.m.s	Modèle
d'	P	de
un	D.ind.m.s	un
composant	N.C.m.s	composant
Swing	N.P.m.s	Swing
(	PONCT.W	(
partie	N.C.f.s	partie
qui	PRO.rel.f.s	qui
représente	V.P.3.s	représenter
les	D.def.f.p	le
données	N.C.f.p	donnée
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
)	PONCT.W	)
est	V.P.3.s	être
traitée	VK.f.s	traiter
comme	P	comme
un	D.ind.m.s	un
élément	N.C.m.s	élément
séparé	A.qual.m.s	séparé
,	PONCT.W	,
tout	ADV.-	tout
comme	C.S	comme
le	CL.obj.3.m.s	le
préconise	V.P.3.s	préconiser
la	D.def.f.s	le
conception	N.C.f.s	conception
MVC	N.P.x.s	Mvc
;	PONCT.W	;
mais	C.C	mais
Swing	N.P.m.s	Swing
fusionne	V.P.3.s	fusionner
les	D.def.f.p	le
parties	N.C.f.p	partie
Vue	VK.f.s	voir
(	PONCT.W	(
qui	PRO.rel.f.s	qui
prend	V.P.3.s	prendre
en	P	en
charge	N.C.f.s	charge
la	D.def.f.s	le
représentation	N.C.f.s	représentation
visuelle	A.qual.f.s	visuel
des	P+D.def.f.p	du
données	N.C.f.p	donnée
)	PONCT.W	)
et	C.C	et
Contrôleur	N.C.m.s	contrôleur
(	PONCT.W	(
qui	PRO.rel.f.s	qui
traite	V.P.3.s	traiter
les	D.def.f.p	le
entrées	N.C.f.p	entrée
utilisateur	N.C.m.s	utilisateur
)	PONCT.W	)
de	P	de
chaque	D.ind.m.s	chaque
composant	N.C.m.s	composant
en	P	en
un	D.ind.m.s	un
seul	A.qual.m.s	seul
objet	N.C.m.s	objet
interface	A.qual.m.s	interface
utilisateur	N.C.m.s	utilisateur
(	PONCT.W	(
User	N.P.m.s	User
Interface	N.P.m.s	Interface
Object	N.P.m.s	Object
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
en	P	en
général	N.C.m.s	général
considéré	VK.m.s	considérer
comme	P	comme
une	D.ind.f.s	un
bonne	A.qual.f.s	bon
pratique	N.C.f.s	pratique
de	P	de
centrer	VW	centrer
l'	D.def.f.s	le
architecture	N.C.f.s	architecture
d'	P	de
une	D.ind.f.s	un
application	N.C.f.s	application
autour	ADV.-	autour
de	P	de
ses	D.poss.f.p	son
données	N.C.f.p	donnée
plutôt	ADV.-	plutôt
qu'	C.S	que
autour	ADV.-	autour
de	P	de
son	D.poss.m.s	son
interface	N.C.m.s	interface
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Pour	P	pour
supporter	VW	supporter
ce	D.dem.m.s	ce
paradigme	N.C.m.s	paradigme
[	PONCT.W	[
1	N.card.m.s	@card@
]	PONCT.W	]
,	PONCT.W	,
Swing	N.P.m.s	Swing
définit	V.P.3.s	définir
une	D.ind.f.s	un
interface	N.C.f.s	interface
Modèle	N.P.m.s	Modèle
séparée	VK.f.s	séparer
pour	P	pour
chaque	D.ind.m.s	chaque
composant	N.C.m.s	composant
.	PONCT.S	.

Cette	D.dem.f.s	ce
séparation	N.C.f.s	séparation
fournit	V.P.3.s	fournir
au	P+D.def.m.s	au
programme	N.C.m.s	programme
d'	P	de
application	N.C.f.s	application
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
de	P	de
connecter	VW	connecter
facilement	ADV.-	facilement
des	D.ind.m.p	du
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
dans	P	dans
son	D.poss.f.s	son
implémentation	N.C.f.s	implémentation
modèle	A.qual.f.s	modèle
propre	A.qual.f.s	propre
.	PONCT.S	.

La	D.def.f.s	le
table	N.C.f.s	table
suivante	A.qual.f.s	suivant
montre	V.P.3.s	montrer
les	D.def.f.p	le
interfaces	N.C.f.p	interface
Modèles	N.P.m.s	Modèles
offertes	VK.f.p	offrir
par	P	par
les	D.def.m.p	le
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
:	PONCT.W	:
Component	ET	component
Model	N.P.m.s	Model
Interface	N.P.m.s	Interface
Model	N.P.m.s	Model
Type	N.P.m.s	Type
JButton	N.P.m.s	Jbutton
ButtonModel	N.P.m.s	Buttonmodel
GUI	N.P.m.s	Gui
JToggleButton	N.P.m.s	Jtogglebutton
ButtonModel	N.P.m.s	Buttonmodel
GUI/data	N.P.m.s	Guiddata
JCheckBox	N.P.m.s	Jcheckbox
ButtonModel	N.P.m.s	Buttonmodel
GUI/data	N.P.m.s	Guiddata
JRadioButton	N.P.m.s	Jradiobutton
ButtonModel	N.P.m.s	Buttonmodel
GUI/data	N.P.m.s	Guiddata
JMenu	N.P.m.s	Jmenu
ButtonModel	N.P.m.s	Buttonmodel
GUI	N.P.m.s	Gui
JMenuItem	N.P.m.s	Jmenuitem
ButtonModel	N.P.m.s	Buttonmodel
GUI	N.P.m.s	Gui
JCheckBoxMenuItem	N.P.m.s	Jcheckboxmenuitem
ButtonModel	N.P.m.s	Buttonmodel
GUI/data	N.P.m.s	Guiddata
JRadioButtonMenuItem	N.P.m.s	Jradiobuttonmenuitem
ButtonModel	N.P.m.s	Buttonmodel
GUI/data	N.P.m.s	Guiddata
JComboBox	N.P.m.s	Jcombobox
ComboBoxModel	N.P.m.s	Comboboxmodel
Data	N.P.m.s	Data
JProgressBar	N.P.m.s	Jprogressbar
BoundedRangeModel	N.P.m.s	Boundedrangemodel
GUI/data	N.P.m.s	Guiddata
JScrollBar	N.P.m.s	Jscrollbar
BoundedRangeModel	N.P.m.s	Boundedrangemodel
GUI/data	N.P.m.s	Guiddata
Slider	N.P.m.s	Slider
BoundedRangeModel	N.P.m.s	Boundedrangemodel
GUI/data	N.P.m.s	Guiddata
Component	N.P.m.s	Component
Model	N.P.m.s	Model
Interface	N.P.m.s	Interface
Model	N.P.m.s	Model
Type	N.P.m.s	Type
JTabbedPane	N.P.m.s	Jtabbedpane
SingleSelectionModel	N.P.m.s	Singleselectionmodel
GUI	N.P.m.s	Gui
JList	N.P.m.s	Jlist
ListModel	N.P.m.s	Listmodel
Data	N.P.m.s	Data
JList	N.P.m.s	Jlist
ListSelectionModel	N.P.m.s	Listselectionmodel
GUI	N.P.m.s	Gui
JTable	N.P.m.s	Jtable
TableModel	N.P.m.s	Tablemodel
Data	N.P.m.s	Data
JTable	N.P.m.s	Jtable
TableColumnModel	N.P.m.s	Tablecolumnodel
GUI	N.P.m.s	Gui
JTree	N.P.m.s	Jtree
TreeModel	N.P.m.s	Treemodel
Data	N.P.m.s	Data
JTree	N.P.m.s	Jtree
TreeSelectionModel	N.P.m.s	Treeselectionmodel
GUI	N.P.m.s	Gui
JEditorPane	N.P.m.s	Jeditorpane
Document	N.P.m.s	Document
Data	N.P.m.s	Data
JTextPane	N.P.m.s	Jtextpane
Document	N.P.m.s	Document
Data	N.P.m.s	Data
JTextArea	N.P.m.s	<unknown>
Document	N.P.m.s	Document
Data	N.P.m.s	Data
JTextField	N.P.m.s	Jtextfield
Document	N.P.m.s	Document
Data	N.P.m.s	Data
JPasswordField	N.P.m.s	Jpasswordfield
Document	N.P.m.s	Document
Data	N.P.m.s	Data
Les	D.def.f.p	le
interfaces	N.C.f.p	interface
Modèles	N.P.m.s	Modèles
fournies	VK.f.p	fournir
par	P	par
Swing	N.P.m.s	Swing
relèvent	V.P.3.p	relever
de	P	de
deux	D.card.f.p	deux
grandes	A.qual.f.p	grand
catégories	N.C.f.p	catégorie
:	PONCT.W	:
les	D.def.m.p	le
types	N.C.m.p	type
"	PONCT.W	"
Etat	N.C.m.s	etat
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
graphique	A.qual.f.s	graphique
"	PONCT.W	"
(	PONCT.W	(
GUI	N.P.x.s	Gui
)	PONCT.W	)
,	PONCT.W	,
qui	PRO.rel.m.p	qui
définissent	V.P.3.p	définir
le	D.def.m.s	le
statut	N.C.m.s	statut
visuel	A.qual.m.s	visuel
des	P+D.def.f.p	du
commandes	N.C.f.p	commande
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
graphique	A.qual.f.s	graphique
;	PONCT.W	;
et	C.C	et
les	D.def.m.p	le
types	N.C.m.p	type
"	PONCT.W	"
Données	VK.f.p	donner
d'	P	de
application	N.C.f.s	application
"	PONCT.W	"
(	PONCT.W	(
Data	N.P.x.s	Data
)	PONCT.W	)
,	PONCT.W	,
qui	PRO.rel.m.p	qui
représentent	V.P.3.p	représenter
des	D.ind.f.p	du
données	N.C.f.p	donnée
quantifiables	A.qual.f.p	quantifiable
ayant	VG	avoir
sens	N.C.m.s	sens
pour	P	pour
l'	D.def.f.s	le
application	N.C.f.s	application
.	PONCT.S	.

Certains	D.ind.m.p	certain
modèles	N.C.m.p	modèle
relèvent	V.P.3.p	relever
de	P	de
types	N.C.m.p	type
partagés	A.qual.m.p	partagé
(	PONCT.W	(
GUI/data	N.P.x.s	Guiddata
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
recommandé	VK.m.s	recommander
d'	P	de
utiliser	VW	utiliser
la	D.def.f.s	le
catégorie	N.C.f.s	catégorie
"	PONCT.W	"
Données	VK.f.p	donner
d'	P	de
application	N.C.f.s	application
"	PONCT.W	"
(	PONCT.W	(
Data	N.P.m.s	Data
)	PONCT.W	)
des	P+D.def.m.p	du
modèles	N.C.m.p	modèle
de	P	de
Swing	N.P.m.s	Swing
car	C.C	car
ils	CL.suj.3.m.p	il
renforcent	V.P.3.p	renforcer
grandement	ADV.-	grandement
l'	D.def.f.s	le
adaptabilité	N.C.f.s	adaptabilité
et	C.C	et
la	D.def.f.s	le
modularité	N.C.f.s	modularité
des	P+D.def.f.p	du
applications	N.C.f.p	application
sur	P	sur
le	D.def.m.s	le
long	A.qual.m.s	long
terme	N.C.m.s	terme
.	PONCT.S	.

[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
Un	D.ind.m.s	un
paradigme	N.C.m.s	paradigme
est	V.P.3.s	être
une	D.ind.f.s	un
vision	N.C.f.s	vision
du	P+D.def.m.s	du
monde	N.C.m.s	monde
qui	PRO.rel.m.s	qui
repose	V.P.3.s	reposer
sur	P	sur
un	D.ind.m.s	un
modèle	N.C.m.s	modèle
.	PONCT.S	.

11.7	D.card.m.p	@card@
Applets	N.C.m.p	applet
Java	N.P.m.s	Java
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
deux	D.card.m.p	deux
types	N.C.m.p	type
de	P	de
programmes	N.C.m.p	programme
:	PONCT.W	:
-	PONCT.W	-
des	P+D.def.f.p	du
applications	N.C.f.p	application
,	PONCT.W	,
qui	PRO.rel.m.p	qui
s'	CL.refl.3.m.p	se
exécutent	V.P.3.p	exécuter
directement	ADV.-	directement
sous	P	sous
le	D.def.m.s	le
contrôle	N.C.m.s	contrôle
de	P	de
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
-	PONCT.W	-
des	P+D.def.f.p	du
appliquettes	N.C.f.p	appliquette
(	PONCT.W	(
ou	C.C	ou
applettes	N.C.f.p	applette
;	PONCT.W	;
en	P	en
anglais	N.C.m.s	anglais
:	PONCT.W	:
applets	N.C.m.p	applet
)	PONCT.W	)
destinées	VK.f.p	destiner
à	P	à
être	VW	être
exécutées	VK.f.p	exécuter
par	P	par
un	D.ind.m.s	un
navigateur	N.C.m.s	navigateur
Web	N.P.m.s	Web
Pour	P	pour
réaliser	VW	réaliser
une	D.ind.f.s	un
applette	N.C.f.s	applette
,	PONCT.W	,
le	D.def.m.s	le
minimum	N.C.m.s	minimum
consiste	V.P.3.s	consister
à	P	à
:	PONCT.W	:
-	PONCT.W	-
créer	VW	créer
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
JApplet	N.P.m.s	Japplet
(	PONCT.W	(
voir	VW	voir
section	N.C.f.s	section
11.2	A.card.f.s	@card@
)	PONCT.W	)
-	PONCT.W	-
y	CL.obj.3.m.s	y
créer	VW	créer
la	D.def.f.s	le
méthode	N.C.f.s	méthode
init()	N.C.m.s	initçë
,	PONCT.W	,
qui	PRO.rel.f.s	qui
sera	V.F.3.s	être
lancée	VK.f.s	lancer
par	P	par
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
-	PONCT.W	-
référencer	VW	référencer
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
dans	P	dans
la	D.def.f.s	le
balise	N.C.f.s	balise
<APPLET	N.P.m.s	<unknown>
CODE=	N.P.m.s	Codeë
...	PONCT.S	<unknown>
>	N.C.m.s	>
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
HTML	N.P.m.s	<unknown>
Syntaxe	N.P.m.s	Syntaxe
:	PONCT.W	:
import	ET	import
javax.swing.JApplet	N.C.m.s	javax
;	PONCT.W	;
public	ET	public
class	ET	class
AppletClassName	N.P.m.s	Appletclassname
extends	ET	extend
JApplet	N.P.m.s	Japplet
{	P	à
//	PONCT.W	@card@
...	PONCT.W	<unknown>
Fields	N.P.m.s	Fields
...	PONCT.W	<unknown>
public	A.qual.m.s	public
void	ET	void
init	A.qual.m.s	init
)	PONCT.W	)
{	N.C.m.s	{
;	PONCT.W	;
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
Syntaxe	N.P.m.s	Syntaxe
:	PONCT.W	:
<APPLET	N.C.m.s	<unknown>
CODE="AppletClassName.class	N.P.m.s	<unknown>
"	PONCT.W	"
WIDTH=anint	N.P.m.s	Widthëanint
HEIGHT=anint	N.P.m.s	Heightanint
>	P+D.def.m.s	c
</APPLET>	N.C.m.s	<unknown>
12	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
2	A.card.m.s	@card@
-	PONCT.W	-
THREADS	N.C.m.p	thread
Références	N.C.f.p	référence
:	PONCT.W	:
Programmation	N.C.f.s	programmation
concurrente	A.qual.f.s	concurrent
,	PONCT.W	,
processus	N.C.m.p	processus
,	PONCT.W	,
threads	N.C.m.p	thread
java.sun.com/docs/books/tutorial/essential/concurrency/procthread.html	ET	<unknown>
Les	D.def.m.p	le
threads	N.C.m.p	thread
permettent	V.P.3.p	permettre
de	P	de
programmer	VW	programmer
des	D.ind.f.p	du
tâches	N.C.f.p	tâche
qui	PRO.rel.f.p	qui
,	PONCT.W	,
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
un	D.ind.m.s	un
même	A.qual.m.s	même
programme	N.C.m.s	programme
,	PONCT.W	,
s'	CL.refl.3.m.p	se
exécuteront	V.F.3.p	exécuter
concurremment	ADV.-	concurremment
.	PONCT.S	.

Ce	CL.suj.3.m.s	ce
sont	V.P.3.p	être
des	D.ind.m.p	du
processus	N.C.m.p	processus
légers	A.qual.m.p	léger
.	PONCT.S	.

La	D.def.f.s	le
tâche	N.C.f.s	tâche
à	P	à
exécuter	VW	exécuter
par	P	par
un	D.ind.m.s	un
thread	N.C.m.s	thread
doit	V.P.3.s	devoir
être	VW	être
implémentée	VK.f.s	implémenter
dans	P	dans
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
run(	A.qual.f.s	runç
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
deux	D.card.f.p	deux
façons	N.C.f.p	façon
de	P	de
fournir	VW	fournir
la	D.def.f.s	le
méthode	N.C.f.s	méthode
run()	N.C.m.s	runç
:	PONCT.W	:
-	PONCT.W	-
définir	VW	définir
une	D.ind.f.s	un
sous-classe	N.C.f.s	sous-classe
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Thread	N.P.m.s	Thread
et	C.C	et
y	CL.obj.3.m.s	y
redéfinir	VW	redéfinir
la	D.def.f.s	le
méthode	N.C.f.s	méthode
run()	N.C.m.s	runç
-	PONCT.W	-
définir	VW	définir
une	D.ind.f.s	un
classe	N.C.f.s	classe
qui	PRO.rel.f.s	qui
implémente	V.P.3.s	implémenter
l'	D.def.f.s	le
interface	N.C.f.s	interface
Runnable	A.qual.f.s	runnable
et	C.C	et
y	CL.obj.3.m.s	y
définir	VW	définir
la	D.def.f.s	le
méthode	N.C.f.s	méthode
run()	V.P.3.s	runcer
12.1	A.card.f.s	@card@
Créer	VW	créer
un	D.ind.m.s	un
thread	N.C.m.s	thread
par	P	par
extension	N.C.f.s	extension
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Thread	N.P.m.s	Thread
Exemple	N.P.m.s	Exemple
:	PONCT.W	:
//	ET	@card@
Example	ET	example
of	ET	of
defining	ET	defining
a	V.P.3.s	avoir
thread	ET	thread
as	ET	as
extending	ET	extending
Thread	ET	thread
public	ET	public
class	ET	class
SimpleThread	ET	simplethread
extends	ET	extend
Thread	ET	thread
{	ET	{
public	ET	public
SimpleThread(String	ET	simplethreadçstring
threadName	N.C.m.s	threadname
)	PONCT.W	)
{	ET	{
super	N.C.m.p	super
(	PONCT.W	(
threadName	N.C.m.s	threadname
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
//	PONCT.W	@card@
The	ET	the
task	ET	task
of	ET	of
this	ET	thi
thread	ET	thread
is	CL.suj.3.m.p	is
to	ET	to
print	V.J.3.s	prendre
10	D.card.m.p	@card@
times	N.C.m.p	time
its	ET	it
name	ET	name
//	PONCT.W	@card@
at	N.C.m.s	at
a	V.P.3.s	avoir
random	ET	random
rate	ET	rate
public	A.qual.m.s	public
void	ET	void
run()	N.C.m.s	runç
{	P	à
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
i	ADV.-	i
=	PONCT.W	=
0	N.card.m.s	@card@
;	PONCT.W	;
i	ADV.-	i
<	N.C.m.s	<
10	A.card.m.s	@card@
;	PONCT.W	;
i++	N.C.m.p	iu
)	PONCT.W	)
{	P+D.def.m.s	c
System.out.println(i	N.P.m.s	<unknown>
+	P	p
"	PONCT.W	"
"	PONCT.W	"
+	P	p
getName())	N.P.m.s	Getnameëë
;	PONCT.W	;
try	ET	try
{	P+D.def.m.s	c
sleep((long)	N.C.m.s	sleepçëlongë
(	PONCT.W	(
Math.random()	N.P.m.s	<unknown>
*	N.C.m.s	*
1000	A.card.m.s	@card@
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
catch	N.C.m.s	catch
(	PONCT.W	(
InterruptedException	N.C.f.s	interruptedexception
e	PONCT.W	e
)	PONCT.W	)
{	V.P.3.s	être
}	N.C.m.s	}
}	P	à
System.out.println("DONE	N.P.m.s	<unknown>
!	PONCT.S	!

"	PONCT.W	"
"	PONCT.W	"
+	ADV.-	al
getName())	N.C.m.s	getnameçç
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
end	ET	end
class	ET	class
SimpleThread	ET	simplethread
//	PONCT.W	@card@
Example	ET	example
of	ET	of
running	ET	running
two	ET	two
threads	ET	thread
concurrently	ET	concurrently
.	PONCT.S	.

//	PONCT.W	@card@
"	PONCT.W	"
Jamaica	ET	jamaica
"	PONCT.W	"
and	ET	and
"	PONCT.W	"
Fiji	ET	fiji
"	PONCT.W	"
Will	ET	will
be	ET	be
printed	V.P.3.s	printeder
randomly	ET	randomly
10	D.card.f.p	@card@
times	N.C.m.p	time
.	PONCT.S	.

public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main	N.C.f.s	main
(	PONCT.W	(
String[	N.P.m.s	Stringü
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	ET	{
new	ET	new
SimpleThread("Jamaica").start()	N.P.x.s	Simplethread-ëmamaicaë
;	PONCT.W	;
new	ET	new
SimpleThread("Fiji").start()	N.P.m.s	Simplethreadçijiëëe
;	PONCT.W	;
}	V.P.3.s	être
12.2	A.card.m.s	@card@
Créer	VW	créer
un	D.ind.m.s	un
thread	N.C.m.s	thread
par	P	par
implémentation	N.C.f.s	implémentation
de	P	de
l'	D.def.f.s	le
interface	N.C.f.s	interface
Runnable	A.qual.f.s	runnable
Cette	D.dem.f.s	ce
façon	N.C.f.s	façon
de	P	de
faire	VW	faire
s'	CL.refl.3.f.s	se
impose	V.P.3.s	imposer
lorsque	C.S	lorsque
la	D.def.f.s	le
classe	N.C.f.s	classe
à	P	à
créer	VW	créer
doit	V.P.3.s	devoir
sous-classer	VW	sous-classer
une	D.ind.f.s	un
classe	N.C.f.s	classe
quelconque	A.qual.f.s	quelconque
(	PONCT.W	(
le	D.def.m.s	le
cas	N.C.m.s	cas
typique	A.qual.m.s	typique
étant	VG	être
une	D.ind.f.s	un
Applet	N.P.f.s	Applet
)	PONCT.W	)
,	PONCT.W	,
parce	N.C.f.s	parce
que	C.S	que
Java	N.P.m.s	Java
ne	ADV.neg	ne
supporte	V.P.3.s	supporter
pas	ADV.neg	pas
l'	D.def.m.s	le
héritage	N.C.m.s	héritage
multiple	A.qual.m.s	multiple
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
//	ET	@card@
Example	ET	example
of	ET	of
defining	ET	defining
a	V.P.3.s	avoir
thread	ET	thread
as	ET	as
implementing	ET	implementing
Runnable	ET	runnable
public	A.qual.m.s	public
class	ET	class
SimpleThread	ET	simplethread
implements	ET	implement
Runnable	A.qual.m.s	runnable
{	ET	{
String	N.P.m.s	String
threadName	N.C.m.s	threadname
;	PONCT.W	;
public	ET	public
SimpleThread(String	ET	simplethreadçstring
threadName	N.C.m.s	threadname
)	PONCT.W	)
{	D.card.m.s	{
this.threadName	N.C.m.s	thistthreadname
=	PONCT.W	=
threadName	N.C.m.s	threadname
;	PONCT.W	;
}	ET	}
//	PONCT.W	@card@
The	ET	the
task	ET	task
of	ET	of
this	ET	thi
thread	ET	thread
is	CL.suj.3.m.p	is
to	ET	to
print	V.J.3.s	prendre
10	D.card.m.p	@card@
times	N.C.m.p	time
its	ET	it
name	A.qual.m.s	name
//	PONCT.W	@card@
at	N.C.m.s	at
a	V.P.3.s	avoir
random	ET	random
rate	ET	rate
public	A.qual.m.s	public
void	ET	void
run()	N.C.m.s	runç
{	P	à
for	N.C.m.s	for
(	PONCT.W	(
int	PRO.card.m.p	<unknown>
i	PONCT.W	i
=	PONCT.W	=
0	N.card.m.s	@card@
;	PONCT.W	;
i	ADV.-	i
<	N.C.m.s	<
10	A.card.m.s	@card@
;	PONCT.W	;
i++	N.C.m.p	iu
)	PONCT.W	)
{	P+D.def.m.s	c
System.out.println(i	N.P.m.s	<unknown>
+	P	p
"	PONCT.W	"
"	PONCT.W	"
+	P	p
threadName	N.C.m.s	threadname
)	PONCT.W	)
;	PONCT.W	;
try	ET	try
{	ET	{
Thread.sleep((long)	N.P.m.s	<unknown>
(	PONCT.W	(
Math.random()	N.P.m.s	<unknown>
*	N.C.m.s	*
1000	N.card.m.s	@card@
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
InterruptedException	N.C.f.s	interruptedexception
e	PONCT.W	e
)	PONCT.W	)
{	V.P.3.s	être
}	N.C.m.s	}
}	P	à
System.out.println("DONE	N.P.m.s	<unknown>
!	PONCT.S	!

"	PONCT.W	"
+	P	p
threadName	N.C.m.s	threadname
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
//	PONCT.W	@card@
end	ET	end
class	ET	class
SimpleThread	ET	simplethread
//	PONCT.W	@card@
Example	ET	example
of	ET	of
running	ET	running
two	ET	two
threads	ET	thread
concurrently	ET	concurrently
//	PONCT.W	@card@
(	PONCT.W	(
"	PONCT.W	"
Jamaica	ET	jamaica
"	PONCT.W	"
and	ET	and
"	PONCT.W	"
Fiji	ET	fiji
"	PONCT.W	"
Will	ET	will
be	ET	be
printed	ET	printed
randomly	ET	randomly
10	D.card.m.p	@card@
times	N.C.m.p	time
)	PONCT.W	)
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main	N.C.f.s	main
(	PONCT.W	(
String[	N.P.m.s	Stringü
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	ET	{
new	ET	new
Thread(new	ET	threadänew
SimpleThread("Jamaica")).start()	N.P.m.s	Simplethread-ëmaicaëë
;	PONCT.W	;
new	ET	new
Thread(new	ET	threadänew
SimpleThread("Fiji")).start()	N.P.m.s	Simplethreadçjëëë
;	PONCT.W	;
}	D.card.m.s	}
12.3	D.card.f.p	@card@
Synchronisation	N.C.f.s	synchronisation
et	C.C	et
communication	N.C.f.s	communication
entre	P	entre
threads	N.C.m.p	thread
12.3.1	D.card.f.p	@card@
Sections	N.C.f.p	section
critiques	A.qual.f.p	critique
et	C.C	et
synchronisation	N.C.f.s	synchronisation
Dans	P	dans
un	D.ind.m.s	un
programme	N.C.m.s	programme
,	PONCT.W	,
des	D.ind.m.p	du
segments	N.C.m.p	segment
de	P	de
code	N.C.f.s	code
qui	PRO.rel.m.p	qui
accèdent	V.P.3.p	accéder
à	P	à
une	D.ind.f.s	un
même	A.ind.f.s	même
donnée	N.C.f.s	donnée
depuis	P	depuis
des	D.ind.m.p	du
threads	N.C.m.p	thread
concurrents	A.qual.m.p	concurrent
sont	V.P.3.p	être
appelés	VK.m.p	appeler
sections	N.C.f.p	section
critiques	A.qual.f.p	critique
.	PONCT.S	.

Lorsque	C.S	lorsque
deux	D.card.m.p	deux
threads	N.C.m.p	thread
concurrents	A.qual.m.p	concurrent
invoquent	V.P.3.p	invoquer
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
qui	PRO.rel.f.p	qui
opèrent	V.P.3.p	opérer
sur	P	sur
une	D.ind.f.s	un
même	A.qual.f.s	même
donnée	N.C.f.s	donnée
partagée	A.qual.f.s	partagé
(	PONCT.W	(
méthodes	N.C.f.p	méthode
critiques	A.qual.f.p	critique
)	PONCT.W	)
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
que	C.S	que
Java	N.P.m.s	Java
puisse	V.S.3.s	pouvoir
synchroniser	VW	synchroniser
ces	D.dem.f.p	ce
méthodes	N.C.f.p	méthode
afin	ADV.-	afin
de	P	de
garantir	VW	garantir
un	D.ind.m.s	un
accès	N.C.m.s	accès
sûr	A.qual.m.s	sûr
à	P	à
l'	D.def.f.s	le
information	N.C.f.s	information
.	PONCT.S	.

A	P	à
cette	D.dem.f.s	ce
fin	N.C.f.s	fin
,	PONCT.W	,
chacune	PRO.ind.f.s	chacun
de	P	de
ces	D.dem.f.p	ce
méthodes	N.C.f.p	méthode
doit	V.P.3.s	devoir
être	VW	être
déclarée	VK.f.s	déclarer
avec	P	avec
le	D.def.m.s	le
modificateur	N.C.m.s	modificateur
synchronized	A.qual.m.s	synchronized
.	PONCT.S	.

A	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
,	PONCT.W	,
l'	D.def.m.s	le
accès	N.C.m.s	accès
à	P	à
la	D.def.f.s	le
donnée	N.C.f.s	donnée
partagée	VK.f.s	partager
sera	V.F.3.s	être
ainsi	ADV.-	ainsi
automatiquement	ADV.-	automatiquement
verrouillé	VK.m.s	verrouiller
tant	ADV.-	tant
qu'	C.S	que
elle	CL.suj.3.f.s	elle
sera	V.F.3.s	être
utilisée	VK.f.s	utiliser
par	P	par
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
critique	A.qual.f.s	critique
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
get	N.C.m.s	get
et	C.C	et
put	V.J.3.s	pouvoir
sont	V.P.3.p	être
supposées	VK.f.p	supposer
deux	D.card.f.p	deux
méthodes	N.C.f.p	méthode
critiques	A.qual.f.p	critique
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
partagé	VK.m.s	partager
.	PONCT.S	.

public	A.qual.m.s	public
synchronized	N.C.m.s	synchronized
int	V.P.3.s	indre
get()	N.C.m.s	getçë
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
public	A.qual.m.s	public
synchronized	ET	synchronized
void	V.P.3.s	voiler
put(int	D.card.f.p	putçint
value	N.C.f.s	value
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
12.3.2	D.card.f.p	@card@
Communication	N.C.f.s	communication
entre	P	entre
threads	N.C.m.p	thread
Pour	P	pour
que	C.S	que
deux	D.card.m.p	deux
threads	N.C.m.p	thread
,	PONCT.W	,
processus	N.C.m.p	processus
indépendants	A.qual.m.p	indépendant
qui	PRO.rel.m.p	qui
se	CL.refl.3.m.p	se
déroulent	V.P.3.p	dérouler
de	P	de
façon	N.C.f.s	façon
asynchrone	A.qual.f.s	asynchrone
,	PONCT.W	,
puissent	V.P.3.p	puisser
se	CL.refl.3.m.p	se
communiquer	VW	communiquer
des	D.ind.f.p	du
données	N.C.f.p	donnée
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
qu'	C.S	que
ils	CL.suj.3.m.p	il
sachent	V.P.3.p	sacher
se	CL.refl.3.m.s	se
synchroniser	VW	synchroniser
autour	ADV.-	autour
d'	P	de
un	D.ind.m.s	un
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
.	PONCT.S	.

Le	D.def.m.s	le
thread	N.C.m.s	thread
émetteur	A.qual.m.s	émetteur
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
est	V.P.3.s	être
appelé	VK.m.s	appeler
producteur	N.C.m.s	producteur
;	PONCT.W	;
le	D.def.m.s	le
thread	N.C.m.s	thread
destinataire	A.qual.m.s	destinataire
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
est	V.P.3.s	être
appelé	VK.m.s	appeler
consommateur	N.C.m.s	consommateur
.	PONCT.S	.

Le	D.def.m.s	le
thread	N.C.m.s	thread
producteur	A.qual.m.s	producteur
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
doit	V.P.3.s	devoir
être	VW	être
capable	A.qual.m.s	capable
de	P	de
:	PONCT.W	:
-	PONCT.W	-
attendre	VW	attendre
que	C.S	que
l'	D.def.m.s	le
espace	N.C.m.s	espace
de	P	de
stockage	N.C.m.s	stockage
du	P+D.def.m.s	du
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
soit	V.S.3.s	être
libre	A.qual.m.s	libre
;	PONCT.W	;
-	PONCT.W	-
puis	C.C	pui
y	CL.obj.3.m.s	y
déposer	VW	déposer
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
donnée	N.C.f.s	donnée
;	PONCT.W	;
-	PONCT.W	-
puis	C.C	pui
informer	VW	informer
les	D.def.m.p	le
threads	N.C.m.p	thread
consommateurs	A.qual.m.p	consommateur
de	P	de
la	D.def.f.s	le
mise	N.C.f.s	mise
à	P	à
disposition	N.C.f.s	disposition
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
.	PONCT.S	.

De	P	de
façon	N.C.f.s	façon
symétrique	A.qual.f.s	symétrique
,	PONCT.W	,
le	D.def.m.s	le
thread	N.C.m.s	thread
consommateur	A.qual.m.s	consommateur
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
doit	V.P.3.s	devoir
être	VW	être
capable	A.qual.m.s	capable
de	P	de
:	PONCT.W	:
-	PONCT.W	-
attendre	VW	attendre
que	C.S	que
la	D.def.f.s	le
donnée	N.C.f.s	donnée
soit	V.S.3.s	être
mise	VK.f.s	mettre
à	P	à
disposition	N.C.f.s	disposition
dans	P	dans
l'	D.def.m.s	le
espace	N.C.m.s	espace
de	P	de
stockage	N.C.m.s	stockage
du	P+D.def.m.s	du
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
;	PONCT.W	;
-	PONCT.W	-
puis	C.C	pui
lire	VW	lire
cette	D.dem.f.s	ce
donnée	N.C.f.s	donnée
;	PONCT.W	;
-	PONCT.W	-
puis	C.C	pui
informer	VW	informer
les	D.def.m.p	le
threads	N.C.m.p	thread
producteurs	A.qual.m.p	producteur
de	P	de
la	D.def.f.s	le
disponibilité	N.C.f.s	disponibilité
du	P+D.def.m.s	du
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
ou	C.C	ou
leur	CL.obj.3.m.p	lui
accuser	VW	accuser
réception	N.C.f.s	réception
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
au	P+D.def.m.s	au
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
qu'	PRO.rel.m.s	que
on	CL.suj.3.m.s	on
confie	V.P.3.s	confier
la	D.def.f.s	le
charge	N.C.f.s	charge
de	P	de
ces	D.dem.f.p	ce
synchronisations	N.C.f.p	synchronisation
.	PONCT.S	.

La	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
attente	N.C.f.s	attente
se	CL.refl.3.f.s	se
réalise	V.P.3.s	réaliser
par	P	par
la	D.def.f.s	le
méthode	N.C.f.s	méthode
wait()	N.C.m.s	waitçë
,	PONCT.W	,
la	D.def.f.s	le
notification	N.C.f.s	notification
aux	P+D.def.m.p	au
autres	A.ind.m.p	autre
threads	N.C.m.p	thread
par	P	par
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
notify()	A.qual.m.s	notifyçh
ou	C.C	ou
notifyAll(	ET	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
méthodes	N.C.f.p	méthode
sont	V.P.3.p	être
toutes	A.ind.f.p	tout
deux	A.card.f.p	deux
définies	VK.f.p	définir
dans	P	dans
la	D.def.f.s	le
classe	N.C.f.s	classe
Object(	N.P.m.s	Objectë
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
classe	N.C.f.s	classe
définissant	VG	définir
un	D.ind.m.s	un
sas	N.C.m.s	sas
de	P	de
communication	N.C.f.s	communication
d'	P	de
un	D.ind.m.s	un
seul	A.qual.m.s	seul
élément	N.C.m.s	élément
de	P	de
type	N.C.m.s	type
entier	A.qual.m.s	entier
(	PONCT.W	(
attribut	N.C.m.s	attribut
contents	N.C.m.p	content
)	PONCT.W	)
.	PONCT.S	.

Y	CL.obj.3.f.s	y
noter	VW	noter
en	P	en
particulier	N.C.m.s	particulier
la	D.def.f.s	le
sécurisation	N.C.f.s	sécurisation
apportée	VK.f.s	apporter
par	P	par
l'	D.def.m.s	le
usage	N.C.m.s	usage
d'	P	de
un	D.ind.m.s	un
while	N.C.m.s	while
et	C.C	et
non	ADV.neg	non
d'	P	de
un	D.ind.m.s	un
if	N.C.m.s	if
afin	V.P.3.s	<unknown>
de	P	de
prévenir	VW	prévenir
de	D.ind.m.p	de
faux	A.qual.m.p	faux
réveils	N.C.m.p	réveil
éventuels	A.qual.m.p	éventuel
.	PONCT.S	.

public	A.qual.m.s	public
class	ET	class
CubbyHole	ET	cubbyhole
{	P	à
private	N.C.f.s	privat
int	D.card.m.p	<unknown>
contents	N.C.m.p	content
;	PONCT.W	;
private	ET	privat
boolean	N.C.m.s	boolean
available	A.qual.m.s	available
=	PONCT.W	=
false	N.C.f.s	false
;	PONCT.W	;
public	N.C.m.s	public
synchronized	N.C.m.s	synchronized
int	V.P.3.s	indre
get()	N.C.m.s	getçë
{	N.C.m.s	{
//	PONCT.W	@card@
called	ET	called
by	ET	by
Consumer	ET	consumer
while	ET	while
(	PONCT.W	(
available	N.C.m.s	available
==	V.P.3.s	cevoir
false	N.C.f.s	false
)	PONCT.W	)
{	D.card.m.s	{
try	ET	try
{	P	à
wait()	N.C.m.s	waitçë
;	PONCT.W	;
//	PONCT.W	@card@
wait	V.P.3.s	waire
for	ET	for
Producer	VW	producer
to	ET	to
put	V.J.3.s	pouvoir
value	N.C.f.s	value
}	P	à
catch	N.C.m.s	catch
(	PONCT.W	(
InterruptedException	N.C.f.s	interruptedexception
e	PONCT.W	e
)	PONCT.W	)
(	PONCT.W	(
)	PONCT.W	)
{	N.C.m.s	{
}	N.C.m.s	}
}	N.C.m.s	}
available	A.qual.m.s	available
=	PONCT.W	=
false	N.C.f.s	false
;	PONCT.W	;
notifyAll()	N.C.m.s	notifyallçë
;	PONCT.W	;
return	N.C.m.s	return
contents	N.C.m.p	content
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
synchronized	ET	synchronized
void	ET	void
put(int	VK.m.s	putcindre
x	N.card.m.s	x
)	PONCT.W	)
{	N.C.m.s	{
//	PONCT.W	@card@
called	ET	called
by	ET	by
Producer	ET	producer
while	ET	while
(	PONCT.W	(
available	N.C.m.s	available
==	P+D.def.m.s	çù
true	N.C.f.s	true
)	PONCT.W	)
{	D.card.m.s	{
try	ET	try
{	P	à
wait()	N.C.m.s	waitçë
;	PONCT.W	;
//	PONCT.W	@card@
wait	V.P.3.s	waire
for	N.C.m.s	for
Consumer	VW	consumer
to	ET	to
get	ET	get
value	N.C.f.s	value
}	P	à
catch	N.C.m.s	catch
(	PONCT.W	(
InterruptedException	N.C.f.s	interruptedexception
e	PONCT.W	e
)	PONCT.W	)
(	PONCT.W	(
)	PONCT.W	)
{	N.C.m.s	{
}	N.C.m.s	}
}	D.card.m.p	}
contents	N.C.m.p	content
=	PONCT.W	=
x	N.C.m.p	x
;	PONCT.W	;
available	N.C.m.s	available
=	PONCT.W	=
true	N.C.f.s	true
;	PONCT.W	;
notifyAll()	N.C.m.s	notifyallçë
;	PONCT.W	;
}	D.card.m.s	}
13	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
3	A.card.m.s	@card@
-	PONCT.W	-
CONCEPTION	N.C.f.s	conception
ET	C.C	et
DEVELOPPEMENT	N.C.m.s	developpement
EN	P	en
JAVA	N.P.m.s	Java
Références	N.C.f.p	référence
:	PONCT.W	:
Architecture	N.C.f.s	architecture
Modèle-Vue-Contrôleur	N.P.m.s	Modèle-Vue-Contrôleur
:	PONCT.W	:
java.sun.com/blueprints/guidelines/designing_enterprise_applications_2e/app-arch/app-arch2.html	ET	<unknown>
Développement	N.C.m.s	développement
de	P	de
tests	N.C.m.p	test
unitaires	A.qual.m.p	unitaire
avec	P	avec
le	D.def.m.s	le
cadre	N.C.m.s	cadre
d'	P	de
applications	N.C.f.p	application
JUnit	N.P.m.s	Junit
:	PONCT.W	:
junit.sourceforge.net/doc/cookbook/cookbook.htm	N.C.m.p	<unknown>
JavaBeans	N.P.m.s	Javabeans
:	PONCT.W	:
java.sun.com/products/javabeans/	ET	<unknown>
java.sun.com/docs/books/tutorial/javabeans/index.html	ET	<unknown>
Design	ET	design
patterns	N.C.m.p	pattern
:	PONCT.W	:
Cette	D.dem.f.s	ce
section	N.C.f.s	section
va	V.P.3.s	aller
au-delà	ADV.-	au-delà
du	P+D.def.m.s	du
langage	N.C.m.s	langage
Java	N.P.m.s	Java
pour	P	pour
aborder	VW	aborder
quelques	D.ind.m.p	quelque
aspects	N.C.m.p	aspect
de	P	de
la	D.def.f.s	le
conception	N.C.f.s	conception
et	C.C	et
du	P+D.def.m.s	du
développement	N.C.m.s	développement
de	P	de
programmes	N.C.m.p	programme
Java	N.P.m.s	Java
.	PONCT.S	.

13.1	D.card.m.p	@card@
Conseils	N.C.m.p	conseil
généraux	A.qual.m.p	général
pour	P	pour
une	D.ind.f.s	un
bonne	A.qual.f.s	bon
conception	N.C.f.s	conception
des	P+D.def.f.p	du
classes	N.C.f.p	classe
RECHERCHER	N.P.m.s	Rechercher
UN	D.ind.m.s	un
COUPLAGE	N.C.m.s	couplage
FAIBLE	A.qual.m.s	faible
.	PONCT.S	.

Le	D.def.m.s	le
couplage	N.C.m.s	couplage
décrit	V.P.3.s	décrire
l'	D.def.f.s	le
interconnectivité	N.C.f.s	interconnectivité
entre	P	entre
les	D.def.f.p	le
classes	N.C.f.p	classe
.	PONCT.S	.

Le	D.def.m.s	le
couplage	N.C.m.s	couplage
est	V.P.3.s	être
faible	A.qual.m.s	faible
quand	C.S	quand
chaque	D.ind.f.s	chaque
classe	N.C.f.s	classe
est	V.P.3.s	être
largement	ADV.-	largement
indépendante	A.qual.f.s	indépendant
des	P+D.def.m.p	du
autres	PRO.ind.m.p	autre
et	C.C	et
communique	A.qual.f.s	communique
avec	P	avec
elles	PPRO.3.f.p	elle
via	P	via
une	D.ind.f.s	un
interface	N.C.f.s	interface
petite	A.qual.f.s	petit
et	C.C	et
bien	ADV.-	bien
définie	VK.f.s	définir
(	PONCT.W	(
l'	D.def.f.s	le
interface	N.C.f.s	interface
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
est	V.P.3.s	être
la	D.def.f.s	le
partie	N.C.f.s	partie
visible	A.qual.f.s	visible
publique	A.qual.f.s	publique
de	P	de
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
:	PONCT.W	:
elle	CL.suj.3.f.s	elle
se	CL.refl.3.f.s	se
définit	V.P.3.s	définir
typiquement	ADV.-	typiquement
par	P	par
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.m.p	du
membres	N.C.m.p	membre
(	PONCT.W	(
attributs	N.C.m.p	attribut
,	PONCT.W	,
constructeurs	N.C.m.p	constructeur
,	PONCT.W	,
méthodes	N.C.f.p	méthode
)	PONCT.W	)
non	ADV.neg	non
privés	A.qual.m.p	privé
associés	VK.m.p	associer
à	P	à
leurs	D.poss.m.p	leur
commentaires	N.C.m.p	commentaire
de	P	de
documentation	N.C.f.s	documentation
)	PONCT.W	)
.	PONCT.S	.

RECHERCHER	N.C.m.s	rechercher
UNE	D.ind.f.s	un
COHESION	N.C.f.s	cohesion
FORTE	N.P.f.s	Forte
.	PONCT.S	.

La	D.def.f.s	le
cohésion	N.C.f.s	cohésion
décrit	V.P.3.s	décrire
l'	D.def.f.s	le
adéquation	N.C.f.s	adéquation
entre	P	entre
une	D.ind.f.s	un
unité	N.C.f.s	unité
de	P	de
code	N.C.f.s	code
et	C.C	et
une	D.ind.f.s	un
entité	N.C.f.s	entité
ou	C.C	ou
tâche	N.C.f.s	tâche
logique	A.qual.f.s	logique
.	PONCT.S	.

La	D.def.f.s	le
cohésion	N.C.f.s	cohésion
est	V.P.3.s	être
forte	A.qual.f.s	fort
quand	C.S	quand
chaque	D.ind.f.s	chaque
unité	N.C.f.s	unité
de	P	de
code	N.C.m.s	code
(	PONCT.W	(
méthode	N.C.f.s	méthode
,	PONCT.W	,
classe	N.C.f.s	classe
,	PONCT.W	,
module	N.C.m.s	module
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.
.	PONCT.S	.
)	PONCT.W	)
est	V.P.3.s	être
responsable	A.qual.m.s	responsable
d'	P	de
une	D.ind.f.s	un
entité	N.C.f.s	entité
ou	C.C	ou
tâche	V.P.3.s	tâcher
très	ADV.-	très
bien	ADV.-	bien
définie	VK.f.s	définir
.	PONCT.S	.

UTILISER	N.P.m.s	Utiliser
AU	P+D.def.m.s	au
MAXIMUM	N.P.m.s	Maximum
L'	D.def.f.s	le
ENCAPSULATION	N.C.f.s	encapsulation
.	PONCT.S	.

L'	D.def.f.s	le
encapsulation	N.C.f.s	encapsulation
est	V.P.3.s	être
une	D.ind.f.s	un
technique	N.C.f.s	technique
de	P	de
base	N.C.f.s	base
pour	P	pour
réduire	VW	réduire
le	D.def.m.s	le
couplage	N.C.m.s	couplage
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
contribue	V.P.3.s	contribuer
à	P	à
séparer	VW	séparer
le	D.def.m.s	le
quoi	PRO.rel.m.s	quoi
et	C.C	et
le	D.def.m.s	le
comment	N.C.m.s	comment
,	PONCT.W	,
la	D.def.f.s	le
vue	N.C.f.s	vue
et	C.C	et
l'	D.def.f.s	le
implémentation	N.C.f.s	implémentation
,	PONCT.W	,
la	D.def.f.s	le
définition	N.C.f.s	définition
et	C.C	et
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
.	PONCT.S	.

Principe	N.C.m.s	principe
de	P	de
base	N.C.f.s	base
:	PONCT.W	:
rendre	VW	rendre
les	D.def.m.p	le
attributs	N.C.m.p	attribut
privés	A.qual.m.p	privé
et	C.C	et
utiliser	VW	utiliser
des	D.ind.f.p	du
méthodes	N.C.f.p	méthode
d'	P	de
accès	N.C.m.s	accès
.	PONCT.S	.

DECOUPLER	N.C.m.s	decoupler
ENTREES	N.C.f.p	entree
,	PONCT.W	,
TRAITEMENTS	N.C.m.p	traitement
ET	C.C	et
SORTIES	N.C.f.p	sortie
.	PONCT.S	.

Voir	VW	voir
en	P	en
particulier	N.C.m.s	particulier
section	N.C.f.s	section
13.2	D.card.m.p	@card@
ADOPTER	N.C.m.s	adopter
UNE	D.ind.f.s	un
CONCEPTION	N.C.f.s	conception
DIRIGEE	N.C.m.s	dirige
PAR	P	par
LES	D.def.m.p	le
RESPONSABILITÉS	N.C.f.p	responsabilité
.	PONCT.S	.

L'	D.def.f.s	le
attribution	N.C.f.s	attribution
des	P+D.def.f.p	du
bonnes	A.qual.f.p	bon
responsabilités	N.C.f.p	responsabilité
aux	P+D.def.f.p	au
bonnes	A.qual.f.p	bon
classes	N.C.f.p	classe
est	V.P.3.s	être
l'	D.def.m.s	le
un	PRO.ind.m.s	un
des	P+D.def.m.p	du
problèmes	N.C.m.p	problème
les	D.def.m.p	le
plus	ADV.-	plus
délicats	A.qual.m.p	délicat
de	P	de
la	D.def.f.s	le
conception	N.C.f.s	conception
orientée	VK.f.s	orienter
objet	N.C.m.s	objet
.	PONCT.S	.

La	D.def.f.s	le
programmation	N.C.f.s	programmation
dirigée	VK.f.s	diriger
par	P	par
les	D.def.f.p	le
responsabilités	N.C.f.p	responsabilité
est	V.P.3.s	être
un	D.ind.m.s	un
processus	N.C.m.s	processus
de	P	de
conception	N.C.f.s	conception
de	P	de
classes	N.C.f.p	classe
par	P	par
attribution	N.C.f.s	attribution
de	P	de
responsabilités	N.C.f.p	responsabilité
bien	ADV.-	bien
définies	VK.f.p	définir
à	P	à
chaque	D.ind.f.s	chaque
classe	N.C.f.s	classe
.	PONCT.S	.

Cette	D.dem.f.s	ce
approche	N.C.f.s	approche
peut	V.P.3.s	pouvoir
être	VW	être
utilisée	VK.f.s	utiliser
pour	P	pour
déterminer	VW	déterminer
quelle	D.int.f.s	quel
classe	N.C.f.s	classe
devrait	V.C.3.s	devoir
implémenter	VW	implémenter
telle	D.ind.f.s	tel
fonctionnalité	N.C.f.s	fonctionnalité
.	PONCT.S	.

Une	D.ind.f.s	un
conception	N.C.f.s	conception
dirigée	VK.f.s	diriger
par	P	par
les	D.def.f.p	le
responsabilités	N.C.f.p	responsabilité
contribue	V.P.3.s	contribuer
à	P	à
réduire	VW	réduire
le	D.def.m.s	le
couplage	N.C.m.s	couplage
.	PONCT.S	.

EVITER	VW	eviter
LA	D.def.f.s	le
DUPLICATION	N.C.f.s	duplication
DE	P	de
CODE	N.P.f.s	Code
.	PONCT.S	.

Eviter	VW	eviter
qu'	C.S	que
un	D.ind.m.s	un
même	A.ind.m.s	même
segment	N.C.m.s	segment
de	P	de
code	N.C.f.s	code
ne	ADV.neg	ne
se	CL.refl.3.m.s	se
retrouve	V.P.3.s	retrouver
plus	ADV.neg	plus
d'	P	de
une	D.ind.f.s	un
fois	N.C.f.s	foi
dans	P	dans
une	D.ind.f.s	un
application	N.C.f.s	application
.	PONCT.S	.

UTILISER	N.P.m.s	Utiliser
L'	D.def.f.s	le
HERITAGE	N.C.m.s	heritage
À	P	à
BON	N.P.m.s	Bon
ESCIENT	N.P.m.s	Escient
.	PONCT.S	.

L'	D.def.m.s	le
héritage	N.C.m.s	héritage
est	V.P.3.s	être
une	D.ind.f.s	un
relation	N.C.f.s	relation
"	PONCT.W	"
est_un	N.C.m.s	estçun
"	PONCT.W	"
,	PONCT.W	,
pas	ADV.neg	pas
une	D.ind.f.s	un
relation	N.C.f.s	relation
"	PONCT.W	"
a_un	A.qual.f.s	açun
"	PONCT.W	"
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
héritage	N.C.m.s	héritage
,	PONCT.W	,
les	D.def.m.p	le
objets	N.C.m.p	objet
doivent	V.P.3.p	devoir
avoir	VW	avoir
une	D.ind.f.s	un
relation	N.C.f.s	relation
"	PONCT.W	"
est_un	N.C.m.s	estçun
"	PONCT.W	"
avec	P	avec
leur	D.poss.f.s	leur
classe	N.C.f.s	classe
de	P	de
base	N.C.f.s	base
,	PONCT.W	,
afin	N.C.m.s	afin
que	C.S	que
l'	D.def.m.s	le
héritage	N.C.m.s	héritage
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
attributs	N.C.m.p	attribut
,	PONCT.W	,
propriétés	N.C.f.p	propriété
et	C.C	et
méthodes	N.C.f.p	méthode
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
de	P	de
base	N.C.f.s	base
garde	A.qual.f.s	garde
sens	N.C.m.s	sens
(	PONCT.W	(
même	ADV.-	même
si	C.S	si
la	D.def.f.s	le
sous-classe	N.C.f.s	sous-classe
en	P	en
spécialise	N.C.f.s	spécialise
ou	C.C	ou
les	D.def.m.p	le
complète	N.C.m.p	complète
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
objets	N.C.m.p	objet
ne	ADV.neg	ne
relevant	VG	relever
pas	ADV.neg	pas
strictement	ADV.-	strictement
d'	P	de
une	D.ind.f.s	un
relation	N.C.f.s	relation
"	PONCT.W	"
est_un	N.C.m.s	estçun
"	PONCT.W	"
doivent	V.P.3.p	devoir
se	CL.refl.3.m.p	se
traduire	VW	traduire
par	P	par
des	D.ind.f.p	du
classes	N.C.f.p	classe
ou	C.C	ou
interfaces	N.C.f.p	interface
sans	P	sans
relation	N.C.f.s	relation
d'	P	de
héritage	N.C.m.s	héritage
entre	P	entre
elles	PPRO.3.f.p	elle
.	PONCT.S	.

LIMITER	VW	limiter
LA	D.def.f.s	le
TAILLE	N.P.f.s	Taille
ET	C.C	et
COMPLEXITE	N.C.m.s	complexite
.	PONCT.S	.

Ne	ADV.neg	ne
pas	ADV.neg	pas
mettre	VW	mettre
trop	ADV.-	trop
de	P	de
choses	N.C.f.p	chose
dans	P	dans
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
:	PONCT.W	:
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
est	V.P.3.s	être
trop	ADV.-	trop
longue	A.qual.f.s	longue
si	C.S	si
elle	CL.suj.3.f.s	elle
fait	V.P.3.s	faire
plus	ADV.-	plus
d'	P	de
une	D.ind.f.s	un
tâche	N.C.f.s	tâche
logique	A.qual.f.s	logique
.	PONCT.S	.

Ne	ADV.neg	ne
pas	ADV.neg	pas
tout	PRO.ind.m.s	tout
mettre	VW	mettre
dans	P	dans
une	D.ind.f.s	un
seule	A.ind.f.s	seul
classe	N.C.f.s	classe
:	PONCT.W	:
une	D.ind.f.s	un
classe	N.C.f.s	classe
est	V.P.3.s	être
trop	ADV.-	trop
complexe	A.qual.f.s	complexe
si	C.S	si
elle	CL.suj.3.f.s	elle
représente	V.P.3.s	représenter
plus	ADV.-	plus
d'	P	de
une	D.ind.f.s	un
entité	N.C.f.s	entité
logique	A.qual.f.s	logique
.	PONCT.S	.

CHERCHER	N.P.m.s	Chercher
À	P	à
FACILITER	N.P.m.s	Faciliter
DES	P+D.def.m.p	du
CHANGEMENTS	N.C.m.p	changement
LOCALISES	N.P.m.s	Localises
.	PONCT.S	.

Réaliser	VW	réaliser
des	D.ind.m.p	du
changements	N.C.m.p	changement
dans	P	dans
une	D.ind.f.s	un
classe	N.C.f.s	classe
ne	ADV.neg	ne
devrait	V.C.3.s	devoir
avoir	VW	avoir
qu'	ADV.neg	qu'
un	D.ind.m.s	un
minimum	N.C.m.s	minimum
d'	P	de
impact	N.C.m.s	impact
sur	P	sur
les	D.def.f.p	le
autres	A.ind.f.p	autre
classes	N.C.f.p	classe
.	PONCT.S	.

La	D.def.f.s	le
localisation	N.C.f.s	localisation
des	P+D.def.m.p	du
changements	N.C.m.p	changement
est	V.P.3.s	être
l'	D.def.m.s	le
un	PRO.ind.m.s	un
des	P+D.def.m.p	du
buts	N.C.m.p	but
recherchés	VK.m.p	rechercher
d'	P	de
une	D.ind.f.s	un
bonne	A.qual.f.s	bon
conception	N.C.f.s	conception
de	P	de
classe	N.C.f.s	classe
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
le	D.def.m.s	le
produit	N.C.m.s	produit
d'	P	de
un	D.ind.m.s	un
couplage	N.C.m.s	couplage
faible	A.qual.m.s	faible
et	C.C	et
d'	P	de
une	D.ind.f.s	un
cohésion	N.C.f.s	cohésion
forte	A.qual.f.s	fort
.	PONCT.S	.

13.2	A.card.f.s	@card@
Architecture	N.C.f.s	architecture
d'	P	de
une	D.ind.f.s	un
application	N.C.f.s	application
interactive	A.qual.f.s	interactif
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
MVC	N.P.x.s	Mvc
L'	D.def.f.s	le
architecture	N.C.f.s	architecture
Modèle-Vue-Contrôleur	N.P.m.s	Modèle-Vue-Contrôleur
(	PONCT.W	(
Model-View-Controller	N.P.m.s	Model-View-Controller
,	PONCT.W	,
MVC	N.P.m.s	Mvc
)	PONCT.W	)
est	V.P.3.s	être
un	D.ind.m.s	un
modèle	N.C.m.s	modèle
d'	P	de
architecture	N.C.f.s	architecture
logicielle	A.qual.f.s	logiciel
recommandé	VK.m.s	recommander
-	PONCT.W	-
et	C.C	et
largement	ADV.-	largement
utilisé	VK.m.s	utiliser
-	PONCT.W	-
pour	P	pour
la	D.def.f.s	le
conception	N.C.f.s	conception
d'	P	de
applications	N.C.f.p	application
interactives	A.qual.f.p	interactif
.	PONCT.S	.

Ce	D.dem.m.s	ce
modèle	N.C.m.s	modèle
vise	V.P.3.s	viser
à	P	à
minimiser	VW	minimiser
le	D.def.m.s	le
degré	N.C.m.s	degré
de	P	de
couplage	N.C.m.s	couplage
entre	P	entre
les	D.def.m.p	le
objets	N.C.m.p	objet
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
en	P	en
découplant	VG	découpler
structurellement	ADV.-	structurellement
entrées	VK.f.p	entrer
,	PONCT.W	,
traitements	N.C.m.p	traitement
et	C.C	et
sorties	N.C.f.p	sortie
.	PONCT.S	.

Le	D.def.m.s	le
point	N.C.m.s	point
essentiel	A.qual.m.s	essentiel
consiste	V.P.3.s	consister
à	P	à
séparer	VW	séparer
les	D.def.m.p	le
objets	N.C.m.p	objet
relevant	VG	relever
de	P	de
l'	D.def.f.s	le
interface	N.C.m.s	interface
utilisateur	N.C.m.s	utilisateur
des	P+D.def.m.p	du
objets	N.C.m.p	objet
métier	A.qual.m.s	métier
,	PONCT.W	,
afin	N.C.m.s	afin
de	P	de
pouvoir	VW	pouvoir
les	CL.obj.3.m.p	le
faire	VW	faire
évoluer	VW	évoluer
indépendamment	ADV.-	indépendamment
et	C.C	et
les	CL.obj.3.m.p	le
réutiliser	VW	réutiliser
.	PONCT.S	.

MVC	N.P.m.s	Mvc
organise	V.P.3.s	organiser
une	D.ind.f.s	un
application	N.C.f.s	application
interactive	A.qual.f.s	interactif
en	P	en
trois	D.card.f.p	trois
grandes	A.qual.f.p	grand
composantes	N.C.f.p	composante
:	PONCT.W	:
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
,	PONCT.W	,
la	D.def.f.s	le
Vue	N.C.f.s	vue
et	C.C	et
le	D.def.m.s	le
Contrôleur	N.C.m.s	contrôleur
,	PONCT.W	,
et	C.C	et
découple	V.P.3.s	découpler
leurs	D.poss.f.p	leur
responsabilités	N.C.f.p	responsabilité
respectives	A.qual.f.p	respectif
:	PONCT.W	:
+	P	p
Le	D.def.m.s	le
MODELE	N.P.m.s	Modele
encapsule	V.P.3.s	encapsuler
la	D.def.f.s	le
fonctionnalité	N.C.f.s	fonctionnalité
et	C.C	et
les	D.def.f.p	le
données	N.C.f.p	donnée
coeur	N.C.m.s	cœur
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
indépendant	A.qual.m.s	indépendant
de	P	de
représentations	N.C.f.p	représentation
de	P	de
sortie	N.C.f.s	sortie
spécifiques	A.qual.f.p	spécifique
ou	C.C	ou
d'	P	de
un	D.ind.m.s	un
comportement	N.C.m.s	comportement
d'	P	de
entrée	N.C.f.s	entrée
.	PONCT.S	.

Il	CL.suj.3.m.s	il
a	V.P.3.s	avoir
à	P	à
charge	N.C.f.s	charge
la	D.def.f.s	le
représentation	N.C.f.s	représentation
interne	A.qual.f.s	interne
des	P+D.def.f.p	du
données	N.C.f.p	donnée
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
et	C.C	et
la	D.def.f.s	le
logique	N.C.f.s	logique
de	P	de
gestion	N.C.f.s	gestion
de	P	de
ces	D.dem.f.p	ce
données	N.C.f.p	donnée
.	PONCT.S	.

Il	CL.suj.3.m.s	il
notifie	V.P.3.s	notifier
à	P	à
la	D.def.f.s	le
composante	N.C.f.s	composante
Vue	VK.f.s	voir
les	D.def.m.p	le
changements	N.C.m.p	changement
de	P	de
données	N.C.f.p	donnée
et	C.C	et
lui	CL.obj.3.m.s	lui
permet	V.P.3.s	permettre
de	P	de
l'	CL.obj.3.f.s	la
interroger	VW	interroger
sur	P	sur
son	D.poss.m.s	son
état	N.C.m.s	état
.	PONCT.S	.

Il	CL.suj.3.m.s	il
fournit	V.P.3.s	fournir
au	P+D.def.m.s	au
contrôleur	N.C.m.s	contrôleur
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
accéder	VW	accéder
à	P	à
certaines	D.ind.f.p	certain
fonctionnalités	N.C.f.p	fonctionnalité
applicatives	A.qual.f.p	applicatif
encapsulées	VK.f.p	encapsuler
dans	P	dans
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
.	PONCT.S	.

+	P	p
La	D.def.f.s	le
VUE	A.ord.f.s	Vue
affiche	V.P.3.s	afficher
les	D.def.f.p	le
informations	N.C.f.p	information
à	P	à
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
récupère	V.P.3.s	récupérer
du	P+D.def.m.s	du
Modèle	N.P.m.s	Modèle
les	D.def.f.p	le
données	N.C.f.p	donnée
à	P	à
présenter	VW	présenter
à	P	à
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
,	PONCT.W	,
spécifie	V.P.3.s	spécifier
leur	D.poss.f.s	leur
présentation	N.C.f.s	présentation
externe	A.qual.f.s	externe
et	C.C	et
met	V.P.3.s	mettre
à	P	à
jour	N.C.m.s	jour
l'	D.def.f.s	le
information	N.C.f.s	information
affichée	VK.f.s	afficher
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
relaie	V.P.3.s	relayer
aussi	ADV.-	aussi
au	P+D.def.m.s	au
contrôleur	N.C.m.s	contrôleur
les	D.def.f.p	le
entrées	N.C.f.p	entrée
utilisateur	A.qual.m.s	utilisateur
et	C.C	et
l'	D.def.f.s	le
autorise	N.C.f.s	autorise
à	P	à
sélectionner	VW	sélectionner
les	D.def.f.p	le
vues	N.C.f.p	vue
.	PONCT.S	.

La	D.def.f.s	le
séparation	N.C.f.s	séparation
du	P+D.def.m.s	du
modèle	N.C.m.s	modèle
d'	P	de
une	D.ind.f.s	un
part	N.C.f.s	part
et	C.C	et
de	P	de
la	D.def.f.s	le
vue	N.C.f.s	vue
et	C.C	et
du	P+D.def.m.s	du
contrôleur	N.C.m.s	contrôleur
d'	P	de
autre	A.ind.f.s	autre
part	N.C.f.s	part
permet	V.P.3.s	permettre
des	D.ind.f.p	du
vues	N.C.f.p	vue
multiples	A.qual.f.p	multiple
d'	P	de
un	D.ind.m.s	un
même	A.qual.m.s	même
modèle	N.C.m.s	modèle
.	PONCT.S	.

Quand	C.S	quand
il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
plusieurs	D.ind.f.p	plusieurs
vues	N.C.f.p	vue
du	P+D.def.m.s	du
modèle	N.C.m.s	modèle
,	PONCT.W	,
chaque	D.ind.f.s	chaque
vue	N.C.f.s	vue
a	V.P.3.s	avoir
alors	ADV.-	alors
un	D.ind.m.s	un
contrôleur	N.C.m.s	contrôleur
associé	VK.m.s	associer
.	PONCT.S	.

+	P	p
Le	D.def.m.s	le
CONTROLEUR	N.P.m.s	Controleur
gère	V.P.3.s	gérer
les	D.def.f.p	le
entrées	N.C.f.p	entrée
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Il	CL.suj.3.m.s	il
reçoit	V.P.3.s	recevoir
les	D.def.f.p	le
entrées	N.C.f.p	entrée
,	PONCT.W	,
généralement	ADV.-	généralement
sous	P	sous
forme	N.C.f.s	forme
d'	P	de
événements	N.C.m.p	événement
encodant	VG	encoder
un	D.ind.m.s	un
mouvement	N.C.m.s	mouvement
de	P	de
la	D.def.f.s	le
souris	N.C.f.s	souris
,	PONCT.W	,
l'	D.def.f.s	le
activation	N.C.f.s	activation
d'	P	de
un	D.ind.m.s	un
bouton	N.C.m.s	bouton
,	PONCT.W	,
ou	C.C	ou
une	D.ind.f.s	un
entrée	N.C.f.s	entrée
clavier	A.qual.f.s	clavier
(	PONCT.W	(
ou	C.C	ou
bien	ADV.-	bien
,	PONCT.W	,
s'	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
application	N.C.f.s	application
web	N.C.m.s	web
,	PONCT.W	,
les	D.def.f.p	le
requêtes	N.C.f.p	requête
HTTP	N.P.m.s	Http
GET	N.P.m.s	Get
et	C.C	et
POST	N.P.m.s	Post
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
événements	N.C.m.p	événement
sont	V.P.3.p	être
traduits	VK.m.p	traduire
en	P	en
requêtes	N.C.f.p	requête
de	P	de
service	N.C.m.s	service
pour	P	pour
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
ou	C.C	ou
la	D.def.f.s	le
Vue	N.C.f.s	vue
.	PONCT.S	.

Une	D.ind.f.s	un
application	N.C.f.s	application
a	V.P.3.s	avoir
typiquement	ADV.-	typiquement
un	D.ind.m.s	un
contrôleur	N.C.m.s	contrôleur
pour	P	pour
chaque	D.ind.m.s	chaque
ensemble	N.C.m.s	ensemble
de	P	de
fonctionnalités	N.C.f.p	fonctionnalité
apparentées	VK.f.p	apparenter
.	PONCT.S	.

Une	D.ind.f.s	un
application	N.C.f.s	application
peut	V.P.3.s	pouvoir
avoir	VW	avoir
un	D.ind.m.s	un
contrôleur	N.C.m.s	contrôleur
séparé	VK.m.s	séparer
par	P	par
type	N.C.m.s	type
de	P	de
client	N.C.m.s	client
si	C.S	si
les	D.def.f.p	le
interactions	N.C.f.p	interaction
utilisateurs	N.C.m.p	utilisateur
varient	V.P.3.p	varier
selon	P	selon
les	D.def.m.p	le
types	N.C.m.p	type
de	P	de
client	N.C.m.s	client
.	PONCT.S	.

L'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
interagit	V.P.3.s	interagir
avec	P	avec
le	D.def.m.s	le
système	N.C.m.s	système
uniquement	ADV.-	uniquement
au	P+D.def.m.s	au
travers	N.C.m.s	travers
des	P+D.def.m.p	du
contrôleurs	N.C.m.p	contrôleur
.	PONCT.S	.

L'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
Vue	VK.f.s	voir
+	P	p
Contrôleur	N.P.m.s	Contrôleur
compose	V.P.3.s	composer
l'	D.def.f.s	le
interface	N.C.m.s	interface
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Modèle	N.C.m.s	modèle
Interrogation	N.C.f.s	interrogation
d'	P	de
état	N.C.m.s	état
Notification	N.C.f.s	notification
de	P	de
changement	N.C.m.s	changement
Changement	N.C.m.s	changement
d'	P	de
état	N.C.m.s	état
Vue	VK.f.s	voir
Requête	N.C.f.s	requête
utilisateur	N.C.m.s	utilisateur
Sélection	N.C.f.s	sélection
de	P	de
vue	N.C.f.s	vue
Contrôleur	N.C.m.s	contrôleur
invocation	N.C.f.s	invocation
de	P	de
méthodes	N.C.f.p	méthode
Evènements	N.P.x.s	Evènements
En	P	en
pratique	N.C.f.s	pratique
,	PONCT.W	,
ce	D.dem.m.s	ce
schéma	N.C.m.s	schéma
de	P	de
principe	N.C.m.s	principe
laisse	V.P.3.s	laisser
place	N.C.f.s	place
à	P	à
une	D.ind.f.s	un
grande	A.qual.f.s	grand
variété	N.C.f.s	variété
d'	P	de
implémentations	N.C.f.p	implémentation
possibles	A.qual.f.p	possible
.	PONCT.S	.

Une	D.ind.f.s	un
des	P+D.def.f.p	du
difficultés	N.C.f.p	difficulté
pour	P	pour
une	D.ind.f.s	un
implémentation	N.C.f.s	implémentation
idéale	A.qual.f.s	idéal
en	P	en
Java	N.P.m.s	Java
réside	V.P.3.s	résider
notamment	ADV.-	notamment
dans	P	dans
le	D.def.m.s	le
fait	N.C.m.s	fait
que	C.S	que
les	D.def.m.p	le
composants	N.C.m.p	composant
graphiques	A.qual.m.p	graphique
Swing	N.P.m.s	Swing
fusionnent	V.P.3.p	fusionner
les	D.def.f.p	le
parties	N.C.f.p	partie
Vues	VK.f.p	voir
et	C.C	et
Contrôleur	N.C.m.s	contrôleur
(	PONCT.W	(
cf	ET	cf
section	N.C.f.s	section
11.6	A.card.f.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Pour	P	pour
les	D.def.m.p	le
petits	A.qual.m.p	petit
programmes	N.C.m.p	programme
tout	ADV.-	tout
particulièrement	ADV.-	particulièrement
,	PONCT.W	,
la	D.def.f.s	le
Vue	N.C.f.s	vue
et	C.C	et
le	D.def.m.s	le
Contrôleur	N.C.m.s	contrôleur
sont	V.P.3.p	être
souvent	ADV.-	souvent
combinés	VK.m.p	combiner
,	PONCT.W	,
mais	C.C	mais
dans	P	dans
tous	A.ind.m.p	tous
les	D.def.m.p	le
cas	N.C.m.p	cas
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
doit	V.P.3.s	devoir
être	VW	être
séparé	VK.m.s	séparer
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
implémentation	N.C.f.s	implémentation
d'	P	de
une	D.ind.f.s	un
architecture	N.C.f.s	architecture
MVC	N.P.m.s	Mvc
:	PONCT.W	:
import	N.C.m.s	import
java.util.Observable	A.qual.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.util.Observer	N.C.m.s	<unknown>
;	PONCT.W	;
import	ET	import
javax.swing.JApplet	N.C.m.s	javax
;	PONCT.W	;
import	N.C.m.s	import
javax.swing.JPanel	N.C.m.s	javax
;	PONCT.W	;
import	N.C.m.s	import
java.awt.event.ActionListener	N.C.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.awt.event.ActionEvent	ET	<unknown>
;	PONCT.W	;
public	ET	public
class	ET	class
Controller	N.P.x.s	Controller
extends	ET	extend
JApplet	N.P.m.s	Japplet
implements	ADV.-	implements
ActionListener	VW	actionlistener
{	P	à
private	A.qual.f.s	privat
View	N.P.m.s	View
view	ET	view
;	PONCT.W	;
private	A.qual.f.s	privat
Model	N.P.m.s	Model
model	A.qual.m.s	model
;	PONCT.W	;
public	ET	public
void	ET	void
init()	N.C.m.s	initçë
{	P+D.def.m.s	c
model	N.C.m.s	model
=	ET	=
new	ET	new
Mode1()	N.P.m.s	<unknown>
;	PONCT.W	;
view	ET	view
=	PONCT.W	=
new	ET	new
View(model	N.P.m.s	Viewämodel
,	PONCT.W	,
this	N.C.m.s	thi
)	PONCT.W	)
;	PONCT.W	;
model.addObserver(view)	N.C.m.s	modeladdobserverävie
;	PONCT.W	;
this.setContentPane	N.C.m.s	<unknown>
(	PONCT.W	(
view	ET	view
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	A.qual.m.s	void
actionPerformed(ActionEvent	A.qual.m.s	<unknown>
e	P	e
)	PONCT.W	)
{	P	à
//	PONCT.W	@card@
Process	N.C.m.p	process
the	ET	the
events	N.C.m.p	event
}	P	à
}	N.C.m.s	}
public	A.qual.m.s	public
class	ET	class
View	N.P.m.s	View
extends	ET	extend
JPanel	N.P.m.s	Jpanel
implements	ET	implement
Observer	N.P.m.s	Observer
{	P	à
private	A.qual.f.s	privat
Model	N.P.m.s	Model
model	A.qual.m.s	model
;	PONCT.W	;
//	PONCT.W	@card@
Declare	N.P.m.s	Declare
here	P	here
the	ET	the
JPanel	N.P.m.s	Jpanel
components	A.qual.m.p	component
.	PONCT.S	.

public	A.qual.m.s	public
View(Model	N.P.m.s	Viewämodel
m	N.C.m.s	m
,	PONCT.W	,
ActionListener	N.P.m.s	Actionlistener
listener	N.C.m.s	listener
)	PONCT.W	)
{	P+D.def.m.s	c
model	N.C.m.s	model
=	PONCT.W	=
m	N.C.m.s	m
;	PONCT.W	;
makeContentPane(listener)	N.C.m.s	<unknown>
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	ET	void
update(Observable	N.C.m.s	<unknown>
o	PONCT.W	o
,	PONCT.W	,
Object	N.C.m.s	object
arg	N.C.m.s	arg
)	PONCT.W	)
{	N.C.m.s	{
//	PONCT.W	@card@
Automatically	ET	automatically
called	ET	called
when	ET	when
observer	VW	observer
is	CL.refl.3.m.s	<unknown>
notified	V.P.3.s	notifier
.	PONCT.S	.

//	PONCT.W	@card@
Update	N.P.f.s	Update
the	ET	the
view	N.C.f.s	view
.	PONCT.S	.

}	P	à
public	N.C.m.s	public
void	ET	void
makeContentPane(ActionListener	VW	<unknown>
listener	VW	listener
)	PONCT.W	)
{	N.P.x.s	{
//	PONCT.W	@card@
Create	ET	create
and	ET	and
initialize	ET	initialize
the	ET	the
JPanel	N.P.m.s	Jpanel
components	ET	component
and	ET	and
,	PONCT.W	,
//	PONCT.W	@card@
when	ET	when
need	ET	need
be	ET	be
,	PONCT.W	,
attach	ET	attach
them	ET	them
the	ET	the
event	V.P.3.p	evoir
listener	VW	listener
.	PONCT.S	.

//	PONCT.W	@card@
Define	V.P.3.s	definer
the	ET	the
layout	N.C.m.s	layout
.	PONCT.S	.

}	N.C.m.s	}
}	N.C.m.s	}
public	A.qual.m.s	public
class	ET	class
Model	N.P.m.s	Model
extends	ET	extend
Observable	ET	observable
{	P	à
//	PONCT.W	@card@
Wherever	N.P.m.s	Wherever
the	ET	the
value	N.C.f.s	value
of	ET	of
an	ET	an
attribute	V.P.3.s	attributer
interesting	N.C.m.s	interesting
the	ET	the
//	PONCT.W	@card@
View	N.P.m.s	View
is	CL.suj.3.m.p	is
changed	V.P.3.s	changeder
,	PONCT.W	,
insert	ET	insert
these	ET	these
two	ET	two
statements	N.C.m.p	statement
//	PONCT.W	@card@
setChanged()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
notifyObservers()	N.C.m.s	<unknown>
;	PONCT.W	;
or	N.C.m.s	or
notifyObservers(arg)	A.qual.m.s	<unknown>
;	PONCT.W	;
}	P	à
Chercher	VW	chercher
à	P	à
découpler	VW	découpler
les	D.def.m.p	le
traitements	N.C.m.p	traitement
des	P+D.def.f.p	du
entrées-sorties	N.C.f.p	entrées-sortie
est	V.P.3.s	être
classique	A.qual.m.s	classique
en	P	en
programmation	N.C.f.s	programmation
.	PONCT.S	.

Dans	P	dans
cet	D.dem.m.s	ce
esprit	N.C.m.s	esprit
,	PONCT.W	,
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
noter	VW	noter
en	P	en
particulier	N.C.m.s	particulier
que	C.S	que
le	D.def.m.s	le
modèle	N.C.m.s	modèle
MVC	N.P.x.s	Mvc
a	V.P.3.s	avoir
une	D.ind.f.s	un
certaine	A.qual.f.s	certain
similitude	N.C.f.s	similitude
avec	P	avec
la	D.def.f.s	le
classique	A.qual.f.s	classique
architecture	N.C.f.s	architecture
trois-tiers	A.ind.f.s	trois-tier
(	PONCT.W	(
three-tiers	N.C.m.s	three-tier
)	PONCT.W	)
des	P+D.def.m.p	du
systèmes	N.C.m.p	système
distribués	VK.m.p	distribuer
.	PONCT.S	.

Une	D.ind.f.s	un
architecture	N.C.f.s	architecture
trois-	D.card.m.p	<unknown>
tiers	N.C.m.p	tiers
est	V.P.3.s	être
une	D.ind.f.s	un
architecture	N.C.f.s	architecture
logicielle	A.qual.f.s	logiciel
client-serveur	N.C.f.s	client-serveur
dans	P	dans
laquelle	PRO.rel.f.s	lequel
l'	D.def.f.s	le
interface	N.C.f.s	interface
utilisateur	N.C.m.s	utilisateur
,	PONCT.W	,
la	D.def.f.s	le
logique	N.C.f.s	logique
de	P	de
traitement	N.C.m.s	traitement
et	C.C	et
les	D.def.f.p	le
données	N.C.f.p	donnée
sont	V.P.3.p	être
trois	D.card.m.p	trois
modules	N.C.m.p	module
indépendants	A.qual.m.p	indépendant
:	PONCT.W	:
l'	D.def.f.s	le
interface	N.C.f.s	interface
utilisateur	N.C.m.s	utilisateur
est	V.P.3.s	être
stockée	VK.f.s	stocker
dans	P	dans
le	D.def.m.s	le
client	N.C.m.s	client
,	PONCT.W	,
le	D.def.m.s	le
gros	N.C.m.s	gros
de	P	de
la	D.def.f.s	le
logique	N.C.f.s	logique
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
est	V.P.3.s	être
stocké	VK.m.s	stocker
dans	P	dans
le	D.def.m.s	le
ou	C.C	ou
les	D.def.m.p	le
serveurs	N.C.m.p	serveur
d'	P	de
application	N.C.f.s	application
,	PONCT.W	,
et	C.C	et
les	D.def.f.p	le
données	N.C.f.p	donnée
sont	V.P.3.p	être
stockées	VK.f.p	stocker
dans	P	dans
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
de	P	de
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
.	PONCT.S	.

Exemple	N.C.m.s	exemple
.	PONCT.S	.

Pour	P	pour
des	D.ind.f.p	du
applications	N.C.f.p	application
web	N.C.m.s	web
professionnelles	A.qual.f.p	professionnel
reposant	VG	reposer
sur	P	sur
une	D.ind.f.s	un
solution	N.C.f.s	solution
Java	N.P.m.s	Java
EE	N.P.m.s	Ee
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
,	PONCT.W	,
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
est	V.P.3.s	être
assuré	VK.m.s	assurer
par	P	par
des	D.ind.m.p	du
EJB	N.P.m.p	Ejb
et/ou	N.C.m.p	<unknown>
des	P+D.def.m.p	du
JavaBeans	N.C.m.p	javabean
,	PONCT.W	,
le	D.def.m.s	le
Contrôleur	N.C.m.s	contrôleur
est	V.P.3.s	être
assuré	VK.m.s	assurer
par	P	par
des	D.ind.m.p	du
servlets	N.C.m.p	servlet
,	PONCT.W	,
et	C.C	et
la	D.def.f.s	le
Vue	N.C.f.s	vue
par	P	par
des	D.ind.m.p	du
JSP	N.P.m.p	Jsp
(	PONCT.W	(
glossaire	N.C.m.s	glossaire
en	P	en
chapitre	N.C.m.s	chapitre
17	N.card.f.s	@card@
)	PONCT.W	)
.	PONCT.S	.

13.3	D.card.m.p	@card@
Tests	N.C.m.p	test
unitaires	A.qual.m.p	unitaire
13.3.1	D.card.f.p	@card@
Définitions	N.C.f.p	définition
Le	D.def.m.s	le
test	N.C.m.s	test
est	V.P.3.s	être
une	D.ind.f.s	un
activité	N.C.f.s	activité
qui	PRO.rel.f.s	qui
consiste	V.P.3.s	consister
à	P	à
déterminer	VW	déterminer
si	C.S	si
un	D.ind.m.s	un
segment	N.C.m.s	segment
de	P	de
code	N.C.m.s	code
(	PONCT.W	(
méthode	N.C.f.s	méthode
,	PONCT.W	,
classe	N.C.f.s	classe
ou	C.C	ou
programme	N.C.m.s	programme
)	PONCT.W	)
produit	V.P.3.s	produire
bien	ADV.-	bien
le	D.def.m.s	le
résultat	N.C.m.s	résultat
attendu	VK.m.s	attendre
.	PONCT.S	.

On	CL.suj.3.m.s	on
définit	V.P.3.s	définir
classiquement	ADV.-	classiquement
trois	D.card.m.p	trois
niveaux	N.C.m.p	niveau
de	P	de
tests	N.C.m.p	test
,	PONCT.W	,
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
mis	VK.m.s	mettre
en	P	en
oeuvre	N.C.f.s	œuvre
successivement	ADV.-	successivement
:	PONCT.W	:
+	P	p
Le	D.def.m.s	le
test	N.C.m.s	test
unitaire	A.qual.m.s	unitaire
(	PONCT.W	(
unit	V.J.3.s	unir
testing	N.C.m.s	testing
)	PONCT.W	)
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
tester	VW	tester
chaque	D.ind.f.s	chaque
composante	N.C.f.s	composante
individuelle	A.qual.f.s	individuel
(	PONCT.W	(
méthode	N.C.f.s	méthode
,	PONCT.W	,
classe	N.C.f.s	classe
)	PONCT.W	)
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
.	PONCT.S	.

+	P	p
le	D.def.m.s	le
test	N.C.m.s	test
d'	P	de
intégration	N.C.f.s	intégration
(	PONCT.W	(
integration	N.C.f.s	integration
testing	N.C.m.s	testing
)	PONCT.W	)
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
tester	VW	tester
des	D.ind.m.p	du
groupes	N.C.m.p	groupe
de	P	de
classes	N.C.f.p	classe
en	P	en
interrelations	N.C.f.p	interrelation
puis	C.C	pui
toute	A.ind.f.s	tout
l'	D.def.f.s	le
application	N.C.f.s	application
dans	P	dans
son	D.poss.m.s	son
ensemble	N.C.m.s	ensemble
.	PONCT.S	.

Les	D.def.m.p	le
tests	N.C.m.p	test
appliqués	VK.m.p	appliquer
suivent	V.P.3.p	suivre
généralement	ADV.-	généralement
un	D.ind.m.s	un
plan	N.C.m.s	plan
de	P	de
test	N.C.m.s	test
(	PONCT.W	(
i.e.	ADV.-	<unknown>
une	D.ind.f.s	un
approche	N.C.f.s	approche
systématique	A.qual.f.s	systématique
et	C.C	et
méthodique	A.qual.f.s	méthodique
)	PONCT.W	)
.	PONCT.S	.

+	P	p
le	D.def.m.s	le
test	N.C.m.s	test
système	N.C.m.s	système
(	PONCT.W	(
system	N.C.m.s	system
testing	N.C.m.s	testing
)	PONCT.W	)
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
tester	VW	tester
l'	D.def.f.s	le
application	N.C.f.s	application
intégrée	VK.f.s	intégrer
dans	P	dans
son	D.poss.m.s	son
environnement	N.C.m.s	environnement
d'	P	de
utilisation	N.C.f.s	utilisation
complet	A.qual.m.s	complet
.	PONCT.S	.

Ces	D.dem.m.p	ce
tests	N.C.m.p	test
entrent	V.P.3.p	entrer
dans	P	dans
la	D.def.f.s	le
catégorie	N.C.f.s	catégorie
des	P+D.def.m.p	du
tests	N.C.m.p	test
boîtes	N.C.f.p	boîte
noires	A.qual.f.p	noir
,	PONCT.W	,
et	C.C	et
,	PONCT.W	,
en	P	en
tant	ADV.-	tant
que	C.S	que
tels	A.qual.m.p	tel
,	PONCT.W	,
ne	ADV.neg	ne
devraient	V.C.3.p	devoir
pas	ADV.neg	pas
nécessiter	VW	nécessiter
de	D.ind.f.s	de
connaissance	N.C.f.s	connaissance
de	P	de
la	D.def.f.s	le
conception	N.C.f.s	conception
interne	A.qual.f.s	interne
du	P+D.def.m.s	du
code	N.C.m.s	code
ou	C.C	ou
de	P	de
sa	D.poss.f.s	son
logique	N.C.f.s	logique
.	PONCT.S	.

Les	D.def.f.p	le
considérations	N.C.f.p	considération
suivantes	A.qual.f.p	suivant
se	CL.refl.3.f.p	se
limiteront	V.F.3.p	limiter
essentiellement	ADV.-	essentiellement
aux	P+D.def.m.p	au
tests	N.C.m.p	test
unitaires	A.qual.m.p	unitaire
.	PONCT.S	.

Un	D.ind.m.s	un
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
est	V.P.3.s	être
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
conditions	N.C.f.p	condition
ou	C.C	ou
variables	A.qual.f.p	variable
à	P	à
partir	VW	partir
desquelles	PRO.rel.f.p	duquel
un	D.ind.m.s	un
testeur	N.C.m.s	testeur
déterminera	V.F.3.s	déterminer
si	C.S	si
une	D.ind.f.s	un
exigence	N.C.f.s	exigence
requise	A.qual.f.s	requis
est	V.P.3.s	être
complètement	ADV.-	complètement
ou	C.C	ou
partiellement	ADV.-	partiellement
satisfaite	VK.f.s	satisfaire
.	PONCT.S	.

Un	D.ind.m.s	un
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
est	V.P.3.s	être
caractérisé	VK.m.s	caractériser
par	P	par
une	D.ind.f.s	un
entrée	N.C.f.s	entrée
connue	VK.f.s	connaître
(	PONCT.W	(
pré-condition	N.C.m.s	pré-condition
)	PONCT.W	)
et	C.C	et
une	D.ind.f.s	un
sortie	N.C.f.s	sortie
attendue	A.qual.f.s	attendu
(	PONCT.W	(
post-	A.qual.f.s	<unknown>
condition	N.C.f.s	condition
)	PONCT.W	)
.	PONCT.S	.

De	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
cas	N.C.m.p	cas
de	P	de
tests	N.C.m.p	test
peuvent	V.P.3.p	pouvoir
être	VW	être
nécessaires	A.qual.m.p	nécessaire
pour	P	pour
vérifier	VW	vérifier
une	D.ind.f.s	un
exigence	N.C.f.s	exigence
donnée	VK.f.s	donner
.	PONCT.S	.

On	CL.suj.3.m.s	on
distingue	V.P.3.s	distinguer
généralement	ADV.-	généralement
deux	D.card.m.p	deux
types	N.C.m.p	type
de	P	de
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
:	PONCT.W	:
-	PONCT.W	-
les	D.def.m.p	le
cas	N.C.m.p	cas
de	P	de
test	N.C.m.s	test
positifs	A.qual.m.p	positif
,	PONCT.W	,
qui	PRO.rel.m.p	qui
consistent	V.P.3.p	consister
à	P	à
tester	VW	tester
des	D.ind.m.p	du
cas	N.C.m.p	cas
censés	A.qual.m.p	censé
faire	VW	faire
réussir	VW	réussir
la	D.def.f.s	le
fonctionnalité	N.C.f.s	fonctionnalité
.	PONCT.S	.

Ces	D.dem.m.p	ce
tests	N.C.m.p	test
doivent	V.P.3.p	devoir
nous	CL.obj.1.m.p	nous
convaincre	VW	convaincre
que	C.S	que
l'	D.def.m.s	le
élément	N.C.m.s	élément
de	P	de
code	N.C.m.s	code
testé	VK.m.s	tester
fonctionne	V.P.3.s	fonctionner
bien	ADV.-	bien
comme	P	comme
espéré	VK.m.s	espérer
.	PONCT.S	.

-	PONCT.W	-
les	D.def.m.p	le
cas	N.C.m.p	cas
de	P	de
test	N.C.m.s	test
négatifs	A.qual.m.p	négatif
,	PONCT.W	,
qui	PRO.rel.m.p	qui
consistent	V.P.3.p	consister
à	P	à
tester	VW	tester
des	D.ind.m.p	du
cas	N.C.m.p	cas
censés	A.qual.m.p	censé
mettre	VW	mettre
en	P	en
échec	N.C.m.s	échec
la	D.def.f.s	le
fonctionnalité	N.C.f.s	fonctionnalité
.	PONCT.S	.

Ce	CL.suj.3.m.s	ce
sont	V.P.3.p	être
toutes	A.ind.f.p	tout
les	D.def.f.p	le
situations	N.C.f.p	situation
de	P	de
valeurs	N.C.f.p	valeur
hors	P	hors
limites	N.C.f.p	limite
,	PONCT.W	,
d'	P	de
erreurs	N.C.f.p	erreur
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.

Exemples	N.C.m.p	exemple
:	PONCT.W	:
entrer	VW	entrer
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
hors	P	hors
plage	N.C.f.s	plage
,	PONCT.W	,
lire	VW	lire
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
vide	A.qual.m.s	vide
,	PONCT.W	,
...	PONCT.W	<unknown>
.	PONCT.S	.

Dans	P	dans
de	D.ind.m.p	de
tels	A.qual.m.p	tel
cas	N.C.m.p	cas
,	PONCT.W	,
nous	CL.suj.1.m.p	nous
devons	V.P.1.p	devoir
nous	CL.obj.1.m.p	nous
attendre	VW	attendre
à	P	à
ce	PRO.dem.m.s	ce
que	C.S	que
le	D.def.m.s	le
programme	N.C.m.s	programme
traite	V.P.3.s	traiter
l'	D.def.f.s	le
erreur	N.C.f.s	erreur
d'	P	de
une	D.ind.f.s	un
façon	N.C.f.s	façon
contrôlée	VK.f.s	contrôler
et	C.C	et
appropriée	A.qual.f.s	approprié
.	PONCT.S	.

La	D.def.f.s	le
simple	A.qual.f.s	simple
correction	N.C.f.s	correction
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
détectées	VK.f.p	détecter
par	P	par
un	D.ind.m.s	un
test	N.C.m.s	test
devrait	V.C.3.s	devoir
systématiquement	ADV.-	systématiquement
améliorer	VW	améliorer
la	D.def.f.s	le
qualité	N.C.f.s	qualité
du	P+D.def.m.s	du
programme	N.C.m.s	programme
.	PONCT.S	.

Malheureusement	ADV.-	malheureusement
,	PONCT.W	,
l'	D.def.f.s	le
expérience	N.C.f.s	expérience
montre	V.P.3.s	montrer
que	C.S	que
tout	D.ind.m.s	tout
changement	N.C.m.s	changement
dans	P	dans
le	D.def.m.s	le
programme	N.C.m.s	programme
peut	V.P.3.s	pouvoir
introduire	VW	introduire
,	PONCT.W	,
de	P	de
façon	N.C.f.s	façon
inattendue	A.qual.f.s	inattendu
,	PONCT.W	,
d'	D.ind.f.p	de
autres	A.ind.f.p	autre
erreurs	N.C.f.p	erreur
.	PONCT.S	.

En	P	en
particulier	N.C.m.s	particulier
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
de	P	de
régression	N.C.f.s	régression
(	PONCT.W	(
regression	N.C.f.s	regression
bugs	N.C.m.p	bug
)	PONCT.W	)
:	PONCT.W	:
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
de	P	de
régression	N.C.f.s	régression
survient	V.P.3.s	survenir
quand	C.S	quand
une	D.ind.f.s	un
fonctionnalité	N.C.f.s	fonctionnalité
qui	PRO.rel.f.s	qui
fonctionnait	V.I.3.s	fonctionner
précédemment	ADV.-	précédemment
ne	ADV.neg	ne
fonctionne	V.P.3.s	fonctionner
plus	ADV.neg	plus
suite	VK.f.s	suivre
à	P	à
une	D.ind.f.s	un
modification	N.C.f.s	modification
du	P+D.def.m.s	du
programme	N.C.m.s	programme
.	PONCT.S	.

Une	D.ind.f.s	un
méthode	N.C.f.s	méthode
courante	A.qual.f.s	courant
de	P	de
test	N.C.m.s	test
de	P	de
non-régression	N.C.f.s	non-régression
(	PONCT.W	(
non-regression	N.C.f.s	non-regression
testing	N.C.m.s	testing
)	PONCT.W	)
consiste	V.P.3.s	consister
à	P	à
réexécuter	VW	réexécuter
les	D.def.m.p	le
tests	N.C.m.p	test
réalisés	VK.m.p	réaliser
antérieurement	ADV.-	antérieurement
et	C.C	et
voir	VW	voir
si	C.S	si
des	D.ind.m.p	du
défauts	N.C.m.p	défaut
apparaissent	V.P.3.p	apparaître
voire	ADV.-	voire
réapparaissent	V.P.3.p	réapparaître
.	PONCT.S	.

Les	D.def.m.p	le
tests	N.C.m.p	test
devant	VG	devoir
donc	ADV.-	donc
être	VW	être
appliqués	VK.m.p	appliquer
non	ADV.neg	non
pas	ADV.neg	pas
une	D.ind.f.s	un
seule	A.ind.f.s	seul
fois	N.C.f.s	foi
mais	C.C	mais
à	P	à
chaque	D.ind.f.s	chaque
modification	N.C.f.s	modification
du	P+D.def.m.s	du
logiciel	N.C.m.s	logiciel
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
souhaitable	A.qual.m.s	souhaitable
de	P	de
disposer	VW	disposer
d'	P	de
une	D.ind.f.s	un
batterie	N.C.f.s	batterie
de	P	de
tests	N.C.m.p	test
programmés	VK.m.p	programmer
afin	ADV.-	afin
de	P	de
permettre	VW	permettre
une	D.ind.f.s	un
automatisation	N.C.f.s	automatisation
du	P+D.def.m.s	du
test	N.C.m.s	test
.	PONCT.S	.

Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
donc	ADV.-	donc
de	P	de
programmer	VW	programmer
des	D.ind.m.p	du
cas	N.C.m.p	cas
de	P	de
test	N.C.m.s	test
pour	P	pour
chaque	D.ind.f.s	chaque
méthode	N.C.f.s	méthode
non	ADV.neg	non
triviale	A.qual.f.s	trivial
,	PONCT.W	,
en	P	en
veillant	VG	veiller
à	P	à
ce	PRO.dem.m.s	ce
que	C.S	que
chaque	D.ind.m.s	chaque
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
soit	V.S.3.s	être
bien	ADV.-	bien
séparé	VK.m.s	séparer
des	P+D.def.m.p	du
autres	PRO.ind.m.p	autre
.	PONCT.S	.

13.3.2	D.card.m.p	@card@
JUnit	N.P.m.s	Junit
JUnit	N.P.m.s	Junit
,	PONCT.W	,
développé	VK.m.s	développer
par	P	par
la	D.def.f.s	le
communauté	N.C.f.s	communauté
open	ET	open
source	N.C.f.s	source
,	PONCT.W	,
offre	V.P.3.s	offrir
un	D.ind.m.s	un
cadre	N.C.m.s	cadre
d'	P	de
applications	N.C.f.p	application
(	PONCT.W	(
framework	N.C.m.s	framework
)	PONCT.W	)
pour	P	pour
la	D.def.f.s	le
programmation	N.C.f.s	programmation
de	P	de
tests	N.C.m.p	test
de	P	de
régression	N.C.f.s	régression
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
utilisé	VK.m.s	utiliser
pour	P	pour
implémenter	VW	implémenter
des	D.ind.m.p	du
tests	N.C.m.p	test
unitaires	A.qual.m.p	unitaire
en	P	en
Java	N.P.m.s	Java
.	PONCT.S	.

La	D.def.f.s	le
classe	N.C.f.s	classe
TestCase	N.P.m.s	Testcase
permet	V.P.3.s	permettre
de	P	de
définir	VW	définir
un	D.ind.m.s	un
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
;	PONCT.W	;
la	D.def.f.s	le
classe	N.C.f.s	classe
Assert	N.P.m.s	Assert
fournit	V.P.3.s	fournir
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
méthodes	N.C.f.p	méthode
facilitant	VG	faciliter
la	D.def.f.s	le
gestion	N.C.f.s	gestion
des	P+D.def.f.p	du
erreurs	N.C.f.p	erreur
détectées	VK.f.p	détecter
;	PONCT.W	;
la	D.def.f.s	le
classe	N.C.f.s	classe
TestSuite	N.P.m.s	Testsuite
permet	V.P.3.s	permettre
d'	P	de
exécuter	VW	exécuter
une	D.ind.f.s	un
suite	N.C.f.s	suite
de	P	de
tests	N.C.m.p	test
;	PONCT.W	;
la	D.def.f.s	le
classe	N.C.f.s	classe
TestRunner	N.P.m.s	Testrunner
est	V.P.3.s	être
un	D.ind.m.s	un
outil	N.C.m.s	outil
d'	P	de
exploitation	N.C.f.s	exploitation
permettant	VG	permettre
de	P	de
définir	VW	définir
une	D.ind.f.s	un
suite	N.C.f.s	suite
de	P	de
tests	N.C.m.p	test
à	P	à
exécuter	VW	exécuter
et	C.C	et
d'	P	de
afficher	VW	afficher
les	D.def.m.p	le
résultats	N.C.m.p	résultat
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
cas	N.C.m.s	cas
de	P	de
test	N.C.m.s	test
:	PONCT.W	:
/**	D.card.m.p	<unknown>
*	N.C.m.p	*
A	P	à
test	N.C.m.s	test
case	V.P.3.s	caser
for	ET	for
the	ET	the
class	ET	class
MyClass	N.P.m.s	Myclass
*/	P	à
import	N.C.m.s	import
junit.framework.*	ET	<unknown>
;	PONCT.W	;
public	ET	public
class	ET	class
TestMyClass	N.P.m.s	Testmyclass
extends	ET	extend
TestCase	ET	testcase
{	P	à
/*	ET	<unknown>
The	ET	the
tests	N.C.m.p	test
need	ET	need
to	ET	to
run	D.neg.m.s	run
against	V.P.3.s	<unknown>
the	ET	the
background	ET	background
of	ET	of
à	P	à
known	ET	known
*	ET	*
set	D.card.m.p	<unknown>
of	ET	of
objects	N.C.m.p	object
.	PONCT.S	.

This	N.P.m.s	This
set	D.card.m.p	<unknown>
of	ET	of
objects	N.C.m.p	object
is	CL.suj.3.m.p	is
called	ET	called
à	P	à
test	N.C.m.s	test
*	N.C.m.s	*
fixture	N.C.f.s	fixture
.	PONCT.S	.

*	N.C.m.s	*
Define	V.P.3.s	definer
here	A.qual.f.s	here
an	ET	an
instance	N.C.f.s	instance
variable	A.qual.f.s	variable
for	ET	for
each	ET	each
part	ET	part
of	ET	of
the	ET	the
*	ET	*
fixture	N.C.f.s	fixture
.	PONCT.S	.

*/	PONCT.W	<unknown>
private	A.qual.f.s	privat
MyClass	N.P.m.s	Myclass
myObject	N.C.m.s	myobject
;	PONCT.W	;
public	ET	public
TestMyClass(String	ET	testmyclass-string
name	ET	name
)	PONCT.W	)
{	P	à
super	N.C.m.p	super
(	PONCT.W	(
name	N.C.f.s	name
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.p	}
/**	N.C.m.p	<unknown>
*	N.C.m.p	*
Sets	N.C.m.p	set
up	D.ind.m.s	up
the	ET	the
test	V.P.3.s	tenir
fixture	N.C.f.s	fixture
.	PONCT.S	.

*	ET	*
setUp()	ET	setupçë
is	ET	is
called	ET	called
before	ET	before
every	ET	every
test	ET	test
case	N.C.f.s	case
method	N.C.m.s	method
.	PONCT.S	.

*	N.C.m.s	*
Initializes	ET	initialize
the	ET	the
instance	N.C.f.s	instance
variables	A.qual.f.p	variable
.	PONCT.S	.

*/	PONCT.W	<unknown>
protected	ET	protected
void	ET	void
setUp()	N.C.m.s	setupçë
{	P+D.def.m.s	c
myObject	N.C.m.s	myobject
=	PONCT.W	=
new	ET	new
MyClass(	N.P.m.s	Myclassü
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.

)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.p	}
/**	N.C.m.p	<unknown>
*	ET	*
Tears	ET	tear
down	ET	down
the	ET	the
test	V.P.3.s	tenir
fixture	N.C.f.s	fixture
.	PONCT.S	.

*	ET	*
tearDown()	N.C.m.s	teardownçë
is	CL.suj.3.m.p	is
called	ET	called
after	ET	after
every	ET	every
test	ET	test
case	N.C.f.s	case
method	N.C.m.s	method
.	PONCT.S	.

*	ET	*
Releases	ET	release
any	ET	any
permanent	ET	permanent
resources	N.C.f.p	resource
allocated	ET	allocated
in	ET	in
setUp	ET	setup
*	N.C.m.s	*
(	PONCT.W	(
example	N.C.m.s	example
:	PONCT.W	:
closes	N.C.f.p	close
files	A.qual.f.p	file
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
*/	PONCT.W	<unknown>
protected	ET	protected
void	ET	void
tearDown()	N.C.m.s	teardownçë
{	P	à
//	PONCT.W	@card@
...	PONCT.W	<unknown>
}	N.C.m.s	}
//	PONCT.W	@card@
Once	ET	once
the	ET	the
fixture	N.C.f.s	fixture
is	VK.m.s	aller
in	CL.suj.3.m.s	in
place	V.P.3.s	placer
,	PONCT.W	,
as	ET	as
many	ET	many
Test	N.P.m.s	Test
Cases	N.P.m.s	Cases
as	ET	as
//	PONCT.W	@card@
necessary	ET	necessary
can	ET	can
be	A.qual.m.s	be
written	ET	written
.	PONCT.S	.

/**	N.C.m.p	<unknown>
*	ET	*
Tests	ET	test
the	ET	the
method	ET	method
methodX()	ET	methodxçë
*/	PONCT.W	<unknown>
public	A.qual.m.s	public
void	A.qual.m.s	void
testMethodX()	N.C.m.s	testmethodxçë
{	P+D.def.m.s	c
ArgumentType	N.P.m.s	Argumenttype
argument	N.C.m.s	argument
=	PONCT.W	=
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.

;	PONCT.W	;
ResponseType	N.C.m.s	responsetype
expectedResponse	V.P.3.s	expectedresponser
=	PONCT.W	=
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.

;	PONCT.W	;
String	N.P.m.s	String
errorMessage	N.C.m.s	errormessage
=	PONCT.W	=
"	PONCT.W	"
.	PONCT.S	.

.	PONCT.S	.

.	PONCT.S	.

"	PONCT.W	"
;	PONCT.W	;
assertTrue(errorMessage	N.C.m.s	<unknown>
,	PONCT.W	,
expectedResponse.equals(MethodX(argument))	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
end	P	end
class	N.C.m.p	class
TestMyClass	N.P.m.s	Testmyclass
JUnit	N.P.m.s	Junit
détermine	V.P.3.s	déterminer
le	D.def.m.s	le
succès	N.C.m.s	succès
où	PRO.rel.m.s	où
l'	D.def.m.s	le
échec	N.C.m.s	échec
d'	P	de
un	D.ind.m.s	un
test	N.C.m.s	test
via	P	via
des	D.ind.f.p	du
instructions	N.C.f.p	instruction
d'	P	de
assertion	N.C.f.s	assertion
.	PONCT.S	.

Une	D.ind.f.s	un
assertion	N.C.f.s	assertion
est	V.P.3.s	être
simplement	ADV.-	simplement
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
de	P	de
comparaison	N.C.f.s	comparaison
entre	P	entre
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
espérée	A.qual.f.s	espéré
et	C.C	et
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
effective	A.qual.f.s	effectif
et	C.C	et
qui	PRO.rel.f.s	qui
génère	V.P.3.s	générer
un	D.ind.m.s	un
échec	N.C.m.s	échec
en	P	en
cas	N.C.m.s	cas
de	P	de
différence	N.C.f.s	différence
.	PONCT.S	.

Les	D.def.f.p	le
procédures	N.C.f.p	procédure
d'	P	de
assertion	N.C.f.s	assertion
disponibles	A.qual.f.p	disponible
sont	V.P.3.p	être
définies	VK.f.p	définir
dans	P	dans
la	D.def.f.s	le
classe	N.C.f.s	classe
junit.framework.Assert	A.qual.f.s	<unknown>
.	PONCT.S	.

Exemples	N.C.m.p	exemple
d'	P	de
instructions	N.C.f.p	instruction
d'	P	de
assertion	N.C.f.s	assertion
:	PONCT.W	:
assertTrue(	N.C.m.s	<unknown>
errorMessage	N.C.m.s	errormessage
,	PONCT.W	,
booleanCondition	N.C.f.s	booleancondition
)	PONCT.W	)
;	PONCT.W	;
assertFalse(	ET	<unknown>
errorMessage	N.C.m.s	errormessage
,	PONCT.W	,
booleanCondition	N.C.f.s	booleancondition
)	PONCT.W	)
;	PONCT.W	;
assertEquals(	ET	assertequalsà
errorMessage	N.C.m.s	errormessage
,	PONCT.W	,
expectedValue	N.C.f.s	<unknown>
,	PONCT.W	,
actualValue	N.C.f.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
assertEquals(	ET	assertequalsà
errorMessage	N.C.m.s	errormessage
,	PONCT.W	,
doubleExpected	N.C.m.s	<unknown>
,	PONCT.W	,
doubleActual	A.qual.m.s	doubleactual
,	PONCT.W	,
doubleDelta	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Pour	P	pour
exécuter	VW	exécuter
le	D.def.m.s	le
test	N.C.m.s	test
,	PONCT.W	,
créer	VW	créer
une	D.ind.f.s	un
instance	N.C.f.s	instance
de	P	de
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
avec	P	avec
en	P	en
paramètre	N.C.m.s	paramètre
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
test	N.C.m.s	test
.	PONCT.S	.

Exemple	N.C.m.s	exemple
new	ET	new
TestMyClass("testMethodX")	N.P.m.s	<unknown>
;	PONCT.W	;
JUnit	N.P.m.s	Junit
est	V.P.3.s	être
intégré	VK.m.s	intégrer
dans	P	dans
certains	D.ind.m.p	certain
outils	N.C.m.p	outil
de	P	de
développement	N.C.m.s	développement
.	PONCT.S	.

De	D.ind.m.p	de
tels	A.qual.m.p	tel
outils	N.C.m.p	outil
offrent	V.P.3.p	offrir
alors	ADV.-	alors
des	D.ind.f.p	du
fonctionnalités	N.C.f.p	fonctionnalité
qui	PRO.rel.f.p	qui
permettent	V.P.3.p	permettre
de	P	de
créer	VW	créer
facilement	ADV.-	facilement
des	D.ind.m.p	du
tests	N.C.m.p	test
.	PONCT.S	.

13.4	A.card.m.s	@card@
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
Un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
(	PONCT.W	(
"	PONCT.W	"
grain	A.qual.m.s	grain
java	N.C.m.s	java
"	PONCT.W	"
)	PONCT.W	)
est	V.P.3.s	être
défini	VK.m.s	définir
par	P	par
Sun	N.P.m.s	Sun
comme	P	comme
"	PONCT.W	"
un	D.ind.m.s	un
composant	N.C.m.s	composant
réutilisable	A.qual.m.s	réutilisable
Java	N.P.m.s	Java
destiné	VK.m.s	destiner
à	P	à
être	VW	être
manipulé	VK.m.s	manipuler
par	P	par
un	D.ind.m.s	un
outil	N.C.m.s	outil
de	P	de
développement	N.C.m.s	développement
graphique	A.qual.m.s	graphique
visuel	A.qual.m.s	visuel
"	PONCT.W	"
.	PONCT.S	.

Les	D.def.m.p	le
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
sont	V.P.3.p	être
des	D.ind.m.p	du
composants	N.C.m.p	composant
Java	N.P.m.s	Java
(	PONCT.W	(
i.e.	ADV.-	<unknown>
des	D.ind.f.p	du
classes	N.C.f.p	classe
)	PONCT.W	)
respectant	VG	respecter
certains	D.ind.m.p	certain
critères	N.C.m.p	critère
afin	ADV.-	afin
de	P	de
pouvoir	VW	pouvoir
être	VW	être
facilement	ADV.-	facilement
développés	VK.m.p	développer
,	PONCT.W	,
assemblés	VK.m.p	assembler
et	C.C	et
réutilisés	VK.m.p	réutiliser
pour	P	pour
créer	VW	créer
des	D.ind.f.p	du
applications	N.C.f.p	application
sophistiquées	A.qual.f.p	sophistiqué
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
la	D.def.f.s	le
technologie	N.C.f.s	technologie
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
est	V.P.3.s	être
l'	D.def.f.s	le
architecture	N.C.f.s	architecture
des	P+D.def.m.p	du
composants	N.C.m.p	composant
dans	P	dans
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
.	PONCT.S	.

Les	D.def.f.p	le
obligations	N.C.f.p	obligation
que	PRO.rel.f.p	que
doit	V.P.3.s	devoir
respecter	VW	respecter
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
sont	V.P.3.p	être
nombreuses	A.qual.f.p	nombreux
mais	C.C	mais
l'	D.def.m.s	le
enjeu	N.C.m.s	enjeu
est	V.P.3.s	être
d'	P	de
importance	N.C.f.s	importance
:	PONCT.W	:
disposer	VW	disposer
de	P	de
composants	N.C.m.p	composant
"	PONCT.W	"
Write	A.qual.f.s	writ
One	N.P.f.s	One
,	PONCT.W	,
Run	N.P.m.s	Run
Anywhere	N.P.m.s	Anywhere
"	PONCT.W	"
(	PONCT.W	(
WORA	ET	wora
)	PONCT.W	)
réutilisables	A.qual.m.p	réutilisable
.	PONCT.S	.

Les	D.def.m.p	le
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
sont	V.P.3.p	être
des	D.ind.f.p	du
classes	N.C.f.p	classe
publiques	A.qual.f.p	publique
concrètes	A.qual.f.p	concret
qui	PRO.rel.f.p	qui
ont	V.P.3.p	avoir
pour	P	pour
caractéristiques	N.C.f.p	caractéristique
communes	A.qual.f.p	commun
de	P	de
:	PONCT.W	:
+	P	p
supporter	VW	supporter
des	D.ind.f.p	du
"	PONCT.W	"
propriétés	N.C.f.p	propriété
"	PONCT.W	"
:	PONCT.W	:
les	D.def.f.p	le
propriétés	N.C.f.p	propriété
sont	V.P.3.p	être
les	D.def.m.p	le
attributs	N.C.m.p	attribut
discrets	A.qual.m.p	discret
nommés	VK.m.p	nommer
d'	P	de
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
qui	PRO.rel.m.p	qui
peuvent	V.P.3.p	pouvoir
affecter	VW	affecter
son	D.poss.f.s	son
apparence	N.C.f.s	apparence
ou	C.C	ou
son	D.poss.m.s	son
comportement	N.C.m.s	comportement
.	PONCT.S	.

Les	D.def.f.p	le
propriétés	N.C.f.p	propriété
sont	V.P.3.p	être
pour	P	pour
les	D.def.m.p	le
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
l'	D.def.m.s	le
équivalent	N.C.m.s	équivalent
des	P+D.def.m.p	du
champs	N.C.m.p	champ
pour	P	pour
les	D.def.m.p	le
objets	N.C.m.p	objet
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
un	D.ind.m.s	un
bouton	N.C.m.s	bouton
graphique	A.qual.m.s	graphique
pourrait	V.C.3.s	pouvoir
avoir	VW	avoir
une	D.ind.f.s	un
propriété	N.C.f.s	propriété
nommée	VK.f.s	nommer
"	PONCT.W	"
label	N.C.m.s	label
"	PONCT.W	"
qui	PRO.rel.m.s	qui
représenterait	V.C.3.s	représenter
le	D.def.m.s	le
texte	N.C.m.s	texte
affiché	VK.m.s	afficher
dans	P	dans
le	D.def.m.s	le
bouton	N.C.m.s	bouton
.	PONCT.S	.

Les	D.def.f.p	le
méthodes	N.C.f.p	méthode
d'	P	de
accès	N.C.m.s	accès
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
doivent	V.P.3.p	devoir
respecter	VW	respecter
des	D.ind.f.p	du
conventions	N.C.f.p	convention
de	P	de
nommage	N.C.m.s	nommage
particulières	A.qual.f.p	particulier
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
-	PONCT.W	-
pour	P	pour
les	D.def.f.p	le
propriétés	N.C.f.p	propriété
simples	A.qual.f.p	simple
(	PONCT.W	(
il	CL.suj.3.m.s	il
en	CL.obj.3.m.s	en
existe	V.P.3.s	exister
d'	D.ind.f.p	de
autres	A.ind.f.p	autre
:	PONCT.W	:
liées	VK.f.p	lier
,	PONCT.W	,
contraintes	VK.f.p	contraindre
,	PONCT.W	,
indexées	VK.f.p	indexer
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
:	PONCT.W	:
PropertyType	N.P.m.s	Propertytype
getPropertyName()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
simple	A.qual.f.s	simple
getter	VW	getter
void	ET	void
setPropertyName(PropertyType)	A.qual.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
simple	A.qual.m.s	simple
setter	VW	setter
-	PONCT.W	-
pour	P	pour
les	D.def.f.p	le
propriétés	N.C.f.p	propriété
booléennes	A.qual.f.p	booléen
,	PONCT.W	,
on	CL.suj.3.m.s	on
utilise	V.P.3.s	utiliser
typiquement	ADV.-	typiquement
is	VK.m.s	aller
au	P+D.def.m.s	au
lieu	N.C.m.s	lieu
de	P	de
get	N.C.m.s	get
+	P	p
communiquer	VW	communiquer
entre	P	entre
eux	PPRO.3.m.p	eux
par	P	par
événements	N.C.m.p	événement
:	PONCT.W	:
en	P	en
pratique	N.C.f.s	pratique
,	PONCT.W	,
on	CL.suj.3.m.s	on
utilise	V.P.3.s	utiliser
la	D.def.f.s	le
technique	N.C.f.s	technique
Swing	N.P.m.s	Swing
des	P+D.def.m.p	du
"	PONCT.W	"
listeners	N.C.m.p	listener
"	PONCT.W	"
(	PONCT.W	(
voir	VW	voir
section	N.C.f.s	section
11.4	A.card.f.s	@card@
)	PONCT.W	)
;	PONCT.W	;
+	P	p
supporter	VW	supporter
l'	D.def.f.s	le
introspection	N.C.f.s	introspection
:	PONCT.W	:
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
et	C.C	et
dans	P	dans
l'	D.def.m.s	le
environnement	N.C.m.s	environnement
de	P	de
développement	N.C.m.s	développement
,	PONCT.W	,
on	CL.suj.3.m.s	on
doit	V.P.3.s	devoir
être	VW	être
capable	A.qual.m.s	capable
de	P	de
déterminer	VW	déterminer
et	C.C	et
d'	P	de
analyser	VW	analyser
les	D.def.f.p	le
propriétés	N.C.f.p	propriété
,	PONCT.W	,
les	D.def.m.p	le
événements	N.C.m.p	événement
et	C.C	et
les	D.def.f.p	le
méthodes	N.C.f.p	méthode
que	PRO.rel.f.p	que
supporte	V.P.3.s	supporter
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
.	PONCT.S	.

A	P	à
noter	VW	noter
que	C.S	que
cette	D.dem.f.s	ce
propriété	N.C.f.s	propriété
d'	P	de
introspection	N.C.f.s	introspection
est	V.P.3.s	être
déjà	ADV.-	déjà
présente	A.qual.f.s	présent
dans	P	dans
les	D.def.m.p	le
objets	N.C.m.p	objet
Java	N.P.m.s	Java
puisqu'	C.S	puisque
un	D.ind.m.s	un
objet	N.C.m.s	objet
peut	V.P.3.s	pouvoir
être	VW	être
analysé	VK.m.s	analyser
grâce	N.C.f.s	grâce
aux	P+D.def.f.p	au
classes	N.C.f.p	classe
Class	N.P.m.s	Class
,	PONCT.W	,
Method	N.P.m.s	Method
,	PONCT.W	,
Field	N.P.m.s	Field
,	PONCT.W	,
+	P	p
supporter	VW	supporter
la	D.def.f.s	le
personnalisation	N.C.f.s	personnalisation
(	PONCT.W	(
"	PONCT.W	"
customization	N.C.f.s	customization
"	PONCT.W	"
)	PONCT.W	)
:	PONCT.W	:
les	D.def.m.p	le
outils	N.C.m.p	outil
de	P	de
développement	N.C.m.s	développement
doivent	V.P.3.p	devoir
permettre	VW	permettre
de	P	de
modifier	VW	modifier
l'	D.def.f.s	le
apparence	N.C.f.s	apparence
et	C.C	et
le	D.def.m.s	le
comportement	N.C.m.s	comportement
d'	P	de
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
en	P	en
phase	N.C.f.s	phase
de	P	de
conception	N.C.f.s	conception
;	PONCT.W	;
+	P	p
supporter	VW	supporter
la	D.def.f.s	le
persistance	N.C.f.s	persistance
:	PONCT.W	:
la	D.def.f.s	le
persistance	N.C.f.s	persistance
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
la	D.def.f.s	le
capacité	N.C.f.s	capacité
de	P	de
le	CL.obj.3.m.s	le
sauvegarder	VW	sauvegarder
sur	P	sur
un	D.ind.m.s	un
support	N.C.m.s	support
de	P	de
stockage	N.C.m.s	stockage
et	C.C	et
de	P	de
le	CL.obj.3.m.s	le
restaurer	VW	restaurer
à	P	à
l'	D.def.m.s	le
identique	A.qual.m.s	identique
afin	N.C.m.s	afin
que	C.S	que
le	D.def.m.s	le
programme	N.C.m.s	programme
puisse	V.S.3.s	pouvoir
se	CL.refl.3.m.s	se
terminer	VW	terminer
sans	P	sans
que	C.S	que
cet	D.dem.m.s	ce
objet	N.C.m.s	objet
soit	V.S.3.s	être
perdu	VK.m.s	perdre
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
persistance	N.C.f.s	persistance
:	PONCT.W	:
qu'	C.S	que
un	D.ind.m.s	un
objet	N.C.m.s	objet
puisse	V.S.3.s	pouvoir
prétendre	VW	prétendre
à	P	à
être	VW	être
un	D.ind.m.s	un
document	N.C.m.s	document
Excel	A.qual.m.s	excel
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
un	D.ind.m.s	un
document	N.C.m.s	document
Word	N.P.m.s	Word
.	PONCT.S	.

Le	D.def.m.s	le
mécanisme	N.C.m.s	mécanisme
qui	PRO.rel.m.s	qui
rend	V.P.3.s	rendre
possible	A.qual.f.s	possible
la	D.def.f.s	le
persistance	N.C.f.s	persistance
est	V.P.3.s	être
appelé	VK.m.s	appeler
"	PONCT.W	"
sérialisation	N.C.f.s	sérialisation
"	PONCT.W	"
(	PONCT.W	(
serialization	N.C.f.s	serialization
)	PONCT.W	)
.	PONCT.S	.

A	P	à
cette	D.dem.f.s	ce
fin	N.C.f.s	fin
,	PONCT.W	,
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
doit	V.P.3.s	devoir
implémenter	VW	implémenter
l'	D.def.f.s	le
interface	N.C.f.s	interface
Serializable	A.qual.f.s	serializable
ou	C.C	ou
Externalizable	A.qual.m.s	externalizable
.	PONCT.S	.

Exemple	N.C.m.s	exemple
de	P	de
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
:	PONCT.W	:
package	N.C.m.s	package
sunw.demo.simple	A.qual.m.s	<unknown>
;	PONCT.W	;
import	N.C.m.s	import
java.awt.*	ET	javalawt
;	PONCT.W	;
import	N.C.m.s	import
java.io.Serializable	A.qual.m.s	<unknown>
;	PONCT.W	;
/**	ET	éùà
*	ET	*
SimpleBean	ET	simplebean
wi11	ET	wis
be	A.qual.m.s	be
displayed	N.C.m.s	displayed
with	ET	with
a	V.P.3.s	avoir
green	A.qual.m.s	green
*	ET	*
centered	ET	centered
rectangle	N.C.m.s	rectangle
,	PONCT.W	,
but	N.C.m.s	but
its	ET	it
color	ET	color
may	ET	may
be	A.qual.m.s	be
changed	V.P.3.s	changeder
1ater	VW	1ater
.	PONCT.S	.

*/	PONCT.W	<unknown>
public	ET	public
class	ET	class
SimpleBean	ET	simplebean
extends	ET	extend
Canvas	N.P.m.s	Canvas
implements	ADV.-	implements
Serializable	A.qual.m.s	serializable
{	P	à
private	ET	privat
Color	N.P.m.s	Color
color	N.P.m.s	Color
=	ET	=
Color.green	N.P.m.s	Colorgren
;	PONCT.W	;
//	PONCT.W	@card@
Property	N.P.m.s	Property
getter	VW	getter
method	N.C.m.s	method
.	PONCT.S	.

public	A.qual.m.s	public
Color	N.P.m.s	Color
getColor(){	N.P.m.s	<unknown>
return	ET	return
color	N.C.m.s	color
;	PONCT.W	;
}	N.P.x.s	}
//	PONCT.W	@card@
Property	N.P.m.s	Property
setter	VW	setter
method	N.P.m.s	Method
.	PONCT.S	.

//	PONCT.W	@card@
Sets	ET	set
new	ET	new
SimpleBean	ET	simplebean
color	ET	color
and	ET	and
repaints	VK.m.p	repaindre
.	PONCT.S	.

public	A.qual.m.s	public
void	ET	void
setColor(Color	N.P.x.s	Setcolorçolor
newColor	N.C.m.s	newcolor
)	PONCT.W	)
{	P	à
color	N.C.m.s	color
=	P	à
newColor	N.C.m.s	newcolor
;	PONCT.W	;
repaint()	N.C.m.s	repaintçë
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	ET	void
paint(Graphics	N.C.m.p	paintçgraphic
g	PONCT.W	g
)	PONCT.W	)
{	P	à
g.setColor(color)	N.C.m.s	gosetcolorçcolorà
;	PONCT.W	;
g.fillRect(20	N.C.m.s	<unknown>
,	PONCT.W	,
5	N.card.m.s	@card@
,	PONCT.W	,
20	N.card.m.s	@card@
,	PONCT.W	,
30	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
}	N.P.x.s	}
//	PONCT.W	@card@
Constructor	ET	constructor
sets	ET	set
inherited	ET	<unknown>
properties	N.C.f.p	propertie
public	A.qual.m.s	public
SimpleBean()	N.P.m.s	Simplebeançë
{	P+D.def.m.s	c
setSize(60,40)	N.C.m.s	<unknown>
;	PONCT.W	;
setBackground(Color.red)	N.P.m.s	<unknown>
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
//	PONCT.W	@card@
end	P	end
class	N.C.m.p	class
SimpleBean	N.P.m.s	Simplebean
Pour	P	pour
être	VW	être
reconnu	VK.m.s	reconnaître
par	P	par
un	D.ind.m.s	un
outil	N.C.m.s	outil
de	P	de
développement	N.C.m.s	développement
,	PONCT.W	,
un	D.ind.m.s	un
Java	N.P.m.s	Java
Bean	N.P.m.s	Bean
doit	V.P.3.s	devoir
être	VW	être
conditionnné	VK.m.s	conditionnner
dans	P	dans
une	D.ind.f.s	un
fichier	N.C.f.s	fichier
d'	P	de
archive	N.C.f.s	archive
au	P+D.def.m.s	au
format	N.C.m.s	format
jar	N.C.m.s	jar
.	PONCT.S	.

Bien	ADV.-	bien
que	C.S	que
ce	CL.suj.3.m.s	ce
ne	ADV.neg	ne
soit	V.S.3.s	être
pas	ADV.neg	pas
obligatoire	A.qual.m.s	obligatoire
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
souhaitable	A.qual.m.s	souhaitable
que	C.S	que
les	D.def.m.p	le
Java	N.P.m.s	Java
Beans	N.P.m.s	Beans
soient	V.S.3.p	être
des	D.ind.m.p	du
paquetages	N.C.m.p	paquetage
(	PONCT.W	(
évite	V.P.3.s	éviter
notamment	ADV.-	notamment
les	D.def.m.p	le
conflits	N.C.m.p	conflit
en	P	en
cas	N.C.m.s	cas
d'	P	de
homonymie	N.C.f.s	homonymie
des	P+D.def.m.p	du
beans	N.C.m.p	bean
)	PONCT.W	)
.	PONCT.S	.

13.5	D.card.m.p	@card@
Design	N.C.m.p	design
patterns	N.C.m.p	pattern
Cette	D.dem.f.s	ce
section	N.C.f.s	section
n'	ADV.neg	ne
est	V.P.3.s	être
qu'	ADV.neg	qu'
une	D.ind.f.s	un
toute	A.ind.f.s	tout
première	A.ord.f.s	premier
introduction	N.C.f.s	introduction
aux	P+D.def.m.p	au
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
(	PONCT.W	(
design	ET	design
patterns	N.C.m.p	pattern
)	PONCT.W	)
[	PONCT.W	[
1	N.card.m.s	@card@
]	PONCT.W	]
.	PONCT.S	.

Le	D.def.m.s	le
développement	N.C.m.s	développement
orienté	VK.m.s	orienter
objet	N.C.m.s	objet
d'	P	de
applications	N.C.f.p	application
professionnelles	A.qual.f.p	professionnel
conduit	V.P.3.s	conduire
généralement	ADV.-	généralement
à	P	à
rencontrer	VW	rencontrer
des	D.ind.m.p	du
problèmes	N.C.m.p	problème
de	P	de
conception	N.C.f.s	conception
types	N.C.m.p	type
qui	PRO.rel.m.p	qui
sont	V.P.3.p	être
familiers	A.qual.m.p	familier
à	P	à
la	D.def.f.s	le
communauté	N.C.f.s	communauté
des	P+D.def.m.p	du
développeurs	N.C.m.p	développeur
confirmés	VK.m.p	confirmer
et	C.C	et
pour	P	pour
lesquels	PRO.int.m.p	lequel
des	D.ind.f.p	du
solutions	N.C.f.p	solution
éprouvées	VK.f.p	éprouver
existent	V.P.3.p	exister
.	PONCT.S	.

Il	CL.suj.3.m.s	il
ne	ADV.neg	ne
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
pas	ADV.neg	pas
ici	ADV.-	ici
de	P	de
solutions	N.C.f.p	solution
théoriques	A.qual.f.p	théorique
(	PONCT.W	(
algorithmes	N.C.m.p	algorithme
)	PONCT.W	)
mais	C.C	mais
de	P	de
solutions	N.C.f.p	solution
orientées	VK.f.p	orienter
objet	N.C.m.s	objet
empiriques	A.qual.f.p	empirique
dont	PRO.rel.f.p	dont
la	D.def.f.s	le
solidité	N.C.f.s	solidité
et	C.C	et
l'	D.def.f.s	le
efficacité	N.C.f.s	efficacité
ont	V.P.3.p	avoir
fait	VK.m.s	faire
leur	D.poss.f.s	leur
preuve	N.C.f.s	preuve
en	P	en
pratique	N.C.f.s	pratique
.	PONCT.S	.

Ces	D.dem.f.p	ce
solutions	N.C.f.p	solution
sont	V.P.3.p	être
appelées	VK.f.p	appeler
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
(	PONCT.W	(
design	ET	design
patterns	N.C.m.p	pattern
)	PONCT.W	)
.	PONCT.S	.

Un	D.ind.m.s	un
développeur	N.C.m.s	développeur
expérimenté	VK.m.s	expérimenter
se	CL.refl.3.m.s	se
doit	V.P.3.s	devoir
de	P	de
les	CL.obj.3.m.p	le
connaître	VW	connaître
et	C.C	et
de	P	de
disposer	VW	disposer
d'	P	de
un	D.ind.m.s	un
"	PONCT.W	"
panier	N.C.m.s	panier
"	PONCT.W	"
de	P	de
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
qu'	PRO.rel.m.p	que
il	CL.suj.3.m.s	il
appliquera	V.F.3.s	appliquer
aussi	ADV.-	aussi
systématiquement	ADV.-	systématiquement
que	C.S	que
possible	A.qual.m.s	possible
.	PONCT.S	.

Les	D.def.m.p	le
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
sont	V.P.3.p	être
des	D.ind.f.p	du
stratégies	N.C.f.p	stratégie
de	P	de
résolution	N.C.f.s	résolution
de	P	de
grands	A.qual.m.p	grand
types	N.C.m.p	type
de	P	de
problèmes	N.C.m.p	problème
de	P	de
conception	N.C.f.s	conception
orientée	VK.f.s	orienter
objet	N.C.m.s	objet
.	PONCT.S	.

Ils	CL.suj.3.m.p	il
décrivent	V.P.3.p	décrire
des	D.ind.f.p	du
formes	N.C.f.p	forme
génériques	A.qual.f.p	générique
d'	P	de
organisation	N.C.f.s	organisation
de	P	de
classes	N.C.f.p	classe
.	PONCT.S	.

Ils	CL.suj.3.m.p	il
sont	V.P.3.p	être
indépendants	A.qual.m.p	indépendant
du	P+D.def.m.s	du
langage	N.C.m.s	langage
de	P	de
programmation	N.C.f.s	programmation
objet	N.C.m.s	objet
mis	VK.m.s	mettre
en	P	en
oeuvre	N.C.f.s	œuvre
.	PONCT.S	.

A	P	à
titre	N.C.m.s	titre
illustratif	A.qual.m.s	illustratif
,	PONCT.W	,
l'	D.def.f.s	le
architecture	N.C.f.s	architecture
MVC	N.P.x.s	Mvc
,	PONCT.W	,
décrite	VK.f.s	décrire
à	P	à
la	D.def.f.s	le
section	N.C.f.s	section
13.2	N.card.f.s	@card@
,	PONCT.W	,
est	V.P.3.s	être
un	D.ind.m.s	un
exemple	N.C.m.s	exemple
de	P	de
modèle	N.C.m.s	modèle
de	P	de
conception	N.C.f.s	conception
d'	P	de
architecture	N.C.f.s	architecture
logicielle	A.qual.f.s	logiciel
(	PONCT.W	(
architectural	N.C.m.s	architectural
design	ET	design
pattern	ET	pattern
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
plus	ADV.-	plus
connus	VK.m.p	connaître
des	P+D.def.m.p	du
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
de	P	de
base	N.C.f.s	base
sont	V.P.3.p	être
les	D.def.m.p	le
23	A.card.m.p	@card@
modèles	N.C.m.p	modèle
fondamentaux	A.qual.m.p	fondamental
décrits	VK.m.p	décrire
par	P	par
les	D.def.m.p	le
quatre	A.card.m.p	quatre
auteurs	N.C.m.p	auteur
qui	PRO.rel.m.p	qui
furent	V.J.3.p	être
appelés	VK.m.p	appeler
collectivement	ADV.-	collectivement
"	PONCT.W	"
The	ET	the
Gang	ET	gang
of	ET	of
Four	ET	four
"	PONCT.W	"
(	PONCT.W	(
"	PONCT.W	"
La	D.def.f.s	le
bande	N.C.f.s	bande
des	P+D.def.m.p	du
quatre	A.card.m.p	quatre
"	PONCT.W	"
)	PONCT.W	)
ou	C.C	ou
tout	ADV.-	tout
simplement	ADV.-	simplement
GoF	N.P.m.s	Gof
[	PONCT.W	[
2	N.card.m.s	@card@
]	PONCT.W	]
.	PONCT.S	.

On	CL.suj.3.m.s	on
distingue	V.P.3.s	distinguer
habituellement	ADV.-	habituellement
3	D.card.f.p	@card@
grandes	A.qual.f.p	grand
familles	N.C.f.p	famille
de	P	de
modèles	N.C.m.p	modèle
de	P	de
conception	N.C.f.s	conception
:	PONCT.W	:
[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
L'	D.def.f.s	le
expression	N.C.f.s	expression
design	ET	design
pattern	N.C.m.s	pattern
est	V.P.3.s	être
souvent	ADV.-	souvent
traduite	VK.f.s	traduire
aussi	ADV.-	aussi
par	P	par
patron	N.C.m.s	patron
de	P	de
conception	N.C.f.s	conception
.	PONCT.S	.

[	PONCT.W	[
2	N.card.m.s	@card@
]	PONCT.W	]
-	PONCT.W	-
Les	D.def.m.p	le
modèles	N.C.m.p	modèle
de	P	de
construction	N.C.f.s	construction
ont	V.P.3.p	avoir
pour	P	pour
but	N.C.m.s	but
d'	P	de
organiser	VW	organiser
la	D.def.f.s	le
création	N.C.f.s	création
d'	P	de
objets	N.C.m.p	objet
de	P	de
façon	N.C.f.s	façon
à	P	à
gagner	VW	gagner
en	P	en
abstraction	N.C.f.s	abstraction
.	PONCT.S	.

Exemple	N.C.m.s	exemple
présenté	VK.m.s	présenter
ci-après	ADV.-	ci-après
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Singleton	N.P.m.s	Singleton
.	PONCT.S	.

-	PONCT.W	-
Les	D.def.m.p	le
modèles	N.C.m.p	modèle
de	P	de
structuration	N.C.f.s	structuration
facilitent	V.P.3.p	faciliter
l'	D.def.f.s	le
organisation	N.C.f.s	organisation
de	P	de
la	D.def.f.s	le
hiérarchie	N.C.f.s	hiérarchie
des	P+D.def.f.p	du
classes	N.C.f.p	classe
et	C.C	et
de	P	de
leurs	D.poss.f.p	leur
relations	N.C.f.p	relation
.	PONCT.S	.

Exemple	N.C.m.s	exemple
présenté	VK.m.s	présenter
ci-après	ADV.-	ci-après
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Decorator	N.P.m.s	Decorator
.	PONCT.S	.

-	PONCT.W	-
Les	D.def.m.p	le
modèles	N.C.m.p	modèle
de	P	de
comportement	N.C.m.s	comportement
proposent	V.P.3.p	proposer
des	D.ind.f.p	du
solutions	N.C.f.p	solution
pour	P	pour
organiser	VW	organiser
les	D.def.f.p	le
interactions	N.C.f.p	interaction
et	C.C	et
pour	P	pour
répartir	VW	répartir
les	D.def.m.p	le
traitements	N.C.m.p	traitement
entre	P	entre
les	D.def.m.p	le
objets	N.C.m.p	objet
.	PONCT.S	.

Ils	CL.suj.3.m.p	il
tentent	V.P.3.p	tenter
de	P	de
répartir	VW	répartir
les	D.def.f.p	le
responsabilités	N.C.f.p	responsabilité
entre	P	entre
chaque	D.ind.f.s	chaque
classe	N.C.f.s	classe
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Chain	N.P.m.s	Chain
of	ET	of
Responsibility	N.P.m.s	Responsibility
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
d'	P	de
objets	N.C.m.p	objet
tels	A.qual.m.p	tel
que	C.S	que
,	PONCT.W	,
si	C.S	si
l'	D.def.m.s	le
un	PRO.ind.m.s	un
d'	P	de
eux	PPRO.3.m.p	eux
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
répondre	VW	répondre
à	P	à
une	D.ind.f.s	un
requête	N.C.f.s	requête
,	PONCT.W	,
il	CL.suj.3.m.s	il
puisse	V.S.3.s	pouvoir
la	CL.obj.3.f.s	la
transmettre	VW	transmettre
à	P	à
son	D.poss.m.s	son
successeur	N.C.m.s	successeur
jusqu'	P	jusque
à	P	à
ce	PRO.dem.m.s	ce
que	PRO.rel.m.s	que
l'	D.def.m.s	le
un	PRO.ind.m.s	un
d'	P	de
entre	P	entre
eux	PPRO.3.m.p	eux
y	CL.obj.3.m.s	y
réponde	V.S.3.s	répondre
.	PONCT.S	.

13.5.1	D.card.m.p	@card@
Exemple	N.C.m.s	exemple
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Singleton	N.P.m.s	Singleton
Le	D.def.m.s	le
modèle	N.C.m.s	modèle
de	P	de
conception	N.C.f.s	conception
Singleton	N.P.m.s	Singleton
permet	V.P.3.s	permettre
d'	P	de
assurer	VW	assurer
qu'	C.S	que
une	D.ind.f.s	un
classe	N.C.f.s	classe
ne	ADV.neg	ne
possédera	V.F.3.s	posséder
qu'	ADV.neg	qu'
une	D.ind.f.s	un
instance	N.C.f.s	instance
au	P+D.def.m.s	au
plus	ADV.-	plus
et	C.C	et
d'	P	de
offrir	VW	offrir
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
unique	A.qual.f.s	unique
retournant	VG	retourner
cette	D.dem.f.s	ce
instance	N.C.f.s	instance
.	PONCT.S	.

Exemple	N.C.m.s	exemple
d'	P	de
implémentation	N.C.f.s	implémentation
(	PONCT.W	(
cas	N.C.m.s	cas
où	PRO.rel.m.s	où
toutes	A.ind.f.p	tout
les	D.def.f.p	le
informations	N.C.f.p	information
nécessaires	A.qual.f.p	nécessaire
à	P	à
la	D.def.f.s	le
création	N.C.f.s	création
du	P+D.def.m.s	du
singleton	N.C.m.s	singleton
sont	V.P.3.p	être
disponibles	A.qual.f.p	disponible
au	P+D.def.m.s	au
moment	N.C.m.s	moment
du	P+D.def.m.s	du
chargement	N.C.m.s	chargement
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
en	P	en
mémoire	N.C.f.s	mémoire
)	PONCT.W	)
public	A.qual.m.s	public
final	A.qual.m.s	final
class	ET	class
MySingleton	N.P.m.s	Mysingleton
{	ET	{
//	PONCT.W	@card@
Creating	N.P.m.s	Creating
at	V.P.3.s	avoir
the	ET	the
class	ET	class
loading	ET	loading
private	ET	privat
static	ET	static
MySingleton	N.P.m.s	Mysingleton
singleInstance	N.C.f.s	singleinstance
=	P	à
new	ET	new
MySingleton()	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Private	N.P.f.s	Private
constructor	N.C.m.s	constructor
.	PONCT.S	.

Can't	N.P.m.s	Can't
be	A.qual.m.s	be
used	ET	used
outside	ET	outside
this	ET	thi
class	ET	class
private	A.qual.f.s	privat
MySingleton()	N.P.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
/**	N.C.m.p	<unknown>
Get	N.P.m.s	Get
a	V.P.3.s	avoir
singleton	ET	singleton
of	ET	of
this	ET	thi
class	ET	class
*/	PONCT.W	<unknown>
public	N.C.m.s	public
static	A.qual.m.s	static
MySingleton	N.P.m.s	Mysingleton
getInstance()	N.C.m.s	getinstanceëc
{	P	à
return	N.C.m.s	return
singleInstance	N.C.f.s	singleinstance
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
Creation	N.C.f.s	creation
of	ET	of
a	V.P.3.s	avoir
singleton	N.C.m.s	singleton
MySingleton	N.P.m.s	Mysingleton
singleton	N.C.m.s	singleton
=	PONCT.W	=
MySingleton.getInstance()	N.P.m.s	Mysingletonincenç
;	PONCT.W	;
13.5.2	D.card.m.p	@card@
Exemple	N.C.m.s	exemple
:	PONCT.W	:
le	D.def.m.s	le
modèle	N.C.m.s	modèle
Decorator	N.P.m.s	Decorator
Le	D.def.m.s	le
modèle	N.C.m.s	modèle
de	P	de
conception	N.C.f.s	conception
Decorator	N.P.m.s	Decorator
permet	V.P.3.s	permettre
d'	P	de
ajouter	VW	ajouter
dynamiquement	ADV.-	dynamiquement
des	D.ind.f.p	du
fonctionnalités	N.C.f.p	fonctionnalité
à	P	à
un	D.ind.m.s	un
objet	N.C.m.s	objet
.	PONCT.S	.

Ceci	PRO.dem.m.s	ceci
se	CL.refl.3.m.s	se
réalise	V.P.3.s	réaliser
en	P	en
créant	VG	créer
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
classe	N.C.f.s	classe
Decorator	N.P.m.s	Decorator
enveloppant	VG	envelopper
la	D.def.f.s	le
classe	N.C.f.s	classe
originale	A.qual.f.s	original
.	PONCT.S	.

Le	D.def.m.s	le
modèle	N.C.m.s	modèle
de	P	de
conception	N.C.f.s	conception
Decorator	N.P.m.s	Decorator
est	V.P.3.s	être
une	D.ind.f.s	un
alternative	N.C.f.s	alternative
à	P	à
l'	D.def.f.s	le
approche	N.C.f.s	approche
par	P	par
création	N.C.f.s	création
d'	P	de
une	D.ind.f.s	un
sous-	P	<unknown>
classe	N.C.f.s	classe
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
originale	A.qual.f.s	original
.	PONCT.S	.

Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
impose	V.P.3.s	imposer
notamment	ADV.-	notamment
à	P	à
une	D.ind.f.s	un
approche	N.C.f.s	approche
par	P	par
extension	N.C.f.s	extension
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
originale	A.qual.f.s	original
dans	P	dans
les	D.def.m.p	le
cas	N.C.m.p	cas
suivants	A.qual.m.p	suivant
:	PONCT.W	:
la	D.def.f.s	le
classe	N.C.f.s	classe
originale	A.qual.f.s	original
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
étendue	VK.f.s	étendre
par	P	par
héritage	N.C.m.s	héritage
;	PONCT.W	;
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
sous-classes	N.C.m.p	sous-classe
permettant	VG	permettre
de	P	de
définir	VW	définir
toutes	A.ind.f.p	tout
les	D.def.f.p	le
combinaisons	N.C.f.p	combinaison
possibles	A.qual.f.p	possible
de	P	de
fonctionnalités	N.C.f.p	fonctionnalité
est	V.P.3.s	être
trop	ADV.-	trop
important	A.qual.m.s	important
;	PONCT.W	;
l'	D.def.m.s	le
ajout	N.C.m.s	ajout
des	P+D.def.f.p	du
fonctionnalités	N.C.f.p	fonctionnalité
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
statique	A.qual.m.s	statique
(	PONCT.W	(
i.e.	ADV.-	<unknown>
réalisé	VK.m.s	réaliser
à	P	à
la	D.def.f.s	le
compilation	N.C.f.s	compilation
)	PONCT.W	)
mais	C.C	mais
doit	V.P.3.s	devoir
être	VW	être
dynamique	A.qual.m.s	dynamique
(	PONCT.W	(
.e	PONCT.S	<unknown>
.	PONCT.S	.

réalisé	VK.m.s	réaliser
à	P	à
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
[	PONCT.W	[
Wikipedia	N.P.m.s	Wikipedia
]	PONCT.W	]
.	PONCT.S	.

Considérons	N.C.m.p	considéron
des	D.ind.f.p	du
fenêtres	N.C.f.p	fenêtre
d'	P	de
affichage	N.C.m.s	affichage
instances	N.C.f.p	instance
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
Window	N.P.m.s	Window
et	C.C	et
supposons	V.Y.1.p	supposer
que	C.S	que
cette	D.dem.f.s	ce
classe	N.C.f.s	classe
n'	ADV.neg	ne
offre	V.P.3.s	offrir
pas	ADV.neg	pas
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
ajouter	VW	ajouter
des	D.ind.f.p	du
barres	N.C.f.p	barre
de	P	de
défilement	N.C.m.s	défilement
.	PONCT.S	.

Créons	V.Y.1.p	créer
un	D.ind.m.s	un
décorateur	N.C.m.s	décorateur
qui	PRO.rel.m.s	qui
puisse	V.S.3.s	pouvoir
ajouter	VW	ajouter
dynamiquement	ADV.-	dynamiquement
cette	D.dem.f.s	ce
fonctionnalité	N.C.f.s	fonctionnalité
à	P	à
des	D.ind.m.p	du
objets	N.C.m.p	objet
Window	N.P.m.s	Window
existants	A.qual.m.p	existant
.	PONCT.S	.

//	PONCT.W	@card@
An	P	an
interface	N.C.m.s	interface
common	ET	common
to	ET	to
the	ET	the
decorator	ET	decorator
and	ET	and
the	ET	the
decorated	ET	decorated
public	A.qual.m.s	public
interface	V.P.3.s	interfacer
Window	ET	window
{	ET	{
public	A.qual.m.s	public
void	A.qual.m.s	void
draw()	N.C.m.s	drawçh
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
The	ET	the
original	A.qual.m.s	original
class	ET	class
,	PONCT.W	,
the	ET	the
instance	N.C.f.s	instance
of	ET	of
which	ET	which
can	ET	can
be	ET	be
decorated	ET	decorated
public	ET	public
class	ET	class
SimpleWindow	ET	simplewindow
implements	ET	implement
Window	ET	window
public	A.qual.m.s	public
void	ET	void
draw()	N.C.m.s	drawçh
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
The	ET	the
abstract	ET	abstract
decorator	ET	decorator
public	A.qual.m.s	public
abstract	ET	abstract
class	ET	class
WindowDecorator	N.P.m.s	Windowdecorator
implements	ET	implement
Window	N.P.m.s	Window
{	ET	{
protected	ET	protected
Window	ET	window
decoratedWindow	ET	<unknown>
;	PONCT.W	;
public	ET	public
WindowDecorator(	N.P.m.s	Windowdecoratorù
Window	ET	window
decoratedWindow	ET	<unknown>
)	PONCT.W	)
{	ET	{
this.decoratedWindow	N.C.m.s	<unknown>
=	PONCT.W	=
decoratedWindow	ET	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
A	P	à
first	N.C.m.s	first
concrete	V.P.3.s	concreter
decorator	ET	decorator
public	A.qual.m.s	public
class	ET	class
VerticalScrollBarDecorator	N.P.m.s	Verticalscroldbardecorator
extends	ET	extend
WindowDecorator	N.P.m.s	Windowdecorator
{	P	à
public	N.C.m.s	public
VerticalScrollBarDecorator(	N.P.m.s	Verticalscroldbardecoratorë
Window	N.P.m.s	Window
decoratedWindow	ET	<unknown>
)	PONCT.W	)
{	ET	{
super	N.C.m.s	super
(	PONCT.W	(
decoratedWindow	ET	<unknown>
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	A.qual.m.s	void
draw()	N.C.m.s	drawçh
{	P	à
drawVerticalScrollBar()	N.C.m.s	<unknown>
;	PONCT.W	;
decoratedWindow.draw()	ET	decoratedwindowplëë
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	A.qual.m.s	void
drawVerticalScrollBar()	N.C.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
A	P	à
second	A.ord.m.s	second
concrete	V.P.3.s	concreter
decorator	ET	decorator
public	A.qual.m.s	public
class	ET	class
HorizontalScrollBarDecorator	N.P.m.s	Horizontalscardorator
extends	ET	extend
WindowDecorator	N.P.m.s	Windowdecorator
{	P	à
public	N.C.m.s	public
HorizontalScrollBarDecorator(	N.P.m.s	Horizontalscroldbardorë
Window	N.P.m.s	Window
decoratedWindow	ET	<unknown>
)	PONCT.W	)
{	ET	{
super	N.C.m.s	super
(	PONCT.W	(
decoratedWindow	ET	<unknown>
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	A.qual.m.s	void
draw()	N.C.m.s	drawçh
{	P	à
drawHorizontalScrollBar()	N.C.m.s	<unknown>
;	PONCT.W	;
decoratedWindow.draw()	ET	decoratedwindowplëë
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
void	A.qual.m.s	void
drawHorizontalScrollBar()	N.C.m.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
//	PONCT.W	@card@
Example	N.P.m.s	Example
:	PONCT.W	:
creation	N.C.f.s	creation
of	ET	of
a	V.P.3.s	avoir
fully	ET	fully
decorated	ET	decorated
Window	N.P.m.s	Window
instance	N.C.f.s	instance
.	PONCT.S	.

Window	ET	window
decoratedWindow	ET	<unknown>
=	ET	=
new	ET	new
HorizontalScrollBarDecorator(	N.P.m.s	Horizontalscroldbardorë
new	ET	new
VerticalScrollBarDecorator(	N.P.m.s	Verticalscroldbardecoratorë
new	ET	new
SimpleWindow()	ET	simplewindowçë
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
14	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
4	A.card.m.s	@card@
--	PONCT.W	--
MACHINE	N.C.m.s	machine
VIRTUELLE	N.P.f.s	Virtuelle
JAVA	N.P.m.s	Java
(	PONCT.W	(
JVM	N.P.m.s	Jvm
)	PONCT.W	)
Les	D.def.m.p	le
objectifs	N.C.m.p	objectif
premiers	A.ord.m.p	premier
de	P	de
ce	D.dem.m.s	ce
chapitre	N.C.m.s	chapitre
sont	V.P.3.p	être
:	PONCT.W	:
-	PONCT.W	-
comprendre	VW	comprendre
comment	ADV.int	comment
s'	CL.refl.3.m.s	se
opère	V.P.3.s	opérer
le	D.def.m.s	le
chargement	N.C.m.s	chargement
dynamique	A.qual.m.s	dynamique
des	P+D.def.f.p	du
classes	N.C.f.p	classe
en	P	en
mémoire	N.C.f.s	mémoire
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
d'	P	de
un	D.ind.m.s	un
programme	N.C.m.s	programme
Java	N.P.m.s	Java
;	PONCT.W	;
-	PONCT.W	-
comprendre	VW	comprendre
le	D.def.m.s	le
traitement	N.C.m.s	traitement
des	P+D.def.m.p	du
champs	N.C.m.p	champ
et	C.C	et
blocs	N.C.m.p	bloc
static	A.qual.m.s	static
au	P+D.def.m.s	au
chargement	N.C.m.s	chargement
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
.	PONCT.S	.

Une	D.ind.f.s	un
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
(	PONCT.W	(
JVM	N.P.m.s	Jvm
)	PONCT.W	)
est	V.P.3.s	être
un	D.ind.m.s	un
interpréteur	N.C.m.s	interpréteur
de	P	de
code	N.C.m.s	code
Java	N.P.m.s	Java
compilé	VK.m.s	compiler
(	PONCT.W	(
bytecode	N.C.m.s	bytecode
)	PONCT.W	)
permettant	VG	permettre
d'	P	de
exécuter	VW	exécuter
un	D.ind.m.s	un
programme	N.C.m.s	programme
Java	N.P.m.s	Java
sur	P	sur
une	D.ind.f.s	un
machine	N.C.f.s	machine
cible	A.qual.f.s	cible
.	PONCT.S	.

L'	D.def.m.s	le
espace	N.C.m.s	espace
mémoire	A.qual.m.s	mémoire
de	P	de
la	D.def.f.s	le
JVM	N.P.m.s	Jvm
comporte	V.P.3.s	comporter
plusieurs	D.ind.f.p	plusieurs
zones	N.C.f.p	zone
,	PONCT.W	,
notamment	ADV.-	notamment
:	PONCT.W	:
-	PONCT.W	-
la	D.def.f.s	le
Zone	N.P.f.s	Zone
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
:	PONCT.W	:
contient	V.P.3.s	contenir
le	D.def.m.s	le
code	N.C.m.s	code
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
et	C.C	et
constructeurs	N.C.m.p	constructeur
ainsi	ADV.-	ainsi
que	C.S	que
des	P+D.def.f.p	du
informations	N.C.f.p	information
sur	P	sur
la	D.def.f.s	le
structure	N.C.f.s	structure
de	P	de
chaque	D.ind.f.s	chaque
classe	N.C.f.s	classe
(	PONCT.W	(
notamment	ADV.-	notamment
sa	D.poss.f.s	son
table	N.C.f.s	table
des	P+D.def.m.p	du
symboles	N.C.m.p	symbole
)	PONCT.W	)
;	PONCT.W	;
-	PONCT.W	-
la	D.def.f.s	le
pile	N.C.f.s	pile
:	PONCT.W	:
espace	N.C.m.s	espace
propre	A.qual.m.s	propre
à	P	à
chaque	D.ind.m.s	chaque
thread	N.C.m.s	thread
,	PONCT.W	,
mémorise	V.P.3.s	mémoriser
dynamiquement	ADV.-	dynamiquement
les	D.def.m.p	le
contextes	N.C.m.p	contexte
d'	P	de
exécution	N.C.f.s	exécution
(	PONCT.W	(
variables	N.C.f.p	variable
locales	A.qual.f.p	local
notamment	ADV.-	notamment
)	PONCT.W	)
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
en	P	en
cours	N.C.m.s	cours
d'	P	de
exécution	N.C.f.s	exécution
;	PONCT.W	;
-	PONCT.W	-
le	D.def.m.s	le
tas	N.C.m.s	tas
:	PONCT.W	:
contient	V.P.3.s	contenir
les	D.def.m.p	le
objets	N.C.m.p	objet
créés	VK.m.p	créer
par	P	par
new	N.P.m.s	New
(	PONCT.W	(
instances	N.C.f.p	instance
de	P	de
classe	N.C.f.s	classe
et	C.C	et
tableaux	N.C.m.p	tableau
)	PONCT.W	)
(	PONCT.W	(
cf	ET	cf
chapitre	N.C.m.s	chapitre
4	N.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
demande	N.C.f.s	demande
d'	P	de
exécution	N.C.f.s	exécution
d'	P	de
un	D.ind.m.s	un
programme	N.C.m.s	programme
Java	N.P.m.s	Java
qui	PRO.rel.m.s	qui
lance	V.P.3.s	lancer
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
.	PONCT.S	.

La	D.def.f.s	le
JVM	N.P.m.s	Jvm
réalise	V.P.3.s	réaliser
alors	ADV.-	alors
les	D.def.f.p	le
grandes	A.qual.f.p	grand
étapes	N.C.f.p	étape
suivantes	A.qual.f.p	suivant
:	PONCT.W	:
-	PONCT.W	-
chargement	N.C.m.s	chargement
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
principale	A.qual.f.s	principal
spécifiée	VK.f.s	spécifier
(	PONCT.W	(
main	N.C.f.s	main
class	N.C.m.p	class
)	PONCT.W	)
et	C.C	et
des	P+D.def.f.p	du
classes	N.C.f.p	classe
dont	PRO.rel.f.p	dont
elle	CL.suj.3.f.s	elle
dépend	V.P.3.s	dépendre
immédiatement	ADV.-	immédiatement
(	PONCT.W	(
au	P+D.def.m.s	au
premier	A.ord.m.s	premier
rang	N.C.m.s	rang
desquelles	P+PRO.rel.3.f.p	duquel
toutes	A.ind.f.p	tout
ses	D.poss.m.p	son
sur-classes	N.C.f.p	sur-classe
)	PONCT.W	)
:	PONCT.W	:
o	PONCT.W	o
création	N.C.f.s	création
des	P+D.def.m.p	du
champs	N.C.m.p	champ
static	A.qual.m.p	<unknown>
,	PONCT.W	,
création	N.C.f.s	création
de	P	de
la	D.def.f.s	le
table	N.C.f.s	table
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
,	PONCT.W	,
...	PONCT.W	<unknown>
o	PONCT.W	o
traitement	N.C.m.s	traitement
des	P+D.def.m.p	du
champs	N.C.m.p	champ
(	PONCT.W	(
initialisation	N.C.f.s	initialisation
)	PONCT.W	)
et	C.C	et
blocs	N.C.m.p	bloc
(	PONCT.W	(
exécution	N.C.f.s	exécution
)	PONCT.W	)
static	N.C.m.s	static
-	PONCT.W	-
exécution	N.C.f.s	exécution
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
main	N.C.f.s	main
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
principale	A.qual.f.s	principal
.	PONCT.S	.

Durant	P	durant
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
d'	P	de
un	D.ind.m.s	un
code	N.C.m.s	code
Java	N.P.m.s	Java
,	PONCT.W	,
les	D.def.f.p	le
classes	N.C.f.p	classe
(	PONCT.W	(
leur	D.poss.m.s	leur
bytecode	N.C.m.s	bytecode
)	PONCT.W	)
sont	V.P.3.p	être
chargées	VK.f.p	charger
dans	P	dans
la	D.def.f.s	le
JVM	N.P.f.s	Jvm
au	P+D.def.m.s	au
fur	N.C.m.s	fur
et	C.C	et
à	P	à
mesure	N.C.f.s	mesure
des	P+D.def.m.p	du
besoins	N.C.m.p	besoin
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
hiérarchie	N.C.f.s	hiérarchie
d'	P	de
héritage	N.C.m.s	héritage
,	PONCT.W	,
le	D.def.m.s	le
chargement	N.C.m.s	chargement
des	P+D.def.f.p	du
classes	N.C.f.p	classe
est	V.P.3.s	être
opéré	VK.m.s	opérer
par	P	par
ordre	N.C.m.s	ordre
hiérarchique	A.qual.m.s	hiérarchique
descendant	A.qual.m.s	descendant
(	PONCT.W	(
i.e	N.C.f.s	<unknown>
de	P	de
la	D.def.f.s	le
super-classe	N.C.f.s	super-classe
racine	A.qual.f.s	racine
vers	P	vers
la	D.def.f.s	le
classe	N.C.f.s	classe
courante	A.qual.f.s	courant
)	PONCT.W	)
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
public	A.qual.m.s	public
class	ET	class
ClassA	N.P.m.s	Classa
{	P	à
static	N.C.m.s	static
{	P	à
System.out.println("Start	ET	<unknown>
loading	N.C.m.s	loading
ClassA	N.P.m.s	Classa
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
static	A.qual.m.s	static
final	A.qual.m.s	final
int	V.J.3.s	enir
C	N.card.m.s	C
;	PONCT.W	;
private	ET	privat
static	N.C.m.s	static
int	VK.m.s	indre
n	N.C.m.s	n
=	PONCT.W	=
100	A.card.m.s	@card@
;	PONCT.W	;
static	N.C.m.s	static
{	N.C.m.s	{
C	N.card.m.s	C
=	PONCT.W	=
29979	N.card.f.s	@card@
;	PONCT.W	;
}	P+D.def.m.s	c
static	N.C.m.s	static
{	P+D.def.m.s	c
System.out.println("C	N.P.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
+	P	p
C	N.card.m.s	C
)	PONCT.W	)
;	PONCT.W	;
System.out.println("n	N.P.x.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
+	P	p
n	N.C.m.s	n
)	PONCT.W	)
;	PONCT.W	;
}	P+D.def.m.s	c
public	A.qual.m.s	public
ClassA()	N.P.m.s	Classaëù
{	P+D.def.m.s	c
System.out.println("Start	N.P.m.s	<unknown>
ClassA()")	N.P.m.s	Classaëçëë
;	PONCT.W	;
n	N.C.m.s	n
=	V.P.3.s	être
n	N.C.m.s	n
+	P	p
1	A.card.m.s	@card@
;	PONCT.W	;
System.out.println("End	N.P.m.s	<unknown>
ClassA()")	N.P.m.s	Classaëçëë
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
int	V.J.3.s	enir
getN	ET	<unknown>
(	PONCT.W	(
)	PONCT.W	)
{	P	à
return	N.C.m.s	return
n	N.C.m.s	n
;	PONCT.W	;
}	P+D.def.m.s	c
static	N.C.m.s	static
{	P+D.def.m.s	c
System.out.println("End	ET	<unknown>
loading	N.C.m.s	loading
ClassA	N.P.m.s	Classa
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
//	PONCT.W	@card@
end	ET	end
ClassA	N.P.m.s	Classa
public	ET	public
class	ET	class
ClassB	N.P.m.s	<unknown>
extends	ET	extend
ClassA	N.P.m.s	Classa
{	P	à
static	N.C.m.s	static
{	ET	{
System.out.println("Start	ET	<unknown>
loading	N.C.m.s	loading
ClassB	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
private	N.C.f.s	privat
int	V.P.3.s	indre
x	N.C.m.p	x
=	PONCT.W	=
5	A.card.m.s	@card@
;	PONCT.W	;
public	A.qual.m.s	public
ClassB()	N.P.x.s	Classbëë
{	P+D.def.m.s	c
System.out.println("Start	N.P.m.s	<unknown>
ClassB()")	N.P.x.s	Classbëëë
;	PONCT.W	;
x	D.card.m.p	x
=	V.P.3.s	être
x	A.card.m.s	X
+	P	p
getN()	N.C.m.s	getnçë
;	PONCT.W	;
System.out.println(x)	N.P.m.s	<unknown>
;	PONCT.W	;
System.out.println("End	N.P.m.s	<unknown>
ClassB()")	N.P.x.s	Classbëëë
;	PONCT.W	;
}	P+D.def.m.s	c
static	N.C.m.s	static
{	P+D.def.m.s	c
System.out.println("End	ET	<unknown>
loading	N.C.m.s	loading
ClassB	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.s	}
//	PONCT.W	@card@
end	ET	end
ClassB	N.P.m.s	<unknown>
public	A.qual.m.s	public
class	ET	class
Class()	N.P.m.s	Classëë
{	P	à
static	N.C.m.s	static
{	P	à
System.out.println("Start	ET	<unknown>
loading	N.C.m.s	loading
Class0	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
private	ET	privat
static	N.C.m.s	static
int	V.J.3.s	enir
y	CL.obj.3.m.s	y
=	PONCT.W	=
initY()	N.C.m.s	inityëë
;	PONCT.W	;
private	ET	privat
static	N.C.m.s	static
int	V.J.3.s	enir
initY()	N.C.m.s	inityëë
{	P+D.def.m.s	c
System.out.println("Init	N.P.x.s	<unknown>
y	ET	y
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
return	N.C.m.s	return
256	A.card.m.s	@card@
;	PONCT.W	;
}	ET	}
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	ET	mainästringë
]	PONCT.W	]
args	N.C.m.p	arg
)	PONCT.W	)
{	P	à
System.out.println("Start	N.P.m.s	<unknown>
main	N.C.f.s	main
Class0	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
ClassB	N.P.m.s	<unknown>
b	N.C.m.s	b
=	ET	=
new	ET	new
ClassB()	N.P.x.s	Classbëë
;	PONCT.W	;
System.out.println("End	N.P.x.s	<unknown>
main	N.C.f.s	main
Class0	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	P+D.def.m.s	c
static	N.C.m.s	static
{	P+D.def.m.s	c
System.out.println("End	ET	<unknown>
loading	N.C.m.s	loading
Class0	N.P.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
}	N.C.m.p	}
//	PONCT.W	@card@
end	P	end
Class0	N.P.m.s	<unknown>
Après	P	après
compilation	N.C.f.s	compilation
de	P	de
ces	D.dem.f.p	ce
trois	A.card.f.p	trois
classes	N.C.f.p	classe
,	PONCT.W	,
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
la	D.def.f.s	le
commande	N.C.f.s	commande
:	PONCT.W	:
java	ET	java
Class0	N.P.m.s	<unknown>
affichera	V.F.3.s	afficher
(	PONCT.W	(
commentaires	N.C.m.p	commentaire
ajoutés	VK.m.p	ajouter
en	P	en
marge	N.C.f.s	marge
)	PONCT.W	)
:	PONCT.W	:
Start	N.P.m.s	Start
loading	N.C.m.s	loading
Class0	N.P.m.s	<unknown>
Init	V.P.3.s	inir
Y	ET	y
End	P	end
loading	N.C.m.s	loading
Class0	N.P.m.s	<unknown>
Start	N.P.m.s	Start
main	N.C.f.s	main
Class0	N.P.m.s	<unknown>
Start	N.P.m.s	Start
loading	N.C.m.s	loading
ClassA	N.P.m.s	Classa
//	PONCT.W	@card@
Sur-classes	N.P.m.s	Sur-classes
de	P	de
ClassB	N.P.m.s	<unknown>
d'abord	ADV.-	d'abord
C	N.P.m.s	C
=	V.P.3.s	être
29979	N.card.m.s	@card@
n	N.C.m.s	n
=	V.P.3.s	être
100	N.card.m.s	@card@
End	P	end
loading	N.C.m.s	loading
ClassA	N.P.m.s	Classa
Start	N.P.m.s	Start
loading	N.C.m.s	loading
ClassB	N.P.m.s	<unknown>
//	PONCT.W	@card@
puis	C.C	pui
enfin	ADV.-	enfin
ClassB	N.P.m.s	<unknown>
.	PONCT.S	.

End	P	end
loading	N.C.m.s	loading
ClassB	N.P.m.s	<unknown>
Start	N.P.m.s	Start
ClassA()	N.P.m.s	Classaëù
//	PONCT.W	@card@
Car	C.C	car
super()	N.C.m.s	superçë
d'abord	ADV.-	d'abord
.	PONCT.S	.

End	P	end
ClassA()	N.P.m.s	Classaëù
Start	N.P.m.s	Start
ClassB()	N.P.m.s	Classbëë
106	A.card.m.s	@card@
//	PONCT.W	@card@
100	A.card.m.s	@card@
+	P	p
1	D.card.m.s	@card@
ClassA()	N.P.m.s	Classaëù
+	P	p
5	D.card.m.p	@card@
ClassB()	N.P.x.s	Classbëë
End	P	end
ClassB()	N.P.x.s	Classbëë
End	P	end
main	N.C.f.s	main
Class0	N.P.m.s	<unknown>
15	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
5	A.card.m.s	@card@
-	PONCT.W	-
COMMUNICATION	N.C.f.s	communication
ENTRE	P	entre
JAVA	N.P.m.s	Java
ET	C.C	et
C	N.P.m.s	C
(	PONCT.W	(
JNI	N.P.m.s	Jni
)	PONCT.W	)
Références	N.C.f.p	référence
:	PONCT.W	:
"	PONCT.W	"
The	ET	the
Java	N.P.m.s	Java
Native	N.P.f.s	Native
Interface	N.P.f.s	Interface
:	PONCT.W	:
Programmer	N.P.m.s	Programmer
'	PONCT.W	'
s	ET	s
Guide	ET	guide
and	ET	and
Specification	ET	specification
"	PONCT.W	"
java.sun.com/docs/books/jni/	N.C.m.s	<unknown>
Tutoriel	N.P.m.s	Tutoriel
:	PONCT.W	:
java.sun.com/docs/books/jni/html/jniTOC.html	ET	<unknown>
"	PONCT.W	"
Java	N.P.m.s	Java
Native	A.qual.f.s	natif
Interface	ET	interface
Specification	N.C.f.s	specification
v1.5	D.card.m.p	@card@
"	PONCT.W	"
java.sun.com/j2se/1.5.0/docs/guide/jni/spec/jniTOC.html	ET	<unknown>
"	PONCT.W	"
javah	N.P.m.s	Javah
-	PONCT.W	-
C	ET	c
Header	ET	header
and	ET	and
Stub	ET	stub
File	ET	file
Generator	N.P.m.s	Generator
"	PONCT.W	"
java.sun.com/javase/6/docs/technotes/tools/windows/javah.html	ET	<unknown>
On	CL.suj.3.m.s	on
se	CL.refl.3.m.s	se
pose	V.P.3.s	poser
le	D.def.m.s	le
problème	N.C.m.s	problème
d'	P	de
appeler	VW	appeler
un	D.ind.m.s	un
sous-programme	N.C.m.s	sous-programme
C	CL.suj.3.m.s	c
depuis	P	depuis
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
Java	N.P.m.s	Java
dans	P	dans
un	D.ind.m.s	un
environnement	N.C.m.s	environnement
Unix	N.P.m.s	Unix
.	PONCT.S	.

La	D.def.f.s	le
solution	N.C.f.s	solution
met	V.P.3.s	mettre
en	P	en
oeuvre	N.C.f.s	œuvre
l'	D.def.f.s	le
interface	N.C.f.s	interface
de	P	de
programmation	N.C.f.s	programmation
JNI	N.P.m.s	Jni
(	PONCT.W	(
Java	N.P.m.s	Java
Native	N.P.f.s	Native
Interface	N.P.x.s	Interface
)	PONCT.W	)
offert	VK.m.s	offrir
par	P	par
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
Java	N.P.m.s	Java
.	PONCT.S	.

JNI	N.P.m.s	Jni
est	V.P.3.s	être
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
fonctionnalités	N.C.f.p	fonctionnalité
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
à	P	à
un	D.ind.m.s	un
programme	N.C.m.s	programme
Java	N.P.m.s	Java
fonctionnant	VG	fonctionner
sur	P	sur
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
(	PONCT.W	(
JVM	N.P.m.s	Jvm
)	PONCT.W	)
d'	P	de
appeler	VW	appeler
ou	C.C	ou
d'	P	de
être	VW	être
appelé	VK.m.s	appeler
par	P	par
un	D.ind.m.s	un
programme	N.C.m.s	programme
écrit	VK.m.s	écrire
dans	P	dans
un	D.ind.m.s	un
autre	A.ind.m.s	autre
langage	N.C.m.s	langage
(	PONCT.W	(
typiquement	ADV.-	typiquement
en	P	en
C	N.P.f.s	C
,	PONCT.W	,
C++	N.C.m.s	cun
ou	C.C	ou
assembleur	N.C.m.s	assembleur
)	PONCT.W	)
.	PONCT.S	.

En	P	en
permettant	VG	permettre
l'	D.def.m.s	le
interfaçage	N.C.m.s	interfaçage
avec	P	avec
des	D.ind.f.p	du
applications	N.C.f.p	application
ou	C.C	ou
bibliothèques	N.C.f.p	bibliothèque
natives	A.qual.f.p	natif
[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
,	PONCT.W	,
la	D.def.f.s	le
mise	N.C.f.s	mise
en	P	en
oeuvre	N.C.f.s	œuvre
de	P	de
JNI	N.P.m.s	Jni
accroît	V.P.3.s	accroître
l'	D.def.f.s	le
interopérabilité	N.C.f.s	interopérabilité
des	P+D.def.f.p	du
applications	N.C.f.p	application
Java	N.P.m.s	Java
,	PONCT.W	,
mais	C.C	mais
évidemment	ADV.-	évidemment
au	P+D.def.m.s	au
détriment	N.C.m.s	détriment
de	P	de
leur	D.poss.f.s	leur
portabilité	N.C.f.s	portabilité
.	PONCT.S	.

Une	D.ind.f.s	un
bonne	A.qual.f.s	bon
architecture	N.C.f.s	architecture
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
devrait	V.C.3.s	devoir
donc	ADV.-	donc
minimiser	VW	minimiser
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
classes	N.C.f.p	classe
faisant	VG	faire
référence	N.C.f.s	référence
à	P	à
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
native	A.qual.f.s	natif
.	PONCT.S	.

Par	P	par
la	D.def.f.s	le
suite	N.C.f.s	suite
,	PONCT.W	,
on	CL.suj.3.m.s	on
supposera	V.F.3.s	supposer
que	C.S	que
le	D.def.m.s	le
fichier	N.C.m.s	fichier
Java	N.P.m.s	Java
appelant	VG	appeler
le	D.def.m.s	le
sous-programme	N.C.m.s	sous-programme
C	PONCT.W	C
se	CL.refl.3.m.s	se
nomme	V.P.3.s	nommer
MyClass.java	N.P.m.s	Myclassjava
,	PONCT.W	,
et	C.C	et
que	C.S	que
le	D.def.m.s	le
fichier	N.C.m.s	fichier
C	CL.suj.3.m.s	c
implémentant	VG	implémenter
ce	D.dem.m.s	ce
sous-programme	N.C.m.s	sous-programme
se	CL.refl.3.m.s	se
nomme	V.P.3.s	nommer
MyRoutines.c	N.P.m.s	<unknown>
Le	D.def.m.s	le
développement	N.C.m.s	développement
de	P	de
l'	D.def.f.s	le
application	N.C.f.s	application
complète	A.qual.f.s	complet
comporte	V.P.3.s	comporter
6	D.card.f.p	@card@
étapes	N.C.f.p	étape
:	PONCT.W	:
1	A.card.m.s	@card@
)	PONCT.W	)
Ecrire	VW	ecrire
le	D.def.m.s	le
programme	N.C.m.s	programme
Java	N.P.m.s	Java
et	C.C	et
le	D.def.m.s	le
compiler	N.C.m.s	compiler
:	PONCT.W	:
javac	N.C.m.s	javac
MyClass.java	N.P.m.s	Myclassjava
2	A.card.m.s	@card@
)	PONCT.W	)
Produire	VW	produire
le	D.def.m.s	le
fichier	N.C.m.s	fichier
d'	P	de
en-tête	N.C.f.s	en-tête
MyClass.h	N.P.m.s	Myclassh
pour	P	pour
le	D.def.m.s	le
programme	N.C.m.s	programme
C	PONCT.W	C
:	PONCT.W	:
javah	N.C.m.s	javah
MyClass	N.P.m.s	Myclass
3	A.card.m.s	@card@
)	PONCT.W	)
Ecrire	VW	ecrire
le	D.def.m.s	le
sous-programme	N.C.m.s	sous-programme
C	PONCT.W	C
et	C.C	et
le	CL.obj.3.m.s	le
compiler	N.C.m.s	compiler
:	PONCT.W	:
gcc	ET	<unknown>
-o	PONCT.W	o
MyRoutines	N.P.m.s	Myroutines
-c	PONCT.W	cc
MyRoutines.c	N.P.m.s	<unknown>
-pedantic	N.P.m.s	Pedantic
-W	PONCT.W	w
-Wal1l	CL.suj.3.m.s	<unknown>
-Idir	N.P.m.s	Idir
où	PRO.rel.m.s	où
dir	VW	dir
est	V.P.3.s	être
le	D.def.m.s	le
répertoire	N.C.m.s	répertoire
d'	P	de
installation	N.C.f.s	installation
par	P	par
le	D.def.m.s	le
JDK	N.P.m.s	Jdk
des	P+D.def.m.p	du
fichiers	N.C.m.p	fichier
d'	P	de
include	N.C.f.s	include
du	P+D.def.m.s	du
JNI	N.P.m.s	Jni
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
(	PONCT.W	(
ces	D.dem.m.p	ce
fichiers	N.C.m.p	fichier
étant	VG	être
répartis	VK.m.p	répartir
dans	P	dans
deux	D.card.m.p	deux
répertoires	N.C.m.p	répertoire
)	PONCT.W	)
:	PONCT.W	:
gcc	ET	<unknown>
-o	PONCT.W	o
MyRoutines	N.P.m.s	Myroutines
-c	PONCT.W	cc
MyRoutines.c	N.P.m.s	<unknown>
-pedantic	N.P.m.s	Pedantic
-W	PONCT.W	w
-Wall	CL.suj.3.m.s	wall
-I/usr/lib/jdk1.5.0v11/include	N.P.x.s	<unknown>
-I/usr/lib/jdk1.5.0v11/include/linux	N.P.x.s	<unknown>
[	PONCT.W	[
1	A.card.m.s	@card@
]	PONCT.W	]
Une	D.ind.f.s	un
application	N.C.f.s	application
ou	C.C	ou
une	D.ind.f.s	un
bibliothèque	N.C.f.s	bibliothèque
de	P	de
sous-programmes	N.C.m.p	sous-programme
est	V.P.3.s	être
dite	VK.f.s	dire
en	P	en
code	N.C.f.s	code
natif	A.qual.m.s	natif
si	C.S	si
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
dépendante	A.qual.f.s	dépendant
d'	P	de
un	D.ind.m.s	un
environnement	N.C.m.s	environnement
hôte	A.qual.m.s	hôte
(	PONCT.W	(
système	N.C.m.s	système
d'	P	de
exploitation	N.C.f.s	exploitation
ou	C.C	ou
jeu	N.C.m.s	jeu
d'	P	de
instructions	N.C.f.p	instruction
du	P+D.def.m.s	du
processeur	N.C.m.s	processeur
)	PONCT.W	)
particulier	A.qual.m.s	particulier
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
un	D.ind.m.s	un
programme	N.C.m.s	programme
C	PONCT.W	C
compilé	VK.m.s	compiler
sur	P	sur
un	D.ind.m.s	un
système	N.C.m.s	système
d'	P	de
exploitation	N.C.f.s	exploitation
donné	VK.m.s	donner
est	V.P.3.s	être
en	P	en
code	N.C.m.s	code
natif	A.qual.m.s	natif
car	C.C	car
il	CL.suj.3.m.s	il
ne	ADV.neg	ne
fonctionnera	V.F.3.s	fonctionner
pas	ADV.neg	pas
sur	P	sur
un	D.ind.m.s	un
autre	A.ind.m.s	autre
système	N.C.m.s	système
d'	P	de
exploitation	N.C.f.s	exploitation
.	PONCT.S	.

4	A.card.m.s	@card@
)	PONCT.W	)
Produire	VW	produire
une	D.ind.f.s	un
bibliothèque	N.C.f.s	bibliothèque
partagée	A.qual.f.s	partagé
(	PONCT.W	(
lib*.so	ET	libo
)	PONCT.W	)
qui	PRO.rel.f.s	qui
sera	V.F.3.s	être
chargeable	A.qual.m.s	chargeable
par	P	par
le	D.def.m.s	le
programme	N.C.m.s	programme
Java	N.P.m.s	Java
:	PONCT.W	:
gcc	ET	<unknown>
-Wall	CL.suj.3.m.s	wall
-shared	N.P.m.s	Shared
-o	PONCT.W	o
libMyRoutines.so	N.P.m.s	<unknown>
MyRoutines.o	N.P.m.s	Myroutinesso
5	N.card.m.s	@card@
)	PONCT.W	)
Avant	P	avant
la	D.def.f.s	le
toute	D.ind.f.s	tout
première	A.ord.f.s	premier
exécution	N.C.f.s	exécution
,	PONCT.W	,
spécifier	VW	spécifier
à	P	à
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
le	D.def.m.s	le
chemin	N.C.m.s	chemin
d'	P	de
accès	N.C.m.s	accès
à	P	à
cette	D.dem.f.s	ce
bibliothèque	N.C.f.s	bibliothèque
:	PONCT.W	:
setenv	ET	<unknown>
LD_LIBRARY_PATH	N.P.m.s	Ldlibrarypath
path	ET	path
où	PRO.rel.f.s	où
path	N.C.f.s	path
désigne	V.P.3.s	désigner
le	D.def.m.s	le
chemin	N.C.m.s	chemin
d'	P	de
accès	N.C.m.s	accès
.	PONCT.S	.

En	P	en
supposant	VG	supposer
que	C.S	que
celui	PRO.dem.m.s	celui
-ci	CL.suj.3.m.s	ci
soit	V.S.3.s	être
le	D.def.m.s	le
répertoire	N.C.m.s	répertoire
courant	A.qual.m.s	courant
,	PONCT.W	,
la	D.def.f.s	le
commande	N.C.f.s	commande
sera	V.F.3.s	être
:	PONCT.W	:
setenv	N.P.x.s	<unknown>
LD_LIBRARY_PATH	N.P.m.s	Ldlibrarypath
.	PONCT.S	.

6	A.card.m.s	@card@
)	PONCT.W	)
Exécuter	VW	exécuter
le	D.def.m.s	le
programme	N.C.m.s	programme
Java	N.P.m.s	Java
:	PONCT.W	:
java	N.C.m.s	java
MyClass	N.P.m.s	Myclass
La	D.def.f.s	le
façon	N.C.f.s	façon
d'	P	de
écrire	VW	écrire
le	D.def.m.s	le
programme	N.C.m.s	programme
Java	N.P.m.s	Java
et	C.C	et
d'	P	de
implémenter	VW	implémenter
le	D.def.m.s	le
sous-programme	N.C.m.s	sous-programme
C	PONCT.W	C
associé	VK.m.s	associer
est	V.P.3.s	être
illustrée	VK.f.s	illustrer
ci-après	ADV.-	ci-après
.	PONCT.S	.

15.1	D.card.m.p	@card@
Appel	N.C.m.p	appel
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
C	CL.suj.3.m.s	c
On	CL.suj.3.m.s	on
considèrera	V.F.3.s	considérer
de	P	de
bout	N.C.m.s	bout
en	P	en
bout	N.C.m.s	bout
le	D.def.m.s	le
même	A.qual.m.s	même
exemple	N.C.m.s	exemple
.	PONCT.S	.

15.1.1	A.card.f.s	@card@
Déclaration	N.C.f.s	déclaration
et	C.C	et
appel	N.C.m.s	appel
java	ET	java
Exemple	N.C.m.s	exemple
de	P	de
classe	N.C.f.s	classe
java	ET	java
public	A.qual.m.s	public
class	ET	class
MyClass	N.P.m.s	Myclass
{	ET	{
//	PONCT.W	@card@
Declaration	ET	declaration
of	ET	of
an	ET	an
extern	ET	extern
class	ET	class
procedure	ET	procedure
native	A.qual.f.s	natif
public	A.qual.m.s	public
static	A.qual.m.s	static
void	A.qual.m.s	void
procedure1()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Declaration	ET	declaration
of	ET	of
an	ET	an
extern	ET	extern
instance	N.C.f.s	instance
procedure	N.C.f.s	procedure
native	A.qual.f.s	natif
public	A.qual.m.s	public
void	A.qual.m.s	void
procedure2()	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Test	N.P.m.s	Test
procedure	N.C.f.s	procedure
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	ET	mainästringë
]	PONCT.W	]
argv	N.C.m.s	<unknown>
)	PONCT.W	)
{	P	à
MyClass.procedure1()	N.P.x.s	<unknown>
;	PONCT.W	;
MyClass	N.P.m.s	Myclass
o	PONCT.W	o
=	ET	=
new	ET	new
MyClasse()	N.P.x.s	Myclasseëù
;	PONCT.W	;
o.procedure2()	N.C.m.s	<unknown>
;	PONCT.W	;
}	ET	}
//	PONCT.W	@card@
Load	N.P.m.s	Load
the	ET	the
library	ET	library
libMyRoutines	ET	<unknown>
static	A.qual.m.s	static
{	P+D.def.m.s	c
System.loadLibrary("MyRoutines")	N.P.m.s	Systemadlibraryçuesçne
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
Commentaires	N.C.m.p	commentaire
:	PONCT.W	:
-	PONCT.W	-
Le	D.def.m.s	le
modificateur	N.C.m.s	modificateur
native	A.qual.m.s	natif
indique	V.P.3.s	indiquer
qu'	C.S	que
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
externe	A.qual.f.s	externe
non	ADV.neg	non
écrite	VK.f.s	écrire
en	P	en
java	N.C.m.s	java
.	PONCT.S	.

Le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
procédure	N.C.f.s	procédure
est	V.P.3.s	être
arbitraire	A.qual.f.s	arbitraire
.	PONCT.S	.

-	PONCT.W	-
La	D.def.f.s	le
méthode	N.C.f.s	méthode
loadLibrary	A.qual.f.s	<unknown>
va	V.P.3.s	aller
charger	VW	charger
la	D.def.f.s	le
bibliothèque	N.C.f.s	bibliothèque
libMyRoutines.so	N.P.m.s	<unknown>
;	PONCT.W	;
le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
static	A.qual.m.s	static
qui	PRO.rel.m.s	qui
encapsule	V.P.3.s	encapsuler
le	D.def.m.s	le
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
dans	P	dans
lequel	PRO.rel.m.s	lequel
l'	D.def.m.s	le
appel	N.C.m.s	appel
est	V.P.3.s	être
réalisé	VK.m.s	réaliser
permet	V.P.3.s	permettre
d'	P	de
exécuter	VW	exécuter
ce	D.dem.m.s	ce
bloc	N.C.m.s	bloc
dès	P	dès
le	D.def.m.s	le
chargement	N.C.m.s	chargement
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
MyClass	N.P.m.s	Myclass
sans	P	sans
avoir	VW	avoir
besoin	N.C.m.s	besoin
de	P	de
passer	VW	passer
par	P	par
l'	D.def.m.s	le
appel	N.C.m.s	appel
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
intermédiaire	A.qual.f.s	intermédiaire
.	PONCT.S	.

15.12	D.card.m.p	@card@
Prototype	N.C.m.s	prototype
C	PONCT.W	C
Le	D.def.m.s	le
fichier	N.C.m.s	fichier
MyClass.h	N.P.m.s	Myclassh
produit	VK.m.s	produire
par	P	par
javah	N.C.m.s	javah
(	PONCT.W	(
cf	N.C.m.s	<unknown>
étape	N.C.f.s	étape
2	A.card.f.s	@card@
précédente	A.qual.f.s	précédent
)	PONCT.W	)
spécifie	V.P.3.s	spécifier
les	D.def.m.p	le
prototypes	N.C.m.p	prototype
que	PRO.rel.m.p	que
devront	V.F.3.p	devoir
respecter	VW	respecter
les	D.def.m.p	le
sous-programmes	N.C.m.p	sous-programme
C	PONCT.W	C
à	P	à
écrire	VW	écrire
.	PONCT.S	.

Contenu	VK.m.s	contenir
(	PONCT.W	(
expurgé	VK.m.s	expurger
)	PONCT.W	)
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
MyClass.h	N.P.m.s	Myclassh
produit	VK.m.s	produire
par	P	par
javah	N.C.m.s	javah
/*	PONCT.W	<unknown>
DO	N.P.x.s	Do
NOT	N.P.m.s	Not
EDIT	N.P.x.s	Edit
THIS	N.C.m.p	thi
FILE	N.P.f.s	File
-	PONCT.W	-
it	C.C	it
is	VK.m.s	aller
machine	ET	machine
generated	ET	<unknown>
*/	PONCT.W	<unknown>
/*	ET	<unknown>
Header	N.P.m.s	Header
for	ET	for
class	N.C.m.p	class
MYClass	N.P.m.s	Myclass
*/	PONCT.W	<unknown>
JNIEXPORT	N.C.m.s	jniexport
void	V.P.3.s	voiler
JNICALL	N.P.m.s	Jnicall
Java_MyClass_procedure1	N.P.m.s	<unknown>
(	PONCT.W	(
JNIEnv	N.P.x.s	Jnienv
*	N.C.m.s	*
,	PONCT.W	,
jclass	N.C.m.p	jclass
)	PONCT.W	)
;	PONCT.W	;
JNIEXPORT	N.C.m.s	jniexport
void	ET	void
JNICALL	N.P.m.s	Jnicall
Java_MyClass_procedure2	N.P.x.s	<unknown>
(	PONCT.W	(
JNIEnv	N.P.m.s	Jnienv
*	N.C.m.s	*
,	PONCT.W	,
jobject	N.C.m.s	jobject
)	PONCT.W	)
;	PONCT.W	;
Commentaires	N.C.m.p	commentaire
:	PONCT.W	:
-	PONCT.W	-
JNIEXPORT	N.P.m.s	Jniexport
et	C.C	et
JNICALL	N.P.x.s	Jnicall
sont	V.P.3.p	être
deux	D.card.m.p	deux
macros	N.C.m.p	macro
prédéfinies	VK.f.p	prédéfinir
par	P	par
JNI	N.P.m.s	Jni
pour	P	pour
faire	VW	faire
communiquer	VW	communiquer
java	ADV.neg	java
et	C.C	et
C	CL.suj.3.m.s	c
-	PONCT.W	-
void	N.C.f.s	void
spécifie	V.P.3.s	spécifier
qu'	C.S	que
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
procédure	N.C.f.s	procédure
-	PONCT.W	-
Java_MyClass_procedure1	N.P.m.s	<unknown>
est	V.P.3.s	être
le	D.def.m.s	le
nom	N.C.m.s	nom
imposé	VK.m.s	imposer
que	C.S	que
devra	V.F.3.s	devoir
porter	VW	porter
la	D.def.f.s	le
procédure	N.C.f.s	procédure
C	PONCT.W	C
correspondant	VG	correspondre
à	P	à
la	D.def.f.s	le
méthode	N.C.f.s	méthode
de	P	de
nom	N.C.m.s	nom
procedure1	N.C.f.s	<unknown>
déclarée	VK.f.s	déclarer
dans	P	dans
le	D.def.m.s	le
programme	N.C.m.s	programme
java	A.qual.m.s	java
;	PONCT.W	;
idem	N.C.m.s	idem
pour	P	pour
procedure2	N.C.f.s	<unknown>
-	PONCT.W	-
Deux	D.card.m.p	deux
paramètres	N.C.m.p	paramètre
sont	V.P.3.p	être
systématiquement	ADV.-	systématiquement
introduits	VK.m.p	introduire
en	P	en
tête	N.C.f.s	tête
de	P	de
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
:	PONCT.W	:
o	ET	o
le	D.def.m.s	le
premier	A.ord.m.s	premier
,	PONCT.W	,
de	P	de
type	N.C.m.s	type
JNIEnv	N.P.x.s	Jnienv
*	N.C.m.s	*
,	PONCT.W	,
est	V.P.3.s	être
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
vers	P	vers
l'	D.def.m.s	le
environnement	N.C.m.s	environnement
JNIEnv	N.P.m.s	Jnienv
qui	PRO.rel.m.s	qui
est	V.P.3.s	être
lui-même	PRO.refl.m.s	lui-même
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
vers	P	vers
une	D.ind.f.s	un
structure	N.C.f.s	structure
contenant	VG	contenir
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
d'	P	de
interface	N.C.f.s	interface
avec	P	avec
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
java	N.P.x.s	Java
(	PONCT.W	(
JVM	N.P.x.s	Jvm
)	PONCT.W	)
;	PONCT.W	;
o	PONCT.W	o
le	D.def.m.s	le
second	A.ord.m.s	second
,	PONCT.W	,
de	P	de
type	N.C.m.s	type
jclass	N.C.m.p	jclass
s'	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
de	P	de
classe	N.C.f.s	classe
ou	C.C	ou
jobject	N.C.m.s	jobject
s'	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
d'	P	de
instance	N.C.f.s	instance
,	PONCT.W	,
est	V.P.3.s	être
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
vers	P	vers
un	D.ind.m.s	un
descripteur	N.C.m.s	descripteur
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
ou	C.C	ou
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
(	PONCT.W	(
une	D.ind.f.s	un
sorte	N.C.f.s	sorte
de	P	de
this	N.C.m.p	thi
)	PONCT.W	)
d'	P	de
appel	N.C.m.s	appel
15.1.3	D.card.f.p	@card@
implémentation	N.C.f.s	implémentation
C	PONCT.W	C
Exemple	N.C.m.s	exemple
de	P	de
fichier	N.C.m.s	fichier
MyRoutines.c	N.P.m.s	<unknown>
#include	N.P.m.s	<unknown>
<stdio.h>	N.P.m.s	<unknown>
#include	N.P.m.s	<unknown>
"	PONCT.W	"
MyClass.h	N.P.m.s	Myclassh
"	PONCT.W	"
JNIEXPORT	N.P.m.s	Jniexport
void	ET	void
JNICALL	N.P.m.s	Jnicall
Java_MyClass_procedure1	N.P.m.s	<unknown>
(	PONCT.W	(
JINIEnv	N.P.x.s	Jinienv
*	N.C.m.s	*
penv	N.C.f.p	penv
,	PONCT.W	,
jclass	N.C.m.p	jclass
cla	PRO.dem.m.s	cla
)	PONCT.W	)
{	D.card.m.s	{
printf("Routine	N.C.m.s	printfçroutine
procedure1\n	A.qual.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	P+D.def.m.s	c
JNIEXPORT	N.C.m.s	jniexport
void	ET	void
JNICALL	N.P.x.s	Jnicall
Java_MyClass_procedure2	N.P.x.s	<unknown>
(	PONCT.W	(
JINIEnv	N.P.x.s	Jinienv
*	ET	*
penv	N.C.f.p	penv
,	PONCT.W	,
jobject	N.C.m.s	jobject
obj	ET	obj
)	PONCT.W	)
{	D.card.m.s	{
printf("Routine	N.C.m.s	printfçroutine
procedure2\n	A.qual.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
15.2	D.card.m.p	@card@
Echange	N.C.m.s	echange
de	P	de
données	N.C.f.p	donnée
entre	P	entre
Java	N.P.m.s	Java
et	C.C	et
C	CL.suj.3.m.s	c
L'	D.def.m.s	le
échange	N.C.m.s	échange
de	P	de
données	N.C.f.p	donnée
entre	P	entre
l'	D.def.f.s	le
application	N.C.f.s	application
java	N.C.f.s	java
et	C.C	et
le	D.def.m.s	le
sous-programme	N.C.m.s	sous-programme
C	N.card.m.s	C
(	PONCT.W	(
par	P	par
les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
ou	C.C	ou
le	D.def.m.s	le
résultat	N.C.m.s	résultat
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
)	PONCT.W	)
suppose	V.P.3.s	supposer
une	D.ind.f.s	un
compatibilité	N.C.f.s	compatibilité
des	P+D.def.m.p	du
types	N.C.m.p	type
correspondants	A.qual.m.p	correspondant
.	PONCT.S	.

Or	C.C	or
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
pas	ADV.neg	pas
de	D.ind.f.s	de
correspondance	N.C.f.s	correspondance
systématique	A.qual.f.s	systématique
naturelle	A.qual.f.s	naturel
entre	P	entre
les	D.def.m.p	le
types	N.C.m.p	type
du	P+D.def.m.s	du
langage	N.C.m.s	langage
Java	N.P.m.s	Java
et	C.C	et
les	D.def.m.p	le
types	N.C.m.p	type
du	P+D.def.m.s	du
langage	N.C.m.s	langage
C	N.P.m.s	C
(	PONCT.W	(
un	D.ind.m.s	un
caractère	N.C.m.s	caractère
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
est	V.P.3.s	être
codé	VK.m.s	coder
sur	P	sur
16	D.card.m.p	@card@
bits	N.C.m.p	bit
en	P	en
Java	N.P.m.s	Java
et	C.C	et
sur	P	sur
8	D.card.m.p	@card@
bits	N.C.m.p	bit
en	P	en
C	N.P.f.s	C
)	PONCT.W	)
.	PONCT.S	.

Le	D.def.m.s	le
JNI	N.P.m.s	Jni
définit	V.P.3.s	définir
donc	ADV.-	donc
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
de	P	de
types	N.C.m.p	type
en	P	en
C	N.C.m.p	c
(	PONCT.W	(
de	P	de
noms	N.C.m.p	nom
j*	N.C.m.s	jä
)	PONCT.W	)
qui	PRO.rel.m.p	qui
correspondent	V.P.3.p	correspondre
aux	P+D.def.m.p	au
types	N.C.m.p	type
de	P	de
Java	N.P.m.s	Java
.	PONCT.S	.

Le	D.def.m.s	le
JNI	N.P.m.s	Jni
traite	V.P.3.s	traiter
les	D.def.m.p	le
types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
et	C.C	et
les	D.def.m.p	le
types	N.C.m.p	type
objets	N.C.m.p	objet
différemment	ADV.-	différemment
.	PONCT.S	.

La	D.def.f.s	le
correspondance	N.C.f.s	correspondance
des	P+D.def.m.p	du
types	N.C.m.p	type
primitifs	A.qual.m.p	primitif
est	V.P.3.s	être
directe	A.qual.f.s	direct
(	PONCT.W	(
voir	VW	voir
tableau	N.C.m.s	tableau
ci-après	ADV.-	ci-après
)	PONCT.W	)
,	PONCT.W	,
car	C.C	car
elle	CL.suj.3.f.s	elle
repose	V.P.3.s	reposer
sur	P	sur
une	D.ind.f.s	un
représentation	N.C.f.s	représentation
machine	A.qual.f.s	machin
des	P+D.def.f.p	du
données	N.C.f.p	donnée
identique	A.qual.f.s	identique
,	PONCT.W	,
mais	C.C	mais
ce	CL.suj.3.m.s	ce
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
le	D.def.m.s	le
cas	N.C.m.s	cas
pour	P	pour
les	D.def.m.p	le
types	N.C.m.p	type
objets	N.C.m.p	objet
.	PONCT.S	.

La	D.def.f.s	le
transmission	N.C.f.s	transmission
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
,	PONCT.W	,
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
,	PONCT.W	,
a	V.P.3.s	avoir
fortiori	VK.m.s	fortiorir
d'	P	de
une	D.ind.f.s	un
instance	N.C.f.s	instance
quelconque	A.qual.f.s	quelconque
de	P	de
classe	N.C.f.s	classe
,	PONCT.W	,
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
directe	A.qual.f.s	direct
et	C.C	et
nécessite	A.qual.f.s	nécessite
des	P+D.def.f.p	du
conversions	N.C.f.p	conversion
de	P	de
type	N.C.m.s	type
.	PONCT.S	.

Un	D.ind.m.s	un
paramètre	N.C.m.s	paramètre
java	ADV.neg	java
de	P	de
type	N.C.m.s	type
objet	N.C.m.s	objet
est	V.P.3.s	être
ainsi	ADV.-	ainsi
transmis	VK.m.s	transmettre
au	P+D.def.m.s	au
sous-	P	<unknown>
programme	N.C.m.s	programme
C	CL.suj.3.m.s	c
sous	P	sous
forme	N.C.f.s	forme
d'	P	de
un	D.ind.m.s	un
pointeur	N.C.m.s	pointeur
sur	P	sur
une	D.ind.f.s	un
structure	N.C.f.s	structure
de	P	de
données	N.C.f.p	donnée
interne	A.qual.f.s	interne
à	P	à
la	D.def.f.s	le
machine	N.C.f.s	machine
virtuelle	A.qual.f.s	virtuel
Java	N.P.m.s	Java
.	PONCT.S	.

L'	D.def.f.s	le
organisation	N.C.f.s	organisation
interne	A.qual.f.s	interne
de	P	de
cette	D.dem.f.s	ce
structure	N.C.f.s	structure
est	V.P.3.s	être
masquée	VK.f.s	masquer
au	P+D.def.m.s	au
programmeur	N.C.m.s	programmeur
mais	C.C	mais
celui	PRO.dem.m.s	celui
-ci	CL.suj.3.m.s	ci
peut	V.P.3.s	pouvoir
néanmoins	ADV.-	néanmoins
accéder	VW	accéder
aux	P+D.def.f.p	au
composantes	N.C.f.p	composante
sous-jacentes	A.qual.f.p	sous-jacent
via	P	via
les	D.def.f.p	le
fonctions	N.C.f.p	fonction
utilitaires	A.qual.f.p	utilitaire
offertes	VK.f.p	offrir
par	P	par
le	D.def.m.s	le
JNI	N.P.m.s	Jni
dans	P	dans
l'	D.def.m.s	le
environnement	N.C.m.s	environnement
JNIEnv	N.P.m.s	Jnienv
.	PONCT.S	.

Type	N.C.m.s	type
primitif	A.qual.m.s	primitif
Java	N.P.m.s	Java
Type	N.P.m.s	Type
primitif	A.qual.m.s	primitif
côté	VK.m.s	côter
C	ET	c
Description	ET	description
boolean	ET	boolean
jboolean	ET	<unknown>
unsigned	ET	unsigned
8	D.card.m.p	@card@
bits	N.C.m.p	bit
byte	ET	byte
jbyte	N.C.m.s	jbyte
signed	V.P.3.s	<unknown>
8	D.card.m.p	@card@
bits	N.C.m.p	bit
char	A.qual.m.s	char
jchar	N.C.m.s	jchar
unsigned	V.P.3.s	<unknown>
16	D.card.m.p	@card@
bits	N.C.m.p	bit
short	ET	short
jshort	N.C.m.s	jshort
signed	V.P.3.s	<unknown>
16	D.card.m.p	@card@
bits	N.C.m.p	bit
int	V.J.3.s	enir
jint	N.C.m.s	jint
signed	N.C.m.s	signed
32	D.card.m.p	@card@
bits	N.C.m.p	bit
long	A.qual.m.s	long
jlong	N.C.m.s	jlong
signed	V.P.3.s	<unknown>
64	D.card.m.p	@card@
bits	N.C.m.p	bit
float	N.C.m.s	float
jfloat	N.C.m.s	jfloat
32	D.card.m.p	@card@
bits	N.C.m.p	bit
double	A.qual.m.s	double
jdouble	N.C.m.s	jdouble
64	D.card.m.p	@card@
bits	N.C.m.p	bit
Par	P	par
la	D.def.f.s	le
suite	N.C.f.s	suite
,	PONCT.W	,
on	CL.suj.3.m.s	on
considèrera	V.F.3.s	considérer
de	P	de
bout	N.C.m.s	bout
en	P	en
bout	N.C.m.s	bout
le	D.def.m.s	le
même	A.qual.m.s	même
exemple	N.C.m.s	exemple
.	PONCT.S	.

15.2.1	A.card.f.s	@card@
Déclaration	N.C.f.s	déclaration
et	C.C	et
appel	N.C.m.s	appel
java	ET	java
Exemple	N.C.m.s	exemple
de	P	de
classe	N.C.f.s	classe
java	ET	java
public	A.qual.m.s	public
class	ET	class
MyClass	N.P.m.s	Myclass
{	ET	{
//	PONCT.W	@card@
Declaration	ET	declaration
of	ET	of
an	ET	an
extern	ET	extern
instance	ET	instance
function	N.C.f.s	function
native	A.qual.f.s	natif
public	A.qual.m.s	public
String	N.P.m.s	String
getMessage(int	ET	getmessageçint
id	ET	id
,	PONCT.W	,
String	N.P.m.s	String
prompt	N.C.m.s	prompt
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Test	N.P.m.s	Test
procedure	N.C.f.s	procedure
public	A.qual.m.s	public
static	A.qual.m.s	static
void	ET	void
main(String[	ET	mainästringë
]	PONCT.W	]
argv	N.C.m.s	<unknown>
)	PONCT.W	)
{	P	à
MyClass	N.P.m.s	Myclass
o	PONCT.W	o
=	ET	=
new	ET	new
MyClasse()	N.P.x.s	Myclasseëù
;	PONCT.W	;
System.out.println(o.getMessage(10	N.P.f.s	<unknown>
,	PONCT.W	,
"	PONCT.W	"
Name	N.P.m.s	Name
:	PONCT.W	:
"	PONCT.W	"
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
}	ET	}
//	PONCT.W	@card@
Load	N.P.m.s	Load
the	ET	the
library	ET	library
libMyRoutines	ET	<unknown>
static	A.qual.m.s	static
{	P+D.def.m.s	c
System.loadLibrary("libMyRoutines")	N.P.m.s	Systemoadlaryçleuesine
;	PONCT.W	;
}	D.card.m.s	}
}	N.C.m.s	}
15.22	D.card.m.p	@card@
Prototype	N.C.m.s	prototype
C	PONCT.W	C
Contenu	N.P.m.s	Contenu
(	PONCT.W	(
expurgé	VK.m.s	expurger
)	PONCT.W	)
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
MyClass.h	N.P.m.s	Myclassh
produit	VK.m.s	produire
par	P	par
javah	N.C.m.s	javah
/*	PONCT.W	<unknown>
DO	N.P.x.s	Do
NOT	N.P.m.s	Not
EDIT	N.P.x.s	Edit
THIS	N.C.m.p	thi
FILE	N.P.f.s	File
-	PONCT.W	-
it	C.C	it
is	VK.m.s	aller
machine	ET	machine
generated	ET	<unknown>
*/	PONCT.W	<unknown>
/*	ET	<unknown>
Header	N.P.m.s	Header
for	ET	for
class	N.C.m.p	class
MYClass	N.P.m.s	Myclass
*/	PONCT.W	<unknown>
JNIEXPORT	N.C.m.s	jniexport
jstring	N.C.m.s	jstring
JNICALL	N.P.m.s	Jnicall
Java_MyClass_getMessage	N.P.m.s	Javaëmyclass-Getmessage
(	PONCT.W	(
INIEnv	N.P.m.s	Inienv
*	N.C.m.s	*
,	PONCT.W	,
jobject	N.C.m.s	jobject
,	PONCT.W	,
jint	N.C.m.s	jint
,	PONCT.W	,
jstring	N.C.m.s	jstring
)	PONCT.W	)
;	PONCT.W	;
15.2.3	D.card.f.p	@card@
implémentation	N.C.f.s	implémentation
C	PONCT.W	C
Exemple	N.C.m.s	exemple
de	P	de
fichier	N.C.m.s	fichier
MyRoutines.c	N.P.m.s	<unknown>
#include	N.P.m.s	<unknown>
<stdio.h>	N.P.m.s	<unknown>
#include	N.P.m.s	<unknown>
"	PONCT.W	"
MyClass.h	N.P.m.s	Myclassh
"	PONCT.W	"
JNIEXPORT	N.C.m.s	jniexport
jstring	N.C.m.s	jstring
JNICALL	N.P.m.s	Jnicall
Java_MyClass_getMessage	N.P.m.s	Javaëmyclass-Getmessage
(	PONCT.W	(
JINIEnv	N.P.m.s	Jinienv
*	ET	*
penv	N.C.f.p	penv
,	PONCT.W	,
jobject	N.C.m.s	jobject
obj	ET	obj
,	PONCT.W	,
jint	N.C.m.s	jint
jid	N.C.m.s	jid
,	PONCT.W	,
jstring	N.C.m.s	jstring
jprompt	N.C.m.s	jprompt
)	PONCT.W	)
;	PONCT.W	;
{	N.C.m.p	{
const	N.C.m.s	const
char	A.qual.m.s	char
*	N.C.m.s	*
str	A.qual.m.s	<unknown>
;	PONCT.W	;
char	N.C.m.s	char
buf[128	N.C.m.s	<unknown>
]	PONCT.W	]
;	PONCT.W	;
/*	ET	<unknown>
Get	ET	get
the	ET	the
C	ET	c
string	ET	string
from	ET	from
the	ET	the
java	ET	java
string	ET	string
*/	PONCT.W	<unknown>
str	ET	<unknown>
=	PONCT.W	=
(*penv)->GetStringUTFChars(penv	N.P.x.s	<unknown>
,	PONCT.W	,
jprompt	N.C.m.s	jprompt
,	PONCT.W	,
NULL	N.P.f.s	Null
)	PONCT.W	)
;	PONCT.W	;
printf("%d	N.C.m.s	printfçëëd
-	PONCT.W	-
%s	N.C.m.p	-s
"	PONCT.W	"
,	PONCT.W	,
jid	N.C.m.s	jid
,	PONCT.W	,
str	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
/*	ET	<unknown>
Don't	N.P.m.s	Don't
forget	A.qual.m.s	forget
this	ET	thi
line	N.C.f.s	line
!	PONCT.S	!

!	PONCT.W	!
!	PONCT.S	!

*/	PONCT.W	<unknown>
(*penv)->ReleaseStringUTFChars(penv	N.P.x.s	<unknown>
,	PONCT.W	,
jprompt	N.C.m.s	jprompt
,	PONCT.W	,
str	ET	<unknown>
)	PONCT.W	)
;	PONCT.W	;
/*	ET	<unknown>
Assume	N.P.m.s	Assume
the	ET	the
user	VW	user
doesn't	ET	<unknown>
type	N.C.m.s	type
more	A.qual.m.s	more
than	ET	than
127	D.card.m.p	@card@
char	N.C.m.p	char
*/	PONCT.W	<unknown>
scanf("%s	N.C.m.p	scanfçëë
"	PONCT.W	"
,	PONCT.W	,
buf	N.C.m.s	buf
)	PONCT.W	)
;	PONCT.W	;
return	ET	return
(*penv)->NewStringUTF(penv	N.P.x.s	<unknown>
,	PONCT.W	,
buf	N.C.m.s	buf
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.p	}
Commentaires	N.C.m.p	commentaire
:	PONCT.W	:
-	PONCT.W	-
Les	D.def.f.p	le
représentations	N.C.f.p	représentation
physiques	A.qual.f.p	physique
des	P+D.def.f.p	du
chaînes	N.C.f.p	chaîne
de	P	de
type	N.C.m.s	type
jstring	N.C.m.s	jstring
et	C.C	et
de	P	de
type	N.C.m.s	type
char*	ET	charà
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
identiques	A.qual.f.p	identique
.	PONCT.S	.

Une	D.ind.f.s	un
conversion	N.C.f.s	conversion
doit	V.P.3.s	devoir
être	VW	être
réalisée	VK.f.s	réaliser
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
rôle	N.C.m.s	rôle
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
GetStringUTFChars	N.P.m.s	Getstringutfchars
et	C.C	et
NewStringUTF	N.P.m.s	Newstringutf
.	PONCT.S	.

À	P	à
noter	VW	noter
que	C.S	que
,	PONCT.W	,
dans	P	dans
tous	A.ind.m.p	tous
les	D.def.m.p	le
cas	N.C.m.p	cas
,	PONCT.W	,
la	D.def.f.s	le
conversion	N.C.f.s	conversion
des	P+D.def.m.p	du
caractères	N.C.m.p	caractère
non	ADV.neg	non
codables	A.qual.m.p	codable
en	P	en
ASCII	N.P.f.s	Ascii
7	D.card.m.p	@card@
bits	N.C.m.p	bit
(	PONCT.W	(
lettres	N.C.f.p	lettre
accentuées	VK.f.p	accentuer
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
posera	V.F.3.s	poser
problème	N.C.m.s	problème
.	PONCT.S	.

-	PONCT.W	-
La	D.def.f.s	le
fonction	N.C.f.s	fonction
GetStringUTFChars	N.P.m.s	Getstringutfchars
réalisant	VG	réaliser
une	D.ind.f.s	un
allocation	N.C.f.s	allocation
mémoire	A.qual.f.s	mémoire
dynamique	A.qual.f.s	dynamique
,	PONCT.W	,
une	D.ind.f.s	un
désallocation	N.C.f.s	désallocation
doit	V.P.3.s	devoir
être	VW	être
obligatoirement	ADV.-	obligatoirement
réalisée	VK.f.s	réaliser
avant	P	avant
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
sous-	P	<unknown>
programme	N.C.m.s	programme
:	PONCT.W	:
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
rôle	N.C.m.s	rôle
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
ReleaseStringUTFChars	N.P.m.s	<unknown>
16	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
6	A.card.m.s	@card@
-	PONCT.W	-
PLATES-FORMES	N.C.m.p	plates-formes
JAVA	N.P.m.s	Java
Références	N.C.f.p	référence
:	PONCT.W	:
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Standard	N.P.m.s	Standard
Edition	N.C.f.s	edition
6	N.card.m.s	@card@
,	PONCT.W	,
API	N.P.x.s	Api
Specification	N.C.f.s	specification
:	PONCT.W	:
java.sun.com/javase/6/docs/api/	ET	<unknown>
New	ET	new
features	N.C.f.p	feature
and	ET	and
Enhancements	N.C.m.p	enhancement
J2SE	N.P.m.s	Jise
5.0	ET	@card@
:	PONCT.W	:
java.sun.com/j2se/1.5.0/docs/relnotes/features.html	ET	<unknown>
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Standard	N.P.m.s	Standard
Edition	N.P.f.s	Edition
:	PONCT.W	:
java.sun.com/javase/	ET	<unknown>
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Enterprise	N.C.f.s	enterprise
Edition	N.P.f.s	Edition
:	PONCT.W	:
java.sun.com/javaee/	ET	<unknown>
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Micro	N.P.m.s	Micro
Edition	N.P.m.s	Edition
:	PONCT.W	:
java.sun.com/javame/	ET	<unknown>
JDK	ET	jdk
Tools	ET	tool
and	ET	and
Utilities	N.P.m.s	Utilities
:	PONCT.W	:
java.sun.com/javase/6/docs/technotes/tools/	ADV.-	<unknown>
Sun	ET	sun
Microsystems	N.P.m.s	Microsystems
fournit	V.P.3.s	fournir
trois	D.card.f.p	trois
plates-formes	N.C.f.p	plates-forme
Java	N.P.m.s	Java
permettant	VG	permettre
le	D.def.m.s	le
développement	N.C.m.s	développement
et	C.C	et
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
programmes	N.C.m.p	programme
Java	N.P.m.s	Java
:	PONCT.W	:
Java	N.P.m.s	Java
SE	N.C.f.s	se
(	PONCT.W	(
le	D.def.m.s	le
standard	N.C.m.s	standard
de	P	de
base	N.C.f.s	base
)	PONCT.W	)
,	PONCT.W	,
Java	N.P.m.s	Java
EE	N.P.x.s	Ee
et	C.C	et
Java	N.P.m.s	Java
ME	N.C.m.s	me
.	PONCT.S	.

A	P	à
noter	VW	noter
que	C.S	que
ces	D.dem.m.p	ce
noms	N.C.m.p	nom
sont	V.P.3.p	être
ceux	PRO.dem.m.p	celui
employés	N.C.m.p	employé
pour	P	pour
les	D.def.f.p	le
versions	N.C.f.p	version
sorties	VK.f.p	sortir
depuis	P	depuis
2006	N.card.f.s	@card@
:	PONCT.W	:
antérieurement	ADV.-	antérieurement
,	PONCT.W	,
ces	D.dem.f.p	ce
plates-	A.qual.f.p	<unknown>
formes	N.C.f.p	forme
étaient	V.I.3.p	être
nommées	VK.f.p	nommer
respectivement	ADV.-	respectivement
J2SE	N.P.f.s	Jise
,	PONCT.W	,
J2EE	N.P.m.s	Jiee
et	C.C	et
J2ME	N.P.m.s	Jrme
.	PONCT.S	.

Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Standard	N.P.m.s	Standard
Edition	N.P.m.s	Edition
(	PONCT.W	(
Java	N.P.m.s	Java
SE	N.C.f.s	se
)	PONCT.W	)
.	PONCT.S	.

Cette	D.dem.f.s	ce
plate-forme	N.C.f.s	plate-forme
est	V.P.3.s	être
le	D.def.m.s	le
framework	N.C.m.s	framework
Java	N.P.m.s	Java
de	P	de
base	N.C.f.s	base
permettant	VG	permettre
de	P	de
développer	VW	développer
ou/et	C.C	<unknown>
exécuter	VW	exécuter
des	D.ind.m.p	du
programmes	N.C.m.p	programme
Java	N.P.m.s	Java
.	PONCT.S	.

La	D.def.f.s	le
dernière	A.qual.f.s	dernier
version	N.C.f.s	version
nommée	VK.f.s	nommer
J2SE	N.P.m.s	Jise
est	V.P.3.s	être
la	D.def.f.s	le
version	N.C.f.s	version
5.0	N.card.f.s	@card@
et	C.C	et
porte	V.P.3.s	porter
le	D.def.m.s	le
nom	N.C.m.s	nom
J2SE	N.P.m.s	Jise
5.0	N.card.m.s	@card@
:	PONCT.W	:
il	CL.suj.3.m.s	il
est	V.P.3.s	être
à	P	à
souligner	VW	souligner
que	C.S	que
cette	D.dem.f.s	ce
version	N.C.f.s	version
apportait	V.I.3.s	apporter
une	D.ind.f.s	un
mise	N.C.f.s	mise
à	P	à
jour	N.C.m.s	jour
majeure	A.qual.m.s	majeur
par	P	par
rapport	N.C.m.s	rapport
à	P	à
la	D.def.f.s	le
précédente	N.C.f.s	précédent
.	PONCT.S	.

La	D.def.f.s	le
version	N.C.f.s	version
actuelle	A.qual.f.s	actuel
la	D.def.f.s	le
plus	ADV.-	plus
récente	A.qual.f.s	récent
date	N.C.f.s	date
de	P	de
décembre	N.C.m.s	décembre
2006	N.card.f.s	@card@
:	PONCT.W	:
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
version	N.C.f.s	version
6	N.card.f.s	@card@
et	C.C	et
elle	CL.suj.3.f.s	elle
porte	V.P.3.s	porter
le	D.def.m.s	le
nom	N.C.m.s	nom
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
6	A.card.m.s	@card@
.	PONCT.S	.

La	D.def.f.s	le
version	N.C.f.s	version
7	A.card.f.s	@card@
(	PONCT.W	(
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
7	A.card.f.s	@card@
)	PONCT.W	)
est	V.P.3.s	être
annoncée	VK.f.s	annoncer
comme	P	comme
nouvelle	A.qual.f.s	nouveau
mise	N.C.f.s	mise
à	P	à
jour	N.C.m.s	jour
majeure	A.qual.f.s	majeur
mais	C.C	mais
,	PONCT.W	,
à	P	à
mi	N.C.m.s	mi
2010	N.card.m.s	@card@
,	PONCT.W	,
est	V.P.3.s	être
toujours	ADV.-	toujours
attendue	VK.f.s	attendre
.	PONCT.S	.

La	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
délivre	V.P.3.s	délivrer
deux	D.card.m.p	deux
produits	N.C.m.p	produit
logiciels	A.qual.m.p	logiciel
principaux	A.qual.m.p	principal
:	PONCT.W	:
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
Runtime	ET	runtime
Environment	ADV.-	environment
(	PONCT.W	(
ou	C.C	ou
plus	ADV.-	plus
communément	ADV.-	communément
JRE	N.P.f.s	Jre
)	PONCT.W	)
,	PONCT.W	,
qui	PRO.rel.f.s	qui
fournit	V.P.3.s	fournir
les	D.def.f.p	le
librairies	N.C.f.p	librairie
,	PONCT.W	,
la	D.def.f.s	le
machine	N.C.f.s	machine
java	N.C.f.s	java
virtuelle	A.qual.f.s	virtuel
et	C.C	et
d'	D.ind.f.p	de
autres	A.ind.f.p	autre
composantes	N.C.f.p	composante
nécessaires	A.qual.f.p	nécessaire
pour	P	pour
exécuter	VW	exécuter
des	D.ind.m.p	du
programmes	N.C.m.p	programme
Java	N.P.m.s	Java
.	PONCT.S	.

Java	N.P.m.s	Java
SE	CL.refl.3.m.s	se
Development	ET	development
Kit	N.P.m.s	Kit
(	PONCT.W	(
ou	C.C	ou
plus	ADV.-	plus
communément	ADV.-	communément
JDK	N.P.x.s	Jdk
)	PONCT.W	)
,	PONCT.W	,
qui	PRO.rel.m.s	qui
inclut	V.P.3.s	inclure
le	D.def.m.s	le
JRE	N.P.m.s	Jre
plus	ADV.-	plus
des	D.ind.m.p	du
outils	N.C.m.p	outil
de	P	de
développement	N.C.m.s	développement
,	PONCT.W	,
tels	A.qual.m.p	tel
que	C.S	que
compilateur	N.C.m.s	compilateur
et	C.C	et
débogueur	N.C.m.s	débogueur
,	PONCT.W	,
nécessaires	A.qual.m.p	nécessaire
ou	C.C	ou
utiles	A.qual.m.p	utile
pour	P	pour
développer	VW	développer
des	D.ind.m.p	du
programmes	N.C.m.p	programme
Java	N.P.m.s	Java
.	PONCT.S	.

A	P	à
noter	VW	noter
que	C.S	que
le	D.def.m.s	le
terme	N.C.m.s	terme
JDK	N.P.x.s	Jdk
,	PONCT.W	,
bien	ADV.-	bien
que	C.S	que
très	ADV.-	très
populaire	A.qual.m.s	populaire
,	PONCT.W	,
est	V.P.3.s	être
devenu	VK.m.s	devenir
imprécis	A.qual.m.s	imprécis
car	C.C	car
d'	D.ind.f.p	de
autres	A.ind.f.p	autre
plates-formes	N.C.f.p	plates-forme
Java	N.P.m.s	Java
(	PONCT.W	(
Java	N.P.m.s	Java
EE	C.C	ee
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
comportent	V.P.3.p	comporter
elles	PPRO.3.f.p	elle
aussi	ADV.-	aussi
leur	D.poss.m.s	leur
propre	A.qual.m.s	propre
kit	N.C.m.s	kit
de	P	de
développement	N.C.m.s	développement
.	PONCT.S	.

Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Enterprise	N.C.f.s	enterprise
Edition	N.P.f.s	Edition
(	PONCT.W	(
Java	N.P.m.s	Java
EE	N.P.f.s	Ee
)	PONCT.W	)
.	PONCT.S	.

Cette	D.dem.f.s	ce
plate-forme	N.C.f.s	plate-forme
est	V.P.3.s	être
un	D.ind.m.s	un
framework	N.C.m.s	framework
Java	N.P.m.s	Java
plus	ADV.-	plus
particulièrement	ADV.-	particulièrement
destiné	VK.m.s	destiner
aux	P+D.def.f.p	au
applications	N.C.f.p	application
d'	P	de
entreprises	N.C.f.p	entreprise
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
offre	V.P.3.s	offrir
un	D.ind.m.s	un
cadre	N.C.m.s	cadre
standard	A.qual.m.s	standard
pour	P	pour
développer	VW	développer
des	D.ind.f.p	du
applications	N.C.f.p	application
distribuées	VK.f.p	distribuer
.	PONCT.S	.

Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Micro	N.P.m.s	Micro
Edition	N.P.m.s	Edition
(	PONCT.W	(
Java	N.P.m.s	Java
ME	N.C.m.s	me
)	PONCT.W	)
.	PONCT.S	.

Cette	D.dem.f.s	ce
plate-forme	N.C.f.s	plate-forme
est	V.P.3.s	être
un	D.ind.m.s	un
framework	N.C.m.s	framework
Java	N.P.m.s	Java
spécialisé	VK.m.s	spécialiser
dans	P	dans
les	D.def.f.p	le
applications	N.C.f.p	application
mobiles	A.qual.f.p	mobile
.	PONCT.S	.

Des	D.ind.f.p	du
plates-formes	N.C.f.p	plates-forme
Java	N.P.m.s	Java
compatibles	A.qual.f.p	compatible
avec	P	avec
J2ME	N.P.m.s	Jrme
sont	V.P.3.p	être
embarquées	VK.f.p	embarquer
dans	P	dans
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
téléphones	N.C.m.p	téléphone
mobiles	A.qual.m.p	mobile
et	C.C	et
PDA	N.P.x.s	Pda
.	PONCT.S	.

De	P	de
façon	N.C.f.s	façon
plus	ADV.-	plus
spécifique	A.qual.f.s	spécifique
,	PONCT.W	,
on	CL.suj.3.m.s	on
pourrait	V.C.3.s	pouvoir
aussi	ADV.-	aussi
citer	VW	citer
les	D.def.m.p	le
plateformes	N.C.m.p	plateforme
Java	N.P.m.s	Java
Card	N.P.m.s	Card
(	PONCT.W	(
qui	PRO.rel.m.s	qui
fournit	V.P.3.s	fournir
un	D.ind.m.s	un
environnement	N.C.m.s	environnement
pour	P	pour
le	D.def.m.s	le
développement	N.C.m.s	développement
d'	P	de
applications	N.C.f.p	application
sur	P	sur
cartes	N.C.f.p	carte
à	P	à
puce	N.C.f.s	puce
)	PONCT.W	)
et	C.C	et
JavaFX	N.P.m.s	Javafx
(	PONCT.W	(
pour	P	pour
créer	VW	créer
des	D.ind.f.p	du
Rich	N.P.f.p	Rich
Internet	N.P.m.s	Internet
Applications	N.C.f.p	application
)	PONCT.W	)
.	PONCT.S	.

17	A.card.m.s	@card@
ANNEXE	N.C.m.s	annexe
7	A.card.m.s	@card@
-	PONCT.W	-
GLOSSAIRE	N.P.m.s	Glossaire
On	CL.suj.3.m.s	on
trouve	V.P.3.s	trouver
facilement	ADV.-	facilement
sur	P	sur
le	D.def.m.s	le
web	N.C.m.s	web
d'	P	de
excellentes	A.qual.f.p	excellent
définitions	N.C.f.p	définition
en	P	en
anglais	N.C.m.s	anglais
des	P+D.def.m.p	du
termes	N.C.m.p	terme
,	PONCT.W	,
sigles	N.C.m.p	sigle
,	PONCT.W	,
et	C.C	et
même	ADV.-	même
produits	VK.m.p	produire
de	P	de
référence	N.C.f.s	référence
,	PONCT.W	,
informatiques	A.qual.m.p	informatique
.	PONCT.S	.

Parmi	P	parmi
les	D.def.f.p	le
sources	N.C.f.p	source
possibles	A.qual.f.p	possible
,	PONCT.W	,
citons	N.C.m.p	citon
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
-	PONCT.W	-
parmi	P	parmi
les	D.def.f.p	le
encyclopédies	N.C.f.p	encyclopédie
:	PONCT.W	:
www.wikipedia.org	N.C.m.s	<unknown>
(	PONCT.W	(
la	D.def.f.s	le
version	N.C.f.s	version
anglaise	A.qual.f.s	anglais
étant	VG	être
la	D.def.f.s	le
plus	ADV.-	plus
complète	A.qual.f.s	complet
)	PONCT.W	)
-	PONCT.W	-
parmi	P	parmi
les	D.def.m.p	le
moteurs	N.C.m.p	moteur
spécialisés	VK.m.p	spécialiser
dans	P	dans
la	D.def.f.s	le
recherche	N.C.f.s	recherche
dans	P	dans
les	D.def.f.p	le
encyclopédies	N.C.f.p	encyclopédie
,	PONCT.W	,
dictionnaires	N.C.m.p	dictionnaire
et	C.C	et
glossaires	N.C.m.p	glossaire
:	PONCT.W	:
www.answers.com	N.C.m.s	wwwanswors
Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
glossaire	N.C.m.s	glossaire
de	P	de
quelques	D.ind.m.p	quelque
termes	N.C.m.p	terme
et	C.C	et
sigles	N.C.m.p	sigle
généraux	A.qual.m.p	général
courants	A.qual.m.p	courant
:	PONCT.W	:
Sigle	N.P.f.s	Sigle
/	P	@ca
terme	N.C.m.s	terme
Définition	N.C.f.s	définition
Commentaire	A.qual.f.s	commentaire
API	N.P.x.s	Api
Application	N.C.f.s	application
Programming	N.P.m.s	Programming
Bibliothèque	N.P.x.s	Bibliothèque
de	P	de
fonctionnalités	N.C.f.p	fonctionnalité
communes	A.qual.f.p	commun
,	PONCT.W	,
Interface	N.C.f.p	interface
courantes	A.qual.f.p	courant
et	C.C	et
de	P	de
bas	A.qual.m.s	bas
niveau	N.C.m.s	niveau
.	PONCT.S	.

Constitue	V.P.3.s	constituer
une	D.ind.f.s	un
interface	N.C.f.s	interface
entre	P	entre
couches	N.C.f.p	couche
basses	A.qual.f.p	bas
et	C.C	et
couches	N.C.f.p	couche
applicatives	A.qual.f.p	applicatif
de	P	de
plus	ADV.-	plus
haut	A.qual.m.s	haut
niveau	N.C.m.s	niveau
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
java.sun.com/javase/6/docs/api/	N.C.m.s	<unknown>
spécifie	V.P.3.s	spécifier
les	D.def.m.p	le
API	N.C.f.p	api
standard	N.C.m.s	standard
de	P	de
Java	N.P.m.s	Java
fournies	VK.f.p	fournir
dans	P	dans
le	D.def.m.s	le
JDK	N.P.m.s	Jdk
6	A.card.m.s	@card@
.	PONCT.S	.

Framework	N.P.m.s	Framework
Cadre	N.P.m.s	Cadre
d'	P	de
applications	N.C.f.p	application
Ensemble	ADV.-	ensemble
cohérent	A.qual.m.s	cohérent
de	P	de
classes	N.C.f.p	classe
(	PONCT.W	(
généralement	ADV.-	généralement
abstraites	VK.f.p	abstraire
)	PONCT.W	)
et	C.C	et
d'	P	de
interfaces	N.C.f.p	interface
permettant	VG	permettre
le	D.def.m.s	le
développement	N.C.m.s	développement
rapide	A.qual.m.s	rapide
d'	P	de
applications	N.C.f.p	application
.	PONCT.S	.

Fournit	V.P.3.s	fournir
suffisamment	ADV.-	suffisamment
de	P	de
briques	N.C.f.p	brique
logicielles	A.qual.f.p	logiciel
pour	P	pour
pouvoir	VW	pouvoir
produire	VW	produire
une	D.ind.f.s	un
application	N.C.f.s	application
aboutie	VK.f.s	aboutir
.	PONCT.S	.

Typiquement	ADV.-	typiquement
spécialisé	VK.m.s	spécialiser
pour	P	pour
un	D.ind.m.s	un
type	N.C.m.s	type
d'	P	de
application	N.C.f.s	application
.	PONCT.S	.

GUI	N.C.m.s	gui
Graphical	N.P.m.s	Graphical
User	N.P.m.s	User
Interface	N.P.m.s	Interface
Interface	N.P.m.s	Interface
homme-machine	N.C.m.s	homme-machine
graphique	A.qual.m.s	graphique
,	PONCT.W	,
par	P	par
opposition	N.C.f.s	opposition
à	P	à
interface	N.C.f.s	interface
en	P	en
ligne	N.C.f.s	ligne
de	P	de
commande	N.C.f.s	commande
.	PONCT.S	.

IDE	A.ord.m.s	Ide
Integrated	N.P.m.s	Integrated
Development	N.P.m.s	Development
Programme	N.P.m.s	Programme
regroupant	VG	regrouper
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
d'	P	de
utilitaires	N.C.m.p	utilitaire
Environment	ADV.-	environment
logiciels	A.qual.m.p	logiciel
pour	P	pour
le	D.def.m.s	le
développement	N.C.m.s	développement
de	P	de
programmes	N.C.m.p	programme
(	PONCT.W	(
éditeur	N.C.m.s	éditeur
de	P	de
texte	N.C.m.s	texte
,	PONCT.W	,
compilateur	N.C.m.s	compilateur
,	PONCT.W	,
débogueur	N.C.m.s	débogueur
,	PONCT.W	,
gestionnaire	N.C.m.s	gestionnaire
de	P	de
versions	N.C.f.p	version
,	PONCT.W	,
aide	N.C.f.s	aide
à	P	à
la	D.def.f.s	le
production	N.C.f.s	production
d'	P	de
interfaces	N.C.f.p	interface
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Généralement	ADV.-	généralement
dédié	VK.m.s	dédier
à	P	à
un	D.ind.m.s	un
seul	A.qual.m.s	seul
langage	N.C.m.s	langage
de	P	de
programmation	N.C.f.s	programmation
.	PONCT.S	.

JDK	N.P.m.s	Jdk
Java	N.P.m.s	Java
Development	N.P.m.s	Development
Kit	N.P.m.s	Kit
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
JFC	N.P.m.s	Jfc
Java	N.P.m.s	Java
Foundation	N.P.m.s	Foundation
Classes	N.P.m.s	Classes
Cadre	N.P.m.s	Cadre
d'	P	de
applications	N.C.f.p	application
graphiques	A.qual.f.p	graphique
.	PONCT.S	.

Ensemble	ADV.-	ensemble
de	P	de
classes	N.C.f.p	classe
Java	N.P.m.s	Java
permettant	VG	permettre
de	P	de
construire	VW	construire
des	D.ind.f.p	du
interfaces	N.C.f.p	interface
utilisateur	N.C.m.s	utilisateur
graphiques	A.qual.f.p	graphique
portables	A.qual.f.p	portable
.	PONCT.S	.

Contient	V.P.3.s	contenir
notamment	ADV.-	notamment
les	D.def.m.p	le
composants	N.C.m.p	composant
Swing	N.P.m.s	Swing
.	PONCT.S	.

JRE	N.P.m.s	Jre
Java	N.P.m.s	Java
Runtime	N.P.m.s	Runtime
Environment	N.P.x.s	Environment
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
J2EE	N.P.m.s	Jiee
Java	N.P.m.s	Java
2	A.card.m.s	@card@
Platform	N.P.m.s	Platform
,	PONCT.W	,
Enterprise	N.P.f.s	Enterprise
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
Edition	N.C.f.s	edition
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Enterprise	N.C.f.s	enterprise
J2ME	N.P.m.s	Jrme
Java	N.P.m.s	Java
2	A.card.m.s	@card@
Platform	N.P.m.s	Platform
,	PONCT.W	,
Micro	N.P.m.s	Micro
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
Edition	N.C.f.s	edition
Java	N.P.m.s	Java
ME	N.C.m.s	me
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Micro	N.P.m.s	Micro
Edition	N.P.m.s	Edition
J2SE	N.P.m.s	Jise
Java	N.P.m.s	Java
2	A.card.m.s	@card@
Platform	N.P.m.s	Platform
,	PONCT.W	,
Standard	N.P.m.s	Standard
(	PONCT.W	(
voir	VW	voir
chapitre	N.C.m.s	chapitre
16	A.card.m.s	@card@
)	PONCT.W	)
Edition	N.C.f.s	edition
Java	N.P.m.s	Java
SE	CL.refl.3.f.s	se
Java	N.P.m.s	Java
Platform	N.P.m.s	Platform
,	PONCT.W	,
Standard	N.P.m.s	Standard
Edition	N.C.f.s	edition
Et	C.C	et
plus	ADV.-	plus
spécifiquement	ADV.-	spécifiquement
dans	P	dans
le	D.def.m.s	le
cadre	N.C.m.s	cadre
d'	P	de
applications	N.C.f.p	application
professionnelles	A.qual.f.p	professionnel
Java	N.P.m.s	Java
distribuées	VK.f.p	distribuer
:	PONCT.W	:
Sigle	N.P.m.s	Sigle
/	P	@ca
terme	N.C.m.s	terme
Définition	N.C.f.s	définition
Commentaire	A.qual.f.s	commentaire
EJB	N.P.m.s	Ejb
Enterprise	N.C.f.s	enterprise
JavaBeans	N.P.m.s	Javabeans
Technologie	N.P.f.s	Technologie
Java	N.P.m.s	Java
,	PONCT.W	,
offerte	VK.f.s	offrir
par	P	par
la	D.def.f.s	le
plateforme	N.C.f.s	plateforme
Java	N.P.m.s	Java
EE	N.P.m.s	Ee
,	PONCT.W	,
permettant	VG	permettre
de	P	de
créer	VW	créer
des	D.ind.m.p	du
composants	N.C.m.p	composant
distribués	VK.m.p	distribuer
hébergés	VK.m.p	héberger
dans	P	dans
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
d'	P	de
applications	N.C.f.p	application
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
architecture	N.C.f.s	architecture
MVC	N.P.x.s	Mvc
,	PONCT.W	,
utilisé	VK.m.s	utiliser
pour	P	pour
réaliser	VW	réaliser
le	D.def.m.s	le
Modèle	N.P.m.s	Modèle
.	PONCT.S	.

java.sun.com/products/ejb/	N.C.m.s	<unknown>
JSP	N.P.m.s	Jsp
Java	N.P.m.s	Java
Server	VW	server
Pages	N.P.m.s	Pages
Technologie	N.P.m.s	Technologie
Java	N.P.m.s	Java
,	PONCT.W	,
offerte	VK.f.s	offrir
par	P	par
la	D.def.f.s	le
plateforme	N.C.f.s	plateforme
Java	N.P.m.s	Java
EE	N.P.m.s	Ee
,	PONCT.W	,
permettant	VG	permettre
de	P	de
créer	VW	créer
des	D.ind.f.p	du
pages	N.C.f.p	page
Web	N.P.m.s	Web
dynamiques	A.qual.f.p	dynamique
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
architecture	N.C.f.s	architecture
MVC	N.P.x.s	Mvc
,	PONCT.W	,
utilisé	VK.m.s	utiliser
pour	P	pour
réaliser	VW	réaliser
la	D.def.f.s	le
Vue	N.C.f.s	vue
.	PONCT.S	.

java.sun.com/products/jsp/	N.C.m.s	<unknown>
Servlet	N.P.m.s	Servlet
Technologie	N.P.m.s	Technologie
Java	N.P.m.s	Java
,	PONCT.W	,
offerte	VK.f.s	offrir
par	P	par
la	D.def.f.s	le
plateforme	N.C.f.s	plateforme
Java	N.P.m.s	Java
EE	N.P.m.s	Ee
,	PONCT.W	,
permettant	VG	permettre
d'	P	de
étendre	VW	étendre
la	D.def.f.s	le
fonctionnalité	N.C.f.s	fonctionnalité
d'	P	de
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
(	PONCT.W	(
accès	N.C.m.s	accès
à	P	à
des	D.ind.f.p	du
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
,	PONCT.W	,
transactions	N.C.f.p	transaction
d'	P	de
e-commerce	N.C.m.s	e-commerce
,	PONCT.W	,
...	PONCT.W	<unknown>
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Dans	P	dans
une	D.ind.f.s	un
architecture	N.C.f.s	architecture
MVC	N.P.x.s	Mvc
,	PONCT.W	,
utilisé	VK.m.s	utiliser
pour	P	pour
réaliser	VW	réaliser
le	D.def.m.s	le
Contrôleur	N.C.m.s	contrôleur
.	PONCT.S	.

java.sun.com/products/servlet/	ADV.neg	<unknown>

