Cours
PHP
Accéléré
Version
0.9.1
Gérard
Rozsavolgyi
septembre
19
2018
Table
matières
1
cours
format
epub
1
2
cours
format
pdf
3
3
Tables
matières
5
3.1
Caractéristiques
Principales
5
3.2
Fonctionnement
6
3.3
Historique
7
3.4
Installation
PHP
9
3.5
Configuration
PHP
10
3.6
Exemples
simples
20
3.7
Imbrication
code
HTML
PHP
22
3.8
formulaire
HTML
réponse
PHP
23
3.9
variables
PHP
25
3.10
chaînes
PHP
26
3.11
typage
PHP
29
3.12
Quelques
particularités
PHP
30
3.13
tableaux
PHP
31
3.14
tableaux
prédéfinis
PHP
34
3.15
inclusion
fichiers
externes
35
3.16
Objets
PHP
36
3.17
collections
PHP
39
3.18
Connexion
bases
données
depuis
PHP
41
3.19
Requêtes
préparées
PHP
50
3.20
Compléments
PDO
-
Sécurité
52
3.21
Filtrage
PHP
53
3.22
Gestion
transactions
PDO
55
3.23
Connexion
persistante
PDO
56
3.24
Validation
contrôle
entrées
GUMP
57
3.25
Http
conservation
informations
clients
59
3.26
Manipuler
XML
PHP
62
3.27
Architecture
type
MVC
PHP
69
3.28
Templates
Twig
PHP
75
i
3.29
Composer
Symfony
4
Flex
81
3.30
Tester
application
PHP
-
TDD
86
3.31
Mettre
place
Web
Service
REST
89
3.32
Exemple
service
REST
PHP
90
3.33
Tester
API
REST
navigateur
curl
94
3.34
Tester
API
96
3.35
Feuilles
TD
Lic
Pro
Web
Mobile
97
3.36
Feuilles
TD
2ème
Année
IUT
informatique
97
3.37
Feuilles
TD
Lic
Pro
Web
Mobile
97
3.38
Feuilles
TD
CVRH
Tours
98
3.39
Alice
démarre
git
98
3.40
Bob
travaille
Alice
grâce
git
99
3.41
Alice
met
jour
100
3.42
Alice
travaille
branche
git
100
3.43
Bob
branche
Alice
101
3.44
Alice
récupère
dernière
version
master
102
4
GIT
103
5
Références
105
6
Index
recherche
107
Index
109
ii
CHAPITRE
1
cours
format
epub
PHP
accéléré
format
epub
1
Cours
PHP
Accéléré
Version
0.9.1
2
Chapitre
1
cours
format
epub
CHAPITRE
2
cours
format
pdf
PHP
accéléré
pdf
3
Cours
PHP
Accéléré
Version
0.9.1
4
Chapitre
2
cours
format
pdf
CHAPITRE
3
Tables
matières
3.1
Caractéristiques
Principales
3.1.1
Langage
interprété
—
compilation
—
Exécuté
instruction
instruction
—
Multi-plateformes
—
Compilateur
AOT/ByteCode
PHP7
Zend
—
Compilateur
JIT
HHVM
Facebook
—
Langage
Hack
proposé
Facebook
3.1.2
Spécialisé
génération
texte
documents
—
HTML
—
PDF
—
Images
3.1.3
Fichiers
extension
.php
—
Code
inséré
page
HTML
—
Entre
balises
php
5
Cours
PHP
Accéléré
Version
0.9.1
3.2
Fonctionnement
3.2.1
interpréteur
lit
fichier
source
.php
puis
génère
flux
sortie
règles
suivantes
—
toute
ligne
située
extérieur
bloc
PHP
entre
php
recopiée
inchangée
flux
sortie
—
code
PHP
interprété
génère
éventuellement
résultats
intégrés
aussi
flux
sortie
—
erreurs
éventuelles
donnent
lieu
messages
erreurs
retrouve
également
flux
sortie
selon
configuration
serveur
—
page
html
pure
sauvegardée
extension
.php
non
modifiée
ren-
voyée
telle
quelle
6
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.3
Historique
3.3.1
Créateur
Rasmus
Lerdorf
programmeur
Groenlandais
nationalité
canadienne
crée
PHP
1994
analyser
connexions
site
Web
réalise
2
premières
moutures
langage
v1
v2
1997
deux
étudiants
Andi
Gutmans
Zeev
Suraski
reprennent
moteur
sortira
PHP
3.0
puis
outils
Zend
Note
langage
PHP
subi
profonds
remaniements
bénéficié
beaucoup
enrichis-sements
depuis
premières
versions
première
version
objet
PHP
version
4
profondément
remaniée
lors
passage
PHP4.0
PHP5.0
inspire
désormais
largement
modèle
Java
version
actuelle
PHP
7.2
sortie
2018
version
7
sortie
Décembre
2015
jamais
version
6
PHP
7
https
//wiki.php.net/rfc/php7timeline
Avertissement
début
développement
version
6
PHP
date
2005
abandonnée
raison
difficultés
intégration
support
Unicode
autres
fonctionnalités
envisagées
depuis
intégrées
PHP
5.3
5.4
Ca
empêché
certain
nombre
livres
intitulés
PHP
6
sortir
bien
version
existera
jamais
3.3.2
saga
PHP
7
—
Facebook
publié
2011
HipHop
Virtual
Machine
dit
HHVM
machine
virtuelle
permettant
pré-compiler
code
PHP
bytecode
manière
Java
JIT
Compi-
ler
—
2014
Facebook
sort
langage
Hack
exécutant
grace
HHVM
apportant
fonctionnalités
comme
typage
fort
classes
paramétrables
API
collec-
tions
plus
riche
cohérente
traitements
asynchrones
davantage
sécurité
extension
XHP
—
framework
PHP
Phalcon
extension
PECL
PHP
propose
Zephir
Zend
Engine
PHp
Intermediate
https
//github.com/phalcon/zephir
permet
création
extensions
rapides
PHP
codées
manière
simplifiée
sans
écrire
directe-
ment
—
société
Zend
réagi
face
HHVM
accélérant
développement
nouvelle
mouture
PHP
7
améliorant
performances
mécanisme
compilation
AOT
Ahead
of
Time
3.3.3
PHP
Signifie
abord
Personal
Home
Pages
puis
HypertextPreProcessor
3.3
Historique
7
Cours
PHP
Accéléré
Version
0.9.1
3.3.4
Syntaxe
structure
—
Proche
Perl
—
Peu
structuré
début
—
Possibilité
définir
fonctions
classes
—
Très
bonnes
performances
PHP
7
améliorations
ordre
50
vitesse
exécution
3.3.5
Utilisation
—
Grand
succès
—
Utilisation
très
grands
sites
—
beaucoup
code
libre
disponible
—
dizaines
millions
sites
Web
utilisent
travers
monde
—
Comme
Monde
http
//lemonde.fr/
Facebook
http
//facebook.fr/
Yahoo
http
//yahoo.fr/
3.3.6
CMS
grands
CMS
Content
Management
Systems
Systèmes
Gestion
Contenus
utilisent
PHP
comme
—
Wordpress
—
Joomla
—
Drupal
CMS
ecommerce
aussi
—
Prestashop
—
Magento
3.3.7
Frameworks
grands
Frameworks
développement
Web
aussi
disponibles
PHP
—
Symfony
—
Zend
—
Laravel
—
Phalcon
—
CakePHP
—
Yii
—
Slim
Note
Plus
300
millions
sites
réalisés
PHP
travers
monde
8
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.4
Installation
PHP
Indication
Tout
informaticien
doit
savoir
LAMP
veut
dire
3.4.1
LAMP
—
Linux
—
Apache
—
MySQL
—
PHP
exension
logiciel
équivalent
Windows
retrouvé
nommé
3.4.2
WAMP
Windows
MAMP
Macs
3.4.3
MAMP
Mac
indispensable
car
Apache
PHP
installés
Mac
OS
10.xx
peu
plus
simple
configurer
faudra
alors
installer
MySQL
paquet
utilisant
homebrew
macports
toutes
plate-formes
peut
aussi
installer
XAMPP
https
//www.apachefriends.org/fr/index.html
Revenons
OS
référence
présent
3.4.4
Sous
Linux
—
Installer
Apache2
—
Installer
PHP7
—
Télécharger
éventuellement
documentation
paquet
php-doc
—
Vérifier
fichier
php.ini
—
Installer
MySQL
client
serveur
—
Installer
PHPMyAdmin
—
Installer
paquets
complémentaires
noms
commencent
php5-
3.4
Installation
PHP
9
Cours
PHP
Accéléré
Version
0.9.1
3.5
Configuration
PHP
3.5.1
fichier
PHP.ini
fichier
PHP.ini
contient
toutes
directives
essentielles
réglage
—
Taille
fichiers
téléchargeables
—
Safe-Mode
—
Affichage
traitement
erreurs
—
Communication
MySQL
Danger
Attention
directives
fichier
très
importantes
sécurité
serveur
production
faudra
veiller
vérifier
minutieusement
cas
Sous
certaines
distributions
Linux
existe
2
versions
fichier
developpement
autre
serveur
production
oubliez
activer
bonne
version
selon
contexte
vérifier
tous
cas
3.5.2
directives
principales
PHP.ini
directives
très
nombreuses
retenu
plus
importantes
fichier
suivant
commentant
rôle
PHP
About
php.ini
Fichier
configuration
principal
PHP
permet
préciser
principales
options
Sous
certaines
distributions
Linux
existe
2
versions
developpement
autre
serveur
production
Language
Options
activer
PHP
engine
=
peut
mettre
faux
tags
....
reconnus
short_open_tag
=
Off
Allow
ASP-style
tags
http
//php.net/asp-tags
asp_tags
=
Off
The
number
of
significant
digits
displayed
in
floating
point
˓→numbers
suite
page
suivante
10
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
http
//php.net/precision
precision
=
14
Compatibilité
an
2000
y2k_compliance
=
Taille
buffers
output_buffering
=
4096
servir
pages
compressées
zlib.output_compression
=
Off
Mettre
forcer
flush
phase
debuggage
implicit_flush
=
Off
Safe
Mode
http
//php.net/safe-mode
peut
laisser
désactivé
car
déclaré
OBSOLETE
depuis
PHP
5.3
Safe_mode
=
Off
désactiver
certaines
fonctions
PHP
indépendant
safe_mode
http
//php.net/disable-functions
disable_functions
=
meme
chose
classes
disable_classes
=
Colors
for
Syntax
Highlighting
mode
utiliser
fonction
highlight_file
=
show_source
Highlight.string
=
#
DD0000
highlight.comment
=
#
FF9900
highlight.keyword
=
#
007700
highlight.bg
=
#
FFFFFF
highlight.default
=
#
0000BB
highlight.html
=
#
000000
Miscellaneous
peut
l'enlever
serveur
production
n'est
menace
sécurité
expose_php
=
suite
page
suivante
3.5
Configuration
PHP
11
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
Resource
Limits
Temps
d'éxécution
max
d'un
script
Attention
code
peu
long
s'éxécuter
max_execution_time
=
30
Traitement
données
reçues
laisser
valeur
défaut
max_input_time
=
60
Taille
mémoire
maxi
donnée
script
PHP
memory_limit
=
128M
Error
handling
and
logging
serveur
Production
E_ALL
&
~E_DEPRECATED
serveur
développement
error_reporting
=
E_ALL
|
E_STRICT
Affichage
erreurs
sortie
standard
cad
navigateur
désactiver
serveur
production
Utile
développeur
display_errors
=
Affichage
erreurs
démarrage
PHP
débugger
erreurs
plugins
modules
complémentaires
PHP
display_startup_errors
=
Off
logger
erreurs
activer
log_errors
=
Set
maximum
length
of
log_errors
In
error_log
information
about
˓→the
source
is
added
The
default
is
1024
and
0
allows
to
not
apply
any
maximum
˓→length
at
all
http
//php.net/log-errors-max-len
log_errors_max_len
=
1024
répéter
erreurs
identiques
ignore_repeated_errors
=
sauf
elles
proviennent
fichiers
différents
ignore_repeated_source
=
Off
suite
page
suivante
12
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
Rapporter
fuites
mémoire
activer
phase
dévelopement
report_memleaks
=
variable
php_errormsg
contiendra
texte
dernier
message
d'erreur
désactiver
serveur
production
track_errors
=
http
//php.net/html-errors
html_errors
=
faire
pointer
copie
locale
documentation
PHP
désactiver
serveur
production
docref_root
=
``
/docs/php/
Extension
fichiers
documentation
docref_ext
=
.html
Chaine
afficher
avant
message
d'erreur
Ici
qu'il
s'affiche
rouge
Réservé
serveurs
dévelopement
error_prepend_string
=
``
font
color=
#
ff0000
Fermeture
tag
précédent
error_append_string
=
``
/font
changer
fichier
logguées
erreurs
Laisser
inchangé
sauf
cas
particulier
error_log
=
syslog
Data
Handling
The
separator
used
in
PHP
generated
URLs
to
separate
arguments
PHP
's
default
setting
is
``
&
http
//php.net/arg-separator.output
Example
arg_separator.output
=
``
&
amp
List
of
separator
used
by
PHP
to
parse
input
URLs
into
˓→variables
PHP
's
default
setting
is
``
&
NOTE
Every
character
in
this
directive
is
considered
˓→separator
suite
page
suivante
3.5
Configuration
PHP
13
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
http
//php.net/arg-separator.input
Example
arg_separator.input
=
``
&
This
directive
determines
which
super
global
arrays
are
˓→registered
when
PHP
starts
up
If
the
register_globals
directive
is
enabled
it
also
˓→determines
what
order
variables
are
populated
into
the
global
space
G
P
E
˓→
&
are
abbreviations
for
the
following
respective
super
globals
GET
˓→POST
COOKIE
ENV
and
SERVER
There
is
performance
penalty
paid
for
the
˓→registration
of
these
arrays
and
because
ENV
is
not
commonly
used
the
˓→others
ENV
is
is
not
recommended
productions
servers
You
can
still
get
˓→access
to
the
environment
variables
through
getenv
should
you
need
to
Default
Value
``
EGPCS
Development
Value
``
GPCS
Production
Value
``
GPCS
http
//php.net/variables-order
variables_order
=
``
GPCS
laisser
valeur
défaut
request_order
=
``
GP
Ca
fait
longtemps
qu'il
faut
garder
directive
Off
register_globals
=
Off
Determines
whether
the
deprecated
long
HTTP_
*
_VARS
type
˓→predefined
variables
are
registered
by
PHP
or
not
they
are
deprecated
we
˓→obviously
don't
recommend
you
use
them
They
are
by
default
for
compatibility
˓→reasons
but
they
are
not
recommended
production
servers
Default
Value
Development
Value
Off
Production
Value
Off
http
//php.net/register-long-arrays
register_long_arrays
=
Off
activer
seulement
voulez
utiliser
PHP
ligne
commande
passer
arguments
register_argc_argv
=
Off
Meilleure
performance
suite
page
suivante
14
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
auto_globals_jit
=
Taille
maximale
données
acceptées
POST
http
//php.net/post-max-size
post_max_size
=
8M
éviter
désormais
magic_quotes_gpc
=
Off
idem
magic_quotes_runtime
=
Off
mimetype
défaut
text/html
default_mimetype
=
``
text/html
Jeu
caractères
défaut
laisser
vide
choisir
jeu
caractères
default_charset
=
``
iso-8859-1
default_charset
=
``
utf-8
File
Uploads
Autoriser
``
uploads
fichiers
file_uploads
=
Spécifier
répertoire
temporaire
por
fichiers
uploadés
upload_tmp_dir
=
/tmp/upload-dir
Taille
maxi
fichies
uploadés
upload_max_filesize
=
4M
Nbre
fichiers
maxi
pouvant
être
uploadés
seule
requête
max_file_uploads
=
20
Fopen
wrappers
Whether
to
allow
the
treatment
of
URLs
like
http
//
or
ftp
//
˓→as
files
http
//php.net/allow-url-fopen
allow_url_fopen
=
Whether
to
allow
include/require
to
open
URLs
like
http
//
or
˓→ftp
//
files
suite
page
suivante
3.5
Configuration
PHP
15
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
http
//php.net/allow-url-include
allow_url_include
=
Off
Define
the
anonymous
ftp
password
your
email
address
PHP's
˓→default
setting
for
this
is
empty
http
//php.net/from
from=
john
doe.com
Define
the
User-Agent
string
PHP
's
default
setting
for
this
is
˓→empty
http
//php.net/user-agent
user_agent=
PHP
Timeout
flux
basés
sockets
default_socket_timeout
=
60
Dynamic
Extensions
Sous
Windows
extension=msql.dll
sous
UNIX
extension=msql.so
chemin
extension=/path/to/extension/msql.so
Module
Settings
Date
Fuseau
horaire
utilisé
date.timezone
=
Europe/Paris
iconv
conversion
d'un
système
d'encodage
autre
iconv.input_encoding
=
ISO-8859-1
iconv.internal_encoding
=
ISO-8859-1
iconv.output_encoding
=
ISO-8859-1
Pdo_mysql
cas
d'utilisation
nouveau
moteur
mysqlnd
pdo_mysql.cache_size
=
2000
suite
page
suivante
16
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
Socket
défaut
connexion
MySQL
valeur
défaut
fonctionne
plus
souvent
pdo_mysql.default_socket=/var/mysql/mysql.sock
mail
function
For
Win32
only
http
//php.net/smtp
SMTP
=
localhost
http
//php.net/smtp-port
smtp_port
=
25
Emplacement
logger
appels
fonction
mail
mail.log
=
MySQL
Autorise
connexions
persistantes
N'apporte
AUCUNE
fonctionnalité
supplémentaire
peut
améliorer
performances
mysql.allow_persistent
=
If
mysqlnd
is
used
Number
of
cache
slots
for
the
internal
result
˓→set
cache
http
//php.net/mysql.cache_size
mysql.cache_size
=
2000
Nbre
maxi
liens
persistants
mysql.max_persistent
=
-1
Nombre
maxi
liens
permanents
-1
veut
dire
sans
limitation
Mysql.max_links
=
-1
Port
défaut
MySQL
mysql.default_port
=
3306
Laisser
généralement
valeur
défaut
mysql.default_socket
=
Hôte
défaut
mysql_connect
mysql.default_host
=
Utilisateur
défaut
mysql_connect
mysql.default_user
=
Passwd
défaut
mysql_connect
n'est
bonne
chose
garder
passwd
ici
obsolete
mysql.default_password
=
suite
page
suivante
3.5
Configuration
PHP
17
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
Timeout
connexion
MySQL
mysql.connect_timeout
=
60
Mode
débuggage
MySQL
mysql.trace_mode
=
Off
MySQLi
Nbre
maxi
liens
persistants
mysqli.max_persistent
=
-1
Autorise
connexions
persistantes
N'apporte
AUCUNE
fonctionnalité
supplémentaire
peut
améliorer
performances
mysqli.allow_persistent
=
Maximum
number
of
links
-1
means
no
limit
http
//php.net/mysqli.max-links
mysqli.max_links
=
-1
If
mysqlnd
is
used
Number
of
cache
slots
for
the
internal
result
˓→set
cache
http
//php.net/mysqli.cache_size
mysqli.cache_size
=
2000
Por
mysqli
mysqli.default_port
=
3306
Socket
défaut
MySQLi
mysqli.default_socket
=
/tmp/mysql.sock
Autorise
interdit
reconnexion
mysqli.reconnect
=
Off
mysqlnd
activation
statistiques
mysqlnd
fins
réglages
serveur
BD
mysqlnd.collect_statistics
=
chose
opérations
mémoire
mysqlnd.collect_memory_statistics
=
Off
Size
of
pre-allocated
buffer
used
when
sending
commands
to
˓→MySQL
in
bytes
http
//php.net/mysqlnd.net_cmd_buffer_size
mysqlnd.net_cmd_buffer_size
=
2048
Size
of
pre-allocated
buffer
used
for
reading
data
sent
by
the
˓→server
in
suite
page
suivante
18
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
bytes
http
//php.net/mysqlnd.net_read_buffer_size
mysqlnd.net_read_buffer_size
=
32768
bcmath
Number
of
decimal
digits
for
all
bcmath
functions
http
//php.net/bcmath.scale
bcmath.scale
=
0
Session
/
sessions
doivent-elles
utiliser
cookies
session.use_cookies
=
1
Envoyer
cookies
travers
connexions
sécurisées
défaut
Off
Session.cookie_secure
=
PHP
maintient
cookie
l'identifiant
session
c'est
précaution
visant
éviter
vol
session
n'est
parade
absolue
session.use_only_cookies
=
1
Nom
session
session.name
=
PHPSESSID
Démarrage
automatique
session
Désactivé
défaut
session.auto_start
=
0
Durée
vie
cookie
placé
0
temps
navigateur
redémarré
session.cookie_lifetime
=
0
Domaine
validité
cookie
session.cookie_domain
=
interdire
javascript
d'accéder
cookie
session.cookie_httponly
=
HTTP_REFERER
doit
contenir
sous-chaine
être
considéré
comme
valide
Session.referer_check
=
suite
page
suivante
3.5
Configuration
PHP
19
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
Durée
d'expiration
document
minutes
session.cache_expire
=
180
Choix
d'une
fonction
hachage
sessions
comme
0
MD5
128
bits
1
SHA-1
160
bits
session.hash_function
=
0
Assertion
Assertions
actives
défaut
assert.active
=
Emettre
warning
cas
d'assertion
non
vérifiée
assert.warning
=
S'arrêter
cas
d'assertion
non
satisfaite
Désactivé
défaut
assert.bail
=
Off
Fonction
utilisateur
appeller
cas
d'assertion
non
satisfaite
assert.callback
=
0
3.6
Exemples
simples
3.6.1
bonjour
doctype
html
html
head
meta
charset=
utf-8
/
title
Bonjour
depuis
PHP
/title
/head
body
php
echo
'Bonjour
généré
dynamiquement
PHP
'
/body
/html
3.6.2
Résultat
brut
html
doctype
html
html
head
suite
page
suivante
20
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
meta
charset=
utf-8
/
title
Bonjour
depuis
PHP
/title
/head
body
Bonjour
généré
dynamiquement
PHP
/body
/html
3.6.3
Exécution
bonjour
3.6.4
Infos
PHP
php
phpinfo
3.6.5
Exécution
infos
php
3.6.6
User
Agent
doctype
html
html
head
title
Navigateur
/title
body
informations
Navigateur
php
echo
_SERVER
'HTTP_USER_AGENT
'
/body
/html
3.6.7
Exemple
Résultat
3.6
Exemples
simples
21
Cours
PHP
Accéléré
Version
0.9.1
informations
Navigateur
Mozilla/5.0
Macintosh
U
Intel
Mac
OS
X
10_6_4
fr-fr
AppleWebKit/
˓→533.18.1
KHTML
like
Gecko
Version/5.0.2
Safari/533.18.5
3.6.8
Exécution
User-Agent
pouvez
consulter
documentation
PHP
doc
php
http
//php.net/manual/fr/
3.7
Imbrication
code
HTML
PHP
peut
exemple
—
Commencer
page
HTML
—
puis
écrire
peu
PHP
—
reprendre
HTML
—
etc.
3.7.1
Exemple
doctype
html
html
head
title
Navigateur
/title
body
informations
Navigateur
php
AGENT=
_SERVER
'HTTP_USER_AGENT
'
echo
AGENT
echo
``
\n
P
if
stristr
AGENT
MSIE
{
b
semblez
utiliser
Internet
Explorer
/b
php
}
elseif
preg_match
``
/Firefox/i
AGENT
{
b
semblez
utiliser
Firefox
/b
php
}
elseif
preg_match
``
/chrome/i
AGENT
{
suite
page
suivante
22
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
b
semblez
utiliser
Chrome
/b
php
}
elseif
preg_match
``
/Safari/
AGENT
{
b
semblez
utiliser
Safari
/b
php
}
else
echo
``
Navigateur
Inconnu
``
/body
/html
ATTENTION
ça
peut
vite
devenir
ILLISIBLE
3.7.2
Exécution
user-agent
php
3.7.3
Remèdes
écrire
genre
code
quelques
solutions
courantes
—
Utiliser
fonctions
PHP
—
Utiliser
Classes
Objets
PHP
—
Séparer
modèles
Vues
—
Séparer
Modèles
Vues
Contrôleurs
Modèle
MVC
—
Utiliser
systèmes
templates
comme
Twig
3.8
formulaire
HTML
réponse
PHP
code
ici
—
petit
formulaire
HTML
—
réponse
PHP
3.8.1
Formulaire
HTML
doctype
html
html
head
meta
charset=
utf-8
/
title
Formulaire
html
/title
/head
body
form
action=
reponse.php
method=
GET
suite
page
suivante
3.8
formulaire
HTML
réponse
PHP
23
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
nom
input
type=
text
name=
nom
âge
input
type=
text
name=
age
p
input
type=submit
value=
Envoyer
/form
/body
/html
3.8.2
réponse
doctype
html
html
head
meta
charset=
utf-8
/
title
Test
Formulaire
PHP
/title
/head
body
h1
Bonjour
php
echo
_GET
'nom
'
/h1
h2
semblez
avoir
php
echo
_GET
'age
'
/h2
php
=
_GET
'nom
'
=
_GET
'age
'
nom
stocké
variable
type
php
echo
gettype
âge
stocké
variable
b
/b
br/
type
i
php
echo
gettype
/i
br/
peut
transformer
i
integer
/i
faisant
php
settype
integer
br/
Type
php
echo
gettype
/body
/html
3.8.3
Exécution
Formulaire
24
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.9
variables
PHP
3.9.1
Déclaration
simple
php
variable
=
``
variable
PHP
//
autre
variable
Variable
=
1000
3.9.2
Existence
variables
fonction
isset
php
=
``
variable
PHP
if
isset
echo
``
variable
existe
unset
echo
``
variable
supprimée
3.9.3
Test
variables
fonction
empty
php
=
``
variable
PHP
if
empty
echo
``
variable
existe
n\'est
˓→pas
vide
``
Avertissement
fonction
empty
répond
vrai
variable
existe
ceci
sans
faire
aucun
warning
outre
avant
PHP
5.5
peut
utiliser
autre
chose
variables
impossible
appeller
fonction
argument
passe
3.9.4
Test
variables
PHP
7
opérateur
coalescent
opérateur
Null
coalescent
permet
simplifier
certains
tests
existence
variables
alternatives
comme
exemple
php
//
non
initialisée
b
=
143
suite
page
suivante
3.9
variables
PHP
25
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
echo
3
//
affiche
3
echo
PHP_EOL
echo
b
7
//
affiche
143
echo
PHP_EOL
permet
limiter
recours
isset
nombreuses
situations
comme
php
//
Récupère
valeur
_GET
'email
'
retourne
'nobody
˓→'
//
n'existe
mail
=
_GET
'email
'
'nobody
null
'
//
Equivalent
mail
=
isset
_GET
'email
'
_GET
'email
'
˓→'nobody
null
'
//
Coalescing
peut
être
chainé
//
renvoie
première
valeur
définie
parmi
//
_GET
'email
'
_POST
'email
'
'nobody
null.com
'
mail
=
_GET
'email
'
_POST
'email
'
'nobody
null
'
echo
``
mail\n
3.9.5
Portée
variables
—
défaut
toutes
variables
locales
—
portée
réduit
fonction
bloc
déclaration
—
déclarer
variable
globale
peut
utiliser
tableau
_GLOBALS
php
_GLOBALS
'MaVar
'
=
Bonjour
3.9.6
Constantes
php
define
``
USER
TOTO
echo
USER
//
Notez
l'absence
ici
3.10
chaînes
PHP
3.10.1
bases
26
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Guillemets
Cotes
php
var=
Hello
PHP
machaine=
contenu
\
var
var
br
echo
machaine
//ou
'
'
mystring='le
contenu
var
'.
var
echo
mystring
résultat
toujours
contenu
var
Hello
PHP
concaténation
aide
longueur
chaine
php
int
lg=strlen
chaine
Accéder
caractère
i
chaine
php
echo
chaine
i
chaine
traitée
comme
tableau
indéxé
*
entier
*
plupart
tableaux
PHP
indéxés
chaines
Mettre
majuscules/minuscules
—
strtoupper
obtenir
majuscules
—
strtolower
mettre
minuscules
—
ucfirst
mettre
majuscule
première
lettre
chaine
—
ucwords
mettre
majuscule
première
lettre
chaque
mot
chaine
3.10.2
Recherche
sous-chaines
motifs
chaine
—
strstr
—
stristr
—
ereg
eregi
3.10
chaînes
PHP
27
Cours
PHP
Accéléré
Version
0.9.1
exemple
php
AGENT=
_SERVER
'HTTP_USER_AGENT
'
echo
AGENT
echo
``
\n
P
if
stristr
AGENT
MSIE
echo
``
semblez
utiliser
Internet
Explorer
/b
elseif
ereg
``
Firefox
AGENT
echo
``
semblez
utiliser
Firefox
/b
elseif
eregi
``
chrome
AGENT
echo
``
semblez
utiliser
Chrome
/b
Indication
variantes
fonctions
comportant
i
indiquent
insensibilité
casse
dire
majuscules
minuscules
considérées
comme
identiques
Exemple
Test
peu
plus
complet
UserAgent
php
function
getBrowser
userAgent
{
if
preg_match
``
/MSIE
{
5
}
/i
userAgent
num
return
num
0
elseif
preg_match
``
/Firefox
*
/i
userAgent
num
return
num
0
elseif
preg_match
``
/chrome
{
4
}
/i
userAgent
num
return
num
0
elseif
preg_match
``
/safari/i
userAgent
num
{
preg_match
``
/Version
{
4
}
/
userAgent
num
return
``
Safari
``
num
0
}
else
return
``
Navigateur
Inconnu
}
if
empty
_SERVER
'HTTP_USER_AGENT
'
{
echo
``
navigateur
semble
etre
\n
echo
getBrowser
_SERVER
'HTTP_USER_AGENT
'
}
//
Test
UserAgent
connus
FF=
Mozilla/5.0
Macintosh
Intel
Mac
OS
X
10.9
rv:32.0
Gecko/
˓→20100101
Firefox/32.0
msie=
Mozilla/5.0
compatible
MSIE
10.6
Windows
NT
6.1
Trident/
˓→5.0
InfoPath.2
SLCC1
.NET
CLR
3.0.4506.2152
.NET
CLR
3.5
˓→30729
.NET
CLR
2.0.50727
3gpp-gba
UNTRUSTED/1.0
chrome=
Mozilla/5.0
Windows
NT
6.3
Win64
x64
AppleWebKit/537
˓→36
KHTML
like
Gecko
Chrome/37.0.2049.0
Safari/537.36
safari=
Mozilla/5.0
iPad
CPU
OS
6_0
like
Mac
OS
X
AppleWebKit/
˓→536.26
KHTML
like
Gecko
Version/6.0
Mobile/10A5355d
Safari/
suite
page
suivante
˓→8536.25
28
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
echo
``
br/
Test
Firefox
br/
\n
echo
getBrowser
FF
``
br/
\n
echo
``
br/
Test
MSIE
\n
echo
getBrowser
msie
``
br/
\n
echo
``
br/
Test
Chrome
\n
echo
getBrowser
chrome
``
br/
\n
echo
``
br/
Test
Safari
\n
echo
getBrowser
safari
Résultat
br/
Test
Firefox
br/
Firefox/32.0
br/
br/
Test
MSIE
MSIE
10.6
br/
br/
Test
Chrome
Chrome/37.
br/
br/
Test
Safari
Safari
Version/6.0
3.11
typage
PHP
3.11.1
fonctions
gettype
settype
gettype
renvoie
résultats
suivants
—
integer
—
double
—
string
—
array
—
object
—
class
—
unknown
type
settype
change
type
élément
php
a=3.5
settype
integer
suite
page
suivante
3.11
typage
PHP
29
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
echo
``
contenu
variable
``
résultat
contenu
variable
3
3.11.2
Fonctions
test
—
is_int
—
is_long
—
is_double
—
is_array
—
is_object
—
is_string
Attention
oubliez
comme
JavaScript
différence
entre
opérateur
==
===
premier
vérifie
égalité
contenus
tenant
compte
éventuelle
diffé-
rence
typage
int
string
exemple
tandis
second
vérifie
égalité
stricte
autres
termes
5
==
5
VRAI
tandis
5
===
5
FAUX
3.12
Quelques
particularités
PHP
3.12.1
Valeurs
variables
php
toto
=
``
Bonjour
br/
\n
var
=
``
toto
echo
var
résultat
toujours
3.12.2
Résultat
brut
Bonjour
br/
30
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.12.3
fonction
eval
Permet
évaluation
expressions
arithmetiques
directement
PHP
Existe
aussi
JavaScript
Délicat
manipuler
problématique
termes
sécurité
3.13
tableaux
PHP
3.13.1
Tableaux
associatifs
-
parcours
boucle
foreach
php
jours=array
``
Lu
=
Lundi
=
Mardi
=
Mercredi
=
Jeudi
Ve
=
Vendredi
=
Samedi
Di
=
Dimanche
foreach
jours
key=
val
echo
key
``
val
``
br
\n
donne
Lu
Lundi
Mardi
Mercredi
Jeudi
Ve
Vendredi
Samedi
Di
Dimanche
3.13.2
Affichage
print_r
php
print_r
jours
3.13.3
Résultat
brut
html
Array
Lu
=
Lundi
=
Mardi
=
Mercredi
=
Jeudi
Ve
=
Vendredi
suite
page
suivante
3.13
tableaux
PHP
31
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
=
Samedi
Di
=
Dimanche
3.13.4
Essayez
vous-même
tabs
3.13.5
Utilisation
fonction
array_walk
php
array_walk
jours
'aff_tab
'
défini
préalable
php
function
aff_tab
val
key
{
echo
``
key-
val
br/
\n
}
obtient
résultat
boucle
foreach
3.13.6
Tri
simple
tableau
php
sort
jours
array_walk
jours
'aff_tab
'
3.13.7
obtient
0-Dimanche
1-Jeudi
2-Lundi
3-Mardi
4-Mercredi
5-Samedi
6-Vendredi
dire
—
tableau
trié
selon
ordre
valeurs
32
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
—
clefs
effacées
réaffectées
entiers
veut
préserver
également
clefs
tableau
associatif
faut
utiliser
méthode
suivante
3.13.8
Tri
selon
ordre
naturel
natsort
php
jours=array
``
Lu
=
Lundi
=
Mardi
=
Mercredi
=
Jeudi
Ve
=
Vendredi
=
Samedi
Di
=
Dimanche
var_dump
jours
natsort
jours
var_dump
jours
3.13.9
Résultat
brut
html
array
7
{
``
Lu
=
string
5
``
Lundi
``
=
string
5
``
Mardi
``
=
string
8
``
Mercredi
``
=
string
5
``
Jeudi
``
Ve
=
string
8
``
Vendredi
``
=
string
6
``
Samedi
``
Di
=
string
8
``
Dimanche
}
array
7
{
``
Di
=
string
8
``
Dimanche
``
=
string
5
``
Jeudi
``
Lu
=
string
5
``
Lundi
``
=
string
5
``
Mardi
``
=
string
8
``
Mercredi
``
=
string
6
``
Samedi
suite
page
suivante
3.13
tableaux
PHP
33
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
``
Ve
=
string
8
``
Vendredi
}
3.13.10
Exécution
tritabnat
peut
aussi
utiliser
fonction
natcasesort
veut
préoccuper
casse
chaines
présentes
tableau
peu
près
ordre
dictionnaire
3.14
tableaux
prédéfinis
PHP
3.14.1
tableaux
concernant
protocole
HTTP
—
_GET
_POST
_REQUEST
englobe
2
—
_SERVER
Variables
décrivant
client
page
courante
—
_GLOBALS
variables
globales
—
_COOKIE
cookies
—
_SESSION
sessions
3.14.2
Exemple
récupération
_SERVER
grâce
fonction
getenv
php
function
infos
{
env
=
array
'remote_addr
'
'http_accept_language
'
'http_
˓→host
'
'http_user_agent
'
'script_filename
'
'server_addr
'
'server_name
'
'server_signature
'
'server_software
'
'request_method
'
'query_string
'
'request_uri
'
'script_name
˓→
'
//
Construction
d'un
tableau
associatif
//
valeurs
lues
l'environnement
retour
=array
foreach
env
clef
retour
clef
=
getenv
clef
return
retour
}
echo
``
Voici
infos
disponibles
BR
tab
=
infos
suite
page
suivante
34
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
foreach
tab
clef=
val
echo
clef
val
``
br
\n
3.14.3
Résultat
Voici
infos
disponibles
remote_addr
::1
http_accept_language
fr-fr
http_host
localhost
http_user_agent
Mozilla/5.0
Macintosh
U
Intel
Mac
OS
X
˓→10_6_4
fr-fr
AppleWebKit/533.18.1
KHTML
like
Gecko
Version/5.0.2
˓→Safari/533.18.5
script_filename
/Users/roza/Sites/php/exemples/infospy.php
server_addr
::1
server_name
localhost
server_signature
server_software
Apache/2.2.14
Unix
mod_ssl/2.2.14
OpenSSL/0.9.8l
DAV/2
PHP/5.3.2
request_method
GET
query_string
request_uri
/~roza/php/exemples/infospy.php
script_name
/~roza/php/exemples/infospy.php
Ùser-Agent
http
//localhost/~roza/php/exemples/infospy
˓→php
`
_
3.14.4
Exécution
infospy
3.15
inclusion
fichiers
externes
3.15.1
include
—
Semblable
include
C/C++
—
Réalise
inclusion
physique
fichier
demandé
3.15.2
include_once
—
identique
include
—
protège
contre
éventuelles
inclusions
multiples
3.15
inclusion
fichiers
externes
35
Cours
PHP
Accéléré
Version
0.9.1
—
pourraient
mener
erreurs
redéclarations
etc.
php
include_once
``
connect.php
3.15.3
require
require_once
—
fonctionnent
comme
include
include_once
respectivement
—
programme
arrête
fichier
inclus
existe
php
require
``
malib.php
require_once
``
connect.php
3.15.4
dirname
savoir
quel
répertoire
trouve
peut
utiliser
fonction
PHP
dirname
php
include_once
dirname
__FILE__
'/config/config.inc.php
'
Indication
Lorsqu
inclus
désigne
fichiers
vaut
mieux
utiliser
chemins
relatifs
repérer
fichiers
comme
ci
dessus
plutôt
donner
chemin
absolu
rapport
racine
serveur
style
/home/user/www/config/config.inc.php
Cela
beaucoup
plus
portable
serveur
autre
évitera
bien
déboires
Avertissement
utilisation
systématique
version
once
include_once
re-
quire_once
recommandée
car
peut
causer
ralentissements
exécution
programme
3.16
Objets
PHP
3.16.1
Evolutions
grands
principes
—
objets
existent
PHP
partir
version
4
—
Changements
importants
PHP
5
Convergence
vers
modèle
objet
Java
—
Introduction
comme
Java
interfaces
classes
abstraites
—
emploi
modifieurs
private
public
comme
java
—
retrouve
aussi
__toString
__clone
mécanisme
traitement
exceptions
semblable
celui
Java
36
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
—
constructeurs
appellent
désormais
__construct
—
destructeurs
__destruct
—
méthodes
portent
mot
clef
function
signalent
type
retour
—
commentaires
documentation
font
manière
Java
Indication
objets
instancient
mot
clef
new
comme
Java
C++
utilise
-
signifier
appel
méthode
déjà
pris
concaténation
chaînes
3.16.2
Objet
Simple
Etudiant
PHP
Fabriquons
maintenant
objet
simple
PHP
Ecrivons
objet
représentant
étudiant
données
—
identifiant
—
nom
—
date
naissance
méthodes
opérer
données
—
constructeur
—
getters
setters
—
equals
—
toString
affichage
donne
code
suivant
php
/
*
*
Classe
Etudiant
PHP
*
/
class
Etudiant
{
/
*
*
Identification
unique
d'un
etudiant
*
/
protected
etudiant_id
/
*
*
Nom
l'etudiant
*
/
protected
nom
/
*
*
Date
naissance
l'etudiant
*
/
protected
naissance
public
function
__construct
id
nom
naissance
{
this-
etudiant_id
=
int
id
//
cast
vers
integer
this-
nom
=
string
nom
//
cast
vers
string
this-
naissance=
int
naissance
//
cast
vers
date
timestamp
}
/
*
*
*
Fonction
comparaison
simplifiee
entre
etudiants
*
==
comparera
id
nom
naissance
*
/
suite
page
suivante
3.16
Objets
PHP
37
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
public
function
equals
etudiant
etudiant
{
return
this-
getId
==
etudiant-
getId
}
public
function
getId
{
return
this-
etudiant_id
}
public
function
getNom
{
return
this-
nom
}
public
function
getNaissance
{
return
this-
naissance
}
public
function
__toString
{
setlocale
LC_TIME
``
fr_FR
ne=strftime
'
B
'
this-
naissance
return
'etudiant
id=
'
this-
getId
'
nom='.
this-
˓→getNom
}
}
/
*
Test
*
/
date_default_timezone_set
'Europe/Paris
'
etu=new
Etudiant
234
Talon
time
var_dump
etu
echo
``
br/
echo
etu
Resultat
object
Etudiant
#
1
3
{
``
etudiant_id
protected
=
int
234
``
nom
protected
=
string
5
``
Talon
``
naissance
protected
=
int
1537386847
}
br/
etudiant
id=234
nom=Talon
Mercredi
19
septembre
2018
Execution
etudiant
php
38
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Indication
Lorsqu
utilise
opérateur
comparaison
==
objets
ceux-ci
comparés
utilisant
règles
suivantes
deux
objets
égaux
instances
classe
mêmes
attributs
valeurs
valeurs
comparées
opérateur
==
Lors
utilisation
opérateur
identité
===
objets
identiques
uniquement
font
référence
instance
classe
Avertissement
Beaucoup
programmeurs
débutants
contentent
utiliser
PHP
comme
langage
purement
procédural
sans
utiliser
côté
objet
Ceci
bloquera
tôt
tard
apprentissage
langage
grands
frameworks
PHP
trop
mal
aise
Objets
suivez
abord
cours
introduction
programmation
Objet
Java
Python
C++
exemple
3.17
collections
PHP
3.17.1
PHP
standard
Collections
=
Arrays
—
contente
offre
PHP
standard
collections
résument
utilisation
tableaux
associatifs
PHP
—
framework
Collections
Java
beaucoup
plus
riche
3.17.2
DataStructures
ds
faut
installer
librairie
supplémentaire
ds
DataStructures
avoir
accès
Framework
similaire
PHP
Voir
Documentation
Collections
php
http
//php.net/manual/fr/book.ds.php
va
utiliser
commande
pecl
installer
ds
comme
extension
pecl
install
ds
Puis
charger
extension
ajoutant
fichiers
.ini
PHP
extension=ds.so
extension
donne
accès
classes
similaires
celles
framework
Collections
Java
classes
proposées
exemple
—
Sequence
—
Vector
—
Deque
—
Vector
3.17
collections
PHP
39
Cours
PHP
Accéléré
Version
0.9.1
—
Pair
—
Set
—
Stack
—
Queue
—
PriorityQueue
3.17.3
Utilisation
Ds
classes
interfaces
ds
utilisent
espace
nommage
Ds
php
vector
=
new
\Ds\Vector
vector-
push
``
vector-
push
``
deux
vector-
push
``
trois
``
quatre
//
=
unpacking
vector-
push
``
cinq
``
six
print_r
vector
3.17.4
Exemple
utilisation
classe
Set
Utilisons
maintenant
concrètement
classe
Set
Question
HTML
select
multiple
Prenons
petit
formulaire
HTML
propose
choix
couleurs
select
p
Quelles
couleurs
maillot
panthères
Fleury
˓→Loiret
Handball
select
name=
coul
multiple
size=5
option
value=
jaune
Jaune
option
value=
rose
Rose
option
value=
bleu
Bleu
option
value=
noir
Noir
option
value=
blanc
Blanc
option
value=
vert
Vert
/select
/p
Réponse
PHP
Collections
php
if
empty
_GET
'coul
'
{
suite
page
suivante
40
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
couleursReponse
=
new
\Ds\Set
_GET
'coul
'
couleursCorrectes
=
new
\Ds\Set
'rose
'
'noir
'
'blanc
˓→
'
//
Calculons
différence
2
ensembles
voyons
˓→elle
vide
if
couleursReponse-
diff
couleursCorrectes
-
isEmpty
echo
``
Bravo
couleurs
Fleury
Hand
Ball
˓→bien
Rose
Noir
Blanc
``
else
echo
``
Mauvaise
réponse
couleurs
Fleury
˓→Hand
Ball
Rose
Noir
Blanc
``
}
Sans
Collections
utilise
tableaux
Sans
Ds
obligés
contenter
tableaux
PHP
utiliser
exemple
méthode
array_diff
Voir
array_diff
php
http
//php.net/manual/fr/function.array-diff.php
Arrays
peut
ici
sortir
simples
tableaux
PHP
vérifiant
taille
tableau
réponses
données
celle
tableau
bonnes
réponses
puis
contenus
tableaux
identiques
php
if
empty
_GET
'coul
'
{
couleursReponse
=
_GET
'coul
'
couleursCorrectes
=
array
'rose
'
'noir
'
'blanc
'
if
count
couleursReponse
==
count
couleursCorrectes
&
&
˓→array_diff
couleursReponse
couleursCorrectes
echo
``
Bravo
couleurs
Fleury
Hand
Ball
bien
Rose
˓→Noir
Blanc
``
else
echo
``
Mauvaise
réponse
couleurs
Fleury
Hand
Ball
˓→sont
Rose
Noir
Blanc
``
}
3.18
Connexion
bases
données
depuis
PHP
3.18.1
table
simple
SQL
3.18
Connexion
bases
données
depuis
PHP
41
Cours
PHP
Accéléré
Version
0.9.1
CREATE
TABLE
`
CARNET
`
ÌDìnt
11
NOT
NULL
AUTO_INCREMENT
`
NOM
`
varchar
30
DEFAULT
NULL
`
PRENOM
`
varchar
30
DEFAULT
NULL
`
NAISSANCÈ
date
DEFAULT
NULL
`
VILLÈ
varchar
30
DEFAULT
NULL
PRIMARY
KEY
ÌD
`
ENGINE=InnoDB
AUTO_INCREMENT=13
DEFAULT
CHARSET=utf8
INSERT
INTO
`
CARNET
`
VALUES
1
'SMITH
'
'JOHN
'
'1980-12-17
'
'ORLEANS
'
2
'DURAND
'
'JEAN
'
'1983-01-13
'
'ORLEANS
'
3
'GUDULE
'
'JEANNE
'
'1967-11-06
'
'TOURS
'
4
'ZAPATA
'
'EMILIO
'
'1956-12-01
'
'ORLEANS
'
5
'JOURDAIN
'
'NICOLAS
'
'2000-09-10
'
'TOURS
'
6
'DUPUY
'
'MARIE
'
'1986-01-11
'
'BLOIS
'
7
'ANDREAS
'
'LOU
'
'1861-02-12
'
'ST
Petersbourg
'
9
'Kafka
'
'Franz
'
'1883-07-03
'
'Prague
'
11
'Dalton
'
'Joe
'
'2003-12-06
'
'Dallas
'
insère
table
MySQL
ligne
commande
aide
PHPMyAdmin
Puis
consulter
table
depuis
PHP
utilise
connecteur
PDO
offre
interface
connexion
utilisable
tous
SGBD
Systemes
Gestion
Bases
Donnees
habituels
comme
MySQL
PostgreSQL
Oracle
Microsoft
SQL
Server
3.18.2
Connexion
Simple
PHP
PDO
doctype
html
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
/head
body
h1
Interrogation
table
CARNET
PDO
/h1
php
require
``
connect.php
//
oracle
dsn=
oci
dbname=//serveur:1521/base
//
sqlite
dsn=
sqlite
/tmp/base.sqlite
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
}
suite
page
suivante
42
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
catch
PDOException
e
{
printf
``
Échec
connexion
s\n
e-
getMessage
exit
}
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
d'accès
CARNET
else
{
foreach
connexion-
query
sql
row
echo
row
'PRENOM
'
``
row
'NOM
'
``
né
e
``
row
'NAISSANCE
'
``
br/
\n
}
/body
/html
fichier
connect.php
contenant
informations
connexion
serveur
MySQL
php
define
'USER
'
scott
define
'PASSWD
'
tiger
define
'SERVER
'
localhost
define
'BASE
'
dbscott
Resultat
brut
html
doctype
html
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
/head
body
h1
Interrogation
table
CARNET
PDO
/h1
JOHN
SMITHné
e
1980-12-17
br/
JEAN
DURANDné
e
1983-01-13
br/
JEANNE
GUDULEné
e
1967-11-06
br/
EMILIO
ZAPATAné
e
1956-12-01
br/
NICOLAS
JOURDAINné
e
2000-09-10
br/
MARIE
DUPUYné
e
1986-01-11
br/
suite
page
suivante
3.18
Connexion
bases
données
depuis
PHP
43
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
LOU
ANDREASné
e
1861-02-12
br/
Franz
Kafkané
e
1883-07-03
br/
Joe
Daltonné
e
2003-12-06
br/
/body
/html
Execution
carnet
php
Fabrication
table
HTML
résultats
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
body
h1
Interrogation
table
CARNET
PDO
/h1
php
require
``
connect.php
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
}
catch
PDOException
e
{
printf
``
Échec
connexion
s\n
e-
getMessage
exit
}
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
d'accès
CARNET
else
{
table
tr
td
Nom
/td
td
Prénom
/td
/tr
php
foreach
connexion-
query
sql
row
echo
``
tr
td
row
'NOM
'
/td
td
row
'PRENOM
'
``
/td
/tr
\n
/table
php
}
suite
page
suivante
44
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
/body
/html
Résultats
bruts
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
body
h1
Interrogation
table
CARNET
PDO
/h1
table
tr
td
Nom
/td
td
Prénom
/td
/tr
tr
td
SMITH
/td
td
JOHN
/td
/tr
tr
td
DURAND
/td
td
JEAN
/td
/tr
tr
td
GUDULE
/td
td
JEANNE
/td
/tr
tr
td
ZAPATA
/td
td
EMILIO
/td
/tr
tr
td
JOURDAIN
/td
td
NICOLAS
/td
/tr
tr
td
DUPUY
/td
td
MARIE
/td
/tr
tr
td
ANDREAS
/td
td
LOU
/td
/tr
tr
td
Kafka
/td
td
Franz
/td
/tr
tr
td
Dalton
/td
td
Joe
/td
/tr
/table
/body
/html
Execution
Carnet
Table
peut
faire
petit
refactoring
fonction
établit
connexion
base
php
require
``
connect.php
function
connect_bd
{
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
}
suite
page
suivante
3.18
Connexion
bases
données
depuis
PHP
45
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
catch
PDOException
e
{
printf
``
Échec
connexion
s\n
e-
˓→getMessage
exit
}
return
connexion
}
améliorer
affichage
résultats
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
link
rel=
stylesheet
href=
tabstyle.css
/
/head
body
h1
Interrogation
table
CARNET
PDO
/h1
php
require_once
'connexion.php
'
connexion=connect_bd
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
d'accès
CARNET
else
{
table
class=
centre
id=
jolie
tr
td
ID
/td
td
Prénom
/td
td
Nom
/td
td
Naissance
/
˓→td
/tr
php
foreach
connexion-
query
sql
row
echo
``
tr
td
row
'ID
'
``
/td
td
row
'PRENOM
'
``
/td
td
row
'NOM
'
``
/td
td
row
'NAISSANCE
'
``
/td
/tr
br/
\n
/table
php
}
/body
/html
46
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
fichier
CSS
/
*
Bordure
simple
autour
tableaux
*
/
table
th
td
{
border
1px
solid
grey
}
table
{
border-collapse
collapse
}
/
*
Centrage
tableau
*
/
table.centre
{
margin
auto
}
/
*
centrage
texte
cellules
tableau
*
/
table.centre
td
{
text-align
center
}
table
#
jolie
tr
first-child
{
background
LightPink
}
table
#
jolie
tr
nth-child
2n
{
background
#
EFD3C9
}
table
#
jolie
tr
nth-child
2n+3
{
background
#
BCBCD0
}
/
*
tableau
seule
ligne
l'affiche
rouge
*
/
table
tr
only-child
{
background
red
}
Résultats
bruts
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
link
rel=
stylesheet
href=
tabstyle.css
/
/head
body
h1
Interrogation
table
CARNET
PDO
/h1
table
class=
centre
id=
jolie
tr
td
ID
/td
td
Prénom
/td
td
Nom
/td
td
Naissance
/
˓→td
/tr
tr
td
1
/td
td
JOHN
/td
td
SMITH
/td
td
1980-12-17
/td
/tr
br/
tr
td
2
/td
suite
page
suivante
3.18
Connexion
bases
données
depuis
PHP
47
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
td
JEAN
/td
td
DURAND
/td
td
1983-01-13
/td
/tr
br/
tr
td
3
/td
td
JEANNE
/td
td
GUDULE
/td
td
1967-11-06
/td
/tr
br/
tr
td
4
/td
td
EMILIO
/td
td
ZAPATA
/td
td
1956-12-01
/td
/tr
br/
tr
td
5
/td
td
NICOLAS
/td
td
JOURDAIN
/td
td
2000-09-10
/td
/tr
br/
tr
td
6
/td
td
MARIE
/td
td
DUPUY
/td
td
1986-01-11
/td
/tr
br/
tr
td
7
/td
td
LOU
/td
td
ANDREAS
/td
td
1861-02-12
/td
/tr
br/
tr
td
9
/td
td
Franz
/td
td
Kafka
/td
td
1883-07-03
/td
/tr
br/
tr
td
11
/td
td
Joe
/td
td
Dalton
/td
td
2003-12-06
/td
/tr
br/
/table
/body
/html
Execution
Carnet
Table
Version2
peut
générer
pages
différentes
listes
déroulantes
listes
liens
listes
puces
etc
Création
liste
déroulante
doctype
html
html
suite
page
suivante
48
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
/head
body
h1
Interrogation
table
CARNET
PDO
/h1
php
require_once
'connexion.php
'
connexion=connect_bd
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
d'accès
CARNET
else
{
form
action=
recherche.php
method=
GET
select
name=
ID
php
foreach
connexion-
query
sql
row
if
empty
row
'NOM
'
echo
``
option
value=
'
row
'ID
'
``
'
row
'PRENOM
'
``
row
'NOM
'
``
/option
\n
/select
input
type=
submit
value=
Rechercher
/form
php
}
/body
/html
Remarquez
usage
clef
primaire
table
comme
value
options
assurent
unicité
valeurs
évite
toute
amiguité
Résultats
bruts
doctype
html
html
head
title
Connexion
MySQL
PDO
/title
meta
charset=
utf-8
/head
body
suite
page
suivante
3.18
Connexion
bases
données
depuis
PHP
49
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
h1
Interrogation
table
CARNET
PDO
/h1
form
action=
recherche.php
method=
GET
select
name=
ID
option
value=
'
1
'
JOHN
SMITH
/option
option
value=
'
2
'
JEAN
DURAND
/option
option
value=
'
3
'
JEANNE
GUDULE
/option
option
value=
'
4
'
EMILIO
ZAPATA
/option
option
value=
'
5
'
NICOLAS
JOURDAIN
/option
option
value=
'
6
'
MARIE
DUPUY
/option
option
value=
'
7
'
LOU
ANDREAS
/option
option
value=
'
9
'
Franz
Kafka
/option
option
value='11
'
Joe
Dalton
/option
/select
input
type=
submit
value=
Rechercher
/form
/body
/html
Execution
Carnet
Select
3.19
Requêtes
préparées
PHP
3.19.1
Recherche
simple
PHP
PDO
doctype
html
html
head
title
Recherche
d'une
personne
ID
/title
meta
charset=
utf-8
/head
body
php
wanted=
_GET
'ID
'
if
empty
wanted
{
echo
``
h1
Recherche
wanted
/h1
require_once
'connexion.php
'
connexion=connect_bd
sql=
SELECT
*
from
CARNET
where
ID=
'
wanted
``
'
suite
page
suivante
50
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
if
connexion-
query
sql
echo
``
Pb
requete
else
{
foreach
connexion-
query
sql
row
echo
row
'NOM
'
``
row
'PRENOM
'
``
/br
\n
}
}
/body
/html
Appel
paramètre
ID
passé
URL
php
exemples/pdo/recherche.php
ID=3
Execution
recherche
php
lorsqu
nombreux
paramètres
retrouve
nombreuses
concaténations
chaines
entourées
“
cotes
”
grande
source
erreurs
lenteurs
écriture
remédier
cela
peut
utiliser
requêtes
préparées
permettent
bien
dissocier
requête
paramètres
vont
être
fournis
avant
exécution
PreparedStatement
également
bien
préférables
termes
sécurité
utiliser
systématiquement
3.19.2
Recherche
PreparedStatement
doctype
html
html
head
title
Recherche
d'une
personne
ID
/title
meta
charset=
utf-8
/head
body
php
wanted=
_GET
'ID
'
if
empty
wanted
{
echo
``
h1
Recherche
wanted
/h1
require_once
'connexion.php
'
connexion=connect_bd
sql=
SELECT
*
from
CARNET
where
ID=
id
stmt=
connexion-
prepare
sql
stmt-
bindParam
'
id
'
_GET
'ID
'
stmt-
execute
if
stmt
echo
``
Pb
d'accès
CARNET
else
{
suite
page
suivante
3.19
Requêtes
préparées
PHP
51
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
if
stmt-
rowCount
==0
echo
``
Inconnu
br/
else
foreach
stmt
row
echo
row
'PRENOM
'
``
row
'NOM
'
``
né
e
``
row
'NAISSANCE
'
``
br/
}
}
/body
/html
requêtes
préparées
limitent
fortement
possibilité
”
injections
SQL
comme
ver-ront
plus
tard
3.20
Compléments
PDO
-
Sécurité
3.20.1
Filtrage
entrées
peut
vouloir
nourrir
requête
directement
données
provenant
formulaire
php
sql
=
sprintf
'SELECT
id
FROM
CARNET
WHERE
email
=
``
'
_GET
'email
'
voit
bien
valeur
entrée
email
tableau
_GET
absolument
vérfifiée
avant
utilisation
peut
essayer
cas
utiliser
filtre
PHP
contrôler
peu
choses
php
sql
=
sprintf
'SELECT
id
FROM
CARNET
WHERE
email
=
``
'
filter_input
INPUT_GET
'email
'
ceci
constitue
manière
peu
sûre
procéder
malgré
utilisation
filtre
PHP
Cela
laisse
effet
possiblilité
insertion
code
malveillant
non
contrôlé
exemple
classique
requête
SQL
construite
chaine
suivante
php
sql
=
``
SELECT
nom
FROM
USERS
WHERE
login=
'
_REQUEST
'login
'
'
AND
PASSWD=
'
_REQUEST
'pass
'
``
'
52
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
donne
lors
exécution
_REQUEST
“
login
”
=
toto
”
–
SELECT
nom
FROM
USERS
WHERE
login='toto'
'
AND
PASSWD=
'
_
˓→REQUEST
'pass
'
'
``
Avertissement
-
-
constituant
début
commentaire
SQL
ceci
constitue
in-
jection
SQL
principales
failles
sécurité
exploitées
Hackers
prémunir
faut
utiliser
fois
filtrage
entrées
requêtes
préparées
php
sql
=
'SELECT
id
FROM
CARNET
WHERE
email
=
email
'
statement
=
pdo-
prepare
sql
email
=
filter_input
INPUT_GET
'email
'
statement-
bindValue
'
email
'
email
faut
parfois
préciser
troisième
argument
type
paramètres
attendus
php
sql
=
'SELECT
email
FROM
CARNET
WHERE
id
=
id
'
statement
=
pdo-
prepare
sql
userId
=
filter_input
INPUT_GET
'id
'
statement-
bindValue
'
id
'
userId
PDO
:PARAM_INT
3.21
Filtrage
PHP
vérifications
formulaires
HTML5
JavaScript
valables
uniquement
côté
client
raisons
sécurité
faut
réeffectuer
complètement
toutes
vérifications
côté
serveur
PHP
met
cela
disposition
programmeurs
tout
ensemble
filtres
première
vérifications
consiste
bien
prendre
compte
caractères
spéciaux
3.21.1
Gestion
caractères
spéciaux
magic
quotes
Avant
PHP
5.4
directive
concernant
magic
quotes
existait
fichier
configuration
PHP
directive
magic_quotes_gpc
etait
activée
PHP
modifiait
automatiquement
certaines
entrées
formulaires
procédant
protections
certains
caractères
spéciaux
insertion
backslashes
exemple
—
caractères
accentués
—
apostrophes
—
backslashes
3.21
Filtrage
PHP
53
Cours
PHP
Accéléré
Version
0.9.1
peu
manière
fonction
addslashes
protection
destinée
préparer
données
avant
requêtes
SQL
empêcher
éventuelle
injection
SQL
comportement
automatique
toutefois
parfois
gênant
veut
simplement
réafficher
chaines
saisies
non
utiliser
requêtes
SQL
outre
veut
toujours
protéger
chaines
façon
selon
usage
veut
faire
suite
peut
vouloir
certains
cas
protéger
chaines
exemple
—
htmlspecialchars
éviter
injections
code
HTML
—
PDO
quote
protéger
injections
SQL
php
pdo
=
new
PDO
'sqlite
./tmp/mydb.sqlite
'
string
=
'Orléans
'
print
``
Chaîne
sans
quotes
string\n
print
``
Chaîne
quotes
``
pdo-
quote
string
``
\n
Cela
dispense
utiliser
PreparedStatement
vus
précédemment
filtres
PHP
plus
directs
utiliser
formulaires
basés
fonction
filter_input
paramètre
INPUT_GET
INPUT_POST
Voici
quelques
exemples
typiques
php
entier
=
filter_input
INPUT_POST
'var1
'
FILTER_SANITIZE_
˓→NUMBER_INT
url
=
filter_input
INPUT_POST
'var2
'
FILTER_VALIDATE_URL
if
filter_input
INPUT_GET
``
email
FILTER_VALIDATE_EMAIL
echo
``
Email
non
valide
else
echo
``
Email
valide
peut
aussi
filtrer
carctères
spéciaux
php
search_html
=
filter_input
INPUT_GET
'search
'
FILTER_SANITIZE_
˓→SPECIAL_CHARS
search_url
=
filter_input
INPUT_GET
'search
'
FILTER_SANITIZE_
˓→ENCODED
echo
``
recherché
search_html
\n
echo
``
href=
'
search=
search_url
'
Nouvelle
recherche.
/a
54
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.22
Gestion
transactions
PDO
3.22.1
Problème
série
requêtes
SQL
logiquement
liées
entre
elles
voudrait
elles
toutes
exécutées
aucune
effet
certains
cas
prise
compte
partie
requêtes
seulement
peut
conduire
incohérence
système
information
base
données
peut
ainsi
être
corrompue
très
difficile
rectifier
suite
exemple
2
requêtes
suivent
liées
php
require
'connexion.php
'
connexion=connect_bd
stmt1
=
pdo-
prepare
'
UPDATE
compte
SET
solde
=
solde
-
montant
WHERE
nom
=
nom
'
stmt2
=
pdo-
prepare
'
UPDATE
compte
SET
solde
=
solde
+
montant
WHERE
nom
=
nom
'
//
Retrait
Compte1
cpte1
=
'Compte1
'
montant
=
50
stmt1-
bindParam
'
nom
'
cpte1
stmt1-
bindParam
'
solde
'
montant
PDO
:PARAM_INT
stmt1-
execute
//
Credit
Compte2
cpte2
=
'Compte2
'
depot
=
50
stmt2-
bindParam
'
nom
'
cpte2
stmt-
bindParam
'
montant
'
depot
PDO
:PARAM_INT
stmt-
execute
Ceci
peut
conduire
problème
cas
interruption
séquence
particulier
Compte1
peut
avoir
débité
sans
Compte2
crédité
peut
résoudre
fragilité
utilisant
transaction
php
require
'connexion.php
'
connexion=connect_bd
suite
page
suivante
3.22
Gestion
transactions
PDO
55
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
stmt1
=
connexion-
prepare
'
UPDATE
compte
SET
solde
=
solde
-
solde
WHERE
nom
=
nom
'
stmt2
=
connexion-
prepare
'
UPDATE
compte
SET
solde
=
solde
+
montant
WHERE
nom
=
nom
'
//
commence
transaction
connexion
-
beginTransaction
//
Retrait
Compte1
cpte1
=
'Compte1
'
montant
=
100
stmt1-
bindParam
'
nom
'
cpte1
stmt1-
bindParam
'
solde
'
montant
PDO
:PARAM_INT
stmt1-
execute
//
Credit
Compte2
cpte2
=
'Compte2
'
depot
=
50
stmt2-
bindParam
'
nom
'
cpte2
stmt-
bindParam
'
montant
'
depot
PDO
:PARAM_INT
stmt-
execute
//on
termine
transaction
connexion
-
commit
séquence
échoue
PDO
commandera
RollBack
automatique
dire
annulation
toute
transaction
3.23
Connexion
persistante
PDO
créer
connexion
persistante
PDO
suffit
utiliser
attribut
ATTR
PERSISTENT
instanciation
objet
PDO
Lors
appels
ultérieurs
paramètres
création
identiques
objet
déjà
créé
simplement
réutilisé
php
function
connect_db
{
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
array
PDO
:ATTR_PERSISTENT
=
true
suite
page
suivante
56
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
}
catch
PDOException
e
{
printf
``
Échec
connexion
s\n
e-
getMessage
exit
}
return
connexion
}
3.24
Validation
contrôle
entrées
GUMP
peut
également
utiliser
librairies
aidant
gérer
validation
comme
GUMP
https
//github.com/Wixel/GUMP
3.24.1
installer
Créons
fichier
composer.json
répertoire
travail
{
require
{
wixel/gump
``
dev-master
}
}
Puis
utilisons
outil
PHP
composer
installer
composants
demandés
composer
update
3.24.2
pouvons
utiliser
Gump
vérifier
entrées
php
require
``
vendor/wixel/gump/gump.class.php
is_valid
=
GUMP
:is_valid
_POST
array
'username
'
=
'required|alpha_numeric
'
'password
'
=
'required|max_len,100|min_len,6'
if
is_valid
{
echo
``
valid
username
and
password
``
}
else
{
print_r
is_valid
suite
page
suivante
3.24
Validation
contrôle
entrées
GUMP
57
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
}
3.24.3
manière
plus
détaillée
php
require
``
vendor/wixel/gump/gump.class.php
if
_SERVER
``
REQUEST_METHOD
==
``
POST
{
validator
=
new
GUMP
name
=
_POST
'name
'
password
=
_POST
'password
'
_POST
=
array
'name
'
=
name
'password
'
=
password
//
néttoie
données
convertit
chaines
utf-8
besoin
_POST
=
validator-
sanitize
_POST
//
Définissons
règles
filtres
rules
=
array
'name
'
=
'required|alpha_numeric|max_len,100|min_len,6
'
'password
'
=
'required|max_len,100|min_len,6
'
filters
=
array
'name'
=
'trim|sanitize_string
'
'password'
=
'trim|base64_encode
'
//
applique
filtres
_POST
=
validator-
filter
_POST
filters
//
valide
is_valid
=
validator-
validate
_POST
rules
//
vérifie
résultat
if
is_valid
===
true
{
echo
name
echo
password
exit
}
else
{
echo
``
Erreurs
détectées
entrées
\n
suite
page
suivante
58
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
//
affiche
erreurs
html
echo
validator-
get_readable_errors
true
}
}
3.25
Http
conservation
informations
clients
3.25.1
Problème
protocole
HTTP
protocole
sans
mémoire
requête
client
informations
rattachées
mémorisées
défaut
Plusieurs
techniques
développées
remédier
manque
—
Envoyer
information
URL
—
Utiliser
champ
caché
HTML
—
Utiliser
Cookies
—
Utiliser
Sessions
Envoi
information
URL
Considérons
première
page
page1.php
doctype
html
html
lang=
fr
head
meta
charset=
utf-8
/
title
Formulaires
/title
/head
body
php
if
isset
_GET
'login
'
{
form
method='GET'
action=
php
echo
_SERVER
'PHP_SELF
'
p
Login
input
type=
text
name=
login
/p
input
type=
submit
value=
Valider
/form
php
}
else
{
header
'Location
page2.php
login='.
_GET
'login
'
}
suite
page
suivante
3.25
Http
conservation
informations
clients
59
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
/body
/html
poursuit
page2
doctype
html
html
lang=
fr
head
meta
charset=
utf-8
/
title
Formulaires
/title
/head
body
php
if
isset
_GET
'login
'
{
echo
_GET
'login
'
}
else
{
header
'Location
page1.php
'
}
/body
/html
Exécution
Passage
info
URL
Utiliser
cookies
information
stockée
petit
fichier
texte
navigateur
client
peut
exemple
servir
stocker
identifiant
session
login
compteur
visites
encore
mesurer
temps
connexion
php
if
isset
_COOKIE
'compteur
'
{
message
=
``
etes
deja
venu
``
_COOKIE
'compteur
'
fois
˓→
br/
\n
valeur
=
_COOKIE
'compteur
'
+
1
}
else
{
message
=
``
met
petit
cookie
br/
\n
valeur
=
1
}
setCookie
``
compteur
valeur
suite
page
suivante
60
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
echo
message
Exécution
Cookies
PHP
informations
plus
grand
nombre
stocker
revètent
caractère
plus
sensible
préférera
stocker
essentiellement
côté
serveur
utiliser
mécanisme
plus
complet
sessions
Celui-ci
consiste
utiliser
tableau
associatif
_SESSION
permet
stocker
toute
sorte
informations
associées
client
données
type
nombres
chaines
tableaux
objets
PHP
Considérons
première
page
mettant
place
session
php
//
session1.php
session_start
if
isset
_SESSION
'cpt
'
_SESSION
'cpt
'
=0
else
_SESSION
'cpt
'
++
echo
``
vu
page
``
_SESSION
'cpt
'
fois
br/
\n
echo
``
SID
courant
``
session_id
echo
``
br/
href=\
session2.php\
Aller
page
suivante
˓→session2.php
/a
Puis
va
relire
informations
stockées
variables
session
autre
page
php
//
session2.php
session_start
if
isset
_SESSION
'cpt
'
_SESSION
'cpt
'
=0
else
_SESSION
'cpt
'
++
echo
``
bonjour
{
_SESSION
'login
'
}
br
\n
echo
``
vu
page
``
_SESSION
'cpt
'
``
fois
br/
\n
echo
``
SID
toujours
``
session_id
echo
``
br/
href=\
session1.php\
Retour
session1.php
/a
Exécution
Utilisation
variable
session
PHP
3.25
Http
conservation
informations
clients
61
Cours
PHP
Accéléré
Version
0.9.1
Champs
cachés
quatrième
mécanisme
employé
conserver
information
pages
Web
elles-mêmes
comme
utilisation
champs
cachés
input
type
hidden
champs
peuvent
exemple
servir
stocker
formulaires
HTML
champ
spécial
dit
csrf
token
contiendra
identifiant
unique
temporaire
prémunir
attaques
type
CSRF
Cross
Site
Request
Forgery
exemple
envoi
mail
contenant
image
quelqu
image
fait
lien
vers
page
administration
laquelle
destinataire
mail
droits
particuliers
comme
editer
supprimer
ressource
page
pourra
déclencher
suppression
modification
contenu
non
souhaitée
principaux
Frameworks
Web
comme
Symfony
Laravel
PHP
Django
Flask
Python
prennent
charge
génération
automatique
token
mise
variable
session
faut
tout
appeler
formulaires
lors
utilisation
Ajax
3.26
Manipuler
XML
PHP
format
XML
utilisé
façon
très
variée
trouvons
services
Web
fichiers
configuration
formats
comme
SVG
MathML
docx
odt
etc.
manipulation
langage
comme
PHP
particulièrement
importante
peut
manipuler
XML
différentes
manières
—
main
—
XMLWriter/XMLReader
—
DOM
—
SimpleXML
combinaisons
méthodes
—
DOM
Document
Object
Model
méthode
recrée
toute
arborescence
document
XML
sous
forme
objets
PHP
utilisation
simple
cou-
teuse
ressources
temps
exécution
peu
verbeuse
—
XMLWriter
XMLReader
traitent
fichiers
XML
plus
bas
niveau
uti-
lisation
exclusive
rend
parfois
code
délicat
implémenter
surtout
lecture
fichiers
complexes
—
SimpleXML
représente
sorte
compromis
Simplicité/Performance
—
Traiter
fichiers
xml
main
généralement
éviter
sauf
créer
fichiers
très
simples
3.26.1
Traitement
fichiers
XML
main
Observons
abord
comment
créer
fichier
XML
contenant
liste
programmes
TV
lecture
fichiers
XML
sans
API
peu
recommandée
php
header
'Content-Type
text/xml
'
print
'
xml
version=
1.0
'
``
\n
print
``
programmes
\n
suite
page
suivante
62
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
programmes
=
array
array
'nom'=
'Simpsons
'
'chaine'=
'TF18
'
'debut
'
=
'21:00
'
'duree
'
=
'30
'
array
'nom'=
'Blake
Mortimer
'
'chaine
'
=
'M54
'
'debut'=
'20:00
'
'duree'=
'60
'
foreach
programmes
show
{
print
``
\t
show
\n
foreach
show
tag
=
data
{
print
``
\t
tag
htmlspecialchars
data
``
\t
/
tag
\n
}
print
``
/show
\n
}
print
``
/programmes
\n
3.26.2
Exécution
Ecriture
XML
main
3.26.3
Resultat
brut
html
xml
version=
1.0
programmes
show
nom
Simpsons
/nom
chaine
TF18
/chaine
debut
21:00
/debut
duree
30
/duree
/show
show
nom
Blake
Mortimer
/nom
chaine
M54
/chaine
debut
20:00
/debut
duree
60
/duree
/show
/programmes
3.26.4
Ecriture
XMLWriter
exemple
simple
démarrer
3.26
Manipuler
XML
PHP
63
Cours
PHP
Accéléré
Version
0.9.1
php
xml
=
new
XMLWriter
xml-
openURI
'test.xml
'
xml-
startElement
'toto
'
xml-
writeElement
'url
'
'http
//totototo.com
'
xml-
endElement
xml-
flush
3.26.5
Resultat
brut
toto
url
http
//toto.com
/url
/toto
récupère
données
table
CARNET
exporter
XML
php
require_once
'connexion.php
'
connexion=connect_bd
sql=
SELECT
*
from
CARNET
data=
connexion-
query
sql
xml=
new
XMLWriter
xml-
openUri
``
contacts.xml
xml-
startDocument
'
1.0
'
'utf-8
'
xml-
startElement
'mescontacts
'
while
pers=
data-
fetch
{
xml-
startElement
'contact
'
xml-
writeAttribute
'id
'
pers
'ID
'
xml-
writeElement
'prenom
'
pers
'PRENOM
'
xml-
writeElement
'nom
'
pers
'NOM
'
xml-
writeElement
'naissance
'
pers
'NAISSANCE
'
xml-
endElement
}
xml-
endElement
xml-
endElement
xml-
flush
3.26.6
Resultat
xml
version=
1.0
encoding=
UTF-8
mescontacts
contact
id=
1
prenom
JOHN
/prenom
nom
SMITH
/nom
naissance
1980-12-17
/naissance
suite
page
suivante
64
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
/contact
contact
id=
2
prenom
JEAN
/prenom
nom
DURAND
/nom
naissance
1983-01-13
/naissance
/contact
contact
id=
3
prenom
JEANNE
/prenom
nom
GUDULE
/nom
naissance
1967-11-06
/naissance
/contact
contact
id=
4
prenom
EMILIO
/prenom
nom
ZAPATA
/nom
naissance
1956-12-01
/naissance
/contact
contact
id=
5
prenom
NICOLAS
/prenom
nom
JOURDAIN
/nom
naissance
2000-09-10
/naissance
/contact
contact
id=
6
prenom
MARIE
/prenom
nom
DUPUY
/nom
naissance
1986-01-11
/naissance
/contact
contact
id=
7
prenom
LOU
/prenom
nom
ANDREAS
/nom
naissance
1861-02-12
/naissance
/contact
contact
id=
9
prenom
Franz
/prenom
nom
Kafka
/nom
naissance
1883-07-03
/naissance
/contact
contact
id=
11
prenom
Joe
/prenom
nom
Dalton
/nom
naissance
2003-12-06
/naissance
/contact
/mescontacts
3.26.7
Traitements
DOM
Ecriture
fichier
XML
DOM
utilisant
données
provenant
Base
Données
Partons
table
films
suivante
3.26
Manipuler
XML
PHP
65
Cours
PHP
Accéléré
Version
0.9.1
CREATE
TABLE
IF
NOT
EXISTS
`
films
`
`
code_filmìnt
11
NOT
NULL
AUTO_INCREMENT
`
titre_original
`
varchar
50
DEFAULT
NULL
`
titre_francais
`
varchar
50
DEFAULT
NULL
`
pays
`
varchar
20
DEFAULT
NULL
`
dateìnt
11
DEFAULT
NULL
`
dureeìnt
11
DEFAULT
NULL
`
couleur
`
varchar
10
DEFAULT
NULL
`
realisateurìnt
11
DEFAULT
NULL
ìmagè
varchar
20
DEFAULT
NULL
PRIMARY
KEY
`
code_film
`
créons
fichier
XML
données
table
utilisant
DOM
php
//
fichier
connexion.php
utilisé
auparavant
require
``
connexion.php
connexion=connect_bd
sql=
SELECT
*
from
films
limit
10
data=
connexion-
query
sql
if
data
{
document
=
new
DomDocument
document-
preserveWhiteSpace
=
false
document-
formatOutput
=
true
//
crée
racine
lesfilms
l'insère
document
lesfilms
=
document-
createElement
'lesfilms
'
document-
appendChild
lesfilms
//
boucle
tous
films
trouvés
BD
while
unfilm=
data-
fetch
PDO
:FETCH_OBJ
{
film=
document-
createElement
'film
'
film-
setAttribute
'idreal
'
unfilm-
realisateur
lesfilms-
appendChild
film
//
crée
l'élément
title
l'ajoute
film
title
=
document-
createElement
'titre
'
film-
appendChild
title
//
définit
texte
title
text=
document-
createTextNode
utf8_encode
unfilm-
titre_
˓→original
title-
appendChild
text
//crée
ajoute
realisateur
film
realisateur=
document-
createElement
'date
'
id=
document-
createTextNode
unfilm-
date
realisateur-
appendChild
id
film-
appendChild
realisateur
}
document-
save
'myFilms.xml
'
suite
page
suivante
66
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
echo
``
Export
XML
fini
``
}
else
{
echo
``
Aucun
film
base
}
3.26.8
Exécution
Creation
XML
DOM
3.26.9
Resultat
xml
version=
1.0
lesfilms
film
idreal=
7
titre
Pandora
and
the
flying
Dutchman
/
˓→titre
date
1951
/date
/film
film
idreal=
8
titre
Johnny
Guitar
/
˓→titre
date
1954
/date
/film
film
idreal=
9
titre
Woman
under
the
Influence
/
˓→titre
date
1974
/date
/film
film
idreal=
10
titre
Apartment
The
/
˓→titre
date
1960
/date
/film
film
idreal=
11
titre
Victor/Victoria
/
˓→titre
date
1982
/date
/film
film
idreal=
12
titre
Modern
Times
/
˓→titre
date
1936
/date
/film
film
idreal=
13
suite
page
suivante
3.26
Manipuler
XML
PHP
67
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
titre
&
#
xC3
&
#
xA9
pris
˓→
/titre
date
1963
/date
/film
film
idreal=
14
titre
Jour
f
&
#
xC3
&
#
xAA
˓→
/titre
date
1948
/date
/film
film
idreal=
15
titre
Olvidados
Los
/
˓→titre
date
1950
/date
/film
film
idreal=
16
titre
West
Side
Story
/
˓→titre
date
1961
/date
/film
/lesfilms
3.26.10
Relecture
SimpleXML
php
lesfilms
=
simplexml_load_file
'myFilms.xml
'
foreach
lesfilms-
film
film
{
echo
``
Titre
utf8_decode
film-
titre
``
br/
\n
foreach
film-
attributes
=
b
{
echo
'=
'
b
``
\
\n
}
print
``
Annee
{
film-
annee
}
br/
\n
}
3.26.11
Exécution
Lecture
XML
SimpleXML
3.26.12
Resultat
brut
68
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Titre
Pandora
and
the
flying
Dutchman
˓→
br/
idreal=
7
Annee
br/
Titre
Johnny
Guitar
˓→
br/
idreal=
8
Annee
br/
Titre
Woman
under
the
Influence
˓→
br/
idreal=
9
Annee
br/
Titre
Apartment
The
˓→
br/
idreal=
10
Annee
br/
Titre
Victor/Victoria
˓→
br/
idreal=
11
Annee
br/
Titre
Modern
Times
˓→
br/
idreal=
12
Annee
br/
Titre
Mépris
˓→
br/
idreal=
13
Annee
br/
Titre
Jour
fête
˓→
br/
idreal=
14
Annee
br/
Titre
Olvidados
Los
˓→
br/
idreal=
15
Annee
br/
Titre
West
Side
Story
˓→
br/
idreal=
16
Annee
br/
3.27
Architecture
type
MVC
PHP
3.27.1
Problème
Lorsqu
projet
augmente
besoin
organiser
permettre
plus
réutilisabilité
lisibilité
demande
certaine
méthode
MVC
=
Modèle
Vue
Controleur
peut
être
solution
3.27
Architecture
type
MVC
PHP
69
Cours
PHP
Accéléré
Version
0.9.1
intéressante
allons
commencer
familiariser
composants
Framework
MVC
voir
utilité
recourir
tels
outils
introduction
générale
sujet
trouve
ici
http
//sym-
fony.com/doc/current/book/from_flat_php_to_symfony2.html
3.27.2
PHP
pur
templates
PHP
Considérons
code
suivant
interrogeant
table
CARNET
vue
précemment
depuis
PHP
PDO
php
require
``
connect.php
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
}
catch
PDOException
e
{
printf
``
Echec
connexion
s\n
e-
getMessage
exit
}
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
acceder
CARNET
else
{
foreach
connexion-
query
sql
row
{
echo
row
'NOM
'
br/
\n
}
}
peut
observer
quelques
défauts
code
ci-dessus
—
Réutilisabilté
code
très
réduite
—
fabrique
formulaire
entrées
carnet
doit-on
mettre
code
correspondant
3.27.3
template
PHP
peut
améliorer
peu
choses
php
require
``
connect.php
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
suite
page
suivante
70
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
connexion=new
PDO
dsn
USER
PASSWD
}
catch
PDOException
e
{
printf
``
Echec
connexion
s\n
e-
getMessage
exit
}
sql=
SELECT
*
from
CARNET
if
connexion-
query
sql
echo
``
Pb
acceder
CARNET
else
{
amis=Array
foreach
connexion-
query
sql
row
{
amis
=
row
}
require
``
templates/listeamis.php
}
template
listeamis.php
placer
templates/listeamis.php
DOCTYPE
html
html
head
title
Liste
Amis
/title
/head
body
h1
List
of
friends
/h1
ul
php
foreach
amis
ami
li
href=
/recherche
nom=
php
echo
ami
'ID
'
/a
/li
php
endforeach
/ul
/body
/html
commence
ainsi
séparer
présentation
codage
métier
3.27.4
Isolons
logique
applicative
php
//modele.php
require
``
connect.php
suite
page
suivante
3.27
Architecture
type
MVC
PHP
71
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
function
connect_db
{
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
connexion=new
PDO
dsn
USER
PASSWD
}
catch
PDOException
e
{
printf
``
Echec
connexion
s\n
e-
getMessage
exit
}
return
connexion
}
//
Puis
function
get_all_friends
{
connexion=connect_db
amis=Array
sql=
SELECT
*
from
CARNET
foreach
connexion-
query
sql
row
{
amis
=
row
}
return
amis
}
peut
maintenant
avoir
controleur
très
simple
interroge
modèle
puis
passe
données
template
affichage
php
//c-list.php
require_once
'modele.php
'
amis
=
get_all_friends
require
'templates/listamis.php
'
3.27.5
Layout
reste
partie
non
réutilisable
code
savoir
layout
Essayons
remédier
ça
templates/baseLayout.php
DOCTYPE
html
suite
page
suivante
72
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
html
head
title
php
echo
title
/title
/head
body
php
echo
content
/body
/html
3.27.6
Héritage
templates
php
//
templates/t-list.php
title
=
'Liste
amis
'
ob_start
h1
List
amis
/h1
ul
php
foreach
amis
ami
li
href=
/recherche
nom=
php
echo
ami
'nom
'
php
echo
ami
'VILLE
'
/a
/li
php
endforeach
/ul
php
content
=
ob_get_clean
include
'baseLayout.php'
Observez
utilisation
bufferisation
ob_start
ob_get_clean
dernière
fonction
récupère
contenu
bufferisé
nettoie
ensuite
buffer
Affichage
détails
personne
va
ajouter
modèle
fonction
afficher
détails
personne
php
function
get_friend_by_id
id
{
connexion=connect_bd
sql=
SELECT
*
from
CARNET
where
ID=
id
stmt=
connexion-
prepare
sql
stmt-
bindParam
'
id
'
id
PDO
:PARAM_INT
stmt-
execute
suite
page
suivante
3.27
Architecture
type
MVC
PHP
73
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
return
stmt-
fetch
}
peut
maintenant
créer
nouveau
controleur
c-details.php
php
//c-details.php
require_once
'modele.php
'
pers
=
get_friend_by_id
_GET
'id
'
require
'templates/t-details.php
'
utilise
template
php
//templates/t-details.php
title
=
pers
'NOM
'
ob_start
h1
details
php
echo
pers
'PRENOM
'
'
'.
pers
'NOM
'
/h1
p
php
echo
'
'.
pers
'NAISSANCE
'
echo
'
br/
Ville
'.
pers
'VILLE
'
content
=
ob_get_clean
include
'baseLayout.php'
pouvez
tester
entrant
URL
c-details.php
paramètre
id
code
similaire
celui
premier
template
pouvons
réutiliser
template
base
subsiste
plusieurs
problèmes
—
paramètre
id
fourni
application
va
provoquer
erreur
—
controleur
principal
Regroupons
abord
code
2
contrôleurs
c-list.php
c-details.php
fichier
unique
controllers.php
php
//
controllers.php
function
list_action
{
amis
=
get_all_friends
require
'templates/t-list.php
'
}
function
detail_action
id
{
pers
=
get_friend_by_id
id
suite
page
suivante
74
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
require
'templates/t-detail.php
'
}
pouvons
enfin
proposer
controleur
principal
Front
Controller
index.php
php
//
index.php
//
charge
modeles
controleurs
require_once
'modele.php
'
require_once
'controllers.php
'
//
gestion
routes
uri
=
parse_url
_SERVER
'REQUEST_URI
'
PHP_URL_PATH
if
'/index.php
'
==
uri
{
list_action
}
elseif
'/index.php/detail
'
==
uri
&
&
isset
_GET
'id
'
{
detail_action
_GET
'id
'
}
else
{
header
'Status
404
Not
Found
'
echo
'
html
body
h1
Page
Not
Found
/h1
/body
/html
'
}
maintenant
structure
type
connect.php
connexion.php
controlleur.php
modele.php
recherche.php
templates
layout.php
listeamis.php
peut
améliorer
tout
cela
intégrant
Objet
tout
modèle
Voir
github/roza/php-basic-mvc
https
//github.com/roza/php-basic-mvc/
code
complet
système
routage
encore
très
incomplet
allons
plutôt
utliser
continuer
outils
framework
Web
référence
Symfony
3.28
Templates
Twig
PHP
installation
Twig
fait
grâce
outil
composer
3.28
Templates
Twig
PHP
75
Cours
PHP
Accéléré
Version
0.9.1
3.28.1
composer
Installons
abord
outil
composer
servira
beaucoup
tâches
courantes
projet
PHP
va
abord
créer
répertoire
bin
racine
HOME
placez-y
exécutable
composer.phar
renommez
composer
cd
mkdir
bin
cd
bin
curl
-s
https
//getcomposer.org/installer
|
php
mv
composer.phar
composer
Vérifiez
définition
variables
environnement
http_proxy
https_proxy
.bashrc
Ajoutez
également
ligne
suivante
.bashrc
export
PATH=
PATH
~/bin
manière
tous
programmes
installés
répertoire
bin
HOME
accessibles
importe
3.28.2
Installation
Installons
Twig
..
code-block
none
composer
require
twig/twig
~1.0
Ceci
créera
répertoire
courant
dossier
vendor
contenant
librairies
demandées
définit
abord
template
base
BaseTemplate.html
DOCTYPE
html
html
lang=
fr
head
{
block
head
}
meta
charset=
utf-8
link
rel=
stylesheet
href=
style.css
/
title
{
block
title
}
{
endblock
}
/title
{
endblock
}
/head
body
section
id=
content
{
block
content
}
{
endblock
}
/section
footer
id=
footer
{
block
footer
}
&
copy
Copyright
2018
href=
http
//monsite.com
super
Site
/a
{
endblock
}
/footer
/body
/html
76
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Puis
template
plus
spécialisé
hérite
menu.html
{
extends
``
BaseTemplate.html
}
{
block
title
}
Menu
semaine
{
endblock
}
{
block
head
}
{
{
parent
}
}
style
type=
text/css
.important
{
color
#
336699
}
/style
{
endblock
}
{
block
content
}
h1
Menu
/h1
p
class=
important
Voici
menu
semaine
dl
dt
Lundi
/dt
dd
{
{
Lundi
}
}
/dd
dt
Mardi
/dt
dd
{
{
Mardi
}
}
/dd
dt
Mercredi
/dt
dd
{
{
Mercredi
}
}
/dd
dt
Jeudi
/dt
dd
{
{
Jeudi
}
}
/dd
/dl
/p
{
endblock
}
Enfin
utilise
template
fichier
menu.php
chargeant
abord
”
autoloader
php
//
inclure
l'autoloader
include
'vendor/autoload.php
'
try
{
//
Définir
dossier
trouve
templates
loader
=
new
Twig_Loader_Filesystem
'templates
'
//
initialiser
l'environement
Twig
twig
=
new
Twig_Environment
loader
//
charger
template
template
=
twig-
loadTemplate
'menu.html
'
//
Affecter
variables
template
appeller
rendu
echo
template-
render
array
'Lundi
'
=
'Steak
Frites
'
'Mardi
'
=
'Raviolis
'
'Mercredi
'
=
'Pot
Feu
'
'Jeudi
'
=
'Couscous
'
'Vendredi
'
=
'Poisson'
}
catch
Exception
e
{
die
'ERROR
'
e-
getMessage
suite
page
suivante
3.28
Templates
Twig
PHP
77
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
}
3.28.3
Affichage
personnes
Carnet
Affichons
présent
personnes
Carnet
aide
template
Twig
réutilise
fichier
modele.php
vu
précédemment
php
//
modele.php
class
Carnet
{
private
static
connexion
function
__construct
{
dsn=
mysql
dbname=
.BASE
``
host=
.SERVER
try
{
self
connexion=new
PDO
dsn
USER
PASSWD
}
catch
PDOException
e
{
printf
``
Échec
connexion
s\n
e-
˓→getMessage
this-
connexion
=
NULL
}
}
/
*
*
Récupére
liste
contacts
sous
forme
d'un
tableau
*
/
function
get_all_friends
{
sql=
SELECT
*
from
CARNET
data=self
connexion-
query
sql
return
data
}
/
*
*
Ajoute
contact
table
CARNET
*
/
function
add_friend
data
{
sql
=
``
INSERT
INTO
CARNET
NOM
PRENOM
NAISSANCE
VILLE
˓→values
stmt
=
self
connexion-
prepare
sql
return
stmt-
execute
array
data
'nom
'
data
'prenom
'
data
'naissance
'
data
'ville
'
}
/
*
*
Récupére
contact
partir
ID
*
/
function
get_friend_by_id
id
{
sql=
SELECT
*
from
CARNET
where
ID=
id
stmt=self
connexion-
prepare
sql
stmt-
bindParam
'
id
'
id
PDO
:PARAM_INT
stmt-
execute
return
stmt-
fetch
PDO
:FETCH_OBJ
}
php
suite
page
suivante
78
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
//
fichier
carnet.php
include
'vendor/autoload.php
'
//
inclus
modele
include
'modele.php
'
//
instancie
Carnet
car
=
new
Carnet
try
{
//
Indiquer
dossier
trouve
templates
loader
=
new
Twig_Loader_Filesystem
'templates
'
//
initialiser
l'environement
Twig
twig
=
new
Twig_Environment
loader
//
Récupérer
données
depuis
base
amis
=
car-
get_all_friends
//
Charger
template
template
=
twig-
loadTemplate
'carnet.html
'
titre=
Liste
membres
carnet
trié
ville
echo
template-
render
array
'titre
'
=
titre
'amis
'
=
amis
}
catch
Exception
e
{
die
'ERROR
'
e-
getMessage
}
template
carnet.html
{
extends
``
BaseTemplate.html
}
{
block
title
}
Personnes
Carnet
{
endblock
}
{
block
head
}
{
{
parent
}
}
style
type=
text/css
.important
{
color
#
336699
}
/style
{
endblock
}
{
block
content
}
p
align=
center
class=
Style1
{
{
titre
}
}
/p
table
border=
2
align=
center
cellspacing=
0
cellpadding=
2
tr
bgcolor=
#
CA9999
td
width=
50
strong
numero
/strong
/td
td
width=
50
strong
Nom
/strong
/td
td
width=
50
strong
Prenom
/strong
/td
td
width=
30
strong
Age
/strong
/td
suite
page
suivante
3.28
Templates
Twig
PHP
79
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
td
width=
50
strong
Ville
/strong
/td
/tr
{
set
i=0
}
{
for
ami
in
amis
}
{
set
i=i+1
}
{
if
i
is
odd
}
tr
bgcolor=
#
F0F0F0
{
else
}
tr
bgcolor=
#
A6A6A6
{
endif
}
td
{
{
ami.ID
}
}
/td
td
{
{
ami.NOM
}
}
/td
td
{
{
ami.PRENOM
}
}
/td
td
{
{
ami.NAISSANCE
}
}
/td
td
{
{
ami.VILLE
}
}
/td
/tr
{
endfor
}
/table
{
endblock
}
template
peu
maladroit
montre
expressivité
langage
template
Twig
boucles
conditionnelles
calculs
variables
etc
pouvons
bien
sûr
proposer
plus
simple
CSS
adéquat
3.28.4
Affichage
Personnes
template
plus
simple
carnet2.html
{
extends
``
BaseTemplate.html
}
{
block
title
}
Personnes
Carnet
{
endblock
}
{
block
head
}
{
{
parent
}
}
link
rel=
stylesheet
href=
static/css/tabstyle.css
/
{
endblock
}
{
block
content
}
h2
{
{
titre
}
}
/h2
table
id=
jolie
class=
centre
tr
td
numero
/td
td
Nom
/td
td
Prenom
/td
td
Age
/td
td
Ville
/td
/tr
suite
page
suivante
80
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
{
for
ami
in
amis
}
tr
td
{
{
ami.ID
}
}
/td
td
{
{
ami.NOM
}
}
/td
td
{
{
ami.PRENOM
}
}
/td
td
{
{
ami.NAISSANCE
}
}
/td
td
{
{
ami.VILLE
}
}
/td
/tr
{
endfor
}
/table
{
endblock
}
style
va
bien
tableaux
pouvons
ainsi
compléter
développement
MVC
effectué
précédemment
utilisant
templates
Twig
Voir
github/roza/php-basic-mvc
https
//github.com/roza/php-basic-mvc/
code
plus
complet
système
routage
employé
encore
très
rudimentaire
allons
plutôt
utliser
outils
framework
Web
référence
Symfony
4
aller
plus
loin
3.29
Composer
Symfony
4
Flex
allons
présent
familiariser
outils
composants
Framework
réfé-
rence
Symfony
4
très
modulaire
permet
installer
composants
très
riches
comme
SwiftMailer
envoyer
mails
FOSUserBundle
gérer
utilisateurs
FOSREST-Bundle
APIPlatform
réaliser
rapidement
API
complète
Framework
Symfony
4
basé
Micro-noyau
Micro-Kernel
70
plus
léger
noyau
Symfony
3
introduction
générale
framework
trouve
ici
https
//symfony.com/4
gestion
dépendances
fait
présent
grâce
outil
Symfony
Flex
permet
établir
recettes
recipes
décrivant
dépendances
configuration
projet
outil
base
composer
Indication
Composer
permet
installer
centaines
packages
librement
disponibles
trouve
Packagist
https
//packagist.org/
permet
gérer
dépendances
projet
également
créer
squellette
application
Symfony
4
3.29.1
composer
Installons
abord
outil
composer
servira
beaucoup
tâches
courantes
projet
PHP
va
abord
créer
répertoire
bin
racine
HOME
placez-y
exécutable
composer.phar
renommez
composer
3.29
Composer
Symfony
4
Flex
81
Cours
PHP
Accéléré
Version
0.9.1
cd
mkdir
bin
cd
bin
curl
-s
https
//getcomposer.org/installer
|
php
mv
composer.phar
composer
Vérifiez
définition
variables
environnement
http_proxy
https_proxy
.bashrc
Ajoutez
également
ligne
suivante
.bashrc
export
PATH=
PATH
~/bin
manière
tous
programmes
installés
répertoire
bin
HOME
accessibles
importe
veux
juste
installer
composant
simple
comme
HTTP
Foundation
place
racine
dossier
travail
fichier
*
composer.json
suivant
{
require
{
symfony/http-foundation
``
~4.0
}
}
Ceci
indique
installons
instant
seul
composant
demandons
dernière
version
stable
branche
4
http-foundation
Puis
utilisons
composer
installer
composants
demandés
composer
update
-o
Notez
utilisation
option
-o
optimize-autoloader
optimise
mieux
chargement
automatique
classes
3.29.2
HttpFoundation
2
principaux
composants
HttpFoundation
savoir
Request
Response
alors
prêts
emploi
Remarquez
usage
espaces
nommages
PHP
semblables
ceux
C++
import
packages
java
éviter
conflits
nommages
entre
différents
vendor
dire
différentes
entités
fournissant
code
projet
php
//
chargement
autoloader
require_once
__DIR__
'vendor/autoload.php
'
use
Symfony\Component\HttpFoundation\Request
use
Symfony\Component\HttpFoundation\Response
//
Actual
request
//
request
=
Request
:createFromGlobals
suite
page
suivante
82
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
//
fake
request
request
=
Request
:create
'/essai.php
name=Zozo
'
//
URI
demandee
sans
parametres
path=
request-
getPathInfo
//
recup
GET
variables
nom=
request-
query-
get
'name
'
'World
'
prenom=
request-
query-
get
'surname
'
'Joe
'
echo
``
Bonjour
surname
name
br/
peut
aussi
récupérer
autres
informations
Client
fabriquer
réponse
php
//
recup
variables
SERVER
host=
request-
server-
get
'HTTP_HOST
'
//
get
COOKIES
request-
cookies-
get
'PHPSESSID
'
//
HTTP
headers
headers=
request-
headers-
get
'host
'
content_type=
request-
headers-
get
'content_type
'
method=
request-
getMethod
//GET
POST
PUT
DELETE
HEAD
langs=
request-
getLanguages
IP
==
request-
getClientIp
response
=
new
Response
IP
``
host
``
path
``
headers
``
content_type
``
method
``
nom
``
langs
0
response-
send
3.29.3
Squellette
application
Symfony
4
Créons
répertoire
travail
mvc-sf4
dossier
Web
exemple
~/www
~/pu-blic_html
utilise
user_dir
Apache
importe
utilise
serveur
Web
embar-qué
PHP
créons
trame
application
symfony4
aide
composer
composer
create-project
symfony/skeleton
hello-sf4
Veillez
bien
avoir
version
jour
composer
besoin
composer
self-update
structure
projet
ainsi
créé
suivante
3.29
Composer
Symfony
4
Flex
83
Cours
PHP
Accéléré
Version
0.9.1
hello-sf4/
bin
console
composer.json
composer.lock
config
bundles.php
packages
routes.yaml
services.yaml
public
index.php
src
Controller
Kernel.php
symfony.lock
var
cache
log
vendor
autoload.php
composer
psr
symfony
répertoire
bin
contient
outil
console
permet
effectuer
tâches
routine
créer
gérer
projet
répertoire
config
contient
fichiers
configuration
répertoire
public
contient
fichier
index
application
dossie
src
controleurs
Kernel
aussi
entités
etc
dossier
var
contient
cache
logs
dossier
vendor
classes
Bundles
installés
comme
http-foundation
pouvez
consulter
fichier
symfony.lock
trouve
racine
dossier
hello-sf4
voir
liste
dépendances
installées
{
psr/cache
{
version
``
1.0.1
}
psr/container
{
version
``
1.0.0
}
psr/log
{
version
``
1.0.2
}
psr/simple-cache
{
version
``
1.0.1
}
symfony/cache
{
version
``
v4.1.0
}
suite
page
suivante
84
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
symfony/config
{
version
``
v4.1.0
}
symfony/console
{
version
``
3.3
recipe
{
repo
``
github.com/symfony/recipes
branch
``
master
version
``
3.3
ref
``
e3868d2f4a5104f19f844fe551099a00c6562527
}
}
symfony/debug
{
version
``
v4.1.0
}
symfony/dependency-injection
{
version
``
v4.1.0
}
symfony/dotenv
{
version
``
v4.1.0
}
symfony/event-dispatcher
{
version
``
v4.1.0
}
symfony/filesystem
{
version
``
v4.1.0
}
symfony/finder
{
version
``
v4.1.0
}
symfony/flex
{
version
``
1.0
recipe
{
repo
``
github.com/symfony/recipes
branch
``
master
version
``
1.0
ref
``
cc1afd81841db36fbef982fe56b48ade6716fac4
}
}
symfony/framework-bundle
{
version
``
3.3
recipe
{
repo
``
github.com/symfony/recipes
branch
``
master
version
``
3.3
ref
``
c0c0bf94174609d740ca2a61e0201949c5683d50
}
}
symfony/http-foundation
{
suite
page
suivante
3.29
Composer
Symfony
4
Flex
85
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
version
``
v4.1.0
}
symfony/http-kernel
{
version
``
v4.1.0
}
symfony/lts
{
version
``
4-dev
}
symfony/polyfill-mbstring
{
version
``
v1.8.0
}
symfony/routing
{
version
``
4.0
recipe
{
repo
``
github.com/symfony/recipes
branch
``
master
version
``
4.0
ref
``
cda8b550123383d25827705d05a42acf6819fe4e
}
}
symfony/yaml
{
version
``
v4.1.0
}
}
3.29.4
Application
simple
Symfony
4
Complétons
présent
application
Symfony
4
3.30
Tester
application
PHP
-
TDD
allons
présent
attaquer
problématique
fondamentale
toute
application
Web
mobile
autres
tests
3.30.1
TDD
TDD
veut
dire
Test
Driven
Development
dire
Développement
dirigé
tests
démarche
mise
avant
Méthodologie
Agile
consiste
général
application
points
suivants
—
écrire
test
—
vérifier
échoue
car
code
teste
existe
—
écrire
juste
code
suffisant
passer
test
—
vérifier
test
passe
86
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
—
procéder
refactoring
code
est-à-dire
améliorer
gardant
mêmes
fonctionnalités
3.30.2
Intérêt
démarche
avantages
principaux
démarche
—
Préciser
mieux
spécifications
code
API
envisagée
—
Ceci
oblige
faire
choix
conception
restent
parfois
trop
flou
début
développement
—
Plus
tard
disposer
large
base
tests
riche
application
car
permet
vérifier
tout
moment
tests
installés
mis
défaut
nouveaux
développements
refactoring
code
Tous
langages
programmation
disposent
Frameworks
tests
exemple
Java
offre
JUnit
PHP
quand
propose
PHPUnit
peut
installer
via
composer
{
require
{
phpunit/phpunit
``
6.3
*
}
autoload
{
psr-0
{
Exemple
``
src
}
}
}
composer.phar
install
Ecrivons
présent
premier
test
dossier
Tests
php
use
Exemple\FileLoader
class
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
{
f
=
new
FileLoader
}
}
tester
Placer
fichier
phpunit.xml
racine
projet
contenant
xml
version=
1.0
encoding=
UTF-8
suite
page
suivante
3.30
Tester
application
PHP
-
TDD
87
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
PHPUnit
Configuration
=====================
Fichier
configuration
standard
phpunit
phpunit
backupGlobals=
false
backupStaticAttributes=
false
colors=
true
bootstrap=
vendor/autoload.php
convertErrorsToExceptions=
true
convertNoticesToExceptions=
true
convertWarningsToExceptions=
true
processIsolation=
false
stopOnFailure=
false
syntaxCheck=
false
testsuites
testsuite
directory
tests
/directory
/testsuite
/testsuites
/phpunit
prêts
lancer
premier
test
phpunit
Ecrivons
maintenant
peu
code
permettre
passer
premier
test
allons
compléter
test
vérification
fichier
situé
textit
{
fixtures
}
test
bien
chargé
php
class
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
{
f
=
new
FileLoader
}
/
*
*
*
voulons
récupérer
contenu
d'un
fichier
via
*
méthode
get
*
/
public
function
testFileLoaderCanLoadFileContent
{
f
=
new
FileLoader
r
=
f-
get
__DIR__
'/fixtures/simple.md
'
this-
assertEquals
``
Foo\n
r
}
}
88
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Puis
besoin
Mock
Objects
installerons
librairie
mockery
composer
require
dev
mockery/mockery
3.31
Mettre
place
Web
Service
REST
3.31.1
Problème
architecture
REST
classique
serveur
présente
données
table
Client
riche
RIA
JavaScript
client
Mobile
permet
récupérer
afficher
REST
signifie
Representational
State
Transfer
architecture
permet
réaliser
applications
type
onepage
reportant
client
bonne
partie
logique
métier
offrant
point
entrée
clients
lire
données
serveur
envoyer
données
pourront
être
envoyées
XML
plus
plus
aujourd
hui
JSON
JavaScript
Object
Notation
dire
objets
directement
utilisables
JS
pose
définitions
suivantes
—
RIA
=
Rich
Internet
Application
—
REST
=
Representational
State
Transform
—
Logique
métier
déportée
vers
client
—
Tâche
principale
serveur
Offrir
services
récupération
stockage
données
flux
news
pourra
ainsi
offrir
exemple
ressource
type
/api/v1/news/314159
permettra
clients
récupérer
news
numéro
314159
JSON
XML
employant
méthode
HTTP
GET
version
1
API
exemple
news
ici
ressource
élément
manipulée
API
version
1
méthode
GET
employée
récupérer
éléments
individuellement
Collections
méthode
POST
quand
employée
envoyer
vers
serveur
plusieurs
élé-
ments
autres
méthodes
HTTP
créer
modifier
complètement
PUT
partiellement
PATCH
éléments
effacer
DELETE
souvent
également
disponibles
API
technologies
concurrentes
REST
XML-RPC
SOAP
Microsoft
REST
façon
moderne
concevoir
genre
service
possède
avantages
suivants
—
Bonne
montée
charge
serveur
—
Simplicité
serveurs
retour
sources
protocole
HTTP
—
Equilibrage
charge
—
serveur
offre
API
—
services
représentés
URL
simplicité
bonne
gestion
cache
—
Possibilité
décomposer
services
complexes
multiples
services
plus
simples
communiquent
entre
principes
REST
théorisés
Roy
Fielding
thèse
http
//www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
1
Séparation
claire
entre
Client
Serveur
3.31
Mettre
place
Web
Service
REST
89
Cours
PHP
Accéléré
Version
0.9.1
2
client
contient
logique
métier
serveur
sans
Etat
3
réponses
serveur
peuvent
non
être
mises
cache
4
interface
doit
être
simple
bien
définie
standardisée
5
système
peut
avoir
plusieurs
couches
comme
proxys
systèmes
cache
etc
6
Eventuellement
clients
peuvent
télecharger
code
serveur
exécutera
contexte
client
mémoire
API
REST
peut
offrir
méthodes
suivantes
Méthodes
HTTP
REST
Méthode
Rôle
Code
retour
HTTP
GET
URL
Récupération
Element
200
GET
URL
Récupération
Collection
201
POST
URL
Envoi
Elements
201
DELETE
URL
Effacer
Element
200
PUT
URL
Modifier
Element
200
PATCH
URL
Modif
partielle
Elt
200
peut
aussi
avoir
erreurs
comme
Code
Erreur
Description
Signification
400
Bad
Request
requête
mal
formée
404
Not
Found
Resource
demandée
inexistante
401
Unauthorized
Authentification
necessaire
accéder
resource
405
Method
Not
Allowed
Méthode
interdite
resource
409
Conflict
exemple
PUT
crée
ressource
2
fois
500
Internal
Server
Error
Autres
erreurs
serveur
ailleurs
serveur
REST
maintient
état
requêtes
indépendantes
unes
autres
retour
fondamentaux
protocole
HTTP
doté
beaucoup
capacités
mémorisation
logique
ergonomie
application
gérées
côté
client
méthode
aujourd
hui
plebiscitée
faire
dialoguer
clients
mobiles
Web
serveurs
3.32
Exemple
service
REST
PHP
3.32.1
Problème
allons
réaliser
PHP
implémentation
service
REST
exposera
données
table
contact
appellée
CARNET
utilisée
autres
exemples
90
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
contact
ainsi
ainsi
accessible
route
type
/api/v1/contact/12
permettra
clients
récupérer
contact
JSON
employant
méthode
HTTP
GET
version
1
API
exemple
contact
constitue
ressource
manipulée
API
méthode
GET
employée
récupérer
éléments
individuellement
Collections
Méthode
Action
réalisée
URI
GET
Récup
tous
liens
/api/v1/
GET
Récuperation
Element
/api/v1/contact/
{
id
}
GET
Récupération
Collection
/api/v1/contact
POST
Creation
Elements
/api/v1/contact
DELETE
Effacer
Element
/api/v1/contact/
{
id
}
PUT
Modifier
Element
/api/v1/contact/
{
id
}
PATCH
Modif
partielle
Elt
/api/v1/contact/
{
id
}
route
/api/v1/
GET
renverra
liste
URLs
contacts
plutôt
liste
tous
contacts
tous
leurs
détails
Ceci
permet
avoir
serveur
REST
auto-documenté
récupération
première
URL
permet
suivant
obtenir
liste
ressources
présentes
service
leurs
URLs
respectives
pourra
également
paginer
réponses
manipuler
trop
données
simultané-
ment
assurer
routage
simplement
allons
continuer
Silex
http
//silex.sensiolabs.org/
pouvons
modifier
fichier
index.php
déjà
mis
place
comme
suit
php
require_once
__DIR__
'/vendor/autoload.php
'
require_once
'modele.php
'
app
=
new
Silex\Application
app
'debug
'
=true
app-
get
'/contact
'
function
{
content
=
'
ul
'
amis=get_all_friends
foreach
amis
ami
{
content.=
'
li
'.
ami
'NOM
'
'
/li
'
}
content.=
'
/ul
'
return
content
}
app-
get
'/api/
'
function
{
amis=get_all_friends_links
return
json_encode
amis
}
app-
get
'/api/contact
'
function
{
suite
page
suivante
3.32
Exemple
service
REST
PHP
91
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
amis=get_all_friends
return
json_encode
amis
}
nouvelle
méthode
modele.php
php
function
get_all_friends_links
{
connexion=connect_db
amis=Array
sql=
SELECT
*
from
CARNET
data=
connexion-
query
sql
while
pers=
data-
fetch
PDO
:FETCH_ASSOC
{
res=Array
res
'NOM
'
=
pers
'NOM
'
res
'URL
'
=
_SERVER
``
REQUEST_SCHEME
'
//
'
_SERVER
'HTTP_HOST
'
_SERVER
'CONTEXT_PREFIX
'
'/silex/api/contact/'.
pers
'ID
'
amis
=
res
}
return
amis
}
Indication
vue
base
API
renvoie
maintenant
liste
liens
contacts
quelqu
connecte
pourra
décrouvrir
autres
URLs
gérées
API
bonne
API
REST
doit
être
autodocumentée
mesure
possible
Puis
assurons
GET
URI
/api/contact/id
ajoutant
index.php
php
app-
get
'/api/contact/
{
id
}
'
function
id
use
app
{
ami
=
get_friend_by_id
id
if
ami
app-
abort
404
``
Contact
inexistant
else
return
json_encode
ami
JSON_PRETTY_PRINT
}
marchera
ajoute
nouvelle
méthode
get_friend_by_id
modèle
php
function
get_friend_by_id
id
{
suite
page
suivante
92
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
connexion=connect_db
sql=
SELECT
*
from
CARNET
where
ID=
id
stmt=
connexion-
prepare
sql
stmt-
bindParam
'
id
'
id
PDO
:PARAM_INT
stmt-
execute
return
stmt-
fetch
PDO
:FETCH_OBJ
}
Continuons
méthode
http
DELETE
route
ajoutant
index.php
php
app-
delete
'/api/contact/
{
id
}
'
function
id
use
app
{
ami
=
get_friend_by_id
id
if
ami
app-
abort
404
``
Contact
inexistant
else
{
delete_friend_by_id
id
return
json_encode
ami
JSON_PRETTY_PRINT
}
}
ajoutant
modèle
php
function
delete_friend_by_id
id
{
connexion=connect_db
sql=
Delete
from
CARNET
where
ID=
id
stmt=
connexion-
prepare
sql
stmt-
bindParam
'
id
'
id
PDO
:PARAM_INT
stmt-
execute
return
stmt-
fetch
PDO
:FETCH_OBJ
}
Enfin
POST
doit
permettre
envoyer
nouveau
contact
peupler
table
CARNET
route
/api/contact
assurons
abord
récupération
contenu
json
sous
forme
tableau
PHP
méthode
before
Silex
php
app-
before
function
Request
request
{
if
0
===
strpos
request-
headers-
get
'Content-Type
'
˓→
'application/json
'
{
data
=
json_decode
request-
getContent
true
request-
request-
replace
is_array
data
data
˓→
array
suite
page
suivante
3.32
Exemple
service
REST
PHP
93
Cours
PHP
Accéléré
Version
0.9.1
suite
page
précédente
}
}
Puis
méthode
post
proprement
dite
php
app-
post
'/api/contact
'
function
Request
request
use
˓→
app
{
data
=
request-
request-
all
add_friends
data
return
new
Response
json_encode
data
200
array
'Content-
˓→Type'
=
'application/json
'
}
oubliez
faire
appel
objets
Request
Response
début
fichier
index.php
php
use
Symfony\Component\HttpFoundation\Request
use
Symfony\Component\HttpFoundation\Response
reste
plus
ajouter
modèle
php
function
add_friends
data
{
connexion=connect_db
sql=
INSERT
INTO
CARNET
NOM
PRENOM
NAISSANCE
VILLE
values
˓→
stmt=
connexion-
prepare
sql
return
stmt-
execute
array
data
'NOM
'
data
'PRENOM
'
˓→
data
'NAISSANCE
'
data
'VILLE
'
}
plus
implémenter
PUT
surtout
Tester
3.33
Tester
API
REST
navigateur
curl
tester
API
pouvons
premier
temps
utiliser
extension
Postman
Chrome
extension
RESTClient
Firefox
94
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
Avertissement
Attention
bien
désactiver
proxys
navigateurs
voulez
utiliser
extensions
chrome
peut
lancer
ligne
commande
option
–no-proxy-server
veut
solution
ligne
commande
curl
permet
manipuler
différentes
mé-
thodes
HTTP
syntaxe
idéale
peut
tester
toutes
méthodes
HTTP
Avertissement
déclaré
variables
environnement
http_proxy
https_proxy
vaut
mieux
désactiver
curl
essaie
passer
proxy
problématique
certaines
requêtes
curl
unset
http_proxy
unset
https_proxy
3.33.1
tester
GET
curl
-i
http
//localhost/silex/api/v1/contact/2
utilise
module
user_dir
Apache
curl
-i
http
//localhost/~login/silex/api/v1/contact/2
Avertissement
Attention
cas
utilise
user_dir
réglages
utiliser
toutes
methodes
protocole
HTTP/1.1
peuvent
avérer
délicats
Notamment
fichier
/etc/apache2/mods-available/userdir.conf
doit
être
modifié
comme
suit
user_dir
www
syntaxe
Apache
2.2
IfModule
mod_userdir.c
UserDir
www
UserDir
disabled
root
Directory
/home/
*
/www
AllowOverride
All
Options
MultiViews
Indexes
SymLinksIfOwnerMatch
Limit
GET
POST
PUT
DELETE
OPTIONS
Require
all
granted
/Limit
LimitExcept
GET
POST
PUT
DELETE
OPTIONS
Require
all
denied
/LimitExcept
/Directory
/IfModule
3.33
Tester
API
REST
navigateur
curl
95
Cours
PHP
Accéléré
Version
0.9.1
faut
aussi
dossier
sous
voter
user_dir
exemple
~/www/silex
avoir
.htaccess
suivant
Limit
GET
POST
DELETE
PUT
OPTIONS
allow
from
all
/Limit
FallbackResource
/~roza/silex/index.php
RewriteBase
/~roza/silex
tous
cas
préciser
besoin
php.ini
fichier
équivalent
always_populate_raw_post_data
=
-1
3.33.2
tester
POST
curl
-i
-H
``
Content-Type
application/json
-X
POST
-d
'
{
``
NOM
Dalton
``
PRENOM
joe
``
NAISSANCE
2000-08-15
˓→
VILLE
Orleans
}
'
http
//localhost/silex/api/contact
3.33.3
Test
PUT
curl
-i
-H
``
Content-Type
application/json
-X
PUT
-d
'
{
``
done
true
}
˓→'
http
//localhost/silex/api/contact/5
3.33.4
Test
DELETE
curl
-i
-H
``
Content-Type
application/json
-X
``
DELETE
http
//localhost/silex/api/contact/7
3.34
Tester
API
3.34.1
Tester
API
Postman
moyen
plus
simple
tester
API
installe
téléchargeant
App
Postman
https
//www.getpostman.com/apps
OS
peut
alors
constituer
collections
requêtes
HTTP
tester
API
REST
spécifique
96
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.34.2
Tester
API
REST
Guzzle
tests
API
REST
curl
peu
lisibles
préférez
disposer
batterie
tests
PHP
pouvez
utiliser
librairie
spécialisée
comme
Guzzle
peut
installer
dernière
composer
composer
require
guzzlehttp/guzzle
3.35
Feuilles
TD
Lic
Pro
Web
Mobile
3.35.1
Année
2018-2019
—
TD1
—
TD2
—
TD3
3.36
Feuilles
TD
2ème
Année
IUT
informatique
3.36.1
Année
2018-2019
—
TD1
—
TP1
—
TD2
—
TP2
—
TP3
—
TD3
—
Git
init
3.37
Feuilles
TD
Lic
Pro
Web
Mobile
3.37.1
Année
2017-2018
—
TD1
—
TD2
—
TD3
—
TD4
—
TD5
—
TD6
—
TD7
3.35
Feuilles
TD
Lic
Pro
Web
Mobile
97
Cours
PHP
Accéléré
Version
0.9.1
3.38
Feuilles
TD
CVRH
Tours
3.38.1
Formation
Juin
2015
—
TD1
—
TD2
—
TD3
3.39
Alice
démarre
git
3.39.1
Paramétrage
initialisations
configure
abord
paramètres
git
config
global
user.name
``
Alice
Torvalds
git
config
global
user.email
``
alice
kernel.org
3.39.2
Création
dossier
local
versionné
mkdir
monprojet
cd
monprojet
git
init
déja
contenu
git
add
3.39.3
Création
dépot
monprojet
gitlab
—
Privé
—
Public
—
Interne
gitlab
Bitbucket
https
//bitbucket.org/
offre
également
possibilité
avoir
dépôts
privés
taille
limitée
Github
https
//github.com/
offre
dépôts
public
fait
payer
dépôts
privés
3.39.4
Connexion
entre
local
gitlab
Eventuellement
git
config
push.default
simple
98
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
git
remote
add
origin
https
//gitlab.com/alice/monprojet.git
git
push
-u
origin
master
simplement
git
push
suite
3.39.5
Réalisation
fonctionnalité
Alice
—
Alice
prend
chose
réaliser
implémente
code
nécessaire
—
Alice
fait
tests
vérifie
ça
marche
—
git
commit
-am
Message
commit
3.39.6
Alice
pousse
master
remote
git
push
-u
origin
master
3.40
Bob
travaille
Alice
grâce
git
Bob
fait
abord
comme
Alice
paramétrer
initialiser
dépôt
local
3.40.1
Bob
vérifie
bien
2
remotes
—
sien
origin
crée
besoin
faisant
git
remote
add
origin
https
//gitlab.com/bob/monprojet.git
—
celui
Alice
ajoute
git
remote
add
alice
https
//gitlab.com/alice/monprojet.git
—
tape
git
remote
-v
vérifier
remotes
—
trompe
git
remote
remove
alice
3.40.2
Bob
récupère
master
Alice
git
fetch
Alice
master
3.40
Bob
travaille
Alice
grâce
git
99
Cours
PHP
Accéléré
Version
0.9.1
3.40.3
Bob
consulte
branche
locale
correspondant
master
Alice
git
branch
-av
git
checkout
Alice/master
puis
vérifie
code
Alice
correct
3.40.4
Bob
revient
master
git
checkout
master
3.40.5
Bob
merge
travail
Alice
pousse
modifs
dépôt
distant
git
merge
Alice/master
git
push
Puis
detruit
branche
locale
Alice
git
branch
-d
Alice/master
3.41
Alice
met
jour
—
ajoute
remote
Bob
—
fetche
master
Bob
mettre
jour
git
fetch
Bob
master
—
Fusionne
git
merge
Bob/master
3.42
Alice
travaille
branche
git
Alice
doit
exemple
intégrer
feature
connexion
base
données
va
cela
créer
branche
bd
dédiée
réalisation
feature
placer
dedans
100
Chapitre
3
Tables
matières
Cours
PHP
Accéléré
Version
0.9.1
3.42.1
Création
choix
branche
git
checkout
-b
bd
fait
ensuite
travail
teste
puis
git
commit
-am
``
Intégration
BD
3.42.2
Alice
pousse
branche
remote
git
push
origin
bd
3.43
Bob
branche
Alice
3.43.1
Bob
récupère
branche
Alice
git
fetch
Alice
bd
3.43.2
Bob
consulte
branche
Alice
souhaite
Bob
consulte
liste
branches
disponibles
puis
place
branche
Alice
faire
petite
revue
code
collaboratrice
git
branch
-av
git
checkout
Alice/bd
3.43.3
Bob
revient
branche
master
git
checkout
master
3.43.4
Bob
merge
branche
Alice
pousse
modifs
git
merge
Alice/bd
git
push
3.43
Bob
branche
Alice
101
Cours
PHP
Accéléré
Version
0.9.1
3.44
Alice
récupère
dernière
version
master
3.44.1
Alice
fetche
master
Bob
mettre
jour
git
fetch
Bob
master
git
merge
Bob/master
3.44.2
Alice
efface
branche
bd
git
branch
-d
bd
102
Chapitre
3
Tables
matières
CHAPITRE
4
GIT
Tout
bon
développeur
doit
aujourd
hui
savoir
utiliser
système
gestion
version
code
collaborer
Git
aujourd
hui
plus
répandu
trouverez
fin
cours
rappel
principales
commandes
git
démarrer
GIT
start
quelques
commandes
travailler
plusieurs
projet
branches
git
GIT
branches
103
Cours
PHP
Accéléré
Version
0.9.1
104
Chapitre
4
GIT
CHAPITRE
5
Références
—
Manuel
PHP
http
//php.net/manual/fr/
—
intro
JS
https
//www.univ-orleans.fr/iut-orleans/informatique/intra/tuto/js-
initiation/slides1.html
#
/le-langage-javascript
—
compléments
JS
https
//www.univ-orleans.fr/iut-orleans/informatique/intra/tuto/js-initiation/slides2.html
#
/versions-de-javascript
105
Cours
PHP
Accéléré
Version
0.9.1
106
Chapitre
5
Références
CHAPITRE
6
Index
recherche
—
genindex
—
search
107
Cours
PHP
Accéléré
Version
0.9.1
108
Chapitre
6
Index
recherche
Index
Symbols
csrf
59
==
30
CURL
90
94
===
30
cvrh
97
_GET
23
34
_GLOBALS
24
34
_POST
23
34
DataBase
41
_SERVER
34
DB
41
2017-2018
97
define
24
2018-2019
97
DELETE
89
90
94
96
2eme
Année
97
directives
9
dirname
35
Numbers
DOM
62
2015
97
E
2018
97
echo
20
Ensembles
39
array_walk
31
equals
36
associatif
31
ereg
26
autoload
81
eregi
26
autoloader
81
eval
30
B
F
Bases
41
Filtrage
53
BD
41
54
filtrage
52
57
bundles
81
foreach
31
formulaire
23
G
caché
59
chaine
26
génération
5
clefs
31
GET
89
90
94
96
Collections
39
gettype
29
composer
81
GUMP
57
concaténation
26
GUZZLE
96
constructeur
36
H
controleur
69
Cookies
59
hidden
59
109
Cours
PHP
Accéléré
Version
0.9.1
HTTP
23
89
90
94
96
PHPUnit
86
Http
59
Piles
39
HttpFoundation
81
portée
24
POST
89
90
94
96
I
PreparedStatement
50
imbrication
22
print
20
include
35
print_r
31
include_once
35
PUT
89
90
94
96
injection
SQL
52
Q
installation
8
9
interpréteur
5
Queue
39
is_array
29
R
is_double
29
is_int
29
recherche
50
is_long
29
request
81
is_string
29
require
35
IUT
97
require_once
35
response
81
REST
89
90
94
96
Lamp
8
route
81
Lerdorf
6
routes
81
licence
professionnelle
97
sécurité
52
53
méthodes
36
SAX
62
magic
quotes
53
sessions
59
Mamp
8
Set
39
modele
69
settype
29
mvc
69
75
81
SimpleXML
62
MySQL
41
sort
31
SQL
54
Stack
39
Namespace
39
string
26
stristr
26
O
strlen
26
Objets
36
strstr
26
OPTIONS
89
suppression
50
Orleans
97
symfony
81
P
Pair
39
tableau
31
34
PATCH
89
td
97
PDO
41
50
52
TDD
86
persistante
54
template
69
75
PHP
5
6
57
97
test
86
php.ini
9
TESTS
90
94
96
PHP5
36
tests
86
PHP7
6
time
36
phpinfo
20
timestamp
36
110
Index
Cours
PHP
Accéléré
Version
0.9.1
toString
36
Tours
97
transactions
54
twig
75
type
29
U
URL
59
user-agent
20
useragent
26
V
valeurs
31
validation
53
57
variables
20
24
variables
PHP
30
vue
69
75
W
Wamp
8
Web
97
X
Xampp
8
XML
62
XMLReader
62
XMLWriter
62
Z
Zend
6
Index
111
Document
Outline
cours
format
epub
cours
format
pdf
Tables
matières
Caractéristiques
Principales
Fonctionnement
Historique
Installation
PHP
Configuration
PHP
Exemples
simples
Imbrication
code
HTML
PHP
formulaire
HTML
réponse
PHP
variables
PHP
chaînes
PHP
typage
PHP
Quelques
particularités
PHP
tableaux
PHP
tableaux
prédéfinis
PHP
inclusion
fichiers
externes
Objets
PHP
collections
PHP
Connexion
bases
données
depuis
PHP
Requêtes
préparées
PHP
Compléments
PDO
-
Sécurité
Filtrage
PHP
Gestion
transactions
PDO
Connexion
persistante
PDO
Validation
contrôle
entrées
GUMP
Http
conservation
informations
clients
Manipuler
XML
PHP
Architecture
type
MVC
PHP
Templates
Twig
PHP
Composer
Symfony
4
Flex
Tester
application
PHP
-
TDD
Mettre
place
Web
Service
REST
Exemple
service
REST
PHP
Tester
API
REST
navigateur
curl
Tester
API
Feuilles
TD
Lic
Pro
Web
Mobile
Feuilles
TD
2ème
Année
IUT
informatique
Feuilles
TD
Lic
Pro
Web
Mobile
Feuilles
TD
CVRH
Tours
Alice
démarre
git
Bob
travaille
Alice
grâce
git
Alice
met
jour
Alice
travaille
branche
git
Bob
branche
Alice
Alice
récupère
dernière
version
master
GIT
Références
Index
recherche
Index
