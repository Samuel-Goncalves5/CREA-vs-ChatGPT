PHP
MYSQL
Introduction

HTML
pages
destinées
être
publiées
Internet
Texte
afficher
+
instructions
mise
page

instructions
calcul
traitements
conditionnels


sites
plus
plus
riches
informations
Nécessité
croissante
améliorer
contenu
sites

Mises
jour
manuelles
trop
complexes




Exemple
modifier
l'entête
plusieurs
pages
Besoin
réponses
spécifiques
liées
BD
exemple
Passage
sites
statiques
sites
dynamiques
Web
dynamique
–
coté
client

Traité
navigateur

Résultats
variables
fonction
navigateur

Nécessité
tests
importants

Indépendant


serveur
rechargement
page
tout
fait
local
Confiance

Sources
programme
disponibles

Données
envoyées
serveur
fiables

Base
données
stockée
chez
client
Web
dynamique
–
coté
serveur

L'interprétation
réalisée
serveur

Indépendant
machine
navigateur

``
Compatible
tous
navigateurs



échanges
concernent
HTML
Json
autre
sources
serveur
invisibles
Besoin
d'échanges
entre
navigateur
serveur

Rechargement

Ajax…
page
chaque
modification
Web
dynamique
–
client
serveur

faut
deux

Script
côté
client
Javascript
Calculs
traitement
simples

Mises
jour
page
web
sans
rechargement
ajax


Script
côté
serveur
Php
autre
Calculs
traitements
plus
conséquents

Requêtes
vers
base
données

Opérations
sécurisées

langage
Php
-
histoire



PHP
Hypertext
PreProcessor
première
version
PHP
Personal
Home
Pages
sort
1995
version
5.0
actuelle
sortie
2004


version
4.0
n'est
plus
maintenue
depuis
août
2008
Environ
75
sites
web
dynamiques
utilisent
php
langage
Php


Langage
création
applications
Web
Exécution
coté
serveur

Indépendant
plate-forme
utilisée

Facile
combiner
serveur
Web
BD

Logiciels



tout
WampServer
EasyPhp
…
Gratuit
code
source
disponible
Ecriture
scripts
simples
Inclusion
directe
Php
HTML
langage
Php

Programme
s'exécutant
côté
serveur
Web

Extension
.php
pages
PHP

Fichiers
pouvant
aussi
contenir
HTML

fichiers
.php
stockés
serveur

Désignés
URL
http
//www.lip6.fr/page.php

chargement
l'URL
provoque
l'exécution
côté
serveur

script
Php
va
généralement
créer
HTML
Exemple

veut
créer
page
web
ci-dessous

nombre
quelconque
valeurs
venant
d'un
formulaire
exemple
html
body
1
1
br
/
2
4
br
/
3
9
br
/
/body
/html
Version
Javascript

Insertion
javascript
balise
script
Boucle
for
classique

Affichage
contenu
via
document.write

Concaténation
chaînes
signe
+


Exécuté
navigateur
html
body
script
type=
text/javascript
for
var
i=1
i
=3
i++
document.write
i+
``
+i
*
i+
br
/
/script
/body
/html
Version
Php

Insertion
Php
balise
php
Boucle
for
classique

Affichage
contenu
via
echo

Concaténation
chaînes
signe


Exécuté
serveur
puis
envoyé
navigateur
html
body
php
for
i=1
i
=3
i++
echo
i
``
i
*
i
``
br
/
/body
/html
Différence
entre
Javascript
Php

Javascript
navigateur
demande
fichier
html

fichier
html
contenant
javascript
envoyé

navigateur
exécute
javascript

L'affichage
fait
manière
dynamique


Php
navigateur
demande
fichier
php

serveur
exécute
code
php
envoie
résultat

page
envoyée
navigateur
affichée

Code
Php
–
autre
version

Seules
parties
purement
dynamiques
faites
Php
Tout
reste
html
base

forcément
très
lisible

html
body
php
for
i=1
i
=3
i++
{
php
echo
i
php
echo
i
*
i
br
/
php
}
/body
/html
Code
Php
–
autre
version

Tout
fichier
html
créé
Php

Syntaxe
assez
lourde
php
echo
``
html
\n
echo
``
body
\n
for
i=1
i
=3
i++
{
echo
i
``
i
*
i
``
br
/
\n
}
echo
``
/body
\n
echo
``
/html
\n
PHP
-
SYNTAXE
VARIABLES
Variables

variable
toujours
précédée


Types


i
variable
s'appelle
i
Entiers
réels
chaînes
caractères
objets
déclaration
explicite
l'affectation
d'une
valeur
suffit


Affectation
valeur
i=0
Affectation
référence
variable
=
&
i


Changement
type
automatique


modification
i
modifie
comme
pointeurs
compteur=
premier
Valeur
défaut
avant
l'affectation

Attention
essaye
lire
contenu
Variables

Variable
locale


Visible
uniquement
intérieur
contexte
utilisation
Variable
globale


Visible
tout
script
Utilisation
instruction
``
global
accéder
variable
globale
contextes
locaux
var
=
1
function
test
{
global
var
echo
var
}
Chaînes
caractères

Création/affectation
entre
guillemets


Concaténation
signe


test=
test=
bonjour
``
revoir
Substitutions
possible
variables
l'intérieur
d'une
chaîne


x
test
x
similaire
``
x
``
test
x
substitution
apostrophes


'
x
test
x
'
//
``
x
test
x
Encodages
caractères
spéciaux
obligatoire

\
\\
\n
\t
\
…
Création
variables
dynamiques

Possibilité
créer
variable
dynamique

Création
partir
contenu
d'une
autre
variable
var=
test
var=
test2
//
similaire
test=
test2
echo
``
var
test
{
var
}
//
affiche
``
test
test2
test2
//
similaire
tableaux
nom_variable
=
array
``
val0
``
val1
{
nom_variable
0
}
=
``
x
Opérations
chaînes

Longueur
d'une
chaîne
strlen

strlen
str

Comparaison
==

x

==
Concaténation

x.

Nombreuses
fonctions
manipulation
disponibles
Fonctions
chaînes

Afficher
chaîne
caractères


Retourner
morceau
d'un
chaîne
substr
chaine
debut
longueur



debut
peut
être
négatif
partant
fin
longueur
facultatif
toute
fin
chaîne
retournée
Couper
chaîne
morceaux
délimiteur


echo
chaine
…
tableau
=
explode
delimiteur
chaine
INSTRUCTIONS
Instructions
conditionnelles

if
then
else

définition
spéciale
else
if
obligatoire
if
cond
{
}
elseif
cond
{
}
else
{
}
//
version
courte
condition
instructionSiVrai
instructionSiFaux
Instructions
conditionnelles

switch
…
{
case
…
…
}
switch
expression
{
case
``
1
break
case
``
2
break
case
``
3
break
default
}
Boucles

Boucles
for

for

initialisation
condition
increment
{
}
Boucles
while

while
condition
{
}

do
{
}
while
condition
Instructions
conditionnelles

Saut
inconditionnel


Arrêt
inconditionnel


continue
termine
l'itération
courante
boucle
break
termine
boucle
complètement
Arrêt
d'exécution
script

exit
termine
script
for
i=1
i
=10
i++
{
if
i
==
5
continue
echo
i
``
br
/
}
for
i=1
i
=10
i++
{
if
i
==
5
break
echo
i
``
br
/
}
//
affiche
valeurs
sauf
5
//
affiche
jusqu
'
5
exclu
TABLEAUX
tableaux

Création
aide
fonction
array

tableau

=
array
1
``
deux
3
Tableaux
dimension

éléments
peuvent
être
différents
types

index
tableau
commence
0

Fonction

count
avoir
nombre
éléments
tableau
Tableaux
simples

Association
numéro
-
valeur
//
Création
tableau
tableau
=
array
valeur0
valeur1
valeurN
//
Affectation
d'un
élément
tableau
indice
=
valeur
//
Récupération
d'un
élément
variable
=
tableau
indice
//
Parcours
version
1
for
i=0
i
count
tableau
i++
echo
i
``
tableau
i
``
br
/
//
Parcours
version
2
foreach
tableau
valeur
echo
valeur
``
br
/
Tableaux
associatifs

Associations
clé
d'index
-
valeur
//
Création
tableau
tableau
=
array
cle0
=
val0
cle1
=
val1
cleN
=
valN
//
Affectation
d'un
élément
tableau
``
cle
=
valeur
//
Récupération
d'un
élément
variable
=
tableau
``
cle
//
Parcours
version
1
foreach
tableau
cle
=
valeur
echo
cle
``
valeur
``
br
/
//
Parcours
version
2
reset
tableau
while
list
cle
valeur
=
each
tableau
echo
cle
``
valeur
``
br
/
Tableaux
multidimensionnels

méthode
création
native

imbrique
tableaux
//
Création
d'un
tableau
deux
dimensions
tab1
=
array
Val0
Val1
ValN
tab2
=
array
Val0
Val1
ValN
tableau
=
array
tab1
tab2
//
Affectation
d'un
élément
tableau
indice
indice
=
variable
//
Récupération
d'un
élément
variable
=
tableau
indice
indice
//
Parcours
for
i=0
i
count
tableau
i++
for
j=0
count
tableau
i
j++
echo
i
``
``
tableau
i
``
br
/
Fonctions
tableaux

Taille
d'un
tableau


Compter
nombre
d'occurrences
valeurs
d'un
tableau



tab2
=
array_map
``
fonction
tab
Filtrage
fonction
supprime
éléments
vérifiant
critère


sort
tab
//
selon
valeurs
ksort
tab
//
selon
clefs
Mappage
fonction
applique
fonction
tous
éléments


tab2
=
array_count_values
tab
Tri


count
tab2
=
array_filter
tab
``
fonction
Intervertir
clefs
valeurs

tab2
=
array_flip
tab
FONCTIONS
Fonctions

typage
Arguments

Valeur
retour


Récursivité
possible
php
//
définition
fonction
factorielle
function
factorielle
{
if
2
return
1
else
return
*
factorielle
n-1
}
//
appel
fonction
afficahage
résultat
echo
factorielle
3
Fonctions

Valeurs
défaut
possibles
arguments




Tous
arguments
peuvent
avoir
valeurs
défaut
function
racine
x
racine=2
{
}
Appel
racine
b
racine
Valeurs
défaut
uniquement
derniers
arguments

racine
x=4
degre
impossible
//
seul
argument
alors
degre
vaut
2
défaut
function
racine
x
degre=2
{
return
pow
x,1/
degre
}
racine
27,3
//
retourne
racine
cubique
27
racine
16
//
retourne
racine
carrée
16
Fonctions

Nombre
arguments
inconnu

func_num_args
nombre
arguments

func_get_arg
i
argument
i

Numérotés
partir
0
//
fonction
calculant
produit
tous
arguments
function
produit
{
prod=1
for
i=0
i
func_num_args
i++
prod
*
=
func_get_arg
i
return
prod
}
echo
produit
3
77
10
5
81
9
Fonctions

Passage
paramètres
valeur


Utilise
copie
paramètres
d'appel
Passage
paramètre
référence


Utilise
directement
paramètres
d'appel
modifiable
Passage
paramètre
&
function
double
val
{
val
*
=
2
return
val
}
x
=
10
=
double
x
//
y=20
x=10
=
double
&
x
//
y=20
x=20
Variables
globales
statiques

Static
permet
conserver
variable
fonction
v
=
2
function
test
{
global
v
//
variable
globale
static
x=0
//
variable
statique
x+=
v
echo
x
``
br
/
}
test
//
affiche
2
test
//
affiche
4
Appel
dynamique

Similaire
variables
dynamiques
function
bonjour
{
echo
``
bonjour
br
/
}
function
bonsoir
{
echo
``
bonsoir
br
/
}
//
création
d'un
variable
contenant
nom
d'une
fonction
salut
=
date
``
h
=
17
``
bonjour
bonsoir
salut
Fonctions
fonctions

Vérifie
l'existence
d'une
fonction


Retourne
liste
fonctions
définies


tableau
=
get_defined_functions
Enregistre
fonction
exécuter
fin
script


function_exists
``
fonction
register_shutdown_function
``
fonction
…
Fonctions
utiles

Header

Permet
modifier
l'entête
protocole
http

Utilisation
principale
redirection
vers
autre
page
if
isConnected
user
{
header
``
Location
accueil.php
}
else
{
header
``
Location
login.php
}
FORMULAIRES
Exploitation
formulaire





Accès
page
formulaire
Remplissage/modification
champs
Envoi
formulaire
submit
Récupération
formulaire
soumis
Traitement
formulaire
Calculs

Transformations

Accès
BD
…


Client
Envoi
réponse
client
Serveur
Récupération
paramètres

paramètres
récupérés
tableau

_POST
``
nom
méthode
envoi
POST

_GET
``
nom
méthode
envoi
GET

form
method=
POST
action=
…

Exemple

formulaire
input
name=
nom

récupère
contenu
php

_POST
``
nom

_GET
``
nom
continuer

plus
simple
comprendre

Utiliser
méthode
GET
passer
arguments

Regarder
l'URL
appelée

http
//www.test.com/test.php
champ=valeur

différents
paramètres
envoyés
valeur
visibles

Ici
_GET
``
champ
vaut
valeur

Puis

utiliser
POST
fois
qu'on
compris
Spécificités
selon
types

cases
cocher
envoyées
sous
forme
tableau
exemple
form
method=
GET
action=
test.php
input
type=
text
name=
Champ1
value=
Texte
/
br
/
textarea
name=
Champ2
cols=
30
rows=
5
Texte
/textarea
br
/
select
name=
Champ3
option
value=
Option_1
Option_1
/option
option
value=
Option_2
selected=
selected
Option_2
/option
/select
br
/
input
type=
checkbox
name=
Champ4
value=
Case_1
checked=
checked
Case
1
br
input
type=
checkbox
name=
Champ4
value=
Case_2
checked=
checked
Case
2
br
input
type=
radio
name=
Champ5
value=
Case_1
radio
1
br
input
type=
radio
name=
Champ5
value=
Case_2
radio
2
br
input
type=
radio
name=
Champ5
value=
Case_3
radio
3
br
input
type=
submit
name=
Soumission
value=
Soumettre
/form
test.php
Champ1=Texte
&
Champ2=Texte
&
Champ3=Option_2
&
Champ4
=Case_1
&
Champ4
=Case_2
&
Champ
5=Case_2
&
Soumission=Soumettre
exemple

Récupération
_GET

Vérification
l'existence
d'une
variable


isset
var
Attention
contenu
choses
reçues

Nombreuses
failles
fait
attention
//
affichage
tous
champs
reçus
via
formulaire
resultat
=
_GET
``
Champ1
``
br
resultat
.=
_GET
``
Champ2
``
br
resultat
.=
_GET
``
Champ3
``
br
for
i
=
0
i
count
_GET
``
Champ4
i++
{
resultat
.=
_GET
``
Champ4
i
``
br
}
if
isset
_GET
``
Champ5
resultat
.=
_GET
``
Champ5
``
br
echo
resultat
FONCTIONNALITÉS
SUPPLÉMENTAIRES
Date
heure

Retourner
date
courante
chaîne
caractères
chaine
=
date
format
nombre

chaine=date
``
Y/m/d
retourne
2010/03/10


Idem
tableau
associatif


tableau
=
getdate
nombre
Vérification
validité
d'une
date

checkdate
mois
jour
année
cookies

Écrire
cookies

fonction
setcookie
``
PremierCookie
``
Salut
time
+3600
*
24
*
7




timestamp
secondes
différent
Javascript
exécuter
avant
tout
autre
envoi
vers
serveur
envoyé
l'entête
cookie
non
visible
avant
prochain
chargement
d'une
page
Lecture

_COOKIE
``
PremierCookie
setcookie
``
PremierCookie
``
Salut
time
+3600
*
24
*
7
if
isset
_COOKIE
``
PremierCookie
{
echo
``
cookie
non
défini
br
/
}
else
{
echo
_COOKIE
``
PremierCookie
``
br
/
}
sessions

Objectif
garder
données
page
page

session_start




Crée
nouvelle
session
ravive
session
déjà
existante
_SESSION
``
nom
=valeur
permet
créer
variable
session
session_destroy
détruit
session
cours
session_start
_SESSION
``
ma_variable
=12
Sessions
–
exemple
html
body
form
method=
post
action=
test.php
table
border=
0
tr
td
Nom
/td
td
input
type=
text
name=
Nom
size=
20
value=
x
/td
/tr
tr
td
Prénom
/td
td
input
type=
text
name=
Prenom
size=
20
value=
/td
/tr
tr
td
eMail
/td
td
input
type=
text
name=
Email
size=
20
value=
z
/td
/tr
tr
td
colspan=
2
input
type=
submit
name=
soumettre
value=
Envoyer
/td
/tr
/table
/form
/body
/html
Sessions
–
exemple
``
test.php
php
session_start
_SESSION
``
nom
=
_POST
``
Nom
_SESSION
``
prenom
=
_POST
``
Prenom
_SESSION
``
email
=
_POST
``
Email
Sessions
–
exemple
``
session.php
html
body
php
session_start
echo
``
Identifiant
.session_id
``
br
/
echo
``
Nom
session
.session_name
``
br
/
echo
``
Nom
``
_SESSION
``
nom
``
br
echo
``
Prénom
``
_SESSION
``
prenom
``
br
echo
``
Mail
``
_SESSION
``
email
``
br
session_destroy
/body
/html
Envoyer
emails

fonction
mail
mail
recipient
subject
message
headers
params

Nécessite
serveur
mail
accessible
serveur

php
dest
=
``
moi.com
toi.com
subject
=
``
Test
content
=
``
Bonjour
\n
content
.=
``
Ceci
message
test\n
content
.=
``
headers
=
``
From
moi.com
\n
headers
.=
``
Content-Type
text/html
charset=iso-8859-1\n
headers
.=
``
Cc
lui.com\n
mail
dest
subject
content
headers
Créer
autre
chose
HTML

Php
peut
créer
autre
chose
HTML

Images

grand
choix
formats
comme
GIF
PNG
JPEG
WBMP…
Fichiers
pdf
librairie
tcpdf
csv
word
excel
…

Aucune
limitation
suffit
savoir
comment
modifier
l'entête
header
puis
afficher
contenu…

php
header
``
Content-type
image/png
im
=
imagecreatefrompng
``
test.png
im
=
imagerotate
im
90
0
imagepng
im
PHP
MYSQL
Bases
données

Présentation
HTML
Javascript

Navigateur
IE
Firefox
Chrome
…


Traitements
/
création
page
PHP
ASP
JSP
servlet
CGI
…

Serveur
Web
Apache
IIS
…


Données
Tables
SQL

Serveur
BD
Access
Oracle
MySQL
PostGreSQL
…

Bases
données

PHP
permet
travailler
nativement
plupart
SGBDR



Trois
fonctions
essentielles




Mysql
Oracle
Sybase
Microsoft
SQL
Server
PostgreSQL
…
autres
cas
peut
utiliser
drivers
spécifiques
Connexion
serveur
Exécution
requête
SQL
Gestion
résultats
va
voir
fonctionnement
``
PHP
Data
Objects

Indépendant
partiellement
SGBD
utilisé
MySQL
Php
–
connexion

Connexion
=
création
d'un
objet
PDO




Adresse
base
nom
table
Nom
d'utilisateur
Mot
passe
Déconnexion
destruction
l'objet
try
{
//
ouverture
connexion
dbh
=
new
PDO
'mysql
host=127.0.0.1
port=3306
dbname=test
'
'root
'
``
//
fermeture
connexion
dbh
=
null
}
catch
Exception
e
{
die
'Erreur
'
e-
getMessage
}
MySQL
Php
–
requêtes

méthode
query
recherches

méthode
exec
modifications


Libération
ressources

closeCursor
dbh
=
new
PDO
'mysql
host=127.0.0.1
dbname=test
'
'root
'
``
reponse
=
dbh-
query
'SELECT
*
FROM
`
test
`
'
nb_modifs
=
dbh-
exec
'UPDATE
`
test
`
SET
test_id=21
'
reponse-
closeCursor
dbh
=
null
MySQL
Php
–
traitement

Nombre
réponses


rowCount
Traitement
réponses
fetch
retourne
résultats

fetchAll
retourne
tableau
tous
résultats

if
reponse-
rowCount
0
{
while
donnees
=
reponse-
fetch
{
echo
donnees
'test_id
'
'
'.
donnees
'test_val
'
'
br
/
'
}
}
else
{
echo
``
aucun
résultat
br
/
}
MySQL
Php
–
exemple
html
body
ul
php
try
{
dbh
=
new
PDO
'mysql
host=127.0.0.1
dbname=test
'
'root
'
``
id=
_POST
'id
'
reponse
=
dbh-
query
'SELECT
*
FROM
`
test
`
WHERE
test_id='.
id
if
reponse-
rowCount
0
{
while
donnees
=
reponse-
fetch
{
echo
``
li
donnees
'test_id
'
'
'.
donnees
'test_val
'
'
/li
'
}
}
else
{
echo
``
li
aucun
résultat
/li
}
reponse-
closeCursor
dbh
=
null
}
catch
Exception
e
{
die
'Erreur
'
e-
getMessage
}
/ul
/body
/html
Sécurité

passe-t-il

id
=
``
12

id
=
``
12
OR
1

id
=
``
12
DROP
TABLE
`
test
`
id=
_POST
'id
'
reponse
=
dbh-
query
'SELECT
*
FROM
`
test
`
WHERE
test_id='.
id
SELECT
*
FROM
`
test
`
WHERE
test_id=12
SELECT
*
FROM
`
test
`
WHERE
test_id=12
OR
1
SELECT
*
FROM
`
test
`
WHERE
test_id=12
DROP
TABLE
`
test
`
Requêtes
avancées

Préparation
requêtes
génériques

prepare
query

execute
arguments

Plus
sécurisé
version
précédente
mise
cache
plus
portable…
clair
utiliser
req
=
dbh-
prepare
'
SELECT
test_id
test_val
FROM
`
test
`
WHERE
test_id
=
AND
test_val=
'
req-
execute
array
x
Remarques
finales


Limiter
maximum
droits
l'utilisateur
données
transmises
client
fiables

SQL
Injection

Javascript
injection

Tenter


mettre
javascript
alert
``
Hello
``
input
Toujours
tester
l'existence
/
validité
d'un
fichier
/
code
inclure
Regarder
régulièrement
logs
MYSQL
MySQL
–
types
données




INT
FLOAT
TEXT
DATETIME
/
TIMESTAMP


ENUM
'value1
'
'value2
'


Ensemble
fixé
valeurs
SET
'value1
'
'value2
'


Date
heure
/
Horaire
Unix
plusieurs
parmi
beaucoup
d'autres
MySQL
–
opérations

Création
bases
données

CREATE

Suppression
bases
données

DROP

IF

DATABASE
nom_bd
DATABASE
IF
EXISTS
nom_bd
EXISTS
évite
erreur
base
n'existe
Utilisation
base
données

USE

nom_bd
base
spécifiée
utilisée
défaut
MySQL
–
opérations

CREATE
TABLE
permet
créer
nouvelle
table
base
données
courante

CREATE
TABLE
tbl_name
champ1
…

AUTO_INCREMENT
contenu
incrémenté
automatiquement
après
chaque
insertion

PRIMARY_KEY
clé
index
primaire
unique
CREATE
TABLE
`
test
`
`
test_id
`
INT
NOT
NULL
AUTO_INCREMENT
PRIMARY
KEY
`
test_val
`
INT
NOT
NULL
MySQL
–
opérations

Suppression
Table

DROP

TABLE
tbl_name
tbl_name
…
Modifier
structure
table
existante

ALTER
TABLE
tbl_name
alter_spec
alter_spec…
MySQL
–
opérations

Insérer
nouveaux
enregistrement
INSERT
INTO
article
Champ1
Champ2
VALUES
'12
'
'test
'

Remplacer
enregistrement
REPLACE
INTO
article
Champ1
Champ2
VALUES
'13
'
'test
'
MySQL
–
opérations

Modification
valeurs
UPDATE
table_name
SET
column_name=expr1
WHERE
section_condition_where

Suppression
enregistrements
DELETE
FROM
table_name
WHERE
definition
MySQL
–
opérations

Sélection
enregistrement
SELECT
DISTINCT|ALL
expression_de_selection
FROM
tables
WHERE
expression_where
GROUP
BY
col_name
…
HAVING
where_definition
ORDER
BY
ASC|DESC

Exemples
SELECT
*
FROM
article
WHERE
PrixArt
50

SELECT
NumGrArt
AVG
PrixArt
FROM
article
GROUP
BY
NumArt

EXEMPLE
``
COMPLET
SIMPLE
DOCTYPE
html
PUBLIC
``
-//W3C//DTD
XHTML
1.0
Strict//EN
``
http
//www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
html
head
title
Site
vente
ligne
/title
/head
body
div
id=
container
div
id=
header
ul
id=
top_menu
li
href=
index.php
index
/a
/li
li
href=
rechercher.php
rechercher
/a
/li
li
href=
commander.php
commander
/a
/li
/ul
/div
/header
div
id=
main
–
Affichage
catalogue
venant
base
données
/div
/main
div
id=
footer
p
Copyright
2011
&
copy
SdVeL
Tous
droits
réservés
/p
/div
/footer
/div
/container
/body
/html
config.php
php
session_start
user
=
``
root
pwd
=
``
host
=
``
127.0.0.1
bdd
=
``
test
try
{
dbh
=
new
PDO
'mysql
host='.
host
'
dbname='.
bdd
user
pwd
}
catch
Exception
e
{
die
'Erreur
'
e-
getMessage
}
menu
=
array
index.php
=
``
index
rechercher.php
=
``
rechercher
commander.php
=
``
commander
header.php
php
include_once
'config.php
'
DOCTYPE
html
PUBLIC
``
-//W3C//DTD
XHTML
1.0
Strict//EN
``
http
//www.w3.org/TR/xhtml1/DTD/xhtml1strict.dtd
html
head
title
Site
vente
ligne
/title
/head
body
div
id=
container
div
id=
header
ul
id=
top_menu
php
foreach
menu
page_url
=
page_title
echo
``
li
href=\
page_url\
page_title
/a
/li
\n
/ul
/div
/
header
div
id=
main
footer.php
/div
/
main
div
id=
footer
p
Copyright
2011
&
copy
DVD
Club
Tous
droits
réservés
/p
/div
/
footer
/div
/
container
/body
/html
Toutes
autres
pages
Création
d'autant
pages
nécessaire




Modification
l'entête
pied
page
via
fichiers
header.php
footer.php
Modification
identifiants
connexion
via
fichier
config.php
…
Reste
modifier
fichiers
header/footer
faire
css

php
include
'header.php
'
–
Affichage
catalogue
venant
base
données
php
reponse
=
dbh-
query
'SELECT
*
FROM
`
test
`
'
if
reponse-
rowCount
0
{
while
donnees
=
reponse-
fetch
{
echo
}
}
else
{
echo
``
li
aucun
résultat
/li
}
php
include
'footer.php
'
aller
plus
loin

faut
ensuite
apprendre

Quelques
fonctions
base
supplémentaires

jamais
faire
confiance
client

gestion
objets
Php

méthodes
programmation
avancées

MVC

Gestion
…
templates
