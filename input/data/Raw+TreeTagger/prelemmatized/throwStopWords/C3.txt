Cours
PHP
Versions
4.x
5.x
Sébastien
ROHAUT
Table
matières
1
Introduction
.......................................................................................................................................
7
1.1
Définition
...................................................................................................................................
7
1.2
Historique
...................................................................................................................................
7
1.3
Utilisation
pratique
....................................................................................................................
7
1.4
Pages
statiques
vs
pages
dynamiques
........................................................................................
8
1.5
Scripts
CGI
................................................................................................................................
8
1.6
Pages
dynamiques
PHP
..........................................................................................................
8
1.7
Pourquoi
préférer
PHP
d'autres
langages
comme
ASP
........................................................
8
1.8
devez
déjà
connaître
.............................................................................................
9
1.9
nécessaire
serveur
.................................................................................................................
9
1.10
nécessaire
client
..................................................................................................................
9
1.11
respect
standards
...........................................................................................................
9
2
Bases
Présentation
..........................................................................................................................
11
2.0.1
Syntaxe
base
................................................................................................................
11
2.1
Intégration
HTML
.................................................................................................................
11
2.2
Séparateur
d'instructions
..........................................................................................................
12
2.3
Bloc
d'instructions
....................................................................................................................
12
2.4
Commentaires
..........................................................................................................................
12
3
Travailler
variables
...........................................................................................................
13
3.1
Déclarer
variable
...............................................................................................................
13
3.2
Portée
variables
.................................................................................................................
13
3.3
Variables
prédéfinies
...............................................................................................................
14
3.4
Variables
dynamiques
..............................................................................................................
15
3.5
Types
variables
....................................................................................................................
15
3.5.1
booléens
...........................................................................................................................
15
3.5.2
Entiers
..............................................................................................................................
15
3.5.3
Virgule
flottante
...............................................................................................................
16
3.5.4
Chaînes
caractères
.......................................................................................................
16
3.5.5
tableaux
.....................................................................................................................
17
3.5.6
variable
objet
...............................................................................................................
18
3.6
constantes
..........................................................................................................................
18
3.7
Obtenir
type
d'une
variable
..................................................................................................
19
3.8
Définir
supprimer
variable
............................................................................................
19
4
opérateurs
..................................................................................................................................
20
4.1
précédence
opérateurs
..................................................................................................
20
4.2
Opérateurs
arithmétiques
.........................................................................................................
20
4.3
Opérateurs
d'assignation
..........................................................................................................
20
4.4
Opérateurs
bits
..............................................................................................................
20
4.5
Opérateurs
comparaison
......................................................................................................
21
4.6
Opérateur
d'erreur
....................................................................................................................
21
4.7
Opérateur
d'exécution
..............................................................................................................
21
4.8
Opérateurs
d'incrémentation/décrémentation
...........................................................................
21
4.9
Opérateurs
logiques
.................................................................................................................
21
4.10
Opérateurs
chaînes
............................................................................................................
22
4.11
Opérateur
tableaux
............................................................................................................
22
5
notion
d'expression
.....................................................................................................................
23
6
structures
contrôle
................................................................................................................
25
6.1
if
...............................................................................................................................................
25
6.2
while
.........................................................................................................................................
25
S.
ROHAUT
Cours
Programmation
PHP
Page
2/93
6.2.1
while
classique
.................................................................................................................
25
6.2.2
do
while
........................................................................................................................
25
6.3
for
.............................................................................................................................................
26
6.4
foreach
.....................................................................................................................................
26
6.5
break
continue
......................................................................................................................
27
6.6
switch
.......................................................................................................................................
27
6.7
return
........................................................................................................................................
28
6.8
require
include
_once
........................................................................................................
28
7
fonctions
....................................................................................................................................
29
7.1
Syntaxe
portée
......................................................................................................................
29
7.2
Arguments
................................................................................................................................
29
7.3
Valeur
retour
.......................................................................................................................
30
7.4
Fonctions
internes
....................................................................................................................
30
8
Gestion
formulaires
PHP
......................................................................................................
31
8.1
GET
POST
...........................................................................................................................
31
8.2
Récupération
tableau
..........................................................................................................
31
8.3
Récupération
directe
................................................................................................................
32
8.4
Utiliser
tableaux
.................................................................................................................
32
9
Date
heure
....................................................................................................................................
34
9.1
Localisation
..............................................................................................................................
34
9.2
Récupérer
date
l'heure
......................................................................................................
34
9.2.1
date
................................................................................................................................
34
9.2.2
date
locale
strftime
........................................................................................................
35
9.2.3
Retour
tableau
getdate
.............................................................................................
36
9.2.4
L'heure
localtime
...........................................................................................................
37
9.3
Récupérer
n'importe
quelle
date
...............................................................................................
37
10
MySQL
..........................................................................................................................................
38
10.1
Présentation
............................................................................................................................
38
10.2
Outils
......................................................................................................................................
38
10.2.1
PhpMyAdmin
.................................................................................................................
38
10.2.2
MysqlCC
........................................................................................................................
39
10.3
Créer
base
........................................................................................................................
39
10.4
Utilisateurs
droits
...............................................................................................................
39
10.5
Créer
modifier
tables
...................................................................................................
40
10.5.1
Types
Numériques
..........................................................................................................
40
10.5.1.1
Types
entiers
...........................................................................................................
40
10.5.1.2
Types
réels
flottants
.............................................................................................
40
10.5.1.3
Types
booléens
.......................................................................................................
40
10.5.2
Types
caractères
.............................................................................................................
40
10.5.2.1
Types
CHAR
..........................................................................................................
41
10.5.2.2
Types
TEXT
...........................................................................................................
41
10.5.2.3
Type
ENUM
...........................................................................................................
41
10.5.2.4
Type
SET
................................................................................................................
42
10.5.3
Types
date
......................................................................................................................
42
10.5.3.1
Formats
supportés
...................................................................................................
43
10.5.3.2
Type
DATETIME
...................................................................................................
43
10.5.3.3
Type
DATE
............................................................................................................
43
10.5.3.4
Type
TIMESTAMP
................................................................................................
43
10.5.3.5
Type
TIME
............................................................................................................
44
10.5.3.6
Type
YEAR
............................................................................................................
44
10.5.4
Création
Syntaxe
SQL
..................................................................................................
44
S.
ROHAUT
Cours
Programmation
PHP
Page
3/93
10.5.5
Types
tables
MyISAM
InnoDB
..........................................................................
45
10.5.6
Index
FULLTEXT
..........................................................................................................
46
10.5.6.1
Création
..................................................................................................................
46
10.5.6.2
Recherche
...............................................................................................................
46
10.5.6.3
Recherche
booléenne
..............................................................................................
47
10.6
MySQL
PHP
......................................................................................................................
47
10.6.1
Connexion
base
données
..................................................................................
47
10.6.1.1
Connexion
serveur
.............................................................................................
47
10.6.1.2
Choix
d'une
base
.....................................................................................................
48
10.6.1.3
Fermeture
d'une
connexion
....................................................................................
48
10.6.1.4
Séquence
complète
base
..........................................................................
48
10.6.2
requêtes
...................................................................................................................
48
10.6.2.1
Exécuter
requête
..............................................................................................
48
10.6.2.2
Nombre
lignes
affectées
....................................................................................
49
10.6.2.3
Nombre
lignes
retournées
..................................................................................
49
10.6.2.4
Récupérer
résultats
............................................................................................
49
10.6.2.5
Insertion
auto-incrément
................................................................................
50
10.6.3
Récupération
erreurs
................................................................................................
50
11
système
fichiers
....................................................................................................................
51
11.1
Travail
fichiers
............................................................................................................
51
11.1.1
Ouverture
........................................................................................................................
51
11.1.2
Lecture
............................................................................................................................
51
11.1.2.1
fgets
......................................................................................................................
51
11.1.2.2
fread
....................................................................................................................
51
11.1.2.3
fscanf
....................................................................................................................
52
11.1.2.4
fgetc
.....................................................................................................................
52
11.1.2.5
fgetss
....................................................................................................................
52
11.1.2.6
fgetcsv
..................................................................................................................
52
11.1.2.7
Renvoyer
fichier
sortie
standard
..............................................................
52
11.1.3
Ecriture
...........................................................................................................................
53
11.1.4
Déplacement
...................................................................................................................
53
11.1.4.1
fseek
.....................................................................................................................
53
11.1.4.2
ftell
.......................................................................................................................
53
11.1.4.3
rewind
..................................................................................................................
53
11.1.5
Fin
fichier
..................................................................................................................
53
11.1.6
Fermeture
.......................................................................................................................
54
11.2
Travail
répertoires
.......................................................................................................
54
11.2.1
Répertoire
actuel
............................................................................................................
54
11.2.2
déplacer
....................................................................................................................
54
11.2.3
Ouvrir
lister
fermer
......................................................................................................
54
11.2.4
Récupérer
toutes
entrées
...........................................................................................
54
11.3
Travail
système
fichiers
...........................................................................................
55
11.3.1
Informations
fichier
..............................................................................................
55
11.3.2
Actions
fichiers
répertoires
.............................................................................
56
11.4
Upload
fichiers
..................................................................................................................
57
12
Travail
chaînes
.........................................................................................................................
59
12.1
Fonctions
code
HTML
MySQL
.................................................................................
59
12.1.1
Gestion
caractères
verrouillés
..................................................................................
59
12.1.2
balises
caractères
spéciaux
HTML
.............................................................................
59
12.2
Fonctions
texte
générales
.......................................................................................................
60
12.2.1
Découper
chaîne
......................................................................................................
60
S.
ROHAUT
Cours
Programmation
PHP
Page
4/93
12.2.2
Rechercher
comparer
..................................................................................................
61
13
Sessions
cookies
........................................................................................................................
62
13.1
cookies
.............................................................................................................................
62
13.1.1
Création
..........................................................................................................................
62
13.1.2
Accès
..............................................................................................................................
62
13.1.3
Suppression
....................................................................................................................
63
13.2
Identification
HTTP
...............................................................................................................
63
13.2.1
Connexion
......................................................................................................................
63
13.2.2
Déconnexion
..................................................................................................................
64
13.3
Sessions
PHP
.........................................................................................................................
64
13.3.1
Principe
..........................................................................................................................
64
13.3.2
Utilisation
.......................................................................................................................
64
13.3.2.1
Ouverture
................................................................................................................
64
13.3.2.2
Variables
session
...............................................................................................
64
13.3.3
Expiration
session
..................................................................................................
65
13.3.4
Changer
l'accès
défaut
..............................................................................................
66
14
Images
............................................................................................................................................
67
14.1
Pré-requis
importants
.............................................................................................................
67
14.2
Créer
image
.....................................................................................................................
67
14.2.1
Types
possibles
..............................................................................................................
67
14.2.2
Création
..........................................................................................................................
68
14.2.2.1
Nouvelle
image
dynamique
....................................................................................
68
14.2.2.2
Récupération
d'une
image
existante
.......................................................................
68
14.2.3
Publication
.....................................................................................................................
68
14.2.4
Chargement
via
autre
page
......................................................................................
69
14.3
Travailler
Images
........................................................................................................
69
14.3.1
Récupérer
informations
............................................................................................
69
14.3.2
couleurs
...................................................................................................................
69
14.3.3
Dessin
.............................................................................................................................
70
14.3.3.1
Remplissage
............................................................................................................
70
14.3.3.2
Point
.......................................................................................................................
70
14.3.3.3
Ligne
.......................................................................................................................
70
14.3.3.4
Rectangle
................................................................................................................
70
14.3.3.5
Cercle
ellipse
.........................................................................................................
70
14.3.3.6
Polygones
...............................................................................................................
71
14.3.3.7
Texte
simple
...........................................................................................................
71
15
programmation
objet
................................................................................................................
71
15.1
Structure
.................................................................................................................................
71
15.2
Création
d'un
objet
.................................................................................................................
71
15.3
Accès
membres
...............................................................................................................
72
15.3.1
PHP
4
5
......................................................................................................................
72
15.3.2
PHP
5
.............................................................................................................................
72
15.4
L'opérateur
..........................................................................................................................
72
15.5
variables
protection
........................................................................................................
73
15.5.1
PHP
4.x
..........................................................................................................................
73
15.5.2
PHP
5.x
..........................................................................................................................
73
15.5.2.1
Protection
variables
fonctions
......................................................................
73
15.5.2.2
attributs
méthodes
statiques
................................................................................
73
15.5.2.3
constantes
classe
................................................................................................
74
15.6
Héritage
polymorphisme
....................................................................................................
74
15.7
mots-clés
parent
self
....................................................................................................
75
S.
ROHAUT
Cours
Programmation
PHP
Page
5/93
15.8
Constructeurs
.........................................................................................................................
76
15.8.1
PHP
4
5
......................................................................................................................
76
15.8.2
PHP
5
.............................................................................................................................
76
15.9
Constructeurs
classes
dérivées
...........................................................................................
76
15.9.1
PHP
4
5
......................................................................................................................
76
15.9.2
PHP
5
.............................................................................................................................
77
15.10
Destructeur
...........................................................................................................................
78
15.10.1
PHP
4
...........................................................................................................................
78
15.10.2
PHP
5
...........................................................................................................................
78
15.11
Affectation
d'objets
..............................................................................................................
78
15.11.1
Code
commun
..............................................................................................................
78
15.11.2
PHP
4
...........................................................................................................................
79
15.11.3
PHP
5
...........................................................................................................................
79
15.12
Comparaison
d'objets
...........................................................................................................
80
15.12.1
PHP
4
...........................................................................................................................
80
15.12.2
PHP
5
...........................................................................................................................
82
16
Nouveautés
PHP
5
....................................................................................................................
83
16.1
objets
..............................................................................................................................
83
16.1.1
fonction
__autoload
..................................................................................................
83
16.1.2
classes
abstraites
......................................................................................................
83
16.1.3
Classes
méthodes
variables
finales
...........................................................................
84
16.1.4
interfaces
objet
.........................................................................................................
84
16.1.5
Gestion
dynamique
méthodes
attributs
................................................................
86
16.1.6
itérations
d'objets
.....................................................................................................
86
16.1.7
Type
hinting
...................................................................................................................
87
16.2
exceptions
........................................................................................................................
88
16.2.1
try
catch
......................................................................................................................
88
16.2.2
Déclenchement
throw
............................................................................................
88
16.2.3
classe
Exception
classes
personnalisées
.....................................................................
88
16.2.4
PHP
Erreur
Exception
..........................................................................................
89
16.2.5
Exception
défaut
......................................................................................................
90
17
Sauvegarder
objets
...................................................................................................................
91
17.1
Cas
d'une
session
...................................................................................................................
91
17.2
Autres
cas
...............................................................................................................................
92
S.
ROHAUT
Cours
Programmation
PHP
Page
6/93
1
Introduction
1.1
Définition
PHP
langage
script
HTML
exécuté
côté
serveur
veut
dire
PHP
Hypertext
Preprocessor
syntaxe
largement
inspirée
langage
Java
Perl
améliorations
spécifiques
but
langage
d'écrire
rapidement
pages
HTML
dynamiques
1.2
Historique
L'origine
PHP
remonte
1995
quand
Rasmus
Lerdorf
créé
PHP/FI
librairie
scripts
Perl
utilisés
publication
CV
site
personnel
fur
mesure
évolutions
librairie
portée
agrémentée
nouvelles
fonctionnalités
créer
pages
dynamiques
simples
web
accéder
quelques
sources
données
PHP/FI
signifie
Personal
Home
Page/Forms
Interpreter
PHP/FI
2.0
sort
1997
toujours
développé
seule
personne
C'est
succès
50000
sites
1
noms
domaines
disent
l'utiliser
supporter
contributeurs
affluent
PHP
3.0
sort
juin
1998
c'est
première
version
développée
conjointement
Rasmus
Lerdorf
Andi
Gutmans
Zeev
Suraski
entièrement
réécrite
versions
précédentes
trop
lentes
application
commerciale
Outre
performances
PHP
3
modulaire
extensible
permettant
greffer
API
supplémentaires
'
manqué
support
nombreuses
bases
données
formats
protocoles
syntaxe
plus
cohérente
support
basique
l'objet
installé
10
parc
mondial
serveurs
web
dizaines
milliers
développeurs
centaines
milliers
sites
moteur
PHP
4
repensé
afin
d'en
améliorer
performances
applications
complexes
d'augmenter
encore
modularité
nouveau
moteur
vu
jour
appelé
Zend
Engine
contraction
Zeev
Andi
PHP
4
sort
officiellement
mai
2000
apporte
performances
accrues
supports
plusieurs
serveurs
web
sessions
sécurité
accrue
C'est
actuellement
dernière
version
stable
comptons
4.1
4.2
4.3
PHP
5
Actuellement
version
beta
cycle
peut
durer
plusieurs
mois
but
PHP
5
amélioration
performances
moteur
Zend
Zend
Engine
2
modèle
objet
étendu
très
proche
C++
compatibilité
accrue
nouveaux
standards
anciens
RPC
XML
.NET
1.3
Utilisation
pratique
–
Forums
Messageries
–
Commerce
électronique
–
Banque
/
Comptes
ligne
–
Publication
ligne
–
Moteurs
recherche
–
Tout
voulez
sauf
jeux
Résumons
quelques
sigles
allons
utiliser
suite
•
HTML
Hypertext
Markup
Language
•
PHP
People
Hate
Perl
Non
PHP
Hypertext
PreProcessor
S.
ROHAUT
Cours
Programmation
PHP
Page
7/93
•
SQL
Structured
Query
Language
•
MySQL
serveur
base
données
outils
accéder
•
LAMP
Linux
–
Apache
–
MySQL
–
PHP
quatuor
gagnant
serveurs
web
APACHE
PHP
MySQL
Linux
1.4
Pages
statiques
vs
pages
dynamiques
page
statique
page
écrite
directement
HTML
peut
éventuellement
incorporer
code
Javascript
donnant
semblant
'dynamisme
'
uniquement
côté
navigateur
données
locales
traitements
plus
lourds
nécessitant
l'accès
base
données
formatage
tableau
fonction
résultats
recherche
poussée
graphisme
faut
passer
pages
dynamiques
langage
exécuté
côté
serveur
ASP
serveurs
Microsoft/IIS
Perl
PHP
1.5
Scripts
CGI
PHP
peut
être
utilisé
comme
langage
CGI
rappel
script
programme
CGI
programme
comme
autre
sortie
dédiée
navigateur
exemple
programme
shell
Perl
sort
HTML
PHP
langage
script
comme
autre
peut
l'utiliser
cas
n'est
forcément
mieux
1.6
Pages
dynamiques
PHP
PHP
langage
Server
Side
côté
serveur
Lors
chargement
d'une
page
PHP
c'est
serveur
va
lire
interpréter
exécuter
code
Puis
renvoie
résultat
généralement
sous
forme
code
HTML
navigateur
Ainsi
navigateur
l'utilisateur
voient
jamais
véritable
code
PHP
exécuté
plus
résultat
page
web
classique
HTML
besoin
d'installer
client
composants
spécifiques
java
'
notion
vitesse
d'exécution
côté
client
celle
serveur
prépondérante
1.7
Pourquoi
préférer
PHP
d'autres
langages
comme
ASP
ASP
n'est
entièrement
langage
puisque
ASP
veut
dire
Active
Server
Page
ASP
dispose
bien
entendu
propres
API
peuvent
être
accessibles
via
autre
langage
s'agit
d'utiliser
langage
quelconque
créer
pages
dynamiques
Nativement
disponible
IIS
sous
Windows
l'est
défaut
autres
systèmes
serveurs
web
comme
Apache
existe
cependant
modules
compatibilité
ASP
Apache
comme
Apache
:ASP
reprend
API
ASP
étendant
programmation
PERL
Sous
Windows
code
ASP
fait
généralement
VBScript
Jscript
C'est
aussi
possible
sous
Unix/Linux
Apache
faut
alors
tourner
vers
solutions
commerciales
Sun
One
ASP
Instant
ASP
Sous
S.
ROHAUT
Cours
Programmation
PHP
Page
8/93
Windows
ASP
VBScript
utilisés
l'accès
ActiveX
composants
bien
pratiques
véritables
gruyères
sécurité
n'existe
jour
portage
ActiveX
d'autres
systèmes
Windows
PHP
disponible
toutes
plate-formes
permet
faire
chose
sinon
plus
ASP
VBScript
N'oublions
PHP
dispose
plus
2700
APIs
1.8
devez
déjà
connaître
devez
connaître
HTML
ainsi
qu'un
langage
programmation
procédural
exemple
connaissance
basique
SQL
peut
être
nécessaire
abordée
1.9
nécessaire
serveur
PHP
sert
seulement
faire
pages
dynamiques
C'est
langage
interprété
titre
Perl
Python
TCL
capable
lancer
scripts
intéractifs
non
peut
utiliser
PHP
créer
interfaces
graphiques
extension
GTK
minimum
nécessaire
vital
apprendre
PHP
l'interpréteur
PHP
lui-même
environnement
supporté
Unix
Windows
Mac
parle
LAMP
voit
bien
référence
système
Linux
serveur
Web
Apache
serveur
bases
données
MySQL
interpréteur
PHP
version
4
PHP
permet
fonctionner
IIS
MySQL
existe
aussi
Windows
peut
utiliser
architecture
WIMP
Windows
IIS
MySQL
PHP
WAMP
Windows
Apache
MySQL
PHP
Ajouter
PHP
IIS
c'est
laisser
porte
ouverte
tous
vents
préférera
seconde
solution
distributions
Linux
disposent
déjà
nécessaire
l'architecture
LAMP
paramétrage
assez
simple
plus
mode
user_mod
Apache
permet
chaque
utilisateur
créer
site
web
répertoire
spécifique
répertoire
personnel
Sous
Windows
c'est
déjà
peu
plus
complexe
mettre
oeuvre
manuellement
emploie
distributions
toutes
faites
meilleure
nommant
EasyPHP
versions
1.6
1.7
meilleures
développer
peut
ainsi
développer
site
sous
Windows
porter
tel
quel
serveur
Unix
1.10
nécessaire
client
développer
suffit
d'un
simple
éditeur
vaut
mieux
préférer
éditeur
plus
évolué
supportant
coloration
syntaxique
quelques
fonctions
évoluées
L'éditeur
HAPEdit
3
parfait
développer
PHP
L'accès
bases
MySQL
peut
faire
depuis
navigateur
phpMyAdmin
depuis
interface
MySQLCC
encore
DBDesigner
conception
tests
simple
navigateur
respectant
standards
web
1.11
respect
standards
W3C
l'organisme
international
faisant
loi
monde
standards
web
défini
série
normes
HTML
XML
XHTML
CSS
etc.
Pourquoi
respecter
standard
C'est
garantie
d'un
bon
fonctionnement
bon
affichage
manière
identique
pages
S.
ROHAUT
Cours
Programmation
PHP
Page
9/93
tous
navigateurs
supportant
standard
bonne
déclaration
entête
HTML
navigateurs
IE6
Mozilla
1.5
Opera
7
Galeon
Konqueror
etc
compatibles
standards
L'utilisation
balises
propriétaires
navigateur
blink
exemple
vbscript
sous
IE
proscrire
dernière
norme
HTML
valide
HTML
4.01
STRICT
XHTML
terme
remplacera
définitivement
HTML
aussi
bien
supporté
dernière
norme
CSS
2
Cependant
cas
préférez
CSS-1
car
seul
Opera
supporte
CSS-2
Prenez
l'habitude
quand
c'est
possible
tester
site
deux
trois
navigateurs
IE6
car
c'est
plus
répandu
Opera
car
extrêmement
respectueux
standards
Mozilla
car
c'est
challenger
probablement
remplaçant
terme
IE
n'aura
plus
d'évolution
version
avant
LongHorn
S.
ROHAUT
Cours
Programmation
PHP
Page
10/93
2
Bases
Présentation
PHP
langage
très
souple
prenant
sources
divers
langages
comme
Perl
C++
possible
d'avoir
plusieurs
styles
scripts
programmation
classique
dite
procédurale
programmation
objet
programmation
bordélique
souplesse
permet
très
grande
liberté
peu
comme
Perl
L'inconvénient
qu'on
peut
très
vite
obtenir
code
illisible
bordélique
ça
marche
très
bien
Prenez
l'habitude
commenter
code
l'indenter
placer
qu'une
instruction
ligne
2.0.1
Syntaxe
base
2.1
Intégration
HTML
page
php
porte
l'extension
.php
page
PHP
peut
être
entièrement
programmée
PHP
mélangée
code
html
PHP
langage
Embedded
HTML
c'est
dire
qu'il
apparaît
n'importe
quel
endroit
page
HTML
ça
place
balises
particulières
php
peut
aussi
utiliser
balises
script
language=
php
/script
première
forme
préférable
plus
simplicité
compatibilité
XHTML
écrit
page
HTML
laquelle
intègre
code
PHP
html
head
title
Titre
/title
/head
body
php
echo
``
Hello
World
``
/body
/html
code
HTML
généré
suivant
html
head
title
Titre
/title
/head
body
Hello
World
/body
/html
L'utilisation
balises
l'intégration
code
page
web
très
souple
permet
jongler
facilement
code
PHP
code
HTML
php
if
expression
{
strong
Ceci
vrai.
/strong
php
}
else
{
strong
Ceci
faux.
/strong
php
}
S.
ROHAUT
Cours
Programmation
PHP
Page
11/93
2.2
Séparateur
d'instructions
Comme
instruction
termine
point-virgule
Notez
balise
fermante
implique
fin
d'une
instruction
php
echo
``
Ceci
test
php
echo
``
Ceci
test
2.3
Bloc
d'instructions
bloc
d'instructions
place
entre
accolades
{
}
bloc
d'instructions
peut
contenir
code
n'importe
quelle
longueur
considéré
reste
code
comme
instruction
unique
c'est
expression
valeur
peut
assigner
bloc
faire
calculs
2.4
Commentaires
commentaires
s'utilisent
comme
C++
/
*
..
*
/
//
Notez
qu'une
balise
fermante
ferme
commentaire
cours
php
/
*
echo
``
salut
*
/
//
Commentaire
ligne
S.
ROHAUT
Cours
Programmation
PHP
Page
12/93
3
Travailler
variables
3.1
Déclarer
variable
variable
commence
dollar
suivi
d'un
nom
variable
variables
typées
moment
création
Attention
PHP
sensible
casse
var
Var
mêmes
variables
Voici
règles
respecter
•
variable
peut
commencer
lettre
•
variable
peut
commencer
souligné
underscore
_
•
variable
doit
commencer
chiffre
//
Déclaration
règles
var=1
//
var
1
Var=2
//
Var
2
_toto='Salut
'
//
Ok
3petitscochons=5
//
Invalide
commence
chiffre
type
dépend
valeur
contexte
d'utilisation
peut
forcer
cast
ponctuellement
variable
type
données
s'appelle
transtypage
comme
type
variable
peut
changer
fonction
utilisation
contexte
PHP
effectue
automatiquement
transtypage
peut
parfois
fournir
résultats
surprenants
affecte
valeur
variable
signe
égal
=
sans
espace
avant
après
//
Déclaration
transtypage
var=
'
2
'
//
chaîne
2
var+=1
//
var
maintenant
entier
3
var=
var+0.3
//
var
maintenant
réel
type
double
3.3
var=5
+
``
3
petits
cochons
//
var
entier
vaut
8
défaut
variables
assignées
valeur
valeur
assignée
variable
recopiée
variable
PHP
peut
aussi
travailler
référence
variable
peut
référencer
autre
variable
dit
alors
variable
devient
alias
pointe
autre
variable
assigne
référence
utilisant
signe
&
devant
variable
assignée
var=2
ref=
&
var
//
ref
devient
référence
var
echo
ref
//
affiche
2
var=3
echo
ref
//
affiche
3
ref=4
echo
var
//
affiche
4
Attention
valeur
constante
NULL
insensible
casse
Affecter
valeur
NULL
variable
signifie
puis
affecter
valeur
3.2
Portée
variables
portée
d'une
variable
dépend
contexte
variable
déclarée
script
hors
d'une
fonction
globale
défaut
portée
limitée
script
courant
ainsi
qu'au
code
éventuellement
inclus
include
require
n'est
accessible
fonctions
d'autres
scripts
S.
ROHAUT
Cours
Programmation
PHP
Page
13/93
a=1
//
globale
défaut
function
foo
{
echo
//
c'est
variable
locale
fonction
n'affiche
rien
}
accéder
variable
globale
fonction
faut
utiliser
mot-clé
global
a=1
//
globale
défaut
b=2
//
idem
function
foo
{
global
b
//
récupère
variables
globales
b=
a+
b
}
echo
b
//
affiche
3
PHP
accepte
variables
statiques
Comme
variable
statique
perd
valeur
quand
sort
d'une
fonction
function
test_static
{
static
a=0
echo
//
+1
chaque
passage
fonction
a++
}
3.3
Variables
prédéfinies
PHP
dispose
d'un
grand
nombre
variables
prédéfinies
variables
généralement
type
scalaires
tableaux
Elles
souvent
type
superglobales
c'est
dire
accessible
depuis
n'importe
sans
notion
portée
Voici
quelques
tableaux
prédéfinis
voir
point
Tableaux
comprendre
utilisation
•
_GLOBALS
tableau
variables
globales
clé
nom
variable
•
_SERVER
variables
fournies
serveur
web
exemple
'SERVER_NAME'
•
_GET
variables
fournies
HTTP
méthode
GET
formulaires
•
_POST
idem
méthode
POST
•
_COOKIE
variables
fournies
cookie
•
_FILES
variables
téléchargement
d'un
fichier
upload
•
_ENV
accès
variables
d'environnement
serveur
•
_SESSION
variables
session
voir
cours
sessions
Note
avant
version
4.2.0
PHP
variables
passées
méthode
GET
POST
formulaires
URL
ainsi
suite
automatiquement
créées
script
destination
http
//www.toto.fr/page.php
action=enr
créait
automatiquement
variable
action
prenait
valeur
'enr
'
input
type=
hidden
name=
cache
value=
toto
créait
page
cible
action
form
variable
cache
valeur
``
toto
n'est
plus
automatique
depuis
PHP
4.2.0
faut
passer
tableaux
superglobaux
ci-dessus
peut
cependant
passer
outre
modifiant
valeur
register_globals
php.ini
S.
ROHAUT
Cours
Programmation
PHP
Page
14/93
3.4
Variables
dynamiques
variable
dynamique
utilise
valeur
d'une
variable
comme
nom
d'une
autre
variable
utilise
variables
dynamiques
rajoutant
devant
nom
première
variable
a=
var
a=1
//
a=1
equivaut
fait
var=1
echo
//
affiche
var
echo
//
affiche
1
echo
var
//
affiche
1
Attention
tableaux
éviter
toute
ambiguïté
préférable
placer
variable
entre
accolades
3.5
Types
variables
3.5.1
booléens
booléen
peut
prendre
deux
valeurs
TRUE
FALSE
deux
constantes
TRUE
FALSE
peuvent
être
utilisées
sans
aucune
distinction
casse
différences
entre
majuscules
minuscules
var=FALSE
//
FALSE
False
false
var2=True
//
TRUE
True
true
Tous
types
peuvent
être
convertis
booléens
Voici
cas
variable
retournera
FALSE
booléen
suivant
type
•
Booléen
FALSE
•
Entier
0
zéro
•
Nombre
flottant
0.0
zéro
•
Chaîne
chaîne
vide
``
``
0
zéro
•
Tableau
tableau
vide
sans
aucun
élément
•
Objet
objet
vide
sans
aucun
élément
•
Constante
spéciale
NULL
tous
autres
cas
valeur
retournée
TRUE
Attention
-1
considéré
comme
vrai
TRUE
Comme
tests
conditions
structures
contrôles
effectuent
convertion
booléenne
condition
if
var==true
echo
``
ok
if
var
echo
``
ok
//
Identique
3.5.2
Entiers
entier
l'ensemble
nombres
naturels
c'est
dire
virgule
positifs
négatifs
entiers
généralement
codés
32
bits
cela
dépend
l'architecture
affecte
nombre
entier
dépasse
capacité
variable
celle-ci
transformée
réel
float
Enfin
'
notion
d'entier
non
signé
Lors
conversion
d'un
booléen
entier
FALSE
devient
0
TRUE
devient
1
Lors
conversion
d'un
nombre
virgule
flottante
nombre
arrondi
valeur
inférieure
s'il
S.
ROHAUT
Cours
Programmation
PHP
Page
15/93
positif
supérieure
s'il
négatif
conversion
vers
zéro
conversion
depuis
chaînes
voir
type
3.5.3
Virgule
flottante
parte
ici
nombres
réels
double
float
c'est
dire
nombres
virgules
virgule
spécifiée
point
puissance
10
s'exprime
e
E
var=1.234
var2=1.1e4
//
1.1
*
10^4
11000
3.5.4
Chaînes
caractères
chaîne
séquence
caractères
PHP
travaille
ASCII
256
caractères
supporte
encore
format
Unicode
prévu
version
5
'
limite
théorique
taille
chaîne
distingue
trois
syntaxes
utiliser
chaîne
•
guillemets
simples
'
'
apostrophes
Comme
shell
tous
caractères
inclus
chaîne
sortis
tels
quels
sans
interprétation
devez
afficher
guillemet
simple
faudra
l'échapper
\'
•
guillemets
doubles
``
Certaines
séquences
caractères
interprétées
variables
substituées
remplacées
valeur
•
HereDoc
Identique
HereScripts
Shell
texte
saisi
jusqu
'
délimiteur
spécifié
placé
variable
Voici
tableau
issu
documentation
PHP
séquences
pouvant
être
utilisés
guillemets
doubles
Séquence
Valeur
\n
Nouvelle
ligne
linefeed
LF
0x0A
10
ASCII
\r
Retour
ligne
carriage
return
CR
0x0D
13
ASCII
\t
Tabulation
horizontale
HT
0x09
9
ASCII
\\
Antislash
\
Caractère
\
Guillemets
doubles
séquence
caractères
permet
rechercher
nombre
\
0-7
{
1,3
}
notation
octale
\x
0-9A-Fa-
séquence
caractères
permet
rechercher
nombre
f
{
1,2
}
notation
hexadécimale
echo
'Attention
l\'abus
d\'alcool
dangereux
'
var=2345
echo
``
valeur
\
var
var\n
toto=
FIN
S.
ROHAUT
Cours
Programmation
PHP
Page
16/93
Salut
amis
Comment
ça
va
FIN
echo
toto
N'importe
quelle
variable
peut
être
affichée
chaîne
comme
ci-dessus
attention
deux
variables
nom
proche
faut
alors
utiliser
accolades
{
}
comme
shell
Enfin
peut
accéder
n'importe
quel
caractère
chaîne
indiquant
position
commence
zéro
entre
deux
accolades
collées
juste
après
nom
variable
fic='toto.fic
'
fics='riri
fifi
loulou
'
echo
``
fics
{
fic
}
//
affiche
riri
fifi
loulou
toto.fics
echo
``
fic
{
3
}
//
affiche
o
peut
facilement
concaténer
deux
chaînes
l'opérateur
point
peut
ajouter
texte
chaîne
l'opérateur
point
égal
.=
str=
Salut
Amis
\n
str.=
Comment
ça
va
``
//
``
Salut
Amis
\nComment
ça
va
str2=
str
``
\n
//
``
Salut
Amis
\nComment
ça
va
\n
devez
utiliser
chaîne
caractères
comme
valeur
numérique
addition
exemple
attention
contenu
chaîne
type
double
réel
contient
'
e
'
'
E
'
Sinon
entier
valeur
numérique
ensuite
définie
début
chaîne
chaîne
commence
valeur
numérique
utilisée
sinon
égale
0
zéro
première
expression
chaîne
type
variable
dépend
seconde
expression
val=10+
2.55
//
float
12.55
val=1+
toto2
//
1
+
0
=
1
val=2+
3
petits
cochons
//
2
+
3
=
5
3
premier
chaîne
3.5.5
tableaux
tableau
PHP
association
ordonnée
association
fait
correspondre
valeurs
clés
tableaux
très
souples
peuvent
avoir
multiples
dimensions
être
indexés
clé
numérique
texte
être
utilisés
comme
table
hachage
pile
queue
valeur
tableau
peut
être
elle-même
tableau
créer
arbres
exemple
tableau
créé
fonction
array
prend
comme
arguments
paires
key
=
value
séparées
virgules
clé
peut
être
entier
texte
Attention
8
entier
08
chaîne
clé
absente
alors
c'est
dernière
clé
entière
plus
1
choisie
c'est
première
c'est
0
zéro
accède
éléments
d'un
tableau
l'aide
crochets
place
entre
crochets
clé
entière
chaîne
var=array
10,15,17,23,9
echo
var
0
//
10
echo
var
3
//
17
tab=array
``
=
12
nom
=
toto
pipo
,17,4=
5
echo
tab
0
//
pipo
echo
tab
1
//
17
echo
tab
'
'
//
12
echo
tab
'nom
'
//
toto
S.
ROHAUT
Cours
Programmation
PHP
Page
17/93
L'utilisation
fonction
array
n'est
obligatoire
peut
déclarer
tableau
volée
tab2
1
=2
tab2
=6
//
equivaut
tab2
2
=6
tab2
'test
'
='Ma
chaîne
'
peut
aussi
créer
tableaux
multidimensionnels
l'aide
deux
méthodes
précédentes
tab=array
``
=
array
``
riri
,1=
fifi
,2=
'loulou
'
,2=
array
1,2,3
array
'un
'
'deux
'
'trois
'
echo
tab
'un
'
0
//
riri
echo
tab
2
1
//
2
echo
tab
3
2
//
trois
tab2
'un
'
'deux
'
='test
'
//
créé
tableau
deux
dimensions
existe
fonction
très
pratique
lister
contenu
d'un
tableau
modifier
éléments
foreach
tab=array
1=
'un',2=
'deux',3=
'trois
'
foreach
tab
valeur
{
echo
``
valeur
\n
//
affiche
deux
trois
}
foreach
tab
cle
=
valeur
{
echo
``
cle
=
valeur\n
//
affiche
1
=
2
=
deux
3
=
trois
}
3.5.6
variable
objet
objets
créent
l'instruction
class
créer
instace
l'objet
faut
utiliser
mot
clé
new
class
test
{
function
affiche_hello
{
echo
``
Hello
``
}
}
obj=new
test
obj-
affiche_hello
3.6
constantes
constantes
nom
prend
valeur
pouvant
être
modifiée
fois
fixée
constante
n'est
accessible
qu'en
lecture
seule
Elles
sensibles
casse
doivent
convention
être
écrites
majuscules
définit
constante
fonction
define
doit
respecter
certaines
règles
•
constante
commence
•
constante
accessible
depuis
n'importe
quel
endroit
code
•
constante
peut
être
redéfinie
•
constante
peut
contenir
d'un
scalaire
entier
booléen
chaîne
double
define
CONSTANTE
valeur
echo
CONSTANTE
//
affiche
``
valeur
S.
ROHAUT
Cours
Programmation
PHP
Page
18/93
3.7
Obtenir
type
d'une
variable
obtenir
type
d'une
variable
utilise
fonction
gettype
retourne
chaîne
texte
indiquant
type
attention
rien
garantit
résultat
d'une
version
PHP
autre
types
retournés
``
boolean
``
integer
``
double
raisons
historiques
``
double
retournée
lorsqu'une
valeur
type
float
fournie
lieu
chaîne
``
float
``
string
``
array
object
``
resource
depuis
PHP
4
``
NULL
depuis
PHP
4
``
unknown
type
souhaitez
réellement
tester
type
d'une
variable
préférable
d'utiliser
fonctions
type
is_
*
is_array
is_bool
is_double
is_float
is_int
is_integer
is_long
is_null
is_numeric
is_object
is_real
is_resource
is_string
is_callable
est-ce
fonction
3.8
Définir
supprimer
variable
souhaitez
savoir
variable
définie
c'est
dire
affectée
utilise
isset
Enfin
souhaitez
supprimer
variable
faut
utiliser
unset
S.
ROHAUT
Cours
Programmation
PHP
Page
19/93
4
opérateurs
4.1
précédence
opérateurs
C'est
l'ordre
lequel
valeurs
doivent
être
analysées
Ainsi
l'expression
4
+
3
*
7
n'est
lue
gauche
droite
retourne
49
25
Voici
tableau
priorités
opérateurs
ordre
croissant
priorité
Associativité
Opérateurs
gauche
gauche
or
gauche
xor
gauche
and
droite
print
gauche
=
+=
-=
*
=
/=
.=
=
&
=
|=
^=
~=
=
=
gauche
gauche
|
gauche
&
&
gauche
|
gauche
^
gauche
&
non-associative
==
=
===
==
non-associative
=
=
gauche
gauche
+
-
gauche
*
/
droite
~
++
int
double
string
array
object
droite
non-associative
new
4.2
Opérateurs
arithmétiques
opérateurs
+
-
*
/
modulo
reste
division
4.3
Opérateurs
d'assignation
principal
=
aussi
comme
opérateurs
combinés
+=
-=
*
=
/=
=
.=
4.4
Opérateurs
bits
opérateurs
&
AND
|
OR
^
XOR
~
NOT
~
b
décalage
b
bits
S.
ROHAUT
Cours
Programmation
PHP
Page
20/93
gauche
b
décalage
b
bits
droite
décalage
bits
gauche
équivaut
multiplication
deux
décalage
droite
division
deux
4.5
Opérateurs
comparaison
opérateurs
==
a==
b
valeur
===
a===
b
valeur
type
=
différent
=
=
aussi
l'opérateur
ternaire
expr1
expr2
expr3
expr1
vrai
alors
expr2
sinon
expr3
4.6
Opérateur
d'erreur
dispose
d'un
opérateur
spécial
appliqué
expression
empêche
sortie
d'un
message
d'erreur
cas
problème
peut
toujours
récupérer
message
d'erreur
éventuel
l'aide
variable
php_errormsg
uniquement
l'option
track_errors
php.ini
retour=
tab
'toto
'
//
retourne
d'erreurs
l'index
toto
n'existe
4.7
Opérateur
d'exécution
peut
exécuter
commandes
externes
PHP
comme
Shell
opérateurs
guillemts
inverses
`
altgr+6
Attention
l'option
safe_mode
doit
être
php.ini
peut
aussi
utiliser
fonction
shell_exec
fait
exécuter
commande
shell
4.8
Opérateurs
d'incrémentation/décrémentation
dispose
comme
opérateurs
++
utiliser
avant
après
nom
variable
a++
//
retourne
puis
l'incrémente
1
++
//
incrémente
1
puis
retourne
//
retourne
puis
décrémente
1
//
décrémente
1
puis
retourne
Attention
opérateurs
réagissent
types
variables
PHP
réagit
comme
PERL
Ainsi
a=
'
Z
'
a++
echo
//
retourne
AA
a++
echo
//
retourne
AB
4.9
Opérateurs
logiques
opérateurs
logiques
and
&
&
and
b
&
&
b
vrai
b
vrais
or
||
or
b
||
b
vrai
b
vrais
xor
xor
b
vrai
b
vrais
deux
temps
vrai
faux
Attention
and
or
n'ont
priorité
priorité
plus
faible
&
&
||
S.
ROHAUT
Cours
Programmation
PHP
Page
21/93
4.10
Opérateurs
chaînes
deux
opérateurs
chaînes
concatène
deux
chaînes
entre
elles
.=
déjà
vu
l'opérateur
d'assignation
a=
Bonjour
b=
amis
//
b
contient
Bonjour
amis
b.=
Salut
``
//
b
contient
Bonjour
amis
Salut
4.11
Opérateur
tableaux
peut
additionner
deux
tableaux
entre
+
tableau
droite
ajouté
tableau
gauche
S.
ROHAUT
Cours
Programmation
PHP
Page
22/93
5
notion
d'expression
PHP
expression
peut
être
résumée
tout
valeur
Ceci
dit
remarque
vite
PHP
tout
presque
expression
variable
constante
voient
affectés
valeurs
valeur
l'expression
variable
constante
pouvons
résumer
disant
qu'une
expression
représente
tout
peut
être
évalué
peut
évaluer
valeurs
fonction
peut
aussi
être
expression
retourne
valeur
dit
généralement
qu'une
fonction
retourné
telle
valeur
comparaison
aussi
expression
retourne
valeur
booléenne
calcul
aussi
expression
puisqu'une
valeur
retournée
affectée
calculée
PHP
orienté
expression
fait
tout
presque
PHP
expression
PHP
cherche
décomposer
tout
possible
expressions
évaluer
optimiser
traitements
Voici
quelques
exemples
a=2
distingue
premier
coup
d'oeil
deux
valeurs
variable
valeur
2
variable
mise
jour
valeur
2
Or
interne
troisième
valeur
rentre
jeu
valeur
l'assignation
ici
elle-même
assignée
2
ligne
signifie
fait
a=2
expression
vaut
2
b=
a=2
assignations
analysées
droite
gauche
Ici
l'expression
a=2
vaut
2
b
vaut
2
aussi
C'est
plus
rapide
écrire
exécuter
a=2
b=2
a=
a+3
PHP
évalue
d'abord
l'expression
a+3
valeur
incrémentée
3
assigne
nouvelle
valeur
a+=3
résultat
plus
rapide
car
n'est
évalué
qu'une
seule
fois
peut
arriver
avoir
expressions
surprenantes
a=2
b=
a+=3
variable
incrémentée
3
vaut
5
L'expression
a+=3
vaut
5
b
voit
assigné
valeur
5
L'expression
vaut
5
Dernière
chose
b
l'expression
vrai
l'expression
b
évaluée
sinon
l'expression
évaluée
S.
ROHAUT
Cours
Programmation
PHP
Page
23/93
a=TRUE
b=2
c=3
echo
b
//
affiche
2
S.
ROHAUT
Cours
Programmation
PHP
Page
24/93
6
structures
contrôle
6.1
if
if
expression
commande
{
bloc
commandes
}
else
commande
{
bloc
commandes
}
aussi
elseif
combinaison
if
else
elseif
mot
peut
aussi
s'écrire
deux
mots
résultat
peut
écrire
elseif
chaîne
premier
l'expression
vrai
exécuté
If
expression
commande
{
bloc
commandes
}
elsif
expression
commande
{
bloc
commandes
}
elsif
expression
commande
{
bloc
commandes
}
peut
placer
HTML
comme
commande
bloc
commande
php
if
==
5
{
=
5
php
}
peut
aussi
utiliser
syntaxe
alternative
ouvre
bloc
juste
après
if
else
elseif
deux
points
ferme
l'instruction
endif
php
if
==
5
print
``
=
5
print
``
elseif
==
6
print
``
=
6
print
``
``
else
print
``
vaut
5
6
endif
6.2
while
6.2.1
while
classique
C'est
boucle
tant
simple
tant
condition
n'est
vraie
continue
boucle
L'expression
placée
début
boucle
l'expression
fausse
avant
rentrer
boucle
boucle
n'est
exécutée
While
expression
commande
{
bloc
commandes
}
peut
aussi
utiliser
syntaxe
alternative
while
expression
commande
{
bloc
commandes
}
endwhile
6.2.2
do
while
C'est
seconde
possibilité
cas
commande
bloc
commande
exécutée
S.
ROHAUT
Cours
Programmation
PHP
Page
25/93
moins
fois
car
l'expression
conditionnelle
testée
fin
boucle
do
{
bloc
commandes
}
while
expression
6.3
for
for
PHP
identique
for
C.
for
expr1
expr2
expr3
commande
{
bloc
commandes
}
expr1
exécutée
première
entrée
boucle
expr2
exécutée
chaque
début
d'itération
jusqu
'
l'expression
fausse
auquel
cas
sort
boucle
expr3
exécutée
fin
l'itération
L'usage
habituel
d'une
telle
boucle
placer
l'état
initial
expr1
condition
sortie
expr2
calcul
expr3
peu
effectuer
toutes
sortes
choses
//
1
10
for
i
=
1
i
=
10
print
i
i++
//
infini
for
//
1
10
for
i
=
1
i
=
10
print
i
i++
peut
employer
syntaxe
alternative
endfor
for
expr1
expr2
expr3
commande
{
bloc
commandes
}
endfor
6.4
foreach
boucle
foreach
peut-être
l'une
plus
intéressantes
manipulation
tableaux
résultats
requêtes
SQL
permet
lister
tableaux
dispose
deux
syntaxes
foreach
array_expression
value
commandes
foreach
array_expression
key
=
value
commandes
première
syntaxe
récupère
éléments
tableau
séquentiellement
valeur
l'élément
courant
tableau
placée
value
seconde
syntaxe
presque
identique
sauf
qu'en
plus
clé
l'index
l'élément
actuel
placée
key
Attention
modifier
valeur
value
key
modifie
tableau
car
boucle
travaille
copie
référence
contre
second
cas
comme
dispose
clé
rien
n'empêche
d'assigner
quoi
l'élément
courant
Remarque
appel
foreach
rembobine
automatiquement
tableau
premier
élément
autres
boucles
faut
alors
utiliser
reset
reset
arr
while
list
value
=
each
arr
{
echo
``
Valeur
value
br
\n
}
S.
ROHAUT
Cours
Programmation
PHP
Page
26/93
foreach
arr
value
{
echo
``
Valeur
value
br
\n
}
=
array
=
1
deux
=
2
trois
=
3
dix-sept
=
17
foreach
k
=
v
{
print
``
\
k
=
v.\n
}
6.5
break
continue
L'instruction
break
permet
sortir
d'un
for
while
foreach
switch
peut
indiquer
combien
structures
souhaite
sortir
elles
emboîtées
L'instruction
continue
permet
passer
l'itération
suivante
Attention
PHP
conside
switch
comme
boucle
cas
réévalue
switch
peut
indiquer
continue
combien
structures
emboîtées
relancer
6.6
switch
switch
équivalent
série
if
permet
comparer
grand
nombre
valeurs
switch
i
{
case
0
print
``
i
egale
0
break
case
1
print
``
i
egale
1
break
case
2
print
``
i
egale
2
break
default
print
``
i
inférieur
0
supérieur
2
}
switch
s'arrête
première
expression
case
vraie
puis
exécute
code
suivant
l'ordre
indiqué
jusqu
'
première
instruction
break
S'il
'
break
tout
code
jusqu
'
fin
switch
exécuté
l'exemple
suivant
i
vaut
0
tous
print
affichés
switch
i
{
case
0
print
``
i
egale
0
case
1
print
``
i
egale
1
case
2
print
``
i
egale
2
}
Notez
aussi
default
doit
intervenir
dernier
sinon
'
aucun
intérêt
Enfin
peut
employer
syntaxe
alternative
endswitch
S.
ROHAUT
Cours
Programmation
PHP
Page
27/93
switch
i
case
0
print
``
i
egale
0
break
case
1
print
``
i
egale
1
break
endswitch
6.7
return
Contrairement
d'autres
langages
return
n'est
fonction
instruction
fonction
return
sert
sortir
celle-ci
retourner
valeur
script
sort
celui-ci
Attention
cependant
scripts
inclus
voir
require
include
return
type
code
considère
qu'il
sort
fonction
require
include
sort
script
fonction
lesquels
code
inclus
Comme
return
élément
langage
fonction
besoin
d'utiliser
parenthèses
6.8
require
include
_once
require
include
incluent
l'endroit
actuel
exécutent
fichier
PHP
identiques
fonctionnement
exception
traitement
erreurs
include
produit
warning
code
continue
principe
s'exécuter
tandis
qu'un
require
produit
erreur
fatale
l'exécution
s'arrête
Comme
require
include
éléments
langage
fonctions
besoin
d'utiliser
parenthèses
require_once
include_once
ressemblent
leurs
homologues
cependant
différence
Quoi
qu'il
arrive
fichier
inclus
seule
fois
second
require_once
apparaît
fichier
l'instruction
exécutée
S.
ROHAUT
Cours
Programmation
PHP
Page
28/93
7
fonctions
7.1
Syntaxe
portée
Voici
syntaxe
d'une
fonction
function
fonc
arg1
arg2
arg3
argn
{
bloc
commandes
return
valeur
}
fonction
'
besoin
d'être
déclarée
avant
d'être
utilisée
sauf
voulez
rester
compatible
PHP3
moment
qu'elle
apparaît
script
cependant
deux
exceptions
fonction
conditionnelle
c'est
dire
déclarée
if
fonction
déclarée
autre
fonction
premier
cas
inconnue
reste
code
tant
condition
if
n'est
vraie
second
cas
connue
quand
première
fonction
exécutée
Voici
exemple
tiré
manuel
premier
cas
makefoo
=
true
/
*
Impossible
d'appeler
foo
ici
car
fonction
n'existe
pouvons
utiliser
bar
*
/
bar
if
makefoo
{
function
foo
{
echo
``
n'existe
tant
programme
n'est
passé
ici.\n
}
}
/
*
Maitenant
pouvons
appeler
foo
car
makefoo
maintenant
vrai
*
/
if
makefoo
foo
function
bar
{
echo
``
J'existe
dès
début
programme.\n
}
second
cas
function
foo
{
function
bar
{
echo
``
n'existe
tant
foo
n'est
appelé.\n
}
}
/
*
Impossible
d'appeler
bar
ici
car
n'existe
*
/
foo
/
*
Maintenant
pouvons
appeler
bar
car
l'utilisation
foo
'
rendu
accessible
*
/
bar
7.2
Arguments
peut
passer
autant
d'arguments
souhaité
fonction
PHP
tous
types
arguments
S.
ROHAUT
Cours
Programmation
PHP
Page
29/93
séparés
virgules
défaut
passés
copie
function
affiche
msg
{
echo
msg
}
possible
passer
arguments
référence
peut
changer
valeur
l'intérieur
fonction
cela
rajoute
&
devant
l'argument
peut
passer
ponctuellement
variable
référence
plaçant
&
devant
nom
lors
l'appel
fonction
function
modif
&
msg
{
msg=
coucou
}
msg=
salut
modif
msg
echo
msg
//
coucou
peut
aussi
définir
valeurs
défaut
ATTENTION
liste
paramètres
valeurs
défaut
doivent
être
dernier
function
affiche
nom
prenom=
toto
{
echo
``
nom
prenom
}
Enfin
peut
utiliser
nombre
variable
d'arguments
fonctions
func_num_args
func_get_arg
func_get_args
function
foo
{
numargs
=
func_num_args
echo
``
Nombre
d'arguments
numargs\n
}
foo
1
2
3
//
affiche
'Nombre
d'arguments
3'
7.3
Valeur
retour
retourne
valeur
l'instruction
return
peut
retourner
tout
type
valeurs
plusieurs
temps
Cependant
rien
n'empêche
cas
retourner
tableau
fonction
peut
aussi
retourner
référence
cas
doit
être
déclarée
&
devant
nom
function
carre
num
{
return
num
*
num
}
echo
carre
4
//
affiche
'16'
7.4
Fonctions
internes
plus
fonctions
définies
l'utilisateur
PHP
propose
grand
nombre
fonctions
internes
couvrant
multitude
domaines
accéder
fonctions
faut
simplement
appeler
nom
module
correspondant
compilé
PHP
verrons
chapitres
suivants
comment
utiliser
certaines
S.
ROHAUT
Cours
Programmation
PHP
Page
30/93
8
Gestion
formulaires
PHP
8.1
GET
POST
but
récupérer
contenu
champs
d'un
formulaire
HTML
code
PHP
pouvoir
traiter
Lorsqu'un
formulaire
envoyé
script
PHP
toutes
variables
disponibles
automatiquement
script
formulaires
peuvent
être
type
GET
POST
rappel
formulaire
type
GET
informations
passées
directement
l'URL
clair
peut
poser
problèmes
limitations
suivant
serveur
256
8192
octets
selon
cas
méthode
POST
'
genre
limitation
car
informations
transmises
conteneur
variables
globales
l'entête
plus
cachées
PHP
peut
gérer
deux
méthodes
manière
transparente
8.2
Récupération
tableau
Chaque
champ
formulaire
PHP
défini
nom
valeur
script
PHP
va
récupérer
noms
valeurs
tableaux
spéciaux
dit
superglobaux
accessibles
depuis
partout
méthode
GET
tableau
_GET
méthode
POST
tableau
_POST
souhaitez
soucier
méthode
pouvez
utiliser
tableau
_REQUEST
index
nom
champ
formulaire
variable
passée
URL
valeur
valeur
champ
exemple
form
action=
foo.php
method=
post
Name
input
type=
text
name=
username
br
Email
input
type=
text
name=
email
br
input
type=
submit
name=
submit
value=
Submit
``
/form
page
PHP
foo.php
php
echo
_POST
'username
'
echo
_REQUEST
'email
'
Imaginons
l'appel
d'une
page
test.php
URL
comme
ceci
http
//www.monsite.com/test.php
id=1
Ici
transmet
variable
via
URL
méthode
implicite
GET
récupérer
id
code
PHP
peut
faire
php
echo
_GET
'id
'
echo
_REQUEST
'id
'
_GET
contiendra
variables
type
GET
_POST
contiendra
variables
type
POST
_REQUEST
contient
variables
type
POST
GET
aussi
variables
cookies
aussi
possible
procéder
autrement
récupérant
nom
champ
directement
tant
variable
sans
passer
tableau
cela
faut
vérifier
fichier
php.ini
valeur
register_globals
cas
noms
champs
formulaire
S.
ROHAUT
Cours
Programmation
PHP
Page
31/93
noms
variables
php
echo
username
echo
email
8.3
Récupération
directe
valeur
off
diverses
raisons
sécurité
droit
etc
souhaitez/pouvez
modifier
existe
tout
méthode
fonction
import_request_variables
permet
d'effectuer
explicitement
chose
fonction
prend
deux
paramètres
second
optionnel
Après
exécution
récupère
variables
sans
passer
tableau
premier
paramètre
type
variables
qu'on
souhaite
récupérer
–
P
/
p
variables
type
POST
–
G
/
g
variables
type
GET
–
/
variables
type
cookie
peut
cumuler
l'ensemble
attention
l'ordre
second
paramètre
préfixe
qu'on
souhaite
donner
nom
variables
qu'on
va
récupérer
Voici
deux
exemples
php
import_request_variables
``
p
echo
username
php
import_request_variables
``
P
Post_
echo
Post_username
peut
aussi
passer
fonction
extract
permet
d'exporter
tableau
variables
Ainsi
tableau
_POST
php
extract
_POST
echo
username
8.4
Utiliser
tableaux
formulaires
permettent
d'utiliser
listes
choix
multiples
PHP
doit
récupérer
l'ensemble
choix
l'utilisateur
ça
faut
utiliser
tableaux
form
action=
php
echo
HTTP_SERVER_VARS
'PHP_SELF
'
method=
post
Name
input
type=
text
name=
personal
name
br
Email
input
type=
text
name=
personal
email
br
Beer
br
select
multiple
name=
vin
option
value=
bordeaux
bordeaux
/option
option
value=
beaujolais
beaujolais
/option
option
value=
loire
loire
/option
/select
br
S.
ROHAUT
Cours
Programmation
PHP
Page
32/93
input
type=
hidden
name=
action
value=
submitted
input
type=
submit
name=
submit
value=
submit
``
/form
l'exemple
précédent
exemple
sélectionne
plusieurs
vins
ex
bordeaux
beaujolais
vin
0
bordeaux
vin
1
beaujolais
S.
ROHAUT
Cours
Programmation
PHP
Page
33/93
9
Date
heure
9.1
Localisation
format
date
d'heure
format
langue
dépendant
l'environnement
d'exécution
code
PHP
Généralement
plupart
serveurs
web
incorporant
PHP
configurés
langue
anglaise
gestion
informations
localisation
anglais
peut
être
préférable
passer
français
site
francophone
simplifie
largement
tâche
peut
effectuer
cela
fonction
setlocale
Voici
deux
exemples
sous
NT/2000
autre
sous
Linux
if
substr
php_uname
0
7
=
``
Windows
{
setlocale
LC_TIME
fr_FR
euro
}
else
{
setlocale
LC_TIME
fr
}
exemple
vérifions
d'abord
quel
système
faire
fonction
php_uname
puis
fonction
résultat
passons
localisation
française
selon
deux
méthodes
Après
changement
appels
fonctions
retournant
jours
semaine
mois
feront
français
9.2
Récupérer
date
l'heure
9.2.1
date
plus
simple
d'utiliser
fonction
date
retourne
l'heure
locale
sous
forme
d'une
chaîne
caractères
préciser
premier
paramètre
second
paramètre
peut
préciser
timestamp
souhaite
l'heure
actuelle
récupérer
date
jour
echo
date
``
d/m/Y
//
06/01/2004
Voici
caractères
utilisables
documentation
PHP
•
-
``
am
matin
``
pm
après-midi
•
-
``
AM
matin
``
PM
après-midi
•
B
-
Heure
Internet
Swatch
•
-
Jour
mois
deux
chiffres
éventuellement
zéro
``
01
``
31
•
-
Jour
semaine
trois
lettres
anglais
exemple
``
Fri
Vendredi
•
F
-
Mois
textuel
version
longue
anglais
i.e
``
January
Janvier
•
g
-
Heure
format
12h
sans
zéros
initiaux
i.e
``
1
``
12
•
G
-
Heure
format
24h
sans
zéros
initiaux
i.e
``
0
``
23
•
h
-
Heure
format
12h
``
01
``
12
•
H
-
heure
format
24h
``
00
``
23
•
i
-
Minutes
``
00
``
59
•
I
i
majuscule
-
``
1
l'heure
d'été
activée
``
0
l'heure
d'hiver
•
-
Jour
mois
sans
zéros
initiaux
``
1
``
31
S.
ROHAUT
Cours
Programmation
PHP
Page
34/93
•
-
'
'
minuscule
-
Jour
semaine
textuel
version
longue
anglais
i.e
``
Friday
Vendredi
•
-
Booléen
savoir
l'année
bissextile
``
1
``
0
•
-
Mois
i.e
``
01
``
12
•
-
Mois
trois
lettres
anglais
exemple
``
Apr
Avril
•
-
Mois
sans
zéros
initiaux
i.e
``
1
``
12
•
O
-
Différence
d'heures
l'heure
Greenwich
exprimée
heures
i.e
``
+0200
•
r
-
Format
date
RFC
822
i.e
``
Thu
21
Dec
2000
16:01:07
+0200
ajouté
PHP
4.0.4
•
-
Secondes
i.e
``
00
``
59
•
-
Suffixe
ordinal
d'un
nombre
anglais
deux
lettres
i.e
``
th
``
nd
•
-
Nombre
jours
mois
donné
i.e
``
28
``
31
•
-
Fuseau
horaire
machine
i.e
``
MET
•
U
-
Secondes
depuis
époque
•
w
-
Jour
semaine
numérique
i.e
``
0
Dimanche
to
``
6
Samedi
•
W
-
Numéro
semaine
l'année
ISO-8601
semaines
commencent
lundi
ajouté
PHP
4.1.0
•
-
Année
4
chiffres
i.e
``
1999
•
-
Année
2
chiffres
i.e
``
99
•
z
-
Jour
l'année
i.e
``
0
``
365
•
Z
-
Décalage
horaire
secondes
i.e
``
-43200
``
43200
Tout
autre
caractère
peut
être
employé
interprété
désirez
employer
l'un
caractères
faut
verrouiller
antislash
ATTENTION
FONCTION
RESULTAT
ANGLAIS
peut
récupérer
timestamp
actuel
fonction
time
commande
suivante
effet
précédente
echo
date
``
d/m/Y
time
//
06/01/2004
9.2.2
date
locale
strftime
formater
résultat
local
tenir
compte
localisation
faut
utiliser
fonction
strftime
tient
compte
langue
résultat
français
premier
paramètre
chaîne
formatage
second
éventuel
timestamp
•
-
nom
abrégé
jour
semaine
local
•
-
nom
complet
jour
semaine
local
•
b
-
nom
abrégé
mois
local
•
B
-
nom
complet
mois
local
•
-
représentation
préférée
dates
heures
local
•
-
numéro
siècle
l'année
divisée
100
arrondie
entre
00
99
S.
ROHAUT
Cours
Programmation
PHP
Page
35/93
•
-
jour
mois
numérique
intervalle
01
31
•
-
identique
m/
d/
•
e
-
numéro
jour
mois
chiffres
précédés
d'un
espace
'
1
'
'31
'
•
h
-
identique
b
•
H
-
heure
journée
numérique
24-heures
intervalle
00
23
•
I
-
heure
journée
numérique
12-
heures
intervalle
01
12
•
-
jour
l'année
numérique
intervalle
001
366
•
-
mois
numérique
intervalle
1
12
•
-
minute
numérique
•
-
newline
character
•
p
-
àm
'
oùpm
'
fonction
l'heure
absolue
fonction
valeurs
enregistrées
local
•
r
-
l'heure
format
a.m
p.m
•
R
-
l'heure
format
24h
•
-
secondes
numérique
•
-
tabulation
•
-
l'heure
actuelle
égal
H
•
u
-
numéro
jour
semaine
1
7
1
représente
Lundi
•
U
-
numéro
semaine
l'année
considérant
premier
dimanche
l'année
comme
premier
jour
première
semaine
•
V
-
numéro
semaine
comme
défini
l'ISO
8601:1988
sous
forme
décimale
01
53
semaine
1
première
semaine
plus
4
jours
l'année
courante
Lundi
premier
jour
•
W
-
numéro
semaine
l'année
considérant
premier
lundi
l'année
comme
premier
jour
première
semaine
•
w
-
jour
semaine
numérique
Dimanche
=
0
•
x
-
format
préféré
représentation
date
sans
l'heure
•
X
-
format
préféré
représentation
l'heure
sans
date
•
-
l'année
numérique
deux
chiffres
00
99
•
-
l'année
numérique
quatre
chiffres
•
Z
-
fuseau
horaire
nom
abréviation
•
-
caractèrè
'
littéral
9.2.3
Retour
tableau
getdate
fonction
getdate
permet
aussi
récupérer
date
l'heure
actuels
éventuellement
timestamp
paramètre
sous
forme
tableau
indexé
selon
valeurs
suivantes
•
``
seconds
-
secondes
•
``
minutes
-
minutes
S.
ROHAUT
Cours
Programmation
PHP
Page
36/93
•
``
hours
-
heures
•
``
mday
-
jour
mois
•
``
wday
-
jour
semaine
numérique
0
dimanche
jusqu
'
6
samedi
•
``
-
mois
numérique
•
``
year
-
année
numérique
•
``
yday
-
jour
l'année
numérique
i.e
``
299
•
``
weekday
-
jour
semaine
texte
complet
anglais
i.e
``
Friday
•
``
month
-
mois
texte
complet
anglais
i.e
``
January
aujourdhui
=
getdate
mois
=
aujourdhui
'month
'
mjour
=
aujourdhui
'mday
'
annee
=
aujourdhui
'year
'
echo
``
mjour/
mois/
annee
9.2.4
L'heure
localtime
l'heure
peut
utiliser
fonctions
localtime
peut
aussi
prendre
paramètre
timestamp
retourne
tableau
indexé
selon
valeurs
suivantes
•
``
tm_sec
-
secondes
•
``
tm_min
-
minutes
•
``
tm_hour
-
heure
•
``
tm_mday
-
jour
mois
•
``
tm_mon
-
mois
l'année
•
``
tm_year
-
Année
incompatible
an
2000
•
``
tm_wday
-
Jour
semaine
•
``
tm_yday
-
Jour
l'année
•
``
tm_isdst
-
Est-ce
l'heure
d'hiver
pris
effet
9.3
Récupérer
n'importe
quelle
date
peut
récupérer
n'importe
quelle
date
timestamp
chaîne
peut
cela
utiliser
fonction
strtotime
prend
comme
paramètre
chaîne
texte
anglais
qu'elle
essaie
convertir
timestamp
Voici
quelques
exemples
echo
strtotime
``
now
//
timestamp
actuel
echo
strtotime
``
-1
day
//
hier
echo
strtotime
``
+1
day
//
demain
echo
strtotime
``
11
september
2001
//
11
septembre
2001
echo
strtotime
``
+1
year
+2
weeks
+3
days
//
1
an
2
semaines
3
jours
S.
ROHAUT
Cours
Programmation
PHP
Page
37/93
10
MySQL
10.1
Présentation
MySQL
SGBDR
Système
Gestion
base
Données
Relationnel
définit
lui-
comme
base
données
Open
Source
plus
populaire
monde
Rien
ça
c'est
vrai
Edité
société
MySQL
AB
MySQL
produit
Open
Source
libre
d'utilisation
sous
licence
GPL
projets
libres
Cependant
licence
commerciale
nécessaire
autres
cas
notamment
souhaite
redistribuer
MySQL
produit
non
libre
souhaite
support
technique
version
production
actuelle
MySQL
version
4
4.0.17
l'écriture
support
grande
majorité
serveurs
hébergeurs
encore
dernières
versions
MySQL
3.23
3.23.58
future
version
actuellement
développement
5.0.0
n'est
surtout
utiliser
production
principales
qualités
MySQL
simplicité
rapidité
principale
défaut
manque
fonctionnalités
dites
avancées
versions
précédentes
clé
étrangères
procédures
stockées
triggers
selects
imbriqués
notamment
cela
doit
occulter
puissance
l'ajout
fonctionnalités
avancées
comme
syntaxe
SQL
étendue
replace
limit
delete
index
recherche
fulltext
permettant
créer
moteurs
recherche
prochaine
version
stable
5.0
comblera
lacunes
précédentes
versions
support
complet
syntaxe
SQL
ANSI-99
10.2
Outils
10.2.1
PhpMyAdmin
S'il
reste
bien
entendu
possible
d'utiliser
MySQL
ligne
commande
peu
comme
sqlplus
Oracle
bien
plus
l'aise
environnement
plus
intuitif
Ainsi
l'outil
phpMyAdmin
interface
web
MySQL
permettant
d'effectuer
plupart
tâches
maintenance
d'utilisation
solution
fonctionne
depuis
n'importe
quel
navigateur
indépendante
machine
accède
phpMyAdmin
généralement
l'URL
http
//server_name/mysql
S.
ROHAUT
Cours
Programmation
PHP
Page
38/93
10.2.2
MysqlCC
MysqlCC
MySQL
Control
Center
front-end
graphique
officiel
MySQL
développé
société
Basé
e
toolkit
Qt
disponible
sous
Windows
Unix
linux
bientôt
MacOS
permet
l'administration
serveur
gestion
bases
tables
l'exécution
requêtes
SQL
interactives
coloration
syntaxique
10.3
Créer
base
partir
l'écran
d'accueil
phpMyAdmin
saisit
nom
base
Créer
base
données
faut
préférence
choisir
nom
simple
intuitif
Puis
clique
Créer
Après
création
nouvelle
page
s'affiche
c'est
page
principale
d'administration
base
haut
toujours
présents
après
l'exécution
d'une
commande
résultats
celle-ci
écran
permet
notamment
l'exécution
commandes
SQL
travail
tables
10.4
Utilisateurs
droits
menu
gauche
choisit
-
tiret
correspond
racine
administration
serveur
MySQL
lui-même
nouvelle
page
choisit
Utilisateurs
privilèges
page
suivante
permet
d'ajouter
utilisateur
faut
faire
attention
chose
serveur
effet
suivant
configuration
initiale
Linux
exemple
droits
dépendent
façon
accédée
base
Ainsi
localhost
127.0.0.1
identiques
base
appelée
depuis
autre
IP
autre
nom
l'utilisateur
n'aura
tous
droits
cas
doute
suffit
choisir
Tout
serveur
créer
administrateur
mieux
donner
tous
privilèges
utilisateur
standard
requêtes
sélection
d'ajout
mises
jour
suppression
d'enregistrements
choisira
privilèges
Select
Insert
Update
Delete
S.
ROHAUT
Cours
Programmation
PHP
Page
39/93
fois
l'utilisateur
créé
plusieurs
bases
présentes
peut
affiner
droits
chacune
bases
liste
utilisateurs
leurs
droits
base
affiché
haut
choisissant
modifier
peut
affiner
sélection
notamment
passant
autres
privilèges
droits
bases
tables
colonnes
10.5
Créer
modifier
tables
retourne
menu
gauche
base
existante
l'écran
d'administration
saisit
bas
page
nom
table
nombre
champs
colonnes
possible
après
coup
d'en
rajouter
d'en
supprimer
Puis
choisit
Créer
L'étape
suivante
consiste
définir
table
Intéressons-nous
différents
types
champs
possibles
10.5.1
Types
Numériques
10.5.1.1
Types
entiers
chaque
entier
peut
ajouter
mot
clé
UNSIGNED
non
signé
Attention
type
BIGINT
limitations
voir
documentation
MySQL
Entre
parenthèses
valeurs
UNSIGNED
possible
fournir
précision
d'affichage
nombre
chiffres
exemple
taille
2
TINYINT
équivaut
valeur
0
99
•
TINYINT
-128
127
0
255
•
SMALLINT
-32768
32767
0
65535
•
MEDIUMINT
-8388608
8388607
0
16777215
•
INT
INTEGER
-2147483648
2147483647
0
4294967295
•
BIGINT
-9223372036854775808
9223372036854775807
0
18446744073709551615
10.5.1.2
Types
réels
flottants
•
FLOAT
nombre
virgule
flottante
•
DOUBLE
DOUBLE
PRECISION
REAL
nombre
virgule
flottante
double-précision
•
DECIMAL
DEC
NUMERIC
spécial
valeurs
unpacked
c'est
chaîne
texte
10.5.1.3
Types
booléens
•
BIT
BOOL
BOOLEAN
depuis
4.1
bit
équivaut
TINYINT
1
10.5.2
Types
caractères
types
méritent
peu
plus
d'explications
S.
ROHAUT
Cours
Programmation
PHP
Page
40/93
10.5.2.1
Types
CHAR
CHAR
chaîne
caractère
taille
peut
être
1
255
caractères
taille
définie
création
table
table
champ
prend
effectivement
nombre
caractères
indiqué
taille
réelle
inférieure
VARCHAR
chaîne
caractère
taille
maximale
peut
être
1
255
caractères
longueur
peut
être
variable
MySQL
stocke
plus
octet
contenant
longueur
chaîne
C'est
optimisation
chaîne
100
caractères
va
prendre
100+1
octets
place
table
peut
rajouter
définition
BINARY
défaut
champs
CHAR
VARCHAR
triés
sans
tenir
compte
casse
L'attribut
BINARY
permet
trier
tenant
compte
casse
selon
machine
champs
espaces
finaux
supprimés
10.5.2.2
Types
TEXT
types
TEXT
BLOB
permettent
stocker
quantités
variables
texte
selon
leurs
définitions
Ici
longueur
texte
•
TINY
BLOB/TEXT
L+1
octets
2^8
•
BLOB/TEXT
L+2
octets
2^16
•
MEDIUM
BLOB/TEXT
L+3
octets
2^24
•
LONG
BLOB/TEXT
L+4
octets
2^32
TEXT
BLOB
s'utilisent
manière
identique
faut
respecter
rêgles
suivantes
•
Lors
tris
champ
BLOB
tient
compte
casse
champ
TEXT
•
peut
faire
recherche
FULLTEXT
champ
type
BLOB
faudra
utiliser
champs
TEXT
•
champs
type
TEXT
BLOB
prennent
valeurs
défaut
•
espaces
finaux
supprimés
10.5.2.3
Type
ENUM
champ
type
ENUM
peut
contenir
qu'une
chaîne
texte
plusieurs
prédéfinies
création
table
Voici
exemple
CREATE
TABLE
test
id
int
NOT
NULL
auto_increment
c_enum
enum
'oui
'
'non
'
PRIMARY
KEY
id
S.
ROHAUT
Cours
Programmation
PHP
Page
41/93
champ
c_enum
pourra
prendre
deux
valeurs
oui
non
tente
'
mettre
autre
chose
insert
into
text
c_enum
values
'toto
'
cas
chaîne
vide
insérée
place
champ
déclaré
NOT
NULL
valeur
défaut
devient
première
liste
d'énumération
10.5.2.4
Type
SET
type
set
ressemble
peu
type
ENUM
sauf
champ
peut
avoir
plusieurs
valeurs
parmi
liste
prédéfinie
création
table
type
ENUM
seule
valeur
autorisée
champ
type
SET
plusieurs
valeurs
séparées
espaces
autorisées
CREATE
TABLE
test
id
int
11
NOT
NULL
auto_increment
c_set
set
'oui
'
'non
'
PRIMARY
KEY
id
insert
into
test
c_set
values
'oui
non
'
insert
into
test
c_set
values
'non
oui
'
insert
into
test
c_set
values
'oui
effectue
recherche
d'un
élément
SET
LIKE
fonction
FIND_IN_SET
select
*
from
test
where
c_set
LIKE
'
oui
'
select
*
from
test
where
FIND_IN_SET
'oui
'
c_set
0
10.5.3
Types
date
Attention
dates
logique
MySQL
laisser
développeurs
soin
contrôler
validité
leurs
dates
Ainsi
MySQL
autorisera
l'enregistrement
d'une
date
type
2004-02-30
seuls
tests
effectués
validité
mois
entre
0
12
validité
jour
entre
0
31
zéro
0
autorisé
raisons
pratiques
stockage
l'année
l'année/mois
seulement
exemple
Voici
quelques
autres
informations
•
MySQL
comparaisons
notamment
essaie
d'interpréter
format
date
qu'on
passe
C'est
cas
comparaisons
entre
champs
type
date
champs
texte
plupart
cas
résultat
celui
attendu
attention
tout
formalisme
•
dates
doivent
être
données
préférence
format
année-mois-jour
L'année
doit
toujours
apparaître
premier
cas
d'un
année-jour-mois
attention
MySQL
peut
deviner
2004-02-05
5
février
2
mai
•
date
utilisée
calcul
numérique
convertie
nombre
timestamp
•
valeur
illégale
transmise
c'est
valeur
zéro
0
retenue
valeur
zéro
dépend
type
champ
•
gestion
l'an
2000
fait
ainsi
•
cas
d'années
4
chiffres
aucun
souci
vaut
mieux
TOUJOURS
utiliser
S.
ROHAUT
Cours
Programmation
PHP
Page
42/93
années
4
chiffres
•
cas
d'une
année
deux
chiffes
00-69
converties
2000-2069
70-99
converties
1970-1999
10.5.3.1
Formats
supportés
•
AAAA-MM-JJ
HH
MM
SS
AA-MM-JJ
HH
MM
SS
séparateurs
peuvent
être
n'importe
quoi
AAAA/MM/JJ
HH.MM.SS
valable
•
AAAA-MM-JJ
AA-MM-JJ
remarque
séparateurs
•
AAAAMMJJHHMMSS
AAMMJJHHMMSS
chaîne
nombre
signification
tant
date
•
AAAAMMJJ
AAMMJJ
remarque
10.5.3.2
Type
DATETIME
type
DATETIME
permet
stocker
date
l'heure
sous
format
AAAA-MM-JJ
HH
MM
SS
zéro
0000-00-00
00:00:00
10.5.3.3
Type
DATE
type
seule
date
stockée
format
AAAA-MM-JJ
zéro
0000-00-00
10.5.3.4
Type
TIMESTAMP
type
TIMESTAMP
permet
stocker
implicitement
automatiquement
timestamp
heure
courante
lors
d'un
enregistrement
données
INSERT
UPDATE
table
dispose
d'un
champ
TIMESTAMP
lors
l'ajout
mise
jour
d'un
celui-ci
automatiquement
mis
jour
ligne
d'enregistrement
colonne
'
besoin
d'être
explicitement
spécifiée
spécifie
alors
peut
mettre
n'importe
quelle
valeur
CREATE
TABLE
test
id
int
11
NOT
NULL
auto_increment
c_ts
timestamp
14
NOT
NULL
c_txt
varchar
10
NOT
NULL
default
``
PRIMARY
KEY
id
insert
into
test
c_txt
values
'toto
'
select
c_ts
from
test
20040112143212
update
test
set
c_txt='truc
'
select
c_ts
from
test
20040112143339
remarque
résultat
retourné
MySQL
colonne
TIMESTAMP
n'est
valeur
timestamp
Unix
bien
telle
interne
valeur
formatée
défaut
TIMESTAMP
S.
ROHAUT
Cours
Programmation
PHP
Page
43/93
retourne
valeur
numérique
14
caractères
peut
choisir
taille
création
table
•
TIMESTAMP
TIMESTAMP
14
AAAAMMJJHHMMSS
•
TIMESTAMP
12
AAMMJJHHMMSS
•
TIMESTAMP
10
AAMMJJHHMM
•
TIMESTAMP
8
AAAAMMJJ
•
TIMESTAMP
6
AAMMJJ
•
TIMESTAMP
4
AAMM
•
TIMESTAMP
2
AA
tous
formats
spécifiez
toujours
l'année
mois
jour
timestamp
4
2
sinon
date
invalide
10.5.3.5
Type
TIME
type
TIME
peut
être
utilisé
stocker
information
horaire
format
HH
MM
SS
HHH
MM
SS
valeur
peut
être
négative
valeurs
maximales
possibles
vont
-838:59:59
838:59:59
TIME
sert
'
stocker
heure
journée
intervalle
durée
explique
plage
horaire
accède
comme
ceci
HH
MM
SS.fraction
jour
fraction
n'est
stockée
encore
HH
MM
SS
HH
MM
HH
MM
SS
HH
MM
HH
SS
HHMMSS
.SS
MMSS
10.5.3.6
Type
YEAR
type
YEAR
stocke
uniquement
l'année
plage
allant
1901
2155
L'interprétation
valeurs
deux
chiffres
soumise
l'interprétation
gestion
l'an
2000
10.5.4
Création
Syntaxe
SQL
utilise
commande
SQL
CREATE
CREATE
TABLE
IF
NOT
EXIST
nom_table
champ1
TYPE
NOT
NULL|
NULL
DEFAULT
valeur_defaut
AUTO_INCREMENT
PRIMARY
KEY
PRIMARY
KEY
nom_champ
KEY
nom
col1
col2
INDEX
nom
col1
col2
UNIQUE
INDEX
nom
col1
col2
FULTEXT
INDEX
nom
col1
col2
TYPE=type_table
Notez
S.
ROHAUT
Cours
Programmation
PHP
Page
44/93
•
KEY
INDEX
synonymes
•
PRIMARY
KEY
index
UNIQUE
toutes
colonnes
doivent
être
NOT
NULL
•
PRIMARY
KEY
peut
contenir
plusieurs
colonnes
cas
PRIMARY
KEY
doit
apparaître
niveau
définition
d'une
colonne
syntaxe
PRIMARY
KEY
cols
doit
être
utilisée
•
peut
avoir
qu'un
seul
index
PRIMARY
KEY
plusieurs
index
UNIQUE
•
application
veut
obtenir
PRIMARY
KEY
d'une
table
qu'il
n'existe
alors
MySQL
retournera
premier
index
UNIQUE
trouvé
•
donne
noms
index
celui-ci
généré
automatiquement
prenant
nom
première
colonne
l'index
suivi
d'un
suffixe
numérique
col_1
col_2
•
Bien
cela
déconseillé
peut
établir
index
colonne
TEXT
BLOB
cas
faut
obligatoirement
spécifier
longueur
d'index
exemple
CREATE
TABLE
f_message
id_message
int
10
unsigned
NOT
NULL
auto_increment
id_msg_initial
int
11
unsigned
NOT
NULL
default
'
0
'
id_msg_prec
int
10
unsigned
NOT
NULL
default
'
0
'
id_forum
int
10
NOT
NULL
default
'
0
'
login
varchar
20
NOT
NULL
default
``
date
datetime
NOT
NULL
default
'0000-00-00
00:00:00
'
sujet
varchar
200
NOT
NULL
default
``
texte
text
PRIMARY
KEY
id_message
KEY
precedent
id_msg_prec
KEY
login
login
KEY
forum
id_forum
KEY
initial
id_msg_initial
FULLTEXT
KEY
ft1
sujet
texte
TYPE=MyISAM
10.5.5
Types
tables
MyISAM
InnoDB
Type
table
particulier
MySQL
type
défaut
MyISAM
gestionnaire
tables
originel
MySQL
simple
rapide
correspondant
majorité
besoins
second
type
principal
InnoDB
permet
gestion
transactions
verrouillage
données
commit
rollback
restauration
après
crash
surtout
contraintes
d'intégrité
clés
étrangères
possibles
CREATE
TABLE
parent
id
INT
NOT
NULL
PRIMARY
KEY
id
TYPE=INNODB
CREATE
TABLE
child
id
INT
parent_id
INT
INDEX
par_ind
parent_id
FOREIGN
KEY
parent_id
REFERENCES
parent
id
DELETE
SET
NULL
TYPE=INNODB
peut
aussi
utiliser
clauses
DELETE
CASCADE
DELETE
SET
NULL
Quelques
règles
respecter
l'utilisation
S.
ROHAUT
Cours
Programmation
PHP
Page
45/93
•
DELETE
CASCADE
ligne
table
parente
supprimée
lignes
correspondantes
clé
étrangère
automatiquement
supprimées
table
fille
l'exemple
suppression
d'un
enregistrement
table
parent
supprime
tous
enregistrements
table
child
parent_id
égal
id
l'enregistrement
table
parent
supprimé
•
DELETE
SET
NULL
enregistrements
fils
supprimés
colonnes
clé
étrangère
ici
parent_id
prennent
valeur
NULL
•
index
doit
exister
clé
parente
clé
fille
10.5.6
Index
FULLTEXT
10.5.6.1
Création
dernières
versions
3.23.23
supérieures
MySQL
permet
l'indexation
recherche
plusieurs
champs
type
TEXT
peut
ainsi
créer
moteurs
recherches
très
rapidement
ça
faut
créer
index
FULLTEXT
Texte
Entier
chaque
mot
champ
texte
fait
indexé
index
FULLTEXT
fonctionnent
qu'avec
champs
type
TEXT
BLOB
VARCHAR
tables
type
MyISAM
uniquement
Voici
comment
créer
index
FULLTEXT
table
existe
déjà
CREATE
FULLTEXT
INDEX
ft1
f_message
sujet
texte
création
table
rajoute
ligne
création
d'index
FULLTEXT
KEY
ft1
sujet
texte
peut
préciser
plusieurs
colonnes
genre
d'index
ATTENTION
lors
recherche
créé
index
deux
colonnes
peut
rechercher
seule
deux
colonnes
temps
cas
faudra
créer
plusieurs
index
FULLTEXT
10.5.6.2
Recherche
effectue
recherche
fonctions
MATCH
AGAINST
fonction
MATCH
permet
préciser
quelles
colonnes
effectue
recherche
fonction
AGAINST
mots
recherchés
SELECT
id_message
FROM
f_message
WHERE
MATCH
sujet
texte
AGAINST
'linux
nvidia
'
requête
va
effectuer
recherche
mots
'linux
'
'nvidia
'
colonnes
'sujet
'
'texte
'
va
retourner
id
messages
correspondants
plus
pertinents
premier
ceux
correspondent
mieux
recherche
Cela
dû
fait
MATCH
clause
WHERE
pertinence
déterminée
MySQL
selon
critères
peu
opaques
tout
comme
nombre
mots
ligne
nombre
mots
uniques
ligne
longueur
ligne
C'est
fonction
MATCH
retourne
pertinence
sous
forme
d'un
flottant
supérieur
égale
S.
ROHAUT
Cours
Programmation
PHP
Page
46/93
zéro
zéro
signifie
pertinence
nulle
correspondance
Plus
valeur
élevée
plus
résultat
pertinent
SELECT
id_message
MATCH
sujet
texte
AGAINST
'linux
nvidia
'
FROM
f_message
requête
récupère
seconde
colonne
valeur
pertinence
Celle-ci
n'est
classée
car
'
WHERE
ORDER
BY
Voici
dernière
méthode
permettant
récupérer
champs
pertinence
triés
ordre
pertinence
SELECT
id_message
sujet
MATCH
sujet
texte
AGAINST
'linux
nvidia
'
FROM
f_messages
WHERE
MATCH
sujet
texte
AGAINST
'linux
nvidia
'
10.5.6.3
Recherche
booléenne
versions
4.x
MySQL
introduit
notion
recherche
booléenne
permet
d'affiner
recherches
SELECT
id_message
FROM
f_message
WHERE
MATCH
sujet
texte
AGAINST
'+linux
+nvidia
+ati
'
IN
BOOLEAN
MODE
Voici
signification
caractères
supplémentaires
•
+
mot
doit
obligatoirement
être
présent
chaque
enregistrement
retourné
•
-
mot
doit
être
présent
enregistrements
retournés
•
valorisation
mot
toto
titi
valorise
plus
toto
titi
recherche
•
grouper
série
mots
•
~
négation
d'un
mot
Contrairement
-
mot
tout
pris
compte
pertinence
négative
•
*
tronquage
d'un
mot
bon
*
=
bonjour
bonsoir
•
guillemets
``
chaîne
recherchée
telle
quelle
10.6
MySQL
PHP
10.6.1
Connexion
base
données
Deux
étapes
généralement
nécessaires
plus
simplicité
seconde
n'est
obligatoire
bien
pratique
cas
travaille
seule
base
données
toute
page
10.6.1.1
Connexion
serveur
utilise
fonction
mysql_connect
fonction
prend
minimum
trois
paramètres
serveur
hostname
l'utilisateur
mot
passe
b_host=
sql.tf-data.net
b_user=
toto
b_pass=
CreT1
S.
ROHAUT
Cours
Programmation
PHP
Page
47/93
cnx=mysql_connect
b_host
b_user
b_pass
if
cnx
die
``
erreur
connexion
MySQL
10.6.1.2
Choix
d'une
base
choisit
base
données
défaut
fonction
mysql_select_db
prend
minimum
paramètre
nom
base
second
paramètre
optionnel
ressource
retournée
mysql_connect
cas
connexion
plusieurs
serveurs
MySQL
défaut
fonction
prend
dernière
connexion
ouverte
celle
dernier
mysql_connect
exécuté
b_base=
slyunix
db=msql_select_db
b_base
if
db
die
``
Erreur
connexion
base
b_base
10.6.1.3
Fermeture
d'une
connexion
ferme
connexion
MySQL
fonction
mysql_close
Cependant
cas
connexion
non
persistantes
voir
point
fonction
n'est
obligatoire
car
PHP
ferme
automatiquement
connexions
fin
d'un
script
mysql_close
cnx
10.6.1.4
Séquence
complète
base
b_host=
sql.tf-data.net
b_user=
toto
b_pass=
CreT1
b_base=
slyunix
mysql_connect
b_host
b_user
b_pass
or
die
``
erreur
connexion
MySQL
mysql_select_db
b_base
or
die
``
erreur
selection
b_base
mysql_close
10.6.2
requêtes
10.6.2.1
Exécuter
requête
exécute
requête
SQL
fonction
mysql_query
fonction
prend
moins
paramètre
requête
SQL
sous
forme
chaîne
fonction
retourne
FALSE
cas
d'échec
colonne
table
invalide
droits
insuffisants
connexion
etc
ATTENTION
n'est
parce
l'appel
mysql_query
'
retourné
d'erreur
fonction
retourne
lignes
résultats
cas
d'un
SELECT
exemple
Enfin
requête
SQL
doit
finir
point-virgule
requête
peut
être
n'importe
quel
type
selection
mise
jour
destruction
etc
cas
d'un
SELECT
SHOW
EXPLAIN
DESCRIBE
mysql_query
retourne
ressource
ensuite
utilisée
lire
résultat
result=mysql_query
``
select
id_message
sujet
from
f_message
S.
ROHAUT
Cours
Programmation
PHP
Page
48/93
10.6.2.2
Nombre
lignes
affectées
cas
d'un
DELETE
INSERT
REPLACE
UPDATE
peut
connaître
nombre
lignes
affectées
modifiées
requête
l'aide
fonction
mysql_affected_rows
result=mysql_query
``
delete
from
f_message
where
login='toto
'
if
result
echo
mysql_affected_rows
Enregistrements
supprimés
10.6.2.3
Nombre
lignes
retournées
cas
d'un
SELECT
nombre
d'enregistrements
lignes
retourné
obtenu
fonction
mysql_num_rows
result=mysql_query
``
select
*
from
f_message
where
id_message
10
if
result
echo
mysql_num_rows
'
enregistrements
retournés
'
10.6.2.4
Récupérer
résultats
fonction
plus
sympathique
récupérer
enregistrements
après
l'exécution
d'une
sélection
mysql_fetch_array
prend
minimum
paramètre
ressource
résultat
résultat
mysql_query
retourne
ligne
résultat
sous
forme
d'un
tableau
associatif
d'un
tableau
indexé
deux
défaut
tableau
retourné
fois
associatif
indexé
tableau
associatif
l'index
tableau
nom
champ
correspondant
colonne
tableau
indexé
colonnes
numérotées
partir
zéro
Notez
mysql_fetch_array
retourne
qu'une
seule
ligne
résultat
passer
suivante
faut
exécuter
fonction
nouveau
retournera
FALSE
quand
'
plus
lignes
lire
result=mysql_query
``
select
sujet
texte
from
f_message
where
login='toto
'
tab=mysql_fetch_array
result
//
Première
ligne
résultat
echo
tab
'sujet
'
'
'.
tab
'texte
'
//
affiche
champs
sujet
texte
echo
tab
0
'
'.
tab
1
//
idem
plusieurs
colonnes
portent
nom
dernière
colonne
prioritaire
requête
affichant
noms
colonnes
identiques
mieux
renommer
SELECT
t1.nom
col1
t2_nom
col2
FROM
t1
t2
second
paramètre
mysql_fetch_array
peut
être
•
MYSQL_ASSOC
résultat
uniquement
tableau
associatif
index=nom
colonne
•
MYSQL_NUM
résultat
uniquement
tableau
indexé
numériquement
•
MYSQL_BOTH
défaut
deux
Voici
comment
récupérer
tous
résultats
result=mysql_query
``
select
sujet
texte
from
f_message
where
login='toto
'
while
result
&
&
tab=mysql_fetch_array
result
{
echo
tab
'sujet
'
'
'.
tab
'texte
'
//
affiche
champs
sujet
texte
}
S.
ROHAUT
Cours
Programmation
PHP
Page
49/93
Notez
l'expression
while
rentrer
faut
résultat
requête
result
FALSE
requête
fonctionné
qu'il
reste
lignes
lire
Autrement
dit
requête
retourne
rien
rentre
boucle
Notez
enfin
qu'il
existe
deux
autres
fonctions
possibles
•
mysql_fetch_row
équivaut
mysql_fetch_array
var
MYSQL_NUM
•
mysql_fetch_assoc
équivaut
mysql_fetch_array
var
MYSQL_ASSOC
10.6.2.5
Insertion
auto-incrément
L'identifiant
unique
d'une
table
souvent
entier
auto-incrémenté
L'avantage
qu'il
'
besoin
gérer
identifiant
c'est
MySQL
détermine
tout
seul
certains
cas
peut
être
nécessaire
récupérer
valeur
champ
auto-incrémenté
après
insertion
exemple
mettre
jour
autre
enregistrement
liste
chaînée
jointure
etc
utilise
ça
fonction
mysql_insert_id
result=mysql_query
``
insert
into
f_message
sujet
texte
values
'test
'
'test
'
id=mysql_insert_id
result=mysql_query
``
select
sujet
texte
from
f_message
where
id_message=
id
tab=mysql_fetch_array
result
echo
tab
'sujet
'
'
'.
tab
'texte
'
//
test
test
10.6.3
Récupération
erreurs
cas
d'erreur
lors
d'une
manipulation
MySQL
peut
récupérer
numéro
l'erreur
MySQL
fonction
mysql_errno
peut
récupérer
message
d'erreur
fonction
mysql_error
peut
trouver
liste
codes
d'erreurs
ici
http
//www.mysql.com/doc/en/Error-returns.html
S.
ROHAUT
Cours
Programmation
PHP
Page
50/93
11
système
fichiers
11.1
Travail
fichiers
11.1.1
Ouverture
fonction
fopen
permet
d'ouvrir
créer
fichier
selon
divers
modes
prend
premier
pramètre
nom
fichier
chemin
nom
fichier
peut
être
URL
faut
cela
directive
allow_url_fopen
activée
php.ini
second
paramètre
mode
d'ouverture
–
r
lecture
seule
début
fichier
–
r+
lecture/écriture
début
fichier
–
w
écriture
seule
taille
fichier
0
ancien
contenu
effacé
créé
s'il
n'existe
–
w+
lecture/écriture
taille
fichier
0
créé
s'il
n'existe
–
écriture
seule
fin
fichier
créé
s'il
n'existe
–
a+
lecture/écriture
fin
fichier
créé
s'il
n'existe
peut
sous
Windows
rajouter
lettre
'
b
'
type
binaire
inutile
sous
Unix
Enfin
fopen
admet
troisième
paramètre
1
cas
fichier
ouvrir
recherché
include_path
voir
php.ini
valeur
retournée
ressource
fichier
identifiant
fichier
valeur
FALSE
cas
d'échec
file=fopen
'server.log
'
'
a+',1
11.1.2
Lecture
11.1.2.1
fgets
fonction
fgets
permet
lire
ligne
d'un
fichier
mode
texte
fonction
s'arrête
lorsqu'elle
arrive
fin
fichier
retour
chariot
peut
préciser
second
paramètre
longueur
texte
octet
défaut
1024
paramètre
obligatoire
avant
versions
4.2
premier
paramètre
l'identifiant
fichier
FALSE
retourné
cas
d'erreur
ATTENTION
fgets
retourne
FALSE
fin
fichier
ligne=fgets
file
11.1.2.2
fread
fonction
fread
permet
lire
fichier
mode
binaire
second
paramètre
longueur
souhaitée
Sous
Windows
faut
penser
placer
'
b
'
fopen
lecture
s'arrête
lorsque
octets
longueur
lus
fin
fichier
atteinte
qu'une
erreur
survenue
S.
ROHAUT
Cours
Programmation
PHP
Page
51/93
file=fopen
'monimage.gif
'
'rb
'
img=fread
file
filesize
'nomimage.gif
'
fclose
file
11.1.2.3
fscanf
fonction
fscanf
lit
lignes
d'un
fichier
fonction
d'un
formatage
particulier
file=fopen
'users.txt
'
'
r
'
while
ligne=fscanf
file
s\t
s\t
s\n
{
echo
ligne
}
11.1.2.4
fgetc
fonction
fgetc
lit
seul
caractère
fichier
Contrairement
fgets
retourne
FALSE
fin
fichier
premier
paramètre
l'identifiant
fichier
11.1.2.5
fgetss
fonction
fgetss
fonction
identique
fgets
ligne
retournée
débarrassée
éventuelles
balises
PHP
HTML
peut
préciser
troisième
paramètre
liste
balises
autorisées
11.1.2.6
fgetcsv
fonction
fgetcsv
fonction
très
puissante
car
permet
lire
fichier
type
CSV
c'est
dire
champs
délimités
récupérer
champs
tableau
Lesond
paramètre
longueur
maximale
d'une
ligne
fichier
troisième
paramètre
séparateur
virgule
défaut
Voici
exemple
permettant
lire
fichier
CSV
d'en
afficher
résultat
sous
forme
d'un
tableau
HTML
filename
=
``
book1.csv
id
=
fopen
filename
``
r
while
data
=
fgetcsv
id
filesize
filename
table
=
data
fclose
id
echo
``
table
\n
foreach
table
row
{
echo
``
tr
foreach
row
data
echo
``
td
data
/td
echo
``
/tr
\n
}
echo
``
/table
\n
11.1.2.7
Renvoyer
fichier
sortie
standard
fonction
readfile
prend
comme
paramètre
nom
fichier
renvoie
contenu
sortie
standard
fonction
readgzfile
effectue
chose
fichier
format
compressé
gzip
zlib
S.
ROHAUT
Cours
Programmation
PHP
Page
52/93
11.1.3
Ecriture
deux
fonctions
fwrite
fputs
identiques
100
car
fputs
alias
fwrite
Elles
écrivent
chaîne
fichier
peut
limiter
longueur
chaîne
troisième
paramètre
défaut
toute
chaîne
écrite
valeur
retournée
nombre
d'octets
écrits
FALSE
cas
d'erreur
file=fopen
'monfic.txt
'
'
ret=fwrite
file
'Une
ligne
fichier
'
fclose
file
cas
travail
fichier
binaire
faut
oublier
sous
Windows
rajouter
l'option
'
b
'
11.1.4
Déplacement
11.1.4.1
fseek
fonction
fseek
permet
déplacer
fichier
second
paramètre
offset
nombre
d'octets
déplacement
peut
être
négatif
défaut
déplacement
calculé
partir
début
fichier
troisième
paramètre
peut
modifier
état
valeur
retournée
0
zéro
cas
réussite
-1
sinon
positionnement
après
fin
fichier
n'est
erreur
–
SEEK_SET
Calcul
partir
début
fichier
Position
finale
Début+offset
–
SEEK_CUR
Calcul
partir
l'emplacement
actuel
Position
finale
Actuelle+offset
–
SEEK_END
Calcul
partir
fin
fichier
Position
finale
Fin+Offset
ret=fseek
file,0
SEEK_END
//
Fin
fichier
11.1.4.2
ftell
fonction
fseek
renvoie
position
actuelle
pointeur
fichier
pos=ftell
file
11.1.4.3
rewind
fonction
rewind
permet
retourner
début
fichier
retourne
TRUE
cas
réussite
FALSE
sinon
11.1.5
Fin
fichier
fonction
feof
indique
fin
fichier
non
retourne
TRUE
fin
fichier
atteinte
FALSE
sinon
fd
=
fopen
``
/tmp/inputfile.txt
``
r
while
feof
fd
{
buffer
=
fgets
fd
4096
echo
buffer
}
fclose
fd
S.
ROHAUT
Cours
Programmation
PHP
Page
53/93
11.1.6
Fermeture
ferme
fichier
fonction
fclose
.Elle
retourne
TRUE
cas
réussite
FALSE
sinon
11.2
Travail
répertoires
11.2.1
Répertoire
actuel
fonction
getcwd
retourne
nom
dossier
travail
courant
c'est
dire
là
Attention
sous
Windows
fonction
fait
distinctions
entre
majuscules
minuscules
chemin=getcwd
echo
chemin
/srv/www/site
11.2.2
déplacer
déplace
fonction
chdir
L'argument
peut
être
absolu
relatif
cas
d'erreur
FALSE
retourné
if
chdir
'./rep
'
getcwd
else
die
'Impossible
déplacer
'
11.2.3
Ouvrir
lister
fermer
ouvre
répertoire
lecture
fonction
opendir
prend
comme
unique
paramètre
nom
chemin
répertoire
cas
d'échec
fonction
retourne
FALSE
sinon
identifiant
handler
répertoire
lit
entrée
fonction
readdir
prend
comme
paramètre
l'identifiant
répertoire
Quand
'
plus
rien
lire
fonction
retourne
FALSE
sinon
retourne
nom
l'entrée
actuellement
lue
ATTENTION
entrées
..
lues
comme
autres
ferme
répertoire
cours
lecture
fonction
closedir
prend
comme
paramètre
l'identifiant
répertoire
handle=opendir
'
'
while
file
=
readdir
handle
{
if
file
=
``
&
&
file
=
``
..
{
echo
``
file\n
}
}
closedir
handle
peut
retourner
début
répertoire
fonction
rewinddir
prend
comme
paramètre
identifiant
répertoire
prochaine
lecture
première
répertoire
11.2.4
Récupérer
toutes
entrées
s'il
possible
récupérer
l'ensemble
entrées
d'un
répertoire
fonctions
S.
ROHAUT
Cours
Programmation
PHP
Page
54/93
précédentes
boucle
fonction
scandir
propose
chose
ligne
plaçant
tous
noms
fichiers
chemin
indiqué
tableau
premier
paramètre
chemin
répertoire
second
optionnel
définit
l'ordre
tri
alphabétique
défaut
1
indique
tri
alphabétique
décroissant
files=scandir
'./rep
'
print_r
files
11.3
Travail
système
fichiers
11.3.1
Informations
fichier
peut
obtenir
diverses
informations
fichier
l'aide
commandes
type
is_x
–
is_dir
TRUE
nom
fichier
répertoire
–
is_file
TRUE
nom
fichier
véritable
fichier
normal
–
is_executable
TRUE
fichier
exécutable
Sous
Windows
faut
PHP
5.x
–
is_readable
TRUE
sir
fichier
lisible
–
is_writeable
is_writable
TRUE
fichier
accessible
écriture
–
is_link
TRUE
fichier
lien
peut
obtenir
détails
fichier
fonctions
filexxx
–
file_exists
TRUE
fichier
existe
–
fileatime
retourne
sous
forme
TIMESTAMP
dernière
date
d'accès
Sous
Windows
dernière
date
modification
–
filectime
retourne
date
création
–
filemtime
retourne
date
modification
–
filegroup
retourne
GID
fichier
récupère
nom
réel
groupe
fonction
posix_getgrgid
–
fileowner
retourne
UID
fichier
récupère
nom
réel
l'utilisateur
fonction
posix_getpwuid
–
fileinode
retourne
l'inode
fichier
–
fileperms
retourne
permissions
fichier
ATTENTION
résultat
base
10
faudra
convertir
base
8
fonction
base_convert
–
filesize
retourne
taille
fichier
octets
S.
ROHAUT
Cours
Programmation
PHP
Page
55/93
–
filetype
retourne
type
fichier
ATTENTION
s'agit
types
fichiers
disque
contenu
image
etc
fifo
char
dir
block
link
file
unknown
fichier
déjà
ouvert
peut
obtenir
informations
fonction
fstat
prend
comme
paramètre
identifiant
fichier
retourné
fopen
retourne
tableau
indexé
numériquement
associatif
fonction
stat
retourne
chose
précise
chemin
nom
fichier
fonction
lstat
quasi-identique
sauf
cadre
lien
informations
lien
lui-même
fichier
pointé
retournées
0.
volume
encore
dev
1.
inode
encore
ino
2.
droits
d'accès
fichier
mode
protection
inode
convertir
octal
Voir
aussi
fileperms
encore
mode
3.
nombre
liens
encore
nlink
4.
id
l'utilisateur
propriétaire
encore
uid
5.
id
groupe
propriétaire
encore
gid
6.
type
volume
l'inode
*
encore
rdev
7.
taille
octets
encore
size
8.
date
dernier
accès
encore
atime
9.
date
dernière
modification
encore
mtime
10.date
dernier
changement
encore
ctime
11.taille
bloc
système
entrées/sorties
*
encore
blksize
12.nombre
blocs
alloués
encore
blocks
11.3.2
Actions
fichiers
répertoires
retrouve
ici
fonctions
portent
souvent
nom
leurs
équivalents
sous
shell
Unix
–
dirname
basemane
isolent
chemin
nom
d'un
fichier
–
chown
chgrp
changent
propriétaire
groupe
d'un
fichier
premier
paramètre
fichier
second
groupe
propriétaire
UID
GID
toutes
lettres
–
chmod
modifie
droits
premier
paramètre
nom
fichier
second
droits
octal
ATTENTION
sous
Windows
résultats
peuvent
surprendre
S.
ROHAUT
Cours
Programmation
PHP
Page
56/93
–
copy
copie
d'un
fichier
source
destination
–
link
créé
lien
hard
link
cible
nom
lien
–
symlink
créé
lien
symbolique
cible
nom
lien
–
mkdir
créé
répertoire
second
paramètre
mode
droits
défaut
AVANT
application
masque
–
rename
renomme
et/ou
déplace
fichier
orgine
destination
–
rmdir
supprime
répertoire
doit
être
vide
–
unlink
supprime
fichier
–
umask
modifie
umask
défaut
11.4
Upload
fichiers
L'upload
fichiers
permet
d'envoyer
depuis
poste
client
fichier
serveur
opération
nécessite
navigateur
sachant
prendre
charge
balise
spéciale
l'appel
d'un
script
PHP
Côté
Page
HTML
faut
modifier
définition
d'un
formulaire
placer
champ
formulaire
type
FILE
indiquer
taille
maximale
fichier
téléchargé
nom
HIDDEN
bom
MAX_FILE_SIZE
taille
précisée
octets
champ
doit
être
placé
AVANT
l'apparition
champ
type
FILE
formulaire
doit
être
type
POST
bien
GET
possible
voir
documentation
PHP
type
d'encodage
ENCTYPE
``
/multipart/form-data
doit
être
précisé
form
ENCTYPE=
multipart/form-data
action=
/page.php
method=
post
INPUT
TYPE=
hidden
name=
MAX_FILE_SIZE
value=
35840
INPUT
NAME=
avatar
TYPE=
file
SIZE=50
input
type=
submit
value=
Enregistrer
/
/form
Notes
Certains
navigateurs
fichent
totalement
poid
taille
fichiers
envoyés
réagissant
variable
MAX_FILE_SIZE
cas
vérification
doit
être
faite
côté
serveur
pire
peut
limiter
côté
serveur
taille
maximale
l'aide
paramètre
upload_max_filesize
php.ini
choisit
fichier
via
boite
dialogue
gestionnaire
fichiers
quand
clique
bouton
Parcourir
fois
formulaire
validé
données
formulaire
fichier
envoyés
page
PHP
Côté
PHP
récupère
informations
fichier
uploadé
via
tableau
_FILE
index
suivants
_FILE
nom
propiete
nom
nom
champ
formulaire
FILE
propriété
–
_FILES
'userfile
'
'name
'
nom
original
fichier
tel
machine
client
web
S.
ROHAUT
Cours
Programmation
PHP
Page
57/93
–
_FILES
'userfile
'
'type
'
type
MIME
fichier
navigateur
fourni
information
exemple
cela
pourra
être
``
image/gif
–
_FILES
'userfile
'
'size
'
taille
octets
fichier
téléchargé
–
_FILES
'userfile
'
'tmp_name
'
nom
temporaire
fichier
chargé
machine
serveur
–
_FILES
'userfile
'
'error
'
code
d'erreur
associé
téléchargement
fichier
PHP
4.2
défaut
fichier
téléchargé
attente
déplacement
placé
répertoire
temporaire
système
variable
système
TEMP
TMPDIR
répertoire
précisé
paramètre
configuration
upload_tmp_dir
fichier
php.ini
conseillé
d'initialiser
d'utiliser
paramètre
chemin
fichier
temporaire
uploadé
tmp_file=ini_get
``
upload_tmp_dir
'/'.
_FILE
'userfile
'
'tmp_name
'
savoir
fichier
correctement
uploadé
méthode
POST
peut
utiliser
fonction
is_uploaded_file
prend
comme
paramètre
nom
fichier
uploadé
if
is_uploaded_file
_FILE
'userfile
'
'name
'
{
//
tmp_name
echo
_FILES
'userfile
'
'size
'
}
Sachant
position
fichier
temporaire
uploadé
s'il
correctement
uploadé
peut
utiliser
fonction
copy
mieux
d'utiliser
fonction
move_uploaded_file
teste
réussite
l'upload
déplace
fichier
premier
paramètre
nom
fichier
uploadé
peut
être
nom
champ
FILE
nom
réel
fichier
nom
fichier
temporaire
if
move_uploaded_file
_FILES
'avatar
'
'tmp_name
'
_SERVER
'DOCUMENT_ROOT
'
``
/
forum/avatars/
login
_FILES
'avatar
'
'name
'
{
avatar=
login.
_FILES
'avatar
'
'name
'
chmod
_SERVER
'DOCUMENT_ROOT
'
``
/forum/avatars/
avatar
,0644
}
S.
ROHAUT
Cours
Programmation
PHP
Page
58/93
12
Travail
chaînes
12.1
Fonctions
code
HTML
MySQL
12.1.1
Gestion
caractères
verrouillés
fonction
addslashes
rajoute
slashes
backslashes
\
devant
tous
caractères
doivent
être
verrouillés
caractères
``
'
\
caractère
nul
NULL
Ainsi
chaîne
résultante
peut
être
utilisée
être
placée
base
données
via
commandes
SQL
fonction
stripslashes
effectue
l'opération
inverse
supprime
anti-slash
sauf
cas
doubles
anti-slash
\\
n'en
supprime
qu'un
chaine=
L'oreille
cassée
c1=addslashes
chaine
echo
c1
//
L\'oreille
cassée
echo
stripslashes
c1
//
L'oreille
cassée
12.1.2
balises
caractères
spéciaux
HTML
fonction
strip_tags
permet
filtrer
chaîne
contenant
balises
tags
HTML
autorisant
certains
interdisant
d'autres
premier
paramètre
chaîne
HTML
second
liste
tags
autorisés
ATTENTION
fonction
modifie
contenu
balises
autorisées
laissant
ainsi
attributs
CLASS
STYLE
appels
JavaScript
chaine=
u
i
b
Bonjour
amis
/b
/i
/u
echo
strip_tags
chaine
'
u
i
b
'
//
Bonjour
amis
echo
strip_tags
chaine
'
b
'
//
b
Bonjour
amis
/b
gras
fonction
htmlspecialchars
convertit
certains
caractères
spéciaux
entités
HTML
caractères
–
&
&
amp
–
``
&
quot
ENT_NOQUOTES
utilisé
–
'
&
#
039
ENT_QUOTES
utilisé
–
&
lt
–
&
gt
second
paramètre
ENT_xxx
définit
fonctionnement
rapport
quotes
fonction
htmlentities
va
plus
loin
remplaçant
TOUS
caractères
équivalents
HTML
décoder
telle
chaîne
faut
alors
utiliser
fonction
html_entity_decode
fonction
nl2br
remplace
tous
retour-chariots
d'une
chaîne
retours
ligne
HTML
br
/
fonction
urlencode
formate
chaîne
utilisation
URL
espaces
S.
ROHAUT
Cours
Programmation
PHP
Page
59/93
remplacés
+
tous
caractères
non-alphanumériques
sauf
-
_
remplacés
équivalent
hexadécimal
XX
telle
chaîne
décodée
fonction
urldecode
12.2
Fonctions
texte
générales
12.2.1
Découper
chaîne
fonction
explode
permet
découper
chaîne
selon
séparateur
retourne
tableau
contenant
divers
éléments
découpés
premier
paramètre
séparateur
second
chaîne
troisième
paramètre
permet
limiter
nombre
valeurs
retournées
chaine='login
pwd
uid
gid
'
tab=explode
'
'
chaine
foreach
tab
value
echo
value
//
login
pwd
uid
gid
fonction
inverse
nomme
implode
.Le
premier
paramètre
colle
caractères
séparation
placés
entre
divers
éléments
chaîne
reconstituée
second
paramètre
tableau
//
suite
l'exemple
précédent
newchaine=implode
'
'
tab
echo
chaine
//
login
pwd
uid
gid
fonction
join
alias
implode
peut
aussi
effectuer
découpage
tous
caractères
fonction
chunk_split
découpe
premier
paramètre
morceaux
longueur
second
paramètre
défaut
76
caractères
comme
séparateur
troisième
paramètre
\n\r
défaut
chaine='FF5EB649C4
'
n_chaine=chunk_split
chaine,2
'
'
echo
n_chaine
//
FF:5E
B6:49
C4
fonction
wordwrap
effectue
césure
d'une
chaîne
chaîne
résultante
texte
découpé
tenant
compte
mots
défaut
longueur
second
paramètre
75
caractères
peut
préciser
chaîne
coupure
ligne
troisième
paramètre
dernier
paramètre
s'il
1
force
coupure
milieu
d'un
mot
affichage
HTML
faut
encapsuler
résultat
nl2br
chaine=
Bonjour
amis
bienvenus
merveilleux
monde
langage
PHP
``
echo
nl2br
wordwrap
chaine,20
retourne
Bonjour
amis
bienvenus
merveilleux
monde
langage
PHP
fonction
str_split
découpe
chaîne
caractère
tableau
défaut
longueur
1
peut
choisir
second
paramètre
S.
ROHAUT
Cours
Programmation
PHP
Page
60/93
peut
découper
partie
chaîne
fonction
substr
premier
paramètre
chaîne
second
début
depuis
0
dernier
longueur
début
chaîne
peut
être
valeur
négative
cas
compte
partant
fin
chaîne
chaine='abcdef
'
echo
substr
chaine,0
//
abcdef
echo
substr
chaine,2,3
//
cde
echo
substr
chaine
-1
//
f
echo
substr
chaine
-3,2
//
fonctions
trim
rtrim
ltrim
suppriment
caractères
invisibles
droite
trim
rtrim
gauche
trim
ltrim
chaîne
12.2.2
Rechercher
comparer
fonction
strcmp
effectue
comparaison
deux
chaînes
Retourne
0
chaine1
inférieure
chaine2
0
égale
0
sinon
fonction
strncmp
effetmais
longueur
donnée
troisième
paramètre
fonctions
strcasecmp
strncasecmp
versions
insensibles
casse
fonction
strstr
recherche
première
occurrence
second
paramètre
premier
retourne
chaîne
depuis
position
jusqu
'
fin
fonction
strchr
alias
strstr
fonction
stristr
insensible
casse
fonction
strrchr
effectue
quasiment
chose
sauf
qu'elle
retourne
fin
chaîne
depuis
dernier
caractère
trouvé
fonction
strpos
recherche
chaîne
premier
paramètre
chaîne
second
paramètre
retourne
position
peut
placer
troisième
paramètre
position
départ
recherche
S.
ROHAUT
Cours
Programmation
PHP
Page
61/93
13
Sessions
cookies
13.1
cookies
13.1.1
Création
cookie
s'envoie
fonction
setcookie
arguments
suivants
•
Nom
•
Valeur
•
date
d'expiration
timestamp
unix
•
chemin
validité
cookie
suivant
chemin
l'url
•
domaine
pare
défaut
vôtre
•
secure
flag
sécurité
cookie
n'est
accessible
via
connexion
sécurisée
Seul
premier
argument
obligatoire
spécifier
valeur
suffit
rien
mettre
Attention
quelques
limitations
•
cookie
envoyé
entêtes
HTTP
peut
être
envoyé
sortie
déjà
lieu
html
texte
•
cookie
n'est
disponible
page
'
créé
faut
recharger
page
pointer
autre
•
cookie
peut
être
supprimé
qu'avec
mêmes
paramètres
servi
création
C'est
navigateur
supprime
cookie
setcookie
``
testcookie
session_id
time
+3600
if
isset
_COOKIE
'testcookie
'
echo
_COOKIE
'testcookie
'
l'exemple
précédent
premier
chargement
rien
affiché
car
contenu
cookie
n'est
encore
accessible
deuxième
chargement
valeur
réellement
affichée
attention
décalage
entre
mise
jour
l'accès
if
isset
_COOKIE
'testcookie
'
{
setcookie
``
testcookie
'toto
'
time
+3600
header
``
Location
http
//
_SERVER
'HTTP_HOST
'
_SERVER
'REQUEST_URI
'
}
exemple
regarde
cookie
existe
sinon
créé
rappelle
page
13.1.2
Accès
accède
cookie
grâce
variable
globale
_COOKIE
tableau
L'index
tableau
nom
cookie
S.
ROHAUT
Cours
Programmation
PHP
Page
62/93
valeur=
_COOKIE
'testcookie
'
echo
valeur
//
rapport
l'exemple
précédent
toto
Note
peut
placer
tableaux
cookies
suffit
nommer
cookie
notation
crochets
setcookie
``
testcookie
1
'toto
'
time
+3600
setcookie
``
testcookie
2
'titi
'
time
+3600
setcookie
``
testcookie
3
'tata
'
time
+3600
page
suivante
foreach
_COOKIE
tab
{
if
is_array
tab
foreach
tab
key
=
value
echo
``
key
=
value
}
13.1.3
Suppression
supprimer
cookie
suffit
donner
date
antérieure
date
actuelle
celui-ci
if
isset
_COOKIE
'testcookie
'
{
setcookie
``
testcookie
'toto
'
time
+3600
}
else
{
setcookie
``
testcookie
time
-3600
}
if
isset
_COOKIE
'testcookie
'
echo
``
OK
else
echo
``
cookie
l'exemple
précédent
appels
script
vont
provoquer
successivement
l'affichage
cookie
OK
13.2
Identification
HTTP
13.2.1
Connexion
possibilité
n'est
disponible
PHP
utilisé
comme
module
Apache
tant
script
CGI
L'identification
HTTP
permet
via
l'envoi
d'un
HEADER
HTTP
demander
identification
client
cas
navigateur
va
ouvrir
fenêtre
connexion
demandant
saisie
login
mot
passe
PHP
récupère
bien
entendu
valeurs
Voici
l'exemple
issu
documentation
PHP
if
isset
_SERVER
'PHP_AUTH_USER
'
{
header
'WWW-Authenticate
Basic
realm=
Slyunix
'
header
'HTTP/1.0
401
Unauthorized
'
echo
'Texte
utilisé
visiteur
utilise
bouton
d\'annulation
'
exit
}
else
{
echo
``
p
Bonjour
{
_SERVER
'PHP_AUTH_USER
'
}
/p
echo
``
p
mot
passe
{
_SERVER
'PHP_AUTH_PW
'
}
/p
}
exemple
passe
entête
demande
d'authentification
cas
d'échec
bouton
annuler
message
d'annulation
affiché
Sinon
peut
récupérer
valeurs
via
variables
•
_SERVER
'PHP_AUTH_USER
'
login
S.
ROHAUT
Cours
Programmation
PHP
Page
63/93
•
_SERVER
'PHP_AUTH_PW
'
mot
passe
13.2.2
Déconnexion
déconnexion
n'est
évidente
ça
car
fois
connecté
identifiants
placés
session
méthode
plus
simple
consiste
fermer
navigateur
relancer
13.3
Sessions
PHP
13.3.1
Principe
sessions
permettent
préserver
données
lors
visite
d'un
site
Chaque
personne
voit
attribué
identifiant
unique
appelé
identifiant
session
SID
SID
stocké
cookie
passé
URL
peut
ainsi
définir
nombre
infini
variables
accessibles
durant
toute
durée
session
Notez
fermez
relancez
navigateur
changez
d'identifiant
précédente
session
perdue
nommée
peut
connaître
SID
grâce
constante
nom
fonction
session_id
13.3.2
Utilisation
13.3.2.1
Ouverture
PHP.INI
valeur
session.auto_start
activée
sessions
démarrées
manière
automatique
lors
l'accès
page
Sinon
faut
utiliser
explicitement
fonction
session_start
appel
créé
session
restaure
session
précédemment
stockée
serveur
ATTENTION
L'ouverture
d'une
session
doit
obligatoirement
apparaître
avant
toute
sortie/affichage
script
PHP
balises
HTML
ligne
vide
peut
créer
récupérer
session
nommée
précisant
session_name
prend
comme
paramètre
nom
session
doit
être
créée
premier
appel
accédée
appels
suivants
session
défaut
nomme
PHPSESSID
c'est
celle-là
chargée
session_name
n'est
appelée
faut
appeler
session_name
AVANT
session_start
accéder
session
nommée
session
peut
aussi
être
indirectement
créée
ouverte
l'utilisation
fonction
session_register
13.3.2.2
Variables
session
deux
moyens
créer
variables
session
accessibles
depuis
n'importe
quelle
page
visitée
partir
moment
session_start
appelée
premier
moyen
fonctionne
fonctionne
register_globals
off
PHP.INI
Méthode
1
déconseillée
S.
ROHAUT
Cours
Programmation
PHP
Page
64/93
fonction
session_register
prend
comme
paramètre
nom
variable
définit
comme
variable
session
variable
peut
ensuite
être
accédée
nom
txt='Bonjour
amis
'
session_register
'txt
'
//
txt
devient
variable
session
savoir
variable
enregistrée
session
courante
utilise
session_is_registered
if
session_is_registered
'txt
'
echo
txt
supprimer
variable
session
faut
utiliser
session_unregister
contre
faut
oublier
d'utiliser
unset
supprimer
variable
globale
car
précédente
fonction
supprime
empêche
seulement
sauvegarde
fin
script
if
session_is_registered
'txt
'
{
session_unregister
'txt
'
unset
txt
}
Méthode
2
meilleure
utiliser
utilise
tout
simplement
tableau
global
_SESSION
Ainsi
_SESSION
'txt
'
=
Bonjour
amis
crée
variable
session
txt
echo
_SESSION
'txt
'
l'affiche
unset
_SESSION
'txt
'
l'efface
effacer
toutes
variables
sessions
suffit
faire
_SESSION=array
13.3.3
Expiration
session
durée
vie
d'une
session
PHP
dépend
trois
paramètres
configuration
fichier
PHP.INI
session.gc_maxlifetime
session.cookie_lifetime
session.cache_expire
premier
concerne
durée
vie
données
serveur
nombre
secondes
défaut
1440
secondes
24
minutes
delà
données
supprimées
elles
rechargées
via
cookie
session
lors
prochain
appel
second
durée
vie
cookie
session
exprimé
secondes
défaut
valeur
zéro
0
signifie
jusqu
'
navigateur
éteind
troisième
durée
vie
données
session
minutes
valeur
défaut
180
minutes
trois
heures
veut
dire
session
peut
rester
trois
heures
page
valeurs
perdues
delà
faut
rouvrir
nouvelle
session
S.
ROHAUT
Cours
Programmation
PHP
Page
65/93
restaurer
nouvelles
valeurs
chaque
chargement
page
ouverture
session
recommence
décompte
peut
modifier
délai
d'expiration
session
grâce
fonction
session_cache_expire
prend
comme
valeur
nouvelle
durée
minutes
Sans
paramètre
retourne
valeur
actuelle
13.3.4
Changer
l'accès
défaut
PHP
sait
très
bien
débrouiller
tout
seul
peut
remplacer
prise
charge
défaut
sessions
propres
fonctions
but
gérer
l'ouverture
fermeture
encore
sauvegarde
données
session
fichier
base
données
autre
utilisation
peut
être
traçage
via
PHP
toutes
ouvertures/fermetures
sessions
ça
utilise
fonction
session_set_save_handler
étude
dépasse
cadre
cours
voici
exemple
tiré
documentation
PHP
if
mysql_table_exists
``
sessions
DB
{
query
=
'CREATE
TABLE
sessions
SessionID
char
255
not
null
LastUpdated
datetime
not
null
DataValue
text
PRIMARY
KEY
SessionID
INDEX
LastUpdated
'
mysql_query
query
}
function
sessao_open
aSavaPath
aSessionName
{
global
aTime
sessao_gc
aTime
return
True
}
function
sessao_close
{
return
True
}
function
sessao_read
aKey
{
query
=
``
SELECT
DataValue
FROM
sessions
WHERE
SessionID=
'
aKey
'
busca
=
mysql_query
query
if
mysql_num_rows
busca
==
1
{
r
=
mysql_fetch_array
busca
return
r
'DataValue
'
}
ELSE
{
query
=
``
INSERT
INTO
sessions
SessionID
LastUpdated
DataValue
VALUES
'
aKey
'
NOW
``
mysql_query
query
return
``
}
}
function
sessao_write
aKey
aVal
{
aVal
=
addslashes
aVal
query
=
``
UPDATE
sessions
SET
DataValue
=
'
aVal
'
LastUpdated
=
NOW
WHERE
SessionID
=
'
aKey
'
mysql_query
query
return
True
S.
ROHAUT
Cours
Programmation
PHP
Page
66/93
}
function
sessao_destroy
aKey
{
query
=
``
DELETE
FROM
sessions
WHERE
SessionID
=
'
aKey
'
mysql_query
query
return
True
}
function
sessao_gc
aMaxLifeTime
{
query
=
``
DELETE
FROM
sessions
WHERE
UNIX_TIMESTAMP
NOW
-
UNIX_TIMESTAMP
LastUpdated
aMaxLifeTime
mysql_query
query
return
True
}
session_set_save_handler
``
sessao_open
``
sessao_close
``
sessao_read
sessao_write
``
sessao_destroy
``
sessao_gc
14
Images
14.1
Pré-requis
importants
Ceci
concerne
versions
PHP
avant
4.2.3
EasyPHP
1.6
certaines
fonctions
comme
gd_info
encore
imagecreatetruetype
toujours
disponibles
car
PHP
fait
appel
bibliothèque
externe
appelée
GD2
version
4.2.3
au-delà
trouve
patches
l'adresse
http
//www.boutell.com/gd/
Avant
versions
version
GD
linkée
PHP
1.8.4
Ceci
concerne
utilisateurs
PHP
4.2.3
+
EasyPHP
1.7
Windows
configuration
défaut
EasyPHP
1.7
n'inclut
support
images
cela
faut
modifier
fichier
PHP.INI
retirant
commentaire
extension=php_gd2.dll
14.2
Créer
image
14.2.1
Types
possibles
faut
tout
d'abord
choisir
type
l'image
souhaitez
créer
cela
peut
tester
quels
types
PHP
peut
générer
fonction
imagetypes
constantes
associées
•
IMG_PNG
format
PNG
•
IMG_JPG
format
JPEG
•
IMG_GIF
format
GIF
•
IMG_WBMP
format
Windows
Bitmap
BMP
if
imagetypes
&
IMG_PNG
{
echo
``
type
PNG
supporté
Puis
début
script
envoie
header
spécifiant
type
d'image
S.
ROHAUT
Cours
Programmation
PHP
Page
67/93
header
``
Content-type
image/png
//
image/gif
image/jpeg
14.2.2
Création
14.2.2.1
Nouvelle
image
dynamique
enfin
créé
image
fonction
imagecreate
basée
table
couleurs
indexée
imagecreatetruecolor
truecolor
comme
paramètres
largeur
hauteur
seconde
conseillée
documentation
PHP
fonctions
retournent
ressource
identifiant
l'image
défaut
l'image
noire
img=
createimage
100,100
or
die
``
PHP
supporte
images
14.2.2.2
Récupération
d'une
image
existante
PHP
peut
charger
image
existante
lieu
créer
toutes
pièces
cas
l'image
chargée
depuis
fichier
peut
ensuite
retravailler
comme
souhaite
peut
utiliser
fonctions
•
imagecreatefromgif
charge
image
GIF
•
imagecreatefromjpeg
charge
image
JPEG
•
imagecreatefrompng
charge
image
PNG
•
imagecreatefromstring
charge
image
depuis
chaîne
texte
exemple
champ
14.2.3
Publication
Enfin
publie
l'image
fonctions
imagexxx
fonction
utilisée
sans
paramètre
l'image
créée
redirigée
vers
sortie
standard
peut
toutefois
préciser
comme
paramètre
nom
fichier
cas
l'image
sauvée
disque
format
spécifié
•
imagepng
créé
image
format
PNG
•
imagegif
créé
image
format
GIF
•
imagejpeg
créé
image
format
JPEG
fois
l'image
crée
peut
supprimer
imagedestroy
décharge
mémoire
Voici
code
d'une
page
PHP
image.php
retournant
image
header
``
Content-type
image/png
img=
imagecreatetruecolor
100
50
or
die
``
Impossible
crée
flux
d'image
GD
/
*
ICI
PLACE
COMMANDES
DESSIN
MANIPULATION
*
/
imagepng
img
imagedestroy
img
S.
ROHAUT
Cours
Programmation
PHP
Page
68/93
14.2.4
Chargement
via
autre
page
appeler
image
dynamique
depuis
page
HTML
PHP
suffit
placer
balise
IMG
img
src=
image.php
14.3
Travailler
Images
14.3.1
Récupérer
informations
fonction
getimagesize
permet
récupérer
informations
image
passe
nom
fichier
ressource
image
retourne
tableau
indexé
list
width
height
type
attr
=getimagesize
``
toto.gif
•
width
largeur
x
•
height
hauteur
•
type
1
=
GIF
2
=
JPG
3
=
PNG
5
=
PSD
6
=
BMP
7
=
TIFF
Ordre
octets
Intel
8
=
TIFF
Ordre
octets
Motorola
9
=
JPC
10
=
JP2
11
=
JPX
12
=
JB2
13
=
SWC
14
=
IFF
•
attr
chaine
width/height
HTML
travaille
image
qu'on
créé
nous-même
•
imagesx
largeur
x
l'image
•
imagesy
hauteur
l'image
14.3.2
couleurs
n'est
possible
voir
toutes
fonctions
cependant
chose
retenir
notion
palette
indexée
createimage
notion
truetype
premier
cas
couleurs
indexées
via
numéro
second
cas
couleur
composante
RVB
fonction
imagecolorallocate
permet
définir
couleur
utilisée
image
premier
paramètre
ressource
l'image
trois
autres
niveaux
rouge
vert
bleu
couleur
ATTENTION
image
créée
createimage
palette
indexée
premier
index
couleur
fond
premier
appel
imagecolorallocate
cas
modifie
couleur
fond
white=imagecolorallocate
img,255,255,255
fonction
imagecolorat
retourne
valeur
exacte
l'index
palette
entier
RVB
point
coordonnées
x/y
l'image
S.
ROHAUT
Cours
Programmation
PHP
Page
69/93
color=imagecolorextact
img,50,50
fonction
imagecolortransparent
permet
définir
couleur
transparence
d'une
image
palette
indexée
premier
paramètre
ressource
l'image
OBLIGATOIREMENT
créée
imagecreate
second
valeur
retournée
imagecolorallocate
fonction
imagecolorstotal
retourne
nombre
total
couleurs
utilisées
l'image
donnée
14.3.3
Dessin
14.3.3.1
Remplissage
utilise
fonction
imagefill
background=imagecolorallocate
img,255,255,255
ImageFill
img,0,0
background
fonction
imagefilltoborder
permet
remplissage
d'une
zone
délimitée
couleur
donnée
cas
deux
derniers
paramètres
couleur
bordure
couleur
remplissage
14.3.3.2
Point
utilise
imagesetpixel
green=imagecolorallocate
img,0,255,0
Imagesetpixel
img,2,2
green
14.3.3.3
Ligne
utilise
imageline
imageline
img
10,10,30,40
blue
14.3.3.4
Rectangle
utilise
imagerectangle
rectangle
simple
imagefilledrectangle
rectangle
rempli
blue=ImageColorAllocate
img,0,0,255
imagerectangle
img
10,10,30,40
blue
imagefilledrectangle
img,12,12,27,37
green
14.3.3.5
Cercle
ellipse
utilise
imageellipse
imagefilledellipse
Attention
deux
premiers
paramètres
coordonnées
centre
l'ellipse
deux
autres
largeur
hauteur
l'ellipse
imageellipse
img
50
50,30
20
red
peut
aussi
faire
arcs
cercles
fonctions
imagearc
imagefilledarc
Juste
S.
ROHAUT
Cours
Programmation
PHP
Page
70/93
avant
couleur
précise
début
fin
l'arc
degrés
0
360
14.3.3.6
Polygones
utilise
fonctions
imagepolygone
imagefilledpolygone
sommets
polygone
définis
tableau
Tab
0
=x0
Tab
1
=y0
Tab
1
=x1
Tab
2
=y1
doit
aussi
préciser
nombre
sommets
imagepolygon
img
array
0
0,100
200
300
200
,3
blue
14.3.3.7
Texte
simple
utilise
imagestring
imagestring
img
1
5
5
``
simple
chaîne
texte
text_color
second
paramètre
numéro
police
défaut
page
actuelle
navigateur
15
programmation
objet
15.1
Structure
classe
collection
variables
attributs
fonctions
méthodes
fonctionnent
variables
L'ensemble
forme
membres
propriétés
l'objet
classe
définie
utilisant
mot-clé
class
class
Panier
{
//
Eléments
panier
var
contenu
//
Ajout
qte
articles
type
code
panier
function
ajout_article
code
qte
{
if
isset
this-
contenu
code
this-
contenu
code
+=
qte
else
this-
contenu
code
=
qte
}
//
Suppression
num
articles
type
artnr
panier
function
suppr_article
code
qte
{
if
this-
contenu
code
qte
{
this-
contenu
code
-=
qte
return
TRUE
}
else
{
return
FALSE
}
}
}
15.2
Création
d'un
objet
utilise
mot-clé
new
mon_caddie=new
Panier
constructeur
existe
voir
plus
loin
peut
bien
entendu
passer
valeurs
création
S.
ROHAUT
Cours
Programmation
PHP
Page
71/93
o1=new
Obj
``
riri
15.3
Accès
membres
15.3.1
PHP
4
5
utilise
caractères
-
accède
membres
syntaxe
suivante
Notez
qu'on
utilise
devant
nom
d'attribut
mon_caddie-
contenu=array
'ref01
'
=
2
'ref02
'
=
1
sein
d'un
objet
accède
attributs
classe
précisant
variable
this
précise
utilise
fait
variable
localz
méthode
this-
contenu
'ref01
'
+=1
15.3.2
PHP
5
PHP
5
étend
possibilités
d'accès
membres
variables
fonctions
via
variables
dynamiques
Ex
class
Panier
{
//
Eléments
panier
public
etat=false
//
false
vide
}
function
bidon
{
return
'etat
'
}
mon_caddie=new
Panier
pipo='etat
'
echo
mon_caddie-
pipo
//
affiche
this-
etat
fonction='affiche_panier
'
mon_caddie-
fonction
echo
nom_caddie-
{
bidon
}
15.4
L'opérateur
L'opérateur
permet
faire
référence
membres
d'une
classe
base
voir
héritage
d'utiliser
méthodes
alors
classe
'
instanciée
class
{
function
example
{
echo
``
fonction
originale.
br
\n
}
}
//
'
d'objets
classe
//
L'affichage
fonction
originale
:example
cas
d'un
appel
méthode
d'une
classe
non
instanciée
d'objets
méthode
doit
appeler
d'attributs
classe
puisqu'ils
n'existent
raison
faut
employer
variable
this
méthodes
appelées
S.
ROHAUT
Cours
Programmation
PHP
Page
72/93
15.5
variables
protection
15.5.1
PHP
4.x
déclare
attributs
mot-clé
var
attributs
considérés
comme
tous
publics
PHP
4
possède
aucun
mécanisme
protection
variables
Ainsi
attribut
accessible
depuis
toute
classes
dérivées
depuis
l'extérieur
classe
var
mavariable
interdit
d'initialiser
variable
lors
déclaration
var
toto=
salut
``
//
marche
15.5.2
PHP
5.x
15.5.2.1
Protection
variables
fonctions
PHP
5
rajoute
notion
protection
données
manquait
PHP
4
appelle
ça
trois
P
public
protected
private
mots-clés
correspondants
Voici
tableau
récapitulatif
effet
Accès
Public
Protected
Private
classe
elle-même
ü
ü
ü
Depuis
classe
dérivée
ü
ü
û
Depuis
l'extérieur
ü
û
û
Note
mots-clés
public
private
protected
peuvent
bien
entendu
être
utilisés
méthodes
fonctions
auquel
cas
protection
s'étend
manière
mot-clé
var
toujours
utilisable
PHP
5
cas
attributs
considérés
comme
publics
possible
d'initialiser
variables
création
n'importe
quelle
valeur
class
Panier
{
//
Eléments
panier
privé
private
contenu=array
}
15.5.2.2
attributs
méthodes
statiques
peut
aussi
définir
attributs
méthodes
statiques
accessibles
dehors
classe
l'objet
n'étant
forcément
déclaré
rajoute
mot-clé
static
après
définition
visibilité
l'attribut
static
n'ayant
portée
définie
considéré
comme
public
exemple
voici
compteur
permettant
savoir
combien
fois
classe
instanciée
Notez
l'utilisation
self
place
this
this
peut
être
utilisé
ici
fait
référence
objet
attribut
statique
fait
référence
classe
elle-même
S.
ROHAUT
Cours
Programmation
PHP
Page
73/93
class
{
public
static
compteur=0
function
{
self
compteur++
//
incrémente
}
function
affiche
{
echo
self
compteur
``
br
/
//
self
}
}
o1=new
o1-
affiche
//
1
o2=new
o2-
affiche
//
2
o3=
new
o3-
affiche
//
3
echo
compteur
//
3
15.5.2.3
constantes
classe
peut
créer
constantes
classe
l'aide
mot-clé
const
déclaration
d'une
constante
doit
être
précédée
d'un
indicateur
visibilité
constante
toujours
publique
peut
non
plus
assigner
constante
valeur
elle-même
dynamique
comme
retour
d'une
fonction
Comme
variables
statiques
utilise
self
accéder
valeur
class
{
const
classname=
function
__construct
{
echo
self
:classname
}
}
o1=new
//
Affiche
15.6
Héritage
polymorphisme
L'héritage
permet
définir
classes
génériques
réutilisables
peut
alors
faire
extensions
classe
faire
dériver
classe
d'une
autre
classe
dérivée
hérite
toutes
méthodes
variables
classe
base
peut
redéfinir
propres
fonctions
variables
classe
peut
hériter
d'une
seule
autre
classe
L'héritage
multiple
n'est
supporté
PHP
4
PHP
5
contre
rien
n'empêche
faire
héritages
cascade
polymorphisme
permet
redéfinir
méthode
nom
classe
dérivée
d'autres
paramètres
éventuels
NOTE
polymorphisme
n'est
surcharge
surcharge
consiste
définir
plusieurs
méthodes
nom
prototypes
différents
PHP
5
supporte
forme
surcharge
polymorphisme
remplace
méthode
autre
classe
dérivée
créer
héritage
utilise
mot-clé
extends
S.
ROHAUT
Cours
Programmation
PHP
Page
74/93
class
Panier_nomme
extends
Panier
{
var
proprietaire
function
nom_proprietaire
nom
{
this-
proprietaire
=
nom
}
}
créé
classe
Panier_nomme
hérite
Panier
possède
mêmes
propriétés
classe
Panier
laquelle
rajoute
nouvel
attribut
nouvelle
méthode
ncart
=
new
Panier_nomme
ncart-
nom_proprietaire
``
Slyce
print
ncart-
proprietaire
ncart-
ajout_article
``
ref03
1
polymorphisme
peut
redéfinir
classe
dérivée
méthodes
classe
héritée
class
{
function
affiche
{
echo
``
Classe
br
/
}
}
class
B
extends
{
function
affiche
{
echo
``
Classe
B
br
/
}
}
test=new
B
test-
affiche
//
Affiche
Classe
B
15.7
mots-clés
parent
self
mot-clé
parent
représente
classe
base
celle
présente
après
extends
permet
faire
référence
variables
fonctions
d'une
classe
base
class
{
function
example
{
echo
``
:example
fonctionnalité
base.
br
\n
}
}
class
B
extends
{
function
example
{
echo
``
B
:example
fonctionnalité
supplémentaire.
br
\n
parent
:example
}
}
b
=
new
B
//
appelle
B
:example
tour
appelle
:example
b-
example
mot-clé
self
représente
classe
elle-même
peut
être
utilisée
préciser
l'accès
membre
précis
comme
attribut
statique
S.
ROHAUT
Cours
Programmation
PHP
Page
75/93
15.8
Constructeurs
15.8.1
PHP
4
5
constructeur
méthode
automatiquement
appelée
lors
création
d'un
objet
new
méthode
devient
constructeur
porte
nom
classe
laquelle
définie
class
auto_panier
extends
Panier_nomme
{
function
auto_panier
{
this-
proprietaire=session_id
}
}
classe
hérite
Panier_nomme
constructeur
initialise
nom
propriétaire
comme
l'identifiant
session
constructeur
peut
prendre
comme
n'importe
quelle
méthode
paramètres
optionnels
class
auto_panier
extends
Panier_nomme
{
function
auto_panier
nom=
anonyme
{
this-
proprietaire=
nom
}
}
panier=new
auto_panier
//
constructeur
appelé
valeur
défaut
panier2=new
auto_panier
session_id
//
valeur
passée
15.8.2
PHP
5
Outre
nom
classe
elle-même
PHP
5
propose
méthode
générique
appelée
__construct
deux
underscores
_
début
lieu
place
première
méthode
vue
ci-dessus
Ainsi
function
__construct
{
this-
proprietaire=session_id
}
revient
exactement
15.9
Constructeurs
classes
dérivées
15.9.1
PHP
4
5
classes
B
suivantes
class
{
function
{
echo
``
classe
br
/
}
}
class
B
extends
{
function
B
{
echo
``
classe
B
br
/
}
}
S.
ROHAUT
Cours
Programmation
PHP
Page
76/93
création
d'un
nouvel
objet
type
B
b=new
B
Affichera
classe
B
classe
'
constructeur
c'est
constructeur
classe
base
appelé
class
{
function
{
echo
``
classe
br
/
}
}
class
B
extends
{
var
var
}
b=new
B
//
classe
remarque
constructeurs
appelés
cascade
Ainsi
cas
classe
B
constructeur
classe
n'est
appelé
logique
car
PHP
peut
savoir
défaut
comment
appeler
constructeur
quels
paramètres
doit
l'appeler
explicitement
l'aide
mot-clé
parent
class
{
function
{
echo
``
classe
br
/
}
}
class
B
extends
{
var
var
function
B
{
echo
``
classe
B
br
/
parent
:A
}
}
b=new
B
//
Affiche
classe
B
classe
15.9.2
PHP
5
PHP
5
réagit
manière
presque
identique
PHP
4
sauf
qu'il
possible
d'appeler
constructeur
cascade
toujours
mot-clé
parent
sans
connaître
nom
constructeur
classe
base
utilisant
__construct
class
{
function
{
echo
``
classe
br
/
}
}
class
B
extends
{
var
var
function
__construct
S.
ROHAUT
Cours
Programmation
PHP
Page
77/93
{
echo
``
classe
B
br
/
parent
:__construct
//
Appelle
constructeur
}
}
b=new
B
//
Affiche
classe
B
classe
15.10
Destructeur
15.10.1
PHP
4
'
destructeur
PHP
4
fera
confiance
cas
gestion
mémoire
ramasse-miettes
PHP
appeler
méthode
particulière
classe
fin
script
chargée
faire
ménage
peut
être
important
exemple
lorsqu'on
alloué
ressource
image
dynamique
détruire
objet
suffit
réaffecter
variable
détruire
unset
L'objet
détruit
toute
façon
implicitement
fin
l'exécution
script
15.10.2
PHP
5
destructeur
présent
PHP
5
nomme
__destruct
automatiquement
appelé
lors
destruction
l'objet
Tout
comme
constructeur
n'est
appelé
cascade
doit
être
appelé
explicitement
lors
d'un
héritage
class
{
function
__destruct
{
echo
``
revoir
classe
br
/
}
}
class
B
extends
{
function
__destruct
{
echo
``
revoir
classe
B
br
/
parent
:__destruct
}
}
b=new
B
unset
b
//
destruction
l'objet
affiche
revoir
classe
B
15.11
Affectation
d'objets
15.11.1
Code
commun
fonctionnement
affectations
objets
PHP
4
PHP
5
n'est
effet
PHP
4
l'affectation
fait
copie
référence
PHP
5
peut
induire
grandes
différences
fonctionnement
lorsque
code
objet
PHP
4
utilisé
PHP
5
allons
voir
exemple
l'aide
d'une
classe
très
simple
class
{
var
function
{
this-
a=
Salut
S.
ROHAUT
Cours
Programmation
PHP
Page
78/93
}
function
affiche
{
echo
``
this-
br
/
}
}
function
modif
objet
{
objet-
a='coucou
'
}
15.11.2
PHP
4
PHP
4
objets
affectés
copie
nouvel
objet
créé
reprenant
toutes
propriétés
premier
totalement
indépendant
Ainsi
voici
résultat
code
suivant
obj1=new
obj2=
obj1
//
affectation
copie
obj1-
affiche
//
affiche
salut
obj2-
affiche
//
affiche
Salut
obj1-
a=
Bonjour
obj1-
affiche
//
affiche
Bonjour
obj2-
affiche
//
affiche
Salut
modif
obj1
//
copie
obj1-
affiche
//
affiche
Bonjour
obj2-
affiche
//
affiche
Salut
créé
fonction
doit
modifier
objet
comme
passé
défaut
copie
modifie
fait
copie
locale
l'objet
cas
passe
référence
function
modif
&
objet
{
objet-
a='coucou
'
}
obj2=
&
obj1
//
référence
modif
obj1
//
référence
obj1-
affiche
//
affiche
coucou
car
modifié
référence
obj2-
affiche
//
affiche
coucou
souhaite
créer
code
objet
PHP
4
peu
compatible
objets
PHP5
alors
doit
effectuer
copies
référence
passer
objets
fonctions
référence
code
modifié
ci-dessus
marche
deux
cas
15.11.3
PHP
5
PHP
5
objets
affectés
référence
défaut
manière
implicite
Ainsi
obj1=new
obj2=
obj1
//
affectation
référence
obj1-
affiche
//
affiche
salut
obj2-
affiche
//
affiche
Salut
obj1-
a=
Bonjour
obj1-
affiche
//
affiche
Bonjour
S.
ROHAUT
Cours
Programmation
PHP
Page
79/93
obj2-
affiche
//
affiche
Bonjour
modif
obj1
//
référence
obj1-
affiche
//
affiche
coucou
obj2-
affiche
//
affiche
coucou
simplifie
énormément
tâche
développeurs
Cependant
peut
explicitement
demander
copie
d'un
objet
l'aide
d'une
méthode
spéciale
__clone
l'instruction
clone
clonage
consiste
recopier
tous
attributs
d'une
classe
autre
clonage
peut
être
implicite
copie
directe
mécanisme
interne
PHP
explicite
via
méthode
__clone
obj3=clone
obj1
//
copie
implicitement
obj1
obj3
obj1-
a='Bonjour
'
obj3-
a='Au
revoir
'
obj1-
affiche
//
Affiche
bonjour
obj3-
affiche
//
Affiche
revoir
méthode
fonctionne
bien
tant
qu'on
n'utilise
informations
complexes
comme
ressources
descripteurs
fichiers
exemple
obj1
ouvert
connexion
base
données
copié
ressource
Base
données
inutilisable
car
ouverte
faudrait
rouvrir
__clone
class
Base
{
private
db
function
__construct
{
this-
db=mysql_connect
'localhost
'
}
function
__clone
{
this-
db=mysql_connect
'localhost
'
}
}
obj1=new
Base
obj2=clone
obj1
//
copie
__clone
rouvre
connexion
copie
Note
méthode
__clone
appelée
implicitement
mot-clé
clone
utilisé
peut
appeler
explicitement
méthode
15.12
Comparaison
d'objets
15.12.1
PHP
4
peut
effectuer
comparaisons
d'objets
PHP4
Deux
instances
d'objets
égales
seulement
•
elles
proviennent
classe
•
elles
mêmes
attributs
•
attributs
valeur
peut
employer
indifféremment
comparaison
==
===
function
bool2str
bool
{
if
bool
===
false
{
return
'FALSE
'
}
else
{
S.
ROHAUT
Cours
Programmation
PHP
Page
80/93
return
'TRUE
'
}
}
function
compareObjects
&
o1
&
o2
{
echo
'o1
==
o2
'.bool2str
o1
==
o2
``
\n
echo
'o1
=
o2
'.bool2str
o1
=
o2
``
\n
echo
'o1
===
o2
'.bool2str
o1
===
o2
``
\n
echo
'o1
==
o2
'.bool2str
o1
==
o2
``
\n
}
class
Flag
{
var
flag
function
Flag
flag=true
{
this-
flag
=
flag
}
}
class
SwitchableFlag
extends
Flag
{
function
turnOn
{
this-
flag
=
true
}
function
turnOff
{
this-
flag
=
false
}
}
o
=
new
Flag
p
=
new
Flag
false
q
=
new
Flag
r
=
new
SwitchableFlag
echo
``
Compare
instances
créées
mêmes
paramètres\n
compareObjects
o
q
echo
``
\nCompare
instances
créées
différents
paramètres\n
compareObjects
o
p
echo
``
\nCompare
instance
d'un
parent
celle
d'une
sous-classe\n
compareObjects
o
r
exemple
va
afficher
Compare
instances
créées
mêmes
paramètres
o1
==
o2
TRUE
o1
=
o2
FALSE
o1
===
o2
TRUE
o1
==
o2
FALSE
Compare
instances
créées
différents
paramètres
o1
==
o2
FALSE
o1
=
o2
TRUE
o1
===
o2
FALSE
o1
==
o2
TRUE
Compare
instance
d'un
parent
celle
d'une
sous-classe
o1
==
o2
FALSE
o1
=
o2
TRUE
o1
===
o2
FALSE
o1
==
o2
TRUE
S.
ROHAUT
Cours
Programmation
PHP
Page
81/93
15.12.2
PHP
5
PHP
5
fait
différence
entre
comparaison
simple
==
complète
===
==
PHP
retournera
vrai
deux
objets
mêmes
attributs
valeurs
s'ils
instances
classe
comme
PHP
4
===
PHP
retournera
vrai
deux
objets
font
référence
objet
classe
o1=new
o2=
o1
//
référence
o3=
new
if
o1==
o2
echo
``
o1==o2
br
/
else
echo
``
o1
==o2
br
/
if
o1===
o2
echo
``
o1===o2
br
/
else
echo
``
o1
===o2
br
/
if
o1==
o3
echo
``
o1==o3
br
/
else
echo
``
o1
==o3
br
/
if
o1===
o3
echo
``
o1===o3
br
/
else
echo
``
o1
===o3
br
/
Va
afficher
o1==o2
//
o1
o2
identiques
classe
mêmes
attributs
props
o1===o2
//
o1
o2
références
objet
o1==o3
//
o1
o3
identiques
classe
mêmes
attributs
props
o1
===o3
//
o1
o3
références
objet
S.
ROHAUT
Cours
Programmation
PHP
Page
82/93
16
Nouveautés
PHP
5
16.1
objets
16.1.1
fonction
__autoload
fonction
__autoload
indique
PHP
comment
réagir
quand
tente
créer
objet
depuis
classe
'
définie
C'est
facilité
offerte
substitue
forcément
require
include
peut
être
utile
exemple
éviter
d'inclure
l'ensemble
classes
utilisées
projet
préférera
inclure
définition
classe
moment
création
instance
fonction
__autoload
prend
qu'un
paramètre
nom
classe
programmer
ensuite
inclure
code
nécessaire
function
__autoload
class
{
require_once
``
/inc/
{
class
}
.php
}
16.1.2
classes
abstraites
classes
abstraites
nouveauté
PHP
5
classe
abstraite
classe
sans
implémentation
peut
être
instanciée
représentée
moins
fonction
abstraite
virtuelle
pure
sans
code
l'implémentation
effectuée
classes
dérivées
classes
abstraites
servent
essentiellement
définir
classe
base
normalisée
structure
pourra
être
reprise
développement
d'autres
classes
effectives
Toute
classe
contient
moins
méthode
abstraite
doit
être
définie
comme
abstraite
classe
dérivée
redéfinit
méthode
abstraite
classe
parente
base
devra
être
déclarée
abstraite
tour
pourra
être
instanciée
classe
implémente
méthode
abstraite
doit
être
définie
visibilité
plus
faible
méthode
abstraite
définie
tant
protégée
fonction
l'implémentant
doit
être
définie
tant
protégée
publique
L'instruction
définir
classes
méthodes
abstract
//
Classe
abstraite
contient
méthode
abstraite
abstract
class
AbstractClass
{
//
Méthode
abstraite
devra
être
redéfinie
classe
dérivée
abstract
protected
function
getValue
public
function
prt
{
print
this-
getValue
}
}
class
ConcreteClass1
extends
AbstractClass
{
//
Redéfinition
méthode
abstraite
classe
base
protected
function
getValue
{
return
``
ConcreteClass1
}
}
S.
ROHAUT
Cours
Programmation
PHP
Page
83/93
class
ConcreteClass2
extends
AbstractClass
{
//
Redéfinition
méthode
abstraite
classe
base
protected
function
getValue
{
return
``
ConcreteClass2
}
}
class1
=
new
ConcreteClass1
class1-
prt
//
affiche
ConcreteClass1
class2
=
new
ConcreteClass2
class2-
prt
//
affiche
ConcreteClass2
16.1.3
Classes
méthodes
variables
finales
PHP
inclut
nouveau
mécanisme
protection
interdisant
classes
dérivées
réimplémenter
méthode
variable
classe
d'être
elle-même
dérivée
mot-clé
final
indique
classe
méthode
variable
définitives
qu'elles
pourront
plus
être
implémentées
Voici
cas
d'erreur
class
{
protected
val
function
__construct
{
this-
val=1
}
final
function
affiche
{
print
this-
val
}
}
class
B
extends
{
function
__construct
{
parent
:_construct
}
function
affiche
{
//
ERREUR
PEUT
REDEFINIR
print
this-
val
}
}
o1=new
B
o1-
affiche
classe
B
tenté
récrire
méthode
affiche
déclarée
final
PHP
retournera
erreur
16.1.4
interfaces
objet
interfaces
permettent
créer
code
spécifie
quelles
méthodes
attributs
classe
peut
implémenter
sans
avoir
définir
comment
elles
gérées
Toutes
méthodes
spécifiées
l'interface
doivent
être
implémentées
classe
définit
L'interface
moyen
définir
pré-requis
obligatoires
construction
d'un
modèle
classe
donnant
liste
prototypes
créé
interface
mot-clé
interface
exemple
allons
définir
toutes
classes
implémentent
interface
doivent
obligatoirement
définir
fonctions
affiche
incrémente
S.
ROHAUT
Cours
Programmation
PHP
Page
84/93
interface
Template
{
public
function
affiche
public
function
incremente
cpt
}
Attention
déclaration
méthodes
notamment
paramètres
doit
être
rigoureusement
identique
classe
celle
l'interface
indique
qu'une
classe
implémente
interface
mot-clé
implements
class
implements
Template
{
protected
val
function
__construct
{
this-
val=1
}
function
affiche
{
print
this-
val
}
function
incremente
cpt
{
this-
val+=
cpt
}
}
o1=new
o1-
incremente
2
o1-
affiche
classe
peut
implémenter
plusieurs
interfaces
temps
cas
liste
interfaces
doit
être
précisée
après
mot-clé
implements
chaque
interface
séparée
virgules
interface
Template
{
public
function
affiche
public
function
incremente
cpt
}
interface
Template2
{
public
function
decremente
cpt
}
class
implements
Template
Template2
{
protected
val
function
__construct
{
this-
val=1
}
function
affiche
{
print
this-
val
}
function
incremente
cpt
{
this-
val+=
cpt
}
function
decremente
cpt
{
this-
val-=
cpt
}
}
S.
ROHAUT
Cours
Programmation
PHP
Page
85/93
16.1.5
Gestion
dynamique
méthodes
attributs
peut
toujours
surcharger
directement
méthodes
attributs
opérateurs
PHP
5
comme
C++
Cependant
nouvelles
fonctions
permettent
d'intercepter
appels
méthodes
attributs
non
prévus
Note
méthodes
peuvent
uniquement
être
déclenchées
lorsque
objet
hérité
non
contient
l'attribut
méthode
tentez
d'accéder
cas
contraire
méthode
l'attribut
utilisés
méthode
utilise
méthode
__call
prend
deux
paramètres
premier
nom
méthode
second
tableau
paramètres
passés
méthode
Imaginons
souhaitons
appeler
méthode
test
objet
n'avions
prévu
cas
suffit
gérer
cas
méthode
__call
class
{
function
__call
{
//
Gère
appels
méthodes
non
définies
if
m==
test
{
echo
``
fonction
test
appelée
valeurs
return
}
}
}
o1
=
new
=
o1-
test
1
``
2
3.4
true
//
test
n'existe
pourtant
print_r
//
ça
marche
ça
retourne
paramètres
test
attribut
utilise
méthodes
__get
__set
méthode
__get
appelée
implicitement
lorsque
tentez
d'accéder
valeur
d'une
variable
n'est
définie
classe
prend
comme
unique
paramètre
nom
l'attribut
auquel
tentez
d'accéder
méthode
__set
appelée
lorsque
tentez
d'affecter
valeur
attribut
n'est
défini
prend
deux
paramètres
nom
variable
valeur
affectée
class
{
private
tab=array
function
__get
v
{
if
isset
this-
tab
v
return
false
else
return
this-
tab
v
}
function
__set
v
{
this-
tab
v
=
}
}
o1
=
new
o1-
var=1
//
membre
var
n'existe
pourtant
echo
o1-
var
//
ça
marche
ça
affiche
1
16.1.6
itérations
d'objets
PHP
5
indexe
attributs
objets
possible
d'accéder
liste
attributs
visibilité
permet
l'aide
simple
boucle
itérative
comme
foreach
S.
ROHAUT
Cours
Programmation
PHP
Page
86/93
class
{
public
v1=
salut
public
v2=
public
v3=
amis
``
private
v4=
privé
}
o1
=
new
foreach
o1
cle
=
valeur
{
echo
``
cle
=
valeur
br
/
\n
}
code
affiche
v1
=
salut
v2
=
v3
=
amis
attributs
visibles
affichés
existe
interfaces
prédéfinies
permettant
créer
propre
classe
d'itération
classe
Iterator
implémente
cinq
méthodes
suivantes
•
current
•
next
•
key
•
valid
•
rewind
peut
créer
classe
implémentant
interface
exemple
naviguer
résultat
d'une
requête
base
données
tableau
16.1.7
Type
hinting
PHP
5
permet
contrôler
type
valeur
passé
paramètre
fonction
Prenons
code
suivant
retourne
infos
d'un
utilisateur
classe
utilisateur
function
detail
user
{
return
user-
infos
}
fonction
attend
objet
particulier
classe
utilisateur
Tout
fonctionnera
merveille
code
blindé
Cependant
passe
entier
ça
marchera
c'est
seulement
lors
return
user-
infos
PHP
générera
erreur
type
hinting
indique
PHP
qu'attend
exactement
fonction
function
detail
utilisateur
user
{
return
user-
infos
}
fois
PHP
5
retournera
erreur
dès
l'appel
fonction
reçoit
objet
classe
utilisateur
S.
ROHAUT
Cours
Programmation
PHP
Page
87/93
16.2
exceptions
16.2.1
try
catch
PHP
5
inclut
enfin
support
exceptions
bloc
try
catch
Ainsi
peut
placer
code
risque
code
exceptionnel
peut
produire
erreur
bloc
try
gérer
l'erreur
selon
type
blocs
catch
put
utiliser
plusieurs
blocs
catch
suivant
type
d'erreur
généré
Attention
quand
c'est
possible
gérera
erreurs
code
normal
try
{
//
Code
risque
d'erreur
}
catch
Exception
e
{
//
Code
réglant
situation
exceptionnelle
}
sein
bloc
try
l'exécution
d'une
instruction
erronée
va
déclencher
l'émission
d'un
signal
exception
signal
interrompt
l'exécution
reste
tout
bloc
fonction
signal
PHP
exécutera
bloc
catch
approprié
remarque
bloc
catch
PHP
gère
exceptions
l'aide
d'une
classe
spéciale
appelée
Exception
exception
fait
définie
objet
classe
d'une
classe
dérivée
peut
créer
propres
gestionnaires
d'exceptions
Comme
peut
écrire
plusieurs
blocs
catch
gérer
exceptions
suivant
type
d'objet
16.2.2
Déclenchement
throw
peut
déclencher
manuellement
exception
l'aide
l'instruction
throw
Voici
code
provoque
toujours
exception
try
{
erreur=
Message
d'erreur
throw
new
Exception
erreur
echo
'Jamais
exécuté
'
}
catch
Exception
e
{
echo
'Exception
'.
e-
getMessage
'
ligne
'.
e-
getLine
``
\n
}
l'aide
l'instruction
throw
provoqué
l'émission
d'une
exception
gérée
classe
Exception
cas
PHP
va
rechercher
bloc
catch
correspondant
type
d'objet
créé
gérer
l'exception
ici
catch
Exception
e
16.2.3
classe
Exception
classes
personnalisées
classe
exception
imposée
PHP
comme
classe
base
parente
toute
classe
utilisable
catch
classe
base
dispose
méthodes
suivantes
•
__construct
erreur
code
constructeur
message
d'erreur
code
•
getMessage
retourne
message
d'erreur
généré
S.
ROHAUT
Cours
Programmation
PHP
Page
88/93
•
getCode
Code
erreur
l'exception
•
getLine
numéro
ligne
script
provoqué
l'exception
•
getFile
nom
script
PHP
provoqué
l'exception
•
getTrace
getTraceAstring
gestion
pile
d'appels
peu
comme
Java
•
__toString
chaîne
formatée
afficher
méthodes
getXXXX
finales
peut
étendre
constructeur
méthode
__toString
peuvent
être
étendus
peut
créer
propre
classe
dérivée
class
MonException
extends
Exception
{
public
function
__construct
message=
Erreur
défaut
code
=
0
{
parent
:__construct
message
code
}
}
a=1
try
{
switch
{
case
1
throw
new
MonException
``
Ouille
``
break
case
2
throw
new
Exception
``
``
break
}
}
catch
MonException
e
{
echo
e-
getMessage
}
catch
Exception
e
{
echo
'Exception
'.
e-
getMessage
'
ligne
'.
e-
getLine
``
\n
}
vaut
1
MonException
envoyé
vaut
2
Exception
16.2.4
PHP
Erreur
Exception
peut
certains
cas
PHP
déclenche
naturellement
exception
suivant
l'exécution
d'une
fonction
cas
indiqué
documentation
PHP
voir
site
PHP
ligne
plupart
cas
c'est
l'ancien
système
gestion
erreurs
utilisé
Ainsi
code
suivant
try
{
a=fopen
'toto
'
'
r
'
}
catch
Exception
e
{
echo
'Exception
'.
e-
getMessage
}
donnera
tout
résultat
escompté
L'exécution
fopen
provoquera
l'émission
d'une
exception
erreur
PHP
type
WARNING
Warning
fopen
toto
function.fopen
failed
to
open
stream
No
such
file
or
S.
ROHAUT
Cours
Programmation
PHP
Page
89/93
directory
in
\apachefriends\xampp\htdocs\objet\panier.php
line
21
PHP
gère
plusieurs
niveau
d'erreurs
WARNING
NOTICE
etc.
exemple
problème
d'ouverture
fichier
émet
erreur
type
WARNING
erreur
syntaxe
PARSE
l'utilisation
d'une
variable
non
déclarée
NOTICE
peut
régler
modifier
niveaux
d'erreurs
php.ini
aussi
dynamiquement
via
fonctions
Parmi
fonctions
deux
peuvent
intéresser
set_error_handler
permet
modifier
comportement
défaut
PHP
lorsqu'il
rencontre
erreur
script
lieu
d'exécuter
propre
gestionnaire
exécutera
Attention
gestionnaire
peut
gérer
certains
types
d'erreurs
syntaxe
etc
voir
http
//www.php.net/manual/en/function.set-error-
handler.php
cas
d'un
simple
WARNING
NOTICE
'
problème
passe
paramètre
nom
propre
fonction
doit
gérer
l'erreur
paramètres
assez
parlants
fonction
allons
déclencher
exception
réception
n'importe
quelle
erreur
function
gest_erreur
errno
errstr
errfile
errline
{
throw
new
Exception
``
errstr
line
errline
errno
}
set_error_handler
``
gest_erreur
l'exécution
bloc
try
catch
fois
Exception
fopen
toto
function.fopen
failed
to
open
stream
No
such
file
or
directory
line
21
voulions
bien
déclenché
exception
16.2.5
Exception
défaut
certaines
instructions
PHP
génèrent
exceptions
instructions
sein
d'un
bloc
try
catch
PHP
générera
exception
défaut
propre
gestionnaire
d'exceptions
peut
modifier
état
fonction
set_exception_handler
function
exception_handler
exception
{
echo
``
Exception
imprévue
``
exception-
getMessage
``
\n
}
set_exception_handler
'exception_handler
'
S.
ROHAUT
Cours
Programmation
PHP
Page
90/93
17
Sauvegarder
objets
17.1
Cas
d'une
session
informations
indiquées
ici
fonctionnent
aussi
bien
PHP
4
qu'en
PHP
5
faut
distinguer
cas
sessions
faut
passer
objet
d'une
page
l'autre
cas
d'une
sauvegarde
d'un
objet
disque
premier
cas
sessions
utilisées
objets
peuvent
être
passés
directement
d'une
page
autre
respectant
quelques
règles
•
session
doit
être
ouverte
chaque
page
fonction
session_start
avant
l'utilisation
l'objet
•
classes
doivent
être
définies
avant
l'ouverture
session
session_start
l'appel
l'objet
implique
répéter
déclaration
chaque
page
placer
fichier
inclure
require
require_once
début
script
•
L'objet
doit
être
variable
session
stockée
fonction
session_register
l'aide
tableau
global
_SESSION
Voici
exemple
objet.inc
class
Panier
{
//
Eléments
panier
var
contenu
//
Ajout
qte
articles
type
code
panier
function
ajout_article
code
qte
{
if
isset
this-
contenu
code
this-
contenu
code
+=
qte
else
this-
contenu
code
=
qte
}
//
Suppression
num
articles
type
artnr
panier
function
suppr_article
code
qte
{
if
this-
contenu
code
qte
{
this-
contenu
code
-=
qte
return
TRUE
}
else
{
return
FALSE
}
}
function
liste_article
{
foreach
this-
contenu
ref
=
qte
echo
``
ref=
qte
br
/
}
}
class
Panier_nomme
extends
Panier
{
var
proprietaire
function
nom_proprietaire
nom
{
this-
proprietaire
=
nom
}
}
S.
ROHAUT
Cours
Programmation
PHP
Page
91/93
objet.php
php
require_once
``
objet.inc
session_start
html
head
title
Page
1
/title
/head
body
_SESSION
'objet
'
=new
Panier_nomme
_SESSION
'objet
'
-
nom_proprietaire
``
seb
_SESSION
'objet
'
-
ajout_article
``
ref01
,3
_SESSION
'objet
'
-
suppr_article
``
ref01
,1
_SESSION
'objet
'
-
ajout_article
``
ref02
,3
echo
``
{
_SESSION
'objet
'
-
proprietaire
}
br
/
href=
objet2.php
Page
2
/a
/body
/html
objet2.php
php
require_once
``
objet.inc
session_start
html
head
title
Page
2
/title
/head
body
echo
_SESSION
'objet
'
-
proprietaire
``
br
/
_SESSION
'objet
'
-
liste_article
/body
/html
17.2
Autres
cas
Rien
n'empêche
conserver
objet
récupérer
plus
tard
après
avoir
fermé
session
ça
peut
stocker
fichier
base
données
récupérer
format
correct
données
stockage
faut
utiliser
fonctions
serialize
unserialize
première
fonction
retourne
chaîne
texte
représentant
variable
forcément
objet
passée
paramètre
format
donnée
peut
ainsi
être
stocké
manière
convient
seconde
fonction
prend
comme
paramètre
chaîne
texte
issue
serialize
retourne
variable
type
originel
cas
objet
classa.inc
php
class
{
var
one
=
1
function
show_one
{
echo
this-
one
S.
ROHAUT
Cours
Programmation
PHP
Page
92/93
}
}
page1.php
php
include
``
classa.inc
=
new
=
serialize
//
enregistrez
page2.php
pourra
trouver
fp
=
fopen
``
store
``
w
fputs
fp
fclose
fp
page2.php
php
//
Ceci
nécessaire
unserialize
fonctionne
correctement
include
``
classa.inc
=
implode
``
file
``
store
unserialize
//
maintenant
utilisez
méthode
show_one
l'objet
a-
show_one
S.
ROHAUT
Cours
Programmation
PHP
Page
93/93
Document
Outline
1Introduction
1.1Définition
1.2Historique
1.3Utilisation
pratique
1.4Pages
statiques
vs
pages
dynamiques
1.5Scripts
CGI
1.6Pages
dynamiques
PHP
1.7Pourquoi
préférer
PHP
d'autres
langages
comme
ASP
1.8Ce
devez
déjà
connaître
1.9Le
nécessaire
serveur
1.10Le
nécessaire
client
1.11Le
respect
standards
2Bases
Présentation
2.0.1Syntaxe
base
2.1Intégration
HTML
2.2Séparateur
d'instructions
2.3Bloc
d'instructions
2.4Commentaires
3Travailler
variables
3.1Déclarer
variable
3.2Portée
variables
3.3Variables
prédéfinies
3.4Variables
dynamiques
3.5Types
variables
3.5.1booléens
3.5.2Entiers
3.5.3Virgule
flottante
3.5.4Chaînes
caractères
3.5.5Les
tableaux
3.5.6La
variable
objet
3.6Les
constantes
3.7Obtenir
type
d'une
variable
3.8Définir
supprimer
variable
4Les
opérateurs
4.1La
précédence
opérateurs
4.2Opérateurs
arithmétiques
4.3Opérateurs
d'assignation
4.4Opérateurs
bits
4.5Opérateurs
comparaison
4.6Opérateur
d'erreur
4.7Opérateur
d'exécution
4.8Opérateurs
d'incrémentation/décrémentation
4.9Opérateurs
logiques
4.10Opérateurs
chaînes
4.11Opérateur
tableaux
5La
notion
d'expression
6Les
structures
contrôle
6.1if
6.2while
6.2.1while
classique
6.2.2do
while
6.3for
6.4foreach
6.5break
continue
6.6switch
6.7return
6.8require
include
_once
7Les
fonctions
7.1Syntaxe
portée
7.2Arguments
7.3Valeur
retour
7.4Fonctions
internes
8Gestion
formulaires
PHP
8.1GET
POST
8.2Récupération
tableau
8.3Récupération
directe
8.4Utiliser
tableaux
9Date
heure
9.1Localisation
9.2Récupérer
date
l'heure
9.2.1date
9.2.2date
locale
strftime
9.2.3Retour
tableau
getdate
9.2.4L'heure
localtime
9.3Récupérer
n'importe
quelle
date
10MySQL
10.1Présentation
10.2Outils
10.2.1PhpMyAdmin
10.2.2MysqlCC
10.3Créer
base
10.4Utilisateurs
droits
10.5Créer
modifier
tables
10.5.1Types
Numériques
10.5.1.1Types
entiers
10.5.1.2Types
réels
flottants
10.5.1.3Types
booléens
10.5.2Types
caractères
10.5.2.1Types
CHAR
10.5.2.2Types
TEXT
10.5.2.3Type
ENUM
10.5.2.4Type
SET
10.5.3Types
date
10.5.3.1Formats
supportés
10.5.3.2Type
DATETIME
10.5.3.3Type
DATE
10.5.3.4Type
TIMESTAMP
10.5.3.5Type
TIME
10.5.3.6Type
YEAR
10.5.4Création
Syntaxe
SQL
10.5.5Types
tables
MyISAM
InnoDB
10.5.6Index
FULLTEXT
10.5.6.1Création
10.5.6.2Recherche
10.5.6.3Recherche
booléenne
10.6MySQL
PHP
10.6.1Connexion
base
données
10.6.1.1Connexion
serveur
10.6.1.2Choix
d'une
base
10.6.1.3Fermeture
d'une
connexion
10.6.1.4Séquence
complète
base
10.6.2Les
requêtes
10.6.2.1Exécuter
requête
10.6.2.2Nombre
lignes
affectées
10.6.2.3Nombre
lignes
retournées
10.6.2.4Récupérer
résultats
10.6.2.5Insertion
auto-incrément
10.6.3Récupération
erreurs
11Le
système
fichiers
11.1Travail
fichiers
11.1.1Ouverture
11.1.2Lecture
11.1.2.1fgets
11.1.2.2fread
11.1.2.3fscanf
11.1.2.4fgetc
11.1.2.5fgetss
11.1.2.6fgetcsv
11.1.2.7Renvoyer
fichier
sortie
standard
11.1.3Ecriture
11.1.4Déplacement
11.1.4.1fseek
11.1.4.2ftell
11.1.4.3rewind
11.1.5Fin
fichier
11.1.6Fermeture
11.2Travail
répertoires
11.2.1Répertoire
actuel
11.2.2Se
déplacer
11.2.3Ouvrir
lister
fermer
11.2.4Récupérer
toutes
entrées
11.3Travail
système
fichiers
11.3.1Informations
fichier
11.3.2Actions
fichiers
répertoires
11.4Upload
fichiers
12Travail
chaînes
12.1Fonctions
code
HTML
MySQL
12.1.1Gestion
caractères
verrouillés
12.1.2balises
caractères
spéciaux
HTML
12.2Fonctions
texte
générales
12.2.1Découper
chaîne
12.2.2Rechercher
comparer
13Sessions
cookies
13.1Les
cookies
13.1.1Création
13.1.2Accès
13.1.3Suppression
13.2Identification
HTTP
13.2.1Connexion
13.2.2Déconnexion
13.3Sessions
PHP
13.3.1Principe
13.3.2Utilisation
13.3.2.1Ouverture
13.3.2.2Variables
session
13.3.3Expiration
session
13.3.4Changer
l'accès
défaut
14Images
14.1Pré-requis
importants
14.2Créer
image
14.2.1Types
possibles
14.2.2Création
14.2.2.1Nouvelle
image
dynamique
14.2.2.2Récupération
d'une
image
existante
14.2.3Publication
14.2.4Chargement
via
autre
page
14.3Travailler
Images
14.3.1Récupérer
informations
14.3.2Les
couleurs
14.3.3Dessin
14.3.3.1Remplissage
14.3.3.2Point
14.3.3.3Ligne
14.3.3.4Rectangle
14.3.3.5Cercle
ellipse
14.3.3.6Polygones
14.3.3.7Texte
simple
15La
programmation
objet
15.1Structure
15.2Création
d'un
objet
15.3Accès
membres
15.3.1PHP
4
5
15.3.2PHP
5
15.4L'opérateur
15.5Les
variables
protection
15.5.1PHP
4.x
15.5.2PHP
5.x
15.5.2.1Protection
variables
fonctions
15.5.2.2attributs
méthodes
statiques
15.5.2.3constantes
classe
15.6Héritage
polymorphisme
15.7Les
mots-clés
parent
self
15.8Constructeurs
15.8.1PHP
4
5
15.8.2PHP
5
15.9Constructeurs
classes
dérivées
15.9.1PHP
4
5
15.9.2PHP
5
15.10Destructeur
15.10.1PHP
4
15.10.2PHP
5
15.11Affectation
d'objets
15.11.1Code
commun
15.11.2PHP
4
15.11.3PHP
5
15.12Comparaison
d'objets
15.12.1PHP
4
15.12.2PHP
5
16Nouveautés
PHP
5
16.1Les
objets
16.1.1La
fonction
__autoload
16.1.2Les
classes
abstraites
16.1.3Classes
méthodes
variables
finales
16.1.4Les
interfaces
objet
16.1.5Gestion
dynamique
méthodes
attributs
16.1.6Les
itérations
d'objets
16.1.7Type
hinting
16.2Les
exceptions
16.2.1try
catch
16.2.2Déclenchement
throw
16.2.3classe
Exception
classes
personnalisées
16.2.4PHP
Erreur
Exception
16.2.5Exception
défaut
17Sauvegarder
objets
17.1Cas
d'une
session
17.2Autres
cas
