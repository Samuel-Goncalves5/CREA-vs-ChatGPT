PHP
initiation
Dominique
Gonzalez
Université
Lille3-Charles
Gaulle
PHP
initiation
Dominique
Gonzalez
Publié
mercredi
25
novembre
2009
13h58
Copyright
©
2008
D.Gonzalez
document
soumis
licence
GNU
FDL
Permission
donnée
distribuer
modifier
copies
pages
tant
note
apparaît
clairement
Table
matières
I
cours
....................................................................................................................................................................
.vii
1
Pourquoi
comment
....................................................................................................................................
.1
1.1
Introduction
..........................................................................................................................................
.1
1.2
Pourquoi
document
.....................................................................................................................
.1
1.3
Comment
a-t-il
construit
...........................................................................................................
.1
1.4
trouver
document
..................................................................................................................
.1
1.5
QBullets
...............................................................................................................................................
.1
2
Généralités
langages
informatiques
..................................................................................................
.3
2.1
appelle-t-on
langage
informatique
...........................................................................................
.3
2.2
Langage
interprété
..............................................................................................................................
.3
2.3
Langage
compilé
..................................................................................................................................
.3
2.4
Langages
intermédiaires
.....................................................................................................................
.4
3
langages
particuliers
langages
web
..........................................................................................
.5
3.1
Pourquoi
programmer
.....................................................................................................................
.5
3.2
Quels
langages
..................................................................................................................................
.5
3.3
Avantages
inconvénients
...............................................................................................................
.5
3.4
Choisir
...................................................................................................................................................
.5
4
FAQ
élémentaire
PHP
......................................................................................................................
.7
4.1
PHP
............................................................................................................................
.7
4.2
Quelle
différence
Javascript
...............................................................................................
.7
4.3
Pourquoi
choisir
PHP
lieu
Javascript
.............................................................................
.7
4.4
passe-t-il
affichage
page
PHP
............................................................................
.7
4.5
Comment
intégrer
PHP
HTML
.................................................................................
.7
5
Premiers
exemples
PHP
.............................................................................................................................
.9
5.1
premier
programme
......................................................................................................................
.9
5.2
deuxième
programme
...................................................................................................................
.9
5.3
Rappels
algorithmique
..............................................................................................................
.9
5.4
Variables
expressions
....................................................................................................................
.10
5.5
Fonctions
.............................................................................................................................................
.11
5.6
.................................................................................................................................................
.11
6
Formulaires
HTML
...................................................................................................................................
.15
6.1
Présentation
........................................................................................................................................
.15
6.2
Principaux
contrôles
..........................................................................................................................
.15
6.3
Exemples
.............................................................................................................................................
.16
7
Traitement
formulaire
PHP
............................................................................................................
.19
7.1
Traitement
données
formulaire
PHP
.........................................................................
.19
7.2
Exercices
..............................................................................................................................................
.19
8
Chaînes
caractères
....................................................................................................................................
.21
8.1
est-ce
chaîne
caractères
.........................................................................................
.21
8.2
choisir
Guillemets
apostrophes
...................................................................................
.21
8.3
Principales
utilisations
backslash
................................................................................................
.21
8.4
Principales
opérations
chaînes
............................................................................................
.22
8.5
Principales
fonctions
.........................................................................................................................
.22
8.6
Conversions
types
........................................................................................................................
.23
8.7
Exercices
..............................................................................................................................................
.23
9
tableaux
....................................................................................................................................................
.25
9.1
est-ce
tableau
.................................................................................................................
.25
9.2
Quelques
exemples
utilisation
.....................................................................................................
.25
9.3
tableaux
associatifs
.....................................................................................................................
.26
9.4
Parcours
tableau
associatif
......................................................................................................
.27
9.5
Exercices
..............................................................................................................................................
.27
10
PDO
..................................................................................................................................................................
.29
10.1
est-ce
PDO
............................................................................................................................
.29
10.2
Quelle
utilité
..................................................................................................................................
.29
10.3
connecter
base
données
.................................................................................................
.29
10.4
Exécuter
requête
.......................................................................................................................
.30
10.5
Nombre
lignes
colonnes
requête
select
................................................................
.30
10.6
Accéder
résultats
requête
select
..............................................................................
.30
10.7
Gestion
erreurs
..........................................................................................................................
.31
11
Programmation
séparée
PHP
................................................................................................................
.33
11.1
programmation
séparée
............................................................................................................
.33
11.2
fonctions
require
include
................................................................................................
.33
iii
12
Identification
PHP
..................................................................................................................................
.35
12.1
Préliminaires
fonction
header
.................................................................................................
.35
12.2
Contrôle
mots
passe
............................................................................................................
.35
12.3
Amélioration
plusieurs
utilisateurs
............................................................................................
.36
12.4
Séparer
données
traitement
................................................................................................
.36
12.5
Cacher
mots
passe
................................................................................................................
.37
12.6
Crypter
mots
passe
...............................................................................................................
.37
13
Sessions
..........................................................................................................................................................
.39
13.1
Préambule
.........................................................................................................................................
.39
13.2
Application
identification
visiteurs
.....................................................................................
.39
II
Hors
programme
....................................................................................................................................................
.41
14
Utiliser
PHP
base
données
PostgreSQL
...............................................................................
.43
14.1
Connexion
base
.........................................................................................................................
.43
14.2
Exécution
requête
.................................................................................................................
.43
14.3
Obtention
résultats
requête
.........................................................................................
.43
14.4
exemple
.......................................................................................................................................
.44
14.5
Requêtes
autres
SELECT
...........................................................................................................
.44
14.6
Suppression
messages
erreurs
............................................................................................
.45
14.7
Gestion
erreurs
messages
.............................................................................................
.45
15.
peardb
présentation
............................................................................................................................
.47
15.1
est-ce
pear
..........................................................................................................................
.47
15.2
Quelle
utilité
..................................................................................................................................
.47
15.3
Utiliser
peardb
.................................................................................................................................
.47
15.4
connecter
base
données
.................................................................................................
.47
15.5
Gestion
erreurs
..........................................................................................................................
.48
15.6
Exécuter
requête
.......................................................................................................................
.49
15.7
Accéder
résultats
requête
select
..............................................................................
.49
15.8.
setfetchmode
..............................................................................................................................
.49
15.9.
peardb
informations
requêtes
..........................................................................................
.51
16.
dbx
..................................................................................................................................................................
.53
16.1
est-ce
dbx
............................................................................................................................
.53
16.2
Quelle
utilité
..................................................................................................................................
.53
16.3
connecter
base
données
.................................................................................................
.53
16.4
Exécuter
requête
.......................................................................................................................
.54
16.5
Nombre
lignes
colonnes
requête
select
................................................................
.54
16.6
Accéder
résultats
requête
select
..............................................................................
.54
17
Exploration
contenu
répertoire
...................................................................................................
.57
17.1
notions
nécessaires
PHP
.....................................................................................................
.57
17.2
notions
nécessaires
HTML
.................................................................................................
.57
17.3
Exercices
............................................................................................................................................
.58
18
News
....
...........................................................................................................................................................
.59
18.1
Présentation
......................................................................................................................................
.59
18.2
travail
......................................................................................................................................
.59
18.3
temps
...................................................................................................................
.60
19
fichiers
.....................................................................................................................................................
.61
19.1
Manipulations
base
....................................................................................................................
.61
19.2
exemple
.......................................................................................................................................
.61
19.3
Exercice
.............................................................................................................................................
.63
III
Corrigés
exercices
..........................................................................................................................................
.65
20
Premiers
exercices
algorithmique
corrigés
..........................................................................................
.67
21
Premiers
formulaires
PHP
corrigés
.....................................................................................................
.73
22
Chaînes
caractères
corrigé
....................................................................................................................
.81
23
Exercices
tableaux
corrigés
............................................................................................................
.83
24
Exercices
fichiers
corrigés
..............................................................................................................
.85
25
Exploration
répertoire
corrigés
........................................................................................................
.87
26
News
corrigé
.............................................................................................................................................
.89
26.1
Accueil
...............................................................................................................................................
.89
26.2
Liste
noms
fichiers
nouvelles
.......................................................................................
.89
26.3
Liste
liens
vers
fichiers
nouvelles
...............................................................................
.89
26.4
Affichage
toutes
nouvelles
..................................................................................................
.90
26.5
Affichage
titres
nouvelles
.................................................................................................
.90
26.6
Affichage
titres
faisant
lien
vers
nouvelles
.....................................................................
.91
26.7
Affichage
toutes
nouvelles
proprement
...........................................................................
.91
iv
26.8
Choix
sujet
..................................................................................................................................
.91
IV
Études
cas
.........................................................................................................................................................
.93
27
Études
cas
.................................................................................................................................................
.95
28
Projet
Disques
2009
.......................................................................................................................................
.97
28.1
Présentation
......................................................................................................................................
.97
28.2
base
données
..........................................................................................................................
.98
29
Projet
Inscriptions
........................................................................................................................................
.101
29.1
Présentation
....................................................................................................................................
.101
29.2
base
données
........................................................................................................................
.101
30
Projet
Teniraq
...............................................................................................................................................
.105
30.1
Présentation
....................................................................................................................................
.105
30.2
base
données
........................................................................................................................
.106
31
Projet
Camping
............................................................................................................................................
.111
31.1
Présentation
....................................................................................................................................
.111
31.2
informations
conserver
.......................................................................................................
.111
31.3
traitements
...............................................................................................................................
.111
31.4
base
données
........................................................................................................................
.112
32
Projet
Association
........................................................................................................................................
.115
32.1
Contenu
site
web
.....................................................................................................................
.115
32.2
Conditions
travail
.....................................................................................................................
.115
32.3
Base
données
.............................................................................................................................
.115
32.4
MLD
projet
Association
............................................................................................................
.116
32.5
Création
tables
base
Association
..................................................................................
.116
32.6
Évaluation
.......................................................................................................................................
.117
32.7
Dernier
conseil
...............................................................................................................................
.118
33
Projet
Généalogie
..........................................................................................................................................
.119
33.1
Généralités
......................................................................................................................................
.119
33.2
données
conserver
...............................................................................................................
.119
33.3
Traitement
données
................................................................................................................
.119
33.4
Optimisations
.................................................................................................................................
.120
33.5
Import-export
.................................................................................................................................
.120
33.6
MCD
projet
généalogie
.............................................................................................................
.120
33.7
différentes
tables
.....................................................................................................................
.121
33.8
différentes
contraintes
...........................................................................................................
.123
34
Projet
Brazil
.................................................................................................................................................
.127
34.1
Description
.....................................................................................................................................
.127
34.2
tables
entités
.....................................................................................................................
.127
34.3
tables
relations
.................................................................................................................
.128
34.4
contraintes
...............................................................................................................................
.129
35
Projet
Services
..............................................................................................................................................
.133
35.1
But
projet
..............................................................................................................................
.133
35.2
Fonctionnement
.............................................................................................................................
.133
35.3
Informations
plus
techniques
......................................................................................................
.134
35.4
Question
subsidiaire
comment
gérer
historique
base
.............................................
.134
35.5
Vocabulaire
utilisé
.........................................................................................................................
.134
35.6
Première
ébauche
structure
................................................................................................
.135
35.7
Structures
tables
......................................................................................................................
.136
35.8
Création
tables
........................................................................................................................
.138
35.9
Remplir
tables
paramètres
................................................................................................
.139
36
Projet
Disques
..............................................................................................................................................
.143
36.1
Approche
naïve
..............................................................................................................................
.143
36.2
Analyse
............................................................................................................................................
.143
36.3
Dernières
remarques
.....................................................................................................................
.145
36.4
autre
analyse
projet
Disques
...........................................................................................
.146
36.5
Création
tables
........................................................................................................................
.148
36.6
travail
....................................................................................................................................
.149
Index
............................................................................................................................................................................
.151
v
vi
I
cours
Chapitre
1
Pourquoi
comment
1.1
Introduction
pages
destinées
personnes
déjà
programmé
agit
absolument
cours
algorithmique
particulier
notions
bases
algorithmique
séquence
alternative
itération
supposées
connues
comprises
traitera
ici
traduction
PHP
notions
abordées
•
langages
informatiques
particulier
langages
web
répondant
question
pourquoi
programmer
web
•
notions
classiques
programmation
abordées
sous
angle
PHP
structures
contrôle
chaînes
caractères
tableaux
etc.
•
particularités
programmation
web
formulaires
traitement
identification
•
terminerons
mise
relation
pages
web
base
données
PostgreSQL
1.2
Pourquoi
document
pages
origine
cours
destiné
étudiants
2ème
année
IUP
IIES
université
Lille
III-Charles
Gaulle
Villeneuve
Ascq
années
universitaires
2002-2003
2003-2004
Elles
ensuite
peu
peu
remaniées
augmentées
occasion
cours
destiné
étudiants
3ème
année
licence
MIASHS
pages
destinées
être
cours
autonome
elles
support
cours
beaucoup
choses
transmises
oral
pendant
cours
écrites
environnement
technique
cours
constitué
machines
sous
linux
installation
logiciels
abordée
fait
partie
contenu
cours
1.3
Comment
a-t-il
construit
polycopié
rédigé
format
DocBook
•
texte
source
écrit
format
XML
emacs
Quanta
respectant
DTD
DocBook
•
code
source
compilé
format
PDF
openjade
format
HTML
xsltproc
•
version
devant
yeux
compilée
mercredi
25
novembre
2009
13h58
1.4
trouver
document
document
disponible
sous
plusieurs
formats
web
•
seul
document
HTML
http
//grappa.univ-lille3.fr/polys/php/php.html
Lourd
charger
facile
sauvegarder
imprimer
•
Plusieurs
pages
HTML
http
//grappa.univ-lille3.fr/polys/php/index.html
Plus
faciles
consulter
•
version
HTML
sans
feuilles
style
http
//grappa.univ-lille3.fr/polys/php/book1.htm
Quelle
idée
tenez
•
PDF
http
//grappa.univ-lille3.fr/polys/php/php.pdf
1
Chapitre
1
Pourquoi
comment
1.5
QBullets
petites
images
animées
illustrent
liens
version
web
document
proviennent
QBullets
1
1.
http
//www.matterform.com/
2
Chapitre
2
Généralités
langages
informatiques
Note
document
issu
CommentCaMarche.net
1
soumis
licence
GNU
FDL
Permission
donnée
distribuer
modifier
copies
page
tant
note
apparaît
clairement
2.1
appelle-t-on
langage
informatique
appelle
langage
informatique
langage
destiné
décrire
ensemble
actions
consécutives
or-
dinateur
doit
exécuter
langages
naturels
anglais
français
représentent
ensemble
façons
groupe
individu
communiquer
langages
servant
ordinateurs
communiquer
rien
voir
langages
informatiques
parle
cas
protocoles
deux
notions
totalement
différentes
langage
informatique
façon
pratique
humains
donner
instructions
ordinateur
langage
informatique
rigoureux
CHAQUE
instruction
correspond
action
processeur
langage
utilisé
processeur
est-à-dire
données
telles
elles
arrivent
appelé
langage
machine
agit
suite
0
1
binaire
plus
clarté
peut
être
décrit
hexadécimal
Toutefois
langage
machine
compréhensible
facilement
humain
moyen
Ainsi
plus
pratique
trouver
langage
intermédiaire
compréhensible
homme
ensuite
transformé
langage
machine
être
exploitable
processeur
assembleur
premier
langage
informatique
utilisé
Celui-ci
encore
très
proche
langage
machine
permet
déjà
être
plus
compréhensible
Toutefois
tel
langage
tellement
proche
langage
machine
dépend
étroitement
type
processeur
utilisé
chaque
type
processeur
peut
avoir
propre
langage
machine
Ainsi
programme
développé
machine
pourra
être
porté
autre
type
machine
désigne
portable
programme
peut
être
utilisé
grand
nombre
machines
pouvoir
utiliser
autre
machine
faudra
alors
parfois
réécrire
entièrement
programme
langage
informatique
plusieurs
avantages
•
plus
facilement
compréhensible
langage
machine
•
permet
plus
grande
portabilité
est-à-dire
plus
grande
facilité
adaptation
machines
types
différents
langages
informatiques
peuvent
grossièrement
classer
deux
catégories
langages
interprétés
langages
compilés
2.2
Langage
interprété
langage
informatique
définition
différent
langage
machine
faut
traduire
rendre
intelligible
point
vue
processeur
programme
écrit
langage
interprété
besoin
programme
auxiliaire
interpréteur
traduire
fur
mesure
instructions
programme
2.3
Langage
compilé
programme
écrit
langage
dit
compilé
va
être
traduit
fois
toutes
programme
annexe
compilateur
afin
générer
nouveau
fichier
autonome
est-à-dire
plus
besoin
programme
autre
exécuter
dit
ailleurs
fichier
exécutable
programme
écrit
langage
compilé
comme
avantage
plus
avoir
besoin
fois
compilé
programme
annexe
exécuter
plus
traduction
faite
fois
toute
plus
rapide
exécution
Toutefois
moins
souple
programme
écrit
langage
interprété
car
chaque
modification
fichier
source
fichier
intelligible
homme
celui
va
être
compilé
faudra
recompiler
programme
modifications
prennent
effet
autre
part
programme
compilé
avantage
garantir
sécurité
code
source
effet
langage
interprété
directement
intelligible
lisible
permet
importe
connaître
secrets
1.
http
//www.commentcamarche.net/
3
Chapitre
2
Généralités
langages
informatiques
fabrication
programme
copier
code
voire
modifier
risque
non-respect
droits
auteur
autre
part
certaines
applications
sécurisées
nécessitent
confidentialité
code
éviter
piratage
transaction
bancaire
paiement
ligne
communications
sécurisées
etc.
2.4
Langages
intermédiaires
Certains
langages
appartiennent
quelque
sorte
deux
catégories
LISP
Java
Python
etc.
car
pro-
gramme
écrit
langages
peut
certaines
conditions
subir
phase
compilation
intermédiaire
vers
fichier
écrit
langage
intelligible
différent
fichier
source
non
exé-
cutable
nécessité
interpréteur
applets
Java
petits
programmes
insérés
parfois
pages
Web
fichiers
compilés
peut
exécuter
partir
navigateur
internet
fichiers
extension
class
4
Chapitre
3
langages
particuliers
langages
web
3.1
Pourquoi
programmer
réponse
générale
impose
obtenir
pages
web
dynamiques
Attention
parler
pages
web
dynamiques
signifie
parle
nécessairement
pages
tout
bouge
tous
sens
agit
simplement
pages
existence
statique
construites
volée
momment
elles
demandées
serveur
utilité
fait
sentir
quand
doit
écrire
pages
doivent
adapter
besoin
heure
accès
bases
données
réponse
personnalisée
traitement
formulaire
etc.
aussi
faciliter
gestion
site
grande
taille
exemple
séparation
contenu
structure
traitement
présentation
3.2
Quels
langages
Beaucoup
Pratiquement
tous
langages
programmation
peuvent
être
utilisés
existe
langages
spécifiques
programmation
web
classes
deux
catégories
•
Exécution
côté
serveur
PHP
syntaxe
type
ASP
serveur
Microsoft
JSP
syntaxe
Java
CGI
tout
langage
toute
plateforme
etc.
•
Exécution
côté
client
Javascript
syntaxe
Java
applet
Java
Flash
etc.
3.3
Avantages
inconvénients
Exécution
côté
serveur
Exécution
côté
client
Code
source
visible
obtient
résultat
Javascript
code
source
visible
exécution
source
page
jamais
confier
javascript
contrôle
mots
passe
devraient
alors
être
écrits
clair
code
source
page
web
Applet
précompilé
non
lisible
Rapidité
Dépend
vitesse
charge
Dépend
vitesse
charge
exécution
serveur
client
Compatibilité
Totale
client
reçoit
HTML
Problématique
client
doit
posséder
logiciel
capable
exécuter
script
exemple
bonne
version
flash
java
Désactivation
Impossible
client
contrôle
Très
simple
suffit
désactiver
clientt
serveur
logiciel
Contrôles
sécurité
Parfaits
tout
passe
serveur
Inexistants
tout
passe
client
jamais
confier
seul
javascript
contrôle
validité
données
formulaire
quelconque
contrôle
sécurité
3.4
Choisir
Lequel
choisir
Bof
Ça
dépend
veut
faire
seule
chose
certaine
fonctions
importantes
vitales
affichage
mettant
jeu
sécurité
site
doivent
être
confiées
script
5
Chapitre
3
langages
particuliers
langages
web
exécute
côté
client
quoi
ça
ressemble
trouverez
quoi
tester
tout
ça
pages
Fabien
Torre1
1.
http
//grappa.univ-lille3.fr/~torre/guide.php
id=tpprogweb
6
Chapitre
4
FAQ
élémentaire
PHP
Note
suit
extrait
condensé
provenant
deux
sources
•
FAQ
PHP
maintenue
Armand
Delcros1
•
brief
PHP
Tutorial2
4.1
PHP
PHP
langage
scripting
embarqué
pages
HTML
traité
serveur
PHP
permet
construire
dynamiquement
pages
HTML
contenant
résultats
calculs
requêtes
SQL
adressées
système
gestion
bases
données
SGBD
4.2
Quelle
différence
Javascript
Javascript
aussi
effet
intégré
pages
HTML
Javascript
intéprété
client
Web
alors
PHP
directement
interprété
serveur
Web
inclus
comme
module
serveur
web
client
web
recoit
directement
HTML
voit
jamais
apparaître
code
PHP
4.3
Pourquoi
choisir
PHP
lieu
Javascript
choisir
entre
PHP
Javascript
réalité
utilisation
différente
Javascript
très
bien
adapté
aspect
présentation
manipulation
client
Web
PHP
adapté
création
page
HTML
dynamique
rapide
PHP
permet
faire
pages
HTML
dynamiques
sens
deux
appels
consécutifs
URL
peuvent
donner
deux
pages
HTML
différentes
chacune
pages
statique
peut
dire
niveau
serveur
page
dynamique
alors
apparait
comme
statique
niveau
client
Web
Javascript
permet
générer
page
dynamique
client
Web
principales
différences
entre
deux
outils
développement
4.4
passe-t-il
affichage
page
PHP
interpréteur
intégré
fonctionne
manière
suivante
•
Lorsque
serveur
HTTP
reconnait
fichier
comme
intégrant
code
PHP
parcourt
avant
expédier
client
•
rencontre
instruction
PHP
transmet
interpréteur
•
interpréteur
exécute
instruction
transmet
éventuellement
sorties
serveur
•
Celui
ci
redirige
sorties
vers
client
importe
signaler
programmes
PHP
transmis
client
exécutés
serveur
poste
client
fera
différence
entre
pages
statiques
celles
générées
dynamiquement
lieu
configurer
spécialement
navigateurs
supporter
PHP
4.5
Comment
intégrer
PHP
HTML
serveur
HTTP
reconnaisse
code
PHP
faut
•
nom
document
HTML
termine
suffixe
php
non
html
1.
http
//perso.cybercable.fr/adelcros/docs/php/php.html
2.
http
//www.linux-france.org/article/devl/php3/tut/php3_tut.html
7
Chapitre
4
FAQ
élémentaire
PHP
•
code
PHP
délimité
balises
php
Bien
possibilités
langage
PHP
étendues
suffit
connaissance
élémentaire
langage
réaliser
applications
Web
courantes
langage
dispose
bibliothèque
fonctions
très
étendue
fournit
particulier
interface
principaux
systèmes
gestion
base
données
système
gestion
fichier
serveur
reportera
documentation
langage3
description
fonctions
3.
http
//php.net
8
Chapitre
5
Premiers
exemples
PHP
corrigés
exercices
chapitre
trouvent
Chapitre
20
5.1
premier
programme
html
body
php
echo
``
Hello
world
``
/body
/html
Remarque
echo1
sert
produire
affichage
Remarque
echo
affiche
texte
tel
quel
texte
doit
être
entouré
guillemets
``
Sinon
echo
essaie
comprendre
exemple
echo
1+2
provoque
affichage
3
Tandis
echo
``
1+2
provoque
affichage
1+2
voir
résultat
produit
helloworld.php2
allant
voir
code
source
page
produite
navigateur
verrez
cela
html
body
Hello
world
/body
/html
normal
souvenez-vous
serveur
exécute
programme
envoie
client
résultat
programme
lui-même
5.2
deuxième
programme
html
body
php
phpinfo
/body
/html
Remarque
obtenez
tous
renseignements
possibles
version
PHP
installée
machine
Remarque
phpinfo3
fonction
seule
instruction
permet
PHP
effectuer
beaucoup
choses
verrons
plus
tard
comment
écrire
propres
fonctions
reconnait
fonction
parenthèses
suivent
voir
résultat
produit
phpinfo.php4
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/helloworld.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/phpinfo.php
9
Chapitre
5
Premiers
exemples
PHP
5.3
Rappels
algorithmique
1
structure
base
programme
séquence
instructions
exécutées
unes
après
autres
ordre
elles
écrites
intructions
toujours
terminées
point-virgule
séparateur
instructions
2
existe
structures
permettent
rompre
séquence
trouverez
ci-dessous
princi-
pales
autres
3
alternative5
test
exécuté
selon
résultat
OUI
NON
partie
programme
autre
exécutée
syntaxe
PHP
if
test
{
instructions
exécuter
quand
réponse
OUI
}
else
{
instructions
exécuter
quand
réponse
NON
}
4
itération6
TANT
partie
programme
exécutée
tant
résultat
test
OUI
calcul
fait
AVANT
chaque
entrée
boucle
syntaxe
PHP
while
test
{
instructions
exécuter
tant
réponse
OUI
}
5
boucle
POUR7
cas
particulier
boucle
TANT
forme
générale
for
avant
entrer
test
action
fin
boucle
{
instructions
exécuter
quand
rréponse
test
OUI
}
avant
entrer
action
fin
boucle
actions
quelconques
forme
totalement
équivalente
celle-ci
avant
entrer
while
test
{
instructions
exécuter
quand
réponse
test
OUI
action
fin
boucle
}
utilisera
plus
souvent
sous
forme
for
initialiser
compteur
test
compteur
incrémenter
compteur
{
instructions
exécuter
quand
réponse
test
OUI
}
comme
exemple
suivant
provoque
affichage
357911131517
for
i=3
i
19
i=
i+2
{
echo
i
}
5.4
Variables
expressions
1
noms
variables
préfixés
nécessaire
déclarer
variables
avant
utiliser
contrôle
types
plutôt
souple
2
affectation
notée
=
3
opérateurs
classiques
nombres
disponibles
+
addition
-
soustraction
*
multiplication
/
division
4
seul
opérateur
chaînes
concaténation
symbolisée
point
5.
http
//fr.php.net/manual/fr/language.control-structures.php
#
control-structures.if
6.
http
//fr.php.net/manual/fr/control-structures.while.php
7.
http
//fr.php.net/manual/fr/control-structures.for.php
10
Chapitre
5
Premiers
exemples
PHP
5
opérateurs
comparaison
aussi
presque
tous
classiques
inférieur
=
inférieur
égal
supérieur
=
supérieur
égal
==
égal
=
différent
6
opérateurs
logiques
base
||
&
&
5.5
Fonctions
fonction
sans
paramètres
définit
function
nom_de_la_fonction
{
corps_de_la_fonction
}
fonction
paramètres
définit
function
nom_de_la_fonction
paramètres
{
corps_de_la_fonction
}
paramètres
toujours
passés
valeur
résultat
fonction
valeur
trouve
derrière
première
instruction
return
rencontrée
exemple
return
5
procédures
voulez
fonctions
comporte
comme
procédure
suffit
faire
renvoyer
aucune
valeur
exemple
return
5.6
exercices
suivent
ferez
sorte
résultats
présentés
proprement
laisse
libre
choix
sens
exact
mot
1
Écrire
programme
PHP
affiche
tous
nombres
impairs
entre
0
15000
ordre
croissant
1
3
5
7
14995
14997
14999
Exemple
impair.php8
2
Écrire
programme
écrit
500
fois
dois
faire
sauvegardes
régulières
fichiers
Exemple
punition.php9
3
Écrire
programme
affiche
table
multiplication
13
Exemple
multiplication.php10
mieux
multiplicationbis.php11
4
Écrire
programme
calcule
30
Exemple
factorielle.php12
5
Écrire
programme
affiche
12345678910111213
12345678910111213
12345678910111213
12345678910111213
Exemple
4lignes.php13
6
Écrire
programme
affiche
table
multiplication
totale
{
1
,12
}
{
1
,12
}
Exemple
multiplicationtotale.php14
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/impair.php
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/punition.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplication.php
11.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplicationbis.php
12.
http
//grappa.univ-lille3.fr/polys/php/exemples/factorielle.php
13.
http
//grappa.univ-lille3.fr/polys/php/exemples/4lignes.php
14.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplicationtotale.php
11
Chapitre
5
Premiers
exemples
PHP
7
Écrire
fonction
renvoie
Puis
utilisez
fonction
construire
table
factorielles
Exemple
tablefact.php15
8
Écrire
fonction
affiche
triangle
admet
comme
paramètre
nombre
lignes
triangle
*
*
*
*
*
*
Utilisez
fonction
dessiner
demi-sapin
2
2
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Exemple
demisapin.php16
9
Coefficients
binôme
Écrire
fonction
renvoie
b.
Utiliser
fonction
précédente
écrire
fonction
renvoie
Utiliser
fonctions
précédentes
programme
affiche
coefficients
binôme
toutes
valeurs
{
0,1
..
,20
}
Exemple
binome.php17
10
suite
Fibonnacci
définie
relations
suivantes
•
F
=0
0
•
F
=1
1
•
F
=F
+
F
tout
1
n-1
n-2
F
=0
F
=1
F
=0+1=1
F
=1+1=2
F
=2+1=3
F
=3+2=5
F
=5+3=8
F
=8+5=13
0
1
2
3
4
5
6
7
Écrire
programme
affiche
50
premières
valeurs
F
Exemple
fibonnacci.php18
11
Fibonnacci
retour
afficher
rapports
ainsi
leurs
différences
nombre
15.
http
//grappa.univ-lille3.fr/polys/php/exemples/tablefact.php
16.
http
//grappa.univ-lille3.fr/polys/php/exemples/demisapin.php
17.
http
//grappa.univ-lille3.fr/polys/php/exemples/binome.php
18.
http
//grappa.univ-lille3.fr/polys/php/exemples/fibonnacci.php
12
Chapitre
5
Premiers
exemples
PHP
Exemple
fibonnacci-retour.php19
12
Afficher
cadre
10x10
Exemple
cadre-pre.php20
cadre-table.php21
13
Tableau
additions
faire
réaliser
page
PHP
tableau
additions
compléter
entraînement
enfant
calcul
Exemple
tableauadditionsfixe.php22
tableauadditionsvariable.php23
19.
http
//grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-retour.php
20.
http
//grappa.univ-lille3.fr/polys/php/exemples/cadre-pre.php
21.
http
//grappa.univ-lille3.fr/polys/php/exemples/cadre-table.php
22.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsfixe.php
23.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsvariable.php
13
Chapitre
5
Premiers
exemples
PHP
14
Chapitre
6
Formulaires
HTML
6.1
Présentation
formulaires
saisie
permettent
utilisateur
fournir
informations
ainsi
obtenir
réponse
personnalisée
informations
contenues
champs
remplis
utilisateur
transmises
programme
client
serveur
transmet
tour
programme
traitement
CGI
Common
Gateway
Interface
script
type
PHP
structure
formulaire
saisie
simple
compose
élément
FORM
contenant
essentielle-
ment
suite
contrôles
éléments
input
textarea
select
button
etc.
aussi
éléments
structuration
document
afin
aligner
correctement
champs
entrée
Globalement
formulaire
présente
sous
forme
form
method=
1
action=
2
texte
boutons
zones
saisie
input
type=
submit
value=
3
/
/form
1
désigne
méthode
utiliser
envoyer
informations
GET
défaut
données
formulaire
envoyées
URL
POST
données
envoyées
corps
message
elles
visibles
URL
2
désigne
URL
programme
CGI
PHP
etc.
va
traiter
données
peut
être
aussi
MAIL
déconseillé
Cela
marche
navigateur
utilisateur
BIEN
configuré
toutes
façons
faudra
traiter
données
après
stocker
boîtes
lettres
facilite
automatisation
tâche
3
désigne
texte
va
apparaître
bouton
envoi
affichage
page
rien
distingue
formulaire
reste
texte
conseillé
séparer
reste
balise
hr
/
avant
après
mettre
tableau
bordures
visibles
6.2
Principaux
contrôles
principaux
contrôles
•
input
zones
saisie
boutons
radios
cases
cocher
définis
contrôle
syntaxe
simplifiée
input
type=
type
name=
nom
value=
valeur
/
•
type
peut
être
text
zone
saisie
sens
habituel
terme
zone
rectangulaire
utilisateur
écrit
don-
nées
seule
ligne
zone
envoyé
programme
traitement
password
zone
saisie
mot
passe
identique
text
texte
saisi
apparaît
écran
sous
forme
astérisques
éviter
être
lisible
tierce
personne
checkbox
case
cocher
15
Chapitre
6
Formulaires
HTML
radio
bouton
radio
boutons
radios
nom
mutuellement
exclusifs
submit
bouton
envoi
clic
bouton
envoie
contenu
formulaire
programme
traitement
hidden
variable
cachée
permet
cacher
valeurs
nécessaires
traitement
veut
voir
affichées
écran
attention
caché
veut
dire
secret
valeurs
visibles
code
source
page
reset
remettre
zones
saisie
leurs
valeurs
défaut
valeurs
elles
lors
chargement
page
•
nom
nom
variable
envoyé
programme
cela
priori
sens
bouton
submit
reset
absolument
nécessaire
autres
zones
doivent
principe
avoir
noms
différents
sauf
boutons
radios
boutons
radios
nom
mutuellement
exclusifs
•
value
valeur
contrôle
•
text
password
agit
valeur
permet
pré-remplir
zone
•
checkbox
radio
valeur
donnée
variable
case
sélectionnée
•
submit
reset
texte
écrit
bouton
•
hidden
valeur
donnée
variable
•
select
créer
listes
déroulantes
exemple
utilisation
select
name=
menu
option
premier
choix
/option
option
deuxième
choix
/option
option
troisième
choix
/option
/select
zone
permettra
envoyer
variable
nom
menu
valeur
choix
sélectionné
pré-sélectionner
choix
liste
suffit
ajouter
attribut
selected=
selected
balise
option
correspondante
peut
avoir
besoin
envoyer
valeur
différente
affichée
exemple
demander
utilisateur
choisir
personne
nom
prénom
envoyer
identifiant
personne
table
base
données
utilisera
alors
attribut
value
balise
option
comme
exemple
select
name=
responsable
option
value=
1
marcel
durand
/option
option
value=
2
georges
dupont
/option
option
value=
3
pierre
martin
/option
/select
exemple
choisit
georges
dupont
variable
responsable
valeur
2
•
textarea
zones
saisies
plus
grandes
input
exemple
utilisation
textarea
name=
nom
rows=
4
cols=
40
Texte
défaut
/textarea
6.3
Exemples
pourrez
trouver
deux
exemples
presque
identiques
sauf
méthode
envoi
GET
POST
autre
adresses
suivantes
http
//grappa.univ-lille3.fr/~gonzalez/prog/test01.html
http
//grappa.univ-lille3.fr/~gonzalez/prog/test02.html
pouvez
tester
propres
formulaires
suivant
instructions
page
16
Chapitre
6
Formulaires
HTML
http
//grappa.univ-lille3.fr/~torre/Enseignement/TPs/Formulaires
formulaire
doit
contenir
attribut
caché
identifiant
champ
action
doit
contenir
valeur
http
//grappa.univ-lille3.fr/~torre/Enseignement/TPs/Formulaires/universel.php
17
Chapitre
6
Formulaires
HTML
18
Chapitre
7
Traitement
formulaire
PHP
corrigés
exercices
chapitre
trouvent
Chapitre
21
7.1
Traitement
données
formulaire
PHP
Tout
programme
PHP
peut
recevoir
variables
connaît
avance
nom
variables
passées
programme
suffit
appeler
nom
syntaxe
PHP
est-à-dire
précédé
exemple
appel
URL
suivante
http
//grappa.univ-lille3.fr/~gonzalez/prog/form01.php3
x=5
&
y=7
autorise
emploi
variables
x
vaut
5
vaut
7
programme
form01.php3
Attention
plus
plus
courant
rencontrer
serveurs
configurés
safe
mode
est-à-dire
réglages
destinés
protéger
détournement
certaines
pages
éventuels
pirates
cas
accès
paramètre
truc
non
truc
•
_GET
``
truc
HTTP_GET_VARS
``
truc
envoi
méthode
GET
•
_POST
``
truc
choix
HTTP_POST_VARS
``
truc
envoi
méthode
POST
suite
supposerons
être
safe
mode
question
quelles
variables
quelles
valeurs
transmises
formulaire
noms
variables
ceux
champs
formulaire
zones
saisies
texte
tapé
transmis
tel
quel
cases
cocher
valeur
case
cochée
chaîne
vide
sinon
boutons
radios
valeur
affectée
value
bouton
sélectionné
listes
déroulantes
valeur
affectée
option
choix
sélectionné
7.2
Exercices
1
Écrire
formulaire
demande
nom
âge
utilisateur
bouton
submit
formulaire
provoquera
affichage
page
saluera
utilisateur
phrase
Bonjour
machin
xx
ans
bonnes
valeurs
bien
entendu
Exemple
traitement-01.html1
2
Deux
vacanciers
abandonné
Montpellier
bébé
9
mois
sage
Quelle
surprise
quand
6
mois
plus
tard
rentrés
chez
Lille
vu
arriver
enfant
fait
quatre
pattes
trajet
Montpellier-Lille
autoroute
Écrire
formulaire
PHP
permet
saisir
distance
parcourue
bébé
nombre
heures
marchait
jour
nombre
jours
passés
route
formulaire
affichera
alors
vitesse
bébé
Exemple
traitement-02.html2
3
Écrire
formulaire
demande
nom
sexe
utilisateur
Mme
formulaire
appelle
page
affichera
Bonjour
monsieur
Truc
Bonjour
madame
Bidule
suivant
cas
vrai
nom
personne
bien
entendu
Exemple
traitement-03.html3
4
permis
chasse
points
remplace
désormais
permis
chasse
traditionnel
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-01.html
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-02.html
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-03.html
19
Chapitre
7
Traitement
formulaire
PHP
Chaque
chasseur
possède
départ
capital
100
points
tue
poule
perd
1
point
3
points
chien
5
points
vache
10
points
tue
meilleur
ami
permis
coûte
1000
francs
Écrire
formulaire
PHP
permet
saisir
liste
victimes
chasseur
calcule
prix
payer
permis
supplémentaires
nécessaires
Exemple
traitement-04.html4
5
Écrire
formulaire
calculatrice
2
cases
saisie
opérandes
groupe
4
cases
cocher
liste
déroulante
choix
opération
affichage
résultat
opération
Exemple
traitement-05.php5
6
Écrire
formulaire
demande
deux
nombres
b.
affiche
ensuite
table
multiplication
b
lignes
formulaire
doit
souvenir
valeurs
choisies
Exemple
traitement-06.php6
7
Écrire
formulaire
demande
mot
passe
Deux
mots
passe
différents
acceptés
saluera
utilisateur
différemment
fonction
mot
passe
utilisé
Exemple
traitement-07.php7
8
Addition
compléter
formulaire
propose
addition
incomplète
utilisateur
doit
terminer
Exemple
addition.php8
9
Devinette
n◦1
devez
deviner
nombre
programme
choisi
proposez
solution
programme
répond
trop
petit
trop
grand
suivant
cas
jusqu
trouver
bon
nombre
Exemple
devinette01.php9
10
Devinette
n◦2
chose
exercice
précédent
rôles
inversés
programme
devine
Exemple
devinette02.php10
11
pipotron
ordinateur
aide
écrire
importe
quoi
Exemple
pipotron.php11
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-04.html
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-05.php
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-06.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-07.php
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/addition.php
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/devinette02.php
11.
http
//grappa.univ-lille3.fr/polys/php/exemples/pipotron.php
20
Chapitre
8
Chaînes
caractères
corrigés
exercices
chapitre
trouvent
Chapitre
22
création
pages
web
nécessite
plupart
temps
manipulation
chaînes
caractères
allons
explorer
principales
fonctions
disponibles
PHP
8.1
est-ce
chaîne
caractères
Trois
choses
savoir
1
mot
anglais
désigne
chaînes
caractères
string
utile
car
documentation
souvent
anglais
2
toujours
portée
main
documentation
PHP
après
point
précédent
allez
voir
chapitre
String1
3
chaîne
importe
quoi
entouré
guillemets
``
apostrophes
Voici
deux
exemples
chaîne
caractères
aussi
chaîne
caractères.
8.2
choisir
Guillemets
apostrophes
pareil
sauf
•
commence
finit
Voici
deux
exemples
chaînes
caractères
chaîne
caractères.
non
plus
chaîne
caractères
•
chaîne
contient
apostrophes
utilisez
guillemets
chaîne
contient
guillemets
utilisez
apostrophes
exemple
révais
dit
``
Bonjour
Remarque
chaîne
doit
contenir
deux
pouvez
utiliser
caractère
backslash
\
J\
révais
m\
dit
``
Bonjour
révais
dit
\
Bonjour\
•
variables
interprétées
guillemets
apostrophes
exemple
variable
vaut
5
instruction
echo
``
affichera
5
tandis
echo
affichera
caractères
précédés
caractère
backslash
sauf
\
8.3
Principales
utilisations
backslash
caractère
backslash
\
permet
introduire
chaînes
caractères
pourraient
être
sinon
exemple
guillemets
chaîne
entourée
guillemets
retours
ligne
etc
Comme
fait
caractère
spécial
faut
façon
particulière
noter
inclus
chaîne
\\
Voici
tableau
récapitulant
principales
utilisations
backslash
1.
http
//fr.php.net/manual/fr/ref.strings.php
21
Chapitre
8
Chaînes
caractères
Tableau
8-1
Principales
utilisations
backslash
code
signification
\n
retour
ligne
\t
tabulation
\\
backslash
lui-même
\
\
guillemet
``
chaîne
entourée
guillemets
\
apostrophe
chaîne
entourée
apostrophes
\
dollar
8.4
Principales
opérations
chaînes
Affectation
Comme
toute
variable
affectation
variable
chaîne
fait
symbole
=
a=
bla
bla
bla
bla
Affichage
Comme
toute
valeur
affichage
fait
instruction
echo
Concaténation
opérateur
concaténation
point
8.5
Principales
fonctions
agit
là
fonctions
principales
elles
expliquées
signifie
faudra
aller
voir
documentation
PHP2
propres
moyens
Conversion
majuscules-minuscules
strtolower3
Conversion
minuscules-majuscules
strtoupper4
Découper
chaîne
explode5
split6
renvoient
tableau
fonctions
inverses
implode7
join8
Enlever
espaces
début
fin
chaîne
ltrim9
chop10
trim11
Longueur
chaîne
strlen12
2.
http
//fr.php.net/manual/fr/ref.strings.php
3.
http
//fr.php.net/manual/fr/function.strtolower.php
4.
http
//fr.php.net/manual/fr/function.strtoupper.php
5.
http
//fr.php.net/manual/fr/function.explode.php
6.
http
//fr.php.net/manual/fr/function.split.php
7.
http
//fr.php.net/manual/fr/function.implode.php
8.
http
//fr.php.net/manual/fr/function.join.php
9.
http
//fr.php.net/manual/fr/function.ltrim.php
10.
http
//fr.php.net/manual/fr/function.chop.php
11.
http
//fr.php.net/manual/fr/function.trim.php
12.
http
//fr.php.net/manual/fr/function.strlen.php
22
Chapitre
8
Chaînes
caractères
Position
chaîne
autre
strpos13
Remplacer
partie
chaîne
autre
str_replace14
substr_replace15
extrait
chaîne
substr16
8.6
Conversions
types
PHP
extrémement
tolérant
conversions
types
essaiera
toujours
faire
mieux
plus
naturellement
possible
profitez
quand
trop
prévoyez
comprenez
toujours
comportement
cela
évit-
era
sans
doute
déconvenues
exemple
peut
faire
évitez
abuser
php
truc
=
``
5
echo
truc
``
.gettype
truc
``
br
/
\n
truc
=
truc
``
2
echo
truc
``
.gettype
truc
``
br
/
\n
truc
=
truc
*
5
echo
truc
``
.gettype
truc
``
br
/
\n
truc
=
truc
``
2
echo
truc
``
.gettype
truc
``
br
/
\n
truc
=
truc/100
echo
truc
``
.gettype
truc
``
br
/
\n
programme
affichera
5
string
52
string
260
integer
2602
string
260.2
double
Remarque
commande
echo
truc
``
.gettype
truc
``
br
/
\n
provoque
affichage
valeur
truc
suivie
type
tout
ceci
terminé
passage
ligne
8.7
Exercices
Écrire
formulaire
devra
vérifier
identité
utilisateur
demandant
nom
prénom
mot
passe
dernier
devra
apparaître
écran
pendant
frappe
Tant
utilisateur
reconnu
seul
affiche
formulaire
utilisateur
reconnu
seul
affiche
message
accueil
casse
valeurs
devra
être
prise
compte
est-à-dire
fait
tapé
majuscules
minuscules
devra
changer
comportement
pages
espaces
tapés
début
fin
mot
passe
nom
prénom
devront
être
éliminés
13.
http
//fr.php.net/manual/fr/function.strpos.php
14.
http
//fr.php.net/manual/fr/function.str-replace.php
15.
http
//fr.php.net/manual/fr/function.substr-replace.php
16.
http
//fr.php.net/manual/fr/function.substr.php
23
Chapitre
8
Chaînes
caractères
trouverez
exemple
page
identite.php17
17.
http
//grappa.univ-lille3.fr/polys/php/exemples/identite.php
24
Chapitre
9
tableaux
corrigés
exercices
chapitre
trouvent
Chapitre
23
stockage
manipulation
grand
nombre
données
nécessitent
souvent
utilisation
tableaux
9.1
est-ce
tableau
simplifier
voici
3
définitions
équivalentes
•
variable
peut
stocker
plusieurs
valeurs
fois
chacune
numérotée
•
ensemble
variables
différentes
regroupées
sous
nom
chacune
différenciée
autres
numéro
•
représentation
informatique
vecteur
matrice
chacune
composantes
connue
indice
manière
plus
générale
•
tableau
abord
variable
nom
commence
dollar
•
syntaxe
accéder
cases
tableau
plupart
langages
x
5
désigne
5ème
élément
tableau
x
Remarque
PHP
numérotation
éléments
tableau
commence
toujours
zéro
9.2
Quelques
exemples
utilisation
9.2.1
Remplir
afficher
contenu
tableau
peut
remplir
exemple
cases
tableau
0
=
bonjour
1
=
bonsoir
2
=
bla
bla
bla
peut
aussi
utiliser
boucle
for
remplir
série
cases
for
i=3
i
8
i++
{
i
=
i
*
5
}
affichage
obligé
passer
aussi
cases
utilisation
echo
permet
afficher
contenu
tableau
echo
``
case
numéro
2
``
2
``
br
/
\n
for
i=2
i
6
i++
{
echo
``
case
numéro
i
``
i
``
br
/
\n
}
25
Chapitre
9
tableaux
9.2.2
exemple
complet
regroupant
lignes
précédentes
habillant
peu
obtient
programme
suivant
tableau-01.php1
html
body
h2
Remplissage
tableau
/h2
passe
rien
écran
partie
normal
travail
modification
variables
affichage
php
0
=
bonjour
1
=
bonsoir
2
=
bla
bla
bla
for
i=3
i
8
i++
{
i
=
i
*
5
}
h2
Affichage
certaines
cases
particulières
/h2
php
echo
``
case
numéro
2
``
2
``
br
/
\n
``
case
numéro
5
``
5
``
br
/
\n
h2
Affichage
suite
cases
/h2
php
for
i=2
i
6
i++
{
echo
``
case
numéro
i
``
i
``
br
/
\n
}
/body
/html
9.3
tableaux
associatifs
agit
généralisation
tableaux
lieu
utiliser
nombres
indices
peut
utiliser
importe
quoi
programme
tableau-04.php2
permet
choisir
prénom
liste
déroulante
afficher
renseignements
correspondants
html
body
form
action=
tableau-04.php
select
name=
prenom
option
value=
Thècle
Thècle
/option
option
value=
Édith
Édith
/option
option
value=
Kelly
Kelly
/option
option
value=
Mélusine
Mélusine
/option
option
value=
Elmer
Elmer
/option
/select
input
type=
submit
value=
renseignements
/
/form
php
nom
``
Thècle
=
Assicmonpote
nom
``
Édith
=
Avuleur
nom
``
Kelly
=
Diocy
nom
``
Mélusine
=
Enfaillite
nom
``
Elmer
=
Hitmieux
adresse
``
Thècle
=
123
rue
Alex
KUZBIDON
adresse
``
Édith
=
951
rue
Ondine
OUCESOIR
adresse
``
Kelly
=
5
boulevard
Rosa
REMECITOYENS
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-01.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-04.php
26
Chapitre
9
tableaux
adresse
``
Mélusine
=
7
rue
Jean
TANLAMER
adresse
``
Elmer
=
99
avenu
Dino
ZORE
ville
``
Thècle
=
Rennes
ville
``
Édith
=
Douarnenez
ville
``
Kelly
=
Auchel
ville
``
Mélusine
=
Chamonix
ville
``
Elmer
=
Langres
if
isset
prenom
{
echo
``
Prénom
prenom
br
/
\nNom
``
nom
prenom
``
br
/
\nAdresse
``
adresse
prenom
``
br
/
\nVille
``
ville
prenom
}
/body
/html
9.4
Parcours
tableau
associatif
Quand
travaille
tableau
classique
indice
numérique
facile
parcourir
toutes
cases
boucle
for
parcourir
tableau
associatif
peu
moins
direct
méthode
classique
marche
fonction
count3
donne
résultat
exploitable
facilement
cas
tableau
associatif
alors
difficile
imaginer
exemple
exemple
précédent
boucle
construirait
automatiquement
suite
Thècle
Édith
Kelly
Mélusine
Elmer
valeurs
faut
aller
chercher
tableau
lui-même
énervons
PHP
fournit
tout
faut
structure
foreach4
permet
parcourir
tableau
associatif
comme
programme
suivant
tableau-05bis.php5
programme
tableau-05bis.php6
parcourt
tableau
nom
affiche
contenu
chaque
ligne
affichage
contenant
couple
clef-valeur
clef
correspondant
habitude
appeler
indice
quand
agit
nombre
html
body
table
border=
border
php
nom
``
Thècle
=
Assicmonpote
nom
``
Édith
=
Avuleur
nom
``
Kelly
=
Diocy
nom
``
Mélusine
=
Enfaillite
nom
``
Elmer
=
Hitmieux
foreach
nom
clef
=
valeur
{
echo
``
tr
td
clef
/td
td
valeur
/td
/tr
\n
}
/table
/body
/html
9.5
Exercices
1
dispose
fichier
suivant
contenant
adresses
web
rien
empêche
choisir
autres
Écrire
programme
tableau-06.php7
lit
fichier
construire
page
web
contenant
liste
liens
hypertextes
tableau-06.txt8
http
//www.hoaxbuster.com/
3.
http
//fr.php.net/manual/fr/function.count.php
4.
http
//fr.php.net/foreach
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-05bis.php
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-05bis.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-06.php
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-06.txt
27
Chapitre
9
tableaux
http
//www.gazel.nu/faqs/virus.htm
#
e-mail
http
//www.electriccafe.org/JBT/
http
//www.zetetique.ldh.org/
http
//perso.wanadoo.fr/jean.brissonnet/
http
//www.thejackytouch.com/
http
//www.multimania.com/lepoulpe
2
exercice
tableau-07.php9
fois
chaque
ligne
comprend
aussi
description
site
pointé
séparation
assuré
chaîne
``
*
*
tableau-07.txt10
http
//www.hoaxbuster.com/
*
*
HoaxBuster
première
....
http
//www.gazel.nu/faqs/virus.htm
#
e-mail
*
*
Est-il
....
http
//www.electriccafe.org/JBT/
*
*
Nemo
Joe
Bar
Team
Spirit
http
//www.zetetique.ldh.org/
*
*
cercle
Zététique
http
//perso.wanadoo.fr/jean.brissonnet/
*
*
Éthique
toc
http
//www.thejackytouch.com/
*
*
The
Jacky
Touch
http
//www.multimania.com/lepoulpe
*
*
poulpe
toile
3
exercice
tableau-08.php11
fois
chaque
description
adresse
correspondante
deux
lignes
consécutives
tableau-08.txt12
HoaxBuster
première
ressource
francophone
hoax
http
//www.hoaxbuster.com/
Est-il
possible
attraper
virus
ouvrant
e-mail
http
//www.gazel.nu/faqs/virus.htm
#
e-mail
Nemo
Joe
Bar
Team
Spirit
http
//www.electriccafe.org/JBT/
cercle
Zététique
http
//www.zetetique.ldh.org/
Éthique
toc
http
//perso.wanadoo.fr/jean.brissonnet/
The
Jacky
Touch
http
//www.thejackytouch.com/
poulpe
toile
http
//www.multimania.com/lepoulpe
4
donne
liste
personnes
tableau-09.txt13
voici
premières
lignes
19
Thor
Aipaleur
tata
30
Dick
Sionnaire
dsds
35
Debbie
Zoudanlkou
dzdz
47
Mélanie
Zaitofrai
mzmz
48
Helmut
Ardelpic
haha
49
Jacques-André
Lejouré-Lanuit
jljl
68
Phil
Alapate
papa
Chaque
ligne
composée
ordre
identifiant
nombre
prénom
nom
mot
passe
Écrire
page
web
tableau-09.php14
donne
sélectionner
personnes
affiche
ensuite
mot
passe
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-07.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-07.txt
11.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-08.php
12.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-08.txt
13.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-09.txt
14.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-09.php
28
Chapitre
10
PDO
10.1
est-ce
PDO
texte
extrait
XXVII
Fonctions
PDO1
chapitre
manuel
PHP
PHP
net2
extension
PHP
Data
Objects
PDO
définit
excellente
interface
accéder
base
données
depuis
PHP
Chaque
pilote
base
données
implémenté
interface
PDO
peut
utiliser
fonctionnal-
ités
spécifiques
chacune
bases
données
utilisant
extensions
fonctions
Notez
pouvez
exécuter
aucune
fonction
base
données
utilisant
extension
PDO
elle-même
devez
utiliser
driver
PDO
spécifique
base
données3
accéder
serveur
base
données
PDO
fournit
interface
abstraction
accès
données
signifie
utilisez
mêmes
fonctions
exécuter
requêtes
récupérer
données
quelque
base
données
utilisée
PDO
fournit
abstraction
base
données
réécrit
SQL
émule
fonctionnalités
manquantes
devriez
utiliser
interface
abstraction
complète
besoin
cela
PDO
fournit
PHP
5.1
disponible
tant
extension
PECL
PHP
5.0
PDO
requiert
nouvelles
fonctionnalités
OO
fournies
PHP
5
fonctionne
versions
antérieures
PHP
10.2
Quelle
utilité
hétérogénéité
moyens
accès
bases
données
problèmes
plus
gênants
PHP
problème
vient
fait
exemple
fonctions
permettant
accès
base
PostgreSQL
différentes
celles
MySQL
elles
toutes
différentes
celles
SQLite
etc
Cela
effet
rendre
plus
difficile
migration
système
vers
autre
écrit
exemple
cours
site
utilisant
base
PostgreSQL
voulez
transférer
chez
hébergeur
offre
MySQL
comme
exemple
cas
Free
encore
peu
temps
seule
solution
reprendre
corriger
toutes
pages
tous
appels
fonctions
concernant
PostgreSQL
peut
avoir
beaucoup
couche
abstraction4
permet
éviter
problème
tous
accès
base
données
passent
syntaxe
quelle
base
données
débrouille
adapter
base
données
utilisée
changer
base
données
passer
PostgreSQL
MySQL
exemple
général
modifier
ligne
celle
donne
paramètres
base
données
utilisée
10.3
connecter
base
données
texte
extrait
Fonctions
PDO5
chapitre
manuel
PHP
PHP
net6
connexions
établies
créant
instances
classe
base
PDO
Peut
importe
quel
driver
voulez
utiliser
utilisez
toujours
nom
classe
PDO
constructeur
accepte
paramètres
spécifier
source
base
données
connue
tant
DSN
optionnellement
nom
utilisateur
mot
passe
suffit
cela
exécuter
commande
dbh
=
new
PDO
``
type_de_base
host=machine_qui_héberge_la_base
dbname=nom_de_la_base
nom_d_utilisateur
mot_de_passe
nom
variable
dbh
sans
importance
variable
pouvez
donner
nom
plaît
faut
seulement
garder
esprit
faut
conserver
variable
quelque
nom
permettra
accéder
base
données
fonctions
sections
suivants
1.
http
//fr.php.net/manual/fr/ref.pdo.php
2.
http
//fr.php.net/
3.
http
//fr.php.net/manual/fr/ref.pdo.php
#
pdo.drivers
4
existe
autres
couches
abstraction
dbx
PHPLib
ADODB
MetaData
Pear-DB
etc.
5.
http
//fr.php.net/manual/fr/ref.pdo.php
6.
http
//fr.php.net/
29
Chapitre
10
PDO
type_de_base
quant
valeur
parmi
•
mssql
FreeTDS/Microsoft
SQL
Server/Sybase
•
firebird
Firebird/Interbase
6
•
informix
IBM
Informix
Dynamic
Server
•
mysql
MySQL
3.x/4.x/5.x
•
oci
Oracle
Call
Interface
•
odbc
ODBC
v3
IBM
DB2
unixODBC
win32
ODBC
•
pgsql
PostgreSQL
•
sqlite
SQLite
3
SQLite
2
reportera
page
Fonctions
PDO7
gestion
erreurs
connexion
Lorsque
connexion
base
données
réussi
instance
classe
PDO
retournée
script
connexion
active
tant
objet
PDO
clore
connexion
devez
détruire
objet
assurant
toutes
références
effacées
pouvez
faire
cela
assignant
NULL
variable
gérant
objet
faites
explicitement
PHP
fermera
automatiquement
connexion
lorsque
script
arrivera
fin
10.4
Exécuter
requête
trouverez
plus
information
page
PDO-
query
8
manuel
PHP
auparavant
obtenu
identifiant
connexion
dbh
instance
classe
base
PDO
comme
précédemment
syntaxe
simple
res
=
dbh-
query
votre_requête
valeur
renvoyée
rangée
ici
variable
res
résultat
exécution
requête
identifiant
propre
système
valeur
réelle
intéresse
pas9
permettra
accéder
résultats
grâce
fonctions
décrites
ci-dessous
10.5
Nombre
lignes
colonnes
requête
select
peut
facilement
obtenir
nombre
lignes
colonnes
résultat
requête
type
SELECT
result
=
dbh-
query
SELECT
id
FROM
table
echo
result-
rowCount
//
nombre
lignes
echo
result-
columnCount
//
nombre
champs
Avertissement
certains
gestionnaires
bases
données
particulier
Sqlite
arrive
méthode
rowCount
fonctionne
cas-là
remplacez
res-
rowCount
count
data
data
égal
count
result-
fetchAll
voir
Section
10.6
cela
produira
effet
Plus
informations
PHP
net
rowCount
10
columnCount
11
7.
http
//fr.php.net/manual/fr/ref.pdo.php
8.
http
//fr.php.net/manual/fr/function.PDO-query.php
9
fait
objet
10.
http
//fr.php.net/manual/fr/function.PDOStatement-rowCount.php
11.
http
//fr.php.net/manual/fr/function.PDOStatement-columnCount.php
30
Chapitre
10
PDO
10.6
Accéder
résultats
requête
select
result
résultat
valide
renvoyé
dbh-
query
result-
fetchAll
renvoie
tableau
2
dimensions
contient
résultats
premier
indice
concerne
lignes
deuxième
concerne
colonnes
Plus
informations
PHP
net
fetchAll
12
10.6.1
Accès
nom
colonnes
Exemple
result
=
dbh-
query
``
SELECT
*
FROM
villes
data
=
result-
fetchAll
foreach
data
row
{
echo
row
``
codepostal
-
``
row
``
ville
``
br
/
\n
}
10.6.2
Accès
numéro
colonnes
Exemple
result
=
dbh-
query
``
SELECT
*
FROM
villes
data
=
result-
fetchAll
foreach
data
row
{
for
i=0
i
result-
columnCount
i++
{
echo
row
i
*
*
``
}
echo
``
br
/
\n
}
10.6.3
Accès
numéro
lignes
numéro
colonnes
Exemple
result
=
dbh-
query
``
SELECT
*
FROM
villes
data
=
result-
fetchAll
for
l=0
result-
rowCount
l++
{
for
i=0
i
result-
columnCount
i++
{
echo
data
i
*
*
``
}
echo
``
br
/
\n
}
10.7
Gestion
erreurs
Quand
instruction
PDO
échoue
aucun
message
affiché
peut
alors
croire
tort
tout
bien
passé
important
savoir
obtenir
informations
éventuelles
erreurs
avoir
informations
plus
précises
quelques
lignes
allez
voir
pages
elles
extraites13
PHP.net14
suite
continuerons
placer
cas
auparavant
obtenu
identifiant
connexion
dbh
instance
classe
base
PDO
12.
http
//fr.php.net/manual/fr/function.PDOStatement-fetchAll.php
13.
http
//fr.php.net/manual/fr/pdo.error-handling.php
14.
http
//fr.php.net/
31
Chapitre
10
PDO
10.7.1
Code
erreur
méthode
db-
errorCode
renvoie
code
erreur
associé
dernière
opération
effectuée
base
données
valeur
0
zéro
erreur
10.7.2
Informations
associées
erreur
méthode
db-
errorInfo
renvoie
informations
associées
erreur
survenue
lors
dernière
opération
base
données
agit
tableau
contient
champs
décrit
Tableau
10-1
Tableau
10-1
Champs
db-
errorInfo
Élément
Information
0
Code
erreur
SQLSTATE
identifiant
alphanumérique
cinq
caractères
défini
standard
ANSI
SQL
1
Code
erreur
spécifique
driver
2
Message
erreur
spécifique
driver
code
erreur
SQLSTATE
défini
erreur
spécifique
driver
élément
suivant
élément
0
défini
NULL
10.7.3
Exemple
traitement
erreur
gérer
éventuelles
erreurs
méthodes
précédentes
peuvent
être
utilisée
façon
ici
exé-
cute
requête
req
définie
ailleurs
db-
query
req
//
exécution
reqête
if
db-
errorCode
=0
{
//
erreur
echo
``
b
Erreur
/b
requête
tt
req
/tt
br
/
\n
t=
db-
errorInfo
//
récupération
informations
erreur
echo
``
b
Code
erreur
SQLSTATE
/b
``
0
``
br
/
\n
echo
``
b
Code
erreur
spécifique
driver
/b
``
1
``
br
/
\n
echo
``
b
Message
erreur
/b
blockquote
p
2
``
/p
/blockquote
\n
echo
``
b
programme
interrompu
/b
die
}
32
Chapitre
11
Programmation
séparée
PHP
11.1
programmation
séparée
programmation
séparée
écrire
programme
plusieurs
petits
fichiers
lieu
seul
gros
Quelques
avantages
•
fichiers
plus
petits
plus
faciles
relire
comprendre
modifier
tester
corriger
•
Cela
permet
faire
travailler
plusieurs
personnes
programme
temps
•
Cela
permet
regrouper
plus
facilement
fonctions
domaine
chaque
fichier
propre
cohérence
•
plus
facile
réutiliser
travail
déjà
fait
11.2
fonctions
require
include
fonctions
require1
include2
permettent
inclure
fichier
autre
dit
exemple
commande
require
remplace
elle-même
contenu
fichier
spécifié
Différentes
façons
utiliser
fonctions
1
rendre
homogène
présentation
site
écrit
seule
fois
début
partie
head
couleur
fond
couleur
texte
présentation
grand
titre
etc.
fin
page
exemple
signature
adresse
mail
fichiers
séparés
contente
ajouter
chaque
feuille
require
début
fin
fichiers
2
partie
code
identique
plusieurs
pages
écrit
seule
fois
fichier
séparé
inclut
require
chaque
fois
nécessaire
façons
faire
seulement
avantage
permettre
taper
plusieurs
fois
chose
éviter
fatigue
inutile
surtout
copier-coller
marche
bien
utilité
surtout
rendre
modifications
faciles
répercuter
décidez
changer
présentation
globale
site
seul
fichier
modifier
décidez
modifier
partie
code
commune
façon
faire
calcul
façon
connecter
etc.
également
seul
fichier
modifier
1.
http
//fr.php.net/manual/fr/function.require.php
2.
http
//fr.php.net/manual/fr/function.include.php
33
Chapitre
11
Programmation
séparée
PHP
34
Chapitre
12
Identification
PHP
aborderons
ici
identification
gérée
navigateur
12.1
Préliminaires
fonction
header
fonction
header1
permet
spécifier
en-tête
HTTP
lors
envoi
fichiers
HTML
Reportez-vous
HTTP
1.1
Specification2
plus
informations
en-têtes
HTTP
Remarque
fonction
header
doit
être
appelée
avant
première
balise
HTML
avant
importe
quel
envoi
com-
mande
PHP
allons
utiliser
ici
fonction
demander
vérification
identité
cela
suffit
faire
commencer
programme
PHP
commande
header
``
WWW-Authenticate
Basic
realm=
private
effet
faire
demander
retenir
nom
mot
passe
navigateur
pouvez
ainsi
tester
programme
élémentaire
suivant
ident-exple01.php3
php
if
isset
PHP_AUTH_USER
||
isset
PHP_AUTH_PW
{
header
``
WWW-Authenticate
Basic
realm=
private
}
else
{
echo
``
html
body
echo
``
données
connues
PHP_AUTH_USER
PHP_AUTH_PW\n
echo
``
/body
/html
}
pouvez
remarquer
demande
faite
lors
première
exécution
page
seule
façon
programme
tel
écrit
devoir
répondre
nouveau
question
sortir
navigateur
fermer
toutes
fenêtres
navigateur
oui
relancer
Attention
serveur
configuré
safe
mode
accès
variables
PHP_AUTH_USER
PHP_AUTH_PW
_SERVER
``
PHP_AUTH_USER
_SERVER
``
PHP_AUTH_PW
serveur
configuré
safe
mode
voir
aussi
Section
7.1
propriété
allons
utiliser
gérer
identification
utilisateurs
12.2
Contrôle
mots
passe
manque
seule
chose
presque
programme
précédent
être
parfait
tester
valeurs
variables
PHP_AUTH_USER
contient
nom
PHP_AUTH_PW
contient
mot
passe
vérifier
affaire
bonne
personne
version
simple
pourrait
ressembler
ça
ident-exple02.php4
php
if
PHP_AUTH_USER==
marcel
&
&
PHP_AUTH_PW==
bidule
{
echo
``
html
body
echo
``
Bravo
identification
réussie.\n
echo
``
/body
/html
}
else
{
1.
http
//fr.php.net/manual/fr/function.header.php
2.
http
//www.w3.org/Protocols/rfc2616/rfc2616
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/ident-exple01.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/ident-exple02.php
35
Chapitre
12
Identification
PHP
header
``
WWW-Authenticate
Basic
realm=
private
}
12.3
Amélioration
plusieurs
utilisateurs
rare
quand
accès
page
contrôlée
mot
passe
tous
utilisateurs
mêmes
droits
faut
pouvoir
détecter
identité
personne
concernée
moment
saisie
mot
passe
cela
donnera
mot
passe
différent
chaque
utilisateur
Cela
permet
avoir
exemple
suivant
ident-exple03.php5
lequel
renseignements
rangés
tableau
chaînes
caractères
chaîne
personne
présentée
sous
forme
vrai
nom/nom
utilisateur/mot
passe
php
//
liste
informations
liste=array
``
Jean
Némar/nemar/jjjj
Sophie
Fonfec/fonfec/ssss
Yves
Adrouille-Toultan/adrouille/yyyy
//
création
tableaux
for
i=0
i
count
liste
i++
{
l=explode
``
/
trim
liste
i
nom
i
=
0
//
identité
réelle
utilisateur
n◦i
user
i
=
1
//
identifiant
utilisateur
n◦i
système
pass
i
=
2
//
mot
passe
utilisateur
n◦i
}
nbusers=count
liste
//
contrôle
identité
ok=-1
//
démarre
sans
connaître
utilisateur
for
i=0
i
nbusers
i++
{
if
PHP_AUTH_USER==
user
i
&
&
PHP_AUTH_PW==
pass
i
{
//
reconnu
utilisateur
-
garde
numéro
ok=
i
}
}
//
identification
raté
ok
contient
toujours
-1
//
demande
nom
mot
passe
if
ok==-1
{
header
``
WWW-Authenticate
Basic
realm=
private
return
//
notera
utilisation
instruction
return
//
sortir
programme.
}
//
arrive
ici
identification
réussi
//
ok
contient
numéro
utilisateur
echo
``
html
body
echo
``
Bravo
identification
réussie.
br
/
\n
echo
``
em
nom
ok
/em
\n
echo
``
identifiant
em
user
ok
/em
\n
echo
``
mot
passe
em
pass
ok
/em
br
/
\n
//
ajouter
ici
tout
concerne
utilisateur
//
//
echo
``
/body
/html
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/ident-exple03.php
36
Chapitre
12
Identification
PHP
12.4
Séparer
données
traitement
tout
fait
raisonnable
imaginer
va
avoir
besoin
changer
mots
passe
ainsi
ajouter
nouveaux
utilisateurs
supprimer
anciens
contre
raisonnable
tout
imaginer
celui
va
faire
envie
aller
manipuler
chaque
fois
fichier
programme
ailleurs
souhaitable
préférable
garder
informations
fichier
séparé
est-ce
cela
change
grand
chose
suffit
exemple
remplacer
premières
lignes
//
liste
informations
liste=array
``
Jean
Némar/nemar/jjjj
Sophie
Fonfec/fonfec/ssss
Yves
Adrouille-Toultan/adrouille/yyyy
lecture
fichier
contenant
mêmes
informations
//
lire
liste
informations
liste=file
``
mettre
ici
chemin
accès
fichier
reste
programme
change
fichier
lire
alors
simple
fichier
texte
contiendra
cas
présent
Jean
Némar/nemar/jjjj
Sophie
Fonfec/fonfec/ssss
Yves
Adrouille-Toultan/adrouille/yyyy
12.5
Cacher
mots
passe
solution
précédente
très
gros
inconvénient
placez
fichier
mots
passe
importe
oubliez
pages
web
HTML
PHP
faites
être
vues
tout
monde
depuis
importe
permettre
cela
droits
accès
arborescence
web
positionnés
lisible
tous
chmod
a+r
*
faut
surtout
changer
cela
Ça
posera
aucun
problème
tant
entreposez
données
confidentielles
mots
passe
ça
confidentiel
Alors
comment
faire
suffit
mettre
fichier
mot
passe
arborescence
web
choisir
emplacement
quelconque
seule
obligation
être
accessible
utilisateur
apache
exécute
programmes
PHP
chemin
accès
instruction
liste=file
``
mettre
ici
chemin
accès
fichier
devra
être
absolu
est-à-dire
partir
racine
commencer
slash
/
12.6
Crypter
mots
passe
Afin
rendre
vie
trop
facile
éventuel
pirate
peut
aussi
être
intéressant
crypter
mots
passe
fichier
Cela
fait
fonction
crypt
algorithme
décryptage
faut
croire
cela
puisse
être
protection
suffisante
effet
mots
passe
cryptés
accessibles
suffit
recopier
chez
soi
versions
cryptées
décoder
tranquillement
force
brute
pourrez
trouver
exemple
cela
signifie
exécutant
programme
suivant
decrypt.php6
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/decrypt.php
37
Chapitre
12
Identification
PHP
décrypte
tout
mot
passe
fournissez
version
cryptée
manière
totalement
inintelli-
gente
voire
plutôt
bestiale
essaie
toutes
chaînes
caractères
possibles
commençant
1
caractère
puis
2
etc.
énumérant
systématiqument
exemple
2
caractères
aa
ab
ac
ad
ae
az
ba
bc
chaque
chaîne
calcule
version
cryptée
fonction
crypt
compare
celle
fournie
Quand
elles
identiques
sait
vient
trouver
mot
passe
Idiot
accord
ça
marche
Remarque
encombrer
inutilement
serveur
temps
calcul
limité
cela
permet
quand
trouver
coup
sûr
serveur
trop
travail
ailleurs
importe
quel
mot
passe
4
lettres
plus
tout
cela
programme
vraiment
optimisé
langage
plus
rapide
faut
vraiment
cacher
mots
passe
38
Chapitre
13
Sessions
13.1
Préambule
texte
suit
partie
page
consacrée
sessions1
site
http
//fr.php.net
support
sessions
PHP
moyen
préserver
données
entre
plusieurs
accès
Cela
permet
créer
applications
personnalisées
augmenter
attrait
site
Chaque
visiteur
accédant
page
web
voit
assigner
identifiant
unique
appelé
identifiant
session
peut
être
stocké
cookie
propagé
URL
support
sessions
permet
enregistrer
nombre
illimité
variables
doivent
être
préservées
entre
requêtes
Lorsqu
visiteur
accède
site
PHP
va
vérifier
automatiquement
session.auto_start
activé
demande
explicitement
session_start
implicitement
session_register
existe
session
nom
cas
environnement
précédemment
sauvé
recréé
seule
fonction
nécessaire
usage
simple
sessions
session_start
3
peux
encourager
aller
voir
autres4
13.2
Application
identification
visiteurs
Principe
•
Deux
variables
session
contiennent
login
mot
passe
visiteur
variables
vides
visiteur
identifié
•
visiteur
identifié
menu
propose
choix
connecter
envoie
formulaire
saisie
peut
aussi
inclure
formulaire
directement
menu
visiteur
identifié
menu
propose
choix
déconnecter
vide
variables
session
contiennent
login
mot
passe
visiteur
•
Chaque
page
commence
quelque
chose
ressemblera
if
visiteur
bon
niveau
autorisation
page
{
message
refus
fin
page
return
}
•
évaluation
niveau
autorisation
peut
faire
plusieurs
manières
•
solution
mauvaise
car
complique
modifications
Coder
dur
test
chaque
possibilité
if
nom==
bidule
&
&
mot
passe==
truc
{
}
elseif
nom==
chose
&
&
mot
passe==
importe
quoi
{
}
else
etc.
•
Mieux
Ranger
noms
mots
passe
tableau
parcourir
tableau
faire
vérifi-
cation
•
Parfait
chose
créer
table
spéciale
base
données
lieu
utiliser
tableau
•
être
parfait
bien
fonction
affiche
menu
fonction
décide
elle-même
choix
disponibles
fonction
niveau
autorisation
visiteur
•
Exemple
utilisation
sessions
http
//grappa.univ-lille3.fr/~gonzalez/session_php
1.
http
//fr.php.net/manual/fr/ref.session.php
3.
http
//fr.php.net/manual/fr/function.session-start.php
4.
http
//fr.php.net/manual/fr/ref.session.php
#
session.customhandler
39
Chapitre
13
Sessions
40
II
Hors
programme
Chapitre
14
Utiliser
PHP
base
données
PostgreSQL
chapitre
figure
ici
guise
témoignage
préférable
utiliser
PDO
accès
bases
données
Chapitre
10
14.1
Connexion
base
fonction
utiliser
pg_connect1
Syntaxe
résumée
www
=
pg_connect
``
host=xxx
dbname=ddd
user=yyy
password=zzz
www
variable
utilisée
comme
identifiant
connexion
chaque
exécution
requête
base
ddd
base
données
laquelle
essayez
connecter
xxx
nom
adresse
machine
laquelle
trouve
base
données
yyy
nom
utilisateur
zzz
mot
passe
utilisateur
14.2
Exécution
requête
fonction
utiliser
pg_query2
Syntaxe
résumée
rrr
=
pg_query
www
requete
rrr
variable
utilisée
comme
identifiant
voulez
obtenir
résultats
exécution
requête
www
identifiant
connexion
obtenu
pg_connect
voir
ci-dessus
requete
chaine
caractère
contenant
requête
exécuter
peut
être
chaîne
littérale
variable
1.
http
//fr.php.net/manual/fr/function.pg-connect.php
2.
http
//fr.php.net/manual/fr/function.pg-query.php
43
Chapitre
14
Utiliser
PHP
base
données
PostgreSQL
14.3
Obtention
résultats
requête
fonctions
utiliser
•
pg_numrows3
Syntaxe
résumée
nnn
=
pg_numrows
rrr
nnn
variable
contiendra
nombre
lignes
résultat
rrr
identifiant
exécution
requête
obtenu
pg_query
voir
ci-dessus
•
pg_fetch_array4
Syntaxe
résumée
lll
=
pg_fetch_array
rrr
iii
rrr
identifiant
exécution
requête
obtenu
pg_query
voir
ci-dessus
iii
numéro
ligne
voulez
obtenir
lll
variable
contiendra
table
constituée
tous
champs
ligne
demandée
agit
tableau
associatif
clefs
titres
colonnes
14.4
exemple
programme
php
c=pg_connect
``
dbname=
*
*
*
*
user=
*
*
*
*
password=
*
*
*
*
r=pg_query
``
SELECT
nom
prenom
FROM
emp
ORDER
BY
nom
for
i=0
i
pg_numrows
r
i++
{
l=pg_fetch_array
r
i
echo
``
prenom
em
``
nom
``
/em
.\n
}
produit
résultat
suivant
Yves
Adrouille-Toultan
Tex
Ajerre
Quentin
Amartakaldire
Yvon
Anchier
Helmut
Ardelpic
Terry
Blaireur
Thierry
Chmonfisse
Mélusine
Enfaillite
Odile
Eurktumeme
Teddy
Fairant
Sophie
Fonfec
Olaf
Hotdeugou
Xavier
Kaécouté
Alex
Kuzbidon
Pacôme
Odlavieille
Adhémar
Patamob
Humphrey
Peursconla
Thomas
Phototetedemort
Elsa
Riven-busse
Armand
Teutmaronne
Samira
Traibien
Héléna
Vrante
Agathe
Zeublouze
Debbie
Zoudanlkou
3.
http
//fr.php.net/manual/fr/function.pg-numrows.php
4.
http
//fr.php.net/manual/fr/function.pg-fetch-array.php
44
Chapitre
14
Utiliser
PHP
base
données
PostgreSQL
14.5
Requêtes
autres
SELECT
requêtes
type
INSERT
UPDATE
DELETE
exécutées
manière
requêtes
type
SELECT
fonction
pg_query5
cependant
important
contrôler
résultats
exécution
allons
étudier
chapitre
14.6
Suppression
messages
erreurs
pouvez
avoir
envie
gérer
vous-même
erreurs
requêtes
exemple
éviter
affichage
Warning
autres
Query
failed
cela
suffit
préfixer
fonctions
utilisez
opérateur
contrôle
erreur6
lorsque
opérateur
ajouté
préfixe
expression
PHP
messages
erreur
peuvent
être
générés
expression
ignorés
exemple
lieu
écrire
res
=
pg_query
req
écrira
res
=
pg_query
req
Remarque
opérateur
fonctionne
expressions
règle
générale
fonctionnement
suivante
pouvez
prendre
valeur
quelque
chose
pouvez
préfixer
exemple
pouvez
ajouter
variables
fonctions
include
constantes
etc.
pourrez
faire
éléments
langage
tels
classes
if
foreach
etc.
14.7
Gestion
erreurs
messages
impératif
quand
supprimez
avertissements
gérer
vous-même
erreurs
peuvent
survenir
cas
accès
base
PostgreSQL
existe
certain
nombre
fonctionnalités
cela
14.7.1
Résultat
renvoyé
pg_query
cas
échec
pg_query7
retourne
FALSE
cas
échec
est-à-dire
quand
aucun
résultat
réel
peut
exister
peut
ainsi
traiter
échec
éventuel
requête
if
r=
pg_query
req
{
//
traitement
cas
succès
}
else
{
//
traitement
cas
échec
}
14.7.2
Obtenir
texte
dernière
erreur
fonction
pg_last_error8
renvoie
éventuel
message
erreur
correspondant
dernière
exécution
requête
5.
http
//fr.php.net/manual/fr/function.pg-query.php
6.
http
//fr.php.net/manual/fr/language.operators.errorcontrol.php
7.
http
//fr.php.net/manual/fr/function.pg_query.php
8.
http
//fr.php.net/manual/fr/function.pg-last-error.php
45
Chapitre
14
Utiliser
PHP
base
données
PostgreSQL
14.7.3
Obtenir
statut
connexion
peut
connaître
état
connexion
utilisant
fonction
pg_result_status9
valeurs
re-
tournées
possibles
•
PGSQL_EMPTY_QUERY
0
•
PGSQL_COMMAND_OK
1
•
PGSQL_TUPLES_OK
2
•
PGSQL_COPY_TO
3
•
PGSQL_COPY_FROM
4
•
PGSQL_BAD_RESPONSE
5
•
PGSQL_NONFATAL_ERROR
6
•
PGSQL_FATAL_ERROR
7
14.7.4
Obtenir
nombre
lignes
affectées
requête
pg_affected_rows10
retourne
nombre
lignes
affectées
requêtes
type
INSERT
UPDATE
DELETE
exécutées
fonction
pg_query
aucune
ligne
affectée
pg_affected_rows
retourne
0
9.
http
//fr.php.net/manual/fr/function.pg-connection-status.php
10.
http
//fr.php.net/manual/fr/function.pg-affected-rows.php
46
Chapitre
15.
peardb
présentation
chapitre
figure
ici
guise
témoignage
préférable
utiliser
PDO
accès
bases
données
Chapitre
10
15.1
est-ce
pear
texte
extrait
Présentation
pear1
JDN2
Journal
Net
pear
PHP
Extension
and
Application
Repository
archive
composants
PHP
réutilisables
projet
majeur
communauté
PHP
archive
stockant
façon
plus
exhaustive
possible
programmes
macros
doc-
umentation
but
fournir
développeurs
bibliothèques/modules
PHP
moyen
organiser
code
PHP
manière
définie
partagée
autres
développeurs
ainsi
offrir
communauté
PHP
seule
source
ressources
bref
architecture
système
dis-
tribution
composants
PHP
réutilisables
15.2
Quelle
utilité
pear
utile
tout
développeur
PHP
allons
surtout
utiliser
module
DB
DataBase
couche
abstraction
accès
bases
données
hétérogénéité
moyens
accès
bases
données
problèmes
plus
gênants
PHP3
problème
vient
fait
exemple
fonctions
permettant
accès
base
PostgreSQL
différentes
celles
MySQL
elles
toutes
différentes
celles
SQLite
etc
Cela
effet
rendre
plus
difficile
migration
système
vers
autre
écrit
exemple
cours
site
utilisant
base
PostgreSQL
voulez
transférer
chez
hébergeur
offre
MySQL
Free
exemple
seule
solution
reprendre
corriger
toutes
pages
tous
appels
fonctions
concernant
PostgreSQL
peut
avoir
beaucoup
couche
abstraction4
permet
éviter
problème
tous
accès
base
données
passent
syntaxe
quelle
base
données
débrouille
adapter
base
données
utilisée
changer
base
données
passer
PostgreSQL
MySQL
exemple
général
modifier
ligne
celle
donne
paramètres
base
données
utilisée
trouverez
web
documentation
français
pear5
particulier
module
peardb6
15.3
Utiliser
peardb
fonctions
peardb
utilisables
programme
doit
commencer
require_once
DB.php
15.4
connecter
base
données
trouverez
plus
détails
page
Introduction
-
DSN7
première
action
avant
utiliser
base
données
connecter
1.
http
//developpeur.journaldunet.com/tutoriel/php/021017php_pear1.shtm
2.
http
//developpeur.journaldunet.com/
3
semble
PHP5
réglé
problème
utiliserons
PHP4
4
existe
autres
couches
abstraction
PHPLib
ADODB
MetatData
etc.
5.
http
//pear.php.net/manual/fr/
6.
http
//pear.php.net/manual/fr/package.database.php
7.
http
//pear.php.net/manual/fr/package.database.db.intro-dsn.php
47
Chapitre
15.
peardb
présentation
cela
faut
définir
DSN
Data
Source
Name
donnera
tous
renseignements
base
données
utiliser
nom
utilisateur
mot
passe
machine
hébergeant
serveur
type
SGBD
etc.
syntaxe
légèrement
simplifiée
suivante
type_de_BD
//utilisateur
mot_de_passe
machine/base_de_données
option=valeur
exemple
•
base
PostgreSQL
pgsql
//utilisateur
mot_de_passe
localhost/base
•
base
SQLite
sous
linux
sqlite
////chemin_complet_vers_fichier.db
mode=0666
•
base
SQLite
sous
Windows
sqlite
///c
/chemin_complet_vers_fichier.db
mode=0666
suffit
ensuite
exécuter
commande
db
=
&
DB
:connect
votre_DSN
nom
variable
db
sans
importance
variable
pouvez
donner
nom
plaît
faut
seulement
garder
esprit
faut
conserver
variable
quel
nom
permettra
accéder
base
données
fonctions
chapitres
suivants
15.5
Gestion
erreurs
15.5.1
cas
erreur
Après
toute
utilisation
fonction
peardb
compris
tentative
connexion
peut
être
utile
vérifier
aucune
erreur
produite
if
PEAR
:isError
db
{
echo
``
hr
/
``
Message
Standard
``
db-
getMessage
``
hr
/
\n
``
Message
DBMS/Utilisateur
``
db-
getUserInfo
``
hr
/
\n
``
Message
DBMS/Débogage
``
db-
getDebugInfo
``
hr
/
\n
exit
}
choisir
messages
paraît
intéressant
afficher
15.5.2
Application
peut
utiliser
gestion
erreurs
écrire
programme
plus
portable
écrivez
programme
PHP
voulez
utiliser
plusieurs
endroits
conditions
dif-
férentes
salles
TP
chez
chez
hébergeur
etc.
devrez
principe
modifier
programme
chaque
fois
transférez
site
autre
utilisation
peardb
réduit
nombre
modifications
faire
reste
toujours
DSN
adapter
Cependant
pouvez
oublier
également
manipulation
utilisant
gestion
erreurs
db
=
&
DB
:connect
DSN_pour_les_salles_de_TP
options
if
PEAR
:isError
db
{
db
=
&
DB
:connect
DSN_pour_votre_machine
options
if
PEAR
:isError
db
{
db
=
&
DB
:connect
DSN_pour_votre_hébergeur
options
if
PEAR
:isError
db
{
48
Chapitre
15.
peardb
présentation
echo
``
hr
/
Connexion
impossible
hr
/
\n
exit
}
}
}
15.6
Exécuter
requête
syntaxe
simple
res
=
&
db-
query
votre_requête
valeur
renvoyée
rangée
ici
variable
res
résultat
exécution
requête
identifiant
propre
système
valeur
réelle
intéresse
permettra
accéder
résultats
grâce
fonctions
décrites
ci-dessous
15.7
Accéder
résultats
requête
select
peardb
fournit
deux
fonctions
traiter
lignes
résultant
requête
fetchRow
8
fetchInto
9
15.7.1.
fetchRow
fetchRow
retourne
rangée
Exemple
utilisation
supposant
mode
défaut
récupération
DB_FETCHMODE_ORDERED
voir
setfetchmode
while
row
=
&
res-
fetchRow
{
echo
row
0
``
\n
}
15.7.2.
fetchInto
fetchInto
besoin
variable
assignera
référence
contenu
rangée
résultat
retournera
DB_OK
Exemple
utilisation
supposant
mode
défaut
récupération
DB_FETCHMODE_ORDERED
voir
setfetchmode
while
res-
fetchInto
row
{
echo
row
0
``
\n
}
15.8.
setfetchmode
commande
setfetchmode
10
configure
mode
récupération
défaut
utilisé
méthodes
fetch
*
get
*
utiliserons
deux
manières
existe
autres
allez
voir
page
consacrée11
8.
http
//pear.php.net/manual/fr/package.database.db.db-result.fetchrow.php
9.
http
//pear.php.net/manual/fr/package.database.db.db-result.fetchinto.php
10.
http
//pear.php.net/manual/fr/package.database.db.db-common.setfetchmode.php
11.
http
//pear.php.net/manual/fr/package.database.db.db-common.setfetchmode.php
49
Chapitre
15.
peardb
présentation
•
setfetchmode
DB_FETCHMODE_ORDERED
rangées
mises
tableau
ordonné
accède
numéro
•
setfetchmode
DB_FETCHMODE_ASSOC
rangées
mises
tableau
associatif
accède
titre
colonne
bien
comprendre
différence
pouvez
utiliser
fonction
PHP
print_r12
permet
afficher
tableau
entier
Ainsi
programme
db-
setfetchmode
DB_FETCHMODE_ORDERED
//
sortie
tableau
ordonné
res
=
&
db-
query
``
SELECT
*
FROM
personne
//
requête
res-
fetchInto
row
//
récupération
1ère
ligne
echo
``
pre
//
affichage
préformaté
print_r
row
//
affichage
ligne
tableau
echo
``
/pre
//
fin
affichage
préformaté
produira
affichage
Array
0
=
5
1
=
Kuzbidon
2
=
Ginette
3
=
263
4
=
393
5
=
6
=
7
=
Tandis
celui-ci
db-
setfetchmode
DB_FETCHMODE_ASSOC
//
sortie
tableau
associatif
res
=
&
db-
query
``
SELECT
*
FROM
personne
//
requête
res-
fetchInto
row
//
récupération
1ère
ligne
echo
``
pre
//
affichage
préformaté
print_r
row
//
affichage
ligne
tableau
echo
``
/pre
//
fin
affichage
préformaté
produira
affichage
Array
codepersonne
=
5
nom
=
Kuzbidon
prenom
=
Ginette
numerodanslarue
=
263
refrue
=
393
tel
=
fax
=
email
=
peut
également
utiliser
constantes
DB_FETCHMODE_ORDERED
DB_FETCHMODE_ASSOC
directement
fonctions
fetchRow
fetchInto
comme
exemple
row
=
&
res-
fetchRow
DB_FETCHMODE_ASSOC
res-
fetchInto
row
DB_FETCHMODE_ORDERED
12.
http
//fr.php.net/manual/fr/function.print-r.php
50
Chapitre
15.
peardb
présentation
15.9.
peardb
informations
requêtes
chapitre
provient
PEAR-DB
-
Résultats13
quatre
manières
récupérer
informations
intéressantes
jeux
résultats
15.9.1.
numRows
numRows
14
retourne
nombre
lignes
disponibles
jeu
résultats
issu
requête
SELECT
php
//
fois
objet
DB
valide
nommé
db
res
=
&
db-
query
SELECT
bla
bla
echo
res-
numRows
15.9.2.
numCols
numCols
15
retourne
nombre
colonnes
disponibles
jeu
résultats
issu
requête
SELECT
php
//
fois
objet
DB
valide
nommé
db
res
=
&
db-
query
SELECT
bla
bla
echo
res-
numCols
15.9.3.
affectedRows
affectedRows
16
retourne
nombres
lignes
affectées
requête
type
INSERT
UPDATE
DELETE
php
//
Souvenez-vous
requête
retourne
objet
résultats
db-
query
DELETE
bla
bla
echo
``
effacé
``
db-
affectedRows
``
clients
15.9.4.
tableInfo
tableInfo
17
retourne
tableau
associatif
contenant
informations
colonnes
issues
résultat
requête
type
SELECT
php
//
fois
objet
DB
valide
nommé
db
res
=
&
db-
query
SELECT
bla
bla
print_r
res-
tableInfo
13.
http
//pear.php.net/manual/fr/package.database.db.intro-fetch.php
14.
http
//pear.php.net/manual/fr/package.database.db.db-result.numrows.php
15.
http
//pear.php.net/manual/fr/package.database.db.db-result.numcols.php
16.
http
//pear.php.net/manual/fr/package.database.db.db-common.affectedrows.php
17.
http
//pear.php.net/manual/fr/package.database.db.db-common.tableinfo.php
51
Chapitre
15.
peardb
présentation
52
Chapitre
16.
dbx
chapitre
figure
ici
guise
témoignage
préférable
utiliser
PDO
accès
bases
données
Chapitre
10
16.1
est-ce
dbx
texte
extrait
XXVII
Fonctions
dbx1
chapitre
manuel
PHP
PHP
net2
module
dbx
module
abstraction
base
données
db
database
base
données
X
toutes
bases
supportées
fonctions
dbx
permettent
accéder
toutes
bases
supportées
convention
fonctions
dbx
elles-mêmes
interfacent
directement
bases
données
interfacent
modules
utilisées
supporter
bases
pouvoir
utiliser
base
données
module
dbx
module
doit
être
lié
chargé
PHP
module
base
données
doit
être
supporté
module
dbx
Actuellement
bases
suivantes
supportées
autres
suivront
•
FrontBase
disponible
depuis
PHP
4.1.0
•
Microsoft
SQL
Server
•
MySQL
•
ODBC
•
PostgreSQL
•
Sybase-CT
disponible
depuis
PHP
4.2.0
•
Oracle
disponible
depuis
PHP
4.3.0
•
SQLite
PHP
5
16.2
Quelle
utilité
hétérogénéité
moyens
accès
bases
données
problèmes
plus
gênants
PHP
problème
vient
fait
exemple
fonctions
permettant
accès
base
PostgreSQL
différentes
celles
MySQL
elles
toutes
différentes
celles
SQLite
etc
Cela
effet
rendre
plus
difficile
migration
système
vers
autre
écrit
exemple
cours
site
utilisant
base
PostgreSQL
voulez
transférer
chez
hébergeur
offre
MySQL
Free
exemple
seule
solution
reprendre
corriger
toutes
pages
tous
appels
fonctions
concernant
PostgreSQL
peut
avoir
beaucoup
couche
abstraction3
permet
éviter
problème
tous
accès
base
données
passent
syntaxe
quelle
base
données
débrouille
adapter
base
données
utilisée
changer
base
données
passer
PostgreSQL
MySQL
exemple
général
modifier
ligne
celle
donne
paramètres
base
données
utilisée
16.3
connecter
base
données
trouverez
plus
détails
page
dbx_connect4
manuel
PHP5
première
action
avant
utiliser
base
données
connecter
suffit
cela
exécuter
commande
db
=
dbx_connect
type_de_base
machine_qui_héberge_la_base
nom_de_la_base
1.
http
//fr.php.net/manual/fr/ref.dbx.php
2.
http
//fr.php.net/
3
existe
autres
couches
abstraction
PHPLib
ADODB
MetaData
Pear-DB
etc.
4.
http
//fr.php.net/manual/fr/function.dbx-connect.php
5.
http
//fr.php.net/manual/fr/index.php
53
Chapitre
16.
dbx
nom_d_utilisateur
mot_de_passe
nom
variable
db
sans
importance
variable
pouvez
donner
nom
plaît
faut
seulement
garder
esprit
faut
conserver
variable
quel
nom
permettra
accéder
base
données
fonctions
chapitres
suivants
type_de_base
quant
valeur
parmi
DBX_MYSQL
DBX_ODBC
DBX_PGSQL
DBX_MSSQL
DBX_FBSQL
DBX_SYBASECT
DBX_OCI8
DBX_SQLITE
16.4
Exécuter
requête
trouverez
plus
information
page
dbx_query6
manuel
PHP
syntaxe
simple
res
=
dbx_query
db
votre_requête
valeur
renvoyée
rangée
ici
variable
res
résultat
exécution
requête
identifiant
propre
système
valeur
réelle
intéresse
permettra
accéder
résultats
grâce
fonctions
décrites
ci-dessous
16.5
Nombre
lignes
colonnes
requête
select
peut
facilement
obtenir
nombre
lignes
colonnes
résultat
requête
type
SELECT
result
=
dbx_query
db
SELECT
id
FROM
table
echo
result-
rows
//
nombre
lignes
echo
result-
cols
//
nombre
champs
16.6
Accéder
résultats
requête
select
result
résultat
valide
renvoyé
dbx_query
result-
data
tableau
2
dimensions
contient
résultats
premier
indice
concerne
lignes
deuxième
concerne
colonnes
16.6.1
Accès
nom
colonnes
Exemple
result
=
dbx_query
db
``
SELECT
*
FROM
ville
foreach
result-
data
row
{
echo
row
``
codepostal
-
``
row
``
ville
``
br
/
\n
}
16.6.2
Accès
numéro
colonnes
Exemple
result
=
dbx_query
db
``
SELECT
*
FROM
ville
foreach
result-
data
row
{
for
i=0
i
result-
cols
i++
{
echo
row
i
*
*
``
}
echo
``
br
/
\n
6.
http
//fr.php.net/manual/fr/function.dbx-query.php
54
Chapitre
16.
dbx
}
16.6.3
Accès
numéro
lignes
numéro
colonnes
Exemple
result
=
dbx_query
db
``
SELECT
*
FROM
ville
for
l=0
result-
rows
l++
{
for
i=0
i
result-
cols
i++
{
echo
result-
data
i
*
*
``
}
echo
``
br
/
\n
}
55
Chapitre
16.
dbx
56
Chapitre
17
Exploration
contenu
répertoire
corrigés
exercices
chapitre
trouvent
Chapitre
25
17.1
notions
nécessaires
PHP
17.1.1
Exploration
répertoire
première
fonction
connaître
opendir1
destinée
être
utilisée
fonctions
readdir2
closedir3
programme
suivant
opendir.php
affiche
contenu
répertoire
/mnt
php
dir
=
opendir
``
/mnt
while
file
=
readdir
dir
{
echo
``
file\n
}
closedir
dir
également
excellente
application
utilisation
structure
while
17.1.2
Extraction
sous-chaîne
caractères
souvent
nécessaire
tester
partie
chaîne
caractères
faut
pouvoir
isoler
fait
fonction
substr4
voici
quelques
exemples
résultats
voir
résultat
produit
substr.php5
php
echo
substr
``
abcdef
1
``
br
/
//
retourne
``
bcdef
echo
substr
``
abcdef
1
3
``
br
/
//
retourne
``
bcd
echo
substr
``
abcdef
-1
``
br
/
//
retourne
``
f
echo
substr
``
abcdef
-2
``
br
/
//
retourne
``
ef
echo
substr
``
abcdef
-3
1
``
br
/
//
retourne
``
echo
substr
``
abcdef
1
-1
``
br
/
//
retourne
``
bcde
premier
paramètre
chaîne
doit
extraire
partie
deuxième
paramètre
indique
position
lettre
va
commencer
extraction
négatif
cela
indique
compte
partir
fin
chaîne
troisième
paramètre
mentionné
va
jusqu
fin
chaîne
présent
indique
nombre
lettres
prendre
17.2
notions
nécessaires
HTML
17.2.1
Images
cliquables
Comment
faire
sorte
cliquant
image
obtienne
résultat
cliquant
mot
Tout
simplement
faisant
chose
image
texte
1.
http
//fr.php.net/manual/fr/function.opendir.php
2.
http
//fr.php.net/manual/fr/function.readdir.php
3.
http
//fr.php.net/manual/fr/function.closedir.php
4.
http
//fr.php.net/manual/fr/function.substr.php
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/substr.php
57
Chapitre
17
Exploration
contenu
répertoire
transformer
mot
lien
suffit
inclure
entre
href=
/a
fera
chose
image
Ainsi
écrire
href=
simple.php
img
src=
mini/rpb.jpg
/
/a
effet
afficher
image
mini/rpb.jpg
tout
faisant
sorte
clique
dessus
arrive
page
17.2.2
lien
affiche
image
plutôt
page
HTML
PHP
suffit
mettre
lien
adresse
image
lieu
adresse
page
17.3
Exercices
Tous
exercices
suivent
faire
répertoire
contiendra
images
autres
choses
aussi
pourquoi
ainsi
sous-répertoire
contiendra
mêmes
images
réduction
onglets
thumbnails
anglais
1
Première
version
programme6
affiche
images
trouvées
2
Deuxième
version
programme7
affiche
onglets
font
liens
vers
vraies
images
3
Troisième
version
programme8
affiche
onglets
font
liens
vers
pages
contenant
vraies
images
cadre
4
Version
parfaite
programme9
affiche
onglets
tableau
régulier
font
liens
vers
pages
contenant
vraies
images
cadre
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/simple.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/thumb.php
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/thumbplus.php
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/parfait.php
58
Chapitre
18
News
corrigés
exercices
chapitre
trouvent
Chapitre
26
allons
terminer
tour
horizon
PHP
mini-projet
but
afficher
articles
presse
différents
domaines
pourrez
trouver
exemple
internet1
18.1
Présentation
articles
rangés
chacun
fichier
nom
fichiers
composé
trois
parties
1
3
lettres
définissent
domaine
•
inf
informatique
•
msc
miscalaneous
divers
autrement
dit
entre
autres
catégories
•
sci
science
2
3
chiffres
forment
fait
numéro
ordre
fichier
001
002
003
004
005
etc.
3.
extension
jnl
exemple
inf001.jnl
inf002.jnl
inf003.jnl
inf004.jnl
inf005.jnl
msc001.jnl
msc002.jnl
sci001.jnl
sci002.jnl
sci003.jnl
etc.
Chaque
fichier
contiendra
texte
sans
codes
HTML
PHP
première
ligne
devra
obligatoirement
être
titre
article
fichiers
inf004.jnl
contient
exemple
Xenux
site
simple
débutant
Xenux.fr.st
nouveau
site
pressés
Linux
sans
chichi
sans
blabla
sait
va
dès
début
lecture
article
Intéressant
ça
marche
.....
Bientôt
18.2
travail
site
réaliser
caractéristiques
suivantes
1
Chaque
page
devra
aller
chercher
elle-même
fichiers
nécessaires
répertoire
liste
toute
faite
articles
suffit
copier
fichier
article
pris
compte
Inspirez-vous
fait
cours
exploration
contenu
répertoire
Chapitre
17
2
devez
réaliser
page
listenoms.php2
affiche
noms
fichiers
3
devez
réaliser
page
identique
précédente
telle
noms
fichiers
liens
vers
affichage
fichiers
eux-même
listeliens.php3
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/listenoms.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/listeliens.php
59
Chapitre
18
News
4
devez
réaliser
page
affiche
texte
TOUS
articles
uns
sous
autres
affichetout.php4
obligés
soigner
présentation
exercices
suivants
5
devez
réaliser
page
affichetitre.php5
affiche
uniquement
titres
articles
6
devez
réaliser
page
identique
précédente
laquelle
titres
affichés
liens
vers
articles
correspondants
affichetitrelien.php6
7
devez
réaliser
page
affiche
proprement
articles
affichetout_br.php7
•
articles
bien
séparés
ligne
horizontale
exemple
•
titres
bien
visibles
utilisant
exemple
construction
H2
..
/H2
•
fins
paragraphe
texte
original
respectés
8
devez
réaliser
page
permet
choisir
sujet
intéresse
informatique
miscala-
neous
divers
voir
section
description
affiche
articles
correspondants
sujet.php8
9
page
menu9
permette
aller
facilement
vers
chacune
pages
revenir
tout
aussi
facilement
18.3
temps
temps
pourrez
également
ajouter
quelques
fonctions
travail
1.
formulaire
permette
écrire
article
alors
ajouté
automatiquement
autres
2.
moyen
corriger
article
existant
3.
moyen
supprimer
article
existant
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetout.php
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetitre.php
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetitrelien.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetout_br.php
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/sujet.php
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/index.php
60
Chapitre
19
fichiers
corrigés
exercices
chapitre
trouvent
Chapitre
24
fichier
file
anglais
document
monde
Windows
objet
permet
système
exploitation
aussi
programmes
supporte
enregister
informations
disque
dur
disquette
19.1
Manipulations
base
utiliser
fichiers
faut
savoir
écrire
relire
19.1.1
Ouverture
fermeture
fichier
Avant
tout
accès
fichier
faut
ouvrir
fait
fonction
fopen1
syntaxe
int
fopen
string
fichier
string
mode
•
int
signifie
fonction
renvoie
valeur
entière
•
fichier
nom
fichier
ouvrir
•
mode
décrit
façon
fichier
utilisé
valeurs
plus
courantes
•
r
Ouvre
lecture
seule
place
pointeur
fichier
début
fichier
•
w
Ouvre
écriture
seule
place
pointeur
fichier
début
fichier
réduit
taille
fichier
0
fichier
existe
tente
créer
•
Ouvre
écriture
seule
place
pointeur
fichier
fin
fichier
fichier
existe
tente
créer
fichier
ouvert
fopen
fermé
fclose2
19.1.2
Écrire
fichier
étudierons
fichiers
texte
trouverez
plus
information
fichiers
aide
PHP3
écrire
fichier
texte
faut
utiliser
fonction
fwrite4
fonction
fputs5
tous
points
identique
19.1.3
Lire
contenu
fichier
Deux
solutions
radicalement
différentes
•
file6
déjà
vue
chapitre
tableaux
lit
fichier
seule
fois
rangeant
tableau
•
fgets7
lit
fichier
ligne
ligne
impose
certain
contrôle
existe
autres
façons
lire
informations
rangées
fichier
aborderons
Comme
précédemment
trouverez
plus
information
fichiers
aide
PHP8
1.
http
//fr.php.net/manual/fr/function.fopen.php
2.
http
//fr.php.net/manual/fr/function.fclose.php
3.
http
//fr.php.net/manual/fr/html/ref.filesystem.html
4.
http
//fr.php.net/manual/fr/function.fwrite.php
5.
http
//fr.php.net/manual/fr/function.fputs.php
6.
http
//fr.php.net/manual/fr/function.file.php
7.
http
//fr.php.net/manual/fr/function.fgets.php
8.
http
//fr.php.net/manual/fr/html/ref.filesystem.html
61
Chapitre
19
fichiers
19.2
exemple
allons
réaliser
mini-site
permet
ajouter
ligne
fois
fichier
tandis
page
permettra
afficher
contenu
fichier
1
Formulaire
fichier-01.php9
html
body
form
action=
fichier-02.php
Saisie
input
name=
ligne
input
type=
submit
/form
/body
/html
agit
fait
simple
page
HTML
contenant
formulaire
2
Traitement
formulaire
écriture
fichier
fichier-02.php10
html
body
php
//
ouverture
fichier
``
fichier-04.txt
mode
``
append=ajout
//
identifiant
renvoyé
fp
//
utilisé
écriture
fermeture
fp
=
fopen
``
fichier-04.txt
//
écriture
valeur
reçue
plus
fin
ligne
fputs
fp
ligne
``
\n
//
fermeture
fichier
fclose
fp
fichier
modifié
/body
/html
Remarque
programme
fonctionne
faut
droits
écriture
fichier
fichier-04.txt
Remarque
programme
devrait
être
laissé
accès
libre
réseau
importe
peut
utiliser
remplir
disque
écrivant
fichier
sans
contrôle
cela
version
proposée
exemple
désactivée
3
Affichage
contenu
fichier
•
Première
solution
fonction
file11
fichier-03.php12
html
body
php
f=file
``
fichier-04.txt
for
i=0
i
count
f
i++
{
echo
f
i
``
br
/
}
/body
/html
•
Deuxième
solution
fonction
fgets13
fichier-04.php14
html
body
php
fp
=
fopen
``
fichier-04.txt
r
while
l=fgets
fp,500
{
echo
``
br
/
}
fclose
fp
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/fichier-01.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/fichier-02.php
11.
http
//fr.php.net/manual/fr/function.file.php
12.
http
//grappa.univ-lille3.fr/polys/php/exemples/fichier-03.php
13.
http
//fr.php.net/manual/fr/function.fgets.php
14.
http
//grappa.univ-lille3.fr/polys/php/exemples/fichier-04.php
62
Chapitre
19
fichiers
/body
/html
19.3
Exercice
Écrire
gestionnaire
annuaire
téléphonique
minimum
atteindre
1
page
formulaire
permet
saisir
nom
prénom
numéro
téléphone
per-
sonne
2
appui
touche
envoi
enregistre
coordonnées
fichier
3
page
permette
présenter
proprement
liste
contacts
choix
sens
donner
mot
proprement
tableau
liste
etc.
important
lisible
4
doit
pouvoir
passer
facilement
page
autre
liens
entre
pages
page
accueil
améliorations
possibles
prises
compte
précède
réalisé
1
liste
affichée
pourra
être
mise
ordre
alphabétique
voir
fonction
sort15
2
pourra
offrir
possibilité
supprimer
contact
3
pourra
offrir
possibilité
modifier
contact
15.
http
//fr.php.net/manual/fr/function.sort.php
63
Chapitre
19
fichiers
64
III
Corrigés
exercices
Chapitre
20
Premiers
exercices
algorithmique
corrigés
trouverez
énoncés
exercices
Chapitre
5
1
Nombres
impairs
impair.php1
html
body
php
for
i=1
i
15000
i=
i+2
{
echo
``
i
``
}
/body
/html
2
Punition
punition.php2
html
body
php
for
i=1
i
=500
i++
{
echo
``
i
dois
faire
sauvegardes
régulières
br
/
\n
}
/body
/html
3
30
factorielle.php3
html
body
php
f=1
for
i=2
i
=30
i++
{
f=
f
*
i
}
echo
``
30
=
f\n
/body
/html
4
Multiplication
13
multiplication.php4
html
body
php
for
i=0
i
14
i++
{
r=
i
*
13
echo
``
i
*
13=
r
br
/
\n
}
/body
/html
aussi
multiplicationbis.php5
html
body
table
php
for
i=0
i
14
i++
{
r=
i
*
13
echo
``
tr
td
align=\
right\
i
/td
td
*
/td
td
13
/td
td
=
/td
echo
``
td
align=\
right\
r
/td
/tr
\n
}
/table
/body
/html
5
4
lignes
4lignes.php6
html
body
php
for
l=1
=4
l++
{
for
n=1
=13
n++
{
echo
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/impair.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/punition.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/factorielle.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplication.php
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplicationbis.php
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/4lignes.php
67
Chapitre
20
Premiers
exercices
algorithmique
corrigés
}
echo
``
br
/
}
/body
/html
6
Table
multiplication
totale
multiplicationtotale.php7
html
body
table
border=
border
php
//
1ère
ligne
echo
``
tr
td
/td
for
c=0
13
c++
{
echo
``
th
/th
}
echo
``
/tr
\n
//
toutes
lignes
for
l=0
13
l++
{
//
1
ligne
echo
``
tr
th
/th
for
c=0
13
c++
{
r=
*
echo
``
td
align=\
right\
r
/td
}
echo
``
/tr
\n
}
/table
/body
/html
7
Table
factorielles
tablefact.php8
html
body
php
//
fonction
factorielle
function
fact
{
f=1
//
initialisation
variable
accumulation
for
i=1
i
=
i++
{
f
*
=
i
}
return
f
}
for
x=0
x
=10
x++
{
echo
``
x
=
``
.fact
x
``
br
/
\n
}
/body
/html
8
Demi-sapin
demisapin.php9
html
body
php
function
triangle
{
for
l=1
=
l++
{
for
i=1
i
=
i++
{
echo
``
*
}
echo
``
br
/
}
}
for
n=2
=10
n+=2
triangle
/body
/html
9
Coefficients
binôme
binome.php10
html
body
php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/multiplicationtotale.php
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/tablefact.php
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/demisapin.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/binome.php
68
Chapitre
20
Premiers
exercices
algorithmique
corrigés
function
fact
{
f=1
for
i=1
i
=
i++
{
f
*
=
i
}
return
f
}
function
cnp
p
{
return
fact
/
fact
p
*
fact
n-
p
}
function
binome
{
echo
``
tr
for
i=0
i
=
i++
{
echo
``
td
align=\
right\
.cnp
i
``
/td
}
echo
``
/tr
\n
}
echo
``
table
\n
for
i=0
i
=20
i++
{
binome
i
}
echo
``
/table
\n
/body
/html
10
Fibonnacci
fibonnacci.php11
html
body
php
function
fibonnacci
{
if
2
return
fmoins1=1
fmoins2=0
for
i=2
i
=
i++
{
f=
fmoins1+
fmoins2
fmoins2=
fmoins1
fmoins1=
f
}
return
f
}
for
i=0
i
50
i++
{
echo
``
i
``
.fibonnacci
i
``
br
/
\n
}
/body
/html
peut
aussi
version
récursive
plus
belle
sans
doute
plus
facile
programmer
beaucoup
moins
efficace
pourquoi
fibonnacci-rec.php12
html
body
php
function
fibonnacci
{
if
2
return
return
fibonnacci
n-1
+fibonnacci
n-2
}
for
i=0
i
20
i++
{
echo
``
i
``
.fibonnacci
i
``
br
/
\n
}
/body
/html
11
Fibonnacci
retour
fibonnacci-retour.php13
html
body
php
function
fibonnacci
{
comme
exercice
précédent
}
11.
http
//grappa.univ-lille3.fr/polys/php/exemples/fibonnacci.php
12.
http
//grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-rec.php
13.
http
//grappa.univ-lille3.fr/polys/php/exemples/fibonnacci-retour.php
69
Chapitre
20
Premiers
exercices
algorithmique
corrigés
or=
sqrt
5
-1
/2
echo
``
table
border=\
border\
tr
th
ordre
/th
th
rapport
/th
echo
``
th
différence
/th
/tr
\n
for
i=0
i
50
i++
{
r=fibonnacci
i
/fibonnacci
i+1
echo
``
tr
td
i
/td
td
r
/td
td
r-
or
``
/td
/tr
\n
}
/body
/html
12
Afficher
cadre
10x10
a.
PRE
cadre-pre.php14
html
body
pre
tt
php
k=
*
MAX=10
for
i=1
i
=
MAX
i++
{
echo
k
}
echo
``
\n
for
i=2
i
MAX
i++
{
echo
k
for
j=2
MAX
j++
{
echo
``
``
}
echo
k
``
\n
}
for
i=1
i
=
MAX
i++
{
echo
k
}
echo
``
\n
/tt
/pre
/body
/html
b.
tableau
cadre-table.php15
html
body
blockquote
table
border=
border
tr
php
k=
*
max=10
for
i=1
i
=
max
i++
{
echo
``
\t
td
k
/td
\n
}
echo
``
/tr
\n
for
i=2
i
max
i++
{
echo
``
tr
\n\t
td
k
/td
\n
for
j=2
max
j++
{
echo
``
\t
td
/td
\n
}
echo
``
\t
td
k
/td
\n
/tr
\n
}
echo
``
tr
\n
for
i=1
i
=
max
i++
{
echo
``
\t
td
k
/td
\n
}
/tr
/table
/blockquote
/body
/html
13
Tableau
additions
compléter
a.
total
fixe
tableauadditionsfixe.php16
body
html
h2
additions
compléter
total
fixe
/h2
table
14.
http
//grappa.univ-lille3.fr/polys/php/exemples/cadre-pre.php
15.
http
//grappa.univ-lille3.fr/polys/php/exemples/cadre-table.php
16.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsfixe.php
70
Chapitre
20
Premiers
exercices
algorithmique
corrigés
php
nombre=10
//
nombre
lignes
total=100
//
total
atteindre
for
i=0
i
nombre
i++
{
connu=rand
1
total
//
nombre
affiché
echo
``
\t
tr
th
n◦
i+1
/td
echo
``
td
align=\
right\
connu
/td
echo
``
td
+
/td
echo
``
td
align=\
center\
_________
=
/td
echo
``
td
align=\
right\
total
/td
/tr
\n
}
/table
/body
/html
b.
total
variable
tableauadditionsvariable.php17
body
html
h2
additions
compléter
total
variable
/h2
table
php
nombre=10
//
nombre
lignes
min=80
//
borne
inférieure
totaux
possibles
max=120
//
borne
supérieure
totaux
possibles
for
i=0
i
nombre
i++
{
total=rand
min
max
connu=rand
1
total
echo
``
\t
tr
th
n◦
i+1
/td
echo
``
td
align=\
right\
connu
/td
echo
``
td
+
/td
echo
``
td
align=\
center\
_________
=
/td
echo
``
td
align=\
right\
total
/td
/tr
\n
}
/table
/body
/html
17.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableauadditionsvariable.php
71
Chapitre
20
Premiers
exercices
algorithmique
corrigés
72
Chapitre
21
Premiers
formulaires
PHP
corrigés
trouverez
énoncés
exercices
Chapitre
7
1
Bonjour
machin
xx
ans
formulaire
traitement-01.html1
html
body
form
method=
get
action=
traitement-01.php
table
tr
td
align=
right
nom
/td
td
input
name=
nom
/
/td
/tr
tr
td
align=
right
âge
/td
td
input
name=
age
/
/td
/tr
tr
td
align=
center
colspan=
2
input
type=
submit
value=
Envoyer
/
/tr
/table
/form
/body
/html
traitement
traitement-01.php2
html
body
php
echo
``
Bonjour
nom
age
ans.\n
/body
/html
2
Montpellier
formulaire
traitement-02.html3
html
body
form
method=
get
action=
traitement-02.php
table
tr
td
align=
right
Distance
/td
td
input
name=
distance
/
/td
/tr
tr
td
align=
right
Heures/Jour
/td
td
input
name=
heures
/
/td
/tr
tr
td
align=
right
Jours
/td
td
input
name=
jours
/
/td
/tr
tr
td
align=
center
colspan=
2
input
type=
submit
value=
Envoyer
/
/tr
/table
/form
/body
/html
traitement
traitement-02.php4
html
body
php
echo
``
bébé
parcouru
distance
km
``
``
raison
heures
heures
jour
``
``
pendant
jours
jours.
br
/
\n
``
vitesse
``
distance/
heures/
jours
km/h.\n
/body
/html
3
Bonjour
Truc
formulaire
traitement-03.html5
html
body
form
method=
get
action=
traitement-03.php
table
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-01.html
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-01.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-02.html
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-02.php
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-03.html
73
Chapitre
21
Premiers
formulaires
PHP
corrigés
tr
td
align=
right
sexe
/td
td
input
name=
sexe
type=
radio
value=
checked=
checked
/
masculin
input
name=
sexe
type=
radio
value=
F
/
féminin
/td
/tr
tr
td
align=
right
nom
/td
td
input
name=
nom
/
/td
/tr
tr
td
align=
center
colspan=
2
input
type=
submit
value=
Envoyer
/
/tr
/table
/form
/body
/html
traitement
traitement-03.php6
html
body
php
if
sexe==
{
echo
``
Bonjour
Monsieur
nom
``
}
else
{
echo
``
Bonjour
Madame
nom
``
}
/body
/html
4
Permis
chasse
formulaire
traitement-04.html7
html
body
form
method=
get
action=
traitement-04.php
table
tr
td
align=
right
poules
/td
td
input
name=
poules
/
/td
/tr
tr
td
align=
right
chiens
/td
td
input
name=
chiens
/
/td
/tr
tr
td
align=
right
vaches
/td
td
input
name=
vaches
/
/td
/tr
tr
td
align=
right
amis
/td
td
input
name=
amis
/
/td
/tr
tr
td
align=
center
colspan=
2
input
type=
submit
value=
envoyer
/
/tr
/table
/form
/body
/html
traitement
traitement-04.php8
html
body
php
echo
``
tué
\n
echo
``
ul
\n
echo
``
li
poules
poules
/li
\n
echo
``
li
chiens
chiens
/li
\n
echo
``
li
vaches
vaches
/li
\n
echo
``
li
amis
amis.
/li
\n
echo
``
/ul
\n
perdu=
poules
*
1+
chiens
*
3+
vaches
*
5+
amis
*
10
echo
``
perdu
``
``
poules
*
1
+
chiens
*
3
+
vaches
*
5
+
amis
*
10=
perdu
points
``
\n
br
/
\n
permis=floor
perdu/100
if
permis
1
{
echo
``
b
permis
encore
valide
attention
/b
\n
}
else
{
echo
``
b
épuisé
permis
permis
devez
payer
``
permis
*
1000
francs.\n
``
/b
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-03.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-04.html
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-04.php
74
Chapitre
21
Premiers
formulaires
PHP
corrigés
}
/body
/html
5
Calculatrice
formulaire
traitement
traitement-05.php9
html
body
liste
déroulante
br
/
form
method=
get
action=
traitement-05.php
input
name=
size=
5
/
select
name=
option
value=
+
+
/option
option
value=
-
-
/option
option
value=
*
*
/option
option
value=
/
/
/option
/select
input
name=
b
size=
5
/
br
/
input
type=
submit
value=
envoyer
/
/form
hr
/
-
boutons
radios
br
/
form
method=
get
action=
traitement-05.php
table
tr
td
input
name=
size=
5
/
/td
td
input
type=
radio
name=
value=
+
checked=
checked
/
+
br
/
input
type=
radio
name=
value=
-
/
-
br
/
input
type=
radio
name=
value=
*
/
*
br
/
input
type=
radio
name=
value=
/
/
/
/td
td
input
name=
b
size=
5
/td
/tr
tr
td
colspan=
3
align=
center
input
type=
submit
value=
envoyer
/
/td
/table
/form
hr
/
-
php
if
isset
{
echo
``
résultat
calcul
précédent
b=
if
par==
+
{
echo
a+
b
}
elseif
par==
-
{
echo
a-
b
}
elseif
par==
*
{
echo
*
b
}
else
{
echo
a/
b
}
}
/body
/html
6
Table
multiplication
demande
traitement-06.php10
html
head
style
type=
text/css
td
{
text-align
right
}
/style
/head
body
form
action=
traitement-06.php
choisissez
table
select
name=
table
php
for
i=1
i
=20
i++
{
echo
``
option
if
table==
i
echo
``
selected=\
selected\
9.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-05.php
10.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-06.php
75
Chapitre
21
Premiers
formulaires
PHP
corrigés
echo
``
i
/option
\n
}
/select
br
/
choisissez
nombre
lignes
select
name=
lignes
php
for
i=10
i
=20
i++
{
echo
``
option
if
lignes==
i
echo
``
selected=\
selected\
echo
``
i
/option
\n
}
/select
br
/
input
type=
submit
value=
afficher
table
choisie
/
/form
p
/
php
if
isset
table
{
//
utilisé
formulaire
echo
``
table
\n
for
l=0
=
lignes
l++
{
//
afficher
lignes
table
echo
``
tr
td
/td
td
×
/td
td
table
/td
td
=
/td
td
*
table
``
/td
/tr
\n
}
echo
``
/table
\n
}
/body
/html
7
Mots
passe
traitement-07.php11
html
body
form
action=
exocontr.php
tapez
mot
passe
input
type=
password
name=
pass
/
input
type=
submit
/
/form
php
if
isset
pass
{
if
pass==
{
//
premier
mot
passe
autorisé
echo
``
h2
bienvenue
utilisateur
principal.
/h2
}
elseif
pass==
deux
{
//
deuxième
mot
passe
autorisé
echo
``
h4
bienvenue
utilisateur
base.
/h4
}
else
{
//
mot
passe
non
reconnu
echo
``
h1
style=\
color
red
background
yellow
text-align
center
\
``
accès
interdit
/h1
}
}
/body
/html
8
Compléter
additions
addition.php12
html
body
remplis
case
bon
nombre
calcul
correct
php
ok=0
if
isset
{
echo
``
viens
essayer
a+
c=
b.
br
/
\n
if
a+
c==
b
{
echo
``
exact
bravo
``
ok=1
}
else
{
echo
``
faux
essaie
encore
``
}
}
else
{
b=rand
50,500
a=rand
0
b
}
if
ok==0
{
form
method=
post
php
echo
+
input
size=
4
name=
/
=
php
echo
b
11.
http
//grappa.univ-lille3.fr/polys/php/exemples/traitement-07.php
12.
http
//grappa.univ-lille3.fr/polys/php/exemples/addition.php
76
Chapitre
21
Premiers
formulaires
PHP
corrigés
input
type=
submit
value=
verifier
/
input
type=
hidden
name=
value=
php
echo
/
input
type=
hidden
name=
b
value=
php
echo
b
/
/form
php
}
echo
``
form
method=\
post\
``
input
type=\
submit\
value=\
recommencer\
/
/form
/body
/html
9
ordinateur
choisit
devinez
devinette01.php13
html
body
h1
Devinette
n◦1
/h1
h2
devez
deviner
nombre
programme
choisi
/h2
php
//
jeu
commencé
if
isset
limite
{
//
première
fois
if
isset
guess
{
//
choisir
nombre
deviner
guess=rand
0
limite
//
premier
essai
nbessai=1
}
echo
``
nombre
choisi
entre
0
limite.
br
/
\n
//
proposition
traiter
if
isset
proposition
{
proposition=
proposition
*
1
echo
``
venez
proposer
proposition
``
//
joueur
trouvé
if
proposition==
guess
{
echo
``
\n
h3
Bravo
Trouvé
``
nbessai-1
essais
/h3
\n
echo
``
form
method=\
post\
\n
echo
``
input
type=\
submit\
value=\
Recommencer\
/
\n
echo
``
/form
\n
}
else
{
//
proposition
=
guess
trouvé
if
proposition
guess
{
//
proposition
trop
petite
echo
``
Trop
petit.
p
/
\n
}
if
proposition
guess
{
//
proposition
trop
grande
echo
``
Trop
grand.
p
/
\n
}
}
//
fin
if
proposition==
guess
}
if
isset
guess
&
&
proposition
=
guess
{
echo
``
``
nbessai.
sup
nbessai==1
``
er
ème
``
/sup
essai.
p
/
\n
table
tr
td
form
method=
post
proposez-vous
input
name=
proposition
size=
4
/
input
type=
hidden
name=
guess
value=
php
echo
guess
/
input
type=
hidden
name=
limite
value=
php
echo
limite
/
input
type=
hidden
name=
nbessai
value=
php
echo
nbessai+1
/
input
type=
submit
value=
Tester
proposition
/
/form
/td
td
form
method=
post
input
type=
submit
value=
Abandonner
/
/form
/td
/tr
/table
php
}
//
fin
if
isset
guess
&
&
proposition
=
guess
}
else
{
//
commence
jeu
form
method=
post
Choisissez
limite
difficulté
select
name=
limite
option
selected=
selected
10
/option
13.
http
//grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
77
Chapitre
21
Premiers
formulaires
PHP
corrigés
option
100
/option
option
1000
/option
option
10000
/option
/select
input
type
=
submit
value=
commencer
/
/form
php
}
/body
/html
10
choisissez
ordinateur
devine
devinette01.php14
html
body
h1
Devinette
n◦2
/h1
h2
programme
va
deviner
nombre
choisi
/h2
php
//
première
exécution
if
isset
_POST
``
min
{
//
demander
selectionner
limite
Sélectionnez
limite
supérieure
puis
quand
choisi
nombre
non
nul
dois
deviner
sans
dire
cliquez
em
Commencer
/em
p
/
form
method=
post
Limite
supérieure
select
name=
max
option
selected=
selected
10
option
100
/option
option
1000
/option
option
10000
/option
/select
input
type=
hidden
name=
min
value=
0
/
input
type=
hidden
name=
nbessai
value=
0
/
input
type
=
submit
value=
Commencer
/
/form
php
}
else
{
nbessai=
_GET
``
nbessai
+1
if
_POST
``
result
==
=
{
//
nombre
trouvé
echo
``
h3
Gagné
``
_POST
``
nbessai
essais.
/h3
\n
}
elseif
_POST
``
result
==
+
{
//
trop
grand
réduit
borne
supérieure
max=
_POST
``
test
}
elseif
_POST
``
result
==
-
{
//
trop
petit
réduit
borne
inférieure
min=
_POST
``
test
}
//
trouvé
if
_POST
``
result
=
=
{
if
_POST
``
min==
_POST
``
max
{
//
bornes
égales
triche
echo
``
h3
triché
/h3
\n
}
else
{
//
nouvelle
proposition
test=floor
_POST
``
min
+
_POST
``
max
/2
if
_POST
``
max
-
_POST
``
min
==1
{
test=
_POST
``
max
}
echo
``
table
tr
td
align=\
center\
colspan=\
3\
echo
``
``
_POST
``
nbessai
sup
_POST
``
nbessai
==1
er
ème
``
/sup
essai
echo
``
nombre
b
_POST
``
test
/b
/td
/tr
\n
td
form
method=
post
input
type=
hidden
name=
result
value=
-
/
input
type=
hidden
name=
test
value=
php
echo
_POST
``
test
/
input
type=
hidden
name=
min
value=
php
echo
_POST
``
min
/
input
type=
hidden
name=
max
value=
php
echo
_POST
``
max
/
input
type=
hidden
name=
nbessai
value=
php
echo
_POST
``
nbessai
/
input
type=
submit
value=
Trop
petit
/
/form
/td
td
form
method=
post
14.
http
//grappa.univ-lille3.fr/polys/php/exemples/devinette01.php
78
Chapitre
21
Premiers
formulaires
PHP
corrigés
input
type=
hidden
name=
result
value=
=
/
input
type=
hidden
name=
test
value=
php
echo
_POST
``
test
/
input
type=
hidden
name=
min
value=
php
echo
_POST
``
min
/
input
type=
hidden
name=
max
value=
php
echo
_POST
``
max
/
input
type=
hidden
name=
nbessai
value=
php
echo
_POST
``
nbessai
/
input
type=
submit
value=
G
G
É
``
/
/form
/td
td
form
method=
post
input
type=
hidden
name=
test
value=
php
echo
_POST
``
test
/
input
type=
hidden
name=
result
value=
+
/
input
type=
hidden
name=
min
value=
php
echo
_POST
``
min
/
input
type=
hidden
name=
max
value=
php
echo
_POST
``
max
/
input
type=
hidden
name=
nbessai
value=
php
echo
_POST
``
nbessai
/
input
type=
submit
value=
Trop
grand
/
/form
/td
/tr
/table
php
}
}
}
if
isset
_POST
``
min
{
form
method=
post
input
type=
submit
value=
Recommencer
/
/form
php
}
/body
/html
11
pipotron
pipotron.php15
html
body
php
if
isset
_POST
``
pipo1
{
echo
stripslashes
``
hr
/
_POST
``
pipo1
``
_POST
``
pipo2
``
_POST
``
pipo3
``
_POST
``
pipo4
_POST
``
pipo5
``
_POST
``
pipo6
``
_POST
``
pipo7
_POST
``
pipo8
``
hr
/
}
form
method=
post
select
name=
pipo1
option
/option
option
Considérant
/option
option
mène
/option
option
égard
/option
option
Vu
/option
option
concerne
/option
option
cas
particulier
/option
option
Quelle
/option
option
fait
/option
option
Tant
durera
/option
/select
select
name=
pipo2
option
situation
/option
option
conjoncture
/option
option
crise
/option
option
inertie
/option
option
impasse
/option
option
extrémité
/option
option
dégradation
moeurs
/option
option
sinistrose
/option
option
dualité
situation
/option
option
baisse
confiance
/option
/select
select
name=
pipo3
option
présente
/option
option
actuelle
/option
option
occupe
/option
15.
http
//grappa.univ-lille3.fr/polys/php/exemples/pipotron.php
79
Chapitre
21
Premiers
formulaires
PHP
corrigés
option
nôtre
/option
option
induite
/option
option
conjoncturelle
/option
option
contemporaine
/option
option
fin
siècle
/option
option
société
/option
option
derniers
temps
/option
/select
select
name=
pipo4
option
convient
/option
option
faut
/option
option
doit
/option
option
préférable
/option
option
intéressant
/option
option
faut
négliger
/option
option
peut
passer
/option
option
nécessaire
/option
option
bon
/option
option
faut
toute
urgence
/option
/select
select
name=
pipo5
option
étudier
/option
option
examiner
/option
option
négliger
/option
option
prendre
considération
/option
option
anticiper
/option
option
imaginer
/option
option
préoccuper
/option
option
intéresser
/option
option
avoir
esprit
/option
option
remémorer
/option
/select
select
name=
pipo6
option
toutes
/option
option
chacune
/option
option
majorité
/option
option
toutes
/option
option
ensemble
/option
option
somme
/option
option
totalité
/option
option
globalité
/option
option
toutes
/option
option
certaines
/option
/select
select
name=
pipo7
option
solutions
/option
option
issues
/option
option
problématiques
/option
option
voies
/option
option
alternatives
/option
option
solutions
/option
option
issues
/option
option
problématiques
/option
option
voies
/option
option
alternatives
/option
/select
select
name=
pipo8
option
envisageables
/option
option
possibles
/option
option
déjà
possession
/option
option
offrant
/option
option
bon
sens
/option
option
envisageables
/option
option
possibles
/option
option
déjà
possession
/option
option
offrant
/option
option
bon
sens
/option
/select
input
type=
submit
/
/form
/body
/html
80
Chapitre
22
Chaînes
caractères
corrigé
trouverez
énoncé
exercice
Chapitre
8.
identite.php1
html
body
h2
premiers
essais
contrôle
identité
/h2
php
if
trim
strtolower
nom
==trim
strtolower
``
Atte
&
&
trim
strtolower
prenom
==trim
strtolower
``
Tom
&
&
trim
strtolower
password
==trim
strtolower
``
Rouge
{
echo
``
Bienvenue
chez
Tom
Atte
br
/
\n
}
else
{
//
sortie
provisoire
mode
php
écrire
texte
html
pur
hr
/
Veuillez
identifier
SVP
p
/
form
method=
post
action=
identite.php
/
Nom
input
name=
nom
/
br
/
Prénom
input
name=
prenom
/
br
/
Mot
passe
input
type=
password
name=
password
/
br
/
input
type=
submit
/
br
/
/form
hr
/
php
//
retour
mode
php
fermer
``
else
}
/body
/html
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/identite.php
81
Chapitre
22
Chaînes
caractères
corrigé
82
Chapitre
23
Exercices
tableaux
corrigés
trouverez
énoncés
exercices
Chapitre
9
1
Écrire
programme
lit
fichier
construire
page
web
contenant
liste
liens
hypertextes
tableau-06.php1
html
head
title
Utilisation
tableaux-6
/title
/head
body
ul
php
liens=file
``
tableau-06.txt
for
i=0
i
count
liens
i++
{
echo
``
li
href=\
liens
i
\
liens
i
``
/a
/li
\n
}
/ul
/body
/html
2
exercice
fois
chaque
ligne
comprend
aussi
description
site
pointé
sépara-
tion
assuré
chaîne
``
*
*
tableau-07.php2
html
body
ul
php
liens=file
``
tableau-07.txt
for
i=0
i
count
liens
i++
{
parties=explode
``
*
*
liens
i
echo
``
li
href=\
parties
0
\
parties
1
``
/a
/li
\n
}
/ul
/body
/html
3
exercice
fois
chaque
description
adresse
correspondante
deux
lignes
consécutives
tableau-08.php3
html
body
ul
php
liens=file
``
tableau-08.txt
for
i=0
i
count
liens
i=
i+2
{
echo
``
li
href=\
liens
i+1
\
liens
i
``
/a
/li
\n
}
/ul
/body
/html
4
donne
liste
personnes
chaque
ligne
composée
ordre
identifiant
nombre
prénom
nom
mot
passe
Écrire
page
web
donne
sélectionner
personnes
affiche
ensuite
mot
passe
tableau-09.php4
html
body
php
personnes=file
``
tableau-09.txt
for
i=0
i
count
personnes
i++
{
parties=explode
``
personnes
i
code=
parties
0
prenom
code
=
parties
1
nom
code
=
parties
2
password
code
=
parties
3
}
form
action=
tableau-09.php
method=
post
select
name=
php
reset
nom
while
list
code
=each
nom
{
echo
``
option
value=\
code\
prenom
code
``
.strtoupper
``
/option
\n
}
/select
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-06.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-07.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-08.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/tableau-09.php
83
Chapitre
23
Exercices
tableaux
corrigés
input
type=
submit
value=
Quel
mot
passe
/
/form
php
if
isset
{
echo
``
br
/
hr
/
mot
passe
``
prenom
``
.strtoupper
nom
``
password
}
/body
/html
84
Chapitre
24
Exercices
fichiers
corrigés
trouverez
énoncés
exercices
Chapitre
19
1.
index.php1
page
accueil
agit
fait
page
HTML
pur
sans
PHP
html
body
h1
Premier
projet
Licence
AES
/h1
h2
Accueil
/h2
ul
li
href=
liste.php
Liste
/a
contacts
autre
href=
liste2.php
présentation
/a
contacts
/li
li
Saisir
href=
saisie.php
nouveau
contact
/a
/li
/ul
/
body
/HTML
2.
liste.php2
liste
contacts
html
body
h1
Premier
projet
Licence
AES
/h1
h2
Liste
contacts
/h2
ul
php
//
lecture
fichier
f=file
``
liste.txt
//
trier
nom
sort
f
//
parcours
liste
for
i=0
i
count
f
i++
{
//
découpage
1
ligne
suivant
``
l=explode
``
f
i
//
affichage
après
découpage
echo
``
li
Nom
0
br
/
Prénom
1
br
/
Téléphone
2
\n
}
/ul
href=
index.php
accueil
/a
/
body
/html
3.
liste2.php3
autre
liste
contacts
html
body
h1
Premier
projet
Licence
AES
/h1
h2
Liste
contacts
/h2
table
border=
border
tr
th
Nom
/th
th
Prénom
/th
th
Téléphone
/th
/tr
php
//
lecture
fichier
f=file
``
liste.txt
//
trier
nom
sort
f
//
parcours
liste
for
i=0
i
count
f
i++
{
//
découpage
1
ligne
suivant
``
l=explode
``
f
i
//
affichage
après
découpage
echo
``
tr
td
0
/td
td
1
/td
td
2
/td
/tr
\n
}
/table
href=
index.php
accueil
/a
/
body
/html
4.
saisie.php4
formulaire
saisie
agit
fait
page
HTML
pur
sans
PHP
html
body
h1
Premier
projet
Licence
AES
/h1
h2
Saisie
nouveau
contact
/h2
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/index.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/liste.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/liste2.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/saisie.php
85
Chapitre
24
Exercices
fichiers
corrigés
form
action=
enregistrer.php
Nom
input
name=
nom
/
br
/
Prénom
input
name=
prenom
/
br
/
Téléphone
input
name=
telephone
/
br
/
input
type=
submit
/
/form
href=
index.php
accueil
/a
/
body
/html
5.
enregistrer.php5
Enregistrer
nouveau
contact
html
body
h1
Premier
projet
Licence
AES
/h1
h2
Enregistrement
nouveau
contact
/h2
php
//
ouverture
fichier
ajout
fp=fopen
``
liste.txt
//
écriture
nouvelle
ligne
fputs
fp
nom
prenom
telephone\n
//
fermeture
fichier
fclose
fp
//
Affichage
vérification
echo
``
nouveau
contact
enregistré
\n
``
ul
/li
\n
``
li
Nom
nom
/li
\n
``
li
Prénom
prenom
/li
\n
``
li
Téléphone
telephone
/li
\n
``
/ul
\n
href=
index.php
accueil
/a
/
body
/html
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/enregistrer.php
86
Chapitre
25
Exploration
répertoire
corrigés
trouverez
énoncés
exercices
Chapitre
17
1.
simple.php1
html
body
h2
affiche
images
trouvées
/h2
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jpg
{
echo
``
img
src=\
file\
/
\n
}
}
closedir
dir
/body
/html
2.
thumb.php2
html
body
h2
affiche
onglets
font
liens
vers
vraies
images
/h2
php
dir
=
opendir
``
mini
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jpg
{
echo
``
href=\
file\
img
src=\
mini/
file\
/
/a
\n
}
}
closedir
dir
/body
/html
3.
thumbplus.php3
html
body
h2
affiche
onglets
font
liens
vers
pages
contenant
vraies
images
cadre
/h2
php
dir
=
opendir
``
mini
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jpg
{
echo
``
href=\
image.php
image=
file\
``
img
src=\
mini/
file\
/
/a
\n
}
}
closedir
dir
/body
/html
4.
parfait.php4
html
body
h2
affiche
onglets
tableau
régulier
font
liens
vers
pages
contenant
vraies
images
cadre
/h2
table
border=
border
php
nb=4
i=0
dir
=
opendir
``
mini
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jpg
{
if
i==0
{
echo
``
TR
}
echo
``
td
href=\
image.php
image=
file\
``
img
src=\
mini/
file\
/
/a
/td
\n
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/simple.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/thumb.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/thumbplus.php
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/parfait.php
87
Chapitre
25
Exploration
répertoire
corrigés
i++
if
i
=
nb
{
echo
``
/tr
\n
i=0
}
}
}
closedir
dir
/table
/body
/html
88
Chapitre
26
News
corrigé
trouverez
énoncés
exercices
Chapitre
18
26.1
Accueil
index.php1
html
body
h1
News
/h1
h2
Menu
/h2
ul
li
liste
href=
listenoms.php
noms
/a
fichiers
nouvelles
/li
li
liste
href=
listeliens.php
liens
/a
vers
fichiers
nouvelles
/li
li
affichage
href=
affichetout.php
toutes
nouvelles
/a
/li
li
affichage
href=
affichetitre.php
titres
/a
nouvelles
/li
li
affichage
href=
affichetitrelien.php
titres
faisant
/a
vers
nouvelles
/li
li
affichage
href=
affichetout_br.php
toutes
nouvelles
proprement
/a
/li
li
href=
sujet.php
choix
sujet
/a
/li
/ul
/body
/html
26.2
Liste
noms
fichiers
nouvelles
listenoms.php2
html
body
h1
News
/h1
h2
Liste
noms
fichiers
nouvelles
/h2
ul
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jnl
{
echo
``
li
file
/li
\n
}
}
closedir
dir
/ul
/body
/html
26.3
Liste
liens
vers
fichiers
nouvelles
listeliens.php3
html
body
h1
News
/h1
h2
Liste
liens
vers
fichiers
nouvelles
/h2
ul
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
1.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/index.php
2.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/listenoms.php
3.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/listeliens.php
89
Chapitre
26
News
corrigé
if
substr
file
-4
==
.jnl
{
echo
``
li
href=\
unenouvelle.php
f=
file\
file
/a
/li
\n
}
}
closedir
dir
/ul
/body
/html
page
nécessite
existence
page
unenouvelle.php
permet
afficher
contenu
nou-
velle
html
body
php
require
f
/body
/html
26.4
Affichage
toutes
nouvelles
affichetout.php4
html
body
h1
News
/h1
h2
Affichage
toutes
nouvelles
/h2
hr
/
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jnl
{
f=file
file
for
i=0
i
count
f
i++
{
echo
f
i
}
echo
``
hr
/
}
}
closedir
dir
/ul
/body
/html
26.5
Affichage
titres
nouvelles
affichetitre.php5
html
body
h1
News
/h1
h2
Affichage
titres
nouvelles
/h2
ul
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jnl
{
f=file
file
echo
``
li
f
0
/li
\n
}
}
closedir
dir
/ul
/body
/html
4.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetout.php
5.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetitre.php
90
Chapitre
26
News
corrigé
26.6
Affichage
titres
faisant
lien
vers
nouvelles
affichetitrelien.php6
html
body
h1
News
/h1
h2
Affichage
titres
faisant
lien
vers
nouvelles
/h2
ul
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jnl
{
f=file
file
echo
``
li
href=\
file\
f
0
/a
/li
\n
}
}
closedir
dir
/ul
/body
/html
page
nécessite
existence
unenouvelle.php
26.7
Affichage
toutes
nouvelles
proprement
affichetout_br.php7
html
body
h1
News
/h1
h2
Affichage
toutes
nouvelles
proprement
/h2
hr
/
php
dir
=
opendir
``
``
while
file
=
readdir
dir
{
if
substr
file
-4
==
.jnl
{
f=file
file
echo
``
h3
f
0
/h3
\n
for
i=1
i
count
f
i++
{
echo
f
i
if
trim
f
i
==
{
echo
``
br
/
}
}
echo
``
hr
/
}
}
closedir
dir
/body
/html
6.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetitrelien.php
7.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/affichetout_br.php
91
Chapitre
26
News
corrigé
26.8
Choix
sujet
sujet.php8
html
body
h1
News
/h1
h2
Choix
sujet
/h2
form
action=
sujet2.php
select
name=
sujet
option
value=
sci
Sciences
/option
option
value=
inf
informatique
/option
option
value=
msc
Divers
/option
/select
input
type=
submit
/form
/body
/html
8.
http
//grappa.univ-lille3.fr/polys/php/exemples/news/sujet.php
92
IV
Études
cas
Chapitre
27
Études
cas
partie
contient
quelques
études
cas
peu
près
réalistes
réels
projets
demandés
étudiants
maîtrise
AES-TEG
2ème
année
IUP
IIES
3ème
année
licence
MIASHS
plupart
basés
cas
réels
plus
souvent
modifiés
but
pédagogique
simplifier
situation
vraiment
trop
complexe
contraire
complexifier
situation
peu
trop
simpliste
exercice
application
cours
Aucun
corrigé
projets
disponible
inutile
réclamer
95
Chapitre
27
Études
cas
96
Chapitre
28
Projet
Disques
2009
Licence
MIASHS
3ème
année
2009-2010
pouvez
consulter
pages
originales1
web
28.1
Présentation
allez
devoir
créer
site
web
gére
contenu
discothèque
manipulerez
infor-
mations
comme
nom
disques
leurs
années
parution
artistes
textes
chansons
etc
informations
accessibles
autres
personnes
devrez
aussi
gérer
droits
accès
site
web
28.1.1
Fonctionnalités
générales
•
Liste
disques
•
Liste
chansons
chaque
disque
•
artiste/groupe
chaque
disque
possibilité
préciser
artistes/groupes
particuliers
chaque
chanson
compilations
duos
etc.
•
Genres
musicaux
langue
chaque
artiste/groupe
langue
chaque
chanson
•
Auteur
chansons
•
Paroles
chansons
•
Appartenance
artiste
groupe
28.1.2
Fonctionnalités
consultation
•
Obtenir
liste
disques
caractéristiques
liste
chansons
•
Obtenir
liste
artistes
•
Rechercher
chanson
•
Avoir
accès
quelques
statistiques
base
28.1.3
Modification
données
accès
données
sensibles
indispensable
fonctionnalités
suivantes
protégées
authentification
utilisateur
plus
fonctionnalités
consultation
voir
ci-dessus
peuvent
être
protégées
mot
passe
désirez
site
alors
accès
exclusivement
privé
obligatoire
distinguera
deux
niveaux
autorisation
appelera
fort
faible
suite
28.1.3.1
Niveau
faible
niveau
accessibles
données
sensibles
modifiées
informations
non
vitales
plupart
membres
confiance
accès
niveau
•
Consultations
paroles
chansons
accés
privé
nécessaire
raisons
respect
droit
auteur
•
Insertion
information
base
créer
artiste
genre
musical
disque
chanson
etc.
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2009-2010/bd/projetdisques/
97
Chapitre
28
Projet
Disques
2009
28.1.3.2
Niveau
fort
niveau
modifiées
informations
vitales
fonctionnement
site
Seules
quelques
personnes
responsables
site
accès
niveau
•
Gérer
utilisateurs
leurs
droits
créer
modifier
supprimer
•
Modifier
supprimer
données
existantes
paroles
chanson
orthographe
noms
etc.
28.2
base
données
analyse
présentée
ici
contenterons
donner
structure
base
28.2.1
tables
•
table
artiste
CREATE
TABLE
artiste
art_num
INTEGER
NOT
NULL
PRIMARY
KEY
art_prenom
CHARACTER
VARYING
art_nom
CHARACTER
VARYING
art_groupe
CHARACTER
VARYING
art_modif
TIMESTAMP
WITHOUT
TIME
ZONE
DEFAULT
CURRENT_TIMESTAMP
•
table
etat
CREATE
TABLE
etat
eta_num
INTEGER
NOT
NULL
PRIMARY
KEY
eta_nom
CHARACTER
VARYING
•
table
genre
CREATE
TABLE
genre
gen_num
INTEGER
NOT
NULL
PRIMARY
KEY
gen_nom
CHARACTER
VARYING
gen_modif
TIMESTAMP
WITHOUT
TIME
ZONE
DEFAULT
CURRENT_TIMESTAMP
•
table
droits
CREATE
TABLE
droits
dro_num
INTEGER
NOT
NULL
PRIMARY
KEY
dro_nom
CHARACTER
VARYING
dro_niveau
INTEGER
•
table
langue
CREATE
TABLE
langue
lan_num
CHARACTER
VARYING
NOT
NULL
PRIMARY
KEY
lan_nom
CHARACTER
VARYING
•
table
langueartiste
CREATE
TABLE
langueartiste
laa_langue
CHARACTER
VARYING
NOT
NULL
REFERENCES
langue
lan_num
laa_artiste
INTEGER
NOT
NULL
REFERENCES
artiste
art_num
laa_maternelle
BOOLEAN
DEFAULT
true
PRIMARY
KEY
laa_langue
laa_artiste
•
table
autorisations
CREATE
TABLE
autorisations
aut_login
CHARACTER
VARYING
NOT
NULL
PRIMARY
KEY
aut_motdepasse
CHARACTER
VARYING
aut_nom
CHARACTER
VARYING
aut_prenom
CHARACTER
VARYING
aut_droits
INTEGER
REFERENCES
droits
dro_num
•
table
chanson
CREATE
TABLE
chanson
cha_num
INTEGER
NOT
NULL
PRIMARY
KEY
cha_titre
CHARACTER
VARYING
98
Chapitre
28
Projet
Disques
2009
cha_genre
INTEGER
REFERENCES
genre
gen_num
cha_texte
CHARACTER
VARYING
cha_libre
BOOLEAN
cha_modif
TIMESTAMP
WITHOUT
TIME
ZONE
DEFAULT
CURRENT_TIMESTAMP
•
table
languechanson
CREATE
TABLE
languechanson
lac_langue
CHARACTER
VARYING
NOT
NULL
REFERENCES
langue
lan_num
lac_chanson
INTEGER
NOT
NULL
REFERENCES
chanson
cha_num
lac_principale
BOOLEAN
DEFAULT
true
NOT
NULL
PRIMARY
KEY
lac_langue
lac_chanson
lac_principale
•
table
membre
CREATE
TABLE
membre
mem_membre
INTEGER
NOT
NULL
REFERENCES
artiste
art_num
mem_groupe
INTEGER
NOT
NULL
REFERENCES
artiste
art_num
mem_debut
CHARACTER
VARYING
NOT
NULL
mem_fin
CHARACTER
VARYING
NOT
NULL
PRIMARY
KEY
mem_membre
mem_groupe
mem_debut
mem_fin
•
table
disque
CREATE
TABLE
disque
dis_num
INTEGER
NOT
NULL
PRIMARY
KEY
dis_titre
CHARACTER
VARYING
dis_artiste
INTEGER
REFERENCES
artiste
art_num
dis_annee
CHARACTER
VARYING
dis_cddb
CHARACTER
VARYING
dis_anneeachat
CHARACTER
VARYING
dis_prixachat
NUMERIC
8,2
dis_etat
INTEGER
REFERENCES
etat
eta_num
dis_perdu
BOOLEAN
DEFAULT
false
dis_modif
TIMESTAMP
WITHOUT
TIME
ZONE
DEFAULT
CURRENT_TIMESTAMP
•
table
interprete
CREATE
TABLE
interprete
int_artiste
INTEGER
NOT
NULL
int_artiste
REFERENCES
artiste
art_num
int_chanson
INTEGER
NOT
NULL
REFERENCES
chanson
cha_num
int_disque
INTEGER
NOT
NULL
REFERENCES
disque
dis_num
int_numero
INTEGER
NOT
NULL
PRIMARY
KEY
int_artiste
int_chanson
int_disque
int_numero
•
table
ecrit
CREATE
TABLE
ecrit
ecr_artiste
INTEGER
NOT
NULL
REFERENCES
artiste
art_num
ecr_chanson
INTEGER
NOT
NULL
REFERENCES
chanson
cha_num
PRIMARY
KEY
ecr_artiste
ecr_chanson
99
Chapitre
28
Projet
Disques
2009
28.2.2
MLD
100
Chapitre
29
Projet
Inscriptions
Licence
MIASHS
3ème
année
2008-2009
pouvez
consulter
pages
originales1
web
29.1
Présentation
allez
travailler
Lille
3
Lille
3
Numérique2
organise
stages
familiarisation
étudiants
ENT3
faut
application
permette
inscription
étudiants
Lille
3
créneaux
horaires
précis
allez
venir
aide
allez
réaliser
application
29.1.1
Fonctionnalités
générales
•
calendrier
créneaux
horaires
lesquels
peut
cliquer
•
Possibilité
inscrire
créneau
choix
sans
authentification
nécessaire
nom
prénom
UFR
formation
numéro
étudiant
•
possibilité
suppression
inscription
étudiant
étudiant
peut
inscrire
seul
créneau
horaire
cas
erreur
devra
adresser
gestionnaire
adresse
figurera
site
Vérification
numéro
étudiant
étudiant
déjà
inscrit
créneau
éviter
inscriptions
multiples
•
Notification
calendrier
créneau
complet
29.1.2
Fonctionnalités
calendrier
•
Étendue
calendrier
paramétrée
automatiquement
fonction
séances
existantes
•
créneau
ferme
automatiquement
dès
seuil
atteint
seuil
paramétrable
gestionnaire
29.1.3
Gestion
base
•
Authentification
indispensable
•
Créer
modifier
supprimer
séance
•
Lister
tous
créneaux
et/ou
imprimer
•
Lister
tous
inscriptions
et/ou
imprimer
•
Pouvoir
fermer
créneau
éventuellement
ouvrir
nouveau
mention
groupe
complet
appa-
raît
calendrier
•
Modifier
supprimer
inscription
étudiant
créneau
•
Pouvoir
facilement
vider
complètement
créneau
voire
tous
créneaux
utilisation
ultérieure
base
•
Visualiser
liste
tous
créneaux
tri
créneau
/
nom
/
numéro
étudiant
/
année
/
UFR
•
Possibilité
faire
export
tableur
29.2
base
données
analyse
présentée
ici
contenterons
donner
structure
base
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2008-2009/technoweb/projetinscription/
2.
http
//www.univ-lille3.fr/fr/lille3-numerique/
3.
http
//www.univ-lille3.fr/fr/lille3-numerique/ent/
101
Chapitre
29
Projet
Inscriptions
29.2.1
MLD
29.2.2
tables
table
ufr
contient
renseignements
UFR
CREATE
TABLE
ufr
ufr_num
INTEGER
PRIMARY
KEY
ufr_nom
VARCHAR
40
NOT
NULL
table
moniteur
contient
renseignements
moniteurs
encadrent
séances
102
Chapitre
29
Projet
Inscriptions
CREATE
TABLE
moniteur
mon_num
INTEGER
PRIMARY
KEY
mon_nom
VARCHAR
40
NOT
NULL
mon_prenom
VARCHAR
40
table
salle
contient
renseignements
salles
déroulent
séances
CREATE
TABLE
salle
sal_num
INTEGER
PRIMARY
KEY
sal_nom
VARCHAR
40
NOT
NULL
sal_taille
INTEGER
table
niveau
contient
renseignements
niveaux
études
étudiants
licence
1ère
année
etc.
CREATE
TABLE
niveau
niv_num
INTEGER
PRIMARY
KEY
niv_nom
VARCHAR
40
NOT
NULL
niv_ordre
INTEGER
NOT
NULL
table
seance
contient
renseignements
séances
CREATE
TABLE
seance
sea_num
INTEGER
PRIMARY
KEY
sea_jour
INTEGER
NOT
NULL
sea_mois
INTEGER
NOT
NULL
sea_annee
INTEGER
NOT
NULL
sea_debut_h
INTEGER
NOT
NULL
sea_debut_m
INTEGER
NOT
NULL
sea_fin_h
INTEGER
NOT
NULL
sea_fin_m
INTEGER
NOT
NULL
sea_moniteur
INTEGER
REFERENCES
moniteur
mon_num
sea_salle
INTEGER
REFERENCES
salle
sal_num
sea_remarque
VARCHAR
200
DEFAULT
”
table
ville
contient
renseignements
villes
CREATE
TABLE
ville
vil_cp
VARCHAR
10
PRIMARY
KEY
vil_nom
VARCHAR
40
NOT
NULL
table
typevoirie
contient
renseignements
types
voiries
rue
boulevard
avenue
etc.
CREATE
TABLE
typevoirie
tvo_num
INTEGER
PRIMARY
KEY
tvo_nom
VARCHAR
40
NOT
NULL
table
voirie
contient
renseignements
voiries
CREATE
TABLE
voirie
voi_num
INTEGER
PRIMARY
KEY
voi_type
INTEGER
NOT
NULL
REFERENCES
typevoirie
tvo_num
voi_nom
VARCHAR
100
NOT
NULL
voi_cp
VARCHAR
6
NOT
NULL
REFERENCES
ville
vil_cp
table
etudiant
contient
renseignements
étudiants
CREATE
TABLE
etudiant
etu_carte
VARCHAR
PRIMARY
KEY
etu_nom
VARCHAR
40
NOT
NULL
etu_prenom
VARCHAR
40
etu_ufr
INTEGER
REFERENCES
ufr
ufr_num
etu_niveau
INTEGER
REFERENCES
niveau
niv_num
etu_adressenum
VARCHAR
10
103
Chapitre
29
Projet
Inscriptions
etu_voirie
INTEGER
NOT
NULL
REFERENCES
voirie
voi_num
etu_email
VARCHAR
40
etu_telfixe
VARCHAR
20
etu_telmobile
VARCHAR
20
table
inscription
contient
renseignements
inscriptions
étudiants
séances
CREATE
TABLE
inscription
ins_etudiant
VARCHAR
20
REFERENCES
etudiant
etu_carte
ins_seance
INTEGER
REFERENCES
seance
sea_num
PRIMARY
KEY
ins_etudiant
ins_seance
table
parametre
contient
renseignements
différents
paramètres
application
mots
passe
etc.
CREATE
TABLE
parametre
par_num
INTEGER
PRIMARY
KEY
par_nom
VARCHAR
20
par_texte
VARCHAR
100
par_valeur
VARCHAR
200
par_ordre
INTEGER
104
Chapitre
30
Projet
Teniraq
Licence
MIASHS
3ème
année
2007-2008
pouvez
consulter
pages
originales1
web
30.1
Présentation
club
tennis
TENIRAQ
RAQ
comme
raquette
utilise
base
données
administrer
fonc-
tionnement
adhésions
entrées
locaux
réservations
3
courts
deux
courts
couverts
B
court
extérieur
matchs
défis
matchs
internes
club
permettent
classer
joueurs
Chaque
adhérent
reçoit
dès
inscrit
est-à-dire
dès
payé
cotisation
annuelle
badge
possédant
numéro
appelé
numéro
adhérent
mot
passe
permettant
connecter
base
données
club
internet
30.1.1
Adhésions
adhésions
cours
mémorisées
table
badges
contenant
chaque
personne
numéro
badge
mot
passe
nom
prénom
etc.
Lorsqu
adhérent
régularise
situation
date
limite
validité
augmentée
année
jour
jour
badge
cours
validité
autres
date
validité
date
inscription
augmentée
année
jour
jour
plus
joueurs
plusieurs
autres
personnes
reçoivent
badge
catégorie
logistique
afin
pouvoir
entrer
club
agit
adjoint
sports
commune
responsable
associations
ainsi
chef
travaux
agit
également
personnes
assurent
entretien
matériel
nettoyage
salle
nettoyage
lieu
tous
mardis
matins
entre
9h
12h
Durant
créneau
aucune
réservation
terrain
autorisée
joueurs
personnes
considérées
comme
adhérents
vie
cas
personnel
mairie
autorisé
aussi
joueur
deux
badges
badge
logistique
badge
joueur
badges
donnent
droits
différents
propriétaire
selon
catégorie
•
Logistique
non
joueurs
droit
entrer
club
droit
réserver
•
Jeune
joueurs
moins
15
ans
droit
entrée
doivent
être
accompagnés
adhérent
plus
âgé
entrer
problèmes
responsabilité
civile
•
Ado
joueurs
âge
compris
entre
15
18
ans
droit
entrer
club
réserver
excepté
soirs
semaine
après
17h
afin
permettre
travailleurs
réserver
soir
•
Senior
joueurs
plus
18
ans
droit
entrer
réserver
tout
moment
30.1.2
Entrées
salles
Chaque
adhérent
doit
saisir
clavier
situé
près
porte
entrée
numéro
adhérent
mot
passe
ouvrir
porte
faisant
évènement
enregistré
ajout
ligne
table
acces
table
constitue
historique
entrées
club
permet
cas
vol
dégradation
retrouver
trouvait
club
moment
là
adhérent
renouvelé
cotisation
annuelle
encore
droit
rentrer
pendant
mois
peut
plus
réserver
terrain
30.1.3
Réservations
courts
connectant
base
données
chaque
adhérent
joueur
possibilité
•
valider
réservation
prouver
venu
jouer
moment
•
annuler
réservation
faite
•
réserver
court
B
certaine
date
certaine
heure
exemple
court
B
jeudi
prochain
17h
partenaire
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2007-2008/technoweb/projetteniraq/
105
Chapitre
30
Projet
Teniraq
réservation
peut
être
effectuée
4
semaines
venir
jour
jour
nouvelle
ligne
alors
ajoutée
table
reservations
mémorise
ensemble
réservations
numéro
court
date
heure
joueur
réservant
enregistre
également
réservation
partenaire
jeu
annulation
peut
être
faite
moins
6
heures
avant
jouer
permettre
autres
joueurs
prendre
place
libre
validation
possible
créneau
réservation-15
mn
réservation+15
min
Hors
créneau
considère
joueur
honoré
réservation
occupé
créneau
au-
rait
pu
être
occupé
plus
profit
autre
joueur
alors
automatiquement
mis
prison
4
jours
est-à-dire
peut
plus
effectuer
réservation
pendant
période
date
entrée
prison
enregistrée
table
badge
seule
réservation
venir
badge
joueur
badge
logistique
donne
droit
réserver
terrain
30.1.4
Matchs
défis
joueurs
0
point
chaque
début
saison
début
octobre
Chaque
dimanche
matchs
défis
déroulent
créneau
heure
fin
heure
compte
nombre
jeux
gagnés
chacun
deux
joueurs
cas
égalité
joueur
plus
jeune
déclaré
vainqueur
Chaque
joueur
reçoit
point
participation
vainqueur
reçoit
plus
différence
entre
nombres
jeux
gagnés
exemple
joueur
gagné
8/3
reçoit
1
+
8-3
=
5
points
Défis
30.1.5
Paramétrage
Certaines
valeur
modifiables
délai
annulation
réservation
6
heures
délai
valider
réservation
15
min
nombre
jours
prison
non
validation
4
jours
nombre
semaines
réser-
vation
4
semaines
valeurs
enregistrées
table
parametres
modifiable
possesseurs
badges
niveau
autorisation
suffisant
30.2
base
données
analyse
présentée
ici
contenterons
donner
structure
base
106
Chapitre
30
Projet
Teniraq
30.2.1
MLD
30.2.2
tables
table
villes
contient
renseignements
villes
CREATE
TABLE
villes
codepostal
VARCHAR
6
PRIMARY
KEY
ville
VARCHAR
50
107
Chapitre
30
Projet
Teniraq
table
typevoiries
contient
renseignements
types
voiries
rue
boulevard
avenue
etc.
CREATE
TABLE
typevoiries
codetypevoirie
INTEGER
PRIMARY
KEY
typevoirie
VARCHAR
20
table
voiries
contient
renseignements
voiries
CREATE
TABLE
voiries
codevoirie
INTEGER
PRIMARY
KEY
reftypevoirie
INTEGER
NOT
NULL
nomvoirie
VARCHAR
100
codepostal
VARCHAR
6
NOT
NULL
FOREIGN
KEY
reftypevoirie
REFERENCES
typevoiries
codetypevoirie
FOREIGN
KEY
codepostal
REFERENCES
villes
codepostal
table
niveauautorisations
contient
renseignements
niveaux
autorisation
CREATE
TABLE
niveauautorisations
codeniveauautorisation
INTEGER
PRIMARY
KEY
niveau
INTEGER
autorisation
VARCHAR
20
table
badges
contient
renseignements
personnes
possédant
badge
joueurs
logistiques
CREATE
TABLE
badges
numbadge
INTEGER
PRIMARY
KEY
motdepasse
VARCHAR
20
nom
VARCHAR
50
prenom
VARCHAR
50
refniveauautorisation
INTEGER
NOT
NULL
FOREIGN
KEY
refniveauautorisation
REFERENCES
niveauautorisations
codeniveauautorisation
table
joueurs
contient
renseignements
joueurs
CREATE
TABLE
joueurs
numbadge
INTEGER
PRIMARY
KEY
datenaiss
DATE
sexe
VARCHAR
1
licence
varchar
10
inscritjusque
DATE
adressenum
VARCHAR
10
refvoirie
INTEGER
NOT
NULL
telfixe
VARCHAR
20
telmobile
VARCHAR
20
classementofficiel
VARCHAR
20
pointsdefis
INTEGER
dernieredateprison
DATE
FOREIGN
KEY
refvoirie
REFERENCES
voiries
codevoirie
FOREIGN
KEY
numbadge
REFERENCES
badges
numbadge
table
acces
contient
renseignements
accès
salles
CREATE
TABLE
acces
refbadge
INTEGER
instantacces
TIMESTAMP
primary
key
refbadge
instantacces
FOREIGN
KEY
refbadge
REFERENCES
badges
numbadge
table
reservations
contient
renseignements
réservations
courts
CREATE
TABLE
reservations
108
Chapitre
30
Projet
Teniraq
codereservations
INTEGER
PRIMARY
KEY
refreservant
INTEGER
NOT
NULL
refinvite
INTEGER
NOT
NULL
court
VARCHAR
4
datereservation
DATE
heurereservation
INTEGER
instantvalidation
TIME
FOREIGN
KEY
refreservant
REFERENCES
joueurs
numbadge
FOREIGN
KEY
refinvite
REFERENCES
joueurs
numbadge
table
matchs
contient
renseignements
matchs
CREATE
TABLE
matchs
codematchs
INTEGER
PRIMARY
KEY
refvainqueur
INTEGER
NOT
NULL
refperdant
INTEGER
NOT
NULL
datematch
DATE
heurematch
INTEGER
scorevainqueur
INTEGER
scoreperdant
INTEGER
FOREIGN
KEY
refvainqueur
REFERENCES
joueurs
numbadge
FOREIGN
KEY
refperdant
REFERENCES
joueurs
numbadge
table
categories
contient
renseignements
catégories
joueurs
CREATE
TABLE
categories
codecategories
VARCHAR
1
PRIMARY
KEY
nomcategorie
VARCHAR
30
agemini
INTEGER
agemaxi
INTEGER
accesautorise
BOOLEAN
reservationautorisee
BOOLEAN
eclairageautorise
BOOLEAN
table
bornesreservations
contient
renseignements
heures
réservations
possibles
chaque
jour
CREATE
TABLE
bornesreservations
refcategories
VARCHAR
1
NOT
NULL
joursemaine
VARCHAR
15
heuredebut
INTEGER
heurefin
INTEGER
PRIMARY
KEY
refcategories
joursemaine
FOREIGN
KEY
refcategories
REFERENCES
categories
codecategories
table
parametres
contient
renseignements
paramètres
application
CREATE
TABLE
parametres
nomparametre
VARCHAR
40
PRIMARY
KEY
valeur
VARCHAR
50
109
Chapitre
30
Projet
Teniraq
110
Chapitre
31
Projet
Camping
Licence
MIASHS
3ème
année
2006-2007
pouvez
consulter
pages
originales1
web
31.1
Présentation
allez
devoir
gérer
camping-gîte
agit
établissement
offre
clients
services
suivants
•
emplacements
tentes
toutes
tailles
•
emplacements
caravanes
camping-cars
différents
précédents
présence
branchements
électriques
•
mobilhomes
•
chambres
deux
lits
possible
ajouter
deux
lits
pliants
enfants
•
lits
dortoirs
tarifs
dépendent
durée
location
nuit
semaine
mois
année
ainsi
nombre
personnes
redevance
également
perçue
véhicules
31.2
informations
conserver
informations
clients
locations
conservées
année
autre
afin
pouvoir
procéder
envois
courriers
publicitaires
devra
cas
garder
informations
toutes
personnes
seulement
celui
réglé
facture
informations
suivantes
emplacements
Est-ce
tente
et/ou
caravane
et/ou
camping-
car
Est-ce
ombragé
Est-ce
herbeux
informations
suivantes
mobilhomes
équipé
réfrigérateur
équipé
four
etc
informations
suivantes
chambres
dortoirs
nombre
lits
présence
toilettes
lavabo
douche
toutes
prestations
chambres
dortoir
emplacement
tente
caravane
etc.
informations
suivantes
prix
nuit
semaine
mois
année
localisation
géographique
référence
plan
camping
devra
conserver
informations
suivantes
clients
•
état
civil
plus
complet
possible
restant
raisonnable
quand
respect
vie
privée
nom
prénom
adresse
téléphone
adresse
électronique
•
historique
toutes
leurs
présences
camping
date
quelles
personnes
quel
type
emplacement
tente
caravane
etc.
31.3
traitements
bien
beau
avoir
toutes
informations
encore
faut
pouvoir
utiliser
devra
pouvoir
•
bien
entendu
établir
facture
tout
séjour
•
aussi
faire
réservations
•
ajouter
clients
potentiels
base
est-à-dire
personnes
réellement
clientes
espère
pouvoir
démarcher
•
faire
quelques
statistiques
nécessaires
gestion
camping
recettes
année
recettes
mois
fréquentation
année
fréquentation
mois
type
hébergement
etc.
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2006-2007/technoweb/projetcamping/
111
Chapitre
31
Projet
Camping
•
etc.
31.4
base
données
analyse
présentée
ici
contenterons
donner
structure
base
31.4.1
MLD
112
Chapitre
31
Projet
Camping
31.4.2
tables
table
ville
contient
renseignements
villes
CREATE
TABLE
ville
codepostal
VARCHAR
PRIMARY
KEY
ville
VARCHAR
table
rue
contient
informations
rues
réfère
table
ville
CREATE
TABLE
rue
coderue
INT
PRIMARY
KEY
nomrue
VARCHAR
codepostal
VARCHAR
CONSTRAINT
rue_codepostal_fk
FOREIGN
KEY
codepostal
REFERENCES
ville
codepostal
table
personne
rassemble
informations
personnes
clientes
non
CREATE
TABLE
personne
codepersonne
INT
PRIMARY
KEY
nom
VARCHAR
NOT
NULL
prenom
VARCHAR
numerodanslarue
VARCHAR
refrue
INT
tel
VARCHAR
fax
VARCHAR
email
VARCHAR
CONSTRAINT
personne_refrue_fk
FOREIGN
KEY
refrue
REFERENCES
rue
coderue
table
confort
liste
éléments
confort
douche
four
etc.
peuvent
être
disponibles
différents
hébergements
table
lien_hebergement_confort
permet
faire
lien
entre
hébergements
éléments
confort
CREATE
TABLE
confort
codeconfort
INT
PRIMARY
KEY
typeconfort
VARCHAR
NOT
NULL
table
typehebergement
rassemble
différents
types
hébergement
camping
dortoir
etc.
CREATE
TABLE
typehebergement
codetypehebergement
INT
PRIMARY
KEY
typehebergement
VARCHAR
NOT
NULL
table
typelocation
rassemble
différents
types
location
journée
semaine
etc.
CREATE
TABLE
typelocation
codetypelocation
INT
PRIMARY
KEY
typelocation
VARCHAR
NOT
NULL
table
tariflocation
rassemble
différents
tarifs
location
fonction
durée
type
hébergement
etc.
CREATE
TABLE
tariflocation
reftypelocation
INT
reftypehebergement
INT
journee
NUMERIC
5,2
personne
NUMERIC
5,2
PRIMARY
KEY
reftypelocation
reftypehebergement
CONSTRAINT
tariflocation_reftypehebergement_fk
FOREIGN
KEY
reftypehebergement
113
Chapitre
31
Projet
Camping
REFERENCES
typehebergement
codetypehebergement
CONSTRAINT
tariflocation_reftypelocation_fk
FOREIGN
KEY
reftypelocation
REFERENCES
typelocation
codetypelocation
table
tarifvehicule
définit
montant
redevances
fonction
véhicules
CREATE
TABLE
tarifvehicule
codevehicule
INT
PRIMARY
KEY
vehicule
VARCHAR
tarif
NUMERIC
5,2
NOT
NULL
table
hebergement
contient
liste
tous
hébergements
disponibles
CREATE
TABLE
hebergement
codehebergement
INT
PRIMARY
KEY
positionsurleplan
VARCHAR
NOT
NULL
reftypehebergement
INT
NOT
NULL
nbreplaces
INT
NOT
NULL
CONSTRAINT
hebergement_reftypehebergement_fk
FOREIGN
KEY
reftypehebergement
REFERENCES
typehebergement
codetypehebergement
table
lien_hebergement_confort
fait
lien
entre
hébergements
éléments
confort
disponibles
CREATE
TABLE
lien_hebergement_confort
refhebergement
INT
refconfort
INT
PRIMARY
KEY
refhebergement
refconfort
CONSTRAINT
lienhebconfort_refhebergement_fk
FOREIGN
KEY
refhebergement
REFERENCES
hebergement
codehebergement
CONSTRAINT
lienhebconfort_confort_fk
FOREIGN
KEY
refconfort
REFERENCES
confort
codeconfort
table
sejour
rassemble
tous
renseignements
séjours
effectués
réservés
clients
CREATE
TABLE
sejour
codesejour
INT
PRIMARY
KEY
debut
DATE
fin
DATE
refhebergement
INT
refvehicule
INT
CONSTRAINT
sejour_refvehicule_fk
FOREIGN
KEY
refvehicule
REFERENCES
tarifvehicule
codevehicule
CONSTRAINT
sejour_refhebergement_fk
FOREIGN
KEY
refhebergement
REFERENCES
hebergement
codehebergement
table
lien_sejour_personne
fait
lien
entre
séjours
effectués
réservés
personnes
clients
CREATE
TABLE
lien_sejour_personne
refsejour
INT
refpersonne
INT
PRIMARY
KEY
refsejour
refpersonne
CONSTRAINT
liensejourpersonne_refsejour_fk
FOREIGN
KEY
refsejour
REFERENCES
sejour
codesejour
CONSTRAINT
liensejourpersonne_refpersonne_fk
FOREIGN
KEY
refpersonne
REFERENCES
personne
codepersonne
114
Chapitre
32
Projet
Association
Licence
MIASHS
3ème
année
2004-2005
pouvez
consulter
pages
originales1
web
allez
devoir
construire
site
web
permettant
membres
association
gérer
consulter
diiférents
renseignements
adhésions
32.1
Contenu
site
web
site
devra
permettre
effectuer
opérations
nécessaires
bon
fonctionnement
base
est-à-
dire
•
devra
avoir
moins
trois
niveaux
utilisateurs
identifiés
login
mot
passe
niveau
simple
utilisateur
seule
consultation
autorisée
consultation
peut
être
restreinte
certaines
données
niveau
exemple
accessible
simples
adhérents
association
niveau
administrateur
alors
accès
fonctions
importantes
exemple
modification
données
ajout
base
fonctions
vitales
exemple
niveau
réservé
trésorier
président
association
niveau
gourou
alors
accès
tout
niveau
réservé
exclusivement
responsable
base
données
exemple
seulement
niveau
sécurité
pourra
supprimer
enregistrements
base
•
site
web
permettra
toutes
actions
base
•
consultation
•
modification
•
ajout
•
suppression
32.2
Conditions
travail
pouvez
travailler
groupe
deux
plutôt
conseillé
plus
travail
libre
conditions
réel
presque
juge
pendant
tout
semestre
là
répondre
questions
32.3
Base
données
base
données
contenant
renseignements
celle
vue
premier
semestre
base
Association2
Quelques
rappels
buts
contenu
Rappel
association
veut
gérer
adhérents
intermédiaire
base
données
Voici
principales
informations
sujet
1
doit
garder
informations
adhérents
anciens
2
doit
connaître
chaque
personne
base
a.
nom
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/technoweb/projet.php
2.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association
115
Chapitre
32
Projet
Association
b.
prénom
c.
adresse
d.
membre
C.A
e.
jeune
tarif
réduit
f.
adhérent
titre
gratuit
g.
adhérent
quel
montant
cotisation
nombre
personnes
concernées
adhésion
cela
chaque
année
3
doit
connaître
référent
chaque
personne
agit
adhérent
chargé
faire
par-venir
différents
courriers
envoyés
association
comptes-rendus
relance
convocations
etc.
également
possible
courriers
transmis
poste
32.4
MLD
projet
Association
Figure
32-1
MCD
projet
Association
32.5
Création
tables
base
Association
32.5.1
Création
tables
fichier
téléchargeable
web3
create
table
PERSONNE
clef
int
primary
key
nom
varchar
prenom
varchar
numero
varchar
refrue
integer
ca
boolean
jeune
boolean
gratuit
boolean
3.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association/creation/create.sql
116
Chapitre
32
Projet
Association
invite
boolean
referent
int
create
table
RUE
clef
int
primary
key
nomrue
varchar
codepostal
varchar
create
table
VILLE
codepostal
varchar
primary
key
ville
varchar
create
table
REFERENT
clef
int
primary
key
nom
varchar
personne
int
create
table
ADHESION
annee
varchar
personne
int
nbmembre
int
montant
numeric
8,2
euro
boolean
default
primary
key
annee
personne
32.5.2
Contraintes
fichier
téléchargeable
web4
ALTER
TABLE
personne
ADD
CONSTRAINT
persons_referent_fk
FOREIGN
KEY
referent
REFERENCES
referent
clef
ALTER
TABLE
personne
ADD
CONSTRAINT
persons_rue_fk
FOREIGN
KEY
refrue
REFERENCES
rue
clef
ALTER
TABLE
rue
ADD
CONSTRAINT
rue_ville_fk
FOREIGN
KEY
codepostal
REFERENCES
ville
codepostal
ALTER
TABLE
referent
ADD
CONSTRAINT
referent_personne_fk
FOREIGN
KEY
personne
REFERENCES
personne
clef
ALTER
TABLE
adhesion
ADD
CONSTRAINT
adhesions_person_fk
FOREIGN
KEY
personne
REFERENCES
personne
clef
32.6
Évaluation
critères
lesquels
notés
•
faut
ça
marche
moindre
choses
•
facilité
utilisattion
site
faut
navigation
simple
intuitive
efficace
faut
formulaires
clairs
•
confirmité
normes
W3C
utilisation
feuilles
style
absolument
obligatoire
crois
ça
faciliterait
quand
travail
Aucune
restriction
priori
faite
HTML
suffit
ça
passe
contrôles
W3C
fanatique
javascript
pourquoi
4.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2004-2005/bd/association/creation/contraintes.sql
117
Chapitre
32
Projet
Association
rien
vital
doit
être
confié
javascript
ça
doit
pouvoir
fonctionner
navigateur
sans
javascript
•
lisibilité
code
source
code
illisible
mal
présenté
non
commenté
très
préjudicia-ble
contre
découpage
petites
fonctions
faciles
comprendre
voire
découpage
code
bibliothèques
thématiques
avantageront
32.7
Dernier
conseil
Aphorisme
premiers
95
projet
prennent
95
temps
5
restant
prennent
aussi
95
temps
Conclusion
travaillez
beaucoup
plus
tôt
possible
pendant
encore
partiels
réviser
118
Chapitre
33
Projet
Généalogie
IUP
IIES
2ème
année
Maîtrise
AES-TEG
2003-2004
pouvez
consulter
pages
originales1
web
33.1
Généralités
allez
devoir
réaliser
site
généalogie
réalisation
devra
être
pleinement
fonctionnelle
devra
entre
autres
être
capable
échanger
données
autres
logiciels
génalogie
existant
logiciels
commerciaux
logiciels
libres
33.2
données
conserver
trouverez
partie
description
informations
manipulent
généalogistes
33.2.1
données
base
occupe
personnes
naissance
décès
ascendance
descendance
doit
pouvoir
partant
importe
quelle
personne
produire
liste
ascendants
ainsi
celle
descendants
doit
pouvoir
aussi
connaître
conjoints
toute
personne
cas
personne
plusieurs
conjoints
doit
moins
pouvoir
connaître
ordre
lequel
couples
existé
doit
pouvoir
possible
avoir
dates
début
fin
éventuelles
unions
faut
noter
modèle
européen
seul
existe
monde
possible
certaines
personnes
plusieurs
conjoints
temps
plus
enfants
peuvent
provenir
liaisons
non
officialisées
faut
pouvoir
aussi
représenter
devra
bien
entendu
conserver
dates
lieux
naissance
décès
individus
Bien
entendu
comme
toute
partie
informations
quelques
fois
difficile
obtenir
site
devra
pouvoir
fonctionner
absence
certaines
33.2.2
Données
supplémentaires
introduction
outil
informatique
peut
ajouter
autres
types
information
exemple
•
multimédia
photo
vidéo
enregistrement
audio
etc.
•
copie
document
officiel
acte
naissance
mariage
décès
etc
informations
peuvent
être
associées
plusieurs
personnes
plusieurs
événements
plusieurs
familles
bon
documents
datés
conserve
nom
propriétaires
33.3
Traitement
données
données
rassemblées
sens
peut
utiliser
Voici
fonctionnalités
minimales
devra
avoir
site
web
•
ajouter
supprimer
modifier
individu
•
ajouter
supprimer
modifier
union
mariage
autre
•
lier
individu
parents
inversement
couple
enfants
•
associer
fichier
multimédia
individu
famille
événement
•
connaissant
individu
doit
pouvoir
obtenir
facilement
ascendance
descendance
proche
cependant
parfait
avoir
toute
ascendance
toute
descendance
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/commun/genealogie/
119
Chapitre
33
Projet
Généalogie
•
tout
individu
doit
pouvoir
avoir
album
toutes
photos
associéees
parfait
avoir
chose
tous
types
documents
33.4
Optimisations
évitera
dupliquer
informations
multimédia
elles
liées
plusieurs
personnes
pourra
avoir
choix
effacer
informations
multimédia
plus
associées
rien
façon
représentées
relations
descendance
ascendance
écran
laissée
libre
choix
faut
noter
plus
classique
arborescente
celle
colle
plus
près
structure
réelle
33.5
Import-export
site
devra
être
capable
exporter
données
format
GEDCOM
est-ce
fichier
GEDCOM
tapant
mot
importe
quel
moteur
recherche
obtien-
drez
dizaines
voire
centaines
pages
expliqueront
voici
résumé
Défini
mormons
sous
nom
complet
Église
Jésus-Christ
Saints
Derniers
Jours
standard
GEDCOM
créé
permettre
échange
données
entre
différents
logiciels
généalogie
existants
Ainsi
plupart
logiciels
généalogie
permettent
exporter
fruit
travail
format
Quelques
pages
internet
•
version
originale
anglais
2
•
explication
français3
•
autre
explication
français4
pourrez
facilement
trouver
autres
Attention
Comprendre
norme
vous-même
fait
partie
travail
demandé
partie
note
portera
capacité
site
exporter
données
vers
fichier
GEDCOM
correction
facile
ferai
lire
fichier
produit
logiciel
généalogie
regarderai
vraiment
exporté
importation
données
depuis
fichier
GEDCOM
demandée
principe
moins
facile
voulez
faire
bien
entendu
tenu
compte
2.
http
//www.gendex.com/gedcom55/55gctoc.htm
3.
http
//www.amicale-genealogie.org/Informatique/InfoGed.htm
4.
http
//www.weinland.nom.fr/gedc.php
120
Chapitre
33
Projet
Généalogie
33.6
MCD
projet
généalogie
Figure
33-1
MCD
projet
Généalogie
33.7
différentes
tables
33.7.1
tables
entités
33.7.1.1
table
individus
CREATE
TABLE
individu
numindividu
INTEGER
NOT
NULL
PRIMARY
KEY
nom
VARCHAR
prenom
VARCHAR
sexe
CHAR
1
parents
INTEGER
jour_nais
INTEGER
mois_nais
INTEGER
annee_nais
INTEGER
121
Chapitre
33
Projet
Généalogie
lieu_nais
INTEGER
jour_deces
INTEGER
mois_deces
INTEGER
annee_deces
INTEGER
lieu_deces
INTEGER
CONSTRAINT
individu_sexe_ck
CHECK
sexe
IN
F
f
33.7.1.2
table
villes
CREATE
TABLE
ville
codepostal
VARCHAR
NOT
NULL
PRIMARY
KEY
ville
VARCHAR
NOT
NULL
33.7.1.3
table
lieux
CREATE
TABLE
lieu
numlieu
INTEGER
NOT
NULL
PRIMARY
KEY
nom
VARCHAR
numero
VARCHAR
rue
VARCHAR
codepostal
VARCHAR
33.7.1.4
table
couples
CREATE
TABLE
couple
numcouple
INTEGER
NOT
NULL
PRIMARY
KEY
INTEGER
NOT
NULL
INTEGER
NOT
NULL
jour_debut
INTEGER
mois_debut
INTEGER
annee_debut
INTEGER
lieu_debut
INTEGER
jour_fin
INTEGER
mois_fin
INTEGER
annee_fin
INTEGER
lieu_fin
INTEGER
type_couple
INTEGER
33.7.1.5
table
types
couple
CREATE
TABLE
type_couple
numtypecouple
INTEGER
NOT
NULL
PRIMARY
KEY
description
VARCHAR
33.7.1.6
table
types
document
CREATE
TABLE
type_document
numtype
INTEGER
NOT
NULL
PRIMARY
KEY
descr_courte
VARCHAR
NOT
NULL
descr_longue
VARCHAR
122
Chapitre
33
Projet
Généalogie
33.7.1.7
table
documents
CREATE
TABLE
document
numdocument
INTEGER
NOT
NULL
PRIMARY
KEY
titre
VARCHAR
fichier
VARCHAR
NOT
NULL
type
INTEGER
NOT
NULL
taille
INTEGER
date_creation
DATE
date_inclusion
DATE
33.7.2
tables
relations
33.7.2.1
table
lie
documents
couples
CREATE
TABLE
doc_couple
couple
INTEGER
NOT
NULL
document
INTEGER
NOT
NULL
descr_courte
VARCHAR
descr_longue
VARCHAR
CONSTRAINT
docCouple_pk
PRIMARY
KEY
couple
document
33.7.2.2
table
lie
documents
lieux
CREATE
TABLE
doc_lieu
lieu
INTEGER
NOT
NULL
document
INTEGER
NOT
NULL
descr_courte
VARCHAR
descr_longue
VARCHAR
CONSTRAINT
docLieu_pk
PRIMARY
KEY
lieu
document
33.7.2.3
table
lie
documents
individus
CREATE
TABLE
doc_individu
individu
INTEGER
NOT
NULL
document
INTEGER
NOT
NULL
descr_courte
VARCHAR
descr_longue
VARCHAR
CONSTRAINT
docIndividu_pk
PRIMARY
KEY
individu
document
33.8
différentes
contraintes
33.8.1
table
individu
ALTER
TABLE
individu
ADD
CONSTRAINT
individu_lieuNais_fk
FOREIGN
KEY
lieu_nais
REFERENCES
lieu
numlieu
ALTER
TABLE
individu
ADD
CONSTRAINT
individu_lieuDeces_fk
123
Chapitre
33
Projet
Généalogie
FOREIGN
KEY
lieu_deces
REFERENCES
lieu
numlieu
ALTER
TABLE
individu
ADD
CONSTRAINT
individu_parents_fk
FOREIGN
KEY
parents
REFERENCES
couple
numcouple
33.8.2
table
ville
contraintes
33.8.3
table
lieu
ALTER
TABLE
lieu
ADD
CONSTRAINT
lieu_codepostal_fk
FOREIGN
KEY
codepostal
REFERENCES
ville
codepostal
33.8.4
table
couple
ALTER
TABLE
couple
ADD
CONSTRAINT
couple_lui_fk
FOREIGN
KEY
REFERENCES
individu
numindividu
ALTER
TABLE
couple
ADD
CONSTRAINT
couple_elle_fk
FOREIGN
KEY
REFERENCES
individu
numindividu
ALTER
TABLE
couple
ADD
CONSTRAINT
individu_lieuDebut_fk
FOREIGN
KEY
lieu_debut
REFERENCES
lieu
numlieu
ALTER
TABLE
couple
ADD
CONSTRAINT
individu_lieuFin_fk
FOREIGN
KEY
lieu_fin
REFERENCES
lieu
numlieu
33.8.5
table
type_couple
contraintes
33.8.6
table
type_document
contraintes
33.8.7
table
document
ALTER
TABLE
document
ADD
CONSTRAINT
document_type_fk
FOREIGN
KEY
type
REFERENCES
type_document
numtype
33.8.8
table
doc_couple
ALTER
TABLE
doc_couple
ADD
CONSTRAINT
docCouple_couple_fk
FOREIGN
KEY
couple
REFERENCES
couple
numcouple
ALTER
TABLE
doc_couple
ADD
CONSTRAINT
docCouple_document_fk
FOREIGN
KEY
document
REFERENCES
document
numdocument
124
Chapitre
33
Projet
Généalogie
33.8.9
table
doc_lieu
ALTER
TABLE
doc_lieu
ADD
CONSTRAINT
docLieu_lieu_fk
FOREIGN
KEY
lieu
REFERENCES
lieu
numlieu
ALTER
TABLE
doc_lieu
ADD
CONSTRAINT
docLieu_document_fk
FOREIGN
KEY
document
REFERENCES
document
numdocument
125
Chapitre
33
Projet
Généalogie
126
Chapitre
34
Projet
Brazil
IUP
IIES
2ème
année
Maîtrise
AES-TEG
2002-2003
pouvez
consulter
pages
originales1
web
34.1
Description
monde
Brazil
organisé
façon
rendre
citoyens
plus
heureux
possible
veiller
cela
tous
renseignements
utiles
stockés
base
données
centrale
centre
régulation
bonheur
chargés
gestion
base
données
Chaque
citoyen
représenté
numéro
enregistrement
universel
nom
prénom
sexe
date
naissance
taille
historique
maladies
mémorise
également
différentes
adresses
ainsi
dates
emménagement
correspondantes
Chaque
citoyen
travaille
service
contribuant
ainsi
bonheur
tous
Tous
services
re-
groupés
plus
grande
efficacité
différents
ministères
bonheur
Ainsi
groupe
plusieurs
services
forme
ministère
travaille
grâce
échantillons
bonheur
produits
autres
ser-
vices
divers
ministères
sous
contrôle
administratif
troisième
ensemble
services
divers
ministères
aussi
rôles
régulièrement
modifiés
centre
régulation
bonheur
selon
savant
parfait
calcul
maîtrise
aléatoire
Malheureusement
comme
toute
organisation
parfaite
défauts
toujours
dûs
composants
i.e
citoyens
Ainsi
distingue
trois
types
citoyens
1
part
ceux
contribuent
survie
système
production
futurs
citoyens
mérites
proportionnels
nombre
leurs
enfants
bonheur
produit
dis-
tillé
enfants
citoyens
tient
particulièrement
conserver
historique
ancêtres
chacun
2
Tout
citoyen
adulte
enfant
fait
partie
seconde
catégorie
suspects
Cela
confirme
fait
citoyen
enfant
mesure
répondre
formulaire
E707
suspicion
pèse
citoyen
proportionnelle
nombre
formulaires
E707
pu
remplir
3
Tout
citoyen
parents
inconnus
également
suspect
seule
exception
confirme
règle
perfection
système
Brazil
fait
seul
citoyen
enfants
dispose
assez
temps
être
dirigeant
ministère
Tout
citoyen
décédé
pouvant
plus
contribuer
bonheur
société
verra
immédiatement
supprimé
base
données
ainsi
toute
référence
existence
fonctions
descendance
rendra
bien
entendu
immédiatement
suspects
éventuels
enfants
34.2
tables
entités
34.2.1
table
citoyen
CREATE
TABLE
citoyen
numuniv
NUMERIC
6
NOT
NULL
nom
VARCHAR
50
prenom
VARCHAR
50
sexe
CHAR
naissance
DATE
taille
NUMERIC
3
pere
NUMERIC
6
mere
NUMERIC
6
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/commun/brazil/
127
Chapitre
34
Projet
Brazil
34.2.2
table
ville
CREATE
TABLE
ville
codepostal
VARCHAR
5
NOT
NULL
ville
VARCHAR
25
34.2.3
table
rue
CREATE
TABLE
rue
numrue
NUMERIC
6
NOT
NULL
rue
VARCHAR
50
codepostal
VARCHAR
5
34.2.4
table
maladie
CREATE
TABLE
maladie
nummaladie
NUMERIC
6
NOT
NULL
nommaladie
VARCHAR
25
gravite
numeric
2
NOT
NULL
34.2.5
table
service
CREATE
TABLE
service
numservice
NUMERIC
6
NOT
NULL
nomservice
VARCHAR
50
34.2.6
table
ministere
CREATE
TABLE
ministere
numministere
NUMERIC
6
NOT
NULL
nomministere
VARCHAR
25
34.3
tables
relations
34.3.1
Associer
maladie
citoyen
listemaladie
CREATE
TABLE
listemaladie
citoyen
NUMERIC
6
NOT
NULL
maladie
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.3.2
Associer
adresse
citoyen
habite
CREATE
TABLE
habite
citoyen
NUMERIC
6
NOT
NULL
numero
NUMERIC
4
NOT
NULL
rue
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
128
Chapitre
34
Projet
Brazil
34.3.3
Associer
citoyen
service
lequel
travaille
travaillepour
CREATE
TABLE
travaillepour
citoyen
NUMERIC
6
NOT
NULL
service
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.3.4
Associer
service
ministère
lequel
produit
serviceproduit
CREATE
TABLE
serviceproduit
service
NUMERIC
6
NOT
NULL
ministere
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.3.5
Associer
service
ministère
auquel
appartient
serviceappartient
CREATE
TABLE
serviceappartient
service
NUMERIC
6
NOT
NULL
ministere
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.3.6
Associer
service
ministère
contrôle
servicecontrole
CREATE
TABLE
servicecontrole
service
NUMERIC
6
NOT
NULL
ministere
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.3.7
Associer
citoyen
ministère
dirige
tabledirige
CREATE
TABLE
dirige
citoyen
NUMERIC
6
NOT
NULL
ministere
NUMERIC
6
NOT
NULL
debut
DATE
NOT
NULL
fin
DATE
34.4
contraintes
34.4.1
table
ville
ALTER
TABLE
ville
ADD
CONSTRAINT
ville_codepostal_pk
PRIMARY
KEY
codepostal
34.4.2
table
rue
ALTER
TABLE
rue
ADD
CONSTRAINT
adresse_numrue_pk
PRIMARY
KEY
numrue
ALTER
TABLE
rue
ADD
CONSTRAINT
adresse_codepostal_fk
FOREIGN
KEY
codepostal
REFERENCES
ville
codepostal
129
Chapitre
34
Projet
Brazil
34.4.3
table
citoyen
ALTER
TABLE
citoyen
ADD
CONSTRAINT
citoyen_numuniv_pk
PRIMARY
KEY
numuniv
ALTER
TABLE
citoyen
ADD
CONSTRAINT
citoyen_sexe_ck
CHECK
sexe
in
F
ALTER
TABLE
citoyen
ADD
CONSTRAINT
citoyen_pere_fk
FOREIGN
KEY
pere
REFERENCES
citoyen
numuniv
ALTER
TABLE
citoyen
ADD
CONSTRAINT
citoyen_mere_fk
FOREIGN
KEY
mere
REFERENCES
citoyen
numuniv
34.4.4
table
habite
ALTER
TABLE
habite
ADD
CONSTRAINT
habite_citoyen_fk
FOREIGN
KEY
citoyen
REFERENCES
citoyen
numuniv
ALTER
TABLE
habite
ADD
CONSTRAINT
habite_rue_fk
FOREIGN
KEY
rue
REFERENCES
rue
numrue
ALTER
TABLE
habite
ADD
CONSTRAINT
habite_serv_pk
PRIMARY
KEY
citoyen
numero
rue
34.4.5
table
maladie
ALTER
TABLE
maladie
ADD
CONSTRAINT
maladie_nummaladie_pk
PRIMARY
KEY
nummaladie
ALTER
TABLE
maladie
ADD
CONSTRAINT
maladie_gravite_ck
CHECK
gravite
in
0,1,2,3,4,5,6,7,8,9,10
34.4.6
table
listemaladie
ALTER
TABLE
listemaladie
ADD
CONSTRAINT
listemaladie_cit_moy_deb_pk
PRIMARY
KEY
citoyen
maladie
debut
ALTER
TABLE
listemaladie
ADD
CONSTRAINT
listemaladie_citoyen_fk
FOREIGN
KEY
citoyen
REFERENCES
citoyen
numuniv
ALTER
TABLE
listemaladie
ADD
CONSTRAINT
listemaladie_maladie_fk
FOREIGN
KEY
maladie
REFERENCES
maladie
nummaladie
34.4.7
table
service
ALTER
TABLE
service
ADD
CONSTRAINT
service_numservice_pk
PRIMARY
KEY
numservice
34.4.8
table
ministere
ALTER
TABLE
ministere
ADD
CONSTRAINT
ministere_numministere_pk
PRIMARY
KEY
numministere
130
Chapitre
34
Projet
Brazil
34.4.9
table
travaillepour
ALTER
TABLE
travaillepour
ADD
CONSTRAINT
travaillepour_cit_serv_pk
PRIMARY
KEY
citoyen
service
debut
ALTER
TABLE
travaillepour
ADD
CONSTRAINT
travaillepour_citoyen_fk
FOREIGN
KEY
citoyen
REFERENCES
citoyen
numuniv
ALTER
TABLE
travaillepour
ADD
CONSTRAINT
travaillepour_service_fk
FOREIGN
KEY
service
REFERENCES
service
numservice
34.4.10
table
serviceproduit
ALTER
TABLE
serviceproduit
ADD
CONSTRAINT
serviceproduit_serv_mini_pk
PRIMARY
KEY
service
ministere
debut
ALTER
TABLE
serviceproduit
ADD
CONSTRAINT
serviceproduit_service_fk
FOREIGN
KEY
service
REFERENCES
service
numservice
ALTER
TABLE
serviceproduit
ADD
CONSTRAINT
serviceproduit_ministere_fk
FOREIGN
KEY
ministere
REFERENCES
ministere
numministere
34.4.11
table
serviceappartient
ALTER
TABLE
serviceappartient
ADD
CONSTRAINT
serviceappartient_serv_mini_pk
PRIMARY
KEY
service
ministere
debut
ALTER
TABLE
serviceappartient
ADD
CONSTRAINT
serviceappartient_service_fk
FOREIGN
KEY
service
REFERENCES
service
numservice
ALTER
TABLE
serviceappartient
ADD
CONSTRAINT
serviceappartient_ministere_fk
FOREIGN
KEY
ministere
REFERENCES
ministere
numministere
34.4.12
table
servicecontrole
ALTER
TABLE
servicecontrole
ADD
CONSTRAINT
servicecontrole_serv_mini_pk
PRIMARY
KEY
service
ministere
debut
ALTER
TABLE
servicecontrole
ADD
CONSTRAINT
servicecontrole_service_fk
FOREIGN
KEY
service
REFERENCES
service
numservice
ALTER
TABLE
servicecontrole
ADD
CONSTRAINT
servicecontrole_ministere_fk
FOREIGN
KEY
ministere
REFERENCES
ministere
numministere
34.4.13
table
dirige
ALTER
TABLE
dirige
ADD
CONSTRAINT
dirige_cit_serv_pk
PRIMARY
KEY
citoyen
ministere
debut
ALTER
TABLE
dirige
ADD
CONSTRAINT
dirige_citoyen_fk
FOREIGN
KEY
citoyen
REFERENCES
citoyen
numuniv
ALTER
TABLE
dirige
ADD
CONSTRAINT
dirige_ministere_fk
FOREIGN
KEY
ministere
REFERENCES
ministere
numministere
131
Chapitre
34
Projet
Brazil
132
Chapitre
35
Projet
Services
IUP
IIES
2ème
année
Maîtrise
AES-TEG
2001-2002
pouvez
consulter
pages
originales1
web
allez
devoir
réaliser
site
web
dynamique
permettra
gérer
services
enseignants
UFR
document
va
permettre
définir
caractéristiques
site
35.1
But
projet
but
site
allez
réaliser
permettre
responsable
administratif
ve
UFR
gérer
services
enseignants
devra
être
possible
enregistrer
modifier
tirer
récapitulatifs
synthèses
etc.
projet
doit
tenter
gérer
emplois
temps
répartition
cours
semaine
heures
enseignements
toutes
comptées
manière
elles
payées
prix
suivant
TD
CMTD
CM
affectations
enseignants
cours
définies
niveau
groupes
5
groupes
formation
doit
pouvoir
affecter
5
enseignants
nécessaire
gérer
affectation
individuelle
groupes
besoin
savoir
tel
enseignant
charge
groupe
n◦1
tel
autre
groupe
n◦2
etc
suffit
savoir
tel
enseignant
2
groupes
tel
autre
1
etc.
enseignants
doivent
tous
service
statut
donne
base
peut
être
modi-
fiée
temps
partiel
décharges
contrats
particuliers
etc.
35.2
Fonctionnement
35.2.1
utilisateurs
mêmes
droits
suivant
identité
pages
allez
construire
libre
accès
suivant
droits
conférés
chaque
utilisateur
pourra
avoir
accès
certaines
informations
certains
traitements
faudra
gérer
système
mots
passe
contrôler
accès
site
1
utilisateur
base
droit
consulter
contenu
base
seulement
requêtes
prédéfinies
2
responsable
administratif
ve
droit
modifier
contenu
tables
certaines
données
sensibles
peuvent
être
interdites
utilisateur
privilégié
droits
plus
importants
utilisateur
base
limités
quand
modifications
autorisées
devront
passer
comme
utilisateur
base
requêtes
prédéfinies
3
administrateur
base
droit
définir
niveaux
droits
utilisateurs
modifier
structure
base
tous
droits
35.2.2
Fonctionnalités
requises
consultation
Consultations
accessibles
tous
utilisateurs
identifiés
1
Liste
enseignements
enseignants
formation
2
Liste
enseignements
enseignants
année
3
Liste
enseignements
enseignants
UFR
4
Liste
enseignements
enseignants
matière
5
Liste
enseignements
enseignant
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2001-2002/iies2/projet/
133
Chapitre
35
Projet
Services
6
chaque
enseignant
calculer
service
afficher
quand
nombre
heures
supplé-
mentaires
nombre
heures
sous-service
7
Pouvoir
avoir
récapitulatif
global
heures
enseignement
regrouper
section
CNU
et/ou
formation
et/ou
statut
8
faut
pouvoir
distinguer
entre
enseignants
permanents
autres
différentes
statis-
tiques
quand
cela
sens
faudra
avoir
trois
versions
chaque
calcul
tous
enseignants
permanents
vacataires
35.2.3
Fonctionnalités
requises
mise
jour
utilisateurs
autorisés
seulement
responsable
administratif
administrateur
base
1
Créer/modifier/supprimer
tout
objet
intervenant
gestion
affectations
UFR
formations
filière
cours
enseignant
etc.
2
Affecter
enseignement
enseignant
Supprimer
affectation
35.3
Informations
plus
techniques
1
message
alerte
doit
être
produit
quand
distribué
plus
groupes
disponibles
2
Informations
nécessaires
chaque
enseignement
désignation
cours
nombre
heures
public
concerné
type
enseignement
TD
CM
etc.
nombre
groupes
disponibles
section
CNU
concernée
bien
enseignant
chargé
cours
obligatoirement
rattaché
section
3
Informations
nécessaires
chaque
enseignant
nom
prénom
statut
administratif
UFR
rat-
tachement
service
dû
nombre
heures
type
contrat
permanent
vacataire
section
CNU
4
bon
historique
commandes
exécutées
•
afin
réparer
toute
erreur
grave
•
connaître
type
utilisation
base
35.4
Question
subsidiaire
comment
gérer
historique
base
problème
conserver
requêtes
cela
voir
Section
35.3
modifications
question
Comment
garder
année
autre
renseignements
disponibles
exploitables
35.5
Vocabulaire
utilisé
Année
exemple
2ème
année
DEUG
AES
3ème
année
IUP
IIES
Cours
Unité
enseignement
Cela
correspond
certain
nombre
heures
présence
devant
étudiants
certain
sujet
donnés
certain
nombre
groupes
étudiants
Plusieurs
enseignants
peuvent
être
concernés
cours
groupes
différents
134
Chapitre
35
Projet
Services
Enseignants
permanents
UFR
deux
catégories
enseignants
permanents
vacataires
premiers
dépen-
dent
directement
UFR
nommés
titre
définitif
payés
université
seconds
recrutés
cas
cas
année
semestre
payés
ressources
propres
UFR
peuvent
être
permanents
autres
UFR
être
complètement
extérieurs
université
Formation
exemple
AES
IUP
IIES
MASS
Heures
supplémentaires
Heures
enseignements
faites
plus
service
dû
Section
CNU
CNU=Conseil
National
Universités
organisme
chargé
affectations
universitaires
Chaque
universitaire
qualifié
section
CNU
dépend
domaine
recherche
informatique
économie
histoire
etc.
peut
être
recruté
poste
section
pourra
traduire
projet
expression
section
CNU
matière
enseignée
bien
réalité
réducteur
Service
service
enseignant
nombre
heures
enseignements
assure
Service
dû
Nombre
heures
enseignement
doit
assurer
enseignant
nombre
dépend
directement
statut
peut
subir
modifications
exemple
maître
conférences
doit
principe
198
heures
eqTD
décharge
services
administratifs
peut
permettre
faire
moins
tandis
contrat
pédagogique
peut
demander
faire
plus
Sous-service
dit
quand
enseignant
assure
moins
heures
service
dû
Statut
enseignant
principaux
statuts
existants
enseignants
titulaires
accompagnés
leurs
services
professeur
192
heures
maître
conférences
192
heures
assistant
192
heures
PRCE
384
heures
PRAG
384
heures
TD
CM
CTD
décomptes
heures
enseignement
distingue
TD
Travaux
Dirigés
CM
Cours
Magistraux
CMTD
intermédiaires
entre
deux
précédents
unité
base
heure
équivalent
TD
eqTD
principe
correspondances
suivantes
•
1
TD=1
eqTD
heureusement
•
1
CM=1,5
eqTD
•
1
CMTD=7/6
eqTD
cela
peut
varier
35.6
Première
ébauche
structure
entités
cmtd
|
annees
-
cours
cnu
|
\
|
formations
ufr
-
enseignants
statuts
135
Chapitre
35
Projet
Services
Toutes
liaisons
sauf
celle
entre
cours
enseignants
type
1-n
exemple
année
fait
partie
seule
formation
formation
peut
correspondre
plusieurs
années
liaisons
peuvent
être
réalisées
référence
externe
exemple
champ
table
annee
contient
code
formation
année
dépend
parle
alors
clef
étrangère
cas
liaison
entre
cours
enseignants
agit
relation
n-n
chaque
cours
peut
être
associé
plusieurs
enseignants
chaque
enseignant
peut
avoir
assurer
plusieurs
cours
réaliser
type
liaison
obligé
faire
intervenir
table
supplémentaire
assurera
liaison
deux
liaisons
1-n
agit
table
affectations
schéma
suivant
cmtd
|
annees
-
cours
cnu
|
|
|
|
affectations
|
|
\
|
formations
ufr
-
enseignants
statuts
35.7
Structures
tables
trouvera
chaque
table
liste
champs
composent
clefs
primaires
suivies
étoile
*
clefs
étrangères
représentées
ainsi
35.7.1.
cmtd
table
contient
descriptions
types
cours
TD
CM
CMTD
•
numcmtd
*
identifiant
•
intitule
intitulé
toutes
lettres
type
cours
TD
CM
CMTD
•
coefficient
valeur
eqTD
équivalent
TD
heure
enseignement
35.7.2.
ufr
table
contient
descriptions
UFR
•
numufr
*
identifiant
•
intitule
intitulé
toutes
lettres
UFR
MSES
Philosophie
etc.
35.7.3.
formations
table
contient
descriptions
formations
AES
IUP
IIES
etc.
•
numformation
*
identifiant
•
intitule
intitulé
toutes
lettres
formation
AES
IUP
IIES
etc.
•
ufr
code
UFR
dépend
formation
136
Chapitre
35
Projet
Services
35.7.4.
annees
table
contient
descriptions
années
IUP
IIES
2ème
année
Maîtrise
AES
etc.
•
numannee
*
identifiant
•
intitule
intitulé
toutes
lettres
année
IUP
IIES
2ème
année
Maîtrise
AES
etc.
•
niveau
équivalence
nombre
années
après
bac
3
licence
1
première
année
DEUG
etc.
•
formation
code
formation
dépend
année
35.7.5.
cnu
table
contient
descriptions
différentes
section
CNU
•
numcnu
*
identifiant
•
intitulé
intitulé
toutes
lettres
section
CNU
correspondante
35.7.6.
cours
table
contient
descriptions
cours
Bases
données
partagées
Système
réseaux
Macro-
économie
etc.
•
numcours
*
identifiant
•
intitule
intitulé
toutes
lettres
cours
Bases
données
partagées
Système
réseaux
Macro-
économie
etc.
•
numannée
code
formation
dépend
cours
•
numcmtd
code
type
cours
CMTD
TD
etc.
•
numcnu
code
section
CNU
laquelle
rattaché
cours
•
heures
nombre
heures
enseignement
groupe
cours
•
groupes
nombre
groupes
concernés
cours
35.7.7.
statut
table
contient
descriptions
statuts
Maître
conférences
Professeur
etc.
•
numstatut
*
identifiant
•
intitulé
intitulé
toutes
lettres
statut
Maître
conférences
Professeur
etc.
•
service
service
dû
statutairement
peut
ensuite
être
modifié
chaque
enseignant
35.7.8.
enseignants
table
contient
descriptions
enseignants
•
numenseignant
*
identifiant
•
nom
nom
enseignant
137
Chapitre
35
Projet
Services
•
prenom
prénom
enseignant
•
service
service
dû
exprimé
heures
•
numstatut
code
statut
enseignant
•
numufr
code
UFR
dépend
enseignant
35.7.9.
affectations
table
sert
représenter
liaison
affectation
existant
entre
cours
enseignants
•
numcours
*
code
cours
concerné
affectation
•
numenseignant
*
code
enseignant
concerné
affectation
•
nbgroupes
nombre
groupes
concernés
affectation
35.8
Création
tables
35.8.1.
cmtd
CREATE
TABLE
cmtd
numcmtd
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitule
TEXT
valeur
NUMERIC
6
4
35.8.2.
ufr
CREATE
TABLE
ufr
numufr
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitule
TEXT
35.8.3.
formations
CREATE
TABLE
formations
numformation
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitule
TEXT
numufr
NUMERIC
7
NOT
NULL
FOREIGN
KEY
numufr
REFERENCES
ufr
numufr
35.8.4.
annees
CREATE
TABLE
annees
numannee
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitule
TEXT
niveau
INT4
numformation
NUMERIC
7
NOT
NULL
FOREIGN
KEY
numformation
REFERENCES
formations
numformation
138
Chapitre
35
Projet
Services
35.8.5.
cnu
CREATE
TABLE
cnu
numcnu
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitulé
TEXT
35.8.6.
cours
CREATE
TABLE
cours
numcours
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitule
TEXT
numannee
NUMERIC
7
NOT
NULL
numcmtd
NUMERIC
7
NOT
NULL
numcnu
NUMERIC
7
NOT
NULL
heures
NUMERIC
4,2
groupes
NUMERIC
4,2
FOREIGN
KEY
numcmtd
REFERENCES
cmtd
cnumcmtd
FOREIGN
KEY
numcnu
REFERENCES
cnu
cnumcnu
FOREIGN
KEY
numannee
REFERENCES
annees
numannee
35.8.7.
statut
CREATE
TABLE
statuts
numstatut
NUMERIC
7
NOT
NULL
PRIMARY
KEY
intitulé
TEXT
service
NUMERIC
6,2
35.8.8.
enseignants
CREATE
TABLE
enseignants
numenseignant
NUMERIC
7
NOT
NULL
PRIMARY
KEY
nom
TEXT
prenom
TEXT
service
NUMERIC
6,2
numstatut
NUMERIC
7
NOT
NULL
numufr
NUMERIC
7
NOT
NULL
FOREIGN
KEY
numufr
REFERENCES
ufr
cnumufr
FOREIGN
KEY
numstatut
REFERENCES
statuts
numstatut
35.8.9.
affectations
CREATE
TABLE
affectations
numcours
NUMERIC
7
NOT
NULL
numenseignant
NUMERIC
7
NOT
NULL
groupes
INT4
PRIMARY
KEY
numcours
numenseignant
FOREIGN
KEY
numcours
REFERENCES
cours
cnumcours
FOREIGN
KEY
numenseignant
REFERENCES
enseignants
numenseignant
35.9
Remplir
tables
paramètres
35.9.1.
statut
INSERT
INTO
statuts
VALUES
1
MdC
,192.0
INSERT
INTO
statuts
VALUES
2
Professeur
,192
INSERT
INTO
statuts
VALUES
3
PRAG
,384
INSERT
INTO
statuts
VALUES
4
ATER
,192
139
Chapitre
35
Projet
Services
INSERT
INTO
statuts
VALUES
5
Chargé
cours
,0
INSERT
INTO
statuts
VALUES
6
PAST
,96
35.9.2.
cnu
INSERT
INTO
cnu
VALUES
1
Droit
privé
sciences
criminelles
INSERT
INTO
cnu
VALUES
2
Droit
public
INSERT
INTO
cnu
VALUES
3
Histoire
droit
institutions
INSERT
INTO
cnu
VALUES
4
Science
politique
INSERT
INTO
cnu
VALUES
5
Sciences
économiques
INSERT
INTO
cnu
VALUES
6
Sciences
gestion
INSERT
INTO
cnu
VALUES
7
Sciences
langage
linguistique
phonétique
||
générales
INSERT
INTO
cnu
VALUES
8
Langues
littératures
anciennes
INSERT
INTO
cnu
VALUES
9
Langue
littérature
françaises
INSERT
INTO
cnu
VALUES
10
Littératures
comparées
INSERT
INTO
cnu
VALUES
11
Langues
littératures
anglaises
anglo-saxonnes
INSERT
INTO
cnu
VALUES
12
Langues
littératures
germaniques
scandinaves
INSERT
INTO
cnu
VALUES
13
Langues
littératures
slaves
INSERT
INTO
cnu
VALUES
14
Langues
littératures
romanes
espagnol
italien
||
portugais
autres
langues
romanes
INSERT
INTO
cnu
VALUES
15
Langues
littératures
arabes
chinoises
japonaises
||
hébraïques
d\
autres
domaines
linguistiques
INSERT
INTO
cnu
VALUES
16
Psychologie
psychologie
clinique
psychologie
sociale
INSERT
INTO
cnu
VALUES
17
Philosophie
INSERT
INTO
cnu
VALUES
18
Arts
plastiques
spectacle
musique
musicologie
||
esthétique
sciences
l\
art
INSERT
INTO
cnu
VALUES
19
Sociologie
démographie
INSERT
INTO
cnu
VALUES
20
Anthropologie
éthnologie
préhistoire
INSERT
INTO
cnu
VALUES
21
Histoire
civilisations
histoire
archéologie
||
mondes
anciens
mondes
médiévaux
l\
art
INSERT
INTO
cnu
VALUES
22
Histoire
civilisations
histoire
mondes
modernes
||
histoire
monde
contemporain
l\
art
musique
INSERT
INTO
cnu
VALUES
23
Géographie
physique
humaine
économique
régionale
INSERT
INTO
cnu
VALUES
24
Aménagement
l\
espace
urbanisme
INSERT
INTO
cnu
VALUES
25
Mathématiques
INSERT
INTO
cnu
VALUES
26
Mathématiques
appliquées
applications
mathématiques
INSERT
INTO
cnu
VALUES
27
Informatique
INSERT
INTO
cnu
VALUES
28
Milieux
denses
matériaux
INSERT
INTO
cnu
VALUES
29
Constituants
élémentaires
140
Chapitre
35
Projet
Services
INSERT
INTO
cnu
VALUES
30
Milieux
dilués
optique
INSERT
INTO
cnu
VALUES
31
Chimie
théorique
physique
analytique
INSERT
INTO
cnu
VALUES
32
Chimie
organique
minérale
industrielle
INSERT
INTO
cnu
VALUES
33
Chimie
matériaux
INSERT
INTO
cnu
VALUES
34
Astronomie
astrophysique
INSERT
INTO
cnu
VALUES
35
Structure
évolution
terre
autres
planètes
INSERT
INTO
cnu
VALUES
36
Terre
solide
géodynamique
enveloppes
supérieures
||
paléobiosphère
INSERT
INTO
cnu
VALUES
37
Météorologie
océanographie
physique
physique
||
l\
environnement
INSERT
INTO
cnu
VALUES
39
Sciences
physico-chimiques
technologies
pharmaceutiques
INSERT
INTO
cnu
VALUES
40
Sciences
médicament
INSERT
INTO
cnu
VALUES
41
Sciences
biologiques
INSERT
INTO
cnu
VALUES
60
Mécanique
génie
mécanique
génie
civil
INSERT
INTO
cnu
VALUES
61
Génie
informatique
automatique
traitement
signal
INSERT
INTO
cnu
VALUES
62
Energétique
génie
procédés
INSERT
INTO
cnu
VALUES
63
Electronique
optronique
systèmes
INSERT
INTO
cnu
VALUES
64
Biochimie
biologie
moléculaire
INSERT
INTO
cnu
VALUES
65
Biologie
cellulaire
INSERT
INTO
cnu
VALUES
66
Physiologie
INSERT
INTO
cnu
VALUES
67
Biologie
populations
écologie
INSERT
INTO
cnu
VALUES
68
Biologie
organismes
INSERT
INTO
cnu
VALUES
69
Neurosciences
INSERT
INTO
cnu
VALUES
70
Sciences
l\
éducation
INSERT
INTO
cnu
VALUES
71
Sciences
l\
information
communication
INSERT
INTO
cnu
VALUES
72
Epistémologie
histoire
sciences
techniques
INSERT
INTO
cnu
VALUES
73
Cultures
langues
régionales
INSERT
INTO
cnu
VALUES
74
Sciences
techniques
activités
physiques
sportives
INSERT
INTO
cnu
VALUES
7501
Théologie
catholique
INSERT
INTO
cnu
VALUES
7502
Théologie
protestante
35.9.3.
cmtd
INSERT
INTO
cmtd
VALUES
1
CM
,1.5
INSERT
INTO
cmtd
VALUES
2
TD
,1
141
Chapitre
35
Projet
Services
142
Chapitre
36
Projet
Disques
Maîtrise
AES-TEG
2000-2002
pouvez
consulter
pages
originales1
web
36.1
Approche
naïve
souhaite
mémoriser
contenu
discothèque
but
prêt
disques
CD
vinyl
adhérents
faut
connaître
œuvres
exemplaires
chaque
œuvre
artistes
correspondants
renseignements
adhérents
faire
première
solution
consisterait
gros
tableau
permettant
stocker
toutes
informations
dispose
album
nom
album
interprète
morceaux
plusieurs
genre
musique
type
support
vinyl
CD
etc
ainsi
celles
dispose
adhérents
représentation
informations
plat
sous
forme
seul
tableau
montre
emblée
limites
•
effet
va
reprendre
systématiquement
toutes
informations
liées
album
fait
colonne
titres
contient
plusieurs
titres
album
•
ailleurs
disposition
privilégie
approche
informations
album
album
con-
séquent
moins
commode
approche
interprète
emprunteur
solution
difficultés
percevoir
séparement
éléments
entités
pourtant
bien
distinctes
albums
interprètes
adhérents
occasion
difficultés
regrouper
certaines
informations
albums
in-
terprète
albums
genre
albums
empruntés
adhérent
etc
dispose
bien
tableur
possiblité
trier
tableau
suivant
telle
telle
colonne
là
heurte
problème
choix
raison
privilégier
ordre
rapport
autre
ailleurs
dès
lors
tableau
trié
agit
respecter
ordre
lors
toute
mise-à-jour
tableau
complique
procédure
saisie
nouveaux
albums
tableau
devait
être
trié
recherche
information
précise
demeurerait
assez
fastidieuse
recherche
devient
encore
moins
aisée
agit
retrouver
croisements
information
X
t-il
fait
reprise
titre
déjà
interprété
difficulté
corse
encore
lorsqu
agit
plus
accéder
information
extraire
série
informations
albums
Jean
Ferrat
contiennent
textes
Aragon
remarque
également
telle
représentation
nombreuses
informations
figurent
plusieurs
fois
artiste
nom
prénom
emprunteur
adresse
informations
saisies
individuellement
outre
perte
efficacité
existe
risques
incohérence
donnée
saisie
différemment
deux
endroits
distincts
répétition
donnée
peut
être
également
pénalisante
celle-ci
vient
changer
effet
lieu
avoir
procéder
seule
mise-à-jour
obligé
reporter
modification
partout
donnée
figure
là
encore
perte
efficacité
risque
incohérence
exemple
faire
lorsqu
chanteur
décide
changer
nom2
36.2
Analyse
Quelles
entités
peut-on
identifier
Elles
nombre
5
Disques
entité
centrale
base
données
agit
œuvre
abstraite
comme
parle
album
blanc
Beatles
sans
référer
exemplaire
précis
seulement
œuvre
elle-même
propriétés
disque
•
intitulé
1.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2000-2001/mait_aes/projet
2
Idée
bizarre
sais
quand
fait
Prince
enlève
ailleurs
rien
bizarreté
fait
143
Chapitre
36
Projet
Disques
•
année
parution
•
morceaux
composent
•
genre
musique
rock
classique
etc
Artistes
enregistré
tel
disque
propriétés
artiste
•
nom
•
prénom
•
éventuellement
groupe
accompagne
Exemplaires
entité
Exemplaires
totalement
différente
entité
Disques
agit
objet
physique
exemplaire
physique
disque
exemple
exemplaire
vinyl
album
blanc
Beatles
trouve
discothèque
grand-mère
peut
avoir
plusieurs
exemplaires
disque
propriétés
exemplaire
•
type
support
CD
vinyl
•
prix
remboursement
cas
perte
détérioration
Adhérents
agit
personnes
inscrites
club
propriétés
adhérent
•
nom
•
prénom
•
adresse3
•
date
début
adhésion
•
nombre
personnes
accès
disques
empruntés
adhérent4
pouvoir
faire
quelques
statistiques
pénétration
disques
stock
public
Prêts
Tel
adhérent
emprunte
tel
exemplaire5
propriétés
prêt
•
date
début
date
sortie
exemplaire
•
date
fin
date
rentrée
exemplaire
relations
existant
entre
entités
décrites
figure
ci-dessous
Figure
36-1
Relations
base
Disques
première
version
remarque
assez
vite
choix
vont
amener
difficultés
•
fait
figurer
villes
chaque
fiche
adhérent
crée
redondance
données
risque
inconsistance
va
créer
nouvelle
entité
Villes
propriétés
ville
3
pur
souci
simplification
base
peu
éloignés
réalité
décidant
conserver
ville
résidence
adresse
adhérent
choix
tout
fait
mauvais
réalité
4
souvent
nombre
personnes
vivant
domicile
5
autre
analyse
pu
amener
considérer
Prêts
comme
relation
entre
Exemplaires
Adhérents
non
comme
entité
propre
discussion
peut
être
très
longue
sujet
toutes
façons
résultat
identique
presque
144
Chapitre
36
Projet
Disques
•
nom
•
code
postal
•
remarque
genre
musical
disques
va
créer
nouvelle
entité
Genres
seule
propriété
genre
nom
•
Garder
titres
morceaux
composant
disque
renseignements
concernant
disque
lui-
pose
autre
problème
quelle
place
réserver
réserve
peu
place
vite
débordé
réserve
beaucoup
place
exemple
quoi
ranger
40
titres
perdra
place
énorme
réservée
tous
disques
compris
ceux
contiennent
dizaine
morceaux
cas
plupart
disques
pourra
quand
exister
disques
plus
morceaux
réservé6
autre
problème
résultant
choix
telle
structure
rend
presque
impossible
recherche
morceau
particulier
connait
titre
interprète
disque
allons
créer
nouvelle
entité
éclater
données
chansons
propriétés
chanson
•
titre
•
numéro
ordre
disque
relations
existant
entre
entités
décrites
figure
ci-dessous
Figure
36-2
Relations
base
Disques
deuxième
version
plus
question
maintenant
exemple
reporter
ligne
correspondant
exemplaire
toutes
informations
relatives
disque
placera
ligne
correspondante
information
particulière
partir
laquelle
pourra
retrouver
tableau
correspondant
concerne
disque
type
information
appelé
clef
étrangère
priori
dispose
clef
disques
contre
dispose
type
information
villes
plus
exactement
bureaux
distributeurs
code
postal
Ainsi
pourra
contenter
niveau
adresse
personne
bureau
distributeur
dès
lors
dispose
tableau
codePostal
bureauDistributeur
Reprenons
idée
code
numéro
matricule
albums
artistes
Cela
fait
partie
vie
numéro
INSEE
numéro
carte
étudiant
numéro
dossier
organisme
logeur
numéro
compte
banque
livres
numéro
ISBN
cote
appartiennent
bibliothèque
voitures
numéro
minéralogique
produits
commerce
codes
barres
etc
entités
clef
naturelle
devrons
créer
toutes
pièces
36.3
Dernières
remarques
fait
certaines
approximations
analyse
base
exemple
pris
compte
fait
artiste
peut
enregistrer
album
seul
intérieur
groupe
information
gérée
base
exemple
impossible
trouver
6
Tout
monde
sait
après
axiomes
ensemble
entiers
naturels
quelque
entier
choisi
existera
toujours
plus
grand
Ainsi
connaissances
musicales
étendues
sûr
vont
laisser
supposer
40
titres
comme
proposé
déjà
beaucoup
Eh
non
The
commercial
album
Residents
contient
50
morceaux
145
Chapitre
36
Projet
Disques
base
moindre
lien
entre
disques
Rolling
Stones
ceux
Mick
Jagger
Keith
Richard
remarque
Beatles
John
Lennon
également
fait
grosses
approximations
réfère
réel
adresses
déjà
mentionné
garde
ville
non
plus
tenu
compte
certaines
villes
bureau
distributeur
propre
cas
volontairement
oublié
conserver
champ
CodePostal
table
Villes
fonction
clef
Toutes
approximations
faites
général
but
pédagogique
afin
surcharger
base
rendre
compréhension
plus
aisée
faut
bien
souvenir
analyse
système
informatique
travail
objectif
dépend
surtout
vision
plus
moins
claire
souvent
futurs
utilisateurs
Quand
informaticien
réalise
analyse
compte
quelqu
autre
détecter
problèmes
éventuels
signaler
client
Cependant
dernier
peut
parfaitement
faire
toute
connaissance
cause
choix
paraissent
réducteurs
peu
oublis
ainsi
commis
concernent
informations
intéressent
gros
problème
tel
cas
éventuel
changement
avis
futur
alors
sans
doute
impossible
adapter
solution
choisie
Mieux
vaut
sur-abondance
raisonnable7
informations
utilise
instant
plutôt
oubli
informations
pourrait
avoir
besoin
plus
tard
36.4
autre
analyse
projet
Disques
trouverez
lignes
suivent
approche
fondamentalement
différente
analyse
faite
chapitre
précédent
analyse
prise
compte
reste
projet
seulement
présentée
montrer
problème
peut
amener
deux
structures
complètement
différentes
suivant
approche
36.4.1
Description
disque
composé
plages
musicales
avoir
base
performante
désire
distinguer
inter-
prétations
différentes
titre
exemple
faut
différencier
•
String
Quartet
N◦12
D.Schostakowitsch
disque
STRING
QUARTETS
1
9
&
12
enregistré
27/09/81
Borodin
String
Quartet
•
String
Quartet
N◦12
D.
Schostakowitsch
disque
GIDON
KREMER
Ed.Lockenhaus
Vol
4/5
enregistré
02/07/86
G.
Kremer
Y.
Horigome
K.
Kashkashian
D.
Geringas
informations
suivantes
mémoriser
titre
disque
références
édition
code
barre
titres
composent
puis
chaque
titre
compositeur
date
enregistrement
lieu
enregistrement
interprètes
durée
interprétation
compositeurs
interprètes
mémorise
nom
adoptera
choix
suivants
•
références
édition
celles
donne
éditeur
disque
exemple
ECM
New
Serie
736943
occupera
éditeur
•
compositeur
titre
considéré
comme
unique
plusieurs
compositeurs
relativement
rare
notés
comme
nom
unique
considérés
comme
groupe
Exemple
36-1
groupe
String
Quartet
N◦12
composé
D.
SCHOSTAKOWITSCH
The
Black
Angel
Death
Song
composé
groupe
REED/CALE
compositeur
peut
être
individu
groupe
7
problème
bien
définir
mot
raisonnable
146
Chapitre
36
Projet
Disques
•
interprètes
varient
selon
interprétations
interprètes
peuvent
être
compositeur
alors
interprète
comme
autre
groupe
regroupement
interprètes
groupe
interprètes
invités
tous
cas
seuls
noms
groupe
interprètes
agit
regroupement
interprètes
intéressent
Puis
recherche
plus
approfondie
membres
groupe
pourront
être
demandés
pouvez
considérer
groupe
comme
interprète
particulier
Exemple
36-2
groupe
interprète
invité
The
Black
Angel
Death
Song
THE
VELVET
UNDERGROUND
NICO
THE
VELVET
UNDERGROUND
groupe
niveau
peu
importe
composait
groupe
NICO
interprète
invitée
Exemple
36-3
Interprèete
compositeur
Riding
The
Westerleys
composé
interprété
TERRY
RILEY
•
interprétation
peut
apparaître
plusieurs
disques
•
tiendra
compte
différents
mouvements
intérieur
composition
classique
•
probabilité
titre
enregistré
interprètes
différents
jour
considérée
comme
nulle
égalité
possible
lieux
dates
enregistrements
considérée
comme
redondance
intéressant
savoir
quels
membres
groupe
cela
mémorisera
partir
quelle
date
interprète
appartient
groupe
quelle
date
suppose
quitte
supposera
programme
gère
validité
dates
36.4.2
Résultat
obtient
schéma
conceptuel
figure
suivante
Figure
36-3
autre
MCD
base
Disques
147
Chapitre
36
Projet
Disques
tables
•
table
Disques
contient
code
barre
titre
disque
nombre
plages
références
éditeur
•
table
Morceaux
correspond
interprétations
contient
informations
associées
enregistrement
durée
interprétation
peut
apparaître
plusieurs
disques
•
table
Œuvres
correspond
création
compositeur
•
table
CompInte
nom
donné
Compositeurs
Interprètes
contient
compositeurs
inter-
prètes
effet
compositeur
pouvant
être
interprète
informations
mémorisées
deux
cas
mêmes
peut
regrouper
deux
entités
seule
évitant
ainsi
dupliquer
infor-
mations
tous
compositeurs-interprètes
plus
table
contient
fiches
correspondant
aussi
bien
groupes
individus
Quand
œuvre
interprétée
groupe
trouvera
fiche
groupe
plus
souvent
possible
fiches
interprètes
appartiennent
groupe
fiche
interprétation
interprétée
groupe
préférence
reliée
groupe
plutôt
membres
groupe
trouvera
membres
groupe
relation
appartenance
Cela
permettra
traiter
tous
cas
possibles
particulier
aucun
problème
interprétation
groupe
invitant
interprète
aucune
difficulté
enregistrer
groupe
sans
connaître
membres
ajouter
membre
groupe
existant
définir
interprétation
effectuée
seul
membre
groupe
ajoute
champ
logique
appelé
EstGroupe
permettra
différencier
individus
groupes
contiendra
valeur
vrai
fiche
celle
groupe
valeur
faux
agit
individu
Appartenance
relation
entre
table
CompInte
vue
comme
contenant
fiches
groupes
table
CompInte
vue
comme
contenant
fiches
individus
relation
associées
informa-
tions
dates
début
fin
appartenance
groupe
élément
relation
indique
individu
interprète
fiche
table
CompInte
appartenu
groupe
fiche
aussi
table
CompInte
dates
gérées
telle
façon
base
reste
cohérente
interprète
référencé
fiche
table
Membres
supposé
avoir
participé
tous
enregistrements
effectués
groupe
référencé
entre
date
début
date
fin
appartenance
groupe
36.5
Création
tables
garnir
données
allez
pouvoir
laisser
faire
fichier
fera
tout
place
cela
déconnectez-vous
PostgreSQL
\q
reconnectez-vous
commande
suivante
psql
-f
/home/enseign/aesteg/creerdisques.sql
va
faire
exécuter
PostgreSQL
fichier
creerdisques.sql
contenant
commandes
données
nécessaires
remplissage
base
quelques
messages
erreur
faites
trop
condition
programme
arrive
terme
tables
créées
commandes
suivantes
•
table
artistes
CREATE
TABLE
artistes
codeartiste
INT4
PRIMARY
KEY
prenom
VARCHAR
nom
VARCHAR
groupe
VARCHAR
•
table
disques
œuvre
logique
comme
parle
album
blanc
Beatles
sans
référer
ex-
emplaire
précis
seulement
œuvre
elle-même
plupart
renseignements
trouvent
autres
tables
auxquelles
accès
grâce
clefs
étrangères
CREATE
TABLE
disques
codedisque
INT4
PRIMARY
KEY
artiste
INT4
annee
VARCHAR
intitule
VARCHAR
148
Chapitre
36
Projet
Disques
genre
INT4
•
table
chansons
fiche
correspond
chanson
disque
connait
disque
code
CREATE
TABLE
chansons
numero
INT4
disque
INT4
titre
VARCHAR
PRIMARY
KEY
numero
disque
•
table
genres
CREATE
TABLE
genres
codegenre
INT4
PRIMARY
KEY
genre
VARCHAR
•
table
prets
fiche
correspond
emprunt
exemplaire
CREATE
TABLE
prets
codepret
INT4
PRIMARY
KEY
exemplaire
INT4
adherent
INT4
sortie
DATE
retour
DATE
•
table
villes
CREATE
TABLE
villes
codepostal
VARCHAR
PRIMARY
KEY
ville
VARCHAR
•
table
adherents
CREATE
TABLE
adherents
codeadherent
INT4
PRIMARY
KEY
nom
VARCHAR
prenom
VARCHAR
dateadhesion
date
codepostal
VARCHAR
nbrepersonnes
INT4
•
table
exemplaires
exemplaire
physique
œuvre
exemple
exemplaire
vinyl
album
blanc
Beatles
trouve
discothèque
grand-mère
Chaque
exemplaire
peut
être
vinyl
CD
prix
indiqué
pouvoir
établir
facture
cas
perte
CREATE
TABLE
exemplaires
codeexemplaire
INT4
PRIMARY
KEY
disque
INT4
CDouVinyl
VARCHAR
prix
FLOAT4
36.6
travail
allez
devoir
réaliser
site
web
discothèque
totalement
libre
choix
contenu
site
seules
choses
importantes
•
site
devra
bien
entendu
utiliser
PHP
PostgreSQL
quand
projet
cours
deux
formulaires
trop
mal
vus
•
noté
état
site
fin
dernier
cours
contrôle
oral
contenu
autres
mots
vérifierai
bien
auteur
présenterez
•
Faites
mieux
pouvez
minimum
atteindre
•
ergonomie
facilité
utilisation
site
prises
compte
notation
•
pouvez
travailler
groupe
deux
pourrez
trouver
exemple8
quoi
cela
peut
ressembler
web
8.
http
//grappa.univ-lille3.fr/~gonzalez/enseignement/2000-2001/mait_aes/disques
149
Chapitre
36
Projet
Disques
150
Index
explode
22
fclose
61
action
17
fgets
61
62
ADODB
29
47
53
file
61
62
affectation
10
22
fopen
61
affectedRows
51
fputs
61
algorithmique
1
10
fwrite
61
alternative
1
10
gettype
23
analyse
146
header
35
apostrophe
21
implode
22
archive
47
include
33
assembleur
3
join
22
backslash
21
ltrim
22
base
données
43
opendir
57
boucle
10
pg_affected_rows
46
bouton
pg_connect
43
envoi
15
pg_fetch_array
44
radio
15
pg_numrows
44
reset
16
pg_query
43
45
45
submit
16
pg_result_status
46
case
cocher
15
phpinfo
9
champs
15
readdir
57
chaînes
caractères
21
require
33
opération
-
22
sort
63
checkbox
15
split
22
chop
22
strlen
22
clef
étrangère
145
strpos
23
closedir
57
strtolower
22
concaténation
10
22
strtoupper
22
connexion
base
données
47
str_replace
23
contrôle
types
10
substr
23
57
conversion
substr_replace
23
types
23
trim
22
majuscules-minuscules
22
fopen
61
minuscules-majuscules
22
for
10
couche
abstraction
47
foreach
27
count
27
formulaires
15
19
DBX
29
53
fputs
61
DB_FETCHMODE_ASSOC
50
fwrite
61
DB_FETCHMODE_ORDERED
49
50
GEDCOM
120
DELETE
45
46
gestion
erreurs
48
DocBook
1
GET
15
16
19
droits
accès
37
gettype
23
DSN
47
_GET
19
echo
9
guillemet
21
emacs
1
header
35
en-tête
HTTP
35
hidden
16
entité
143
HTML
1
1
erreur
48
HTTP_GET_VARS
19
explode
22
HTTP_POST_VARS
19
FAQ
7
hébergeur
29
47
53
fclose
61
identification
35
39
fermeture
fichier
61
if
10
fetchInto
49
images
cliquables
57
fetchRow
49
implode
22
fgets
61
62
include
33
fichier
61
informations
51
fermeture
61
input
15
ouverture
61
INSERT
45
46
file
61
62
interpréteur
3
7
fonction
11
itération
1
10
chop
22
JDN
47
closedir
57
join
22
echo
9
Journal
Net
47
151
langage
protocole
3
compilé
3
Quanta
1
scripting
7
radio
16
web
1
readdir
57
informatique
1
3
require
33
intermédiaire
4
require_once
47
interprété
3
requête
49
machine
3
reset
16
naturel
3
return
11
licence
GNU
FDL
3
répertoire
57
longueur
chaîne
22
safe
mode
19
35
ltrim
22
saisie
mot
passe
15
MCD
121
select
16
messages
erreurs
45
_SERVER
35
MetaData
29
53
sessions
39
MetatData
47
setfetchmode
49
MLD
100
102
107
112
116
SGBD
7
MySQL
29
47
53
sort
63
numCols
51
split
22
numRows
51
SQL
7
opendir
57
SQLite
29
47
53
openjade
1
string
21
opérateur
10
strlen
22
comparaison
11
strpos
23
concaténation
10
22
strtolower
22
logique
11
strtoupper
22
opérations
chaînes
22
structures
contrôle
1
10
ouverture
fichier
61
str_replace
23
page
web
dynamique
5
submit
16
password
15
substr
23
57
PDF
1
1
substr_replace
23
PDO
29
29
séparation
contenu
traitement
5
pear
47
séquence
1
10
Pear-DB
29
53
tableau
25
peardb
47
associatif
26
pg_affected_rows
46
tableInfo
51
pg_connect
43
TANT
10
pg_fetch_array
44
text
15
pg_last_error
45
textarea
16
pg_numrows
44
trim
22
pg_query
43
45
UPDATE
45
46
pg_result_status
46
variable
10
21
version
1
phpinfo
9
W3C
117
PHPLib
29
47
53
while
10
PHP_AUTH_PW
35
XML
1
PHP_AUTH_USER
35
xsltproc
1
PHP_AUTH_USER
35
zone
saisie
15
point-virgule
10
portable
3
POST
15
16
19
PostgreSQL
29
43
45
47
53
_POST
19
procédure
11
programmation
séparée
33
programmer
1
projet
Association
115
Brazil
127
Camping
105
111
Disques
143
Disques
2009
97
Généalogie
119
Inscriptions
101
Services
133
152
Document
Outline
PHP
initiation
Table
matières
I
cours
Chapitre
1
Pourquoi
comment
1.1
Introduction
1.2
Pourquoi
document
1.3
Comment
atil
construit
1.4
trouver
document
1.5
QBullets
Chapitre
2
Généralités
langages
informatiques
2.1
Qu'appelleton
langage
informatique
2.2
Langage
interprété
2.3
Langage
compilé
2.4
Langages
intermédiaires
Chapitre
3
langages
particuliers
langages
web
3.1
Pourquoi
programmer
3.2
Quels
langages
3.3
Avantages
inconvénients
3.4
Choisir
Chapitre
4
FAQ
élémentaire
PHP
4.1
Qu'est
PHP
4.2
Quelle
différence
Javascript
4.3
Pourquoi
choisir
PHP
lieu
Javascript
4.4
passetil
l'affichage
d'une
page
PHP
4.5
Comment
intégrer
PHP
HTML
Chapitre
5
Premiers
exemples
PHP
5.1
premier
programme
5.2
deuxième
programme
5.3
Rappels
d'algorithmique
5.4
Variables
expressions
5.5
Fonctions
5.6
Chapitre
6
Formulaires
HTML
6.1
Présentation
6.2
Principaux
contrôles
6.3
Exemples
Chapitre
7
Traitement
d'un
formulaire
PHP
7.1
Traitement
données
d'un
formulaire
PHP
7.2
Exercices
Chapitre
8
Chaînes
caractères
8.1
Qu'estce
qu'une
chaîne
caractères
8.2
choisir
Guillemets
apostrophes
8.3
Principales
utilisations
backslash
8.4
Principales
opérations
chaînes
8.5
Principales
fonctions
8.6
Conversions
types
8.7
Exercices
Chapitre
9
tableaux
9.1
Qu'estce
qu'un
tableau
9.2
Quelques
exemples
d'utilisation
9.2.1
Remplir
afficher
contenu
tableau
9.2.2
exemple
complet
9.3
tableaux
associatifs
9.4
Parcours
d'un
tableau
associatif
9.5
Exercices
Chapitre
10
PDO
10.1
Qu'estce
PDO
10.2
Quelle
utilité
10.3
connecter
base
données
10.4
Exécuter
requête
10.5
Nombre
lignes
colonnes
d'une
requête
select
10.6
Accéder
résultats
d'une
requête
select
10.6.1
Accès
nom
colonnes
10.6.2
Accès
numéro
colonnes
10.6.3
Accès
numéro
lignes
numéro
colonnes
10.7
Gestion
erreurs
10.7.1
Code
d'erreur
10.7.2
Informations
associées
l'erreur
10.7.3
Exemple
traitement
d'erreur
Chapitre
11
Programmation
séparée
PHP
11.1
programmation
séparée
11.2
fonctions
require
include
Chapitre
12
Identification
PHP
12.1
Préliminaires
fonction
header
12.2
Contrôle
mots
passe
12.3
Amélioration
plusieurs
utilisateurs
12.4
Séparer
données
traitement
12.5
Cacher
mots
passe
12.6
Crypter
mots
passe
Chapitre
13
Sessions
13.1
Préambule
13.2
Application
identification
visiteurs
II
Hors
programme
Chapitre
14
Utiliser
PHP
base
données
PostgreSQL
14.1
Connexion
base
14.2
Exécution
d'une
requête
14.3
Obtention
résultats
d'une
requête
14.4
exemple
14.5
Requêtes
autres
SELECT
14.6
Suppression
messages
d'erreurs
14.7
Gestion
erreurs
messages
14.7.1
Résultat
renvoyé
pgquery
cas
d'échec
14.7.2
Obtenir
texte
dernière
erreur
14.7.3
Obtenir
statut
connexion
14.7.4
Obtenir
nombre
lignes
affectées
requête
Chapitre
15.
peardb
présentation
15.1
Qu'estce
pear
15.2
Quelle
utilité
15.3
Utiliser
peardb
15.4
connecter
base
données
15.5
Gestion
erreurs
15.5.1
cas
d'erreur
15.5.2
Application
15.6
Exécuter
requête
15.7
Accéder
résultats
d'une
requête
select
15.7.1.
fetchRow
15.7.2.
fetchInto
15.8.
setfetchmode
15.9.
peardb
informations
requêtes
15.9.1.
numRows
15.9.2.
numCols
15.9.3.
affectedRows
15.9.4.
tableInfo
Chapitre
16.
dbx
16.1
Qu'estce
dbx
16.2
Quelle
utilité
16.3
connecter
base
données
16.4
Exécuter
requête
16.5
Nombre
lignes
colonnes
d'une
requête
select
16.6
Accéder
résultats
d'une
requête
select
16.6.1
Accès
nom
colonnes
16.6.2
Accès
numéro
colonnes
16.6.3
Accès
numéro
lignes
numéro
colonnes
Chapitre
17
Exploration
contenu
d'un
répertoire
17.1
notions
nécessaires
PHP
17.1.1
Exploration
d'un
répertoire
17.1.2
Extraction
d'une
souschaîne
caractères
17.2
notions
nécessaires
HTML
17.2.1
Images
cliquables
17.2.2
qu'un
lien
affiche
image
plutôt
qu'une
page
HTML
PHP
17.3
Exercices
Chapitre
18
News
18.1
Présentation
18.2
travail
18.3
temps
Chapitre
19
fichiers
19.1
Manipulations
base
19.1.1
Ouverture
fermeture
d'un
fichier
19.1.2
Écrire
fichier
19.1.3
Lire
contenu
d'un
fichier
19.2
exemple
19.3
Exercice
III
Corrigés
exercices
Chapitre
20
Premiers
exercices
d'algorithmique
corrigés
Chapitre
21
Premiers
formulaires
PHP
corrigés
Chapitre
22
Chaînes
caractères
corrigé
Chapitre
23
Exercices
tableaux
corrigés
Chapitre
24
Exercices
fichiers
corrigés
Chapitre
25
Exploration
d'un
répertoire
corrigés
Chapitre
26
News
corrigé
26.1
Accueil
26.2
Liste
noms
fichiers
nouvelles
26.3
Liste
liens
vers
fichiers
nouvelles
26.4
Affichage
toutes
nouvelles
26.5
Affichage
titres
nouvelles
26.6
Affichage
titres
faisant
lien
vers
nouvelles
26.7
Affichage
toutes
nouvelles
proprement
26.8
Choix
sujet
IV
Études
cas
Chapitre
27
Études
cas
Chapitre
28
Projet
Disques
2009
28.1
Présentation
28.1.1
Fonctionnalités
générales
28.1.2
Fonctionnalités
consultation
28.1.3
Modification
données
accès
données
sensibles
28.1.3.1
Niveau
faible
28.1.3.2
Niveau
fort
28.2
base
données
28.2.1
tables
28.2.2
MLD
Chapitre
29
Projet
Inscriptions
29.1
Présentation
29.1.1
Fonctionnalités
générales
29.1.2
Fonctionnalités
calendrier
29.1.3
Gestion
base
29.2
base
données
29.2.1
MLD
29.2.2
tables
Chapitre
30
Projet
Teniraq
30.1
Présentation
30.1.1
Adhésions
30.1.2
Entrées
salles
30.1.3
Réservations
courts
30.1.4
Matchs
défis
30.1.5
Paramétrage
30.2
base
données
30.2.1
MLD
30.2.2
tables
Chapitre
31
Projet
Camping
31.1
Présentation
31.2
informations
conserver
31.3
traitements
31.4
base
données
31.4.1
MLD
31.4.2
tables
Chapitre
32
Projet
Association
32.1
Contenu
site
web
32.2
Conditions
travail
32.3
Base
données
32.4
MLD
projet
Association
32.5
Création
tables
base
Association
32.5.1
Création
tables
32.5.2
Contraintes
32.6
Évaluation
32.7
Dernier
conseil
Chapitre
33
Projet
Généalogie
33.1
Généralités
33.2
données
conserver
33.2.1
données
base
33.2.2
Données
supplémentaires
33.3
Traitement
données
33.4
Optimisations
33.5
Importexport
33.6
MCD
projet
généalogie
33.7
différentes
tables
33.7.1
tables
entités
33.7.1.1
table
individus
33.7.1.2
table
villes
33.7.1.3
table
lieux
33.7.1.4
table
couples
33.7.1.5
table
types
couple
33.7.1.6
table
types
document
33.7.1.7
table
documents
33.7.2
tables
relations
33.7.2.1
table
lie
documents
couples
33.7.2.2
table
lie
documents
lieux
33.7.2.3
table
lie
documents
individus
33.8
différentes
contraintes
33.8.1
table
individu
33.8.2
table
ville
33.8.3
table
lieu
33.8.4
table
couple
33.8.5
table
typecouple
33.8.6
table
typedocument
33.8.7
table
document
33.8.8
table
doccouple
33.8.9
table
doclieu
Chapitre
34
Projet
Brazil
34.1
Description
34.2
tables
entités
34.2.1
table
citoyen
34.2.2
table
ville
34.2.3
table
rue
34.2.4
table
maladie
34.2.5
table
service
34.2.6
table
ministere
34.3
tables
relations
34.3.1
Associer
maladie
citoyen
listemaladie
34.3.2
Associer
adresse
citoyen
habite
34.3.3
Associer
citoyen
service
lequel
travaille
travaillepour
34.3.4
Associer
service
ministère
lequel
produit
serviceproduit
34.3.5
Associer
service
ministère
auquel
appartient
serviceappartient
34.3.6
Associer
service
ministère
qu'il
contrôle
servicecontrole
34.3.7
Associer
citoyen
ministère
qu'il
dirige
tabledirige
34.4
contraintes
34.4.1
table
ville
34.4.2
table
rue
34.4.3
table
citoyen
34.4.4
table
habite
34.4.5
table
maladie
34.4.6
table
listemaladie
34.4.7
table
service
34.4.8
table
ministere
34.4.9
table
travaillepour
34.4.10
table
serviceproduit
34.4.11
table
serviceappartient
34.4.12
table
servicecontrole
34.4.13
table
dirige
Chapitre
35
Projet
Services
35.1
But
projet
35.2
Fonctionnement
35.2.1
utilisateurs
n'ont
mêmes
droits
suivant
identité
35.2.2
Fonctionnalités
requises
consultation
35.2.3
Fonctionnalités
requises
mise
jour
35.3
Informations
plus
techniques
35.4
Question
subsidiaire
comment
gérer
l'historique
base
35.5
Vocabulaire
utilisé
35.6
Première
ébauche
structure
35.7
Structures
tables
35.7.1.
cmtd
35.7.2.
ufr
35.7.3.
formations
35.7.4.
annees
35.7.5.
cnu
35.7.6.
cours
35.7.7.
statut
35.7.8.
enseignants
35.7.9.
affectations
35.8
Création
tables
35.8.1.
cmtd
35.8.2.
ufr
35.8.3.
formations
35.8.4.
annees
35.8.5.
cnu
35.8.6.
cours
35.8.7.
statut
35.8.8.
enseignants
35.8.9.
affectations
35.9
Remplir
tables
paramètres
35.9.1.
statut
35.9.2.
cnu
35.9.3.
cmtd
Chapitre
36
Projet
Disques
36.1
Approche
naïve
36.2
Analyse
36.3
Dernières
remarques
36.4
autre
analyse
projet
Disques
36.4.1
Description
36.4.2
Résultat
36.5
Création
tables
36.6
travail
Index
