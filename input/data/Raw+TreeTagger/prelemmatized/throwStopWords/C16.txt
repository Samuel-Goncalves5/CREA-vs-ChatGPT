Programmation
Web
PHP
l'aimable
autorisation
Jérôme
CUTRONA
PHP
Langage
script
Web

est-ce
PHP







Langage
script
Utilisé
coté
serveur
Acronyme
récursif
PHP
Hypertext
Preprocessor
Créé
1994-1995
Rasmus
Lerdorf
Extension
utilisée
certains
serveurs
Web
33
Langage
multi
plate-forme
UNIX
/
Windows…
Open
Source
Versions
actuelles
source
nexen.net

PHP4
52
octobre
2008

PHP5
48
octobre
2008
10:11:04
Programmation
Web
2012-2013
2
Utilité
utilisation
PHP

Création
pages
HTML
dynamiques
fabriquées
volée
construite
demande

Interface
entre
serveur
Web
bases
données

Création
applications
Web
10:11:04
Programmation
Web
2012-2013
3
Principales
fonctionnalités
PHP









Manipulation
chaînes
tableaux
Calendrier
/
dates
/
heures
Fonctions
mathématiques
Accès
système
fichiers
Manipulation
images
HTTP
/
FTP
/
IMAP
Bases
données
Oracle
MySQL
…
XML
…
10:11:05
Programmation
Web
2012-2013
4
Fonctionnement
PHP
Requête
HTTP
client
port
hello.php
Rendu
Localisation
Connexion
Exécution
Fermeture
graphique
code
code
connexion
serveur
ressource
PHP
PHP
données
Envoi
résultat
client
Localisation
Rendu
Exécution
Fermeture
Connexion
Requête
graphique
HTTP
code
code
connexion
serveur
ressource
client
PHP
PHP
données
port
hello.php
dans80
80
fichier
fichier
Envoi
résultat
client
==
réponse
réponse
HTTP
HTTP
Client
Client
GET
Navigateur
GET
/hello.php
/hello.php
HTTP/1.0
HTTP/1.0
Réseau
•HTML
Réseau
•JavaScript
•CSS
Protocole
Protocole
HTTP
HTTP
Exécution
Exécution
programme
programme
serveur
serveur
Construction
réponse
Construction
réponse
html
html
head
head
Serveur
Serveur
title
title
Hello
Hello
/
/title
title
/
/head
head
Serveur
Web
.html
body
body
Hello
Hello
world
world
/
/body
body
.php
/
/html
html
.jpg
Module
PHP
MySQL
10:11:05
php
php
echo
hello.php
echo
HTML
HTML
hello.php
html
html
head
head
title
title
Hello
Hello
/
/title
title
/
/head
head
body
body
Hello
Hello
world
world
/
/body
body
/
/html
html
HTML
HTML
Programmation
Web
2012-2013
5
Fonctionnement
PHP
Client

Serveur
1
2
3
4
5
Connexion
TCP
serveur
port
80
Requête
HTTP
client
mon_fichier.php
Localisation
ressource
Exécution
code
PHP
Envoi
résultat
exécution
client
=
réponse
HTTP
6
Fermeture
connexion
7
Rendu
graphique
données
HTML
image
…
10:11:05
Programmation
Web
2012-2013
6
Programme
PHP
Délimitation
code
PHP
fichier
.php

php
Code
PHP
Fermeture
Fermeture
optionnelle
optionnelle

script
language=
PHP
Confusion
Confusion
JavaScript
JavaScript


àà
bannir
bannir
Code
PHP
/script


Code
PHP
Code
PHP
10:11:06
Dépend
Dépend
configuration
configuration
short_open_tag
short_open_tag
serveur
serveur
asp_tags
asp_tags


àà
bannir
bannir
Programmation
Web
2012-2013
7
Eléments
syntaxe
PHP

syntaxe
PHP
ressemble
celle
famille
C++
Java
…

Chaque
instruction
termine
``

Commentaires
/
*
jusqu
prochain
*
/
//
jusqu
fin
ligne
#
jusqu
fin
ligne
10:11:06
Programmation
Web
2012-2013
8
variables
types
données

Tout
identificateur
commence
``

affectations
réalisées
grâce
``
=

Numérique
entier
12
réel
1.54

Chaîne
``
Hello
Bonjour

Booléen
true
false
PHP
4

Tableau
tab
2
=12

Objet
PHP4
PHP5

Ressource

NULL

type
variable
dynamique
déterminé
valeur
affectée
10:11:06
Programmation
Web
2012-2013
9
Typage
faible
Exemple
//
déclaration
variable
test
=
1.5
//
Réel
test
=
12
//
Entier
test
=
array
//
Tableau
test
=
``
10
//
Chaîne
echo
test
//
10
10:11:07
Programmation
Web
2012-2013
10
Typage
automatique
Exemple
nombre1
nombre2
chaine1
chaine2
=
=
=
=
1.5
12
10
'coucou
'
//
//
//
//
Réel
Entier
Chaîne
Chaîne
total
=
nombre1
+
nombre2
+
chaine1
+
chaine2
1.5
1.5
12
12
10
10
13.5
13.5
10
10
23.5
23.5
echo
total
//
23.5
Réel
10:11:07
'coucou'
'coucou'
Programmation
Web
2012-2013
00
23.5
23.5
11
chaînes
caractères
Substitution
variables
chaînes

Guillemets
simples


a='chaîne
'
b='voici
'

Guillemets
doubles


a=
chaîne
b=
voici

Syntaxe
HereDoc


10:11:07
a=
chaîne
b=
MARQUE_DE_FIN
voici
deux
lignes
-
MARQUE_DE_FIN
chaîne
chaîne
voici
voici
chaîne
chaîne
voici
voici
chaîne
chaîne
chaîne
chaîne
voici
voici
chaîne
chaîne
deux
deux
lignes
lignes
-
-
Programmation
Web
2012-2013
12
Concaténation
chaînes


Permet
assembler
plusieurs
chaînes
Réalisé
grâce
opérateur
point
``
Bonjour
``
``
Marcel

vaut
``
Bonjour
Marcel
nb
=
6
*
2
Acheter
``
nb

vaut
10:11:08
``
oeufs
Acheter
12
oeufs
Programmation
Web
2012-2013
13
commande
echo

Permet
envoyer
texte
navigateur
client
écrire
page
format
HTML
résultant
interprétation
PHP


echo
``
Bonjour
nom=
Marcel
echo
``
Bonjour
nom

Plus
généralement
permet
envoyer
octets
navigateur
client



10:11:08
Ficher
HTML
XML
CSS
JavaScript
…
Données
d'une
image
Contenu
d'un
ficher
PDF
Flash
etc
Programmation
Web
2012-2013
14
Hello
world
Interprétation
Interprétation
code
code
PHP
PHP
serveur
serveur
php
Serveur
Navigateur
php
transmission
résultat
client
transmission
résultat
client
debut
debut
==
HTML
HTML
html
html
head
head
title
title
hello
hello
/
/title
title
/
/head
head
body
body
\n
\n
HTML
HTML
corps
corps
==
``
Hello
Hello
world
world
\n
\n
fin
==
fin
HTML
HTML
/
/body
body
/
/html
html
HTML
HTML
/
*
/
*
Envoi
Envoi
client
client
*
/
*
/
echo
echo
debut
debut.
corps
corps.
fin
fin
html
html
head
head
title
title
hello
hello
/
/title
title
/
/head
head
body
body
Hello
Hello
world
world
/
/body
body
/
/html
html
Impossible
Impossible
voir
voir
code
code
PHP
PHP
depuis
depuis
navigateur
navigateur
10:11:08
Programmation
Web
2012-2013
15
opérateurs
arithmétiques
b
Somme
b
Différence
b
Multiplication
+
*
/
b
Division
b
Modulo
Reste
division
entière
10:11:09
Programmation
Web
2012-2013
16
opérateurs
in-
dé-crémentation
pré-
post-fixés
a++
++
10:11:09
Retourne
valeur
puis
augmente
valeur
1
Augmente
valeur
1
puis
retourne
nouvelle
valeur
Retourne
valeur
puis
diminue
valeur
1
Diminue
valeur
1
puis
retourne
nouvelle
valeur
Programmation
Web
2012-2013
17
opérateurs
comparaison
==
b
=
b
b
b
=
b
=
b
===
b
==
b
10:11:09
Vrai
égalité
entre
valeurs
b
Vrai
différence
entre
valeurs
b
Vrai
inférieur
b
Vrai
supérieur
b
Vrai
inférieur
égal
b
Vrai
supérieur
égal
b
Vrai
b
identiques
valeur
type
Vrai
b
différents
valeur
type
Programmation
Web
2012-2013
18
opérateurs
logiques
and
Expr2
Expr1
&
&
Expr2
Expr1
or
Expr2
Expr1
||
Expr2
Expr1
Expr1
10:11:10
xor
Vrai
Expr1
Expr2
vraies
idem
Vrai
Expr1
Expr2
vraies
idem
Vrai
Expr1
Expr2
vraies
Expr2
deux
Expr1
Vrai
Expr1
non
vraie
Programmation
Web
2012-2013
19
opérateurs
bits
&
|
^
b
binaire
b
binaire
b
XOR
binaire
~
b
b
10:11:10
Inversion
bit
bit
décalé
gauche
b
rangs
décalé
droite
b
rangs
Programmation
Web
2012-2013
20
Précédence
opérateurs
10:11:10
Programmation
Web
2012-2013
21
Précédence
opérateurs
cas
cas
doute
doute
utilisez
utilisez
parenthèses
parenthèses
-
-
10:11:11
Programmation
Web
2012-2013
22
Structure
contrôle
Si…Alors…Sinon…
if
condition
{
/
*
Bloc
instructions
exécuté
condition
vraie
*
/
}
else
{
/
*
Bloc
instructions
exécuté
condition
fausse
*
/
}
10:11:11
Programmation
Web
2012-2013
23
Structure
contrôle
Tant
que…
faire…
while
condition
{
/
*
Bloc
instructions
répété
tant
condition
vraie
*
/
}
do
{
/
*
Bloc
instructions
exécuté
fois
puis
répété
tant
condition
vraie
*
/
}
while
condition
10:11:11
Programmation
Web
2012-2013
24
Structure
contrôle
Tant
que…
faire…
for
avant
condition
fin_chaque_itération
{
/
*
Bloc
instructions
répété
tant
condition
vraie
*
/
}
Équivalent
avant
while
condition
{
/
*
Bloc
instructions
répété
tant
condition
vraie
*
/
fin_chaque_itération
}
10:11:12
Programmation
Web
2012-2013
25
Structure
contrôle
switch…
switch
val
{
case
v1
instructions
case
v2
instructions
}
exécutées
val==v1
exécutées
val==v2
val==v1
…
default
instructions
tous
cas
10:11:12
Programmation
Web
2012-2013
26
instruction
break
Permet
sortir
structure
contrôle
switch
val
{
case
v1
instructions
exécutées
val==v1
break
/
*
sort
switch
val==v1
*
/
case
v2
instructions
exécutées
val==v2
val==v1
break
/
*
sort
switch
val==v2
*
/
…
default
instructions
exécutées
tous
cas
val
=v1
val
=v2
}
10:11:12
Programmation
Web
2012-2013
27
tableaux

Création
/
initialisation
tab1=array
12
``
fraise
2.5
tab2
tab2
tab2
=
=
=
12
fraise
2.5
tab3
0
=
12
tab3
1
=
``
fraise
tab3
2
=
2.5
10:11:13
Programmation
Web
2012-2013
Clé
Valeur
0
12
1
fraise
2
2.5
28
tableaux
trous

éléments
tableaux
forcement
indices
consécutifs
tab4
0
tab4
1
tab4
2
tab4
5
=
=
=
=
12
fraise
2.5
el5
Clé
Valeur
0
12
1
``
fraise
2
3
4
5
2.5
el5

Comment
parcourir
tels
tableaux
10:11:13
Programmation
Web
2012-2013
29
tableaux
trous
suite
4
Parcours
classique
for
i=0
i
sizeof
tab4
i++
{
echo
``
tab4
i
``
tab4
i
``
BR
\n
}
Clé
Valeur
10:11:13
Programmation
Web
2012-2013
0
1
12
fraise
2
3
2.5
4
5
el5
30
Structure
contrôle
chaque…
foreach
tableau
element
{
/
*
Bloc
instructions
répété
chaque
élément
tableau
*
/
/
*
Chaque
élément
tableau
accessible
grâce
element
*
/
}
10:11:14
Programmation
Web
2012-2013
31
Parcours
tableau
foreach
PHP
…
tab4
0
=
12
tab4
1
=
``
fraise
tab4
2
=
2.5
tab4
5
=
``
el5
foreach
tab4
v
{
echo
``
Val
v
br
\n
}
…
10:11:14
HTML
…
Val:12
br
\n
Val
fraise
br
\n
Val:2.5
br
\n
Val
el5
br
\n
…
Programmation
Web
2012-2013
Navigateur
32
Tableaux
associatifs

Tableaux
accès
éléments
plus
réalisé
grâce
index
0,1
…
grâce
clé
type
entier
chaîne

Exemples
clés
tab
'un
'
=
12
tab
205
=
``
bonjour
tab
``

Création
valeur
tab
=
array
cle1
=
cle2
=
=
3.0
val1
val2
…
10:11:14
Programmation
Web
2012-2013
33
Tableaux
associatifs
-
Exemples
tab5
'un
'
tab5
'trois
'
tab5
``
deux
tab5
42
=
=
=
=
12
fraise
2.5
el5
Clé
10:11:15
=
=
=
=
12
trois
fraise
deux
2.5
42
tab6
=
array
'un'
'trois'
deux
42
Valeur
el5
12
fraise
2.5
el5
Programmation
Web
2012-2013
34
Structure
contrôle
chaque…
foreach
tableau
cle
=
element
{
/
*
Bloc
instructions
répété
chaque
élément
tableau
*
/
/
*
Chaque
élément
tableau
accessible
grâce
element
*
/
/
*
clé
accès
chaque
élément
donnée
cle
*
/
}
10:11:15
Programmation
Web
2012-2013
35
Parcours
tableau
php
php
html
html
==
HTML
HTML
html
html
head
head
title
title
foreach
foreach
clé
clé
/
/title
title
/
/head
head
body
body
HTML
HTML
tab6
=
tab6
==
array
array
``
=
12
12
deux
=
deux
=
``
fraise
fraise
trois
trois
=
=
2.5
2.5
quatre
quatre
=
=
``
el5
el5
foreach
foreach
tab6
tab6
cle
cle
=
=
val
val
{
{
html
html
.=
.=
``
tab
tab
cle
cle
val
val
br
br
\n
\n
}
}
echo
echo
html
html
..
``
/
/body
body
\n
/
\n
/html
html
10:11:15
Programmation
Web
2012-2013
36
Exemple
génération
code
HTML
php
php
html
html
==
HTML
HTML
DOCTYPE
DOCTYPE
html
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
meta
meta
http-equiv
http-equiv==
Content-Type
Content-Type
content
content==
text/html
text/html
charset=iso-8859-1
charset=iso-8859-1
title
title
Boucle
/
Boucle
/title
title
/
/head
head
body
body
HTML
HTML
for
for
ii==1
1
ii
20
20
ii++
++
{
{
html
html
.=
.=
``
serveur
serveur
compte
compte
``
..
ii
..
``
br
br
\n
\n
}
}
html
html
.=
.=
HTML
HTML
/
body
/body
/
/html
html
HTML
HTML
echo
echo
html
html
10:11:16
Programmation
Web
2012-2013
37
Traitement
données
formulaires

PHP
permet
traiter
données
saisies
grâce
formulaire
HTML
champ
ACTION
formulaire
désigne
page
PHP
serveur

Après
récupération
serveur
Web
données
contenues
l'une
variables
superglobales
type
tableau
associatif
_GET
_POST
_REQUEST

valeur
peut
être
trouvée
grâce
clé
porte
nom
champs
formulaire
page
HTML
saisie
10:11:16
Programmation
Web
2012-2013
38
Traitement
données
formulaires
Réseau
Réseau
Client
Client
Navigateur
•HTML
nomPers=robert
nomPers=robert
•JavaScript
•CSS
html
html
head
head
Serveur
Serveur
nomPers
title
nomPers
title
bonjour
bonjour
/
/title
title
/
/head
head
Serveur
Web
php
php
body
body
html
html
==
HTML
HTML
Bonjour
Bonjour
robert
robert
html
html
/
/body
body
head
head
title
title
bonjour
bonjour
/
/title
title
/
/head
head
/
html
/
html
PHP
Module
body
body
HTML
HTML
html
html
.=
.=
``
Bonjour
Bonjour
``
_GET
_GET
``
nomPers
nomPers
..
\n
\n
echo
echo
html
html
..
``
/
/body
body
\n
\n
/
/html
html
robert
robert
10:11:17
Programmation
Web
2012-2013
39
Exemple
–
Formulaire
HTML
DOCTYPE
DOCTYPE
html
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
title
title
formulaire
formulaire
/
/title
title
/
/head
head
body
body
form
form
action
action==
valide1.php
valide1.php
method
method==
get
get
Nom
Nom
input
input
type
type==
text
text
name
name==
nomPers
nomPers
input
input
type
type==
submit
submit
value
value==
Envoyer
Envoyer
/
/form
form
/
/body
body
/
/html
html
10:11:17
Programmation
Web
2012-2013
40
Exemple
–
Traitement
PHP
php
php
html
html
==
HTML
HTML
DOCTYPE
html
DOCTYPE
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
_GET
title
_GET
``
nomPers
nomPers
title
Validation
Validation
/
/title
title
/
/head
head
est-il
défini
est-il
défini
body
body
HTML
HTML
if
if
isset
isset
_GET
_GET
``
nomPers
nomPers
_GET
_GET
``
nomPers
nomPers
{
{
est-il
est-il
vide
vide
if
if
empty
empty
_GET
_GET
``
nomPers
nomPers
{
{
html
html
.=
.=
``
saisi
saisi
``
_GET
_GET
``
nomPers
nomPers
..
\n
\n
}
}
else
else
html
html
.=
.=
``
Aucune
Aucune
valeur
valeur
saisie
saisie\n
\n
}
}
else
else
html
html
.=
.=
``
Utilisation
Utilisation
incorrecte
incorrecte\n
\n
echo
echo
html
html
..
``
/
/body
body
\n
\n
/
/html
html
10:11:17
Programmation
Web
2012-2013
41
Formulaires
contenant
champs
SELECT
10:11:18
Programmation
Web
2012-2013
42
Formulaires
contenant
champs
SELECT
unique
DOCTYPE
DOCTYPE
html
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
title
title
Formulaire
Formulaire
saisie
saisie
fruits
fruits
/
/title
title
/
/head
head
body
body
form
form
action
action==
valide3.php
valide3.php
method
method==
get
get
Choisissez
Choisissez
fruits
fruits
&
nbsp
&
nbsp
select
select
name
name==
sel
sel
option
option
Fraise
Fraise
option
option
Pomme
Pomme
option
option
Poire
Poire
Envoyer
Envoyer
option
option
Banane
Banane
option
option
Cerise
Cerise
/
/select
select
input
input
type
type==
submit
submit
value
value==
envoyer
envoyer
/
/form
form
/
/body
body
valide3.php
valide3.php
sel=Pomme
sel=Pomme
/
html
/html
10:11:18
Programmation
Web
2012-2013
43
Formulaires
contenant
champs
SELECT
multiple
DOCTYPE
html
PUBLIC
``
-//W3C//DTD
HTML
4.01
Transitional//EN
html
head
title
Formulaire
saisie
fruits
/title
/head
body
form
action=
valide3.php
method=
get
Choisissez
fruits
&
nbsp
select
name=
sel
multiple
option
Fraise
option
Pomme
option
Poire
Envoyer
option
Banane
Envoyer
option
Cerise
/select
input
type=
submit
value=
envoyer
/form
valide3.php
/body
valide3.php
sel=Pomme
&
sel=Poire
sel=Pomme
&
sel=Poire
/html
10:11:18
Programmation
Web
2012-2013
44
Formulaires
contenant
champs
SELECT
multiple
html
head
title
Formulaire
saisie
fruits
/title
/head
body
form
action=
valide3.php
method=
get
Choisissez
fruits
&
nbsp
select
name=
sel
multiple
option
Fraise
option
Pomme
option
Poire
Envoyer
Envoyer
option
Banane
option
Cerise
/select
input
type=
submit
value=
envoyer
/form
valide3.php
valide3.php
sel
5B
5D=Pomme
&
sel
5B
5D=Poire
sel
5B
5D=Pomme
&
sel
5B
5D=Poire
/body
valide3.php
/html
valide3.php
sel
=Pomme
&
sel
=Poire
sel
=Pomme
&
sel
=Poire
10:11:19
Programmation
Web
2012-2013
45
Traitement
données
champs
SELECT
php
php
html
html
==
HTML
HTML
DOCTYPE
DOCTYPE
html
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
title
title
Liste
Liste
fruits
fruits
/
/title
title
_GET
_GET
‘
‘
sel
sel
/
head
/head
tableau
tableau
body
body
HTML
HTML
if
if
isset
isset
_GET
_GET
``
sel
sel
&
&
&
&
empty
empty
_GET
_GET
``
sel
sel
{
{
/
*
variable
_GET
'sel
'
définie
/
*
variable
_GET
'sel
'
définie
n'est
n'est
vide
vide
*
/
*
/
foreach
foreach
_GET
_GET
``
sel
sel
fruit
fruit
html
html
.=
.=
``
choisi
choisi
fruit
fruit
br
br
\n
\n
}
}
else
else
html
html
.=
.=
``
n'avez
n'avez
choisi
choisi
fruit
fruit\n
\n
echo
echo
html
html
..
``
/
/body
body
\n
\n
/
/html
html
10:11:19
Programmation
Web
2012-2013
46
Résultat
10:11:19
Programmation
Web
2012-2013
47
Formulaires
contenant
champs
CHECKBOX
10:11:20
Programmation
Web
2012-2013
48
Formulaires
contenant
champs
CHECKBOX
DOCTYPE
DOCTYPE
html
html
PUBLIC
PUBLIC
``
-//W3C//DTD
-//W3C//DTD
HTML
HTML
4.01
4.01
Transitional//EN
Transitional//EN
html
html
head
head
title
title
Formulaire
Formulaire
saisie
saisie
fruits
fruits
/
/title
title
/
/head
head
body
body
form
form
name
name==
formu
formu
action
action==
valide3.php
valide3.php
method
method==
get
get
Choisissez
Choisissez
fruits
fruits
&
nbsp
&
nbsp
br
br
input
input
type
type==
checkbox
checkbox
name
name==
sel
sel
value
value==
Fraise
Fraise
Fraise
Fraise
br
br
input
input
type
type==
checkbox
checkbox
name
name==
sel
sel
value
value==
Pomme
Pomme
Pomme
Pomme
br
br
input
input
type
type==
checkbox
checkbox
name
name==
sel
sel
value
value==
Poire
Poire
Poire
Poire
br
br
input
input
type
type==
checkbox
checkbox
name
name==
sel
sel
value
value==
Banane
Banane
Banane
Banane
br
br
input
input
type
type==
checkbox
checkbox
name
name==
sel
sel
value
value==
Cerise
Cerise
Cerise
Cerise
br
br
input
input
type
type==
submit
submit
value
value==
Envoyer
Envoyer
/
/form
form
/
/body
body
/
/html
html
10:11:20
Programmation
Web
2012-2013
49
Résultat
10:11:20
Programmation
Web
2012-2013
50
Références
=
12
b
=
=
&
b
=
``
coucou
=
84
echo
\
a\n
84
84
echo
\
b
b\n
b
b
coucou
coucou
echo
\
c\n
84
84
unset
=
``
hello
10:11:21
aa
84
12
12
84
bb
coucou
12
coucou
cc
hello
hello
Programmation
Web
2012-2013
51
Fonctions
utilisateur

Description
fonctionnalité
dépendant
éventuellement
paramètres
retournant
éventuellement
résultat

Définition
function
moyenne
b
{
return
a+
b
/2
}

Utilisation
resultat
=
moyenne
2,4
echo
resultat
//
vaut
3
10:11:21
Programmation
Web
2012-2013
52
Fonctions
utilisateur

Valeur
retour
function
moyenne
b
{
…
}
Typage
Typage
faible
faible
PHP
PHP
Aucune
Aucune
information
information

Arguments
function
moyenne
{
…
}
b
Typage
Typage
faible
faible
PHP
PHP
Aucune
Aucune
information
information
10:11:22
Programmation
Web
2012-2013
53
Mode
passage
arguments
types
natifs
php
function
permutation
x
{
echo
``
permutation
=
x
Permutation
Permutation
impossible
impossible
x
=
Passage
Passage
arguments
arguments
=
fonctions
fonctions
valeur
valeur
}
=
12
b
=
210
echo
``
\
=
==
12
12
b
echo
``
\
b
=
b
b
==
210
210
permutation
permutation
b
permutation
echo
``
\
=
==
12
12
b
echo
``
\
b
=
b
b
==
210
210
10:11:22
Programmation
Web
2012-2013
54
Mode
passage
arguments
types
natifs
php
function
permutation
&
x
&
{
echo
``
permutation
=
x
x
=
=
}
=
12
b
=
210
echo
``
\
=
==
12
12
b
echo
``
\
b
=
b
b
==
210
210
permutation
permutation
b
permutation
echo
``
\
=
==
210
210
b
echo
``
\
b
=
b
b
==
12
12
10:11:22
Programmation
Web
2012-2013
Permutation
Permutation
réussie
réussie
55
Arguments
défaut
fonctions

Valeur
défaut
argument
défini
lors
appel
fonction
function
bonjour
nom=
inconnu
{
echo
``
Bonjour
cher
nom
}

Utilisation
bonjour
Bonjour
Bonjour
cher
cher
inconnu
inconnu
bonjour
``
Marcel
Bonjour
Bonjour
cher
cher
Marcel
Marcel
10:11:23
Programmation
Web
2012-2013
56
Définition
fonctions
fréquemment
utilisées

Certaines
fonctions
utilisées
plusieurs
scripts
PHP

Comment
faire
définir
chacune
pages

Utilisation




include
``
fichier
require
``
fichier
include_once
``
fichier
require_once
``
fichier

Permet
inclure
contenu
fichier
script
courant
10:11:23
Programmation
Web
2012-2013
57
include
require
Fichier
Fichier
mafonction.php
mafonction.php
function
mafonction
arg
{
if
isset
arg
{
echo
``
Vrai
}
else
{
echo
``
Faux
}
}
10:11:23
Fichier
Fichier
utilisation1.php
utilisation1.php
…
require
``
mafonction.php
mafonction
true
…
Fichier
Fichier
utilisation2.php
utilisation2.php
…
include
``
mafonction.php
…
var=false
mafonction
var
…
Fichier
Fichier
utilisation3.php
utilisation3.php
…
require
``
mafonction.php
…
Programmation
Web
2012-2013
58
Définition
constantes
php
define
``
ma_constante
``
Bonjour
tous
nom
nom
valeur
valeur
Définition
Définition
d'une
d'une
constante
constante
echo
ma_constante
Utilisation
Utilisation
constante
constante
10:11:24
Programmation
Web
2012-2013
59
Gestion
erreurs

certains
cas
possible
utile
poursuivre
exécution
code
PHP
variables
non
définies
valeurs
erronées
échec
connexion
…

Arrêt
brutal
exécution
code


die
message
exit
message
Envoie
message
navigateur
termine
exécution
script
courant
10:11:24
Programmation
Web
2012-2013
60
Gestion
erreurs
–
Mauvais
Exemple
php
PHP
html
=
HTML
html
head
title
die-exit
/title
/head
body
HTML
if
isset
val
{
HTML
non
non
die
html
``
problèmeHTML
val
/
*
delà
point
fin
script
*
/
}
html
.=
HTML
Choix
val
/body
/html
10:11:24
html
HTML
head
title
die-exit
/title
/head
body
problème
val
valide
valide…
…
Navigateur
problème
val
Programmation
Web
2012-2013
61
Gestion
l'affichage
erreurs

int
error_reporting
int
level
Débogage
Constante
Ancien
Ancien
niveau
niveau
d'erreur
d'erreur
E_ERROR
E_WARNING
serveur
serveur
E_PARSE
production
production
toute
toute
E_NOTICE
erreur
erreur
affichée
affichée
E_CORE_ERROR
donne
donne
indices
indices
E_CORE_WARNIN
scripts
scripts
rend
rend
site
G
site
vulnérable
vulnérable
E_COMPILE_ERR
php.ini
php.ini
OR
display_errors
display_errors
boolean
boolean
E_COMPILE_WAR
NING
Programmation
Web
2012-2013
10:11:24
62
Opérateur
contrôle
d'erreur
v
=
file
``
dummy.txt
or
die
``
Problème
Fichier
Fichier
absent
absent
lecture
Warning
Warning
file
dummy.txt
file
dummy.txt
failed
failed
to
to
open
open
stream
stream
No
No
such
such
file
file
or
or
directory
directory
in
in
dummy.php
dummy.php
line
line
68
68
Problème
Problème
lecture
lecture
v
=
file
``
dummy.txt
or
die
``
Problème
lecture
Problème
Problème
lecture
lecture
10:11:25
Programmation
Web
2012-2013
63
Développement
objet

Définition
briques
logicielles
représentant
concept
idée
entité
ainsi
leurs
interactions
objets

objet
structure
données
comprenant
également
fonctionnalités
traitement
données

objet
vu
travers
spécifications

concepts
associés

Encapsulation

Héritage

Polymorphisme
10:11:29
Programmation
Web
2011-2012
1
Classe

classe
définit
modèle
moule
partir




duquel
tous
objets
classe
créés
classe
décrit
données
internes
ainsi
fonctionnalités
objets
classe
vision
inerte
recette
cuisine
visant
décrire
structure
comportement
objets
créés
construction
objet
partir
classe
génératrice
appelle
instanciation
objets
entités
vivantes
mémoire
instances
classe
10:11:29
Programmation
Web
2011-2012
2
Instanciation

classe
description
inerte

objets
doivent
être
instanciés
partir
classe
génératrice
exister
devenir
fonctionnels

Exemple
classe
Animal
bambi
=
new
Animal
scrat
=
new
Animal
melman
=
new
Animal
10:11:29
Programmation
Web
2011-2012
3
Encapsulation

Procédé
consistant
rassembler
données
traitements
sein
objets

implémentation
interne
objets
cachée

objets
vu
travers
leurs
spécifications

données
internes
fonctionnalités
possèdent
niveau
visibilité
peuvent
éventuellement
être
masquées

Public

Privé

Protégé
10:11:29
Programmation
Web
2011-2012
4
Encapsulation

données
internes
objets
appelées
attributs

fonctionnalités
objets
appelées
méthodes

Méthodes
habituelles

Constructeur
/
destructeur

Accesseurs
/
modificateurs
getters
/
setters

Référence
objet
courant
description
classe
this
10:11:29
Programmation
Web
2011-2012
5
Visibilité

Publique
données
internes
méthodes
accessibles
tous

Protégé
données
internes
méthodes
accessibles
objets
dérivés

Privé
données
internes
méthodes
accessibles
objets
classe
10:11:29
Programmation
Web
2011-2012
6
Héritage
dérivation
extension

Création
nouvelles
classes
partir
modèle
classe
existante

nouvelle
classe
possède
tous
attributs
méthodes
classe
mère

nouvelle
classe
peut
proposer
nouveaux
attributs
nouvelles
méthodes
spécialiser
méthodes
Mammifère
classe
mère
Herbivore
Impala
10:11:29
Caribou
Carnivore
Guépard
Programmation
Web
2011-2012
Léopard
7
Polymorphisme
Mammifère
nourriture

Choix
dynamique
méthode
correspond
type
réel
objet

Méthode
mange
Herbivore
plantes
Impala
herbe
Caribou
mousse
Carnivore
viande
Guépard
impala
Léopard
impala

function
nourriture
Mammifere
{
return
m-
mange
}

i
=
new
Impala
nourriture
i

=
new
Carnivore
nourriture
10:11:29
Programmation
Web
2011-2012
herbe
viande
8
Développement
objet
PHP

PHP
4

Classes
tout
public

Constructeur

Héritage

Méthodes
statiques
implicites

Outils
linéarisation
sauvegarde
disque

PHP
5

Classes
choix
public
protected
private

Constructeur
destructeur

Membres
méthodes
statiques

Classes
méthodes
abstraites

…
10:11:29
Programmation
Web
2011-2012
9
Déclaration
Définition
d'une
classe
PHPde4classe
php
class
MaClasse
{
var
madonnee
//
Attribut
Attribut
public
Constructeur
public
Référence
//
Constructeur
l'objet
courant
function
MaClasse
param
{
this-
madonnee
=
param
}
Accès
attribut
function
affiche
{
//
Méthode
echo
get_class
this
Méthode
publique
contient
``
this-
madonnee
}
Donne
nom
classe
l'objet
courant
}
10:11:29
Programmation
Web
2011-2012
10
Utilisation
d'une
classe
PHP
4
Inclusion
définition
classe
php
require
``
maclasse.php
Création
d'un
objet
//
Nouvel
objet
o
=
new
MaClasse
12
maclasse
contient
12
//
Utilisation
d'une
méthode
o-
affiche
o-
madonnee
=
``
coucou
Méthode
affiche
l'objet
o
Impossible
restreindre
l'accès
attributs
10:11:29
Programmation
Web
2011-2012
11
Héritage
PHP
4
Héritage
MaClasse
php
class
MaClasseHeritee
extends
MaClasse
{
var
autredonnee
function
MaClasseHeritee
param1
param2
{
Opérateur
parent
:MaClasse
param1
résolution
portée
this-
autredonnee
=
param2
Paamayim
}
Nekudotayim
function
affiche
{
MaClasse
:affiche
Méthode
MaClasse
echo
``
``
.get_class
this
parent
contient
``
this-
autredonnee
}
}
Méthode
affiche
classe
MaClasse
10:11:29
Programmation
Web
2011-2012
12
Méthodes
classe
implicites
php
class
MaClasse
{
var
madonnee
//
Attribut
//
Constructeur
function
MaClasse
param
{
this-
madonnee
=
param
}
function
affiche
{
//
Méthode
echo
this-
madonnee
}
function
statique
{
//
Méthode
echo
``
Statique
}
}
10:11:29
Programmation
Web
2011-2012
Méthode
publique
fait
référence
this

Méthode
statique
méthode
classe
13
Méthodes
classe
implicites
Inclusion
définition
classe
php
require
``
maclasse.php
Création
d'un
objet
//
Création
d'un
objet
o
=
new
MaClasse
12
Méthode
affiche
l'objet
o
//
Utilisation
d'une
méthode
12
o-
affiche
Impossible
restreindre
l'accès
//
Utilisation
d'une
méthode
implicitement
auxstatique
attributs
MaClasse
:statique
Statique
10:11:29
Programmation
Web
2011-2012
14
Développement
objet
PHP
5
partir
maintenant
développement
PHP
5
10:11:29
Programmation
Web
2011-2012
15
Définition
d'une
classeDéclaration
classe
php
class
MaClasse
{
private
madonnee
Attribut
privé
Constructeur
public
public
function
__construct
param
{
this-
madonnee
=
param
Référence
l'objet
}
courant
function
__destruct
{
echo
``
Destruction
}
Destructeur
public
function
affiche
{
echo
``
madonnee
``
Méthode
publique
this-
madonnee
défaut
}
}
Accès
attribut
10:11:29
Programmation
Web
2011-2012
16
Utilisation
d'une
classe
Inclusion
définition
classe
php
require
``
maclasse.php
Création
d'un
objet
//
Nouvel
objet
o
=
new
MaClasse
12
maclasse
contient
12
//
Utilisation
d'une
méthode
o-
affiche
{
class
Fatal
MaClasse
error
Can
not
access
private
private
madonnee
property
MaClasse
madonnee
in
dummy.php
=line
25
o-
madonnee
coucou
function
__destruct
{
Destruction
echo
``
Destruction
}
unset
o
10:11:29
Programmation
Web
2011-2012
Méthode
affiche
l'objet
o
L'attribut
privé
Destruction
l'objet
o
17
Valeur
défaut
attributs
Attribut
valeur
défaut
php
class
MaClasse
{
private
madonnee
=
``
Défaut
function
affecte
val
{
this-
madonnee
=
val
}
function
affiche
{
Nouvel
objet
echo
``
madonnee
``
this-
madonnee
}
}
Affichage
madonnee
Défaut
o
=
new
MaClasse
Affectation
o-
affiche
madonnee
Nouvelle
o-
affecte
``
Nouvelle
Affichage
o-
affiche
10:11:29
Programmation
Web
2011-2012
18
Attributs
méthodes
classe

Mot
clé
static

Attributs
méthodes
utilisables
sans
instance
classe
=attributs
méthode
classe

Attributs
peuvent
être
accédés
depuis
instance
objet-
attribut

Attributs
partagés
toutes
instances
classe

Méthodes
peuvent
être
accédés
depuis
instance
objet-
methode

méthodes
this
n'est
disponible
10:11:29
Programmation
Web
2011-2012
19
Attributs
statiques
Attribut
privé
statique
peut
être
accédé
méthodes
classe
class
MaClasse
{
private
static
=
0
function
__construct
{
Accès
l'attribut
statique
echo
++MaClasse
instance
}
function
__destruct
{
echo
``
destruction
self
}
1
instance
}
instance
2
=
new
MaClasse
destruction
tinstance
=
new
MaClasse
2
unset
Can
not
access
private
property
3
instance
Fatal
error
u
=
new
MaClasse
MaClasse
in
dummy.php
line
37
v
=
new
MaClasse
10:11:29
Programmation
Web
2011-2012
20
Méthodes
statiques
class
MaClasse
{
private
static
=
0
function
__construct
{
echo
++MaClasse
instance
br
\n
}
Méthode
publique
statique
function
__destruct
{
MaClasse
}
static
function
f
i
{
echo
``
f
``
i
*
i
Appel
}
partir
d'une
instance
}
instance
Toléré
1
f
4
=
f
new
MaClasse
9
s-
f
2
MaClasse
:f
3
Programmation
10:11:29
Web
2011-2012
Appel
sans
instance
21
Constantes
classe
class
MaClasse
{
const
constante
=
``
Valeur
public
function
montre
{
echo
self
:constante
}
}
Valeur
=
new
MaClasse
Valeur
c-
montre
echo
MaClasse
:constante
10:11:29
Programmation
Web
2011-2012
Constante
publique
classe
Accès
constante
classe
depuis
classe
Accès
constante
classe
l'extérieur
classe
22
Héritage
class
Simple
{
function
affiche
{
echo
``
Simple
}
}
class
Etendue
extends
Simple
{
function
affiche
{
parent
:affiche
echo
``
aussi
Etendue
}
}
=
new
Simple
e
=
new
Etendue
Simple
s-
affiche
e-
affiche
Simple
aussi
Etendue
10:11:29
Programmation
Web
2011-2012
Classe
simple
méthode
publique
Classe
étendue
héritant
classe
simple
Surcharge
méthode
Appel
méthode
parent
23
Assignation
d'objets
class
Point
{
private
_x
private
_y
public
function
__construct
x=0
y=0
{
this-
_x
=
x
this-
_y
=
}
public
function
set
x
{
this-
_x
=
x
this-
_y
=
}
public
function
toString
{
return
``
{
this-
_x
}
{
this-
_y
}
}
10:11:29
Programmation
Web
2011-2012
24
Assignation
d'objets
segment
=
array
point
=
new
Point
for
i=10
i
20
i++
{
point-
set
i
i
segment
=
point
}
foreach
segment
k
=
p
echo
``
k
{
p-
toString
}
br
\n
10:11:29
Programmation
Web
2011-2012
point
segment
0
19
19
0
1
19
19
1
19
2
19
2
19
3
19
4
19
3
19
5
19
4
19
6
19
5
19
7
19
19
6
8
19
19
7
19
9
19
8
9
19,19
18,18
17,17
16,16
15,15
14,14
13,13
12,12
11,11
10,10
0,0
25
19,19
18,18
17,17
16,16
15,15
14,14
13,13
12,12
11,11
10,10
0,0
Clonage
d'objets
segment
=
array
point
=
new
Point
for
i=10
i
20
i++
{
point-
set
i
i
segment
=
clone
point
}
foreach
segment
k
=
p
echo
``
k
{
p-
toString
}
br
\n
point
segment
0
10
10
0
1
11
11
1
12
2
12
2
13
3
13
4
14
3
14
5
15
4
15
6
16
5
16
7
17
17
6
8
18
18
7
19
9
19
8
9
10,10
11,11
12,12
13,13
14,14
15,15
16,16
17,17
18,18
19,19
10:11:29
Programmation
Web
2011-2012
26
Objets
comme
arguments
fonctions
function
origine
p
{
p-
set
0
0
}
point
=
new
Point
10
10
echo
``
avant
{
point-
toString
}
br
\n
origine
point
echo
``
apres
{
point-
toString
}
br
\n
Passage
l'objet
avant
10
10
Point
référence
apres
0
0
10:11:29
Programmation
Web
2011-2012
27
Objets
chaînes
caractères

Problème

ambiguïté

non
évaluable

Chaîne
contenant

attribut
d'un
objet
chaîne
a-
attribut

résultat
d'une
méthode
d'un
objet
chaîne
résultat
a-
calcule

entrée
tableau
associatif

``
valeur
tab
'cle
'

variableProgrammation
suivie
texte
sans
espace
10:11:29
Web
2011-2012
28
Objets
chaînes
caractères

Solution

effectuer
concaténations
pénible

délimiter
{
}

Chaîne
contenant

attribut
d'un
objet
chaîne
{
a-
attribut
}

résultat
d'une
méthode
d'un
objet
chaîne
résultat
{
a-
calcule
}

entrée
tableau
associatif

``
valeur
{
tab
'cle
'
}

variableProgrammation
suivie
texte
sans
espace
10:11:29
Web
2011-2012
29
Gestion
erreurs
exceptions

Gestion
exception
identiques
C++/Java

Exception
peut
être

Jetée
throw

Essayée
try

Capturée
catch

Exception
jetée
code
après
throw
non
exécuté

Capture
1
plusieurs
blocs
selon
type

Exception
non
capturée
erreur
fatale
10:11:29
Programmation
Web
2011-2012
30
Utilisation
exceptions
try
{
error
=
'Toujours
lancer
erreur
'
Déroutement
throw
new
Exception
error
/
*
code
après
exception
n'est
Capturer
Essayer
Lancer
jamais
exécuté
*
/
echo
'Jamais
exécuté
'
}
Capture
Exception
Toujours
lancer
erreur
catch
Exception
e
{
echo
``
Capture
Exception
``
e-
getMessage
\n
}
Bonjour
monde
//
Poursuite
l'exécution
echo
'Bonjour
monde
'
10:11:29
Programmation
Web
2011-2012
31
Classe
Exception
PHP
5
php
class
Exception
{
protected
message
=
``
//
message
l'exception
protected
code
=
0
//
code
l'exception
protected
file
//
fichier
source
l'exception
protected
line
//
ligne
source
l'exception
function
__construct
string
message=NULL
int
code=0
final
final
final
final
final
final
function
function
function
function
function
function
function
getMessage
//
message
l'exception
getCode
//
code
l'exception
getFile
//
nom
fichier
source
getLine
//
ligne
fichier
source
getTrace
//
tableau
backtrace
getTraceAsString
//
chaîne
trace
_toString
//
chaîne
l'affichage
}
10:11:29
Programmation
Web
2011-2012
32
PDO

PDO
PHP
Data
Objects

Extension
PHP
fournissant
interface
accéder
base
données

Fournit
interface
d'abstraction
l'accès
données

fournit
abstraction
base
données

SQL
spécifique
moteur

Fonctionnalités
présentes
/
absentes

Interface
orientée
objet
20:39:03
Programmation
Web
2013-2014
1
Nom
driver
Bases
données
supportées
Bases
données
supportées
PDO_DBLIB
FreeTDS
/
Microsoft
SQL
Server
/
Sybase
PDO_FIREBIRD
Firebird/Interbase
6
PDO_IBM
IBM
DB2
PDO_INFORMIX
IBM
Informix
Dynamic
Server
PDO_MYSQL
MySQL
3.x/4.x/5.x
PDO_OCI
Oracle
Call
Interface
PDO_ODBC
ODBC
v3
IBM
DB2
unixODBC
win32
ODBC
PDO_PGSQL
PostgreSQL
PDO_SQLITE
SQLite
3
SQLite
2
PDO_4D
4D
20:39:03
Programmation
Web
2013-2014
2
20:39:03
Programmation
Web
2013-2014
3
Classes
prédéfinies

PDO
connexion
PHP
/
base
données

__construct

exec
prepare
query

errorCode
errorInfo

getAttributes
setAttribute

lastInsertId
quote

beginTransaction

commit
rollBack

getAvailableDrivers
20:39:03
Programmation
Web
2013-2014
4
Classes
prédéfinies

PDOStatement
requête
préparée
jeu
résultats

bindColumn
bindParam
bindValue
closeCursor

errorCode
errorInfo

fetch
fetchAll
fetchColumn
fetchObject




setFetchMode
nextRowset
rowCount
columnCount
getColumnMeta
getAttribute
setAttribute
execute
debugDumpParams
20:39:03
Programmation
Web
2013-2014
5
20:39:03
Programmation
Web
2013-2014
6
Connexions
gestionnaire
connexion

Instanciation
d'un
objet
PDO

dbh=new
PDO
DSN
user
pass
options

DSN
Data
Source
Name

nom_du_driver
syntaxe_spécifique_au_driver

Ex
mysql
host=localhost
dbname=ma_base

user
nom
d'utilisateur
pass
mot
passe

options
tableau
associatif

spécifiques
driver

Ex
array
PDO
:ATTR_PERSISTENT
=
true

Fin
connexion
dbh=null
unset
dbh
20:39:03
Programmation
Web
2013-2014
7
20:39:03
Programmation
Web
2013-2014
8
Gestion
erreurs
connexion

Connexion
construction
d'un
objet

Gestion
envisageable
erreurs

Aucune

Fin
brutale
exit
die

État

Exception

cas
d'erreur
connexion

Objet
PDOException
lancé

PDOException
hérite
Exception
20:39:03
Programmation
Web
2013-2014
9
Gestion
erreurs
connexion
php
try
{
dbh
=
new
PDO
'mysql
host=h
dbname=db
'
user
pass
…
dbh
=
null
}
catch
PDOException
e
{
echo
``
Erreur
``
e-
getMessage
``
br/
die
}
20:39:03
Programmation
Web
2013-2014
10
Gestion
erreurs
hormis
connexion

PDO
:ERRMODE_SILENT
défaut

Mode
silencieux
mise
place
d'un
code
d'erreur

PDO
errorCode
/
errorInfo

PDOStatement
errorCode
/
errorInfo

PDO
:ERRMODE_WARNING

Mise
place
code
d'erreur

Émission
d'une
erreur
type
E_WARNING

PDO
:ERRMODE_EXCEPTION

Mise
place
code
d'erreur

Objet
PDOException
lancé
20:39:03
Programmation
Web
2013-2014
11
Gestion
erreurs
hormis
connexion
php
try
{
dbh
=
new
PDO
'mysql
host=h
dbname=db
'
user
pass
dbh-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
…
dbh
=
null
}
catch
PDOException
e
{
echo
``
Erreur
``
e-
getMessage
``
br/
die
}
20:39:03
Programmation
Web
2013-2014
12
Gestion
erreurs
code
d'erreur
php
pdo
=
new
PDO
``
mysql
host=localhost
pdostat
=
pdo-
query
``
COUCOU
Code
SQLSTATE
if
pdo-
errorCode
{
echo
``
ERREUR
\n
echo
``
pre
\n
Code
erreur
spécifique
var_dump
pdo-
errorInfo
driver
echo
``
/pre
\n
ERREUR
}
array
3
{
Chaîne
erreur
spécifique
0
=
string
5
``
42000
driver
1
=
int
1064
2
=
string
47
``
Erreur
syntaxe
près
'COUCOU
'
ligne
1
}
20:39:03
Programmation
Web
2013-2014
13
Gestion
erreurs
exceptions
php
try
{
pdo
=
new
PDO
``
mysql
host=localhost
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
Code
erreur
spécifique
driver
pdostat
=
pdo-
query
``
COUCOU
}
catch
Code
Exception
e
{
Chaîne
erreur
spécifique
SQLSTATE
driver
echo
``
ERREUR
``
e-
getMessage
}
ERREUR
SQLSTATE
42000
Syntax
error
or
access
violation
1064
Erreur
syntaxe
près
'COUCOU
'
ligne
1
20:39:03
Programmation
Web
2013-2014
14
20:39:03
Programmation
Web
2013-2014
15
Exécution
d'une
requête

PDOStatement
PDO
:query
string
statement
Résultat
requête
Requête
php
try
{
pdo
=
new
PDO
``
mysql
host=localhost
pdostat
=
pdo-
query
``
SELECT
*
FROM
clients
}
catch
Exception
e
{
echo
``
ERREUR
``
e-
getMessage
}
20:39:03
Programmation
Web
2013-2014
16
Exploitation
résultats
d'une
requête

Récupération
données
ligne
ligne

ligne
peut
être

tableau
indexé

tableau
associatif

tableau
mixte
défaut

objet
anonyme

objet
d'une
classe
définie
l'utilisateur

Récupération
données
d'une
colonne
20:39:03
Programmation
Web
2013-2014
17

Parcourir
résultat
requête
Parcours
résultat
d'une
requête
SELECT
*
Résultat
requête
FROM
morceau
ORDER
BY
mor_id
Curseur
interne
+
+
+
|
mor_id
|
mor_nom
|
+
+
+
|
872
|
With
Little
Help
From
My
Friends
|
|
873
|
The
Letter
|
|
874
|
Marjorine
|
|
875
|
Midnight
Rider
|
|
876
|
You
Are
So
Beautiful
|
|
877
|
Feelin
'
Allright
|
|
878
|
Cry
River
|
20:39:03
Programmation
Web
2012-2013
18
Exploitation
résultats
d'une
requête
1
try
{
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
query
``
SELECT
name
FROM
user
pdostat-
setFetchMode
PDO
:FETCH_ASSOC
foreach
pdostat
ligne
{
echo
``
p
ligne
'name
'
``
\n
}
}
catch
Exception
e
{
echo
``
ERREUR
``
e-
getMessage
}
20:39:03
Programmation
Web
2013-2014
19
Exploitation
résultats
d'une
requête
2
try
{
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
query
``
SELECT
name
FROM
user
foreach
pdostat-
fetchAll
PDO
:FETCH_ASSOC
ligne
{
echo
``
p
ligne
'name
'
``
\n
}
}
catch
Exception
e
{
echo
``
ERREUR
``
e-
getMessage
}
20:39:03
Programmation
Web
2013-2014
20
Exploitation
résultats
d'une
requête
3
try
{
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
query
``
SELECT
name
FROM
user
while
ligne
=
pdostat-
fetch
PDO
:FETCH_ASSOC
{
echo
``
p
ligne
'name
'
``
\n
}
}
catch
Exception
e
{
echo
``
ERREUR
``
e-
getMessage
}
20:39:03
Programmation
Web
2013-2014
21
Modes
récupération
données
1

PDO
:FETCH_ASSOC

retourner
chaque
ligne
tableau
indexé
noms
colonnes
comme
elles
retournées
jeu
résultats
correspondant
jeu
résultats
contient
multiples
colonnes
nom
PDO
:FETCH_ASSOC
retourne
seule
valeur
nom
colonne

PDO
:FETCH_NUM

retourner
chaque
ligne
tableau
indexé
numéro
colonnes
comme
elles
retournées
jeu
résultats
correspondant
commençant
0
20:39:03
Programmation
Web
2013-2014
22
Modes
récupération
données
2

PDO
:FETCH_BOTH
défaut

retourner
chaque
ligne
tableau
indexé
noms
colonnes
ainsi
leurs
numéros
comme
elles
retournées
jeu
résultats
correspondant
commençant
0

PDO
:FETCH_OBJ

retourner
chaque
ligne
objet
noms
propriétés
correspondant
noms
colonnes
comme
elles
retournées
jeu
résultats
20:39:03
Programmation
Web
2013-2014
23
Modes
récupération
données
3

PDO
:FETCH_BOUND

retourner
true
assigner
valeurs
colonnes
jeu
résultats
variables
PHP
auxquelles
elles
liées
méthode
PDOStatement
:bindParam
méthode
PDOStatement
:bindColumn

PDO
:FETCH_CLASS
|
PDO
:FETCH_CLASSTYPE

retourner
nouvelle
instance
classe
demandée
liant
colonnes
propriétés
nommées
classe
Nom
classe
=
1ère
colonne
20:39:03
Programmation
Web
2013-2014
24
Modes
récupération
données
4

PDO
:FETCH_INTO

met
jour
instance
existante
classe
demandée
liant
colonnes
jeu
résultats
noms
propriétés
classe

PDO
:FETCH_LAZY

retourner
chaque
ligne
tant
qu'objet
noms
attributs
correspondant
noms
colonnes
retournées
jeu
résultats

PDO
:FETCH_LAZY
crée
noms
attributs
l'objet
comme
rencontrés
20:39:03
Programmation
Web
2013-2014
25
Exemple
PDO
:FETCH_CLASS
stmt
=
pdo-
query
SQL
SELECT
id
name
FROM
artist
WHERE
id
=
12
SQL
stmt-
setFetchMode
PDO
:FETCH_CLASS
'Artist
'
if
object
=
stmt-
fetch
==
false
{
return
object
Instancie
objet
classe
Artist
}
attributs
supposés
être
id
name
20:39:03
Programmation
Web
2013-2014
26
Préparation
d'une
requête

Déroulement
d'une
requête
SQL
1
2
3
4




Analyse
Compilation
Optimisation
Exécution
Exécution
répétée
d'une
requête
1+2+3+4
Préparation
d'une
requête
1+2+3
Exécution
répétée
d'une
requête
préparée
4
Préparation
fonction
paramètres


20:39:03
Anonymes
Nommés
Programmation
Web
2013-2014
27
20:39:03
Programmation
Web
2013-2014
28
Préparation
d'une
requête

PDOStatement
PDO
:prepare
string
statement
array
driver_options

statement
requête
préparer
Peut
contenir
paramètres
anonymes
nommés
nom

driver_options
tableau
d'options
driver

retourne
objet
PDOStatement
effectuera
l'association
paramètres
exécutera
requête
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdostat
=
pdo-
prepare
SELECT
*
FROM
user
WHERE
User=
20:39:03
Programmation
Web
2013-2014
29
Association
paramètres
d'une
requête

bool
PDOStatement
:bindValue
mixed
parameter
mixed
value
int
data_type

parameter
paramètre
nom
position
1…n

value
valeur

data_type
type
valeur

PDO
:PARAM_BOOL
booléen

PDO
:PARAM_NULL
NULL
SQL

PDO
:PARAM_INT
INTEGER
SQL

PDO
:PARAM_STR
CHAR
VARCHAR
autre
chaîne

PDO
:PARAM_LOB
objet
large
SQL

bool
PDOStatement
:execute
array
parameters

parameters
tableau
associatif
indexé
valeurs
20:39:03
Programmation
Web
2013-2014
30
Préparation
puis
exécution
d'une
requête
1
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
SELECT
*
FROM
user
WHERE
User=
paramètre
anonyme
pdostat-
bindValue
1
'root
'
pdostat-
execute
//
Utilisation
résultat
pdostat-
bindValue
1
'cutrona
'
pdostat-
execute
//
Utilisation
résultat
Association
Préparation
d'une
valeur
valeur
delalarequête
requête
1er
paramètre
Association
Exécution
d'une
1er
paramètre
20:39:03
Programmation
Web
2013-2014
31
Préparation
puis
exécution
d'une
requête
2
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
SELECT
*
FROM
user
WHERE
User=
utilisateur
paramètre
nommé
pdostat-
bindValue
'
utilisateur
'
'root
'
pdostat-
execute
//
Utilisation
résultat
pdostat-
bindValue
'
utilisateur
'
'cutrona
'
pdostat-
execute
//
Utilisation
résultat
Association
Préparation
Exécution
d'une
valeur
dela
larequête
requête
paramètre
nommé
20:39:03
Programmation
Web
2013-2014
32
Préparation
puis
exécution
d'une
requête
3
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
SELECT
*
FROM
user
paramètre
WHERE
User=
anonyme
pdostat-
execute
array
'root
'
//
Utilisation
résultat
pdostat-
execute
array
'cutrona
'
//
Utilisation
résultat
Association
Association
Préparation
Exécution
d'une
d'une
valeur
valeur
delalarequête
requête
1er
1er
paramètre
paramètre
20:39:03
Programmation
Web
2013-2014
33
Préparation
puis
exécution
d'une
requête
4
pdo=new
PDO
``
mysql
host=localhost
dbname=mysql
pdo-
setAttribute
PDO
:ATTR_ERRMODE
PDO
:ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
SELECT
*
FROM
user
WHERE
User=
utilisateur
paramètre
nommé
pdostat-
execute
array
'
utilisateur
'
=
'root
'
//
Utilisation
résultat
pdostat-
execute
array
'
utilisateur
'
=
'cutrona
'
//
Utilisation
résultat
Association
Préparation
Exécution
d'une
valeur
dela
larequête
requête
paramètre
nommé
20:39:03
Programmation
Web
2013-2014
34
Intérêt
requêtes
préparées

Amélioration
performances
cas
d'exécutions
répétées

Émulation
faite
PDO
driver
supporte
nativement

Protection
automatique
valeurs
paramètres
interdire
attaques
injection
code
SQL
20:39:03
Programmation
Web
2013-2014
35
20:39:03
Programmation
Web
2013-2014
36
Attaque
injection
SQL

Ex
validation
d'un
login/pass
site

Requête
consistant
trouver
enregistrement
correspondant
couple
login/pass
fourni
l'utilisateur

SELECT
*
FROM
membre
WHERE
login=
'
{
_GET
'login
'
}
'
AND
passwd=
'
{
_GET
'passwd
'
}
'

essayait
fournir
mot
passe
peu
particulier…
20:39:03
Programmation
Web
2013-2014
37
Exemple
concret
d'injection
SQL
1
pdo
=
new
PDO
'mysql
host=localhost
dbname=test
'
pdostat
=
pdo-
query
req
=
SQL
SELECT
*
FROM
membre
WHERE
login=
'
{
_GET
'login
'
}
'
AND
passwd=
'
{
_GET
'passwd
'
}
'
SQL
echo
``
Requête
\n
req\n
if
utilisateur
=
pdostat-
fetch
echo
``
Bienvenue
{
utilisateur
'nom
'
}
else
echo
``
Désolé
20:39:03
Programmation
Web
2013-2014
38
Exemple
concret
d'injection
SQL
2
Saisie
l'utilisateur
formulaire

mail
whatever

pass
who_cares
URL
mail=whatever
&
passwd=who_cares
Requête
SELECT
*
FROM
membre
WHERE
login='whatever'
AND
passwd='who_cares
'
Désolé
20:39:03
Programmation
Web
2013-2014
39
Exemple
concret
d'injection
SQL
3
Saisie
l'utilisateur

mail
whatever

pass
who_cares
'
OR
true
='
URL
mail=whatever
&
passwd=who_cares
'
20OR
20true
='
Requête
SELECT
*
FROM
membre
WHERE
login='whatever'
AND
passwd='who_cares
'
OR
true
=
Bienvenue
John
20:39:03
Programmation
Web
2013-2014
40
Protection
contre
injections
SQL
1
pdo
=
new
PDO
'mysql
host=localhost
dbname=test
'
pdostat
=
pdo-
prepare
req
=
SQL
SELECT
*
FROM
membre
WHERE
login=
AND
passwd=
SQL
pdostat-
execute
array
_GET
'login
'
_GET
'passwd
'
if
utilisateur
=
pdostat-
fetch
{
echo
``
Bienvenue
{
utilisateur
'nom
'
}
\n
}
else
{
echo
``
Désole
\n
}
20:39:03
Programmation
Web
2013-2014
41
Protection
contre
injections
SQL
2
pdo
=
new
PDO
'mysql
host=localhost
dbname=test
'
login
=
pdo-
quote
_GET
'login
'
passwd
=
pdo-
quote
_GET
'passwd
'
pdostat
=
pdo-
query
req
=
SQL
SELECT
*
FROM
membre
Requête
WHERE
login=
login
SELECT
*
AND
passwd=
passwd
FROM
membre
SQL
WHERE
login='whatever'
AND
passwd='who_cares
\
'
OR
true
=\
echo
``
Requête
\n
req\n
Désolé
if
utilisateur
=
pdostat-
fetch
{
echo
``
Bienvenue
{
utilisateur
'nom
'
}
\n
}
42
20:39:03
Programmation
Web
2013-2014
