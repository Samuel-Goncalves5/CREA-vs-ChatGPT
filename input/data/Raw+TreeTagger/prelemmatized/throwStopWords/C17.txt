Cours
introductif
PHP
Riad
MOKADEM
Qu'est-ce
PHP
PHP
langage
interprété
langage
script
exécuté
côté
serveur
comme
scripts
CGI
ASP
non
côté
client
script
écrit
Javascript
applet
Java
s'exécute
ordinateur
syntaxe
langage
provient
celles
langage
Perl
Java
principaux
atouts
•
grande
communauté
développeurs
partageant
centaines
milliers
d'exemples
script
PHP
•
•
•
gratuité
disponibilité
code
source
PHP
distribué
sous
licence
GNU
GPL
•
simplicité
d'interfaçage
bases
données
nombreux
SGBD
supportés
plus
utilisé
langage
MySQL
SGBD
gratuit
disponible
nombreuses
plateformes
Unix
Linux
Windows
MacOs
X
Solaris
etc
•
L'intégration
sein
nombreux
serveurs
web
Apache
Microsoft
IIS
etc.
simplicité
d'écriture
scripts
possibilité
d'inclure
script
PHP
sein
d'une
page
HTML
contrairement
scripts
CGi
lesquels
faut
écrire
lignes
code
afficher
chaque
ligne
langage
HTML
Origines
PHP
langage
PHP
mis
point
début
d'automne
1994
Rasmus
Lerdorf
langage
script
permettait
conserver
trace
utilisateurs
venant
consulter
CV
site
grâce
l'accès
base
données
l'intermédiaire
requêtes
SQL
Ainsi
donné
nombreux
internautes
demandèrent
programme
Rasmus
Lerdorf
mit
ligne
1995
première
version
programme
qu'il
baptisa
Personal
Sommaire
Page
Tools
puis
Personal
Home
Page
v1.0
traduisez
page
personnelle
version
1.0
Etant
donné
succès
PHP
1.0
Rasmus
Lerdorf
décida
d'améliorer
langage
intégrant
structures
plus
avancées
telles
boucles
structures
conditionnelles
intégra
package
permettant
d'interpréter
formulaires
qu'il
développé
FI
Form
Interpreter
ainsi
support
mSQL
C'est
façon
version
2
langage
baptisée
l'occasion
PHP/FI
version
2
vit
jour
durant
l'été
1995
rapidement
utilisé
nombreux
sites
15000
fin
1996
puis
50000
milieu
d'année
1997
partir
1997
Zeev
Suraski
Andi
Gurmans
rejoignirent
Rasmus
former
équipe
programmeurs
afin
mettre
point
PHP
3
Stig
Bakken
Shane
Caraveo
Jim
Winstead
rejoignirent
suite
C'est
ainsi
version
3.0
PHP
disponible
6
juin
1998
fin
l'année
1999
version
4.0
PHP
baptisée
PHP4
apparue
PHP
aujourd'hui
cinquième
version
SGBD
supportés
PHP
PHP
permet
interfaçage
simple
nombreux
systèmes
gestion
bases
données
SGBD
parmi
lesquels
•
•
•
•
•
•
•
•
•
•
Adabas
dBase
Empress
FilePro
Informix
Interbase
mSQL
MySQL
Oracle
PostgreSQL
•
•
•
•
Solid
Sybase
Velocis
Unix
dbm
L'interprétation
code
serveur
script
PHP
simple
fichier
texte
contenant
instructions
écrites
l'aide
caractères
ASCII
7
bits
caractères
non
accentués
incluses
code
HTML
l'aide
balises
spéciales
stocké
serveur
fichier
doit
avoir
l'extension
.php
pouvoir
être
interprété
serveur
Ainsi
lorsqu'un
navigateur
client
désire
accéder
page
dynamique
réalisé
PHP
•
•
serveur
reconnait
l'extension
d'un
fichier
PHP
transmet
l'interpréteur
PHP
•
•
L'interpréteur
exécute
l'instruction
puis
envoie
sorties
éventuelles
serveur
Dès
l'interpréteur
rencontre
balise
indiquant
lignes
suivantes
code
PHP
lit
plus
instructions
exécute
fin
script
serveur
transmet
résultat
client
navigateur
script
PHP
interprété
serveur
utilisateurs
peuvent
voir
code
source
code
PHP
stocké
serveur
n'est
jamais
visible
directement
client
puisque
dès
qu'il
demande
l'accès
serveur
l'interprète
façon
aucune
modification
n'est
apporter
navigateurs
Implantation
sein
code
HTML
script
interprété
serveur
deux
conditions
nécessaires
•
•
fichier
contenant
code
doit
avoir
l'extension
telle
.php
non
.html
code
PHP
contenu
code
HTML
doit
être
délimité
balises
type
script
PHP
doit
•
•
comporter
l'extension
.php
être
imbriqué
entre
délimiteurs
raisons
conformité
certaines
normes
XML
ASP
exemple
plusieurs
balises
peuvent
être
utilisées
délimiter
code
PHP
1
2
3
4
php
script
language=
php
/script
php
exemple
script
simple
Voici
ci-dessous
l'exemple
classique
script
PHP
html
head
title
Exemple
/title
/head
body
php
echo
``
Hello
world
/body
/html
notera
bien
évidemment
fonction
echo
permet
d'afficher
navigateur
chaine
délimitée
guillemets
L'interprétation
code
code
PHP
celui
compris
entre
délimiteurs
php
ensemble
d'instructions
terminant
chacune
point-virgule
comme
langage
Lorsque
code
interprété
espaces
retours
chariot
tabulation
pris
compte
serveur
tout
conseillé
d'en
mettre
n'est
parce
qu'ils
interprétés
l'on
peut
utiliser
afin
rendre
code
plus
lisible
puisque
utilisateurs
peuvent
lire
code
source
interprété
commentaires
autre
façon
rendre
code
plus
compréhensible
consiste
insérer
commentaires
lignes
tout
simplement
ignorées
serveur
lors
l'interprétation
faire
possible
comme
langage
d'utiliser
balises
vont
permettre
délimiter
explications
afin
l'interpréteur
ignore
passe
directement
suite
fichier
délimiteurs
/
*
*
/
commentaire
noté
façon
suivante
/
*
Voici
commentaire
*
/
toutefois
quelques
règles
respecter
•
commentaires
peuvent
être
placés
n'importe
l'intérieur
délimiteurs
script
PHP
•
•
•
•
commentaires
peuvent
contenir
délimiteur
fin
commentaire
*
/
commentaires
peuvent
être
imbriqués
commentaires
peuvent
être
écrits
plusieurs
lignes
commentaires
peuvent
couper
mot
code
deux
possible
aussi
d'utiliser
type
commentaire
permettant
mettre
toute
fin
d'une
ligne
commentaire
utilisant
double
slash
//
Tout
situe
droite
symbole
mis
commentaire
Typologie
manière
d'écrire
choses
langage
PHP
importance
langage
PHP
exemple
sensible
casse
anglais
case
sensitive
cela
signifie
qu'un
nom
contenant
majuscules
différent
nom
écrit
minuscules
Toutefois
règle
s'applique
fonctions
spécifications
langage
PHP
précisent
fonction
print
peut
être
appelée
print
Print
PRINT
Enfin
toute
instruction
termine
point-virgule
Introduction
serveur
web
logiciel
permettant
rendre
accessibles
nombreux
ordinateurs
clients
pages
web
stockées
disque
fiche
pratique
explique
comment
installer
serveur
web
Apache
système
type
UNIX
typiquement
distribution
Linux
telle
RedHat
Mandrake
n'importe
quelle
autre
cela
quelques
connaissances
Linux
bien
Unix
nécessaires
but
fiche
va
être
d'être
capable
récupérer
sources
différents
éléments
nécessaires
compiler
compilateur
nécessaire
généralement
installé
défaut
plupart
distributions
Linux
afin
d'avoir
système
opérationnel
L'installation
suivante
comprend
l'installation
l'interpréteur
PHP
langage
programmation
permettant
créer
pages
créées
dynamiquement
ainsi
SGBD
MySQL
système
gestion
bases
données
relationnelles
puissant
fonctionnant
sous
Linux
gratuit
Télécharger
sources
•
•
•
sources
PHP
peuvent
être
téléchargées
site
http
//www.php.net
sources
Apache
peuvent
être
téléchargées
site
http
//www.apache.org
sources
MySQL
peuvent
être
téléchargées
site
http
//www.mysql.org
installer
Apache
PHP
1
Décompresser
archives
2.
tar
zxvf
apache_1.3.x.tar.gz
tar
zxvf
php-3.0.x.tar
3
Configurer
Apache
4.
cd
apache_1.3.x
./configure
prefix=/www
5
Configurer
PHP
6.
cd
..
/php-3.0.x
./configure
with-mysql
with-apache=
..
/apache_1.3.x
-enable-track-vars
7
préférez
installer
PHP
autre
répertoire
faut
utiliser
l'option
configuration
-with-config-file-path=/path
Compiler
PHP
8.
make
make
install
9
Installer
Apache
10.
cd
..
/apache_1.3.x
11
./configure
prefix=/www
activatemodule=src/modules/php3/libphp3.a
12.
make
make
install
13
Modifier
fichier
configuration
PHP
14.
cd
..
/php-3.0.x
cp
php3.ini-dist
/usr/local/lib/php3.ini
pouvez
désormais
éditer
fichier
configuration
/usr/local/lib/php3.ini
15
Editez
fichier
configuration
serveur
apache
généralement
httpd.conf
srm.conf
ajoutez
ligne
suivante
AddType
application/x-httpd-php3
.php3
s'agit
choisir
l'extension
associée
scripts
PHP
souci
d'homogénéité
courant
choisir
l'extension
.php3
16
Démarrez
serveur
Apache
essentiel
d'arrêter
redémarrer
serveur
non
uniquement
relancer
suffit
généralement
taper
apachectl
stop
puis
apachectl
start
Premier
lancement
vérifier
l'installation
bien
fonctionnée
suffit
créer
petit
fichier
racine
documents
serveur
web
appelée
DocumentRoot
fichier
configuration
httpd.conf
Nommez
fichier
toto.php3
mettez
code
suivant
fichier
html
head
title
Exemple
/title
/head
body
php
echo
``
PHP
fonctionne
``
/body
/html
Lancez
navigateur
machine
entrez
l'URL
suivante
http
//localhost/toto.php3
localhost
désigne
machine
laquelle
trouvez
devriez
logiquement
voir
apparaître
phrase
``
PHP
fonctionne
navigateur
Introduction
EasyPHP
Afin
faire
fonctionner
PHP
nécessaire
base
d'en
télécharger
sources
depuis
site
spécialisé
exemple
PHP.net
puis
compiler
celui-ci
ainsi
d'éditer
liens
afin
créer
fichier
exécutable
processus
demande
notions
avancées
informatique
c'est
pourquoi
trois
adeptes
PHP
Emmanuel
Faivre
Laurent
Abbal
Thierry
Murail
mis
point
package
appelé
EasyPHP
contenant
3
produits
incontournables
scène
PHP
•
•
•
•
serveur
Web
Apache
moteur
scripts
PHP4
base
données
MySQL
outil
gestion
base
donnée
graphique
Phpmyadmin
EasyPHP
ainsi
pack
fonctionnant
sous
Windows
permettant
d'installer
clin
d'oeil
éléments
nécessaires
fonctionnement
d'un
site
web
dynamique
développé
PHP
Récupérer
EasyPHP
pack
EasyPHP
disponible
sites
suivants
•
•
www.manucorp.com
www.easyphp.org
suffit
premier
temps
télécharger
version
plus
récente
EasyPHP
pouvez
télécharger
adresse
Page
téléchargement
EasyPhP
Installer
EasyPHP
L'installation
EasyPHP
très
simple
notamment
l'apparition
version
1.4
comportant
installeur
automatique
installer
EasyPHP
suffit
premier
temps
double-cliquer
fichier
téléchargé
précédemment
L'écran
d'installation
EasyPHP
suivant
devrait
apparaître
cliquez
Next
Suivant
/
L'installeur
va
ensuite
demander
préciser
répertoire
d'installation
Puis
va
demander
création
d'un
groupe
menu
démarrer
enfin
va
récapituler
éléments
l'installation
avant
procéder
copie
fichiers
Après
copie
fichiers
EasyPHP
présente
l'écran
suivant
indiquant
l'installation
s'est
déroulée
correctement
peut
lors
l'installation
l'installeur
indique
l'erreur
suivante
erreur
indique
librairie
msvcrt.dll
'
pû
être
copiée
raison
erreur
provient
fait
système
Windows
actuellement
train
d'utiliser
libraire
peut
l'écraser
remédier
copiez
librairie
exemple
\
disque
dur
cliquez
ici
télécharger
librairie
Windows
9x
puis
redémarrez
mode
MS-DOS
puis
tapez
copy
\msvcrt.dll
\windows\system
système
va
demander
confirmer
écrasement
répondez
``
Oui
O
redémarrez
Windows
EasyPHP
devrait
fonctionner
Démarrage
EasyPHP
démarrer
Apache
MySQL
PHP
suffit
lancer
EasyPHP
partir
groupe
créé
menu
démarrer
vérifier
EasyPHP
fonctionne
suffit
taper
navigateur
préféré
•
•
http
//localhost
http
//127.0.0.1
deux
adresses
ci-dessus
représentant
machine
locale
Editer
site
créer
site
web
dynamique
EasyPHP
suffit
déposer
créations
sousrépertoire
/www
EasyPHP
exemple
créez
fichier
texte
contenant
texte
suivant
phpinfo
Puis
renommez
fichier
phpinfo.php3
déposez-le
sous-répertoire
/www
pouvez
désormais
visualiser
résultat
l'adresse
suivante
http
//localhost/phpinfo.php3
Plus
d'informations
plus
d'informations
cas
problème
EasyPHP
allez
EasyPHP.org
cas
problème
commencez
consulter
FAQ
puis
consultez
Forum
Concept
variable
PHP
variable
objet
repéré
nom
pouvant
contenir
données
pourront
être
modifiées
lors
l'exécution
programme
variables
langage
PHP
peuvent
être
trois
types
•
•
•
scalaires
tableaux
tableaux
associatifs
Quelque
type
variable
nom
doit
obligatoirement
être
précédé
caractère
dollar
Contrairement
nombreux
langages
programmation
comme
langage
variables
PHP
n'ont
besoin
d'être
déclarées
c'est-à-dire
l'on
peut
commencer
utiliser
sans
avoir
averti
l'interpréteur
précédemment
ainsi
variable
existait
précédemment
contenu
utilisé
sinon
l'interpréteur
affectera
valeur
assignant
0
défaut
façon
ajoutez
3
nouvelle
variable
non
définie
plus
haut
code
valeur
3
Nommage
variables
PHP
noms
variables
doivent
répondre
certains
critères
•
nom
variable
doit
commencer
lettre
majuscule
minuscule
``
_
chiffre
•
nom
variable
peut
comporter
lettres
chiffres
caractère
_
espaces
autorisés
Nom
variable
correct
Nom
variable
incorrect
Raison
Variable
Nom
Variable
comporte
espaces
Nom_De_Variable
123Nom_De_Variable
commence
chiffre
nom_de_variable
toto
mailcity.com
caractère
spécial
nom_de_variable_123
Nom-de-variable
signe
-
interdit
nom_de_variable
nom_de_variable
commence
noms
variables
sensibles
casse
langage
PHP
fait
différence
entre
nom
majuscule
nom
minuscules
faut
veiller
utiliser
noms
comportant
casse
Toutefois
noms
fonctions
font
exception
règle
Variables
scalaires
langage
PHP
propose
trois
types
variables
scalaires
•
•
entiers
nombres
naturels
sans
décimale
sans
virgule
réels
nombres
décimaux
parle
généralement
type
double
car
s'agit
nombre
décimaux
double
précision
•
chaines
caractères
ensembles
caractères
n'est
nécessaire
PHP
typer
variables
c'est-à-dire
définir
type
suffit
assigner
valeur
définir
type
•
•
•
entiers
nombre
sans
virgule
réels
nombres
virgule
réalité
point
chaines
caractères
ensembles
caractères
entre
guillemets
simples
doubles
Instruction
Type
variable
Variable
=
0
type
entier
Variable
=
12
type
entier
Variable
=
0.0
type
réel
Variable
=
12.0
type
réel
Variable
=
``
0.0
type
chaîne
Variable
=
``
Bonjour
tout
monde
type
chaîne
existe
caractères
repérés
code
ASCII
spécial
permettant
d'effectuer
opérations
particulières
caractères
peuvent
être
représentés
plus
simplement
langage
PHP
grâce
caractère
'\
'
suivi
d'une
lettre
précise
qu'il
s'agit
d'un
caractère
contrôle
Caractère
Description
\
guillemet
\\
barre
oblique
inverse
antislash
\r
retour
chariot
\n
retour
ligne
\t
tabulation
effet
certains
caractères
pourraient
être
représentés
autrement
retour
ligne
peut
être
représenté
l'écran
D'autre
part
caractères
\
``
peuvent
faire
partie
tant
tel
d'une
chaîne
caractère
raisons
évidente
d'ambiguité
Variables
tableaux
variables
telles
vues
permettent
stocker
qu'une
seule
donnée
fois
Or
nombreuses
données
comme
cela
souvent
cas
variables
distinctes
beaucoup
trop
lourdes
gérer
Heureusement
PHP
propose
structures
données
permettant
stocker
l'ensemble
données
``
variable
commune
Ainsi
accéder
valeurs
suffit
parcourir
variable
type
complexe
composée
variables
type
simple
tableaux
stockent
données
sous
forme
liste
données
contenues
liste
accessibles
grâce
index
numéro
représentant
l'élément
liste
Contrairement
langages
tels
langage
possible
stocker
éléments
types
différents
tableau
Ainsi
désigner
élément
tableau
suffit
faire
suivre
nom
tableau
l'indice
l'élément
entre
crochets
Tableau
0
=
12
Tableau
1
=
``
CCM
PHP
n'est
nécessaire
préciser
valeur
l'index
lorsque
l'on
veut
remplir
tableau
car
assigne
valeur
0
premier
élément
tableau
vide
incrémente
indices
suivants
façon
facile
remplir
tableau
valeurs
code
précédent
équivalent
Tableau
=
12
Tableau
=
``
CCM
•
•
indices
tableau
commencent
zéro
tous
types
variables
peuvent
être
contenus
tableau
Lorsqu'un
tableau
contient
d'autres
tableaux
parle
tableaux
multidimensionnels
possible
créer
directement
tableaux
multidimensionnels
utilisant
plusieurs
paires
crochets
index
autant
paires
crochets
dimension
voulue
exemple
tableau
deux
dimensions
pourra
être
déclaré
comme
suit
Tableau
0
0
Tableau
0
1
Tableau
1
0
Tableau
1
1
=
=
=
=
12
CCM
1245.652
revoir
Variables
tableaux
associatifs
PHP
permet
l'utilisation
chaînes
caractères
lieu
simples
entiers
définir
indices
d'un
tableau
parle
alors
tableaux
associatifs
façon
nommer
indices
peut
parfois
être
plus
agréable
utiliser
Toto
``
Age
=
12
Toto
``
Adresse
=
``
22
rue
bois
fleuris
Toto
``
Nom
=
``
Ah
bien
aimé
connaître
nom
famille
Toto
Portée
visibilité
variables
Selon
l'endroit
déclare
variable
celle-ci
pourra
être
accessible
visible
partout
code
bien
portion
confinée
celui-ci
l'intérieur
d'une
fonction
exemple
parle
portée
visibilité
d'une
variable
Lorsqu'une
variable
déclarée
code
c'est-à-dire
l'extérieur
toute
fonction
tout
bloc
d'instructions
accessible
partout
code
n'importe
quelle
fonction
programme
peut
faire
appel
variable
parle
alors
variable
globale
Lorsque
l'on
déclare
variable
l'intérieur
d'un
bloc
d'instructions
entre
accolades
portée
confine
l'intérieur
bloc
lequel
déclarée
•
variable
déclarée
début
code
c'est-à-dire
avant
tout
bloc
donnée
globale
pourra
alors
utiliser
partir
n'importe
quel
bloc
d'instructions
•
variable
déclarée
l'intérieur
d'un
bloc
d'instructions
fonction
boucle
exemple
portée
limitée
seul
bloc
d'instructions
c'est-à-dire
qu'elle
inutilisable
ailleurs
parle
alors
variable
locale
D'une
manière
générale
préférable
donner
noms
différents
variables
locales
globales
raisons
lisibilité
compréhension
code
Définition
constantes
constante
variable
valeur
inchangeable
lors
l'exécution
d'un
programme
PHP
constantes
définies
grâce
fonction
define
syntaxe
fonction
define
suivante
define
``
Nom_de_la_variable
Valeur
nom
d'une
constante
définie
l'aide
fonction
define
doit
commencer
caractère
façon
aucune
affectation
n'est
possible
Qu'est-ce
qu'un
opérateur
opérateurs
symboles
permettent
manipuler
variables
c'est-à-dire
effectuer
opérations
évaluer
distingue
plusieurs
types
d'opérateurs
•
•
•
•
•
•
•
opérateurs
calcul
opérateurs
d'assignation
opérateurs
d'incrémentation
opérateurs
comparaison
opérateurs
logiques
opérateurs
bit-à-bit
opérateurs
rotation
bit
opérateurs
calcul
opérateurs
calcul
permettent
modifier
mathématiquement
valeur
d'une
variable
Opérateur
Dénomination
Effet
Résultat
x=7
Exemple
+
opérateur
d'addition
Ajoute
deux
valeurs
x+3
10
-
opérateur
soustraction
Soustrait
deux
valeurs
x-3
4
*
opérateur
multiplication
Multiplie
deux
valeurs
x
*
3
21
/
plus
opérateur
division
Divise
deux
valeurs
x/3
2.3333333
=
opérateur
d'affectation
Affecte
valeur
variable
x=3
Met
valeur
3
variable
x
opérateur
modulo
x
3
1
Donne
reste
division
entière
entre
2
nombres
opérateurs
d'assignation
opérateurs
permettent
simplifier
opérations
telles
ajouter
valeur
variable
stocker
résultat
variable
telle
opération
s'écrirait
habituellement
façon
suivante
exemple
x=
x+2
opérateurs
d'assignation
possible
d'écrire
opération
sous
forme
suivante
x+=2
Ainsi
valeur
x
7
avant
opération
9
après
autres
opérateurs
type
suivants
Opérateur
Effet
+=
addition
deux
valeurs
stocke
résultat
variable
gauche
-=
soustrait
deux
valeurs
stocke
résultat
variable
*
=
multiplie
deux
valeurs
stocke
résultat
variable
/=
divise
deux
valeurs
stocke
résultat
variable
=
donne
reste
division
deux
valeurs
stocke
résultat
variable
|=
Effectue
logique
entre
deux
valeurs
stocke
résultat
variable
^=
Effectue
exclusif
entre
deux
valeurs
stocke
résultat
variable
&
=
Effectue
logique
entre
deux
valeurs
stocke
résultat
variable
.=
Concatène
deux
chaînes
stocke
résultat
variable
opérateurs
d'incrémentation
type
d'opérateur
permet
facilement
augmenter
diminuer
d'une
unité
variable
opérateurs
très
utiles
structures
telles
boucles
besoin
d'un
compteur
variable
augmente
opérateur
type
x++
permet
remplacer
notations
lourdes
telles
x=
x+1
bien
x+=1
Opérateur
Dénomination
Effet
Syntaxe
Résultat
x
valant
7
++
Incrémentation
Augmente
d'une
unité
variable
x++
8
Décrémentation
Diminue
d'une
unité
variable
6
x
opérateurs
comparaison
Opérateur
Dénomination
==
confondre
opérateur
d'égalité
signe
d'affectation
=
Effet
Compare
deux
valeurs
vérifie
égalité
Exemple
x==3
Résultat
Retourne
1
x
égal
3
sinon
0
opérateur
d'infériorité
stricte
Vérifie
qu'une
variable
strictement
inférieure
x
3
valeur
Retourne
1
x
inférieur
3
sinon
0
=
opérateur
d'infériorité
Vérifie
qu'une
variable
inférieure
égale
x
=3
valeur
Retourne
1
x
inférieur
égale
3
sinon
0
opérateur
supériorité
stricte
Vérifie
qu'une
variable
strictement
supérieure
x
3
valeur
Retourne
1
x
supérieur
3
sinon
0
=
opérateur
supériorité
Vérifie
qu'une
variable
supérieure
égale
x
=3
valeur
Retourne
1
x
supérieur
égal
3
sinon
0
=
opérateur
différence
Vérifie
qu'une
variable
x
=3
différente
d'une
valeur
Retourne
1
x
différent
3
sinon
0
opérateurs
logiques
booléens
type
d'opérateur
permet
vérifier
plusieurs
conditions
vraies
Opérateur
Dénomination
Effet
Syntaxe
||
OR
logique
Vérifie
qu'une
conditions
réalisée
condition1
||
condition2
&
&
AND
logique
Vérifie
toutes
conditions
réalisées
condition1
&
&
condition2
XOR
exclusif
Vérifie
qu'une
seule
conditions
réalisée
condition1
XOR
condition2
NON
logique
Inverse
l'état
d'une
variable
booléenne
retourne
condition
valeur
1
variable
vaut
0
0
vaut
1
opérateurs
bit-à-bit
comprenez
opérateurs
cela
n'est
important
n'en
probablement
l'utilité
ceux
voudraient
comprendre
rendez-
chapitres
suivants
•
•
•
compréhension
binaire
représentation
données
Instructions
arithmétiques
logiques
assembleur
type
d'opérateur
traite
opérandes
comme
données
binaires
plutôt
données
décimales
hexadécimales
octales
opérateurs
traitent
données
selon
représentation
binaire
retournent
valeurs
numériques
standard
format
d'origine
opérateurs
suivants
effectuent
opérations
bit-à-bit
c'est-à-dire
bits
poids
Opérateur
Dénomination
&
bit-à-bit
Effet
Retourne
1
deux
bits
poids
1
Syntaxe
9
&
12
1001
&
1100
Résultat
8
1000
|
bit-à-bit
Retourne
1
l'un
l'autre
deux
bits
poids
1
deux
9
|
12
1001
|
1100
13
1101
^
exclusif
Retourne
1
l'un
deux
bits
poids
1
deux
9
^
12
1001
^
5
0101
1100
~
Complément
NON
Retourne
1
bit
0
inversement
~9
~1001
6
0110
opérateurs
rotation
bit
comprenez
opérateurs
cela
n'est
important
n'en
probablement
l'utilité
ceux
voudraient
comprendre
rendez-
chapitres
suivants
•
•
•
compréhension
binaire
représentation
données
Instructions
arithmétiques
logiques
assembleur
type
d'opérateur
traite
opérandes
comme
données
binaires
d'une
longueur
32
bits
plutôt
données
décimales
hexadécimales
octales
opérateurs
traitent
données
selon
représentation
binaire
retournent
valeurs
numériques
standards
format
d'origine
opérateurs
suivants
effectuent
rotations
bits
c'est-à-dire
qu'il
décale
chacun
bits
d'un
nombre
bits
vers
gauche
vers
droite
première
opérande
désigne
donnée
laquelle
va
faire
décalage
seconde
désigne
nombre
bits
duquel
va
être
décalée
Opérateur
Dénomination
Effet
Syntaxe
Décale
bits
vers
gauche
multiplie
2
chaque
décalage
zéros
sortent
gauche
perdus
tandis
zéros
insérés
droite
Rotation
gauche
Décale
bits
vers
droite
divise
2
Rotation
droite
chaque
décalage
zéros
sortent
droite
conservation
signe
perdus
tandis
bit
non-nul
poids
plus
fort
recopié
gauche
Résultat
6
1
12
110
1
1100
6
1
0110
1
3
0011
Autres
opérateurs
opérateurs
peuvent
être
classés
catégorie
spécifique
tout
chacun
importance
Opérateur
Dénomination
Effet
Syntaxe
Concaténation
Joint
deux
chaînes
bout
bout
Bonjour
``
revoir
Référencement
variable
Permet
définir
variable
MaVariable
=
2
-
Propriété
d'un
objet
Permet
d'accéder
données
membres
d'une
classe
MonObjet
Propriete
Résultat
BonjourAu
revoir
priorités
Lorsque
l'on
associe
plusieurs
opérateurs
faut
l'interprêteur
PHP
sache
quel
ordre
traiter
voici
l'ordre
décroissant
priorités
tous
opérateurs
Priorité
opérateurs
+++++++++++++++
++++++++++++++
++
~
+++++++++++++
*
/
++++++++++++
+
-
+++++++++++
=
=
++++++++++
==
=
+++++++++
&
++++++++
^
+++++++
|
-
++++++
&
&
+++++
||
++++
+++
=
+=
-=
*
=
/=
=
=
=
=
&
=
^=
|=
++
AND
+
XOR
Qu'est-ce
qu'une
structure
conditionnelle
appelle
structure
conditionnelle
instructions
permettent
tester
condition
vraie
non
c'est-à-dire
valeur
expression
vaut
0
1
PHP
associe
mot
clé
true
1
false
0
structures
conditionnelles
peuvent
être
associées
structures
répètent
suivant
réalisation
condition
appelle
structures
structures
boucle
notion
bloc
expression
suivie
d'un
point-virgule
appelée
instruction
exemple
a++
instruction
Lorsque
l'on
veut
regrouper
plusieurs
instructions
peut
créer
l'on
appelle
bloc
c'est-à-dire
ensemble
d'instructions
suivies
respectivement
point-virgules
comprises
entre
accolades
{
}
instructions
if
while
for
peuvent
exemple
être
suivies
d'un
bloc
d'instructions
exécuter
L'instruction
if
L'instruction
if
structure
test
plus
basique
retrouve
tous
langages
syntaxe
différente
permet
d'exécuter
série
d'instruction
jamais
condition
réalisée
syntaxe
expression
suivante
if
condition
réalisée
{
liste
d'instructions
}
Remarques
•
•
condition
doit
être
entre
parenthèses
possible
définir
plusieurs
conditions
remplir
opérateurs
&
&
||
exemple
l'instruction
suivante
teste
deux
conditions
vraies
if
condition1
&
&
condition2
L'instruction
ci-dessous
exécutera
instructions
l'une
l'autre
deux
conditions
vraie
if
condition1
||
condition2
•
s'il
'
qu'une
instruction
accolades
nécessaires
L'instruction
if
else
L'instruction
if
forme
basique
permet
tester
qu'une
condition
or
plupart
temps
aimerait
pouvoir
choisir
instructions
exécuter
cas
non
réalisation
condition
L'expression
if
else
permet
d'exécuter
autre
série
d'instruction
cas
non-réalisation
condition
syntaxe
expression
suivante
if
condition
réalisée
{
liste
d'instructions
}
else
{
autre
série
d'instructions
}
L'instruction
if
elseif
else
L'instruction
if
else
permet
tester
qu'une
condition
or
parfois
nécessaire
tester
plusieurs
conditions
façon
exclusive
c'est-à-dire
toutes
conditions
seule
réalisée
L'expression
if
elseif
else
permet
d'enchaîner
série
d'instructions
évite
d'avoir
imbriquer
instructions
if
syntaxe
expression
suivante
if
condition
réalisée
{
liste
d'instructions
}
elseif
autre
condition
réalisée
{
autre
série
d'instructions
}
else
dernière
condition
réalisée
{
série
d'instructions
}
façon
plus
courte
faire
test
opérateur
ternaire
possible
faire
test
structure
beaucoup
moins
lourde
grâce
structure
suivante
appelée
opérateur
ternaire
condition
instruction
vrai
instruction
faux
Remarques
•
•
•
condition
doit
être
entre
parenthèses
Lorsque
condition
vraie
l'instruction
gauche
exécutée
Lorsque
condition
fausse
l'instruction
droite
exécutée
L'instruction
switch
L'instruction
switch
permet
faire
plusieurs
tests
valeurs
contenu
d'une
variable
branchement
conditionnel
simplifie
beaucoup
test
plusieurs
valeurs
d'une
variable
car
opération
compliquée
possible
if
imbriqués
syntaxe
suivante
switch
Variable
{
case
Valeur1
Liste
d'instructions
break
case
Valeur2
Liste
d'instructions
break
case
Valeurs
Liste
d'instructions
break
default
Liste
d'instructions
break
}
parenthèses
suivent
mot
clé
switch
indiquent
expression
valeur
testée
successivement
chacun
case
Lorsque
l'expression
testée
égale
valeurs
suivant
case
liste
d'instructions
suit
celui-ci
exécutée
mot
clé
break
indique
sortie
structure
conditionnelle
mot
clé
default
précède
liste
d'instructions
exécutée
l'expression
n'est
jamais
égale
valeurs
N'oubliez
d'insérer
instructions
break
entre
chaque
test
genre
d'oubli
difficile
détecter
car
aucune
erreur
n'est
signalée
boucles
boucles
structures
permettent
d'exécuter
plusieurs
fois
série
d'instructions
jusqu
'
qu'une
condition
plus
réalisée
appelle
parfois
structures
instructions
répétitives
bien
itérations
façon
plus
commune
faire
boucle
créer
compteur
variable
s'incrémente
c'est-à-dire
augmente
1
chaque
tour
boucle
faire
arrêter
boucle
lorsque
compteur
dépasse
certaine
valeur
boucle
for
L'instruction
for
permet
d'exécuter
plusieurs
fois
série
d'instructions
c'est
boucle
syntaxe
suffit
préciser
nom
variable
sert
compteur
éventuellement
valeur
départ
condition
variable
laquelle
boucle
s'arrête
basiquement
condition
teste
valeur
compteur
dépasse
limite
enfin
instruction
incrémente
décrémente
compteur
syntaxe
expression
suivante
for
compteur
condition
modification
compteur
{
liste
d'instructions
}
exemple
for
i=1
i
6
i++
{
echo
``
i
br
}
boucle
affiche
5
fois
valeur
i
c'est-à-dire
1,2,3,4,5
commence
i=1
vérifie
i
bien
inférieur
6
etc
jusqu
'
atteindre
valeur
i=6
laquelle
condition
plus
réalisée
boucle
s'interrompra
programme
continuera
cours
D'autre
part
langage
PHP
autorise
déclaration
variable
boucle
l'instruction
for
elle-même
exemple
for
i=0
i
10
i++
{
echo
``
i
br
}
•
faudra
toujours
vérifier
boucle
bien
condition
sortie
i.e
compteur
s'incrémente
correctement
•
instruction
echo
boucle
bon
moyen
vérifier
valeur
compteur
l'affichant
•
faut
bien
compter
nombre
fois
l'on
veut
faire
exécuter
boucle
o
for
i=0
i
10
i++
exécute
10
fois
boucle
i
0
9
o
for
i=0
i
=10
i++
exécute
11
fois
boucle
i
0
10
o
for
i=1
i
10
i++
exécute
9
fois
boucle
i
1
9
o
for
i=1
i
=10
i++
exécute
10
fois
boucle
i
1
10
L'instruction
while
L'instruction
while
représente
autre
moyen
d'exécuter
plusieurs
fois
série
d'instructions
syntaxe
expression
suivante
while
condition
réalisée
{
liste
d'instructions
}
instruction
exécute
liste
d'instructions
tant
while
mot
anglais
signifie
tant
condition
réalisée
condition
sortie
pouvant
être
n'importe
quelle
structure
conditionnelle
risques
boucle
infinie
boucle
condition
toujours
vraie
grands
c'est-à-dire
qu'elle
risque
provoquer
plantage
navigateur
Saut
inconditionnel
peut
être
nécessaire
faire
sauter
boucle
plusieurs
valeurs
sans
autant
mettre
fin
celle-ci
syntaxe
expression
``
continue
instruction
place
boucle
l'associe
généralement
structure
conditionnelle
sinon
lignes
situées
entre
instruction
fin
boucle
obsolètes
Exemple
Imaginons
l'on
veuille
imprimer
x
allant
1
10
valeur
1/
x-7
évident
x=7
erreur
Heureusement
grâce
l'instruction
continue
possible
traiter
valeur
part
puis
continuer
boucle
x=1
while
x
=10
{
if
x
==
7
{
echo
``
Division
zéro
``
continue
}
=
1/
x-7
echo
``
br
x++
}
erreur
programme
peut-être
l'avez-vous
vue
Lorsque
x
égal
7
compteur
s'incrémente
plus
reste
constamment
valeur
7
fallu
écrire
x=1
while
x
=10
{
if
x
==
7
{
echo
``
division
0
x++
continue
}
=
1/
x-7
echo
``
br
x++
}
Arrêt
inconditionnel
l'inverse
peut
être
voulu
d'arrêter
prématurément
boucle
autre
condition
celle
précisé
l'en-tète
boucle
L'instruction
break
permet
d'arrêter
boucle
for
bien
while
s'agit
tout
comme
continue
l'associer
structure
conditionnelle
sans
laquelle
boucle
ferait
jamais
plus
d'un
tour
l'exemple
tout
l'heure
exemple
l'on
savait
quel
moment
dénominateur
x-7
s'annule
bon
OK
équations
plus
compliquées
exemple
possible
faire
arrêter
boucle
cas
d'annulation
dénominateur
éviter
division
zéro
for
x=1
x
=10
x++
{
=
x-7
if
==
0
{
echo
``
division
0
break
}
echo
``
1/
br
}
Arrêt
d'exécution
script
PHP
autorise
l'utilisation
commande
exit
permet
d'interrompre
totalement
l'interprétation
script
signifie
serveur
n'envoie
plus
d'informations
navigateur
script
figé
état
actuel
instruction
particulièrement
utile
lors
l'apparition
d'erreur
notion
fonction
appelle
fonction
sous-programme
permet
d'effectuer
ensemble
d'instructions
simple
appel
fonction
corps
programme
principal
fonctions
permettent
d'exécuter
plusieurs
parties
programme
série
d'instructions
cela
permet
simplicité
code
taille
programme
minimale
D'autre
part
fonction
peut
faire
appel
elle-même
parle
alors
fonction
récursive
faut
oublier
mettre
condition
sortie
risque
sinon
pouvoir
arrêter
programme
déclaration
d'une
fonction
PHP
recèle
nombreuses
fonctions
intégrées
permettant
d'effectuer
actions
courantes
Toutefois
possible
définir
fonctions
dites
fonctions
utilisateurs
afin
simplifier
l'exécution
séries
d'instructions
répétitives
Contrairement
nombreux
autres
langages
PHP
nécessite
l'on
définisse
fonction
avant
celle-ci
puisse
être
utilisée
car
l'appeler
corps
programme
faut
l'interpréteur
connaisse
c'est-à-dire
qu'il
connaisse
nom
arguments
instructions
qu'elle
contient
définition
d'une
fonction
s'appelle
``
déclaration
peut
faire
n'importe
code
déclaration
d'une
fonction
fait
grâce
mot-clé
function
selon
syntaxe
suivante
function
Nom_De_La_Fonction
argument1
argument2
{
liste
d'instructions
}
Remarques
•
nom
fonction
suit
mêmes
règles
noms
variables
o
nom
doit
commencer
lettre
o
nom
fonction
peut
comporter
lettres
chiffres
caractères
_
&
espaces
autorisés
o
nom
fonction
comme
celui
variables
sensible
casse
différenciation
entre
minuscules
majuscules
•
arguments
facultatifs
s'il
'
d'arguments
parenthèses
doivent
rester
présentes
•
faut
oublier
refermer
accolades
•
nombre
d'accolades
ouvertes
fonction
boucles
autres
structures
doit
être
égal
nombre
d'accolades
fermées
•
chose
s'applique
parenthèses
crochets
guillemets
fois
étape
franchie
fonction
s'exécutera
tant
l'on
fait
appel
quelque
part
page
Appel
fonction
exécuter
fonction
suffit
faire
appel
écrivant
nom
fois
plus
respectant
casse
suivie
d'une
parenthèse
ouverte
éventuellement
arguments
puis
d'une
parenthèse
fermée
Nom_De_La_Fonction
Remarques
•
point
virgule
signifie
fin
d'une
instruction
permet
l'interpréteur
distinguer
différents
blocs
d'instructions
•
jamais
défini
arguments
déclaration
fonction
faudra
veiller
inclure
lors
l'appel
fonction
nombre
d'arguments
séparés
virgules
Nom_De_La_Fonction
argument1
argument2
Renvoi
d'une
valeur
fonction
fonction
peut
renvoyer
valeur
terminer
grâce
mot-clé
return
Lorsque
l'instruction
return
rencontrée
fonction
évalue
valeur
suit
puis
renvoie
programme
appelant
programme
partir
duquel
fonction
appelée
fonction
peut
contenir
plusieurs
instructions
return
toutefois
première
instruction
return
rencontrée
provoquera
fin
fonction
renvoi
valeur
suit
syntaxe
l'instruction
return
simple
return
valeur_ou_variable
arguments
d'une
fonction
possible
passer
arguments
fonction
c'est-à-dire
fournir
valeur
nom
d'une
variable
afin
fonction
puisse
effectuer
opérations
arguments
bien
grâce
arguments
passage
d'arguments
fonction
fait
moyen
d'une
liste
d'arguments
séparés
virgules
entre
parenthèses
suivant
immédiatement
nom
fonction
arguments
peuvent
être
simple
variables
aussi
tableaux
objets
noter
qu'il
possible
donner
valeur
défaut
arguments
faisant
suivre
nom
variable
signe
``
=
puis
valeur
l'on
affecte
défaut
variable
Lorsque
voulez
utiliser
argument
corps
fonction
tant
variable
celui-ci
doit
être
précédé
signe
function
dire_texte
texte
=
'Bonjour
'
{
if
empty
{
//
vide
retourne
faux
return
false
}
else
{
echo
``
texte
//
affiche
texte
return
true
//
fonction
exécutée
succès
}
}
Ainsi
fonction
peut
être
appelée
deux
façons
différentes
//
Passage
deux
paramètres
dire_texte
``
cher
phpeur
``
Bienvenue
//
affiche
``
Bienvenue
cher
phpeur
//
Utilisation
valeur
défaut
deuxième
paramètre
dire_texte
``
cher
phpeur
//
affiche
``
Bonjour
cher
phpeur
Travailler
variables
fonctions
Lorsque
manipulerez
variables
fonctions
arrivera
constater
beau
modifier
variable
fonction
celle-ci
retrouve
valeur
d'origine
dès
l'on
sort
fonction
Cela
portée
variables
c'est-à-dire
elles
définies
comme
variables
globales
locales
existe
plusieurs
niveaux
définition
variables
•
variable
précédée
mot
clé
global
visible
l'ensemble
code
c'est-à-dire
portée
limitée
fonction
seulement
Ainsi
toutes
fonctions
pourront
utiliser
modifier
variable
•
niveau
static
permet
définir
variable
locale
fonction
persiste
durant
tout
temps
d'exécution
script
•
défaut
variable
possède
niveau
local
c'est-à-dire
variable
modifiée
'
l'intérieur
fonction
retrouvera
valeur
qu'elle
juste
avant
l'appel
fonction
sortie
celle-ci
chaine
=
``
Nombre
camions
``
function
ajoute_camion
mode=
{
global
chaine
static
nb=0
nb++
//
incrémente
nombre
camions
if
mode
==
``
affiche
{
echo
chaine.
nb
//
affiche
nombre
camions
}
}
ajoute_camion
//
nb
==
ajoute_camion
//
nb
==
ajoute_camion
//
nb
==
ajoute_camion
``
affiche
1
2
3
//
affiche
Nombre
camions
4
Passage
paramètre
référence
autre
méthode
modifier
variable
consiste
faire
précéder
caractère
&
précisant
qu'il
s'agit
alors
d'un
alias
valeur
variable
modifiée
sortie
fonction
parle
alors
passage
référence
cas
passe
référence
adresse
mémoire
variable
fonction
permet
modifier
valeur
function
dire_texte
&
texte
{
texte
=
``
Bienvenue
}
chaine
=
``
Bonjour
``
dire_texte
``
cher
phpeur
chaine
echo
chaine
//
affiche
``
Bienvenue
cher
phpeur
Retourner
plusieurs
variables
Lorsque
souhaitez
qu'une
fonction
retourne
plusieurs
valeurs
plus
simple
d'utiliser
tableau
function
nom_fonction
{
.....
return
array
variable1
variable2
variable3
//
retourne
valeurs
voulues
tableau
}
retour
=
nom_fonction
echo
``
retour
0
-
retour
1
-
retour
2
récursivité
fonctions
récursives
fonctions
s'appellent
elles-mêmes
type
fonction
révéle
indispensable
parcourir
arborescence
exemple
Voici
exemple
simple
function
fonction_recursive
n=0
{
n++
echo
``
br
if
10
{
//
inférieur
10
continue
fonction_recursive
}
}
fonction_recursive
//
affiche
nb
1
10
notion
classe
Php3
intègre
soupçon
caractéristiques
empruntées
langages
orientés
objet
c'est-à-dire
possibilité
d'utiliser
objets
entités
regroupant
données
fonctions
sein
d'une
structure
rendant
programmation
plus
simple
qu'en
programmation
habituelle
appelée
programmation
procédurale
opposition
programmation
orientée
objet
appelle
classe
structure
d'un
objet
c'est-à-dire
déclaration
l'ensemble
entités
composeront
objet
objet
``
issu
d'une
classe
c'est
produit
sort
d'un
moule
réalité
dit
qu'un
objet
instanciation
d'une
classe
c'est
raison
laquelle
pourra
parler
indifféremment
d'objet
d'instance
éventuellement
d'occurrence
classe
composée
deux
parties
•
attributs
parfois
appelés
données
membres
s'agit
données
représentant
l'état
l'objet
•
méthodes
parfois
appelées
fonctions
membres
s'agit
opérations
applicables
objets
déclaration
d'une
classe
pouvoir
manipuler
objets
essentiel
définir
classes
c'est-à-dire
définir
structure
d'un
objet
Php
définition
fait
manière
suivante
class
Nom_de_la_classe
{
//
Déclarations
données
membres
var
Donnee_Membre_1
var
Donnee_Membre_2
var
//
Déclarations
méthodes
function
Nom_de_la_fonction_membre1
parametres
{
liste
d'instructions
}
}
Nom_de_la_classe
représente
bien
évidemment
type
d'objet
désigné
classe
moins
nom
attribuez
Contrairement
langages
orientés
objet
comme
C++
Php
n'inclut
version
3
niveaux
visibilité
éléments
classe
'
concept
d'encapsulation
concepts
majeurs
programmation
orientée
objet
Contrairement
déclaration
classes
C++
déclaration
classe
finit
point-virgule
Instanciation
classe
Après
avoir
déclaré
classe
faut
instancier
objets
pouvoir
l'exploiter
opération
fait
l'aide
mot
clé
new
permettant
faire
objets
découlant
d'une
classe
syntaxe
mot
clé
new
suivante
Nom_de_l_objet
=
new
Nom_de_la_classe
partir
moment
l'objet
instancié
possède
propriétés
propres
cela
signifie
instanciez
nouvel
objet
modification
propriétés
l'un
n'influera
aucunement
celles
l'autre
existe
méthode
spéciale
portant
nom
classe
s'exécutant
automatiquement
lors
l'instanciation
l'objet
méthode
appelée
constructeur
très
utile
initialiser
données
membres
lors
l'instanciation
Accéder
propriétés
d'un
objet
L'accès
propriétés
d'un
objet
fait
grâce
nom
l'objet
suivi
d'une
flêche
-
représentée
moins
-
signe
supérieur
puis
nom
donnée
membre
sans
signe
exemple
Nom_de_l_objet-
Nom_de_la_donnee_membre
=
Valeur
Accéder
méthodes
d'un
objet
L'accès
méthodes
d'un
objet
fait
comme
l'accès
propriétés
c'est-à-dire
nom
l'objet
suivi
d'une
flêche
nom
méthode
méthode
suivie
parenthèses
contenant
paramètres
y'en
L'accès
méthode
fait
façon
suivante
Nom_de_l_objet-
Nom_de_la_fonction_membre
parametre1
parametre2
variable
courante
this
mot
clé
this
permet
désigner
l'objet
lequel
trouve
c'est-à-dire
lorsque
l'on
désire
faire
référence
fonction
membre
l'objet
lequel
trouve
utilise
this
Grâce
variable
spéciale
possible
fonction
membre
faire
référence
propriétés
situées
objet
fonction
membre
Ainsi
lorsque
l'on
désire
accéder
propriété
d'un
objet
partir
d'une
méthode
objet
suffit
faire
précéder
nom
donnée
membre
this-
exemple
class
Toto
{
var
age
var
sexe
var
adresse
function
DefineTotoAge
Age
{
this-
age
=
Age
}
}
toto_test
=
new
Toto
toto_test-
DefineTotoAge
10
echo
``
L'age
TOTO
``
toto_test-
age
``
br/
limitations
l'utilisation
classes
Php
PHP
version
3
reste
assez
limité
point
vue
programmation
objet
plupart
aspects
marquants
programmation
objet
présents
langage
•
•
•
l'encapsulation
l'héritage
polymorphisme
but
PHP
permettre
création
pages
web
dynamiques
ainsi
but
premier
pouvoir
envoyer
données
navigateur
trois
fonctions
standards
PHP
fournit
3
fonctions
permettant
d'envoyer
texte
navigateur
fonctions
particularité
pouvoir
insérer
données
envoyées
valeurs
variables
pouvant
être
fonction
d'une
valeur
récupérée
exemple
c'est
rend
possible
création
pages
dynamiques
3
fonctions
suivantes
•
•
•
echo
print
printf
fonction
echo
fonction
echo
permet
d'envoyer
navigateur
chaîne
caractères
délimitée
guillemets
suit
syntaxe
fonction
suivante
echo
Expression
L'expression
peut
être
chaîne
caractères
expression
l'interpréteur
évalue
echo
``
Chaine
caracteres
echo
1+2
*
87
Ainsi
donné
chaîne
caractères
délimitée
guillemets
l'insertion
guillemets
doubles
chaîne
provoquerait
erreur
C'est
raison
laquelle
guillemets
doubles
ainsi
tous
caractères
spéciaux
doivent
être
précédés
d'un
antislash
Voici
récapitulatif
caractères
spéciaux
nécessitant
l'ajout
d'un
antislash
Caractère
Description
TD\
td
TDGUILLEMET
td
TD\
td
TDCARACT
&
EGRAVE
RE
td
TD\\
td
inverse
oblique
TD\R
td
TD\N
td
TD\T
td
TDTABULATION
td
caractère
rôle
particulier
mesure
l'interpréteur
comprend
comme
variable
signifie
lorsque
caractère
rencontré
chaîne
suit
fonction
echo
l'interpréteur
récupère
nom
variable
suit
caractère
remplace
valeur
l'exemple
suivant
exemple
assigne
date
actuelle
variable
appelée
MaDate
puis
l'affiche
navigateur
HTML
HEAD
TITLE
Affichage
l'heure
/TITLE
/HEAD
BODY
//
Récupération
date
//
stockage
variable
MaDate
=
date
``
echo
``
MaDate
/BODY
/HTML
fonction
print
fonction
print
similaire
fonction
echo
différence
près
l'expression
afficher
entre
parenthèses
syntaxe
fonction
print
suivante
print
expression
L'expression
peut
comme
fonction
echo
être
chaîne
caractères
expression
l'interpréteur
évalue
print
``
Chaine
caracteres
print
1+2
*
87
fonction
printf
fonction
printf
empruntée
langage
rarement
utilisée
car
syntaxe
plus
lourde
Toutefois
contrairement
deux
fonctions
précédentes
permet
formatage
données
cela
signifie
l'on
peut
choisir
format
lequel
variable
affichée
l'écran
syntaxe
printf
suivante
printf
chaîne
formattée
chaîne
formattée
chaîne
contenant
codes
spéciaux
permettant
repérer
l'emplacement
d'une
valeur
insérer
format
c'est-à-dire
représentation
chaque
code
rencontré
doit
être
associé
valeur
variable
l'on
retrouve
paramètre
fin
fonction
printf
valeurs
insérer
chaîne
formattées
séparées
virgules
doivent
apparaître
l'ordre
codes
apparaissent
chaîne
formattée
codes
formatage
types
données
suivants
Code
Type
format
b
Entier
notation
binaire
Caractère
codé
code
ASCII
Entier
notation
décimale
e
Type
double
nombre
virgule
format
scientifique
1.76e+3
f
Type
double
nombre
virgule
o
Entier
notation
octale
Chaîne
caractères
x
Entier
notation
hexadécimale
lettres
minuscules
X
Entier
notation
hexadécimale
lettres
majuscules
Caractère
Imaginons
l'on
définisse
variable
virgule
flottante
afin
d'obtenir
précision
calcul
plus
grande
qu'avec
entier
qu'on
désire
l'afficher
tant
qu'entier
cas
fonction
printf
prend
toute
importance
Pi
=
3.1415927
R
=
24.546
Perimetre
=
2
*
Pi
*
R
printf
``
périmètre
cercle
Perimetre
L'importance
l'implantation
code
php
sein
code
HTML
code
PHP
peut
être
implanté
sein
code
HTML
caractéristique
n'est
négliger
car
fait
d'écrire
uniquement
code
PHP
là
nécessaire
rend
programmation
plus
simple
plus
simple
d'écrire
code
HTML
fonctions
echo
print
lesquelles
caractères
spéciaux
doivent
être
précédés
d'un
antislash
sous
peine
voir
erreurs
lors
l'exécution
L'exemple
plus
simple
concerne
pages
dynamiques
l'en-tête
toujours
cas
code
PHP
peut
commencer
'
partir
balise
BODY
moment
page
peut
s'afficher
différemment
selon
variable
exemple
Mieux
possible
d'écrire
plusieurs
portions
script
PHP
séparées
code
HTML
statique
car
variables/fonctions
déclarées
portion
script
accessibles
portions
scripts
inférieures
Notion
variable
d'environnement
variables
d'environnement
comme
nom
l'indique
données
stockées
variables
permettant
programme
d'avoir
informations
environnement
L'environnement
cas
script
PHP
•
•
serveur
client
variables
créées
serveur
chaque
fois
script
PHP
appelé
serveur
fournit
paramètres
cachés
lors
l'exécution
l'interpréteur
Elles
permettent
notamment
d'avoir
informations
type
serveur
administrateur
date
laquelle
script
appelé
l'adresse
IP
type
navigateur
client
variables
d'environnement
peut
classer
variables
d'environnement
deux
catégories
•
•
variables
d'environnement
dépendant
client
variables
d'environnement
dépendant
serveur
variables
d'environnement
dépendant
client
Variable
d'environnement
Description
AUTH_TYPE
s'agit
méthode
d'authentification
utilisée
client
accéder
script
PHP
COMSPEC
Location
l'interpréteur
commandes
machine
Sous
Windows
CONTENT_TYPE
Type
données
contenu
présent
corps
requête
s'agit
type
MIME
données
DOCUMENT_ROOT
Racine
documents
serveur
DOCUMENT_URI
Adresse
script
PHP
relatif
partir
racine
serveur
HTTP_ACCEPT
Types
MIME
reconnus
serveur
séparés
virgules
HTTP_ACCEPT_ENCODING
Types
d'encodage
serveur
peut
réaliser
gzip
deflate
HTTP_ACCEPT_LANGUAGE
Langue
utilisée
serveur
défaut
en-us
HTTP_CONNECTION
Type
connexion
ouverte
entre
client
serveur
exemple
KeepAlive
HTTP_HOST
Nom
d'hôte
machine
client
associée
l'adresse
IP
HTTP_REFERER
URL
page
appelé
script
PHP
variable
permet
d'avoir
informations
type
navigateur
utilisé
client
ainsi
système
d'exploitation
Voici
quelques
exemples
User-Agents
HTTP_USER_AGENT
•
•
•
•
•
•
•
Mozilla/4.0
compatible
MSIE
5.01
Windows
NT
TUCOWS
Network
Mozilla/4.7
X11
I
Linux
2.2.14-15mdk
i686
LAST_MODIFIED
Date
heure
dernière
modification
fichier
PATH
s'agit
chemin
d'accès
différents
répertoires
serveur
PATH_INFO
s'agit
chemin
d'accès
script
PHP
relatif
racine
serveur
jusqu'au
script
PHP
PHP_SELF
Nom
script
PHP
REDIRECT_STATUS
s'agit
l'état
redirection
echec
succès
REDIRECT_URL
s'agit
l'URL
vers
laquelle
navigateur
client
redirigé
QUERY_STRING
s'agit
partie
l'URL
servi
accéder
script
PHP
située
après
point
d'interrogation
C'est
manière
transmises
données
d'un
formulaire
cas
méthode
GET
REMOTE_ADDR
variable
contient
l'adresse
IP
client
appelant
script
CGI
REMOTE_PORT
variable
permet
savoir
port
lequel
requête
HTTP
envoyée
serveur
Chemin
d'accès
complet
script
PHP
SCRIPT_FILENAME
SCRIPT_NAME
•
Sous
windows
forme
/php/php.exe
Chemin
d'accès
relatif
rapport
chemin
d'accès
racine
web
DOCUMENT_ROOT
script
PHP
variables
d'environnement
dépendant
serveur
Variable
d'environnement
Description
DATE_GMT
Date
actuelle
format
GMT
DATE_LOCAL
Date
actuelle
format
local
DOCUMENT_ROOT
Racine
documents
Web
serveur
GATEWAY_INTERFACE
Version
spécifications
CGI
utilisées
serveur
HTTP_HOST
Nom
domaine
serveur
SERVER_ADDR
Adresse
IP
serveur
SERVER_ADMIN
Adresse
l'administrateur
serveur
SERVER_NAME
Nom
donné
serveur
local
SERVER_PORT
Numéro
port
associé
protocole
HTTP
serveur
SERVER_PROTOCOL
Nom
version
protocole
utilisé
envoyer
requête
script
PHP
Type
logiciel
serveur
web
SERVER_SOFTWARE
•
serveur
Apache
sous
Unix
Apache/1.3.2
Unix
PHP/3.0.5
•
serveur
Apache
sous
Windows
Apache/1.3.2
Win32
PHP/3.0.5
Affichage
variables
d'environnement
possible
créer
script
permettant
visualiser
l'ensemble
variables
d'environnement
première
façon
consiste
utiliser
fonction
phpinfo
affiche
toute
seule
tableau
récapitulatif
paramètres
serveur
l'intepréteur
PHP
ainsi
qu'un
tableau
variables
d'environnement
phpinfo
PHP
fournit
fonction
getenv
permettant
retourner
valeur
variable
d'environnement
passée
paramètre
echo
getenv
``
HTTP_USER_AGENT
Enfin
possible
définir
variables
d'environnement
echo
putenv
``
MA_VARIABLE=mavaleur
gestion
fichiers
PHP
PHP
création
lecture
fichiers
fois
plus
assez
simple
existe
multitude
fonctions
dédiées
l'utilisation
fichiers
communication
entre
script
PHP
fichier
repérée
variable
indiquant
l'état
fichier
l'on
peut
passer
paramètre
fonctions
spécialisées
manipuler
fonction
fopen
fonction
base
fonction
fopen
C'est
permet
d'ouvrir
fichier
lire
créer
écrire
Voilà
syntaxe
entier
fopen
chaine
nomdufichier
chaine
mode
mode
indique
type
d'opération
qu'il
possible
d'effectuer
fichier
après
ouverture
s'agit
d'une
lettre
réalité
chaîne
caractères
indiquant
l'opération
possible
•
•
r
comme
read
indique
ouverture
lecture
seulement
w
comme
write
indique
ouverture
écriture
seulement
fonction
crée
fichier
s'il
n'existe
•
comme
append
indique
ouverture
écriture
seulement
ajout
contenu
fin
fichier
fonction
crée
fichier
s'il
n'existe
Lorsque
mode
suivi
caractère
+
celui-ci
peut
être
lu
écrit
Enfin
fait
faire
suivre
mode
lettre
b
entre
crochets
indique
fichier
traité
façon
binaire
Voici
tableau
récapitulant
l'ensemble
modes
fichiers
possibles
Mode
Description
r
ouverture
lecture
seulement
w
ouverture
écriture
seulement
fonction
crée
fichier
s'il
n'existe
ouverture
écriture
seulement
ajout
contenu
fin
fichier
fonction
crée
fichier
s'il
n'existe
r+
ouverture
lecture
écriture
w+
ouverture
lecture
écriture
fonction
crée
fichier
s'il
n'existe
a+
ouverture
lecture
écriture
ajout
contenu
fin
fichier
fonction
crée
fichier
s'il
n'existe
Voici
exemples
d'utilisations
possibles
fonction
fp
=
fopen
``
..
/fichier.txt
r
//lecture
//écriture
depuis
début
fichier
fp
=
fopen
``
ftp
//phpfrance.com/pub/fichier.txt
w
//écriture
depuis
fin
fichier
fp
=
fopen
``
http
//igalaxie.com/fichier.txt
plus
fonction
fopen
permet
d'ouvrir
fichiers
présents
web
grâce
URL
Voici
script
permettant
récupérer
contenu
d'une
page
d'un
site
web
fp
=
fopen
``
http
//www.commentcamarche.net
r
//lecture
fichier
while
feof
fp
{
//on
parcourt
toutes
lignes
page
.=
fgets
fp
4096
//
lecture
contenu
ligne
}
généralement
utile
tester
l'ouverture
fichier
s'est
bien
déroulée
ainsi
d'éventuellement
stopper
script
PHP
cela
n'est
cas
if
fp
=
fopen
``
http
//www.commentcamarche.net
r
{
echo
``
Echec
l'ouverture
fichier
exit
}
else
{
//
code
}
fichier
ouvert
fonction
fopen
doit
être
fermé
fin
utilisation
fonction
fclose
passant
paramètre
l'entier
retourné
fonction
fopen
Lecture
écriture
fois
fichier
ouvert
mode
désiré
possible
lire
contenu
'
écrire
informations
grâce
fonctions
•
fputs
aussi
parfois
appelée
fwrite
deux
noms
équivalents
parle
d'alias
permettant
d'écrire
chaîne
caractères
fichier
entier
fputs
entier
Etat_du_fichier
chaine
Sortie
fonction
fputs
renvoie
nombre
caractères
effectivement
écrits
fichier
•
fgets
permettant
récupérer
ligne
fichier
chaîne
fgets
entier
Etat_du_fichier
entier
Longueur
paramètre
Longueur
désigne
nombre
caractères
maximum
fonction
sensée
récupérer
ligne
fonction
fgets
renvoie
0
cas
d'échec
chaîne
cas
contraire
Etant
donné
fonction
fgets
récupère
chaque
appel
nouvelle
ligne
fichier
essentiel
récupérer
l'intégralité
contenu
d'un
fichier
l'insérer
boucle
while
Ainsi
utilise
fonction
feof
fonction
testant
fin
fichier
'
atteinte
tant
test
boucle
while
façon
tant
fin
fichier
'
atteinte
lit
ligne
suivante
fichier
if
fp
=
fopen
``
fichier.txt
r
{
echo
``
Echec
l'ouverture
fichier
exit
}
else
{
while
feof
fp
{
//
récupère
ligne
Ligne
=
fgets
fp,255
//
affiche
ligne
echo
Ligne
//
stocke
l'ensemble
lignes
variable
Fichier
.=
Ligne
}
fclose
fp
//
ferme
fichier
}
stocker
infos
fichier
faut
premier
temps
ouvrir
fichier
écriture
créant
n'existe
choix
entre
mode
'
w
'
mode
'
'
préférera
second
puisque
pointeur
trouve
fin
fichier
autrement
dit
écrit
suite
trouve
fichier
lieu
d'écraser
contenu
existant
éventuellement
déjà
fp
=
fopen
``
php_8_fichier.txt
//
ouverture
fichier
écriture
fputs
fp
``
\n
//
va
ligne
fputs
fp
``
nom|
email
//
écrit
nom
email
fichier
fclose
fp
Voici
petit
script
permettant
récupérer
titre
d'une
page
Web
texte
compris
entre
balises
TITLE
/TITLE
utilise
expressions
régulières
localiser
texte
fp
=
fopen
``
http
//www.commentcamarche.net
r
//lecture
fichier
while
feof
fp
{
//on
parcourt
toutes
lignes
page
.=
fgets
fp
4096
//
lecture
contenu
ligne
}
titre
=
eregi
``
title
*
/title
page
regs
//on
isole
titre
echo
regs
1
fclose
fp
tests
fichiers
PHP
fournit
nombreuses
fonctions
permettant
faire
tests
fichiers
connaître
leurs
propriétés
Voici
liste
fonctions
tests
•
is_dir
permet
savoir
fichier
nom
passé
paramètre
correspond
répertoire
booléen
is_dir
chaine
Nom_du_fichier
fonction
is_dir
renvoie
1
s'agit
d'un
répertoire
0
cas
contraire
if
is_dir
``
install
{
echo
``
s'agit
d'un
répertoire
}
else
{
echo
``
s'agit
bien
d'un
répertoire
}
•
is_executable
permet
savoir
fichier
nom
passé
paramètre
exécutable
booléen
is_executable
chaine
Nom_du_fichier
fonction
is_executable
renvoie
1
fichier
exécutable
0
cas
contraire
•
is_file
permet
savoir
fichier
nom
passé
paramètre
correspond
répertoire
lien
symbolique
booléen
is_file
chaine
Nom_du_fichier
fonction
is_file
renvoie
1
s'agit
d'un
fichier
0
cas
contraire
•
is_link
permet
savoir
fichier
nom
passé
paramètre
correpond
lien
symbolique
booléen
is_link
chaine
Nom_du_fichier
fonction
is_link
renvoie
1
s'agit
d'un
lien
symbolique
0
cas
contraire
D'autres
façons
lire
écrire
certains
cas
peut
être
rébarbatif
devoir
mettre
oeuvre
fonctions
fopen
fgets
lire
l'intégralité
contenu
d'un
fichier
raison
PHP
fournit
fonctions
supplémentaires
permettant
faire
directement
certaines
opérations
fonction
file
permet
retourner
tableau
l'intégralité
d'un
fichier
mettant
chacune
lignes
élément
tableau
rappel
premier
élément
d'un
tableau
repéré
l'indice
0
Voilà
syntaxe
Tableau
file
chaine
nomdufichier
L'exemple
suivant
montre
comment
parcourir
l'ensemble
tableau
afin
d'afficher
fichier
Fichier
=
``
fichier.txt
if
is_file
Fichier
{
if
TabFich
=
file
Fichier
{
for
i
=
0
i
count
TabFich
i++
echo
TabFich
i
}
else
{
echo
``
fichier
peut
être
lu
br
}
}
else
{
echo
``
Désolé
fichier
n'est
valide
br
}
fonction
fpassthru
permet
d'envoyer
contenu
fichier
fenêtre
navigateur
syntaxe
fonction
suivante
booléen
fpassthru
entier
etat
fonction
permet
réalité
d'envoyer
contenu
fichier
partir
position
courante
fichier
c'est-à-dire
qu'il
possible
exemple
lire
quelques
lignes
fgets
puis
d'envoyer
reste
navigateur
script
suivant
permet
parcourir
tous
fichiers
HTML
contenus
site
d'en
afficher
l'arborescence
HTML
HEAD
TITLE
Affichage
l'arborescence
/TITLE
/HEAD
BODY
function
ScanDir
Directory
{
if
is_dir
Directory
&
&
is_readable
Directory
{
if
MyDirectory
=
opendir
Directory
{
while
Entry
=
readdir
MyDirectory
{
if
is_dir
Directory
``
/
Entry
{
if
Entry
=
``
&
&
Entry
=
``
..
{
echo
``
li
b
Repertoire
/b
Directory/
Entry
/li
\n
echo
``
ul
ScanDir
Directory
``
/
Entry
echo
``
/ul
}
}
else
{
echo
``
li
b
Fichier
/b
Directory/
Entry
/li
\n
if
eregi
``
\.html
|
\.htm
Entry
{
MetaTags
=
get_meta_tags
Directory
``
/
Entry
}
}
}
closedir
MyDirectory
}
}
}
open_basedir=
``
echo
``
ul
ScanDir
``
``
echo
``
/ul
/BODY
/HTML
