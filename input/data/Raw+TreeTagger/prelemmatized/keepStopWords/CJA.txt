langage
java
petit
mémento
syntaxe
éléments
programmation
sites
reference
site
officiel
java
java
sun
com
peut
notamment
consulter
intérêt
tutoriels
java
sun
com
docs
books
tutorial
grande
collection
petits
exemples
programmes
java
sun
com
developer
codesamples
examplets
recommandations
style
java
sun
com
docs
codeconv
html
codeconvtoc
doc
html
descriptif
tous
paquetages
classes
méthodes
standard
java
sun
com
javase
docs
api
mode
emploi
générateur
documentation
javadoc
java
sun
com
javadoc
index
jsp
préparation
certification
programmeur
java
java
sun
com
docs
books
tutorial
extra
certification
sommaire
langage
programmation
orientés
objets
programme
java
style
programmation
identificateurs
commentaires
commentaires
documentation
commentaires
implémentation
fichier
java
nom
contenu
fichier
java
compilation
exécution
génération
documentation
paquetages
paquetages
standard
affectation
classe
paquetage
importation
classe
paquetages
classes
interfaces
classes
standard
classes
abstraites
sous
classes
classes
abstraites
sous
classe
interfaces
interface
classe
implantant
interface
enumération
classes
imbriquées
nested
classes
contrôle
accès
modificateurs
instance
classe
types
donnees
types
primitifs
types
objet
types
référence
classes
enveloppes
chaîne
caractères
non
modifiable
string
chaîne
caractères
modifiable
stringbuffer
tableau
collection
transtypage
operateurs
expressions
opérateurs
expressions
arithmétiques
opérateurs
expressions
booléennes
opérateurs
relationnels
methodes
définition
appel
méthode
ordinaire
constructeur
méthode
main
instructions
instruction
affectation
instructions
contrôle
instructions
sélection
instructions
boucle
instructions
entrée
sortie
notion
flux
entrée
sortie
terminal
entrée
sortie
fichier
lecture
chaîne
caractères
formatée
heritage
notion
héritage
hérite
sous
classe
redéfinir
méthode
type
statique
dynamique
liaison
statique
dynamique
type
statique
dynamique
transtypage
liaison
statique
dynamique
polymorphisme
classes
méthodes
particulières
interfaces
exceptions
exceptions
contrôlées
non
contrôlées
classes
exception
standard
hiérarchie
error
hiérarchie
exception
hiérarchie
runtimeexception
lancement
exception
capture
exception
clause
throws
instruction
try
catch
iii
définir
nouvelle
classe
exception
annexe
programmation
graphique
swing
conteneurs
composants
gestion
mise
page
gestion
événements
notion
événement
réaliser
gestionnaire
événement
affichage
fermeture
fenêtre
graphique
architecture
composants
swing
applets
annexe
threads
créer
thread
extension
classe
thread
créer
thread
implémentation
interface
runnable
synchronisation
communication
entre
threads
sections
critiques
synchronisation
communication
entre
threads
annexe
conception
developpement
java
conseils
généraux
bonne
conception
classes
architecture
application
interactive
modèle
mvc
tests
unitaires
définitions
junit
java
beans
design
patterns
exemple
modèle
singleton
exemple
modèle
decorator
annexe
machine
virtuelle
java
jvm
annexe
communication
entre
java
jni
appel
procédure
déclaration
appel
java
prototype
implémentation
echange
données
entre
java
déclaration
appel
java
prototype
implémentation
annexe
plates
formes
java
annexe
glossaire
langage
programmation
orientés
objets
java
langage
programmation
orienté
objets
objet
représentation
simplifiée
entité
monde
réel
entité
concrète
ex
voiture
non
ex
date
aujourd
hui
objet
caractérise
état
comportement
objet
stocke
état
variables
appelées
champs
attributs
présente
comportement
travers
fonctionnalités
appelées
méthodes
exemple
objet
mavoiture
valeur
attributs
fiat
grise
km
méthodes
démarrer
arrêter
accélérer
typiquement
état
encapsulé
coeur
objet
accessible
depuis
extérieur
objet
consultation
modification
via
méthodes
offertes
objet
exemple
objet
mavoiture
getcouleur
setcouleur
démarrer
arrêter
accélérer
fiat
grise
interagit
objet
envoyant
message
demande
activation
méthodes
exemple
envoi
message
objet
mavoiture
accélérer
méthode
particulière
appelée
constructeur
permet
initialiser
état
objet
création
classe
sert
regrouper
sous
catégorie
nom
générique
objets
partageant
type
état
comportement
classe
type
objet
dit
réciproquement
objet
instance
classe
exemple
classe
automobile
attributs
marque
couleur
consommation
méthodes
démarrer
arrêter
accélérer
classes
peuvent
être
organisées
hiérarchies
chaque
classe
hérite
alors
attributs
méthodes
classes
situées
ligne
hiérarchique
ascendante
réaliser
programme
langage
orienté
objets
modéliser
classes
objets
manipuler
écrire
classes
langage
programmation
orienté
objets
créer
objets
instances
classes
communiquer
objets
invoquant
leurs
méthodes
java
né
entreprise
californienne
sun
microsystems
conçu
james
gosling
al
programme
java
style
programmation
largement
admis
respect
syntaxe
programme
fonctionne
critères
qualité
suffisants
programme
expérience
programmation
ainsi
conduit
établir
recommandations
style
respecter
techniquement
obligatoire
contribue
améliorer
lisibilité
programmes
conventions
visent
fait
finalité
économique
contribuer
produire
programmes
plus
facilement
maintenables
pendant
toute
durée
vie
chapitres
suivants
exemples
respectent
conventions
style
préconisées
java
sun
com
identificateurs
quelques
règles
recommandations
nommer
identificateurs
caractère
minuscule
majuscule
caractères
discriminant
règle
langage
java
identificateurs
objets
champs
méthodes
commencent
toujours
minuscule
convention
identificateurs
classe
interface
commencent
toujours
majuscule
convention
identificateurs
constantes
tout
majuscules
convention
identificateurs
méthode
commencent
verbe
recommandation
commentaires
commentaires
documentation
commentaires
documentation
visent
décrire
spécification
code
sans
considération
implémentation
destinés
développeurs
utilisateurs
nécessairement
codes
sources
sous
main
commentaires
peuvent
être
automatiquement
extraits
utilitaire
javadoc
constituer
fichier
documentation
html
documentation
classe
devrait
inclure
minima
nom
classe
fonctionnalité
grandes
caractéristiques
auteur
version
documentation
chaque
constructeur
chaque
méthode
documentation
méthode
devrait
inclure
minima
nom
méthode
fonctionnalité
description
chaque
paramètre
valeur
retournée
exceptions
susceptibles
être
lancées
méthode
syntaxe
commentaires
commentaire
principales
balises
commentaires
prédéfinies
author
version
param
return
see
throws
commentaires
implémentation
commentaires
implémentation
visent
expliciter
sans
paraphraser
code
choix
implémentation
choix
identificateurs
clarté
programmation
devrait
permettre
minimiser
nombre
tels
commentaires
syntaxe
commentaires
commentaire
commentaire
fichier
java
nom
contenu
fichier
java
chaque
fichier
source
java
contient
seule
classe
publique
organisation
recommandée
suivante
commentaires
début
commentaire
documentation
comprenant
typiquement
intitulé
classe
descriptif
sommaire
fonction
auteur
version
instructions
paquetage
instructions
import
déclarations
classes
fichier
devrait
contenir
moins
lignes
lignes
moins
caractères
voire
commentaires
documentation
recommandation
fichier
java
porte
nom
classe
publique
contient
fichiers
source
java
suffixe
java
fichiers
java
compilés
suffixe
class
convention
suffixes
java
class
imposés
outils
compilation
exécution
génération
documentation
depuis
ligne
commande
compilation
javac
filename
java
exécution
java
filename
fichier
main
génération
documentation
javadoc
java
avoir
documentation
programmeur
complète
compris
membres
privés
toutes
classes
interaction
faut
lancer
commande
option
private
paquetages
paquetage
package
anglais
bibliothèque
classes
organisées
façon
hiérarchique
nom
paquetage
nécessairement
nom
répertoire
nom
paquetage
toujours
lettres
minuscules
convention
différents
paquetages
peuvent
être
rassemblés
compactés
fichier
archive
zip
jar
paquetages
standard
variable
environnement
classpath
indique
machine
virtuelle
java
trouver
classes
bibliothèques
classes
besoin
hiérarchie
partielle
paquetages
standard
java
applet
awt
io
lang
util
event
paquetages
plus
immédiatement
utiles
paquetage
contenu
java
io
classes
relatives
entrées
sorties
java
lang
classes
fondamentales
types
basiques
classes
enveloppes
string
stringbuffer
classe
math
java
util
classes
utilitaires
diverses
collections
arraylist
vector
classe
random
gestion
dates
heures
affectation
classe
paquetage
classe
appartienne
paquetage
faut
déclarer
paquetage
appartenance
tête
fichier
source
syntaxe
package
packagename
importation
classe
paquetage
utiliser
classe
définie
paquetage
autre
celui
classe
utilisation
classe
doit
être
importée
tête
fichier
source
syntaxe
import
packagename
ctassname
import
packagename
forme
déconseillée
car
peu
informative
exemples
import
java
util
arraylist
import
java
util
lterator
import
java
io
forme
déconseillée
car
peu
informative
paquetage
java
lang
importé
automatiquement
classes
interfaces
classes
standard
syntaxe
public
class
classname
fields
constructors
methods
accessor
methods
mutator
methods
exemple
class
rationalnumber
represents
rational
number
num
den
author
am
version
public
class
rationalnumber
fields
private
int
numerator
private
int
denominator
private
boolean
reduced
constructors
construct
rational
number
initialized
to
public
rationalnumber
numerator
denominator
reduced
true
methods
accessors
get
the
numerator
of
this
rational
number
public
int
getnumerator
return
numerator
get
the
denominator
of
this
rational
number
public
int
getdenominator
return
denominator
return
true
iff
the
numerator
denominator
form
is
irreducible
public
boolean
isreduced
return
reduced
methods
mutators
set
this
rational
number
to
numerator
denominator
public
void
setnumber
int
numerator
int
denominator
numerator
numerator
denominator
denominator
reduced
false
set
this
rational
number
to
irreducible
numerator
denominator
form
public
void
reduce
int
divisor
greatestcommondivisor
numerator
denominator
numerator
numerator
divisor
denominator
denominator
divisor
reduced
true
methods
utilities
return
the
greatest
common
divisor
of
the
two
integers
x
and
private
int
greatestcommondivisor
int
x
int
int
divisor
implémenter
return
divisor
end
class
rationalnumber
classes
abstraites
sous
classes
classe
possède
moins
méthode
abstraite
i
e
sans
corps
abstraite
doit
être
déclarée
modificateur
abstract
classes
abstraites
peuvent
être
instanciées
pouvoir
créer
objets
faut
créer
sous
classe
laquelle
toutes
méthodes
abstraites
définies
sous
classe
non
abstraite
pourra
alors
être
instanciée
classes
abstraites
syntaxe
public
abstract
class
classname
fields
constructors
methods
exemple
abstract
class
progression
represents
real
linear
progression
of
order
with
constant
coefficients
author
am
version
public
abstract
class
progression
fields
private
double
u
the
first
term
of
the
progression
constructors
define
progression
the
first
term
of
which
is
u
public
progression
double
u
this
u
u
methods
get
the
first
term
of
this
progression
public
double
getu
return
u
given
current
term
u
return
the
next
term
u
public
abstract
double
nextterm
double
return
the
term
of
rank
public
double
termofrank
int
double
u
u
u
double
v
u
for
int
i
i
i
v
nextterm
u
u
v
return
u
end
class
progression
sous
classe
syntaxe
public
class
subclassname
extends
superclassname
fields
constructors
methods
exemple
class
arithgeomprogression
represents
real
arithmetic
geometric
progression
with
constant
coefficients
u
u
b
author
am
version
public
class
arithgeomprogression
extends
progression
fields
private
double
multiplying
coefficient
private
double
b
additive
coefficient
constructors
define
an
arithmetic
geometric
progression
param
u
o
first
term
of
the
progression
param
multiplying
coefficient
param
b
additive
coefficient
public
arithgeomprogression
double
u
double
double
b
super
u
this
this
b
b
methods
given
current
term
u
return
the
next
term
u
public
double
nextterm
double
u
return
u
b
end
class
arithgeomprogression
interfaces
remarque
liminaire
terme
interface
sémantique
multiple
cadre
programmation
java
peut
prendre
selon
contexte
trois
sens
distincts
conceptuellement
apparentés
sens
informatique
commun
interface
jonction
entre
deux
éléments
matériels
logiciels
permettant
échange
information
exemple
interface
homme
machine
sens
programmation
objet
interface
classe
partie
visible
publique
classe
définit
typiquement
liste
membres
attributs
constructeurs
méthodes
non
privés
associés
leurs
commentaires
documentation
sens
spécifique
langage
java
interface
sorte
classe
abstraite
possédant
caractéristiques
particulières
définit
protocole
comportement
sens
défini
section
contexte
utilisation
donne
sens
mot
interface
interfaces
sens
langage
java
sortes
classes
abstraites
sans
aucun
détail
implémentation
possèdent
degré
abstraction
supérieur
celui
classes
abstraites
interfaces
méthodes
toutes
implicitement
abstraites
elles
corps
noter
recommandé
ajouter
modificateur
abstract
puisqu
implicite
possèdent
champs
exception
éventuelle
constantes
classe
implicitement
static
final
assignées
membres
implicitement
publics
interface
publique
interface
spécifie
signature
minimale
classe
implémente
interface
contrat
respecter
quand
classe
implémente
interface
engage
conformer
interface
classe
peut
implémenter
plusieurs
interfaces
classe
définit
type
implémentation
interface
définit
type
sans
implémentation
interface
syntaxe
public
interface
interfacename
constantattributes
abstractmethods
exemple
public
interface
measurable
double
size
return
if
this
is
or
than
x
int
islargerthan
measurable
x
classe
implantant
interface
syntaxe
public
class
classname
implements
interfacenamel
interfacename
exemple
public
class
square
implements
measurable
private
double
width
public
square
double
width
width
width
public
double
size
return
width
width
public
int
islargerthan
measurable
x
if
this
size
x
size
return
if
this
size
x
size
return
return
enumération
classe
enum
permet
représenter
ensemble
constantes
nommées
type
classe
classes
contribuent
accroître
lisibilité
programmes
syntaxe
public
enum
enumname
list
of
named
constants
possibility
of
other
fields
and
methods
exemple
public
enum
direction
north
south
east
west
public
class
test
private
direction
dir
public
setdir
direction
dir
public
boolean
isnorthsouth
return
dir
direction
north
dir
direction
south
sous
forme
plus
simple
classes
enum
souvent
utilisées
sous
forme
classe
interne
inner
class
exemple
public
class
myclass
private
direction
dir
private
enum
direction
north
south
east
west
public
void
setnorth
dir
direction
north
possible
associer
chaque
constante
énumérée
valeur
type
quelconque
possible
utiliser
type
énuméré
instruction
switch
classes
imbriquées
nested
classes
concept
vital
débutant
classe
peut
être
définie
intérieur
autre
classe
parle
alors
classe
imbriquée
distingue
quatre
catégories
classes
membres
déclarées
static
static
nested
classes
membres
statiques
classe
englobante
classes
internes
inner
classes
membres
non
statiques
classe
englobante
classes
locales
local
classes
classes
définies
intérieur
méthode
classes
anonymes
anonymous
classes
classes
locales
sans
nom
exemple
public
class
outerclass
public
static
class
staticnestedclass
private
class
innerclass
exemple
référence
classe
staticnestedclass
outerclass
staticnestedclass
quel
intérêt
peut
avoir
déclarer
classes
imbriquées
potentiellement
regroupement
logique
encapsulation
accrue
code
plus
lisible
plus
facilement
maintenable
pratique
plupart
classes
imbriquées
classes
internes
quant
classes
anonymes
elles
peuvent
rendre
code
difficile
lire
doivent
être
limitées
classes
très
petites
deux
méthodes
voir
exemple
typique
section
contrôle
accès
modificateurs
contrôle
accès
membre
classe
peut
être
précisé
déclaration
mots
clés
appelés
modificateurs
modificateurs
permettent
spécifier
visibilité
champ
méthode
private
protected
public
lieu
stockage
classe
modificateur
static
objet
défaut
caractère
modifiable
défaut
non
modificateur
final
modificateur
commentaires
exemple
private
membre
déclaré
private
accessible
intérieur
classe
définition
modificateur
accès
recommandé
champs
protected
membre
déclaré
protected
accessible
depuis
classe
déclaration
sous
classe
classe
paquetage
modificateur
accès
recommandé
méthodes
super
classes
public
membre
déclaré
public
accessible
depuis
importe
quelle
classe
modificateur
accès
recommandé
méthodes
static
champ
déclaré
static
variable
classe
dupliqué
différentes
instances
champ
non
static
variable
instance
dupliqué
chaque
instance
méthode
déclarée
static
méthode
classe
invoquée
sans
référence
objet
particulier
faisant
référence
classe
méthode
non
static
méthode
instance
invoquée
objet
particulier
voir
également
chapitre
final
variable
déclarée
final
peut
plus
être
modifiée
après
initialisée
cela
permet
particulier
déclarer
champs
constants
exemple
final
int
size
méthode
déclarée
final
peut
être
redéfinie
sous
classe
classe
déclarée
final
peut
être
sous
classée
nota
défaut
modificateur
private
protected
public
visibilité
dite
package
access
membre
classe
visible
depuis
toutes
classes
paquetage
exemple
public
static
final
double
gravity
instance
classe
avant
pouvoir
être
utilisé
objet
instance
classe
doit
être
déclaré
classname
objectname
créé
puis
initialisé
objectname
new
constructorcall
exemples
gregoriancalendar
cal
cal
gregoriancalendar
timer
mytimer
new
timer
déclaration
objet
crée
objet
uniquement
variable
pointeur
destinée
mémoriser
adresse
future
objet
création
objet
i
e
instance
proprement
dite
réalisée
opérateur
new
appel
constructeur
suit
opérateur
new
rôle
initialiser
proprement
objet
ainsi
créé
in
fine
adresse
objet
ainsi
créé
initialisé
adresse
renvoyée
opérateur
new
stockée
grâce
opérateur
affectation
variable
préalablement
déclarée
quelques
précisions
importantes
déclaration
déclaration
classname
objectname
crée
variable
nom
objectname
type
référence
i
e
pointeur
initialise
automatiquement
null
null
constante
littérale
prédéfinie
java
peut
être
assignée
toute
variable
type
référence
identifie
pointeur
nul
variable
valeur
null
pointe
vers
aucun
objet
toute
tentative
référer
objet
partir
pointeur
null
engendre
erreur
compilation
exécution
selon
contexte
gestion
dynamique
mémoire
opérateur
new
crée
instance
classe
zone
mémoire
générale
appelée
tas
contient
toutes
données
allouées
exécution
portée
locale
objet
ainsi
créé
conserve
portée
globale
reste
vivant
tant
dispose
référence
i
e
pointeur
permettant
accéder
quand
objet
plus
référencé
devient
définitivement
inaccessible
meurt
espace
mémoire
automatiquement
désalloué
récupération
automatique
espace
mémoire
réalisée
processus
appelé
ramasse
miettes
garbage
collector
façon
détruire
objet
assigner
valeur
null
variables
font
référence
directement
indirectement
types
donnees
java
connaît
deux
types
données
types
primitifs
données
type
primitif
stockées
directement
variables
sémantique
valeur
i
e
valeur
copiée
quand
variable
affectée
autre
variable
types
objet
types
référence
données
type
objet
stockées
sous
forme
référence
objet
non
tant
objet
quand
variable
type
objet
affectée
autre
variable
seule
référence
copiée
objet
java
utilise
système
unicode
interne
coder
caractères
chaînes
caractères
identificateurs
chaque
caractère
unicode
codé
bits
permet
représenter
nombreux
alphabets
grec
cyrillique
hébreu
arabe
ainsi
symboles
mathématiques
techniques
bien
unicode
utilisé
certains
systèmes
exploitation
windows
nt
vista
exemple
plupart
systèmes
exploitation
utilisent
systèmes
codage
bits
sorte
transcodages
nécessaires
problèmes
incompatibilité
peuvent
survenir
affichage
types
primitifs
type
description
exemples
littéraux
nombres
entiers
types
signés
byte
octet
entier
bits
short
entier
court
bits
int
entier
bits
long
entier
long
bits
nombres
réels
types
signés
float
réel
simple
précision
f
e
f
double
réel
double
précision
e
autres
types
types
non
signés
char
caractère
seul
bits
u
f
boolean
valeur
booléenne
false
true
nombre
sans
point
décimal
interprété
comme
entier
type
int
immédiatement
converti
byte
short
long
lors
affection
peut
déclarer
littéral
type
long
affectant
suffixe
nombre
point
décimal
interprété
comme
réel
type
double
peut
déclarer
littéral
type
float
affectant
suffixe
f
caractère
littéral
peut
être
écrit
sous
forme
unique
caractère
unicode
entre
apostrophes
valeur
unicode
précédée
u
deux
littéraux
booléens
true
false
variables
type
primitif
référant
objets
elles
méthodes
associées
types
objet
types
référence
tous
types
autres
types
primitifs
types
objet
incluent
classes
non
abstraites
bibliothèques
standard
java
tels
type
string
exemple
ainsi
classes
définies
utilisateur
variable
type
objet
contient
référence
pointeur
objet
affectations
passages
paramètres
sémantique
référence
i
e
référence
copiée
non
objet
après
affectation
variable
autre
deux
variables
réfèrent
objet
agit
copie
surface
opposition
copie
profonde
dupliquerait
objets
deux
variables
alors
dites
alias
objet
classes
enveloppes
classes
enveloppes
permettent
transformer
type
simple
objet
opération
appelée
anglais
boxing
classe
enveloppe
type
primitif
boolean
boolean
byte
byte
character
char
double
double
float
float
integer
int
long
long
short
short
exemples
convert
primitive
type
wrapper
type
integer
k
new
integer
convert
wrapper
type
primitive
type
double
x
k
doublevalue
classes
enveloppes
utiles
quand
méthode
accepte
types
simples
requiert
objets
toutefois
depuis
plate
forme
voir
chapitre
valeurs
type
primitif
cas
besoin
implicitement
converties
objet
classe
enveloppe
correspondante
autoboxing
réciproquement
unboxing
auparavant
conversion
devait
être
explicite
objets
telles
classes
immuables
immutable
dire
non
modifiables
fois
créés
conséquence
méthode
peut
avoir
paramètres
sortie
tels
types
classes
enveloppes
présentent
surtout
intérêt
offrir
méthodes
conversion
type
primitif
string
ainsi
utilitaires
données
type
primitif
exemple
convert
string
type
primitive
type
double
x
double
parsedouble
chaîne
caractères
non
modifiable
string
bien
chaînes
caractères
type
string
objets
nécessaire
avoir
recours
opérateur
new
créer
caractères
chaîne
caractères
chaine
indicés
chaine
length
chaîne
caractères
littérale
notée
entre
apostrophes
opérateur
opérateur
concaténation
chaînes
produit
nouvelle
chaîne
sans
éléments
physiquement
partagés
opérandes
comparaison
deux
chaînes
caractère
caractère
nécessite
faire
appel
fonction
equals
opérateur
donnant
résultat
intuitivement
attendu
cas
particulier
objets
type
string
immuables
immutable
dire
non
modifiables
fois
créés
conséquence
méthode
peut
avoir
paramètres
sortie
type
string
classe
string
appartient
paquetage
java
lang
exemple
string
chaine
exemple
chaine
littérale
system
out
println
longueur
chaine
chaine
length
chaîne
caractères
modifiable
stringbuffer
chaînes
caractères
contrairement
chaînes
type
string
peuvent
être
modifiées
opérateur
new
indispensable
créer
chaîne
type
stringbuffer
classe
stringbuffer
appartient
paquetage
java
lang
exemple
stringbuffer
chaine
chaine
new
stringbuffer
meeting
at
pm
chaine
setcharat
meeting
at
and
not
system
out
println
chaine
tableau
tableau
collection
taille
fixe
éléments
type
chaque
élément
repéré
indice
permet
accès
direct
élément
tout
tableau
automatiquement
associée
classe
dérivée
object
partagée
tous
tableaux
type
éléments
attribut
instance
length
champ
public
non
méthode
contient
nombre
éléments
tableau
éléments
tableau
array
indicés
array
length
quand
tente
accéder
élément
indice
hors
plage
permise
exception
type
indexoutofboundsexception
levée
noter
tableau
caractères
objet
type
siring
réciproquement
syntaxe
cas
tableau
mono
dimensionnel
declaring
an
array
variable
typeofelements
arrayvariable
creating
an
array
object
arrayvariable
new
typeofelements
numberofelements
referring
to
an
element
arrayvariable
integerindex
exemple
declaring
an
array
variable
private
double
marks
creating
an
array
object
static
final
int
nb
of
students
marks
new
double
nb
of
students
using
an
array
object
for
int
marks
length
i
marks
i
math
random
system
out
println
marks
marks
i
exemple
static
final
int
nrow
static
final
int
ncol
string
matrix
new
string
nrow
ncol
possible
créer
initialiser
tableau
déclaration
exemple
int
system
out
println
string
mr
mrs
ms
row
smith
jones
row
system
out
print
ms
jones
classe
java
util
arrays
offre
diverses
méthodes
utilitaires
applicables
tableaux
comparaison
tri
depuis
plate
forme
voir
chapitre
java
offre
boucle
for
simplifiée
parcourir
éléments
tableau
exemple
for
each
element
of
my
array
of
doubles
print
this
element
for
double
e
myarrayofdoubles
system
out
println
e
collection
collection
objet
représentant
groupe
objets
collection
agrégat
regroupe
éléments
multiples
seule
entité
aucune
hypothèse
faite
priori
type
éléments
ordre
éléments
possibilité
éléments
dupliqués
plus
formellement
java
collection
éléments
type
e
classe
implémente
interface
collection
e
paquetage
standard
java
util
offre
variété
collections
collections
framework
répondent
besoins
plus
fréquents
exemple
arraylist
e
vector
e
linkedlist
e
stack
e
hashtable
k
v
généricité
notion
existe
java
depuis
plate
forme
voir
chapitre
version
introduit
révision
majeure
rapport
précédente
notamment
matière
gestion
collections
apparition
types
génériques
probablement
évolution
plus
marquante
généricité
permet
communiquer
compilateur
type
éléments
collection
moment
création
objet
non
fixant
priori
définition
classe
exemple
classe
générique
defining
generic
collection
the
formal
parameter
is
the
generic
type
of
the
elements
public
class
mycollection
implements
list
can
be
used
here
any
type
creating
collection
of
integers
mycollection
integer
collectionofintegers
collectionofintegers
new
mycollection
integer
creating
collection
of
strings
mycollection
string
collectionofstrings
collectionofstrings
new
mycollection
string
tout
comme
déclarations
type
peuvent
être
génériques
déclarations
méthodes
peuvent
être
aussi
génériques
dire
paramétrisées
plusieurs
paramètres
exemple
méthode
générique
defining
public
static
void
fromarraytocollection
collection
for
o
add
o
using
it
string
datal
data
data
data
data
collection
object
new
arraylist
string
fromarraytocollection
nota
signaler
tableaux
génériques
font
encore
bon
ménage
exemple
vector
integer
sheets
new
vector
integer
nbofsheets
produit
erreur
classique
generic
array
creation
exemple
solution
pourrait
consister
passer
classe
intermédiaire
simplement
définie
class
vectorofintegers
extends
vector
integer
type
appelé
type
joker
wildcard
type
permet
représenter
tout
type
exemple
public
void
printall
collection
for
object
o
system
out
println
o
possible
borner
type
joker
caractère
joker
borne
supérieure
spécifié
extends
type
représente
tous
sous
types
type
caractère
joker
borne
inférieure
spécifié
super
type
représente
tous
types
super
types
type
exemple
collection
arraylist
objet
type
arraylist
e
collection
taille
variable
éléments
type
e
chaque
élément
repéré
indice
permet
accès
direct
élément
liste
tableau
supporte
principales
fonctionnalités
suivantes
ajout
élément
fin
tableau
méthode
add
e
accès
élément
indice
donné
méthodes
get
int
add
int
e
suppression
élément
indice
donné
méthode
remove
int
consultation
nombre
éléments
méthode
size
éléments
objet
collection
type
arraylist
e
indicés
collection
size
classe
arraylist
e
doit
être
importée
paquetage
java
util
import
java
util
arraylist
exemple
arraylist
integer
mycollectionofintegers
mycollectionofintegers
new
arraylist
integer
for
int
i
listofintegers
add
i
parcours
collection
itérateur
parcours
collection
opération
consiste
explorer
collection
élément
élément
deux
façons
faire
parcourir
collection
utiliser
itérateur
itérateur
objet
type
iterator
e
trois
fonctionnalités
plus
utiles
créer
gérer
itérateur
méthodes
iterator
classe
collection
hasnext
next
classe
iterator
noter
suppression
éléments
collection
cours
parcours
relève
méthode
remove
itérateur
non
celle
collection
classe
iterator
e
doit
être
importée
paquetage
java
util
import
java
util
iterator
itérateurs
façon
faire
historique
parcourir
collection
depuis
version
génériques
utiliser
boucle
for
généralisée
telle
boucle
permet
affranchir
itérateurs
parcourir
très
simplement
collection
quelconque
offerte
depuis
version
exemple
parcours
itérateur
iterator
integer
it
mycollectionofintegers
iterator
while
it
hasnext
call
it
next
to
get
the
next
object
of
the
collection
and
do
something
with
that
object
exemple
parcours
sans
itérateur
for
each
element
of
my
collection
of
integers
print
it
for
integer
v
mycollectionofintegers
system
out
println
v
transtypage
transtypage
anglais
cast
casting
opération
consiste
convertir
type
expression
conversion
type
réalise
faisant
précéder
expression
type
cible
entre
parenthèses
proposition
applique
certains
types
primitifs
types
objets
liés
relation
héritage
conversions
incorrectes
provoquent
erreur
compilation
exécution
noter
transtypage
change
type
variables
concernées
type
variable
défini
fois
toute
dès
création
opération
transtypage
simplement
changement
point
vue
demande
compilateur
syntaxe
newtype
expression
exemple
int
char
char
certaines
classes
offrent
méthodes
spécifiques
plus
adéquates
notamment
conversions
réel
entier
méthode
math
round
realvalue
permet
convertir
réel
entier
plus
proche
méthode
math
floor
realvalue
associée
conversion
entier
fournit
plus
grand
entier
inférieur
égal
argument
exemple
int
math
floor
vaut
méthode
math
ceil
realvalue
associée
conversion
entier
fournit
plus
petit
entier
supérieur
égal
argument
exemple
int
math
cei
vaut
conversions
partir
string
méthode
tostring
hérite
tout
objet
permet
convertir
objet
string
méthode
valueof
primitivetypeexpression
classe
string
renvoie
représentation
string
valeur
argument
méthode
valueof
string
dispose
toute
classe
enveloppe
renvoie
instance
classe
enveloppe
contenant
valeur
représentée
argument
type
string
exemples
convert
string
type
primitive
type
double
x
double
parsedouble
convert
string
type
wrapped
type
double
pi
double
valueof
convert
wrapped
type
primitive
type
int
k
integer
valueof
intvalue
convert
primitive
type
string
type
string
pistr
string
valueof
convert
primitive
type
string
type
double
pi
new
double
string
pi
tostring
autoboxing
unboxing
depuis
plate
forme
voir
chapitre
valeurs
type
primitif
cas
besoin
implicitement
converties
objet
classe
enveloppe
correspondante
autoboxing
réciproquement
unboxing
auparavant
conversion
devait
être
explicite
operateurs
expressions
java
possède
nombre
considérable
opérateurs
arithmétiques
logiques
expressions
constituées
opérandes
opérateurs
opérandes
peuvent
être
différentes
natures
variable
constante
appel
fonction
expression
tous
opérateurs
doivent
être
explicites
quand
plus
opérateur
apparaît
seule
expression
alors
règles
précédence
utilisées
déterminer
ordre
application
nécessaire
altérer
ordre
normal
évaluation
parenthèses
peuvent
être
utilisées
précédences
égales
expression
évaluée
gauche
droite
recommandations
style
utiliser
parenthèses
isoler
sous
expressions
afin
éviter
problèmes
précédence
opérateur
rendre
code
plus
lisible
tout
programmeur
insérer
espace
avant
après
chaque
opérateur
autre
point
opérateurs
expressions
arithmétiques
quelques
opérateurs
arithmétiques
binaires
opérateur
fonction
champ
application
division
réelle
réels
division
entière
entiers
modulo
reste
division
entière
entiers
nota
java
comme
plupart
langages
programmation
b
toujours
signe
alors
mathématiques
reste
division
euclidienne
toujours
positif
quotient
calculant
conséquence
java
b
sgn
sgn
b
b
b
b
b
java
math
nota
java
opérateur
modulo
peut
aussi
être
appliqué
réels
résultat
alors
reste
obtenu
après
soustraction
opérande
droit
opérande
gauche
nombre
entier
fois
toutefois
cause
arrondis
calculs
résultat
toujours
celui
attendrait
exemple
donne
non
grande
prudence
opérateur
appliqué
réels
quelques
opérateurs
arithmétiques
unaires
opérateur
fonction
champ
application
incrémentation
entiers
réels
décrémentation
entiers
réels
opérateurs
expressions
booléennes
quelques
opérateurs
booléens
binaires
opérateur
fonction
logique
conditionnel
logique
conditionnel
logique
exclusif
opérateurs
évaluation
expression
logique
arrête
dès
possible
inférer
valeur
finale
expression
tous
opérandes
nécessairement
évalués
opérateur
booléen
unaire
opérateur
fonction
négation
logique
opérateurs
relationnels
quelques
opérateurs
relationnels
comparaison
opérateur
fonction
égal
non
égal
inférieur
inférieur
égal
supérieur
supérieur
égal
methodes
définition
appel
méthode
ordinaire
définition
procédure
définition
fonction
public
void
procname
formalparams
public
fctlype
fctname
formalparams
declarations
declarations
statements
statements
return
expression
appel
procédure
appel
fonction
appel
interne
classe
définition
appel
interne
classe
définition
procname
actualparams
variable
fctname
actualparams
appel
externe
classe
définition
appel
externe
classe
définition
méthode
instance
méthode
instance
objectname
procname
actualparams
variable
objectname
fctname
actualparams
méthode
classe
méthode
classe
classname
procname
actualparams
variable
classname
fctname
actualparams
déclaration
paramètre
formel
spécification
paramètre
effectif
formal
parameter
actual
parameter
paramètre
entrée
type
primitif
objet
paramètre
entrée
type
primitif
objet
parametertype
parametername
expression
paramètre
sortie
type
primitif
paramètre
sortie
type
primitif
impossible
utiliser
fonction
passer
impossible
paramètre
type
objet
paramètre
sortie
type
objet
paramètre
sortie
type
objet
parametertype
parametername
objectname
paramètres
spécifiés
définition
méthode
appelés
paramètres
formels
doivent
être
précédés
type
paramètres
apparaissant
forme
appel
appelés
paramètres
effectifs
plusieurs
paramètres
séparés
virgules
tous
paramètres
type
primitif
passés
valeur
copie
argument
transmise
méthode
dispose
original
tous
paramètres
type
objet
passés
référence
référence
i
e
pointeur
transmis
méthode
objet
défaut
méthodes
méthodes
instance
elles
invoquées
instance
classe
existe
aussi
méthodes
classe
peuvent
être
invoquées
sans
instance
spécifie
méthode
classe
déclarant
static
signature
méthode
constituée
nom
liste
types
paramètres
classe
deux
méthodes
peuvent
avoir
signature
elles
peuvent
toutefois
porter
nom
cela
appelle
surcharge
toute
méthode
instance
constructeur
peut
référer
objet
courant
i
e
objet
méthode
constructeur
cours
appel
mot
clé
this
peut
ainsi
référer
tout
membre
champ
méthode
objet
courant
identifiant
forme
this
membre
constructeur
constructeur
méthode
particulière
invocation
explicitement
associée
création
instance
classe
finalité
initialiser
proprement
état
objet
lors
création
définition
constructeur
suit
règles
syntaxiques
spécifiques
nom
constructeur
obligatoirement
nom
classe
appartenance
tête
définition
spécifie
type
syntaxe
définition
constructeur
classe
nom
classname
public
classname
formalparameters
fields
initializations
constructeur
typiquement
utilisé
association
opérateur
new
exemple
syntaxe
utilisation
constructeur
classe
nom
classname
classname
object
new
classname
actualparameters
classe
peut
comporter
plusieurs
constructeurs
sous
condition
mêmes
paramètres
cas
éviter
duplication
code
constructeur
peut
appeler
autre
syntaxe
this
actualparameters
exemple
public
class
point
private
int
x
public
pointe
int
x
int
first
constructor
this
x
x
this
public
point
second
constructor
this
noter
définition
adoptée
java
prend
considération
type
méthode
sens
signature
correspond
parfois
appelé
ailleurs
profil
méthode
méthode
main
méthode
main
comme
point
entrée
application
lancement
exécution
syntaxe
public
static
void
main
string
args
argument
args
capte
éventuels
arguments
ligne
commande
premier
argument
ligne
commande
stocké
args
non
args
comme
exemple
considérons
application
classe
principale
celle
contenant
méthode
main
appelle
game
supposons
application
dépende
deux
paramètres
valeurs
doivent
être
fournies
lancement
supposons
également
fichier
source
game
java
compilé
fichier
exécutable
game
class
lancement
application
commande
java
game
daniel
attribuera
args
tableau
daniel
instructions
plan
syntaxique
instructions
statements
peuvent
être
regroupées
grandes
catégories
instructions
simples
instructions
affectation
instructions
entrée
sortie
instructions
appel
procédure
instruction
simple
termine
toujours
point
virgule
point
virgule
seul
définit
instruction
vide
instructions
contrôle
instructions
sélection
instructions
boucle
instructions
rupture
séquence
blocs
instructions
bloc
instructions
aussi
appelé
instruction
composée
séquence
instructions
enserrée
entre
accolades
bloc
définit
instruction
vide
instruction
affectation
syntaxe
variable
expression
symbole
opérateur
affectation
valeur
expression
située
partie
droite
affectée
variable
spécifiée
partie
gauche
type
expression
doit
apparier
type
variable
impact
physique
différent
selon
expression
type
primitif
objet
voir
chapitre
instructions
contrôle
instructions
sélection
if
else
première
forme
deuxième
forme
if
expression
if
expression
statements
statements
else
statements
exemple
if
field
size
system
out
println
the
field
is
empty
exemple
if
number
reporterror
else
processnumber
number
exemple
if
handlenegative
else
if
handlezero
else
handlepositive
switch
première
forme
deuxième
forme
switch
expression
switch
expression
case
value
case
value
statements
falls
through
break
case
value
case
value
falls
through
statements
case
value
break
statements
default
break
statements
case
value
break
falls
through
case
value
statements
break
default
statements
break
instruction
switch
peut
avoir
nombre
quelconque
labels
case
instruction
break
met
fin
instruction
switch
défaut
instruction
break
exécution
poursuit
instructions
labels
suivants
deuxième
forme
ci
dessus
exploite
comportement
chacune
trois
premières
valeurs
conduira
exécution
partie
statements
associée
value
chacune
deux
valeurs
suivantes
conduira
exécution
partie
statements
associée
value
clause
default
optionnelle
recommandée
défaut
peut
aucun
cas
conduise
exécution
exemple
switch
day
case
daystring
monday
break
case
daystring
tuesday
break
case
daystring
wednesday
break
case
daystring
thursday
break
case
daystring
friday
break
case
daystring
saturday
break
case
daystring
sunday
break
default
error
break
exemple
switch
wintermonth
case
numberofdays
break
case
falls
through
case
numberofdays
break
case
if
isleapyear
numberofdays
else
numberofdays
break
default
error
break
instructions
boucle
while
boucle
while
exécute
bloc
instructions
aussi
longtemps
valeur
expression
donnée
true
expression
testée
avant
chaque
exécution
corps
boucle
bien
corps
boucle
peut
être
exécuté
fois
syntaxe
while
expression
statements
exemple
int
i
while
text
size
system
out
printl
text
get
i
exemple
while
iter
hasnext
processobject
iter
next
do
while
boucle
do
while
exécute
bloc
instructions
aussi
longtemps
valeur
expression
donnée
true
expression
testée
après
chaque
exécution
corps
boucle
bien
corps
boucle
toujours
exécuté
moins
fois
syntaxe
do
statements
while
expression
exemple
do
input
readinput
if
input
null
system
out
printl
try
again
while
input
null
for
boucle
for
exécute
aussi
longtemps
condition
évalue
true
avant
boucle
démarre
instruction
initialisation
exécutée
exactement
fois
condition
évaluée
avant
chaque
exécution
corps
boucle
comme
boucle
while
instruction
mise
jour
variables
exécutée
après
chaque
exécution
corps
boucle
syntaxe
for
initialization
condition
update
statements
exemple
for
int
text
size
i
system
out
println
text
get
foreach
depuis
plate
forme
voir
chapitre
java
offre
boucle
for
améliorée
parcourir
éléments
tableau
collection
reporter
sections
respectives
syntaxe
for
each
element
of
the
collection
process
element
for
typeofelements
element
collectionofelements
process
element
instructions
entrée
sortie
java
offre
nombre
considérable
fonctions
procédures
entrée
sortie
tant
mode
texte
graphique
limitons
section
principales
instructions
entrées
sorties
mode
texte
entrées
sorties
mode
graphique
voir
chapitre
méthodes
entrée
sortie
primaires
appartiennent
classes
paquetage
java
io
depuis
plate
forme
voir
chapitre
classe
scanner
paquetage
java
uti
offre
fonctionnalités
base
lire
facilement
données
depuis
tout
flux
entrée
sorties
formatées
comme
complément
classe
java
util
formatter
permet
spécifier
formats
entrée
sortie
notion
flux
flux
flots
streams
anglais
généralisent
notion
périphérique
entrée
sortie
flux
peut
être
vu
comme
interface
intelligente
unidirectionnelle
reliant
machine
java
périphérique
permet
lecture
aussi
bien
écriture
affranchir
spécificités
périphérique
concerné
réaliser
entrée
sortie
consiste
ainsi
créer
flux
type
approprié
sauf
existe
déjà
prédéfini
system
in
system
out
system
err
lire
écrire
selon
cas
flux
souvent
cas
lecture
convertir
donnée
lue
type
cible
souhaité
première
approche
limiterons
flux
accès
séquentiel
entrée
sortie
terminal
solutions
suivantes
affranchissent
erreurs
saisie
gérer
type
erreur
reporter
chapitre
exceptions
chapitre
affichage
écran
syntaxe
affichage
écran
mode
texte
system
out
print
string
system
out
println
string
system
out
print
primitivetypeexpression
system
out
println
primitivetypeexpresstion
affichage
formaté
depuis
plate
forme
java
offre
également
méthode
printf
permettant
sorties
formatées
comme
voir
classe
java
util
formatter
spécification
formats
exemples
system
out
println
count
count
system
out
printf
user
total
fonctionnement
printf
codes
formatage
printf
réclame
chaîne
caractères
premier
paramètre
chaîne
peut
être
suivie
variables
chaîne
peut
contenir
codes
formatage
imprimée
code
formatage
commence
caractère
chaque
fois
code
formatage
rencontré
printf
imprime
variable
suivante
liste
paramètres
principaux
codes
formatage
commande
affichage
valeur
type
caractère
entier
e
réel
notation
exposant
f
réel
chaîne
caractères
code
formatage
peut
inclure
spécification
format
champ
affichage
exemples
codes
formatage
champ
affichage
spécifié
paramètre
type
considéré
champ
caractères
champ
caractères
justification
gauche
f
champ
caractères
droite
virgule
lecture
clavier
exemple
scanner
input
new
scanner
system
in
string
input
next
read
string
word
string
input
nextline
read
the
rest
of
the
line
int
input
nextint
read
an
integer
double
r
input
nextdouble
read
double
input
close
entrée
sortie
fichier
opérer
fichier
consiste
créer
flux
approprié
opérations
souhaitées
lire
écrire
fichier
fermer
fichier
solutions
suivantes
affranchissent
erreurs
entrée
sortie
gérer
type
erreur
reporter
chapitre
exceptions
chapitre
ecriture
fichier
depuis
plate
forme
java
offre
également
méthode
printf
permettant
sorties
formatées
comme
voir
classe
java
util
formatter
spécification
formats
exemple
écriture
fichier
texte
printwriter
out
new
printwriter
outputfilename
for
int
i
i
i
out
printf
i
out
close
lecture
fichier
exemple
lecture
fichier
texte
mot
mot
scanner
in
new
scanner
new
file
inputfilename
string
while
in
hasnext
in
next
read
string
word
system
out
println
in
close
contextes
particuliers
cas
ouverture
lecture
fichier
texte
stocké
fichier
jar
exécuté
import
java
io
inputstream
import
java
util
scanner
classloader
cl
classloader
getsystemclassloader
inputstream
is
cl
getresourceasstream
inputfilename
scanner
in
new
scanner
is
cas
ouverture
lecture
fichier
texte
distant
identifié
url
import
java
net
url
import
java
util
scanner
url
url
new
url
http
www
esiee
fr
inputfilename
scanner
in
new
scanner
url
openstream
nota
solution
non
applicable
depuis
applet
outre
bien
assurer
toutes
conditions
accessibilité
fichier
levées
interdiction
pare
feu
local
notamment
cas
ouverture
nouvelle
page
html
depuis
applet
répertoire
import
java
net
url
import
javax
swing
japplet
url
url
new
url
getdocumentbase
myfile
html
getappletcontext
showdocument
url
blank
repaint
lecture
chaîne
caractères
formatée
fréquent
avoir
lire
chaîne
caractères
connaît
format
quel
flux
entrée
terminal
fichier
depuis
plate
forme
classe
scanner
paquetage
java
util
offre
fonctionnalités
très
pratiques
exemple
lecture
chaîne
caractères
formatée
string
str
xxx
xxx
yellow
xxx
blue
xxx
scanner
in
new
scanner
str
usedelimiter
xxx
system
out
println
in
nextint
system
out
println
in
nextint
system
out
println
in
next
system
out
println
in
next
in
close
will
display
yellow
blue
heritage
notion
héritage
héritage
technique
offre
nombreux
avantages
évite
duplication
code
permet
réutilisation
code
autre
contexte
facilite
maintenance
programmes
facilite
extension
applications
existantes
héritage
inheritance
relation
non
permet
définir
classe
comme
extension
autre
exemple
classe
astre
classe
etoile
classe
planète
étoile
astre
planète
astre
classe
etoile
étend
classe
astre
classe
etoile
hérite
classe
astre
super
classe
classe
étendue
autres
classes
sous
classe
classe
étend
hérite
autre
classe
hérite
état
comportement
tous
ancêtres
peut
aussi
redéfinir
classes
liées
relations
héritage
forment
hiérarchie
héritage
exemple
hiérarchie
héritage
astre
etoile
planète
exoplanète
planète
solaire
pégaside
chtonienne
tellurique
habitable
constructeur
sous
classe
doit
toujours
invoquer
constructeur
super
classe
première
instruction
défaut
java
essaiera
insérer
appel
automatique
forme
appel
suivante
super
actualparameters
toute
classe
sans
super
classe
explicite
object
comme
super
classe
comme
hiérarchie
classes
types
forment
hiérarchie
types
type
défini
définition
sous
classe
sous
type
type
défini
super
classe
exemple
etoile
sous
type
type
astre
variable
peut
contenir
objet
type
déclaré
variable
objet
tout
sous
type
type
déclaré
exemple
astre
al
new
astre
correct
astre
new
etoile
correct
transtypage
ascendant
astre
new
planete
correct
transtypage
ascendant
etoile
el
new
astre
erreur
etoile
e
etoile
correct
transtypage
descendant
doit
être
explicite
objet
sous
type
peut
être
utilisé
partout
objet
super
type
attendu
ceci
appelle
substitution
java
permet
héritage
multiple
sous
classe
peut
hériter
directement
seule
super
classe
hérite
sous
classe
sous
classe
hérite
tous
membres
super
classe
accessibles
sauf
membre
attribut
méthode
redéfini
sous
classe
sous
classe
hérite
super
classe
membres
déclarés
public
protected
membres
déclarés
sans
modificateur
accès
sous
classe
paquetage
super
classe
sous
classe
hérite
super
classe
membres
redéfinis
sous
classe
constructeurs
attention
choix
identificateurs
sous
classe
choix
peut
involontairement
masquer
membre
super
classe
particulièrement
cas
attributs
attribut
nom
attribut
super
classe
masque
attribut
super
classe
types
différents
redéfinir
méthode
redéfinir
méthode
sous
classe
faut
signature
type
retour
méthode
super
classe
méthode
redéfinie
peut
autoriser
accès
plus
large
moins
ex
méthode
déclarée
protected
super
classe
peut
être
redéfinie
public
sous
classe
private
exemple
typique
méthode
tostring
classe
object
appliquée
objet
produit
chaîne
caractères
formée
nom
classe
code
hachage
méthode
peut
être
redéfinie
toute
classe
méthode
redéfinie
sous
classe
simplement
besoin
ajouter
quelques
fonctionnalités
complémentaires
celles
méthode
super
classe
besoin
réécrire
complètement
car
peut
appeler
méthode
super
classe
super
superclassmethodname
actualparameters
quelques
règles
méthode
instance
peut
redéfinir
méthode
classe
réciproquement
méthode
instance
sous
classe
mêmes
signature
type
méthode
instance
super
classe
redéfinit
méthode
super
classe
version
méthode
invoquée
instance
sous
classe
type
dynamique
car
liaison
dynamique
méthodes
instance
celle
sous
classe
méthode
classe
sous
classe
mêmes
signature
type
méthode
classe
super
classe
masque
méthode
super
classe
version
méthode
invoquée
dépend
appelée
super
classe
sous
classe
car
liaison
statique
méthodes
classe
sous
classe
peut
redéfinir
méthodes
déclarées
final
super
classe
sous
classe
doit
redéfinir
méthodes
déclarées
abstract
super
classe
moins
sous
classe
déclarée
abstract
depuis
plate
forme
voir
chapitre
conseillé
utiliser
annotation
méta
donnée
override
marquer
toute
méthode
supposée
redéfinir
méthode
héritée
classe
parent
cela
permet
compilateur
signaler
immédiatement
erreur
jamais
redéfinition
avérée
cause
exemple
faute
frappe
nom
méthode
outre
signalant
méthodes
redéfinies
annotation
override
permet
accroître
lisibilité
code
covariance
types
retour
autorisée
méthode
sous
classe
peut
retourner
objet
type
sous
classe
type
retourné
méthode
signature
super
classe
caractéristique
supprime
besoin
tests
conversions
types
excessifs
exemple
override
public
string
tostring
exemple
classe
point
possédant
deux
attributs
x
classe
coloredpoint
héritant
point
possédant
attribut
spécifique
color
comment
écrire
méthode
equals
sans
duplication
code
in
the
class
point
override
public
boolean
equals
object
o
if
o
null
return
false
case
null
if
this
o
return
true
reflexivity
if
this
getclass
o
getclass
return
false
symmetry
now
this
and
o
having
the
same
class
compare
the
fields
point
p
point
o
return
this
x
p
x
this
p
in
the
class
coloredpoint
extending
point
override
public
boolean
equals
object
o
verify
if
this
and
o
have
the
same
class
and
if
their
super
fields
are
equal
if
super
equals
o
return
false
now
compare
the
specific
fields
coloredpoint
cp
coloredpoint
o
return
this
color
equals
cp
color
exemple
public
class
motherclass
public
void
normal
system
out
println
the
normal
method
in
motherclass
public
static
void
hide
system
out
println
the
hide
method
in
motherclass
public
void
override
system
out
println
the
override
method
in
motherclass
end
motherclass
public
class
daughterclass
extends
motherclass
override
public
static
void
hide
system
out
println
the
hide
method
in
daughterclass
override
public
void
override
system
out
println
the
override
method
in
daughterclass
public
static
void
main
string
args
daughterclass
o
new
daughterclass
motherclass
o
o
o
normal
call
super
normal
o
normal
call
super
normal
o
hide
call
this
hide
o
hide
call
super
hide
liaison
statique
o
override
call
this
override
o
override
call
this
override
tiaison
dynamique
end
daughterclass
méthode
main
affichera
the
normal
method
in
motherclass
the
normal
method
in
motherclass
the
hide
method
in
daugterclass
the
hide
method
in
motherclass
the
override
method
in
daugterclass
the
override
method
in
daugterclass
type
statique
dynamique
liaison
statique
dynamique
section
reprend
formalise
quelques
uns
importants
concepts
introduits
sections
précédentes
type
statique
dynamique
transtypage
type
statique
objet
type
spécifié
déclaration
type
déclaré
type
compilation
type
dynamique
objet
type
i
e
classe
appartenance
objet
instancié
type
constaté
type
effectif
exécution
type
dynamique
objet
toujours
type
statique
sous
type
type
statique
sauf
exceptions
dues
transtypages
exemple
classe
classe
b
sous
classe
considérons
code
suivant
if
myclass
booleanrandom
new
else
new
b
transtypage
ascendant
implicite
type
statique
type
dynamique
b
pourra
être
constaté
après
condition
évaluée
transtypage
casting
appliqué
référence
possibilité
avoir
vue
spécifique
objet
pointé
change
rien
type
objet
sous
jacent
garde
bien
évidemment
tout
long
vie
type
lequel
créé
opération
transtypage
purement
syntaxique
fait
indiquer
compilateur
point
vue
depuis
lequel
doit
voir
objet
transtypage
vers
type
dit
ascendant
transtypage
ascendant
implicite
transtypage
vers
sous
type
dit
descendant
transtypage
descendant
doit
être
explicite
permet
forcer
compilation
garantit
nécessairement
absence
erreur
exécution
transtypage
garanti
correct
respecte
règle
suivante
deux
types
définis
o
objet
type
dynamique
considérons
déclaration
obj
o
transtypage
garanti
possible
tant
compilation
exécution
seulement
sous
type
sous
type
opérateur
instanceof
permet
tester
objet
type
dynamique
donné
tout
sous
type
type
donné
peut
permettre
vérifier
compatibilité
types
avant
opérer
transtypage
exemple
supposons
définies
public
class
shape
public
class
circle
extends
shape
public
class
triangle
extends
shape
public
class
date
déclarations
suivantes
génèreraient
erreur
incompatibilité
types
shape
shape
new
date
erreur
compilation
circle
new
shape
erreur
compilation
circle
circle
new
shape
erreur
exécution
triangle
new
triangle
circle
circle
erreur
exécution
déclarations
suivantes
saines
shape
new
circle
circle
circle
shape
if
obj
instanceof
shape
shaped
obj
liaison
statique
dynamique
considérons
invocation
o
o
objet
type
statique
type
dynamique
message
attribut
méthode
envoyé
o
message
exécuté
celui
code
accessible
depuis
classe
alors
liaison
objet
message
dite
statique
liaison
compilation
sinon
dite
dynamique
liaison
exécution
java
liaison
objet
variables
instance
statique
liaison
objet
méthodes
dynamique
sauf
méthode
static
final
exemple
public
class
public
boolean
return
true
public
boolean
return
true
public
class
b
extends
public
boolean
return
false
public
boolean
return
false
public
static
void
main
string
args
new
b
system
out
prinln
system
out
prinln
system
out
prinln
problème
méthode
main
affichera
false
true
pourquoi
type
statique
type
dynamique
b
b
exécutée
quant
méthode
définie
b
super
classe
b
hérite
normalement
exécutée
dernière
instruction
system
out
prinln
provoquerait
erreur
compilation
pourquoi
parce
compilateur
connaît
type
statique
i
e
type
déclaré
méthode
définie
classe
super
classes
compilateur
trouve
définition
bien
b
génère
erreur
solution
transtypage
descendant
préalable
system
out
prinln
b
transtypage
correct
car
possède
déjà
création
tous
attributs
instance
b
polymorphisme
appel
méthode
peut
invoquer
méthodes
différentes
car
liaison
réalisée
dynamiquement
i
e
exécution
non
compilation
identification
type
objet
associé
appel
dynamique
exemple
polymorphisme
héritage
public
class
shape
public
void
draw
system
out
println
this
draw
public
class
circle
extends
shape
override
public
string
tostring
return
circle
public
class
square
extends
shape
override
public
string
tostring
return
square
public
class
picture
public
static
void
main
string
args
vector
shape
v
new
vector
shape
v
add
new
circle
v
add
new
square
for
shape
v
system
out
prinln
draw
polymorphism
méthode
main
affichera
circle
draw
square
draw
classes
méthodes
particulières
classe
déclarée
final
peut
être
sous
classée
méthode
déclarée
final
peut
être
redéfinie
sous
classe
classe
déclarée
abstract
représente
concept
abstrait
peut
être
instanciée
peut
être
sous
classée
méthode
déclarée
abstract
méthode
corps
spécifié
classe
abstraite
peut
contenir
méthodes
non
abstraites
toute
classe
contenant
méthode
abstraite
doit
être
déclarée
abstract
sous
classe
implémente
toutes
méthodes
abstraites
super
classe
doit
être
déclarée
abstract
interfaces
interface
sens
langage
java
cf
section
protocole
comportement
peut
être
implanté
toute
classe
interface
dehors
hiérarchie
classes
interface
différencie
principalement
classe
abstraite
caractéristiques
aucune
méthode
concrète
opposition
abstraite
peut
être
définie
interface
classe
peut
implémenter
plusieurs
interfaces
tout
comme
peut
construire
hiérarchie
classes
peut
construire
hiérarchie
interfaces
alors
classe
peut
étendre
directement
seule
super
classe
héritage
multiple
interface
peut
étendre
directement
plusieurs
super
interfaces
héritage
multiple
possible
exemple
public
interface
list
e
extends
collection
e
exemple
public
interface
predator
boolean
chaseprey
prey
p
public
interface
prey
boolean
ischasedby
predator
p
public
interface
venomous
public
interface
venomouspredator
extends
predator
venomous
public
class
pet
public
class
cat
extends
pet
implements
predator
public
class
frog
implements
predator
prey
exceptions
exception
objet
fournissant
informations
relatives
défaillance
programme
exception
générée
chacune
situations
suivantes
condition
exécution
anormale
comme
exemple
tentative
division
zéro
mémoire
insuffisante
exécution
instruction
throw
paquetage
java
lang
définit
nombre
classes
exception
couvrent
cas
plus
courants
exceptions
contrôlées
non
contrôlées
toute
exception
instance
classe
throwable
sous
classes
object
throwable
error
exception
mycheckedexception
runtimeexception
myuncheckedexception
java
divise
classes
exception
deux
catégories
exceptions
non
contrôlées
unchecked
exceptions
concernent
cas
imprévus
dire
situations
devrait
avoir
défaillance
fonctionnement
normal
elles
concernent
situations
pourraient
être
raisonnablement
évitées
exemple
indice
tableau
hors
limite
exceptions
indiquent
généralement
erreur
programme
elles
normalement
vocation
conduire
arrêt
immédiat
définitif
programme
exceptions
contrôlées
checked
exceptions
concernent
cas
prévus
dire
situations
programmeur
devrait
attendre
opération
puisse
échouer
elles
concernent
situations
défaillance
delà
contrôle
programmeur
exemple
disque
devenu
plein
rendant
impossible
écriture
fichier
exceptions
normalement
vocation
être
récupérées
permettre
programme
poursuivre
normalement
gestion
exception
contrôlée
impose
utilisation
clause
throws
instruction
contrôle
try
catch
exceptions
non
contrôlées
classes
runtimeexception
error
leurs
sous
classes
toutes
autres
classes
sous
classes
exceptions
contrôlées
classes
exception
standard
hiérarchie
error
classe
error
super
classe
hiérarchie
erreurs
graves
non
contrôlées
hiérarchie
habituellement
réservée
erreurs
exécution
système
exemples
sous
classes
prédéfinies
nosuchmethoderror
stackoverflowerror
outofmemoryerror
illegalaccesserror
hiérarchie
exception
classe
exception
super
classe
hiérarchie
exceptions
exclusion
faite
sous
hiérarchie
runtimeexception
contrôlées
exemples
sous
classes
exceptions
contrôlées
prédéfinies
dataformatexception
ioexception
eofexception
filenotfoundexception
hiérarchie
runtimeexception
classe
runtimeexception
super
classe
hiérarchie
exceptions
non
contrôlées
exemples
sous
classes
prédéfinies
arithmeticexception
illegalargumentexception
numberformatexception
illegalstateexception
indexoutofboundsexception
nullpointerexception
lancement
exception
instruction
throw
permet
lancer
exception
recommandé
appliquer
exceptions
non
contrôlées
syntaxe
throw
new
classofexception
diagnostic
message
to
print
exemple
if
key
null
throw
new
nullpointerexception
null
key
found
in
method
x
exemple
if
key
throw
new
illegalargumentexception
empty
key
received
exemple
constructeur
if
this
name
length
throw
new
illegalstateexception
name
must
be
provided
object
creation
aborted
exemple
opération
remove
interface
iterator
spécifiée
optionnelle
dire
implémentation
pourrait
être
cas
public
void
remove
throw
new
unsupportedoperationexception
capture
exception
capture
exception
obligatoire
exceptions
veut
contrôler
cas
exceptions
contrôlées
compilateur
renforce
contrôles
fois
méthode
lance
telle
exception
appelant
méthode
clause
throws
clause
throws
déclaration
ajoutée
tête
méthode
susceptible
lever
exception
contrôlée
déclare
exceptions
contrôlées
prendre
compte
cadre
méthode
ceci
nécessaire
compilateur
puisse
savoir
quelles
exceptions
contrôler
convention
exceptions
non
contrôlées
devraient
être
incluses
clause
throws
syntaxe
throws
exceptionclass
exceptionclass
exemple
public
void
savetofile
string
filename
throws
ioexception
instruction
try
catch
instruction
try
catch
permet
capturer
exception
générée
appel
méthode
quand
exception
générée
contrôle
transféré
code
généré
exception
clause
catch
capturé
exception
clause
catch
doit
avoir
seul
paramètre
formel
type
paramètre
doit
être
classe
throwable
sous
classes
instruction
try
peut
contenir
plusieurs
blocs
catch
cas
exception
plus
générale
doit
être
traitée
dernier
syntaxe
try
protect
one
or
more
statement
here
catch
exceptionclass
e
report
and
recover
from
the
exception
here
finally
in
fine
in
any
case
always
execute
these
statements
bloc
finally
optionnel
permet
souvent
éviter
duplication
code
exemple
partir
plate
forme
read
double
from
the
standard
input
stream
scanner
input
new
scanner
system
in
double
x
try
x
input
nextdouble
catch
inputmismatchexception
e
system
err
println
error
double
waited
e
input
close
exemple
partir
plate
forme
create
copy
of
text
file
scanner
in
null
printwriter
out
null
try
in
new
scanner
new
file
inputfilename
out
new
printwriter
outputfilename
while
in
hasnext
out
println
in
nextline
catch
exception
e
system
err
println
error
in
reading
writing
file
e
finally
if
in
null
in
close
if
out
null
out
close
exemple
partir
plate
forme
read
and
print
text
file
of
doubles
scanner
in
null
try
in
new
scanner
new
file
inputfilename
while
in
hasnext
system
out
println
double
parsedouble
in
next
catch
filenotfoundexception
e
system
err
println
unable
to
open
the
input
file
e
catch
numberformatexception
e
system
err
println
token
is
not
double
e
catch
exception
e
system
err
println
problem
in
reading
the
file
e
finally
if
in
null
try
in
close
catch
exception
e
system
err
println
error
in
closing
the
file
e
définir
nouvelle
classe
exception
principales
raisons
conduisant
définition
nouvelle
classe
exception
besoin
inclure
informations
complémentaires
objet
exception
afin
permettre
diagnostic
récupération
erreur
toute
nouvelle
classe
exception
définie
comme
sous
classe
classe
exception
existante
hiérarchie
exception
exemple
public
class
wrongvalueexception
extends
exception
private
string
key
public
wrongvalueexception
string
key
this
key
key
public
string
getkey
return
key
public
string
tostring
return
wrong
value
key
found
annexe
programmation
graphique
références
bases
swing
exemples
programmation
interfaces
graphiques
java
sun
com
docs
books
tutorial
uiswing
mini
index
html
gestion
événements
exemples
programmation
java
sun
com
docs
books
tutorial
uiswing
events
api
html
swing
architecture
overview
java
sun
com
products
jfc
isc
articles
architecture
chapitre
introduit
programmation
graphique
bibliothèque
javax
swing
swing
existe
deux
grands
paquetages
utilitaires
java
réaliser
interfaces
graphiques
awt
abstract
window
toolkit
paquetage
primitif
composants
paquetage
importent
import
java
awt
swing
plus
récent
plus
évolué
construit
awt
paquetage
recommandé
composants
paquetage
importent
import
javax
swing
deux
paquetages
swing
plus
communément
utilisés
javax
swing
javax
swing
event
classes
javax
swing
plus
courantes
jframe
jpanel
jlabel
jtextfield
jbutton
joptionpane
exemple
saisie
affichage
boîte
dialogue
import
javax
swing
joptionpane
use
method
showinputdialog
to
prompt
for
some
input
string
inputvalue
joptionpane
showinputdialog
value
use
method
showmessagedialog
to
display
message
joptionpane
showmessagedialog
null
message
conteneurs
composants
tout
objet
graphique
composé
différents
objets
conteneurs
containers
composants
atomiques
différents
constituants
organisés
hiérarchie
inclusion
principales
catégories
conteneurs
composants
conteneurs
plus
haut
niveau
objet
graphique
puisse
être
affiché
écran
hiérarchie
constituants
doit
nécessairement
avoir
racine
trois
conteneurs
suivants
frame
classe
jframe
conteneur
plus
général
fournit
fenêtre
principale
laquelle
autres
composants
swing
pourront
dessiner
dialog
classe
jdialog
plus
limité
frame
fournit
fenêtre
dialogue
classe
ptionpane
permet
créer
fenêtres
dialogue
simples
standard
classe
jdialog
permet
créer
fenêtres
dialogue
personnalisées
applet
classe
japplet
spécialisé
interfaces
web
fournit
fenêtre
affichée
navigateur
web
conteneurs
intermédiaires
notamment
panel
classe
jpanel
simplifie
positionnement
objets
graphiques
atomiques
tout
conteneur
haut
niveau
contient
conteneur
intermédiaire
spécial
appelé
contentpane
conteneur
intermédiaire
principal
contient
typiquement
plusieurs
panels
composants
atomiques
exemple
button
classe
jbutton
label
classe
jlabel
text
field
classe
jtextfield
sauf
conteneurs
plus
haut
niveau
tous
composants
conteneur
intermédiaire
composant
atomique
commencent
héritent
classe
jcomponent
ajouter
objet
conteneur
utilise
méthode
add
méthode
prend
général
deuxième
argument
spécifie
mise
page
exemple
import
javax
swing
frame
new
jframe
pane
new
jpanel
button
new
jbutton
label
new
jlabel
pane
add
button
pane
add
abel
frame
getcontentpane
add
pane
borderlayout
center
frame
pack
sizes
at
or
above
preferred
sizes
frame
setvisible
true
objet
frame
ainsi
créé
hiérarchie
jframe
contentpane
jpanel
jbutton
jlabel
exemple
import
javax
swing
japplet
public
class
appletexample
extends
japplet
public
void
init
jpanel
pane
new
jpanel
pane
add
new
jlabel
hello
world
this
setcontentpane
pane
gestion
mise
page
mise
page
layout
consiste
fixer
taille
position
composants
tout
conteneur
possède
gestionnaire
mise
page
défaut
convient
peut
remplacer
composants
peuvent
solliciter
taille
alignement
donnés
in
fine
gestionnaires
mise
page
conteneur
conserve
décision
finale
existe
gestionnaires
mise
page
borderlayout
gestionnaire
mise
page
défaut
tout
contentpane
définit
zones
placement
north
south
east
west
center
flowlayout
gestionnaire
mise
page
défaut
tout
jpanel
positionne
simplement
composants
gauche
droite
passant
nouvelle
ligne
nécessaire
boxlayout
gestionnaire
mise
page
très
flexible
positionne
composants
seule
ligne
colonne
respectant
attentes
composants
matière
taille
maximale
alignement
gridlayout
gestionnaire
mise
page
très
simple
crée
ensemble
composants
taille
affiche
nombre
lignes
colonnes
spécifié
gridbaglayout
gestionnaire
mise
page
plus
sophistiqué
plus
flexible
aligne
composants
plaçant
grille
cellules
permettant
certains
étendre
plusieurs
cellules
largeurs
rangées
hauteurs
colonnes
respectivement
peuvent
être
différentes
cardlayout
gestionnaire
mise
page
usage
spécial
permet
implémenter
zone
contient
différents
composants
différents
moments
utilisé
combinaison
autres
gestionnaires
mise
page
exemple
changement
gestionnaire
mise
page
défaut
jpanel
pane
new
jpanel
pane
setlayout
new
borderlayout
taille
alignement
composant
peut
être
spécifié
méthodes
suivantes
setminimumsize
setpreferredsize
setmaximumsize
setalignmentx
setalignmenty
gestion
événements
notion
événement
chaque
fois
utilisateur
agit
clavier
souris
événement
survient
objet
événement
généré
objet
événement
objet
contenant
informations
source
nature
événement
survenu
swing
offre
interfaces
sens
java
appelées
écouteurs
événements
event
listeners
permettent
capter
événements
façon
sélective
afin
pouvoir
traiter
event
source
event
object
event
listener
event
listener
event
listener
exemple
événement
type
listener
clic
bouton
graphique
enfoncement
touche
return
actionlistener
lors
saisie
champ
texte
fermeture
fenêtre
windowlistener
graphique
frame
clic
souris
lors
passage
curseur
composant
mouselistener
graphique
afin
faciliter
travail
programmeur
swing
associe
généralement
chaque
interface
listener
classe
adaptateur
adapter
adaptateur
existe
travaille
exemple
interface
listener
classe
adapter
associée
actionlistener
none
windowlistener
windowadapter
mouselistener
mouseadapter
keylistener
keyadapter
réaliser
gestionnaire
événement
réaliser
gestionnaire
événement
event
handler
requiert
trois
éléments
code
déclarer
classe
gestionnaire
événement
classe
doit
implémenter
interface
listener
étendre
classe
adapter
exemple
import
java
awt
event
public
class
myclass
implements
actionlistener
définir
classe
gestionnaire
événement
méthodes
interface
listener
exemple
public
void
actionperformed
actionevent
e
définir
instance
classe
gestionnaire
événement
enregistrer
composant
concerné
exemple
somecomponent
addactionlistener
instanceofmyclass
type
actionlistener
permet
définir
gestionnaires
événement
plus
simples
plus
communs
lorsqu
événement
type
généré
clic
bouton
graphique
enfoncement
touche
return
lors
saisie
champ
texte
message
actionperformed
envoyé
tous
écouteurs
événements
enregistrés
composant
concerné
classe
gestionnaire
événement
généralement
implantée
sous
forme
classe
interne
inner
class
sein
classe
graphique
exemple
ecriture
mouselistener
public
class
myclass
extends
jpanel
someobject
addmouselistener
new
myadapter
class
myadapter
extends
mouseadapter
public
void
mouseclicked
mouseevent
e
typiquement
classe
gestionnaire
événement
implantée
sous
forme
classe
interne
anonyme
exemple
solution
équivalente
celle
exemple
précédent
ecriture
mouselistener
public
class
myclass
extends
jpanel
someobject
addmouselistener
new
mouseadapter
public
void
mouseclicked
mouseevent
e
affichage
fermeture
fenêtre
graphique
affichage
masquage
fenêtre
graphique
type
jframe
commande
méthode
setvisible
quand
utilisateur
ferme
fenêtre
graphique
type
jframe
fenêtre
fait
défaut
masquée
quoiqu
invisible
objet
graphique
existe
toujours
programme
peut
nouveau
rendre
visible
désire
comportement
différent
nécessaire
enregistrer
objet
graphique
gestionnaire
événement
type
windowlistener
capter
message
windowclosing
spécifier
comportement
défaut
utilisant
méthode
setdefaultcloseoperation
comportement
indiqué
argument
constante
définie
interface
windowconstants
exemple
argument
dispose
close
architecture
composants
swing
objectif
applications
facilement
adaptables
architecture
composants
swing
basée
adaptation
très
renommée
architecture
mvc
modèle
vue
contrôleur
voir
section
communauté
swing
appelée
architecture
modèle
séparable
partie
modèle
composant
swing
partie
représente
données
application
traitée
comme
élément
séparé
tout
comme
préconise
conception
mvc
swing
fusionne
parties
vue
prend
charge
représentation
visuelle
données
contrôleur
traite
entrées
utilisateur
chaque
composant
seul
objet
interface
utilisateur
user
interface
object
général
considéré
comme
bonne
pratique
centrer
architecture
application
autour
données
plutôt
autour
interface
utilisateur
supporter
paradigme
swing
définit
interface
modèle
séparée
chaque
composant
séparation
fournit
programme
application
possibilité
connecter
facilement
composants
swing
implémentation
modèle
propre
table
suivante
montre
interfaces
modèles
offertes
composants
swing
component
model
interface
model
type
jbutton
buttonmodel
gui
jtogglebutton
buttonmodel
gui
data
jcheckbox
buttonmodel
gui
data
jradiobutton
buttonmodel
gui
data
jmenu
buttonmodel
gui
jmenuitem
buttonmodel
gui
jcheckboxmenuitem
buttonmodel
gui
data
jradiobuttonmenuitem
buttonmodel
gui
data
jcombobox
comboboxmodel
data
jprogressbar
boundedrangemodel
gui
data
jscrollbar
boundedrangemodel
gui
data
slider
boundedrangemodel
gui
data
component
model
interface
model
type
jtabbedpane
singleselectionmodel
gui
jlist
listmodel
data
jlist
listselectionmodel
gui
jtable
tablemodel
data
jtable
tablecolumnmodel
gui
jtree
treemodel
data
jtree
treeselectionmodel
gui
jeditorpane
document
data
jtextpane
document
data
jtextarea
document
data
jtextfield
document
data
jpasswordfield
document
data
interfaces
modèles
fournies
swing
relèvent
deux
grandes
catégories
types
etat
interface
graphique
gui
définissent
statut
visuel
commandes
interface
graphique
types
données
application
data
représentent
données
quantifiables
sens
application
certains
modèles
relèvent
types
partagés
gui
data
recommandé
utiliser
catégorie
données
application
data
modèles
swing
car
renforcent
grandement
adaptabilité
modularité
applications
long
terme
paradigme
vision
monde
repose
modèle
applets
java
permet
créer
deux
types
programmes
applications
exécutent
directement
sous
contrôle
machine
virtuelle
java
appliquettes
applettes
anglais
applets
destinées
être
exécutées
navigateur
web
réaliser
applette
minimum
consiste
créer
sous
classe
classe
japplet
voir
section
créer
méthode
init
lancée
navigateur
référencer
classe
balise
applet
code
fichier
html
syntaxe
import
javax
swing
japplet
public
class
appletclassname
extends
japplet
fields
public
void
init
syntaxe
applet
code
appletclassname
class
width
anint
height
anint
applet
annexe
threads
références
programmation
concurrente
processus
threads
java
sun
com
docs
books
tutorial
essential
concurrency
procthread
html
threads
permettent
programmer
tâches
intérieur
programme
exécuteront
concurremment
processus
légers
tâche
exécuter
thread
doit
être
implémentée
méthode
run
existe
deux
façons
fournir
méthode
run
définir
sous
classe
classe
thread
redéfinir
méthode
run
définir
classe
implémente
interface
runnable
définir
méthode
run
créer
thread
extension
classe
thread
exemple
example
of
defining
thread
extending
thread
public
class
simplethread
extends
thread
public
simplethread
string
threadname
super
threadname
the
task
of
this
thread
is
to
print
times
its
name
at
random
rate
public
void
run
for
int
i
i
i
system
out
println
i
getname
try
sleep
long
math
random
catch
interruptedexception
e
system
out
println
done
getname
end
class
simplethread
example
of
running
two
threads
concurrently
jamaica
and
fiji
will
be
printed
randomly
times
public
static
void
main
string
args
new
simplethread
jamaica
start
new
simplethread
fiji
start
créer
thread
implémentation
interface
runnable
façon
faire
impose
lorsque
classe
créer
doit
sous
classer
classe
quelconque
cas
typique
applet
parce
java
supporte
héritage
multiple
exemple
example
of
defining
thread
implementing
runnable
public
class
simplethread
implements
runnable
string
threadname
public
simplethread
string
threadname
this
threadname
threadname
the
task
of
this
thread
is
to
print
times
its
name
at
random
rate
public
void
run
for
int
i
i
i
system
out
println
i
threadname
try
thread
sleep
long
math
random
catch
interruptedexception
e
system
out
println
done
threadname
end
class
simplethread
example
of
running
two
threads
concurrently
jamaica
and
fiji
will
be
printed
randomly
times
public
static
void
main
string
args
new
thread
new
simplethread
jamaica
start
new
thread
new
simplethread
fiji
start
synchronisation
communication
entre
threads
sections
critiques
synchronisation
programme
segments
code
accèdent
donnée
depuis
threads
concurrents
appelés
sections
critiques
lorsque
deux
threads
concurrents
invoquent
méthodes
opèrent
donnée
partagée
méthodes
critiques
nécessaire
java
puisse
synchroniser
méthodes
afin
garantir
accès
sûr
information
fin
chacune
méthodes
doit
être
déclarée
modificateur
synchronized
exécution
accès
donnée
partagée
ainsi
automatiquement
verrouillé
tant
utilisée
méthode
critique
exemple
get
put
supposées
deux
méthodes
critiques
objet
partagé
public
synchronized
int
get
public
synchronized
void
put
int
value
communication
entre
threads
deux
threads
processus
indépendants
déroulent
façon
asynchrone
puissent
communiquer
données
nécessaire
sachent
synchroniser
autour
sas
communication
thread
émetteur
donnée
appelé
producteur
thread
destinataire
donnée
appelé
consommateur
thread
producteur
donnée
doit
être
capable
attendre
espace
stockage
sas
communication
libre
puis
déposer
nouvelle
donnée
puis
informer
threads
consommateurs
mise
disposition
donnée
façon
symétrique
thread
consommateur
donnée
doit
être
capable
attendre
donnée
mise
disposition
espace
stockage
sas
communication
puis
lire
donnée
puis
informer
threads
producteurs
disponibilité
sas
communication
accuser
réception
sas
communication
confie
charge
synchronisations
mise
attente
réalise
méthode
wait
notification
autres
threads
méthodes
notify
notifyall
méthodes
toutes
deux
définies
classe
object
exemple
classe
définissant
sas
communication
seul
élément
type
entier
attribut
contents
noter
particulier
sécurisation
apportée
usage
while
non
if
afin
prévenir
faux
réveils
éventuels
public
class
cubbyhole
private
int
contents
private
boolean
available
false
public
synchronized
int
get
called
by
consumer
while
available
false
try
wait
wait
for
producer
to
put
value
catch
interruptedexception
e
available
false
notifyall
return
contents
public
synchronized
void
put
int
x
called
by
producer
while
available
true
try
wait
wait
for
consumer
to
get
value
catch
interruptedexception
e
contents
x
available
true
notifyall
annexe
conception
developpement
java
références
architecture
modèle
vue
contrôleur
java
sun
com
blueprints
guidelines
designing
enterprise
applications
e
app
arch
app
arch
html
développement
tests
unitaires
cadre
applications
junit
junit
sourceforge
net
doc
cookbook
cookbook
htm
javabeans
java
sun
com
products
javabeans
java
sun
com
docs
books
tutorial
javabeans
index
html
design
patterns
section
va
delà
langage
java
aborder
quelques
aspects
conception
développement
programmes
java
conseils
généraux
bonne
conception
classes
rechercher
couplage
faible
couplage
décrit
interconnectivité
entre
classes
couplage
faible
quand
chaque
classe
largement
indépendante
autres
communique
elles
via
interface
petite
bien
définie
interface
classe
partie
visible
publique
classe
définit
typiquement
liste
membres
attributs
constructeurs
méthodes
non
privés
associés
leurs
commentaires
documentation
rechercher
cohesion
forte
cohésion
décrit
adéquation
entre
unité
code
entité
tâche
logique
cohésion
forte
quand
chaque
unité
code
méthode
classe
module
responsable
entité
tâche
très
bien
définie
utiliser
maximum
encapsulation
encapsulation
technique
base
réduire
couplage
contribue
séparer
quoi
comment
vue
implémentation
définition
utilisation
principe
base
rendre
attributs
privés
utiliser
méthodes
accès
decoupler
entrees
traitements
sorties
voir
particulier
section
adopter
conception
dirigee
responsabilités
attribution
bonnes
responsabilités
bonnes
classes
problèmes
plus
délicats
conception
orientée
objet
programmation
dirigée
responsabilités
processus
conception
classes
attribution
responsabilités
bien
définies
chaque
classe
approche
peut
être
utilisée
déterminer
quelle
classe
devrait
implémenter
telle
fonctionnalité
conception
dirigée
responsabilités
contribue
réduire
couplage
eviter
duplication
code
eviter
segment
code
retrouve
plus
fois
application
utiliser
heritage
bon
escient
héritage
relation
relation
hiérarchie
héritage
objets
doivent
avoir
relation
classe
base
afin
héritage
tous
attributs
propriétés
méthodes
classe
base
garde
sens
sous
classe
spécialise
complète
objets
relevant
strictement
relation
doivent
traduire
classes
interfaces
sans
relation
héritage
entre
elles
limiter
taille
complexite
mettre
trop
choses
méthode
méthode
trop
longue
fait
plus
tâche
logique
tout
mettre
seule
classe
classe
trop
complexe
représente
plus
entité
logique
chercher
faciliter
changements
localises
réaliser
changements
classe
devrait
avoir
minimum
impact
autres
classes
localisation
changements
buts
recherchés
bonne
conception
classe
produit
couplage
faible
cohésion
forte
architecture
application
interactive
modèle
mvc
architecture
modèle
vue
contrôleur
model
view
controller
mvc
modèle
architecture
logicielle
recommandé
largement
utilisé
conception
applications
interactives
modèle
vise
minimiser
degré
couplage
entre
objets
application
découplant
structurellement
entrées
traitements
sorties
point
essentiel
consiste
séparer
objets
relevant
interface
utilisateur
objets
métier
afin
pouvoir
faire
évoluer
indépendamment
réutiliser
mvc
organise
application
interactive
trois
grandes
composantes
modèle
vue
contrôleur
découple
leurs
responsabilités
respectives
modele
encapsule
fonctionnalité
données
coeur
application
indépendant
représentations
sortie
spécifiques
comportement
entrée
charge
représentation
interne
données
application
logique
gestion
données
notifie
composante
vue
changements
données
permet
interroger
état
fournit
contrôleur
possibilité
accéder
certaines
fonctionnalités
applicatives
encapsulées
modèle
vue
affiche
informations
utilisateur
récupère
modèle
données
présenter
utilisateur
spécifie
présentation
externe
met
jour
information
affichée
relaie
aussi
contrôleur
entrées
utilisateur
autorise
sélectionner
vues
séparation
modèle
part
vue
contrôleur
autre
part
permet
vues
multiples
modèle
quand
plusieurs
vues
modèle
chaque
vue
alors
contrôleur
associé
controleur
gère
entrées
utilisateur
reçoit
entrées
généralement
sous
forme
événements
encodant
mouvement
souris
activation
bouton
entrée
clavier
bien
agit
application
web
requêtes
http
get
post
événements
traduits
requêtes
service
modèle
vue
application
typiquement
contrôleur
chaque
ensemble
fonctionnalités
apparentées
application
peut
avoir
contrôleur
séparé
type
client
interactions
utilisateurs
varient
selon
types
client
utilisateur
interagit
système
uniquement
travers
contrôleurs
ensemble
vue
contrôleur
compose
interface
utilisateur
modèle
interrogation
état
notification
changement
changement
état
vue
requête
utilisateur
sélection
vue
contrôleur
invocation
méthodes
evènements
pratique
schéma
principe
laisse
place
grande
variété
implémentations
possibles
difficultés
implémentation
idéale
java
réside
notamment
fait
composants
graphiques
swing
fusionnent
parties
vues
contrôleur
cf
section
petits
programmes
tout
particulièrement
vue
contrôleur
souvent
combinés
tous
cas
modèle
doit
être
séparé
exemple
implémentation
architecture
mvc
import
java
util
observable
import
java
util
observer
import
javax
swing
japplet
import
javax
swing
jpanel
import
java
awt
event
actionlistener
import
java
awt
event
actionevent
public
class
controller
extends
japplet
implements
actionlistener
private
view
view
private
model
model
public
void
init
model
new
mode
view
new
view
model
this
model
addobserver
view
this
setcontentpane
view
public
void
actionperformed
actionevent
e
process
the
events
public
class
view
extends
jpanel
implements
observer
private
model
model
declare
here
the
jpanel
components
public
view
model
actionlistener
listener
model
makecontentpane
listener
public
void
update
observable
o
object
arg
automatically
called
when
observer
is
notified
update
the
view
public
void
makecontentpane
actionlistener
listener
create
and
initialize
the
jpanel
components
and
when
need
be
attach
them
the
event
listener
define
the
layout
public
class
model
extends
observable
wherever
the
value
of
an
attribute
interesting
the
view
is
changed
insert
these
two
statements
setchanged
notifyobservers
or
notifyobservers
arg
chercher
découpler
traitements
entrées
sorties
classique
programmation
esprit
peut
noter
particulier
modèle
mvc
certaine
similitude
classique
architecture
trois
tiers
three
tiers
systèmes
distribués
architecture
trois
tiers
architecture
logicielle
client
serveur
laquelle
interface
utilisateur
logique
traitement
données
trois
modules
indépendants
interface
utilisateur
stockée
client
gros
logique
application
stocké
serveurs
application
données
stockées
serveur
base
données
exemple
applications
web
professionnelles
reposant
solution
java
ee
voir
chapitre
modèle
assuré
ejb
javabeans
contrôleur
assuré
servlets
vue
jsp
glossaire
chapitre
tests
unitaires
définitions
test
activité
consiste
déterminer
segment
code
méthode
classe
programme
produit
bien
résultat
attendu
définit
classiquement
trois
niveaux
tests
mis
oeuvre
successivement
test
unitaire
unit
testing
agit
tester
chaque
composante
individuelle
méthode
classe
application
test
intégration
integration
testing
agit
tester
groupes
classes
interrelations
puis
toute
application
ensemble
tests
appliqués
suivent
généralement
plan
test
i
e
approche
systématique
méthodique
test
système
system
testing
agit
tester
application
intégrée
environnement
utilisation
complet
tests
entrent
catégorie
tests
boîtes
noires
tant
tels
devraient
nécessiter
connaissance
conception
interne
code
logique
considérations
suivantes
limiteront
essentiellement
tests
unitaires
cas
test
ensemble
conditions
variables
partir
desquelles
testeur
déterminera
exigence
requise
complètement
partiellement
satisfaite
cas
test
caractérisé
entrée
connue
pré
condition
sortie
attendue
post
condition
nombreux
cas
tests
peuvent
être
nécessaires
vérifier
exigence
donnée
distingue
généralement
deux
types
cas
test
cas
test
positifs
consistent
tester
cas
censés
faire
réussir
fonctionnalité
tests
doivent
convaincre
élément
code
testé
fonctionne
bien
comme
espéré
cas
test
négatifs
consistent
tester
cas
censés
mettre
échec
fonctionnalité
toutes
situations
valeurs
hors
limites
erreurs
exemples
entrer
valeur
hors
plage
lire
ensemble
vide
tels
cas
devons
attendre
programme
traite
erreur
façon
contrôlée
appropriée
simple
correction
erreurs
détectées
test
devrait
systématiquement
améliorer
qualité
programme
malheureusement
expérience
montre
tout
changement
programme
peut
introduire
façon
inattendue
autres
erreurs
particulier
erreurs
régression
regression
bugs
erreur
régression
survient
quand
fonctionnalité
fonctionnait
précédemment
fonctionne
plus
suite
modification
programme
méthode
courante
test
non
régression
non
regression
testing
consiste
réexécuter
tests
réalisés
antérieurement
voir
défauts
apparaissent
voire
réapparaissent
tests
devant
être
appliqués
non
seule
fois
chaque
modification
logiciel
souhaitable
disposer
batterie
tests
programmés
afin
permettre
automatisation
test
agit
programmer
cas
test
chaque
méthode
non
triviale
veillant
chaque
cas
test
bien
séparé
autres
junit
junit
développé
communauté
open
source
offre
cadre
applications
framework
programmation
tests
régression
utilisé
implémenter
tests
unitaires
java
classe
testcase
permet
définir
cas
test
classe
assert
fournit
ensemble
méthodes
facilitant
gestion
erreurs
détectées
classe
testsuite
permet
exécuter
suite
tests
classe
testrunner
outil
exploitation
permettant
définir
suite
tests
exécuter
afficher
résultats
exemple
cas
test
test
case
for
the
class
myclass
import
junit
framework
public
class
testmyclass
extends
testcase
the
tests
need
to
run
against
the
background
of
known
set
of
objects
this
set
of
objects
is
called
test
fixture
define
here
an
instance
variable
for
each
part
of
the
fixture
private
myclass
myobject
public
testmyclass
string
name
super
name
sets
up
the
test
fixture
setup
is
called
before
every
test
case
method
initializes
the
instance
variables
protected
void
setup
myobject
new
myclass
tears
down
the
test
fixture
teardown
is
called
after
every
test
case
method
releases
any
permanent
resources
allocated
in
setup
example
closes
files
protected
void
teardown
once
the
fixture
is
in
place
many
test
cases
necessary
can
be
written
tests
the
method
methodx
public
void
testmethodx
argumenttype
argument
responsetype
expectedresponse
string
errormessage
asserttrue
errormessage
expectedresponse
equals
methodx
argument
end
class
testmyclass
junit
détermine
succès
échec
test
via
instructions
assertion
assertion
simplement
procédure
comparaison
entre
valeur
espérée
valeur
effective
génère
échec
cas
différence
procédures
assertion
disponibles
définies
classe
junit
framework
assert
exemples
instructions
assertion
asserttrue
errormessage
booleancondition
assertfalse
errormessage
booleancondition
assertequals
errormessage
expectedvalue
actualvalue
assertequals
errormessage
doubleexpected
doubleactual
doubledelta
exécuter
test
créer
instance
classe
paramètre
nom
méthode
test
exemple
new
testmyclass
testmethodx
junit
intégré
certains
outils
développement
tels
outils
offrent
alors
fonctionnalités
permettent
créer
facilement
tests
java
beans
java
bean
grain
java
défini
sun
comme
composant
réutilisable
java
destiné
être
manipulé
outil
développement
graphique
visuel
java
beans
composants
java
i
e
classes
respectant
certains
critères
afin
pouvoir
être
facilement
développés
assemblés
réutilisés
créer
applications
sophistiquées
exemple
technologie
java
beans
architecture
composants
plate
forme
java
obligations
doit
respecter
java
bean
nombreuses
enjeu
importance
disposer
composants
write
one
run
anywhere
wora
réutilisables
java
beans
classes
publiques
concrètes
caractéristiques
communes
supporter
propriétés
propriétés
attributs
discrets
nommés
java
bean
peuvent
affecter
apparence
comportement
propriétés
java
beans
équivalent
champs
objets
exemple
bouton
graphique
pourrait
avoir
propriété
nommée
label
représenterait
texte
affiché
bouton
méthodes
accès
propriétés
doivent
respecter
conventions
nommage
particulières
exemple
propriétés
simples
existe
autres
liées
contraintes
indexées
propertytype
getpropertyname
simple
getter
void
setpropertyname
propertytype
simple
setter
propriétés
booléennes
utilise
typiquement
is
lieu
get
communiquer
entre
événements
pratique
utilise
technique
swing
listeners
voir
section
supporter
introspection
exécution
environnement
développement
doit
être
capable
déterminer
analyser
propriétés
événements
méthodes
supporte
java
bean
noter
propriété
introspection
déjà
présente
objets
java
puisqu
objet
peut
être
analysé
grâce
classes
class
method
field
supporter
personnalisation
customization
outils
développement
doivent
permettre
modifier
apparence
comportement
java
bean
phase
conception
supporter
persistance
persistance
objet
capacité
sauvegarder
support
stockage
restaurer
identique
afin
programme
puisse
terminer
sans
objet
perdu
exemple
persistance
objet
puisse
prétendre
être
document
excel
intérieur
document
word
mécanisme
rend
possible
persistance
appelé
sérialisation
serialization
fin
java
bean
doit
implémenter
interface
serializable
externalizable
exemple
java
bean
package
sunw
demo
simple
import
java
awt
import
java
io
serializable
simplebean
wi
be
displayed
with
green
centered
rectangle
but
its
color
may
be
changed
ater
public
class
simplebean
extends
canvas
implements
serializable
private
color
color
color
green
property
getter
method
public
color
getcolor
return
color
property
setter
method
sets
new
simplebean
color
and
repaints
public
void
setcolor
color
newcolor
color
newcolor
repaint
public
void
paint
graphics
g
g
setcolor
color
g
fillrect
constructor
sets
inherited
properties
public
simplebean
setsize
setbackground
color
red
end
class
simplebean
être
reconnu
outil
développement
java
bean
doit
être
conditionnné
fichier
archive
format
jar
bien
obligatoire
souhaitable
java
beans
paquetages
évite
notamment
conflits
cas
homonymie
beans
design
patterns
section
toute
première
introduction
modèles
conception
design
patterns
développement
orienté
objet
applications
professionnelles
conduit
généralement
rencontrer
problèmes
conception
types
familiers
communauté
développeurs
confirmés
lesquels
solutions
éprouvées
existent
agit
ici
solutions
théoriques
algorithmes
solutions
orientées
objet
empiriques
solidité
efficacité
fait
preuve
pratique
solutions
appelées
modèles
conception
design
patterns
développeur
expérimenté
doit
connaître
disposer
panier
modèles
conception
appliquera
aussi
systématiquement
possible
modèles
conception
stratégies
résolution
grands
types
problèmes
conception
orientée
objet
décrivent
formes
génériques
organisation
classes
indépendants
langage
programmation
objet
mis
oeuvre
titre
illustratif
architecture
mvc
décrite
section
exemple
modèle
conception
architecture
logicielle
architectural
design
pattern
plus
connus
modèles
conception
base
modèles
fondamentaux
décrits
quatre
auteurs
appelés
collectivement
the
gang
of
four
bande
quatre
tout
simplement
gof
distingue
habituellement
grandes
familles
modèles
conception
expression
design
pattern
souvent
traduite
aussi
patron
conception
modèles
construction
but
organiser
création
objets
façon
gagner
abstraction
exemple
présenté
ci
après
modèle
singleton
modèles
structuration
facilitent
organisation
hiérarchie
classes
leurs
relations
exemple
présenté
ci
après
modèle
decorator
modèles
comportement
proposent
solutions
organiser
interactions
répartir
traitements
entre
objets
tentent
répartir
responsabilités
entre
chaque
classe
exemple
modèle
chain
of
responsibility
permet
créer
chaîne
objets
tels
peut
répondre
requête
puisse
transmettre
successeur
jusqu
entre
réponde
exemple
modèle
singleton
modèle
conception
singleton
permet
assurer
classe
possédera
instance
plus
offrir
méthode
unique
retournant
instance
exemple
implémentation
cas
toutes
informations
nécessaires
création
singleton
disponibles
moment
chargement
classe
mémoire
public
final
class
mysingleton
creating
at
the
class
loading
private
static
mysingleton
singleinstance
new
mysingleton
private
constructor
can
be
used
outside
this
class
private
mysingleton
get
singleton
of
this
class
public
static
mysingleton
getinstance
return
singleinstance
creation
of
singleton
mysingleton
singleton
mysingleton
getinstance
exemple
modèle
decorator
modèle
conception
decorator
permet
ajouter
dynamiquement
fonctionnalités
objet
ceci
réalise
créant
nouvelle
classe
decorator
enveloppant
classe
originale
modèle
conception
decorator
alternative
approche
création
sous
classe
classe
originale
impose
notamment
approche
extension
classe
originale
cas
suivants
classe
originale
peut
être
étendue
héritage
nombre
sous
classes
permettant
définir
toutes
combinaisons
possibles
fonctionnalités
trop
important
ajout
fonctionnalités
peut
être
statique
i
e
réalisé
compilation
doit
être
dynamique
e
réalisé
exécution
exemple
wikipedia
considérons
fenêtres
affichage
instances
classe
window
supposons
classe
offre
possibilité
ajouter
barres
défilement
créons
décorateur
puisse
ajouter
dynamiquement
fonctionnalité
objets
window
existants
an
interface
common
to
the
decorator
and
the
decorated
public
interface
window
public
void
draw
the
original
class
the
instance
of
which
can
be
decorated
public
class
simplewindow
implements
window
public
void
draw
the
abstract
decorator
public
abstract
class
windowdecorator
implements
window
protected
window
decoratedwindow
public
windowdecorator
window
decoratedwindow
this
decoratedwindow
decoratedwindow
first
concrete
decorator
public
class
verticalscrollbardecorator
extends
windowdecorator
public
verticalscrollbardecorator
window
decoratedwindow
super
decoratedwindow
public
void
draw
drawverticalscrollbar
decoratedwindow
draw
public
void
drawverticalscrollbar
second
concrete
decorator
public
class
horizontalscrollbardecorator
extends
windowdecorator
public
horizontalscrollbardecorator
window
decoratedwindow
super
decoratedwindow
public
void
draw
drawhorizontalscrollbar
decoratedwindow
draw
public
void
drawhorizontalscrollbar
example
creation
of
fully
decorated
window
instance
window
decoratedwindow
new
horizontalscrollbardecorator
new
verticalscrollbardecorator
new
simplewindow
annexe
machine
virtuelle
java
jvm
objectifs
premiers
chapitre
comprendre
comment
opère
chargement
dynamique
classes
mémoire
lors
exécution
programme
java
comprendre
traitement
champs
blocs
static
chargement
classe
machine
virtuelle
java
jvm
interpréteur
code
java
compilé
bytecode
permettant
exécuter
programme
java
machine
cible
espace
mémoire
jvm
comporte
plusieurs
zones
notamment
zone
méthodes
contient
code
méthodes
constructeurs
ainsi
informations
structure
chaque
classe
notamment
table
symboles
pile
espace
propre
chaque
thread
mémorise
dynamiquement
contextes
exécution
variables
locales
notamment
méthodes
cours
exécution
tas
contient
objets
créés
new
instances
classe
tableaux
cf
chapitre
demande
exécution
programme
java
lance
machine
virtuelle
java
jvm
réalise
alors
grandes
étapes
suivantes
chargement
classe
principale
spécifiée
main
class
classes
dépend
immédiatement
premier
rang
desquelles
toutes
classes
o
création
champs
static
création
table
méthodes
o
traitement
champs
initialisation
blocs
exécution
static
exécution
méthode
main
classe
principale
durant
exécution
code
java
classes
bytecode
chargées
jvm
fur
mesure
besoins
hiérarchie
héritage
chargement
classes
opéré
ordre
hiérarchique
descendant
i
e
super
classe
racine
vers
classe
courante
exemple
public
class
classa
static
system
out
println
start
loading
classa
public
static
final
int
private
static
int
static
static
system
out
println
system
out
println
public
classa
system
out
println
start
classa
system
out
println
end
classa
public
int
getn
return
static
system
out
println
end
loading
classa
end
classa
public
class
classb
extends
classa
static
system
out
println
start
loading
classb
private
int
x
public
classb
system
out
println
start
classb
x
x
getn
system
out
println
x
system
out
println
end
classb
static
system
out
println
end
loading
classb
end
classb
public
class
class
static
system
out
println
start
loading
class
private
static
int
inity
private
static
int
inity
system
out
println
init
return
public
static
void
main
string
args
system
out
println
start
main
class
classb
b
new
classb
system
out
println
end
main
class
static
system
out
println
end
loading
class
end
class
après
compilation
trois
classes
exécution
commande
java
class
affichera
commentaires
ajoutés
marge
start
loading
class
init
end
loading
class
start
main
class
start
loading
classa
classes
classb
abord
end
loading
classa
start
loading
classb
puis
enfin
classb
end
loading
classb
start
classa
car
super
abord
end
classa
start
classb
classa
classb
end
classb
end
main
class
annexe
communication
entre
java
jni
références
the
java
native
interface
programmer
guide
and
specification
java
sun
com
docs
books
jni
tutoriel
java
sun
com
docs
books
jni
html
jnitoc
html
java
native
interface
specification
v
java
sun
com
docs
guide
jni
spec
jnitoc
html
javah
header
and
stub
file
generator
java
sun
com
javase
docs
technotes
tools
windows
javah
html
pose
problème
appeler
sous
programme
depuis
méthode
java
environnement
unix
solution
met
oeuvre
interface
programmation
jni
java
native
interface
offert
plate
forme
java
jni
ensemble
fonctionnalités
permet
programme
java
fonctionnant
machine
virtuelle
java
jvm
appeler
être
appelé
programme
écrit
autre
langage
typiquement
assembleur
permettant
interfaçage
applications
bibliothèques
natives
mise
oeuvre
jni
accroît
interopérabilité
applications
java
évidemment
détriment
portabilité
bonne
architecture
application
devrait
minimiser
nombre
classes
faisant
référence
méthode
native
suite
supposera
fichier
java
appelant
sous
programme
nomme
myclass
java
fichier
implémentant
sous
programme
nomme
myroutines
développement
application
complète
comporte
étapes
ecrire
programme
java
compiler
javac
myclass
java
produire
fichier
tête
myclass
h
programme
javah
myclass
ecrire
sous
programme
compiler
gcc
o
myroutines
myroutines
pedantic
w
wal
idir
dir
répertoire
installation
jdk
fichiers
include
jni
exemple
fichiers
répartis
deux
répertoires
gcc
o
myroutines
myroutines
pedantic
w
wall
i
usr
lib
jdk
v
include
i
usr
lib
jdk
v
include
linux
application
bibliothèque
sous
programmes
dite
code
natif
dépendante
environnement
hôte
système
exploitation
jeu
instructions
processeur
particulier
exemple
programme
compilé
système
exploitation
donné
code
natif
car
fonctionnera
autre
système
exploitation
produire
bibliothèque
partagée
lib
so
chargeable
programme
java
gcc
wall
shared
o
libmyroutines
so
myroutines
o
avant
toute
première
exécution
spécifier
machine
virtuelle
java
chemin
accès
bibliothèque
setenv
ld
library
path
path
path
désigne
chemin
accès
supposant
celui
ci
répertoire
courant
commande
setenv
ld
library
path
exécuter
programme
java
java
myclass
façon
écrire
programme
java
implémenter
sous
programme
associé
illustrée
ci
après
appel
procédure
considèrera
bout
bout
exemple
déclaration
appel
java
exemple
classe
java
public
class
myclass
declaration
of
an
extern
class
procedure
native
public
static
void
procedure
declaration
of
an
extern
instance
procedure
native
public
void
procedure
test
procedure
public
static
void
main
string
argv
myclass
procedure
myclass
o
new
myclasse
o
procedure
load
the
library
libmyroutines
static
system
loadlibrary
myroutines
commentaires
modificateur
native
indique
agit
procédure
externe
non
écrite
java
nom
procédure
arbitraire
méthode
loadlibrary
va
charger
bibliothèque
libmyroutines
so
mot
clé
static
encapsule
bloc
instructions
lequel
appel
réalisé
permet
exécuter
bloc
dès
chargement
classe
myclass
sans
avoir
besoin
passer
appel
méthode
intermédiaire
prototype
fichier
myclass
h
produit
javah
cf
étape
précédente
spécifie
prototypes
devront
respecter
sous
programmes
écrire
contenu
expurgé
fichier
myclass
h
produit
javah
do
not
edit
this
file
it
is
machine
generated
header
for
class
myclass
jniexport
void
jnicall
java
myclass
procedure
jnienv
jclass
jniexport
void
jnicall
java
myclass
procedure
jnienv
jobject
commentaires
jniexport
jnicall
deux
macros
prédéfinies
jni
faire
communiquer
java
void
spécifie
agit
procédure
java
myclass
procedure
nom
imposé
devra
porter
procédure
correspondant
méthode
nom
procedure
déclarée
programme
java
idem
procedure
deux
paramètres
systématiquement
introduits
tête
liste
paramètres
o
premier
type
jnienv
pointeur
vers
environnement
jnienv
pointeur
vers
structure
contenant
fonctions
interface
machine
virtuelle
java
jvm
o
second
type
jclass
agit
méthode
classe
jobject
agit
méthode
instance
pointeur
vers
descripteur
classe
objet
sorte
this
appel
implémentation
exemple
fichier
myroutines
include
stdio
h
include
myclass
h
jniexport
void
jnicall
java
myclass
procedure
jinienv
penv
jclass
cla
printf
routine
procedure
jniexport
void
jnicall
java
myclass
procedure
jinienv
penv
jobject
obj
printf
routine
procedure
echange
données
entre
java
échange
données
entre
application
java
sous
programme
paramètres
résultat
fonction
suppose
compatibilité
types
correspondants
or
correspondance
systématique
naturelle
entre
types
langage
java
types
langage
caractère
exemple
codé
bits
java
bits
jni
définit
ensemble
types
noms
correspondent
types
java
jni
traite
types
primitifs
types
objets
différemment
correspondance
types
primitifs
directe
voir
tableau
ci
après
car
repose
représentation
machine
données
identique
cas
types
objets
transmission
chaîne
caractères
tableau
fortiori
instance
quelconque
classe
directe
nécessite
conversions
type
paramètre
java
type
objet
ainsi
transmis
sous
programme
sous
forme
pointeur
structure
données
interne
machine
virtuelle
java
organisation
interne
structure
masquée
programmeur
celui
ci
peut
néanmoins
accéder
composantes
sous
jacentes
via
fonctions
utilitaires
offertes
jni
environnement
jnienv
type
primitif
java
type
primitif
côté
description
boolean
jboolean
unsigned
bits
byte
jbyte
signed
bits
char
jchar
unsigned
bits
short
jshort
signed
bits
int
jint
signed
bits
long
jlong
signed
bits
float
jfloat
bits
double
jdouble
bits
suite
considèrera
bout
bout
exemple
déclaration
appel
java
exemple
classe
java
public
class
myclass
declaration
of
an
extern
instance
function
native
public
string
getmessage
int
id
string
prompt
test
procedure
public
static
void
main
string
argv
myclass
o
new
myclasse
system
out
println
o
getmessage
name
load
the
library
libmyroutines
static
system
loadlibrary
libmyroutines
prototype
contenu
expurgé
fichier
myclass
h
produit
javah
do
not
edit
this
file
it
is
machine
generated
header
for
class
myclass
jniexport
jstring
jnicall
java
myclass
getmessage
inienv
jobject
jint
jstring
implémentation
exemple
fichier
myroutines
include
stdio
h
include
myclass
h
jniexport
jstring
jnicall
java
myclass
getmessage
jinienv
penv
jobject
obj
jint
jid
jstring
jprompt
const
char
str
char
buf
get
the
string
from
the
java
string
str
penv
getstringutfchars
penv
jprompt
null
printf
jid
str
don
forget
this
line
penv
releasestringutfchars
penv
jprompt
str
assume
the
user
doesn
type
more
than
char
scanf
buf
return
penv
newstringutf
penv
buf
commentaires
représentations
physiques
chaînes
type
jstring
type
char
identiques
conversion
doit
être
réalisée
rôle
fonctions
getstringutfchars
newstringutf
noter
tous
cas
conversion
caractères
non
codables
ascii
bits
lettres
accentuées
posera
problème
fonction
getstringutfchars
réalisant
allocation
mémoire
dynamique
désallocation
doit
être
obligatoirement
réalisée
avant
fin
sous
programme
rôle
fonction
releasestringutfchars
annexe
plates
formes
java
références
java
platform
standard
edition
api
specification
java
sun
com
javase
docs
api
new
features
and
enhancements
java
sun
com
docs
relnotes
features
html
java
platform
standard
edition
java
sun
com
javase
java
platform
enterprise
edition
java
sun
com
javaee
java
platform
micro
edition
java
sun
com
javame
jdk
tools
and
utilities
java
sun
com
javase
docs
technotes
tools
sun
microsystems
fournit
trois
plates
formes
java
permettant
développement
exécution
programmes
java
java
standard
base
java
ee
java
noter
noms
ceux
employés
versions
sorties
depuis
antérieurement
plates
formes
nommées
respectivement
ee
java
platform
standard
edition
java
plate
forme
framework
java
base
permettant
développer
exécuter
programmes
java
dernière
version
nommée
version
porte
nom
souligner
version
apportait
mise
jour
majeure
rapport
précédente
version
actuelle
plus
récente
date
décembre
version
porte
nom
java
version
java
annoncée
comme
nouvelle
mise
jour
majeure
mi
toujours
attendue
plate
forme
java
délivre
deux
produits
logiciels
principaux
java
runtime
environment
plus
communément
jre
fournit
librairies
machine
java
virtuelle
autres
composantes
nécessaires
exécuter
programmes
java
java
development
kit
plus
communément
jdk
inclut
jre
plus
outils
développement
tels
compilateur
débogueur
nécessaires
utiles
développer
programmes
java
noter
terme
jdk
bien
très
populaire
devenu
imprécis
car
autres
plates
formes
java
java
ee
exemple
comportent
elles
aussi
propre
kit
développement
java
platform
enterprise
edition
java
ee
plate
forme
framework
java
plus
particulièrement
destiné
applications
entreprises
offre
cadre
standard
développer
applications
distribuées
java
platform
micro
edition
java
plate
forme
framework
java
spécialisé
applications
mobiles
plates
formes
java
compatibles
embarquées
nombreux
téléphones
mobiles
pda
façon
plus
spécifique
pourrait
aussi
citer
plateformes
java
card
fournit
environnement
développement
applications
cartes
puce
javafx
créer
rich
internet
applications
annexe
glossaire
trouve
facilement
web
excellentes
définitions
anglais
termes
sigles
produits
référence
informatiques
parmi
sources
possibles
citons
exemple
parmi
encyclopédies
www
wikipedia
org
version
anglaise
plus
complète
parmi
moteurs
spécialisés
recherche
encyclopédies
dictionnaires
glossaires
www
answers
com
voici
glossaire
quelques
termes
sigles
généraux
courants
sigle
terme
définition
commentaire
api
application
programming
bibliothèque
fonctionnalités
communes
interface
courantes
bas
niveau
constitue
interface
entre
couches
basses
couches
applicatives
plus
haut
niveau
exemple
java
sun
com
javase
docs
api
spécifie
api
standard
java
fournies
jdk
framework
cadre
applications
ensemble
cohérent
classes
généralement
abstraites
interfaces
permettant
développement
rapide
applications
fournit
suffisamment
briques
logicielles
pouvoir
produire
application
aboutie
typiquement
spécialisé
type
application
gui
graphical
user
interface
interface
homme
machine
graphique
opposition
interface
ligne
commande
ide
integrated
development
programme
regroupant
ensemble
utilitaires
environment
logiciels
développement
programmes
éditeur
texte
compilateur
débogueur
gestionnaire
versions
aide
production
interfaces
généralement
dédié
seul
langage
programmation
jdk
java
development
kit
voir
chapitre
jfc
java
foundation
classes
cadre
applications
graphiques
ensemble
classes
java
permettant
construire
interfaces
utilisateur
graphiques
portables
contient
notamment
composants
swing
jre
java
runtime
environment
voir
chapitre
ee
java
platform
enterprise
voir
chapitre
edition
java
java
platform
enterprise
java
platform
micro
voir
chapitre
edition
java
java
platform
micro
edition
java
platform
standard
voir
chapitre
edition
java
java
platform
standard
edition
plus
spécifiquement
cadre
applications
professionnelles
java
distribuées
sigle
terme
définition
commentaire
ejb
enterprise
javabeans
technologie
java
offerte
plateforme
java
ee
permettant
créer
composants
distribués
hébergés
serveur
applications
architecture
mvc
utilisé
réaliser
modèle
java
sun
com
products
ejb
jsp
java
server
pages
technologie
java
offerte
plateforme
java
ee
permettant
créer
pages
web
dynamiques
architecture
mvc
utilisé
réaliser
vue
java
sun
com
products
jsp
servlet
technologie
java
offerte
plateforme
java
ee
permettant
étendre
fonctionnalité
serveur
web
accès
bases
données
transactions
e
commerce
architecture
mvc
utilisé
réaliser
contrôleur
java
sun
com
products
servlet
