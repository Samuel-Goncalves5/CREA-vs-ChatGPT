Département
Éducation
Technologie
•
formulaires
HTML
•
JavaScript
CSS
•
PHP
•
MySQL
•
Démarche
conception
Développer
application
PHP
MySQL
Étienne
Vandeput
5.87
Juin
2005
Centre
Formation
l'Informatique
Secondaire
Publier
Web
-
Perfectionnement
Toutes
remarques
améliorer
notes
bienvenues
pouvez
envoyer
etienne.vandeput
fundp.ac.be
Étienne
Vandeput
–
©
CeFIS
2005
2
Publier
Web
-
Perfectionnement
Table
matières
1
FORMULAIRES
HTML
..........................................................................
6
1.1
INTRODUCTION
................................................................................................................................................
6
1.2
FORMULAIRE
ELEMENT
FORM
..............................................................................................................
6
1.2.1
Attributs
importants
.....................................................................................................................................................
7
1.2.2
Contenu
formulaire
................................................................................................................................................
8
1.3
L'ELEMENT
TEXTAREA
.................................................................................................................................
8
1.3.1
1.4
attributs
plus
importants
..................................................................................................................................
8
L'ELEMENT
SELECT
......................................................................................................................................
9
1.4.1
attributs
plus
importants
..................................................................................................................................
9
1.4.2
attributs
plus
importants
l'élément
option
.............................................................................................
10
1.5
L'ELEMENT
INPUT
......................................................................................................................................
11
1.5.1
champ
texte
input
type=
text
.........................................................................................................................
11
1.5.2
champ
texte
spécial
mot
passe
input
type=
password
...............................................................................
11
1.5.3
champ
texte
spécial
référence
fichier
input
type=
file
..............................................................................
12
1.5.4
bouton
simple
input
type=
button
..................................................................................................................
12
1.5.5
bouton
radio
input
type=
radio
......................................................................................................................
12
1.5.6
bouton
d'envoi
input
type=
submit
................................................................................................................
13
1.5.7
bouton
d'envoi
image
input
type=
image
.......................................................................................................
14
1.5.8
bouton
réinitialisation
input
type=
reset
...................................................................................................
14
1.5.9
case
cocher
input
type=
checkbox
..............................................................................................................
15
1.5.10
champ
caché
input
type=
hidden
..............................................................................................................
16
1.6
ATTRIBUTS
VS
METHODES
.............................................................................................................................
16
1.7
GESTION
EVENEMENTS
......................................................................................................................
17
1.7.1
Élément
form
transmission
données
..........................................................................................................
17
1.7.2
Élément
textarea
..................................................................................................................................................
19
1.7.3
Élément
select
.....................................................................................................................................................
20
1.7.4
Élément
input
......................................................................................................................................................
20
1.8
AUTRES
EVENEMENTS
AUTRES
ELEMENTS
...................................................................................................
20
1.9
EXERCICES
.....................................................................................................................................................
20
1.9.1
Rendre
champ
texte
inaccessible
..........................................................................................................................
21
1.9.2
Donner
focus
élément
précis
.........................................................................................................................
21
1.9.3
Permettre
exécution
action
fonction
choix
bouton
radio
............................................................
21
1.10
STYLES
CSS
............................................................................................................................................
22
1.10.1
Feuille
styles
....................................................................................................................................................
22
1.10.2
Règle
.....................................................................................................................................................................
23
1.10.3
Sélecteur
...............................................................................................................................................................
23
1.10.4
Exemples
..............................................................................................................................................................
24
Étienne
Vandeput
–
©
CeFIS
2005
3
Publier
Web
-
Perfectionnement
1.10.5
cascade
............................................................................................................................................................
24
1.10.6
Exercice
................................................................................................................................................................
25
1.10.7
Localisation
feuilles
styles
........................................................................................................................
26
1.11
FORMULAIRES
JAVASCRIPT
...............................................................................................................
27
1.11.1
Scripts
généraux
...................................................................................................................................................
27
1.11.2
Scripts
liés
formulaires
..................................................................................................................................
30
1.12
EXERCICE
.......................................................................................................................................................
35
2
LANGAGE
PHP
...............................................................................................
36
2.1
QUOI
CONSISTE
PHP
..............................................................................................................................
36
2.2
OFFRE
PHP
............................................................................................................................................
37
2.3
BASES
LANGAGE
................................................................................................................................
38
2.3.1
Éléments
syntaxe
..................................................................................................................................................
38
2.3.2
Variables
...................................................................................................................................................................
39
2.3.3
constantes
...........................................................................................................................................................
44
2.3.4
Types
.........................................................................................................................................................................
44
2.3.5
Opérateurs
.................................................................................................................................................................
47
2.3.6
Fonctions
...................................................................................................................................................................
48
2.3.7
Expressions
...............................................................................................................................................................
49
2.3.8
Instructions
contrôle
.............................................................................................................................................
49
2.4
EXERCICE
.......................................................................................................................................................
51
2.5
TABLEAUX
PHP
.................................................................................................................................
54
2.5.1
Créer
tableau
........................................................................................................................................................
54
2.5.2
Fonctions
liées
tableaux
......................................................................................................................................
54
2.6
SESSIONS
.................................................................................................................................................
55
2.6.1
Création
nouvel
utilisateur
................................................................................................................................
55
2.6.2
Authentification
utilisateur
...............................................................................................................................
55
2.6.3
Identificateur
session
............................................................................................................................................
55
2.7
INCLUSIONS
FICHIERS
........................................................................................................................
56
2.8
EXERCICE
.......................................................................................................................................................
58
3
MYSQL
....................................................................................................................
59
3.1
L'ASSOCIATION
ENTRE
MYSQL
PHP
........................................................................................................
59
3.2
CONCEPTION
D'UNE
BASE
DONNEES
....................................................................................................
60
3.3
3.2.1
Schémas
ERA
............................................................................................................................................................
60
3.2.2
Entités
associations
attributs
rôles
cardinalités
...................................................................................................
60
3.2.3
Transformation
tables
...........................................................................................................................................
61
3.2.4
Associations
ternaires
................................................................................................................................................
62
3.2.5
Clés
étrangères
..........................................................................................................................................................
62
TABLES
LEURS
CONTENUS
..................................................................................................................
63
Étienne
Vandeput
–
©
CeFIS
2005
4
Publier
Web
-
Perfectionnement
3.3.1
Structure
d'une
table
..................................................................................................................................................
63
3.3.2
Types
d'informations
.................................................................................................................................................
63
3.4
PRIMITIVES
GESTION
D'UNE
BASE
DONNEES
.................................................................................
65
3.4.1
Accès
BD
tables
..................................................................................................................................
65
3.4.2
Création
gestion
contenu
d'une
BD
..................................................................................................................
66
3.4.3
Gestion
d'une
BD
PHPMyAdmin
.....................................................................................................................
74
3.4.4
Sélection
d'informations
BD
......................................................................................................................
75
3.4.5
Sélections
multi-tables
..............................................................................................................................................
79
3.5
GERER
BD
PHP
............................................................................................................................
85
3.5.1
principe
communication
..................................................................................................................................
85
3.5.2
fonctions
PHP
.....................................................................................................................................................
85
3.6
BILAN
.............................................................................................................................................................
90
3.7
EXERCICE
.......................................................................................................................................................
90
4
APPLICATION
.......................................................................................................
91
4.1
INTRODUCTION
..............................................................................................................................................
91
4.2
ENONCE
RAFFINER
................................................................................................................................
91
4.3
BON
SCHEMA
CONCEPTUEL
......................................................................................................................
92
4.3.1
Première
ébauche
......................................................................................................................................................
92
4.3.2
Améliorations
schéma
..........................................................................................................................................
93
4.4
SCHEMA
LOGIQUE
.....................................................................................................................................
94
4.5
CONSTRUCTION
D'UNE
INTERFACE
...........................................................................................................
95
4.5.1
Utilité
........................................................................................................................................................................
95
4.5.2
Utilisabilité
................................................................................................................................................................
96
4.5.3
Création
modèles
..................................................................................................................................................
96
4.5.4
connexion
...........................................................................................................................................................
105
4.5.5
scripts
................................................................................................................................................................
109
4.6
4.7
BASE
DONNEES
..................................................................................................................................
126
4.6.1
table
eleve
..........................................................................................................................................................
126
4.6.2
table
maitre
.........................................................................................................................................................
127
4.6.3
table
lieu
.............................................................................................................................................................
127
4.6.4
table
stage
...........................................................................................................................................................
128
STRUCTURE
SITE
....................................................................................................................................
128
Étienne
Vandeput
–
©
CeFIS
2005
5
Publier
Web
-
Perfectionnement
1
formulaires
HTML
1.1
Introduction
Depuis
premiers
développements
HTML
inclut
éléments1
permettent
communication
entre
client
Web
serveur
capable
recevoir
informations
client
stocker
et/ou
d'effectuer
traitements
dépendant
réalisation
sites
Web
interactifs
création
pages
Web
dynamiques
demandent
communication
possible
Dès
lors
connaissance
éléments
déterminante
car
constituent
quelque
sorte
l'interface
communication
entre
l'internaute
applications
développées
serveurs
chapitre
intéresserons
chacun
éléments
leurs
attributs
possibles
aussi
informations
vont
être
véhiculées
vers
serveur
ainsi
'
forme
applications
côté
serveur
développées
langage
qualifié
langage
script
PHP
langage
script
choisi2
illustrer
mécanisme
construction
dynamique
pages
Web
langage
capable
communiquer
d'exploiter
données
gérées
nombreux
SGBD3
intéresserons
applications
exploitant
bases
données
gérées
SGBD
MySQL
parce
combinaison
deux
outils
langage
script
SGBD
semble
aujourd'hui
plus
fréquente
parmi
nombreuses
combinaisons
possibles
C'est
aussi
celle
apparaît
comme
mieux
adaptée
applications
exploitant
Internet
technologies
bases
données
gérées
via
sites
Web
généralement
particulières
comprennent
peu
d'enregistrements
rapports
certains
autres
types
d'application
MySQL
adapté
type
bases
données
sens
qu'il
offre
juste
services
qu'il
faut
l'efficacité
souhaitée
observation
importante
fait
confier
l'exécution
scripts
serveurs
n'exclut
possibilité
client
d'exécuter
scripts
localement
C'est
cas
exemple
lorsqu'on
souhaite
faire
valider
données
avant
envoyer
traitements
parfois
répartis
entre
client
serveur
l'objet
ouvrage
s'intéresser
scripts
côté
serveur
1.2
formulaire
élément
form
formulaire
élément
rend
possible
fourniture
d'un
certain
nombre
données
l'exécution
d'une
action
serveur
simple
exemple
avoir
accès
certains
services
Web
commande
ligne
cours
ligne
homebanking
…
devez
généralement
fournir
identificateur
login
mot
passe
password
fourniture
informations
fait
travers
d'un
formulaire
zones
compléter
fonction
données
reçues
l'application
construit
dynamiquement
page
Web
dépendant
données
reçues
cas
agit
page
personnalisée
voir
ci-après
1
p
h1
form
éléments
sens
HTML
2
concerne
langages
script
développeur
choix
cependant
langages
utilisables
gratuitement
pouvant
être
distribués
connaissent
plus
grand
succès
Parmi
PHP
Python
moindre
mesure
Perl
semblent
mieux
placés
hit
parade
développeurs
3
Système
Gestion
Bases
Données
Étienne
Vandeput
–
©
CeFIS
2005
6
Publier
Web
-
Perfectionnement
HTML
formulaire
correspond
l'élément
form
élément
contient
généralement
plusieurs
éléments
interactifs
allons
décrire
suite
champs
texte
boutons
cases
cocher
…
éléments
interactifs
permettent
d'encoder
sélectionner
données
transmettre
serveur
Comme
verrons
peut
également
contenir
éléments
cachés
aussi
données
transmettre
serveur
document
HTML
peut
contenir
plusieurs
formulaires4
ceux-ci
peuvent
être
imbriqués
1.2.1
Attributs
importants
1.2.1.1
action
attribut
obligatoire
valeur
URL5
adresse
absolue
relative
précise
script
doit
recevoir
données
être
exécuté
serveur
général
script
but
créer
page
HTML
renvoyée
client
Web
1.2.1.2
method
'
deux
valeurs
possibles
get
post
méthode
get
concatène
données
fin
l'URL
script
alors
méthode
post
envoie
données
corps
requête
méthode
post
préférable
tout
série
raisons
notamment
confidentialité
1.2.1.3
name
attribut
permet
nommer
formulaire
n'est
d'aucune
utilité
serveur
peut
servir
script
local
4
Encore
faut-il
trouver
illustration
intéressante
possibilité…
5
Beaucoup
serveurs
sensibles
casse
noms
fichiers
dossiers
convient
d'être
prudent
l'écriture
l'URL
verrons
également
qu'une
URL
vide
sens
certaines
circonstances
Étienne
Vandeput
–
©
CeFIS
2005
7
Publier
Web
-
Perfectionnement
l'illustration
précède
voit
code
engendré
Macromedia
Dreamweaver
MX
lors
l'insertion
d'un
formulaire
document
HTML
nom
défaut
donné
l'action
défaut
vide
méthode
choisie
post
1.2.2
Contenu
formulaire
Tous
attributs
n'ont
aucun
sens
formulaire
'
contenu
L'élément
form
élément
va
contenir
d'autres
porteurs
d'informations
d'instructions
trouve
trois
types
d'éléments
formulaire
•
textarea
définir
zone
texte
•
select
sélectionner
information
liste
•
input
tous
autres
types
d'entrées
éléments
allons
décrire
maintenant
1.3
L'élément
textarea
emploie
élément
lorsqu'il
plusieurs
lignes
texte
entrer
Ainsi
lorsqu'on
souhaite
réaliser
application
Webmail
clair
zone
rédaction
message
doit
s'étendre
plusieurs
lignes
valeurs
défaut
4
lignes
40
caractères
attributs
suivent
permettent
néanmoins
modifier
valeurs
élément
nécessite
balise
initiale
balise
finale
texte
défaut
peut
trouver
entre
deux
balises
noter
texte
n'est
limité
taille
peut
révéler
assez
gênant
perspective
stockage
base
données
exemple
contrôle
peut
toutefois
être
effectué
script
local
script
PHP
niveau
serveur
1.3.1
attributs
plus
importants
1.3.1.1
name
zone
texte
doit
porter
nom
veut
l'exploiter
PHP
nom
correspondra
nom
d'une
variable
PHP
C'est
moment
souvenir
langage
sensible
casse
certains
objets
interactifs
portent
nom
PHP
prend
compte
dernier
noms
doivent
commencer
lettre
caractère
_
suivi
lettres
chiffres
caractères
_
1.3.1.2
rows
attribut
précise
hauteur
zone
texte
n'en
limite
taille
Étienne
Vandeput
–
©
CeFIS
2005
8
Publier
Web
-
Perfectionnement
1.3.1.3
cols
attribut
spécifie
nombre
colonnes
visibles
correspond
fort
approximativement
nombre
caractères
Voici
exemple
code
interprétation
navigateur
form
name=
form1
method=
post
action=
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
Objectifs
cours
/strong
/font
/p
textarea
name=
textarea
cols=
60
rows=
10
/textarea
/form
1.4
L'élément
select
élément
défini
menu
déroulant
lequel
l'utilisateur
va
pouvoir
sélectionner
plusieurs
informations
informations
définies
grâce
éléments
option
inclus
entre
deux
balises
l'élément
select
Notez
chacun
éléments
décrits
jusqu'ici
peut
être
vu
comme
bloc
contenant
éventuellement
d'autres
blocs
L'élément
form
contient
éléments
textarea
select
…
L'élément
bloc
select
contient
éléments
option
formulaire
peut
évidemment
contenir
plusieurs
éléments
select
PHP
crée
variable
tableau
cas
sélection
multiple
chaque
élément
select
variable
tableau
porte
nom
l'élément
option
select
textarea
form
1.4.1
attributs
plus
importants
1.4.1.1
name
raisons
précèdent
attribut
évidemment
indispensable
Attention
cas
sélection
multiple
possible
nom
doit
terminer
crochets
1.4.1.2
multiple
attribut
autorise
sélections
multiples
liste
Étienne
Vandeput
–
©
CeFIS
2005
9
Publier
Web
-
Perfectionnement
1.4.1.3
size
attribut
spécifie
nombre
d'items
visibles
liste
absence
seul
item
visible
1.4.2
attributs
plus
importants
l'élément
option
élément
n'est
directement
objet
formulaire
composante
l'élément
select
nécessite
balise
initiale
balise
finale
1.4.2.1
value
L'attribut
précise
valeur
envoyée
script
nécessairement
celle
affichée
liste
effet
plus
simple
parfois
d'envoyer
valeurs
techniques
plus
simples
manipuler
tout
affichant
choix
compréhensibles
1.4.2.2
selected
options
attribut
correspondent
valeurs
présélectionnées
n'est
nécessaire
qu'il
cas
d'une
sélection
simple
s'il
plusieurs
seule
dernière
prise
compte
Lorsque
liste
déroulante
c'est
première
option
cas
échéant
l'option
présélectionnée
apparaît
Voici
deux
exemples
incluant
types
d'éléments
concernés
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
Type
cours
/strong
/font
/p
select
name=
typeCours
size=
4
option
value=
0
selected
inconnu
/option
option
value=
1
pr
&
eacute
senciel
/option
option
value=
2
&
agrave
distance
/option
option
value=
3
semi-pr
&
eacute
senciel
/option
/select
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
Type
cours
/strong
/font
/p
select
name=
typeCours
option
value=
0
selected
inconnu
/option
option
value=
1
pr
&
eacute
senciel
/option
option
value=
2
&
agrave
distance
/option
option
value=
3
semi-pr
&
eacute
senciel
/option
/select
Étienne
Vandeput
–
©
CeFIS
2005
10
Publier
Web
-
Perfectionnement
1.5
L'élément
input
élément
correspond
panoplie
d'objets
formulaire
C'est
l'attribut
type
élément
input
distingue
allons
examiner
différents
objets
uns
après
autres
formulaire
peut
évidement
contenir
plusieurs
éléments
input
L'élément
input
'
qu'une
seule
balise
1.5.1
champ
texte
input
type=
text
attribut
définit
champ
texte
d'une
seule
ligne
PHP
crée
variable
portant
nom
champ
valeur
l'information
dernier
contient
attributs
courants
1.5.1.1
name
voir
ci-dessus
1.5.1.2
value
valeur
défaut
champ
texte
1.5.1.3
size
taille
approximative
d'affichage
champ
texte
1.5.1.4
maxlength
nombre
caractères
admis
1.5.1.5
accesskey
crée
raccourci-clavier
accéder
directement
champ
Voici
petit
exemple
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
u
/u
&
eacute
nomination
/strong
/font
/p
p
input
name=
denomination
type=
text
size=
50
maxlength=
80
accesskey=
/p
raccourci-clavier
alt-D
premettra
d'accéder
directement
champ
texte
L'attribut
accesskey
existe
aussi
éléments
textarea
select
1.5.2
champ
texte
spécial
mot
passe
input
type=
password
L'attribut
définit
champ
texte
particulier
car
l'information
introduite
champ
n'est
lisible
l'écran
faut
toutefois
savoir
mot
passe
transmis
clair
serveur
possible
demander
PHP
encryptage
suite
Comme
champ
texte
ordinaire
PHP
crée
variable
portant
nom
champ
attributs
courants
mêmes
ceux
champ
texte
normal
Étienne
Vandeput
–
©
CeFIS
2005
11
Publier
Web
-
Perfectionnement
1.5.3
champ
texte
spécial
référence
fichier
input
type=
file
champ
texte
particulier
l'information
référence
absolue
locale
d'un
fichier
l'on
veut
transférer
serveur
L'usage
fonctionnalité
nécessite
méthode
d'envoi
formulaire
post
l'attribut
enctype
parlé
présent
comme
valeur
multipart/form-data
champ
accompagné
d'un
bouton
Parcourir
ouvre
fenêtre
l'explorateur
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
&
eacute
&
eacute
verser
/strong
/font
/p
p
input
type=
file
name=
telechargement
/p
attributs
courants
sensiblement
mêmes
n'est
l'attribut
value
n'est
utilisé
1.5.4
bouton
simple
input
type=
button
L'attribut
définit
bouton
simple
L'intérêt
type
bouton
réside
l'exécution
scripts
locaux
Aucune
donnée
n'est
envoyée
serveur
lorsqu'un
tel
bouton
activé
mentionnera
attributs
1.5.4.1
name
nom
bouton
1.5.4.2
value
étiquette
1.5.4.3
disabled
état
désactivé
1.5.4.4
accesskey
crée
raccourci-clavier
accéder
directement
bouton
input
name=
validation
type=
button
id=
validation
value=
Validation
donn
&
eacute
disabled
1.5.5
bouton
radio
input
type=
radio
boutons
radio
utilisés
groupe
seul
d'entre
peut
être
actif
fois
groupe
boutons
porte
nom
celui
variable
PHP
contenant
valeur
bouton
sélectionné
Citons
comme
attributs
1.5.5.1
name
nom
groupe
boutons
Étienne
Vandeput
–
©
CeFIS
2005
12
Publier
Web
-
Perfectionnement
1.5.5.2
value
valeur
bouton
information
transmise
1.5.5.3
checked
sélection
bouton
1.5.5.4
accesskey
raccourci-clavier
exemple
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
Type
d'enseignement
/strong
/font
/p
p
input
type=
radio
name=
type
value=
1
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
Général
/font
br
input
type=
radio
name=
type
value=
2
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
Technique
/font
br
input
type=
radio
name=
type
value=
3
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
Professionnel
/font
/label
/p
1.5.6
bouton
d'envoi
input
type=
submit
Grâce
attribut
bouton
déclencheur
l'envoi
données
script
décrit
l'attribut
action
l'élément
form
formulaire
peut
contenir
plusieurs
boutons
d'envoi
cas
c'est
script
choisir
traitement
effectuer
fonction
valeur
bouton
Comme
d'habitude
PHP
créera
variable
portant
nom
bouton
attributs
importants
1.5.6.1
name
nom
bouton
nécessaire
création
variable
1.5.6.2
value
valeur
bouton
nécessaire
éventuel
choix
script
1.5.6.3
accesskey
caractère
raccourci-clavier
d'accès
rapide
bouton
input
name=
envoi
type=
submit
id=
envoi
value=
Envoyer
Étienne
Vandeput
–
©
CeFIS
2005
13
Publier
Web
-
Perfectionnement
1.5.7
bouton
d'envoi
image
input
type=
image
bouton
d'envoi
image
joue
rôle
bouton
d'envoi
classique
différence
réside
fait
source
l'image
doit
être
fournie
plus
coordonnées
précises
l'endroit
l'on
cliqué
également
envoyées
noms
deux
variables
constitués
nom
bouton
suivi
respectivement
symboles
_x
_y
attributs
retenir
1.5.7.1
name
nom
bouton
image
1.5.7.2
src
localisation
l'image
1.5.7.3
alt
texte
alternatif
l'image
peut
être
affichée
1.5.7.4
accesskey
caractère
raccourci-clavier
éventuel
d'accès
bouton
input
name=
cathedrale
type=
image
id=
cathedrale
src=
/images/cathedrale.jpg
alt=
Saint-Aubain
width=
100
height=
80
border=
0
1.5.8
bouton
réinitialisation
input
type=
reset
bouton
réinitialisation
permet
chaque
objet
formulaire
reprendre
valeur
initiale
'
aucune
information
envoyée
serveur
lorsque
celui-ci
activé
attributs
essentiels
1.5.8.1
name
nom
bouton
1.5.8.2
value
étiquette
1.5.8.3
accesskey
caractère
raccourci-clavier
input
name=
initialisation
type=
reset
id=
initialisation
value=
R
&
eacute
tablir
Étienne
Vandeput
–
©
CeFIS
2005
14
Publier
Web
-
Perfectionnement
1.5.9
case
cocher
input
type=
checkbox
L'attribut
fait
objet
case
cocher
possible
nécessaire
grouper
cases
cocher
PHP
crée
variable
chaque
case
cocher
tableau
groupe
cases
cocher
case
moins
cases
cas
d'un
groupe
doit
être
cochée
variable
tableau
créé
programmation
devra
veiller
s'assurer
qu'une
telle
variable
tel
tableau
existe
attributs
importants
1.5.9.1
name
nom
case
celui
variable
cas
d'un
groupement
faut
donner
nom
chaque
case
faire
suivre
nom
crochets
1.5.9.2
value
valeur
transmise
script
correspond
l'affichage
1.5.9.3
checked
signaler
case
cochée
1.5.9.4
accesskey
caractère
raccourci-clavier
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
strong
Cours
choisis
/strong
/font
/p
p
strong
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
input
type=
checkbox
name=
cours
value=
1
/font
/strong
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
Math
/font
/p
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
input
type=
checkbox
name=
cours
value=
2
Fran
&
ccedil
ais
/font
/p
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
input
type=
checkbox
name=
cours
value=
3
Physique
/font
/p
p
font
size=
2
face=
Verdana
Arial
Helvetica
sans-serif
input
type=
checkbox
name=
cours
value=
4
Histoire
/font
/p
Étienne
Vandeput
–
©
CeFIS
2005
15
Publier
Web
-
Perfectionnement
1.5.10
champ
caché
input
type=
hidden
L'attribut
confère
ici
champ
statut
caché
L'intérêt
réside
possibilité
transmettre
serveur
valeurs
disponibles
niveau
navigateur
aussi
pallier
caractère
sans
état
http
variable
portant
nom
champ
créée
attributs
1.5.10.1
name
nom
champ
caché
1.5.10.2
value
valeur
transmettre
input
name=
login
type=
hidden
id=
login
value=
eva
1.6
Attributs
vs
méthodes
Sans
entrer
grand
détail
rappellerons
JavaScript
langage
script
interprété
client
navigateur
Web
langage
langage
orienté
objet
6
appuie
Document
Object
Model
DOM
développé
consortium
w37
Parmi
objets
trouve
bien
sûr
formulaires
tous
objets
peuvent
eux-mêmes
contenir
JavaScript
définit
méthodes
possible
invoquer
objets
intéresserons
peu
méthodes
donné
programmation
JavaScript
sujet
principal
ouvrage
revanche
besoin
propriétés
événements
détectables
niveau
objets
car
traduisent
attributs
éléments
correspondants
titre
exemple
voici
formulaire
quelques
attributs
méthodes
disponibles
Quelques
attributs
possibles
élément
formulaire
point
vue
HTML
•
Propriétés
name
nom
formulaire
action
adresse
script
serveur
exécuter
method
méthode
d'appel
script
get
post
•
Événements
onSubmit
détecter
soumission
formulaire
onReset
détecter
réinitialisation
existe
bien
autres
moins
spécifiques
id
class
…
propriétés
onclick
ondblclick
…
événements
Quelques
méthodes
possibles
objet
formulaire8
point
vue
JavaScript
submit
déclencher
l'action
formulaire
reset
réinitialiser
données
formulaire
valeurs
défaut
6
signification
qualificatif
particulier
JavaScript
mériterait
large
débat
mèneront
7
http
//w3.org
8
pourrait
trouver
script
instruction
genre
if
valide
form.submit
autant
valide
désigne
variable
booléenne
form
formulaire
Étienne
Vandeput
–
©
CeFIS
2005
16
Publier
Web
-
Perfectionnement
Après
avoir
illustré
propriétés
éléments
correspondant
objets
formulaire
consacrons
section
suivante
examiner
événements
peuvent
également
être
associés
sous
forme
attributs
1.7
gestion
événements
attributs
correspondant
événements
peuvent
révéler
utiles
contexte
d'utilisation
scripts
locaux
voici
description
fonction
éléments
concernés
1.7.1
Élément
form
transmission
données
1.7.1.1
onsubmit
attribut
indique
script
exécuter
localement
avant
l'envoi
données
exemple
certain
nombre
vérifications
script
doit
renvoyer
valeur
booléenne
détermine
l'envoi
non
données
déclenché
lorsque
l'utilisateur
clique
bouton
d'envoi
voir
plus
loin
valeur
doit
être
constituée
mot
return
suivi
nom
script
exécuter
Exemple
onsubmit
=
return
verification
form
action=
test.php
method=
post
name=
formulaire
onSubmit=
return
verification
script
doit
figurer
document
partie
entête
partie
corps
tant
contenu
élément
script
élément
possède
attribut
language
précise
quel
langage
script
rédigé
autrement
dit
comment
doit
être
interprété
attribut
type
précise
quel
encodage
utilisé
script
language=
JavaScript
type=
text/JavaScript
function
verification
{
if
document.forms
``
formulaire
.elements
``
denomination
.value==
{
alert
``
n'avez
fourni
dénomination
cours
return
false
}
if
document.forms
``
formulaire
.elements
``
objectifs
.value==
{
alert
``
n'avez
fourni
d'objectifs
cours
return
false
}
else
{
return
true
}
}
/script
Comme
donnons
trop
détails
propos
JavaScript
apportons
script
quelques
commentaires
compose
double
test
vérification
remplissage
rubriques
Dénomination
Objectifs
fonction
argument
renvoie
valeur
booléenne
return=…
alert
fonction
prédéfinie
affiche
boîte
dialogue
avertissement
prend
comme
argument
chaîne
caractère
Notez
JavaScript
langage
faiblement
typé
typage
valeurs
variables
implicite
Observez
aussi
syntaxe
écriture
structure
alternative
Étienne
Vandeput
–
©
CeFIS
2005
17
Publier
Web
-
Perfectionnement
point
plus
délicat
concerne
accès
informations
page
JavaScript
utilise
modèle
objet
document
DOM
accéder
informations
objet
principal
document
contient
tableau
indexé
forms
éventuels
formulaires
Chaque
formulaire
contient
tableau
indexé
éléments
elements
accéder
valeur
éléments
utilise
propriété
value
Notez
encore
symbole
comparaison
==
non
=
possible
accéder
item
tableau
fournissant
numéro
ordre
commençant
0
exemple
formulaire
seul
formulaire
forms
0
Voici
maintenant
code
fichier
test.php
dernier
contient
action
effectuer
valeur
renvoyée
script
true
savoir
affichage
message
réussite
données
transmises
faire
commandes
élémentaires
PHP
nécessaires
feuille
style
cefis.css
attachée
page
test.php
html
head
title
Fourniture
données
serveur
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
/head
body
h4
Ex
&
eacute
cution
code
JavaScript
/h4
p
class=
important1
Test
concluant
/p
p
donn
&
eacute
suivantes
&
eacute
&
eacute
envoy
&
eacute
/p
p
class=
important2
&
eacute
nomination
cours
/p
p
php
echo
_POST
``
denomination
/p
p
class=
important2
Objectifs
cours
/p
Étienne
Vandeput
–
©
CeFIS
2005
18
Publier
Web
-
Perfectionnement
p
php
echo
_POST
``
objectifs
/p
/body
/html
exemple
permet
découvrir
tout
petit
peu
PHP
Lorsque
navigateur
rencontre
suite
symboles
php
sait
doit
interpréter
suite
comme
PHP
cela
tant
rencontré
deux
symboles
Comme
doutez9
commande
echo
commande
affichage
autre
chose
importante
observer
partir
version
4
PHP
crée
variable
prédéfinie10
sous
forme
tableau
appelant
_POST11
contenant
valeurs
transmises
serveur
méthode
post
accède
composante
tableau
numéro
ordre
nom
attribut
name
élément
contenant
information
concernée
1.7.1.2
onreset
attribut
indique
script
exécuter
localement
avant
réinitialisation
formulaire
valeur
attribut
syntaxe
identique
celle
l'attribut
onsubmit
1.7.2
Élément
textarea
Voici
quelques-uns
événements
attributs
script
élément
textarea
1.7.2.1
onfocus
script
associé
exécuté
lorsque
zone
texte
recevra
focus12
9
Rappelez-vous
création
fichiers
batch
DOS
10
crée
plein
autres
11
PHP
toutes
variables
nom
commençant
symbole
12
objet
reçoit
focus
quand
utilisateur
clique
dessus
bien
accède
touche
tabulation
raccourci-clavier
Étienne
Vandeput
–
©
CeFIS
2005
19
Publier
Web
-
Perfectionnement
1.7.2.2
onblur
agit
ici
perte
focus
élément
1.7.2.3
onselect
événement
produit
tout
partie
texte
zone
sélectionné
1.7.2.4
onchange
Celui-ci
produit
cas
perte
focus
autant
valeur
zone
texte
modifiée
1.7.3
Élément
select
Parmi
événements
associables
élément
select
trouve
onfocus
onblur
onchange
1.7.4
Élément
input
1.7.4.1
Champs
texte
texte
spécial
mot
passe
texte
spécial
référence
fichier
événements
intéressants
associer
onfocus
onblur
onselect
onchange
1.7.4.2
Bouton
simple
envoi
réinitialisation
radio
case
cocher
événements
associer
onfocus
onblur
onchange
1.7.4.3
Bouton
envoi
image
événements
associer
onfocus
onblur
1.8
Autres
événements
autres
éléments
utilisez
éditeur
spécialisé
constaterez
peut-être
propose
beaucoup
autres
événements
quelques
objets
formulaire
supplémentaires
Parmi
événements
citons
exemple
onclick
ondblclick
onmousedown
onmouseup
onmouseover
onmouseout
onmousemove
onkeypress
onkeydown
onkeyup…
éléments
button
fieldset
label
optgroup
existent
également
offrent
nouvelles
possibilités
correctement
interprétés
tous
navigateurs
exemple
élément
button
permet
combiner
texte
image
élément
fieldset
permet
regrouper
champs
sous
titre
grâce
élément
legend
lequel
élément
fieldset
doit
commencer
élément
label
permet
attribuer
étiquette
objet
véritable
intérêt
personnes
malvoyantes
utilisant
navigateurs
couplés
système
sonore
élément
optgroup
sert
regrouper
éléments
options
intérieur
élément
select
permet
création
menus
cascade
1.9
Exercices
Écrire
scripts
JavaScript
•
rendre
champ
texte
inaccessible
•
donner
focus
élément
précis
•
permettre
exécution
action
fonction
choix
bouton
radio
Étienne
Vandeput
–
©
CeFIS
2005
20
Publier
Web
-
Perfectionnement
1.9.1
Rendre
champ
texte
inaccessible
suffit
faire
perdre
focus
objet
moment
reçoit
input
type=
text
name=
couleur
onFocus=
this.blur
Comme
plupart
langages
objets
référence
objet
courant
this
autre
solution
consiste
donner
objet
attribut
readonly
input
type=
text
name=
couleur
readonly
effets
graphiques
légèrement
différents
mesure
premier
cas
point
insertion
apparaît
avant
disparaître
1.9.2
Donner
focus
élément
précis
action
réalisée
chargement
page
attribut
onload
élément
body
utilisé
body
onLoad=
document.form1.nom.focus
form
name=
form1
method=
post
action=
p
Nom
input
type=
text
name=
nom
/p
/form
/body
1.9.3
Permettre
exécution
action
fonction
choix
bouton
radio
problème
plus
délicat
agit
identifier
bouton
radio
sélectionné
compléter
action
conséquence
première
fonction
but
renvoyer
index
correspondant
bouton
tableau
boutons
radios
concernés
index
commence
0
seconde
fonction
fixe
action
valeur
bouton
provoque
soumission
formulaire
script
language=
JavaScript
type=
text/JavaScript
function
valeurChoix
groupeBouton
{
for
var
i=0
i
groupeBouton.length
i++
{
if
groupeBouton
i
.checked
{
return
i
}
}
}
function
choisirAction
formulaire
script
{
var
i=valeurChoix
script
formulaire.action=script
i
.value
formulaire.submit
}
/script
form
name=
form1
method=
post
action=
p
Nom
Étienne
Vandeput
–
©
CeFIS
2005
21
Publier
Web
-
Perfectionnement
input
type=
text
name=
nom
/p
p
strong
Choix
script
/strong
/p
p
label
input
name=
choix
type=
radio
value=
action1.php
checked
action
&
deg
1
/label
br
label
input
type=
radio
name=
choix
value=
action2.php
action
&
deg
2
/label
br
label
input
type=
radio
name=
choix
value=
action3.php
action
&
deg
3
/label
/p
p
input
type=
button
name=
run
value=
Ex
&
eacute
cuter
onClick=
choisirAction
this.form
this.form.choix
br
/p
/form
Voici
quoi
ressemble
interface
choix
boutons
avant
clic
bouton
simple
permet
sélectionner
script
exécution
demandée
serveur
1.10
styles
CSS
section
peu
hors
contexte
trouve
toutefois
utilité
mesure
présente
langage
plus
interprété
navigateurs
CSS
signifie
Cascading
Style
Sheets
feuilles
style
cascade
langage
objectif
paramétrer
finement
mise
page
mise
forme
éléments
document
HTML
convient
comprendre
principes
notamment
fonctionnement
cascade
également
utile
familiariser
syntaxe
langage
utilisation
CSS
permet
réfléchir
stratégies
efficaces
conception
prenant
compte
dès
départ
possibles
mises
jour
1.10.1
Feuille
styles
concept
feuille
styles
concept
abstrait
trouve
concrétisation
sous
multiples
formes
peut
définir
feuille
styles
comme
ensemble
règles
utilisées
navigateur
mise
page
forme
différents
éléments
sens
HTML
règles
définies
•
défaut
Étienne
Vandeput
–
©
CeFIS
2005
22
Publier
Web
-
Perfectionnement
•
l'internaute
•
l'auteur
verrons
plus
loin
quelles
priorités
navigateur
accorde
différents
niveaux
1.10.2
Règle
règle
compose
sélecteur
d'éléments
suivi
déclaration
paramètres
appliquer
syntaxe
suivante
sélecteur
{
déclaration
}
Examinons
abord
syntaxe
déclaration
compose
plusieurs
ensembles
constitués
mot-clé
valeur
mot-clé
valeur
mot-clé
valeur
*
existe
52
mots-clés
version
CSS1
censés
respecter
tous
navigateurs
Chaque
mot-clé
séparé
valeur
double
point
ensemble
termine
point-virgule
Toutes
valeurs
acceptables
1.10.2.1
Exemples
color
red
color
#
FF0000
font-family
Arial
color
red
font-size
18px
1.10.3
Sélecteur
sélecteurs
paramètres
autorisent
navigateur
sélectionner
règles
mise
forme
applicables
éléments
HTML
distingue
sélecteurs
simples
sélecteurs
contextuels
1.10.3.1
Sélecteur
simple
sélecteur
simple
permet
sélectionner
éléments
trois
manières
•
portent
nom
•
mêmes
valeurs
certains
attributs
précis
class
id
•
portent
nom
mêmes
valeurs
certains
attributs
précis
class
id
1.10.3.2
Exemples
•
nom
p
Tous
éléments
p
document
HTML
tels
p
p
chapeau
…
•
class
=
rouge
p
id
=
valeur
attribut
class
.important
attention
point
initial
Tous
éléments
quel
nom
attribut
class
valant
``
important
tels
class=
important
…
…
•
valeur
attribut
id
#
titre
attention
dièse
initial
Tous
éléments
quel
nom
attribut
id
valant
``
titre
tels
id=
titre
…
…
•
nom
valeur
attribut
class
attribut
id
p.important
td
#
titre
Étienne
Vandeput
–
©
CeFIS
2005
23
Publier
Web
-
Perfectionnement
Tous
éléments
p
td
attribut
class
id
valant
``
important
``
titre
p
class=
important
…
td
id=
titre
…
…
1.10.3.3
Sélecteur
contextuel
sélecteurs
contextuels
permettent
sélectionner
tous
éléments
certain
contexte
syntaxe
relativement
simple
puisqu
sélecteur
contextuel
compose
plusieurs
sélecteurs
simples
séparés
espaces
bon
comprendre
intérêt
prendre
compte
principe
d'emboîtement
éléments
HTML
éléments
HTML
emboîtés
Cela
signifie
peuvent
contenir
autres
éléments
p
h1
strong
ul
…
sélecteur
contextuel
fait
référence
élément
contenu
plusieurs
autres
possibilité
utiliser
sélecteurs
contextuels
donne
grande
souplesse
mise
forme
Ainsi
exemple
paragraphes
peuvent-ils
être
formatés
différemment
tableau
calques
hors
tout
contexte
1.10.3.4
Exemples
h4
strong
désigne
éléments
strong
contenus
élément
h4
h4
Titre
strong
gras
/strong
/h4
Autres
exemples
h4
strong
em
encore
td
.important
Attention
p.important
sélecteur
simple
différent
p
.important
sélecteur
contextuel
1.10.4
Exemples
Voici
quelques
exemples
règles
Notez
règles
texte
elles
peuvent
être
éditées
simple
éditeur
texte
reste
savoir
quel
endroit
peut
définir
p
{
color
red
}
contenus
paragraphes
rouge
h1
{
font-size:20px
font-family
Verdana
}
titres
niveau
1
taille
20
pixels
police
Verdana
p.important
{
font-weight
bold
}
paragraphes
qualifiés
``
important
gras
div
p
h1
.important
{
color
red
}
paragraphes
calques
titres
niveau
1
tous
éléments
qualifiés
``
important
rouge
td
p.mineur
{
color=
#
333333
font-size:15px
}
paragraphes
qualifiés
``
mineur
cellules
tableau
gris
taille
15
pixels
faut
signaler
plupart
éditeurs
HTML
donnent
concepteur
possibilité
créer
règles
manière
dynamique
sans
avoir
écrire
code
1.10.5
cascade
Rappelons
feuille
style
compose
tant
règles
définies
niveau
navigateur
feuille
style
défaut
celles
pourraient
résulter
choix
internaute
préférences
niveau
navigateur
évidemment
celles
concepteur
page
Étienne
Vandeput
–
©
CeFIS
2005
24
Publier
Web
-
Perfectionnement
autre
part
règle
souvent
partielle
définit
tous
paramètres
éléments
considérés
établir
ensemble
paramètres
navigateur
doit
tenir
compte
certaine
hiérarchie
Enfin
comme
règles
peuvent
être
définies
plusieurs
endroits
convient
déterminer
cas
règles
concernant
mêmes
éléments
quelle
celle
doit
emporter
verrons
cas
proximité
définition
rapport
élément
compte
1.10.5.1
Algorithme
comprendre
algorithme
faut
rappeler
éléments
HTML
emboîtés
élément
contient
tous
autres
html
•
Rechercher
toutes
déclarations
concernent
l'élément
propriété
concernée
S'il
'
prendre
considération
déclarations
héritées
emboîtement
S'il
'
toujours
prendre
considération
valeurs
défaut
•
Trier
déclarations
poids
explicites
certaines
règles
peuvent
être
déclarées
prioritaires
concepteur
internaute
•
Trier
origine
auteur
internaute
agent
•
Trier
spécificité
sélecteur
dernier
point
mérite
explication
agit
calculer
poids
règles
encore
possible
trier
manière
suit
agit
concaténer
trois
nombres
suivants
•
nombre
d'attributs
id
sélecteur
ex
1
•
nombre
d'attributs
class
sélecteur
ex
1
•
nombre
éléments
ex
3
exemple
poids
113
règle
poids
plus
élevé
emporte
1.10.6
Exercice
1.10.6.1
Énoncé
toutes
déclarations
suivent
valables
élément
li
quel
sélecteur
déclaration
retenue
ol
ul
li.rouge
{
…
}
ul
li
{
…
}
li
{
…
}
ol
ul
li
{
…
}
#
titre
{
…
}
li.rouge
{
…
}
Imaginez
partie
syntaxe
élément
emboîtements
situation
plausible
1.10.6.2
Correction
ol
ul
li.rouge
{
…
}
013
Étienne
Vandeput
–
©
CeFIS
2005
25
Publier
Web
-
Perfectionnement
ul
li
{
…
}
002
li
{
…
}
001
ol
ul
li
{
…
}
003
#
titre
{
…
}
100
li.rouge
{
…
}
011
définition
#
titre
prise
compte
assez
logique
dit
agit
élément
très
particulier
puisqu
appelé
titre
Voici
structure
rend
toutes
définitions
plausibles
ol
…
ul
…
li
class
=
rouge
id
=
titre
…
/li
…
/ul
…
/ol
1.10.7
Localisation
feuilles
styles
règles
feuille
styles
peuvent
retrouver
plusieurs
endroits
•
fichier
externe
•
entête
document
HTML
•
balise
ouverture
élément
•
paramètres
navigateur
1.10.7.1
Fichier
externe
possible
meilleure
solutions
rassembler
règles
fichier
texte
téléchargé
liaison
entre
document
HTML
fichier
feuille
style
fait
intermédiaire
élément
link
link
rel=
stylesheet
href=
essai.css
type=
text/css
attribut
rel
décrit
type
relation
entre
fichiers
attribut
href
précise
localisation
fichier
attribut
type
décrit
type
fichier
navigateur
1.10.7.2
Entête
document
HTML
règles
peuvent
également
être
incluses
l'intérieur
l'élément
style
entête
syntaxe
règles
rigoureusement
style
type=
text/css
-.rouge
{
font-family
Arial
Helvetica
sans-serif
font-size
12px
color
#
FF0000
}
/style
Étienne
Vandeput
–
©
CeFIS
2005
26
Publier
Web
-
Perfectionnement
balises
commentaires
ignorées
navigateurs
capables
interpréter
langage
CSS
1.10.7.3
Élément
seule
possibilité
niveau
utiliser
attribut
agit
attribut
style
valeur
règle
prendre
compte
syntaxe
légèrement
différente
sélecteur
évidemment
accolades
h1
style=
color
#
00ff00
Rappelons
priorité
accordée
paramètres
plus
proches
élément
dernière
technique
façon
revoir
dernière
minute
style
élément
dit
manière
efficace
procéder
1.11
formulaires
JavaScript
intérêt
langage
script
côté
client
évident
•
permet
certaine
interactivité
•
autorise
certain
contrôle
interactions
trop
lourd
demander
serveur
section
présentons
commentons
certains
scripts
plupart
liés
gestion
formulaires
but
montrer
comment
fonctionnent
modèle
objet
modèle
événements
JavaScript
faire
percevoir
peu
près
tout
permis
matière
interaction
Beaucoup
scripts
classiques
retrouvera
sous
autres
formes
sites
Web
1.11.1
Scripts
généraux
déjà
proposés
scripts
titre
exercices
voici
autres
Certains
illustrent
communication
possible
entre
langages
particulier
entre
JavaScript
PHP
1.11.1.1
Faire
afficher
date
heure
exemple
illustre
possibilité
créer
objet
type
Date
extraire
informations
objet
créé
utilisant
mot-clé
new
Diverses
méthodes
peuvent
être
invoquées
objets
type
Date
getDate
getMonth
…
Notez
getDate
renvoie
nombre
entre
1
31
alors
getDay
renverrait
nombre
entre
0
6
correspondant
jour
semaine
script
language=
javascript
-maintenant
=
new
Date
document.write
``
br
Aujourd'hui
``
maintenant.getDate
``
/
maintenant.getMonth
+
1
``
/
maintenant.getYear
document.write
``
br
``
maintenant.getHours
maintenant.getMinutes
'
'
/script
1.11.1.2
Faire
afficher
date
serveur
exemple
illustre
passage
langage
autre
utilisons
ici
méthode
write
objet
document
mini
script
PHP
fournira
date
serveur
sous
forme
chaîne
caractères
script
language=
Javascript
Étienne
Vandeput
–
©
CeFIS
2005
27
Publier
Web
-
Perfectionnement
-document.write
'Nous
'
+
'
php
echo
date
``
d/m/Y
'+
'
'
/script
dernière
concaténée
bout
phrase
JavaScript
opérateur
+
concaténation
Notez
date
fonction
PHP13
fichier
contiendra
script
devra
avoir
extension
php
1.11.1.3
Faire
afficher
date
dernière
modification
document
intéresse
ici
propriété
lastModified
objet
document
résultat
chaîne
caractères
ensuite
découpé
morceaux
reconstituer
date
sous
format
européen
script
language=
javascript
-date=document.lastModified
jour=date.charAt
3
+date.charAt
4
mois=date.charAt
0
+date.charAt
1
annee=date.charAt
6
+date.charAt
7
+date.charAt
8
+date.charAt
9
document.write
``
br
document
modifié
dernière
fois
/
+
mois
+
``
/
+
annee
+
jour
+
/script
méthode
charAt
applique
tous
objets
chaînes
caractères
renvoie
caractère
position
indiquée
argument
index
commence
0
comme
habitude
autre
possibilité
utiliser
méthode
substring
observe
aussi
JavaScript
peut
produire
balises
exemple
ici
br
interprétées
navigateur
1.11.1.4
Recommander
site
e
ami
e
agit
script
simple
montre
souplesse
langage
comme
JavaScript
variables
email
sujet
message
correspondent
chaînes
caractères
propriété
location
objet
window
sert
rediriger
fenêtre
vers
nouvelle
adresse
URL
Autrement
dit
navigateur
fera
appel
client
mail
fournissant
destinataire
adresse
sujet
sujet
corps
message
message
adresse
fournie
internaute
travers
boîte
dialogue
fonction
prompt
script
language=
javascript
-function
recommander
{
var
adresse=
prompt
'
E-mail
ami
e
'
'
'
var
sujet=
``
CeFIS
–
centre
formation
technologies
var
message=
``
CeFIS
centre
formation
cherchez
Cliquez-ici
http
//www.det.fundp.ac.be/cefis/
window.location=
mailto
+adresse+
subject=
+sujet+
&
body=
+message
13
information
http
//be.php.net/manual/fr/function.date.php
Étienne
Vandeput
–
©
CeFIS
2005
28
Publier
Web
-
Perfectionnement
}
/script
seul
bouton
nécessaire
déclenchement
fonction
recommander
form
name=
form1
method=
post
action=
p
input
name=
envoi
type=
button
class=
important1
value=
Recommander
&
agrave
ami
onclick=
recommander
/p
/form
voici
illustration
Étienne
Vandeput
–
©
CeFIS
2005
29
Publier
Web
-
Perfectionnement
1.11.2
Scripts
liés
formulaires
1.11.2.1
Transformer
majuscules
contenu
saisi
champ
exemple
découvre
valeur
attribut
événement
peut
être
instruction
non
fonction
valeur
attribut
commence
mot-clé
javascript
suivi
instruction
form
name=
form1
method=
post
action=
p
Nom
input
type=
text
name=
titre
onChange=
javascript
this.value=this.value.toUpperCase
/p
p
Pr
&
eacute
nom
input
type=
text
name=
auteur
/p
/form
script
résume
seule
instruction
Lorsque
objet
titre
perdra
focus
contenu
transformé
majuscules
1.11.2.2
Vider
contenu
champ
cliquant
bouton
script
peut
être
intéressant
lorsque
champ
contient
valeur
défaut
valeur
convient
Cela
évite
utilisateur
formulaire
devoir
effacer
manuellement
valeur
script
language=
javascript
-function
vide
{
document.form1.elements
.value=
}
/script
cas
clic
bouton
contenu
élément
numéro
0
effacé
form
name=
form1
method=
post
action=
p
Valeur
input
type=
text
value=
Valeur
défaut
input
type=
button
value=
Effacer
onclick=
vide
0
/p
/form
1.11.2.3
Vider
contenu
champ
valeur
défaut
lorsqu
donne
focus
utilité
script
semblable
celle
script
précédent
manipulation
encore
plus
rapide
parfois
intéressant
employer
technique
garnir
champ
valeur
défaut
donne
indication
information
fournir
nom
input
name=
nom
type=
text
id=
nom
value=
nom
size=18
maxlength=75
onfocus=
this.value=
Étienne
Vandeput
–
©
CeFIS
2005
30
Publier
Web
-
Perfectionnement
1.11.2.4
Contrôler
contenu
champ
longueur
minimale
fonction
alert
affiche
boîte
dialogue
comportant
message
alerte
propriété
length
contenu
champ
testée
fonction
renvoie
booléen
car
utilisée
comme
valeur
attribut
onsubmit
formulaire
script
language=
javascript
-function
minimum
champ
nbre
{
if
champ.length
nbre
{
alert
``
mot
passe
doit
compter
``
+nbre+
caractères
minimum
``
return
false
}
return
true
}
/script
niveau
formulaire
form
name=
form1
method=
post
action=
..
/exemples/ok.php
onsubmit=
return
minimum
this.mp.value,6
p
Identificateur
input
name=
id
type=
text
id=
id
/p
p
Mot
passe
input
name=
mp
type=
password
id=
mp
/p
p
input
name=
envoi
type=
submit
id=
envoi
value=
Envoyer
/p
/form
paramètres
référence
faite
propriété
value
champ
mp
formulaire
courant
this
1.11.2.5
Augmenter
taille
champ
fonction
contenu
script
permet
champ
élargir
contenu
trop
large
taille
champ
agrandissement
toutefois
lieu
lorsque
champ
perd
focus
script
language=
JavaScript
function
augmente
{
var
taille
=
document.form1.champ.size
if
document.form1.champ.value.length
=taille
{
document.form1.champ.size
=
document.form1.champ.value.length
}
else
{
document.form1.champ.size
=
taille
}
}
/script
Étienne
Vandeput
–
©
CeFIS
2005
31
Publier
Web
-
Perfectionnement
valeur
attribut
size
champ
texte
propriété
longueur
contenu
celui-ci
concernés
script
Lorsqu
modification
contenu
champ
lieu
fonction
augmente
activée
form
name=
form1
method=
post
action=
p
Champ
s'agrandit
input
type=
text
name=
champ
maxlength=
50
size=
2
onChange=
augmente
/p
p
Autre
champ
input
type=
text
name=
autrechamp
/p
/form
1.11.2.6
Vérification
simple
adresse
email
contente
ici
vérifier
arrobase
fait
bien
partie
chaîne
encodée
script
language=
javascript
-function
arrobase_ok
email
{
var
a=document.forms
0
.email.value
var
test=
+
for
var
k
=
0
k
test.length
k++
{
var
=
test.substring
k
k+1
if
==
``
{
return
true
}
}
alert
``
adresse
email
correcte
``
return
false
}
/script
Étienne
Vandeput
–
©
CeFIS
2005
32
Publier
Web
-
Perfectionnement
corps
document
contiendra
définition
suivante
formulaire
form
name=
form1
method=
post
action=
onsubmit=
return
arrobase_ok
email
p
Nom
input
type=
text
name=
nom
/p
p
Adresse
email
input
name=
email
type=
text
class=
important1
/p
p
input
type=
submit
name=
envoi
value=
Envoyer
/p
/form
cas
fourniture
adresse
dépourvue
arrobase
message
affiché
comme
montre
illustration
ci-après
1.11.2.7
Remplir
liste
fonction
choix
bouton
radio
exemple
montre
choix
proposés
internautes
peuvent
être
fonction
autres
choix
font
derniers
illustre
aussi
création
objet
inclus
éléments
mise
page
moyen
styles
CSS
voir
dernière
ligne
code
illustration
script
language=
javascript
-function
animaux
form
list
{
list.options.length=0
var
o=new
Option
``
Lapin
1
form.liste.options
form.liste.options.length
=o
Étienne
Vandeput
–
©
CeFIS
2005
33
Publier
Web
-
Perfectionnement
var
o=new
Option
``
Chat
2
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Chien
3
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Renard
4
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Canard
5
form.liste.options
form.liste.options.length
=o
}
function
sports
form
list
{
list.options.length=0
var
o=new
Option
``
Tennis
1
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Basket
2
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Natation
3
form.liste.options
form.liste.options.length
=o
}
function
fleurs
form
list
{
list.options.length=0
var
o=new
Option
``
Rose
1
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Tulipe
2
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Narcisse
3
form.liste.options
form.liste.options.length
=o
var
o=new
Option
``
Jonquille
4
form.liste.options
form.liste.options.length
=o
}
/script
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
fonctions
animaux
sports
fleurs
but
créer
listes
listes
créée
fonction
choix
internaute
objet
Option
créé
donnant
étiquette
valeur
description
formulaire
suit
voit
fonction
bouton
radio
cliqué
autres
trois
fonctions
activée
créant
liste
animaux
sports
fleurs
form
name=
form1
action=
method=
get
table
width=
260
cellspacing=
2
cellpadding=
5
Étienne
Vandeput
–
©
CeFIS
2005
34
Publier
Web
-
Perfectionnement
tr
td
width=
96
p
input
type=
radio
name=
choix
value=
Animaux
onClick
=
animaux
this.form
this.form.liste
Animaux
/p
p
input
type=
radio
name=
choix
value=
Sports
onClick
=
sports
this.form
this.form.liste
Sports
/p
p
input
type=
radio
name=
choix
value=
Fleurs
onClick
=
fleurs
this.form
this.form.liste
Fleurs
/p
/td
td
width=
132
select
name=
liste
size=
3
class=
gris
align=
top
option
value=
Liste
vide
selected
Liste
vide
/option
/select
/td
/tr
/table
/form
départ
liste
vide
plutôt
contient
item
Liste
vide
Lorsqu
choix
fait
liste
remplit
items
correspondants
1.12
Exercice
Créez
formulaire
goût
selon
intérêts
devra
contenir
champs
texte
liste
déroulante
groupe
boutons
radios
autre
case
cocher
bouton
simple
permet
faire
exécuter
script
local
vérification
remplissage
certains
champs
bouton
soumission
oubliez
donner
étiquettes
objets
formulaire
page
contiendra
date
jour
date
dernière
modification
Lorsque
formulaire
soumis
page
contenant
bribes
code
PHP
reconstituera
document
HTML
reprenant
quelques-unes
données
fournies
possible
petit
traitement
autre
donnée
exemple
réécrivant
nom
prénom
ordre
inverse
initiale
prénom
seulement
14
14
pouvez
déjà
consulter
liste
fonctions
PHP
faire
quelques
manipulations
simples
Étienne
Vandeput
–
©
CeFIS
2005
35
Publier
Web
-
Perfectionnement
2
langage
PHP
2.1
quoi
consiste
PHP
PHP
langage
scripts
open
ource15
Comme
beaucoup
autres
langages
spécialement
conçu
développement
d'applications
web
peut
être
intégré
HTML
faire
code
PHP
inclus
entre
balise
début
ensemble
symboles
balise
fin
permettent
serveur
web
passer
mode
PHP
partie
PHP
correspond
partie
créative
dynamique
document
HTML
finalement
envoyé
serveur
navigateur
transformera
page
Web
DOCTYPE
HTML
PUBLIC
``
-//W3C//DTD
HTML
4.01
Transitional//EN
html
head
title
&
eacute
lange
HTML
-
PHP
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
/head
body
h4
Partie
statique
HTML
pur
dur
/h4
p
partie
texte
HTML
classique.
/p
h4
Partie
dynamique
HTML
construit
/h4
p
php
echo
``
Celle-ci
transformée
HTML
strong
niveau
serveur
/strong
l'analyseur
PHP
``
/p
/body
/html
affichage
cela
donne
15
logiciel
dit
open
source
code
source
inclus
version
compilée
encourageant
ainsi
réellement
modification
adaptation
être
considéré
comme
tel
logiciel
doit
être
distribué
gratuitement
code
source
doit
être
inclus
sorte
chacun
puisse
modifier
redistribuer
Étienne
Vandeput
–
©
CeFIS
2005
36
Publier
Web
-
Perfectionnement
Contrairement
code
JavaScript
code
PHP
exécuté
serveur
non
client
client
reçoit
résultat
script
sans
aucun
moyen
d'avoir
accès
code
produit
résultat
donnez
fichiers
HTML
correspondant
pages
statiques
extension
PHP
internaute
aucun
moyen
distinguer
pages
produites
dynamiquement
pages
statiques
Voici
partie
intéressante
source
reçue
navigateur
exemple
précédent
body
h4
Partie
statique
HTML
pur
dur
/h4
p
partie
texte
HTML
classique.
/p
h4
Partie
dynamique
HTML
construit
/h4
p
Celle-ci
transformée
HTML
strong
niveau
serveur
/strong
l'analyseur
PHP.
/p
/body
Tous
fichiers
contenant
instructions
PHP
doivent
posséder
extension
.php16
2.2
offre
PHP
PHP
principalement
conçu
servir
langage
script
coté
serveur
capable
réaliser
tout
qu'un
script
CGI
peut
faire17
principalement
utilisé
écrire
scripts
collecte
données
issues
formulaires
stockage
éventuel
données
base
données
génération
dynamique
contenu
voir
petit
exemple
ci-dessus
…
C'est
l'utilisation
plus
traditionnelle
principal
objet
PHP
Trois
composants
nécessaires
•
analyseur
PHP
•
serveur
Web
Apache
exemple
•
navigateur
web
serveur
Web
doit
exécuter
corrélation
PHP
nécessite
configuration
particulière
forcément
évidente
réaliser
pourquoi
existe
environnements
logiciels
grâce
auxquels
problèmes
passent
second
plan18
Notez
aussi
possible
écrire
scripts
PHP
exécuter
ligne
commande
sans
l'aide
serveur
Web
d'un
navigateur
faut
cela
disposer
l'exécutable
PHP
utilisation
intéressante
scripts
doivent
être
exécutés
régulièrement
PHP
utilisable
majorité
systèmes
d'exploitation
supporte
plupart
serveurs
Web
actuels
notamment
Apache
Microsoft
Internet
Information
Server
IIS
également
choix
d'utiliser
programmation
procédurale
programmation
objet
mélange
deux
16
autres
extensions
reconnues
telles
php3
phtml
…
autant
elles
fournies
serveur
Web
via
fichier
.httpd.conf
exemple
AddType
application/x-httpd-php
.phtml
.pwml
.php3
.php4
.php
.php2
.inc
17
CGI
Common
Gateway
Interface
moyen
faire
communiquer
client
Web
applications
écrites
différents
langages
disponibles
niveau
serveur
utilisation
scripts
CGI
demande
bien
entendu
quelques
efforts
configuration
18
http
//www.easyphp.org/telechargements.php3
Étienne
Vandeput
–
©
CeFIS
2005
37
Publier
Web
-
Perfectionnement
PHP
limite
production
code
HTML
peut
aussi
générer
images
fichiers
PDF
animations
Flash
génère
facilement
texte
aussi
code
XML
XHTML
PHP
génère
fichiers
sauve
système
fichiers
bien
envoie
navigateur
web
intéresse
davantage
PHP
possède
nombreuses
fonctions
permettant
exploiter
bases
données
parmi
lesquelles
InterBase
PostgreSQL
dBase
MySQL
IBM
DB2
ODBC
Informix
Oracle
Ingres
citer
plus
connues
2.3
bases
langage
2.3.1
Éléments
syntaxe
2.3.1.1
balises
PHP
quatre
jeux
balises
pouvant
servir
délimiter
blocs
code
PHP
Seuls
deux
d'entre
actifs
coup
sûr19
php
script
language=
php
/script
html
head
title
&
eacute
lange
HTML
-
PHP
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
/head
body
p
partie
texte
interpr
&
eacute
&
eacute
e
navigateur.
/p
p
script
language=
php
echo
``
Celle-ci
l'analyseur
PHP
``
/script
/p
/body
/html
deuxième
syntaxe
évidemment
plus
lourde
suite
notes
utiliserons
toujours
première
2.3.1.2
séparateurs
d'instructions
séparateur
d'instructions
symbole
``
nécessaire
partout
sauf
devant
balise
fin
d'exécution
PHP
``
2.3.1.3
commentaires
Comme
nombreux
autres
langages
caractères
trouvant
entre
couples
symboles
``
/
*
``
*
/
pris
compte
l'analyseur
commentaires
jusqu'en
fin
ligne
commencent
symboles
``
//
symbole
``
#
html
head
title
&
eacute
lange
HTML
-
PHP
/title
19
balises
courtes
sans
mot-clé
php
balises
ASP
peuvent
être
activées
déasctivées
niveau
fichier
php.ini
Étienne
Vandeput
–
©
CeFIS
2005
38
Publier
Web
-
Perfectionnement
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
/head
body
p
partie
texte
interpr
&
eacute
&
eacute
e
navigateur.
/p
p
php
/
*
echo
fonction
d'affichage
suivie
d'une
chaîne
caractères
*
/
echo
``
Celle-ci
l'analyseur
PHP.
br
//
fonction
print
print
``
celle-ci
aussi
``
#
preuve
/p
/body
/html
2.3.2
Variables
2.3.2.1
Variables
internes
variables
représentées
signe
dollar
``
suivi
nom
variable
nom
sensible
casse
x
≠
X
nom
variable
doit
commencer
lettre
caractère
souligné
_
suivi
lettres
chiffres
soulignés
html
head
title
Nommage
variables
affectations
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
/head
body
php
prenom='Étienne
'
Prenom=
Charles
echo
prenom
'
l\'assistant
'
Prenom
'
'
/body
/html
exemple
constate
•
casse
caractères
importante
noms
variables
•
chaînes
caractères
constantes
s'écrivent
entre
guillemets
apostrophes
•
fonction
echo
admet
plusieurs
arguments
séparés
virgules
Étienne
Vandeput
–
©
CeFIS
2005
39
Publier
Web
-
Perfectionnement
•
vraie
apostrophe
chaîne
caractères
elle-même
délimitée
apostrophes
doit
être
précédée
barre
oblique
inverse
\
variables
affectées
valeur
peuvent
aussi
l'être
référence
partir
PHP4
deuxième
cas
nouvelle
variable
fait
référencer
variable
originale
modifications
nouvelle
variable
affecteront
l'ancienne
vice
versa
assigner
référence
ajoute
symbole
&
nom
variable
source
html
head
title
Nommage
variables
affectations
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
/head
body
php
a=12
b=23
print
a+
b
'
'
//
Affectation
valeur
c=
c=20
print
a+
b
'
'
//
Affectation
référence
c=
&
c=15
print
a+
b
/body
/html
Observez
l'affectation
fait
moyen
symbole
``
=
alors
l'opérateur
comparaison
voir
plus
loin
``
==
L'instruction
print
a+
b
'
'
particulière
première
expression
résultat
d'une
opération
entre
deux
entiers
voir
types
ci-après
alors
seconde
chaîne
constituée
seul
caractère
``
espace
L'opérateur
entre
deux
symbolisé
point
opérateur
concaténation
L'expression
entière
automatiquement
transformée
chaîne
caractères
avant
d'être
affichée
2.3.2.2
Portée
variables
variables
portée
globale
elles
définies
intérieur
fonction
Elles
accessibles
partout
script
variables
définies
intérieur
fonction
locales
variables
définies
dehors
fonction
directement
accessibles
intérieur
celle-ci
Étienne
Vandeput
–
©
CeFIS
2005
40
Publier
Web
-
Perfectionnement
possible
accéder
variables
globales
intérieur
fonctions
possible
rendre
visibles
partout
variables
définies
fonction
script
suit
illustre
portée
variables
intérieur
fonction
possible
accéder
variable
globale
intermédiaire
tableau
prédéfini
GLOBALS
tableau
indexé
noms
variables
sans
symbole
rendre
variable
locale
visible
faut
utiliser
déclaration
global
php
a=1
b=2
function
portee
{
a=101
b=102
echo
a+
b
'
br
'
//
Affichage
somme
l'intérieur
fonction
echo
GLOBALS
'
'
'
br
'
//
Accès
variable
globale
extérieure
global
//
Rendre
variable
locale
visible
partout
c=99
}
portee
echo
a+
b
echo
'
br
'
//
Affichage
somme
l'extérieur
fonction
echo
'
br
'
//
Affichage
valeur
l'extérieur
fonction
echo
GLOBALS
'
'
'
br
'
Voici
résultat
fonction
portee
exécutée
fournissant
somme
valeurs
variables
locales
valeur
variable
globale
Puis
somme
valeurs
variables
globales
affichée
suivie
valeur
variable
rendue
globale
obtenue
deux
manières
différentes
vu
valeur
variable
garnit
aussi
tableau
GLOBALS
2.3.2.3
Variables
dynamiques
possible
s'arranger
nom
d'une
variable
lui-même
variable
C'est
particulièrement
pratique
éviter
problèmes
nomination
opportunité
existe
utilisant
symbole
dollar
seconde
fois
Voyez
l'exemple
suit
php
a=
Charles
a=
Directeur
CeFIS
echo
'
'.
Charles
intérêt
pouvoir
créer
variables
dynamiquement
éviter
devoir
utiliser
tableaux
voire
casser
tête
trouver
noms
variables
Étienne
Vandeput
–
©
CeFIS
2005
41
Publier
Web
-
Perfectionnement
voici
exemple
php
foreach
_POST
key
=
value
{
varname
=
``
_
key
varname
=
value
}
connaissez
encore
structure
répétitive
facile
comprendre
fait
partie
script
valeurs
formulaire
décorent
tableau
_POST
contient
valeurs
envoyées
serveur
client
éclater
tableau
autant
variables
nécessaire
crée
variables
contenant
chaque
fois
chaîne
caractères
commençant
caractère
soulignement
suivi
nom
variable
clé
index
tableau
utilise
chaînes
comme
nom
variables
contiendront
valeurs
transmises
Exemple
couples
clés-valeurs
transmis
nom
Vandeput
prenom
Étienne
departement
DET
variables
créées
respectivement
_nom
_prenom
_departement
contiendront
valeurs
Vandeput
Étienne
DET
2.3.2.4
Variables
externes
PHP
manipule
aussi
variables
provenant
l'extérieur
comme
venons
juste
rappeler
variables
provenant
soumission
d'un
formulaire
C'est
d'ailleurs
là
qualités
variables
aisément
accessibles
travers
tableaux
prédéfinis
Parmi
ceux-ci
notons
GLOBALS
rassemble
variables
globales
_POST
_GET
contiennent
respectivement
valeurs
transmises
méthode
post
celles
transmises
méthode
get
encore
_SERVER
renvoyons
documentation
plus
détails
donnons
ici
quelques
exemples
informations
normalement20
disponibles
niveau
serveur…
html
head
title
variable
_SERVER
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
/head
body
p
php
echo
``
span
class='important2
'
Nom
fichier
partir
racine
/span
echo
_SERVER
'PHP_SELF
'
'
br
br
'
echo
``
span
class='important2
'
Nom
racine
script
/span
echo
_SERVER
'DOCUMENT_ROOT
'
'
br
br
'
echo
``
span
class='important2
'
Nom
client
HTML
/span
20
aucune
garantie
fourniture
toutes
informations
prévues
serveur
donné
Étienne
Vandeput
–
©
CeFIS
2005
42
Publier
Web
-
Perfectionnement
echo
_SERVER
'HTTP_USER_AGENT
'
'
br
br
'
echo
``
span
class='important2
'
Nom
serveur
exécute
script
/span
echo
_SERVER
'SERVER_NAME
'
'
br
br
'
/p
/body
/html
…dont
voici
résultat
contexte
donné
autre
moyen
accéder
valeurs
tableau
_server
activer
fonction
prédéfinie
phpinfo
script
instruction
placer
fichier
php
php
phpinfo
Étienne
Vandeput
–
©
CeFIS
2005
43
Publier
Web
-
Perfectionnement
Voici
petit
exemple
illustre
profit
peut
éventuellement
tirer
telles
informations
composante
_SERVER
REMOTE_ADDR
représente
adresse
IP
client
Supposons
page
réservée
catégorie
clients
identifiables
adresse
IP
exemple
Facultés
138.48….
suffit
vérifier
client
bien
adresse
commençant
deux
valeurs
fonction
explode
séparateur
chaîne
renvoie
tableau
composantes
éléments
chaîne
chaîne
séparées
séparateur
séparateur
adresseIP=explode
``
``
_SERVER
'REMOTE_ADDR
'
if
adresseIP
0
=
138
||adresseIP
1
=
48
{
echo
htmlentities
``
Accès
limité
FUNDP
exit
}
fonction
htmlentities
chaîne
convertit
caractères
spéciaux
entités
HTML
exemple
é
devient
&
eacute
utilisation
fonction
évite
certain
nombre
surprises
2.3.3
constantes
constante
identifiant
représente
valeur
simple
nom
constante
valide
commence
lettre
souligné
_
suivi
d'un
nombre
quelconque
lettre
chiffres
soulignés
convention
constantes
toujours
majuscules
constantes
définies
grâce
fonction
define
peuvent
être
redéfinies
a=3
define
``
VALMAX
100
a+=VALMAX
echo
affichera
valeur
103
Elles
accessibles
manière
globale
a=3
define
``
VALMAX
100
a+=VALMAX
echo
'
br
'
function
test
{
echo
VALMAX
}
test
2.3.4
Types
Habituellement
PHP
type
d'une
variable
n'est
déclaré
programmeur
décidé
moment
l'exécution
fonction
contexte
lequel
variable
utilisée
voir
exemple
ci-dessus
variable
adresseIP
huit
types
base
quatre
types
scalaires
valeurs
indécomposables
Étienne
Vandeput
–
©
CeFIS
2005
44
Publier
Web
-
Perfectionnement
•
booléen
•
entier
•
nombre
virgule
flottante
•
chaîne
caractères
deux
types
composés
•
tableau
•
objet
deux
types
spéciaux
•
ressource
•
null
Comme
d'autres
langages
PHP
offre
possibilité
``
transtyper
variables
casting
examinons
rapidement
types
scalaires
autres
types
analysés
plus
loin
2.3.4.1
Booléen
Classiquement
valeurs
true
false
casse
sans
importance
variables
autres
types
peuvent
être
transtypées
variable
booléenne
Ainsi
exemple
valeur
entière
0
valeur
nombre
virgule
0.0
chaîne
vide
chaîne
``
0
prennent
valeur
false
lorsqu'elles
transtypées
booléen
2.3.4.2
Entier
entiers
peuvent
être
spécifiés
base
décimale
hexadécimal
octal
optionnellement
être
précédés
d'un
signe
Selon
systèmes
environ
4
milliard
valeurs
signées
possibles
codage
32
bits
php
i=123456
j=123.456E3
k=01234
l=0xAA45
print
i.
br
j.
br
k
``
br
2.3.4.3
Nombre
virgule
flottante
Voici
quelques
exemples
illustrant
syntaxe
admise
php
i=123.456
j=1.23456E2
k=.123456e3
print
i.
br
``
br
k
Étienne
Vandeput
–
©
CeFIS
2005
45
Publier
Web
-
Perfectionnement
taille
nombres
décimaux
dépend
plateforme
configuration
plus
répandue
permet
coder
nombres
l'ordre
grandeur
1.8E308
précision
14
décimales
C'est
format
64
bits
IEEE
faut
jamais
faire
confiance
nombres
virgule
jusqu
'
dernière
décimale
s'interdire
comparer
l'opérateur
d'égalité
2.3.4.4
Chaîne
caractères
trois
manières
différentes
construire
chaînes
caractères
•
utilisant
apostrophes
•
utilisant
guillemets
•
utilisant
syntaxe
HEREDOC
parlerons
2.3.4.5
apostrophes
prenom='Étienne
'
chaîne
doit
contenir
apostrophes
devez
échapper
barre
oblique
inverse
\
titre=
'
L\'école
TIC
'
C'est
pareil
barre
oblique
inverse
elle-même
remarque='Utilisez
barre
oblique
inverse
\\
échapper
caractères
'
noms
variables
présents
chaîne
apparaîtront
tels
quels
c='La
variable
nom
'
php
prenom='Étienne
br
'
titre=
'
L\'école
TIC
br
'
remarque='Utilisez
barre
oblique
inverse
\\
échapper
caractères.
br
'
c='La
variable
nom
'
echo
prenom.
'
br
'.
titre.
'
br
'.
remarque
'
br
'.
Observez
balises
HTML
texte
peuvent
être
incluses
chaînes
caractères
Elles
interprétées
navigateur
2.3.4.6
guillemets
L'apostrophe
doit
plus
être
échappé
bien
guillemet
noms
variables
remplacés
leurs
valeurs
respectives
php
prenom=
Étienne
titre=
cours
\
PHP\
br
Étienne
Vandeput
–
©
CeFIS
2005
46
Publier
Web
-
Perfectionnement
remarque=
Utilisez
barre
oblique
inverse
\\
échapper
caractères.
br
c=
cours
PHP
donné
prenom.
br
d='Le
cours
PHP
donné
prenom.
br
'
e='Le
cours
PHP
donné
'.
prenom
'.
br
'
echo
prenom.
br
br
titre.
br
remarque.
br
c.
br
``
br
e
2.3.5
Opérateurs
Comme
tout
langage
programmation
PHP
propose
opérateurs
fonctions
prédéfinies
offre
aussi
programmeur
possibilité
construire
propres
fonctions
opérateurs
comme
fonctions
prédéfinies
trop
nombreux
être
décrits
ici
pouvez
référer
documentation
ligne
PHP21
suit
contentons
évoquer
ceux
parmi
moins
classiques
présentent
intérêt
immédiat
utilisés
documentés
exemples
suivent
2.3.5.1
Opérateurs
assignation
assignation
fait
classiquement
utilisant
symbole
=
facilités
offertes
comme
nombreux
autres
langages
opérateurs
combinés
+=
.=
+=
b
//
=
+
b
.=
b
//
=
b
assignations
combinées
=
b
=
5
+
1
//
b
=
5
=
b
+
1
2.3.5.2
Opérateurs
comparaison
comparaison
peut
faire
valeurs
également
types
raison
laquelle
opérateur
classique
comparaison
==
ajoute
opérateur
vérifie
plus
égalité
types
===
===
b
possède
valeur
true
uniquement
deux
variables
contiennent
mêmes
valeurs
type
trouve
opérateurs
=
==
tester
différence
valeurs
différence
valeurs
types
==
b
possède
valeur
true
deux
variables
contiennent
valeurs
différentes
types
différents
21
http
//www.php.net/manual/fr/
Étienne
Vandeput
–
©
CeFIS
2005
47
Publier
Web
-
Perfectionnement
2.3.5.3
Opérateurs
incrémentation
décrémentation
opérateurs
peuvent
être
utilisés
concert
tests
raison
laquelle
parle
pré
post
incrémentation/décrémentation
++
incrémente
avant
renvoyer
valeur
test
éventuel
a++
renvoie
valeur
avant
incrémenter
expressions
suivantes
équivalentes
décrémentation
2.3.5.4
Opérateurs
logiques
opérateurs
logiques
habituels
NON
respectivement
symbolisés
&
&
||
existe
aussi
opérateurs
and
or
équivalents
&
&
||
ceci
près
priorité
différente
Profitons-en
rappeler
faut
être
attentif
priorité
opérateurs
cas
doute
utiliser
parenthèses
2.3.5.5
Opérateurs
chaînes
opérateur
concaténation
chaînes
caractères
point
nom
contient
valeur
Vandeput
prenom
valeur
Étienne
texte
affiché
par…
echo
``
Bonjour
prenom
``
nom.
``
…
sera…
Bonjour
Étienne
Vandeput
Notez
différence
d'interprétation
point
dehors
guillemets
2.3.6
Fonctions
fonction
définie
manière
suivante
function
f
p1
p2
…
pn
{
…
return
v
…
}
partir
PHP4
fonctions
peuvent
être
définies
importe
Toutefois
fonction
définie
intérieur
autre
fonction
existe
dernière
appelée
fonction
définie
manière
conditionnelle
existe
condition
testée
vérifiée
possible
passer
arguments
valeur
méthode
défaut
…
function
multiplier
b
{
p=
*
b
return
p
}
echo
multiplier
4,8
…ou
référence…
function
tripler
&
{
*
=3
}
Étienne
Vandeput
–
©
CeFIS
2005
48
Publier
Web
-
Perfectionnement
a=5
tripler
echo
existe
évidemment
très
nombreuses
fonctions
prédéfinies
PHP
2.3.7
Expressions
L'association
opérateurs
fonctions
variables
constantes
donne
naissance
expressions
peut
dire
d'une
expression
qu'elle
valeur
d'un
certain
type
l'exemple
suit
l'opérateur
désigne
reste
division
entière
…
…
php
x=12
y=
x
5
echo
x
modulo
5
égale
``
``
br
x=
y=4
+5
echo
``
x
vaut
x
vaut
``
…donnera…
12
modulo
5
égale
2.
x
vaut
9
vaut
4
Comme
pouvez
constater
PHP
offre
facilités
d'écriture
langages
récents
2.3.8
Instructions
contrôle
Comme
plupart
langages
script
PHP
offre
grande
variété
instructions
contrôle
grande
souplesse
écriture
2.3.8.1
instruction
if
commencer
important
rendre
compte
variables
tous
types
peuvent
être
considérées
comme
expressions
booléennes
Ainsi
variable
x
utilisée
contexte
booléen
fournira
valeur
true
contient
valeur
zéro
numérique
chaîne
vide
valeur
logique
false
définie
exemple
…
x=1
if
x
{
echo
``
vrai
}
else
{
echo
``
true
}
…affichera
vrai
utilisation
accolades
nécessaire
souhaitable
autres
instructions
pourraient
venir
ajouter
suite
Étienne
Vandeput
–
©
CeFIS
2005
49
Publier
Web
-
Perfectionnement
2.3.8.2
instruction
if-elseif-else
instruction
if-elseif-else
instruction
très
souple
permet
effectuer
tests
natures
très
différentes
peut
comporter
autant
elseif
nécessaire
chaque
nouveau
test
comme
bloc
else
intéresse
cas
restants
if
nombre
2
{
echo
``
Nombre
impair
}
elseif
nombre
3
{
echo
``
Nombre
non
divisible
3
}
else
{
echo
``
Nombre
pair
multiple
3
}
2.3.8.3
L'instruction
switch
L'instruction
switch
alternative
construction
if-elseif-else
plus
souple
d'autres
langages
car
accepte
d'autres
valeurs
valeurs
entières
préfèrera
cas
c'est
toujours
expression
doit
être
testée
switch
{
case
99
b=
excessif
break
case
75
b=
élevé
break
case
50
b=
normal
break
default
b=
faible
}
L'instruction
break
évite
passage
autres
instructions
l'absence
instructions
valeur
88
ferait
afficher
faible
non
élevé
2.3.8.4
L'instruction
while
L'instruction
while
plus
courante
instructions
boucles
bloc
instructions
qu'elle
encadre
exécuté
tant
condition
vérifiée
implique
celle-ci
évaluée
avant
parcours
boucle
while
50
{
a-=5
}
echo
possède
toujours
valeur
88
valeur
48
affichée
instructions
break
continue
permettent
respectivement
quitter
boucle
d'interrompre
cycle
cours
passer
cycle
suivant
2.3.8.5
L'instruction
do…while
L'instruction
do…while
permet
boucle
d'être
effectuée
moins
fois
condition
n'est
effet
testée
qu'en
fin
boucle
Étienne
Vandeput
–
©
CeFIS
2005
50
Publier
Web
-
Perfectionnement
instructions
suivent
font
afficher
dates
jours
succèdent
d'aujourd'hui
jusqu'au
premier
dimanche
mars
jourCourant=time
echo
``
ol
\n
do
{
echo
``
li
.date
``
F
jourCourant
``
.date
``
jourCourant
``
.date
``
F
jourCourant
``
/li
\n
jourCourant+=86400
}
while
date
``
jourCourant
=
Sunday
||date
``
F
jourCourant
=
March
echo
``
/ol
\n
fonction
time
génère
estampille
moment
présent
exprimé
secondes
depuis
1er
janvier
1970
fonction
date
comme
arguments
format
estampille
signification
formats
référez-vous
documentation
PHP
script
augmente
d'un
jour
moment
courant
avant
d'en
afficher
paramètres
liste
numérotée
Notez
premier
dimanche
mars
script
afficherait
paramètres
365
jours
2.3.8.6
L'instruction
for
L'instruction
for
permet
faire
économies
d'écriture
cas
nombre
passages
boucle
déterminable
Voici
conditions
devient
script
précédent
echo
``
ol
\n
for
jourCourant=time
date
``
jourCourant
=
Sunday
||date
``
F
jourCourant
=
March
jourCourant+=86400
{
echo
``
li
.date
``
F
jourCourant
``
/li
\n
}
echo
``
/ol
\n
2.3.8.7
L'instruction
foreach
L'instruction
foreach
relative
tableaux
décrirons
moment
détaillerons
davantage
structures
intéressantes
2.4
Exercice
formulaire
incomplet
présente
sorte
Étienne
Vandeput
–
©
CeFIS
2005
51
Publier
Web
-
Perfectionnement
s'agit
faire
sorte
choix
bouton
radio
Madame
introduise
modifications
graphiques
suivantes
ajoutera
différents
champs
doivent
vider
contenu
dès
reçoivent
focus
idée
ajouter
attribut
événement
chacun
boutons
radios
associant
soumission
formulaire
comme
action
script
reconstitution
formulaire
premier
fichier
HTML
contiendra
formulaire
initial
second
fichier
PHP
contiendra
script
reconstituera
nouvelle
page
plus
moins
champs
textes
selon
choix
form
name=
form1
method=
post
action=
transmis.php
p
label
input
name=
sexe
type=
radio
onClick=
this.form.action='sexe.php
'
this.form.submit
``
value=
0
checked
Monsieur
/label
br
label
input
type=
radio
name=
sexe
value=
1
onClick=
this.form.action='sexe.php
'
this.form.submit
``
Madame
/label
Coordonn
&
eacute
input
name=
textfield
type=
text
class=
gris
value=
Nom
onFocus=
this.value=
input
name=
Submit
type=
submit
class=
important1
value=
Envoyer
br
/p
/form
Étienne
Vandeput
–
©
CeFIS
2005
52
Publier
Web
-
Perfectionnement
attributs
class
certains
éléments
traduisent
utilisation
styles
personnalisés
attributs
onFocus
servent
vidage
champs
Lorsqu
boutons
sélectionné
action
formulaire
changée
formulaire
soumis
invoquant
script
sexe.php
code
suit
va
reconstituer
nouveau
formulaire
form
name=
form1
method=
post
action=
transmis.php
p
label
input
name=
sexe
type=
radio
onClick=
this.form.action='sexe.php
'
this.form.submit
``
value=
0
checked
Monsieur
/label
br
label
input
type=
radio
name=
sexe
value=
1
php
sexe=
_POST
``
sexe
if
sexe==
1
{
echo
``
checked
}
onClick=
this.form.action='sexe.php
'
this.form.submit
``
Madame
/label
/p
p
Coordonn
&
eacute
php
if
sexe==
1
{
echo
``
input
name='njf
'
type='text
'
class='gris
'
value='Nom
jeune
fille'
onFocus='this.value=\
\
'
\n
echo
``
input
name='nfm
'
type='text
'
size='25
'
class='gris
'
value='Nom
femme
mariée
'
onFocus='this.value=\
\
'
\n
}
else
{
echo
``
input
name='nom
'
type='text
'
class='gris
'
value='nom'
onFocus='this.value=\
\
'
\n
}
input
name=
Submit
type=
submit
class=
important1
value=
Envoyer
br
/p
/form
code
PHP
document
trouve
deux
endroits
premier
morceau
code
sert
cocher
bouton
radio
correspondant
choix
Madame
formulaire
reconstitué
nécessaire
préciser
autre
choix
premier
choix
sélectionné
défaut
observera
code
inséré
intérieur
définition
élément
montre
deux
langages
peuvent
être
intimement
mélangés
deuxième
morceau
permet
création
deux
champs
retour
seul
champ
valeurs
défaut
nécessaires
niveau
syntaxique
noterez
apostrophes
placés
intérieur
guillemets
permettent
éviter
échappement
caractères
Toutefois
troisième
niveau
inclusion
chaîne
caractères
vide
oblige
échappement
certains
guillemets
Étienne
Vandeput
–
©
CeFIS
2005
53
Publier
Web
-
Perfectionnement
2.5
tableaux
PHP
tableau
association
ordonnée
association
type
fait
correspondre
valeurs
clés
type
optimisé
diverses
façons
font
peut
manipuler
diverses
manières
Comme
valeur
peut
elle-même
être
tableau
pouvez
simuler
facilement
arbre
2.5.1
Créer
tableau
éléments
tableau
peuvent
être
créés
volée
monTableau
=
Pomme
monTableau
=
Poire
monTableau
=
Abricot
monTableau
=
Cerise
monTableau
=
Pêche
cas
index
0
…
créé
tableau
peut
également
être
créé
fonction
array
fonction
prend
argument
structures
key
=
value
séparées
virgules
array
key
=
value
//
key
chaîne
entier
positif
//
value
peut
être
n'importe
quel
type
compris
autre
tableau
voici
illustration
php
table
=
array
``
nom
=
``
Vandeput
10
=
125
echo
table
``
nom
//
affiche
Vandeput
echo
table
10
//
affiche
125
tableau
peut
être
multidimensionnel
voitures=array
allemandes
=
array
``
opel
``
bmw
``
vw
``
mercedes
francaises
=
array
``
peugeot
``
citroen
``
renault
italiennes
=
array
``
alpha
romeo
``
fiat
echo
voitures
``
francaises
2
//
affichera
renault
constate
tableau
structure
données
relativement
souple
2.5.2
Fonctions
liées
tableaux
Voici
exemple
illustre
quelques-unes
nombreuses
fonctions
prédéfinies
prenant
tableau
argument
tableau
parcouru
début
fin
clés
affichées
regard
valeurs
correspondantes
php
coordonnees
'nom
'
=
Vandeput
Étienne
Vandeput
–
©
CeFIS
2005
54
Publier
Web
-
Perfectionnement
coordonnees
'prenom
'
=
Étienne
coordonnees
'organisme
'
=
CeFIS
for
reset
coordonnees
k=key
coordonnees
next
coordonnees
{
v=current
coordonnees
echo
``
valeur
clé
span
class='important2
'
k
``
/span
span
class='important2
'
v
``
/span
br
}
tableau
rempli
volée
boucle
for
fait
apparaître
trois
éléments
habituels
initialisation
condition
d'arrêt
évolution
variables
Examinons-les
reset
coordonnees
fonction
reset
place
pointeur
interne
premier
élément
tableau
key
coordonnees
fonction
key
fournit
clé
l'élément
courant
bout
tableau
valeur
renvoyée
false
convient
comme
test
d'arrêt
next
coordonnees
fonction
next
place
pointeur
interne
élément
suivant
existe
current
coordonnees
fonction
current
renvoie
valeur
élément
courant
2.6
sessions
certain
nombre
cas
bon
accès
pages
Web
site
réglementé
technique
consiste
généralement
demander
client
fournir
identificateur
mot
passe
éviter
stockage
clair
mot
passe
base
données
celui-ci
peut
être
encrypté
intérêt
session
réside
production
variables
existence
servira
vérifier
utilisateur
identifié
correctement
variables
globales
PHP4
évitent
notamment
devoir
véhiculer
certaines
valeurs
page
autre
site
faut
distinguer
création
nouvel
utilisateur
authentification
script
JavaScript
peut
aisément
traiter
deux
options
moyen
boutons
radios
2.6.1
Création
nouvel
utilisateur
Lors
création
nouvel
utilisateur
veillera
particulièrement
vérifier
unicité
identificateur
soin
encrypter
mot
passe
avant
stocker
base
données
utilisera
deux
fichiers
premier
permettra
saisir
informations
provenant
utilisateur
second
préparer
stocker
informations
base
données
voir
section
consacrée
MySQL
profitera
aussi
définir
variables
session
plus
nécessaire
véhiculer
page
autre
Théoriquement
faut
également
veiller
connecter
utilisateur
site
2.6.2
Authentification
utilisateur
processus
authentification
consiste
vérifier
identificateur
mot
passe
encrypté
concordent
Cela
passe
évidemment
accès
base
données
Ici
aussi
profitera
définir
variables
session
nécessaires
connectera
utilisateur
site
2.6.3
Identificateur
session
principe
chaque
utilisateur
reçoit
numéro
unique
identifiant
session
appelé
session
ID
création
liée
démarrage
session
provoquée
fonction
session_start
but
fonction
créer
session
utilisateur
encore
connecté
restaurer
Étienne
Vandeput
–
©
CeFIS
2005
55
Publier
Web
-
Perfectionnement
session
trouvée
serveur
grâce
session
ID
cas
dernier
fourni
cookie
via
requête
GET
POST
fait
certains
clients
refusent
cookies
parle
toutefois
faveur
solution
toutefois
très
souple
session
ID
peut
être
aisément
propagé
travers
URL
grâce
constante
SID
contient
href=
autrePage.php
php
echo
SID
Autre
page
/a
Grâce
l'identifiant
session
PHP
peut
retrouver
toutes
variables
associées
session
2.7
inclusions
fichiers
Afin
modéliser
pages
site
utile
récupérer
parties
entières
code
PHP
fournit
fonction
include
opportunité
inclure
fichier
code
certains
autres
fichiers
existe
autre
fonction
fonction
require
dernier
cas
l'absence
fichier
provoque
l'interruption
l'exécution
cause
d'erreur
fatale
titre
d'exemple
peut
faire
sorte
l'exécution
d'un
fichier
produise
l'entête
pages
l'exécution
d'un
autre
pied-de-page
Voici
code
fichier
entete.php
html
head
title
Document
sans
titre
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
style
type=
text/css
-.grand
{
font-size
24px
color
#
999999
}
/style
style
type=
text/css
-.blanc
{
color
#
FFFFFF
}
td
{
padding
5px
}
/style
/head
Étienne
Vandeput
–
©
CeFIS
2005
56
Publier
Web
-
Perfectionnement
body
table
width=
555
height=
113
border=
1
cellpadding=
10
cellspacing=
0
bordercolor=
#
FF8888
bgcolor=
#
FFDFD5
class=
grand
tr
td
height=
109
div
align=
center
img
src=
..
/images/cathedrale.jpg
width=
112
height=
89
align=
left
span
class=
grand
&
eacute
partement
&
Eacute
ducation
Technologie
/span
/div
/td
/tr
/table
fichier
contient
instructions
d'entête
habituelles
d'un
fichier
HTML
trouve
également
quelques
définitions
styles
propres
fichier
Notez
styles
disponibles
niveau
tous
fichiers
incluront
celui-ci
L'élément
body
ouvert
fichier
fermé
fichier
pied-de-page
autres
instructions
celles
définition
d'un
tableau
Voilà
celui
fichier
pieddepage.php
table
width=
555
border=
1
cellpadding=
10
cellspacing=
0
bordercolor=
#
FF8888
bgcolor=
#
FFDFD5
tr
td
href=
mailto
webmaster
det.fundp.ac.be
Contacter
/a
span
class=
gris
Webmaster
/span
/td
/tr
/table
/body
/html
trouve
définition
d'un
autre
tableau
Notez
qu'il
n'était
nécessaire
clôturer
tableau
fichier
d'entête
pouvait
continuer
définition
autres
fichiers
style
gris
utilisé
défini
grâce
fichier
précédent
bénéficie
aussi
d'autres
définitions
styles
mise
forme
liens
Celui
inclut
deux
autres
contient
rien
balises
début
fin
d'un
fichier
HTML
classique
voici
code
php
include
'entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
Ceci
page
incluant
ent
&
ecirc
pied
page
/td
/tr
/table
php
include
'pieddepage.php
'
s'agit
nouveau
définition
d'un
tableau
d'une
seule
cellule
remarque
première
dernière
instructions
instructions
PHP
d'inclusion
fichiers
voici
résultat
l'affichage
Étienne
Vandeput
–
©
CeFIS
2005
57
Publier
Web
-
Perfectionnement
2.8
Exercice
s'agit
réaliser
entête
entete.php
pied
page
pieddepage.php
serviront
modèles
pages
d'un
site
première
page
site
login.php
permettra
choisir
'
connecter
constituer
tant
nouvel
utilisateur
cas
demandera
quelques
informations
formulaire.php
nom
prénom
adresse…
informations
reçues
stockées
base
données
l'utilisateur
connecté
site
enregistrer.php
faire
message
indiquant
données
enregistrées
suffira
Auparavant
données
préparées
mot
passe
encrypté
nom
transformé
majuscules
blancs
inutiles
détruits…
cas
d'une
connexion
immédiate
connexion.php
message
annoncera
l'utilisateur
bien
connecté
site
Toutes
pages
aspect
général
grâce
fichiers
inclus
opérations
connexion
BD
vérification
mots
passe
d'enregistrement
évidemment
programmées
stade
connaissances
développées
Étienne
Vandeput
–
©
CeFIS
2005
58
Publier
Web
-
Perfectionnement
3
MySQL
3.1
L'association
entre
MySQL
PHP
MySQL
système
gestion
bases
données
relationnelles
basé
langage
d'interrogation
SQL
Structured
Query
Language
C'est
derniers
logiciels
open
source
catégorie
apparu
marché
terme
sens
Développé
partir
d'un
autre
SGBD
portant
nom
mSQL
possède
nombreuses
qualités
notamment
celle
d'être
portable
sens
qu'il
s'exécute
peu
près
tous
systèmes
d'exploitation
tous
types
matériel
Comme
tous
SGBD
MySQL
permet
créer
gérer
bases
données
contexte
intéresse
langage
comme
PHP
capable
prendre
compte
commandes
MySQL
d'interroger
bases
données
créées
SGBD
communication
l'un
l'autre
fait
manière
souple
donnons
ci-dessous
illustration
Voici
requête
telle
qu'on
peut
l'effectuer
sous
MySQL
SELECT
upper
nom
prenom
login
FROM
inscrits
WHERE
choix=
'
'
ORDER
BY
nom
requête
sélectionne
valeurs
colonnes22
nom
prenom
table
s'appelant
inscrits
autant
colonne
choix
contienne
valeur
ordonne
résultats
ordre
alphabétique
valeurs
trouvées
colonne
nom
MySQL
produira
résultat
sous
forme
d'un
affichage
mettant
valeur
colonne
nom
majuscules
requête
effectuée
via
script
PHP
s'écrira
22
notions
tables
colonnes
termes
propres
utiliser
définis
suite
chapitre
Étienne
Vandeput
–
©
CeFIS
2005
59
Publier
Web
-
Perfectionnement
sqlquery=
SELECT
upper
nom
prenom
FROM
inscrits
WHERE
choix=
'
'
ORDER
BY
nom
queryresult=mysql_query
sqlquery
or
die
``
p
requête
échoué.
/p
Comme
peut
constater
requête
fournie
sous
forme
d'une
chaîne
caractères
stockée
préalablement
ici
variable
sqlquery
Syntaxiquement
parlant
point-virgule
nécessaire
MySQL
omis
chaîne
caractères
point-virgule
termine
toutefois
l'instruction
PHP
fonction
mysql_query
prend
chaîne
caractère
argument
renvoie
résultat
requête
variable
tableau
queryresult
exemple
script
pourra
exploiter
contenu
convenance
3.2
conception
d'une
base
données
conception
d'une
base
données
s'appuie
généralement
réalisation
d'un
schéma
décrivant
manière
statique
réalité
l'on
veut
prendre
compte
schémas
décrivons
démarche
consiste
isoler
entités
associer
C'est
raison
laquelle
parle
généralement
schéma
entités-relations-associations
schéma
ERA
réalisation
schémas
va
soi
contentons
ici
décrire
notions
principales
représentation
attardons
stratégies
notamment
différentes
formes
normalisation
relations
méthodes
conception
bases
données
3.2.1
Schémas
ERA
Formé
id
nom
prenom
…
Formation
participe
0-N
suivie
Participer
0-N
id
titre
nbrinscrits
…
assurée
1-1
Assurer
assure
1-N
Formateur
schéma
ERA
identifie
entités
L'identification
entités
réalisée
travers
d'interviews
personnes
occupées
domaine
documents
décrivant
activités
exemple
l'interview
directeur
CeFIS
pourrait
fournir
renseignements
propos
formations
organisées
personnes
organisent
responsables
participants
etc.
interview
pourraient
émerger
entités
telles
formation
formateur
formé
ouvrage
référence
local
…
principe
description
s'arrête
là
gestion
s'arrête
problème
gestion
formations
CeFIS
l'attribution
locaux
n'est
problème
notion
local
prise
compte
tous
cas
comme
entité
gérer
id
nom
…
entités
qualifiées
attributs
caractérisent
être
identifiée
entité
doit
avoir
identifiant
nature
d'un
identifiant
peut
être
variée
L'identifiant
souvent
simple
attribut
qualifié
naturel
l'information
permet
d'identifier
naturellement
l'enregistrement
nom
d'un
pays
exemple
souvent
construit
automatiquement
numéro
d'enregistrement
non
matricule
ISBN
…
peut
être
multiple
code
postal
localité
identifier
ville
village
3.2.2
Entités
associations
attributs
rôles
cardinalités
schéma
ERA
entités
reliées
entre
elles
associations
associations
peuvent
être
décrites
verbes
schéma
précédent
participer
assurer
associations
Étienne
Vandeput
–
©
CeFIS
2005
60
Publier
Web
-
Perfectionnement
Chaque
entité
possède
attributs
association
peut
posséder
aussi
attribut
propriété
doit
être
considérée
comme
entité
problème
traité
Ainsi
exemple
formé
pourrait
faire
partie
d'une
institution
base
données
conçue
manière
prendre
compte
traitements
spécifiques
institutions
celles-ci
doivent
être
considérées
comme
entités
Sinon
l'institution
peut
être
considérée
comme
attribut
formé
Chaque
entité
joue
rôle
association
formateur
assure
formation
alors
formation
assurée
formateur
nombre
d'entités
pouvant
jouer
rôle
appelé
cardinalité
l'exemple
précède
formé
inscrit
nombre
formations
variant
entre
0
pourrait
s'étonner
trouver
nombre
0
1
contexte
formé
connu
système
avoir
participé
certaines
années
formations
cela
sens
formation
assurée
seul
formateur
l'exemple
donne
moins
formation
Formé
Institution
id
nom
prenom
tel
…
travaille
1-N
id
nom
adresse
tel
…
engagé
Travailler
tel
1-N
présence
d'un
attribut
tel
chacun
éléments
entités
association
schéma
n'est
contradictoire
téléphone
formé
privé
celui
l'institution
celui
lieu
travail
bureau
3.2.3
Transformation
tables
Très
concrètement
entités
associations
vont
subsister
schéma
final
vont
être
transformées
tables
table
tout
simplement
ensemble
lignes
et/ou
colonnes
Chaque
ligne
correspond
enregistrement
chaque
colonne
information
propos
enregistrement
Tous
enregistrements
d'une
table
évidemment
caractérisés
manière
l'intersection
d'une
ligne
d'une
colonne
trouve
information
comme
verrons
plus
loin
d'un
certain
type
transformation
s'effectue
manière
suivante
relations
1
1
E2
E1
id1
…
0-1
0-1
E1
id1
id2
…
id2
E1
id1
E2
id2
E2
id2
id1
deux
entités
donnent
naissance
deux
tables
l'association
disparaît
L'identifiant
d'une
deux
entités
sert
lien
entre
deux
tables
parle
clé
étrangère
car
identifie
éléments
d'une
autre
table
relations
1
Formateur
Formation
id1
…
Assurer
1-1
Étienne
Vandeput
–
©
CeFIS
2005
1-N
id2
…
Formation
id1
id2
Formateur
id2
61
Publier
Web
-
Perfectionnement
deux
entités
donnent
naissance
deux
tables
l'association
disparaît
L'identifiant
l'entité
côté
1
sert
clé
étrangère
l'entité
côté
relations
deux
entités
donnent
naissance
deux
tables
l'association
troisième
identifiants
deux
entités
retrouvent
table
correspondant
l'association
Formation
Formé
id1
…
Participer
0-N
0-N
id2
…
Formation
id1
Formé
id2
Participer
id1
id2
3.2.4
Associations
ternaires
existe
relations
plus
complexes
relations
binaires
voici
exemple
Fournisseur
0-N
Commande
nocomm
…
nofourn
…
0-N
Assigner
Quantité
Proposer
1-N
0-N
0-N
Produit
noprod
…
fournisseur
propose
0
produits
produit
proposé
0
fournisseurs
commande
assignée
fournisseur
certaine
quantité
d'un
produit
3.2.5
Clés
étrangères
Lorsqu'un
schéma
ERA
établi
peut
être
converti
série
tables
relations
entre
tables
dépendent
identifiants
chacune
d'entre
elles
identifiant
d'une
table
présent
autre
table
appelé
clé
étrangère
clés
étrangères
permettent
relier
informations
entre
elles
SGBD
censés
gérer
correctement
clés
étrangères
notamment
mises
jour
insertions
suppressions
exemple
table
notes
contenant
notes
étudiants
chaque
enregistrement
contient
l'identifiant
l'étudiant
etud_id
exemple
suppression
d'un
étudiant
table
etudiants
l'identifiant
etud_id
devrait
entraîner
automatiquement
suppression
toutes
notes
étudiant
n'est
malheureusement
cas
MySQL
choix
d'implémentation
s'étant
focalisé
vitesse
traitement
déterminante
Internet
gestion
doit
être
prise
compte
programmeur
PHP
Étienne
Vandeput
–
©
CeFIS
2005
62
Publier
Web
-
Perfectionnement
3.3
tables
leurs
contenus
3.3.1
Structure
d'une
table
Avant
préciser
contenu
d'une
table
convient
d'en
définir
structure
savoir
nom
colonnes
type
d'information
qu'elles
vont
contenir
statut
éventuel
identifiant
jamais
vide
unique
…
tableau
reprend
nom
colonnes
type
d'information
contenue
voir
plus
loin
description
plus
complète
indication
précise
champ
peut
être
vide
l'exemple
prénom
peut
l'être
autre
précise
champ
fait
partie
l'identifiant
voir
paragraphe
suivant
valeur
défaut
s'il
information
supplémentaire
précise
cas
valeur
champ
incrémentée
manière
automatique
Plus
détails
donnés
suite
propos
différentes
options
possibles
3.3.2
Types
d'informations
types
d'informations
disponibles
assez
nombreux
types
généraux
évidemment
numérique
chaîne
caractères
date/heure
déclinent
multiples
sous-types
3.3.2.1
types
numériques
types
possibles
repris
tableau
ci-dessous
Nom
type
Espace
requis
Signé
Non
signé
TINYINT
1
octet
-27
27-1
0
28-1
SMALLINT
2
octets
-215
215-1
0
216-1
MEDIUMINT
3
octets
-223
223-1
0
224-1
INT
4
octets
-231
231-1
0
232-1
BIGINT
8
octets
-263
263-1
0
264-1
Espace
requis
Minimum
Maximum
FLOAT
4
octets
±1,17E-38
±3,40E+38
DOUBLE
8
octets
±2,23E-308
±1,80E-308
DECIMAL
M+2
octets
texte
texte
Nom
type
valeurs
optionnelles
sauf
type
DECIMAL
servent
gérer
l'affichage
exemple
DECIMAL
4,2
permet
coder
nombre
-99.99
999,99
Étienne
Vandeput
–
©
CeFIS
2005
63
Publier
Web
-
Perfectionnement
C'est
attribut
particulier
UNSIGNED
permet
déclarer
entiers
signés
non
l'attribut
ZEROFILL
permet
d'ajouter
zéros
l'affichage
atteindre
valeur
maximum
autorisée
3.3.2.2
types
chaînes
caractères
types
possibles
repris
tableau
ci-dessous
Nom
type
Espace
requis
Taille
maximale
octets
octets
VARCHAR
L+1
octets
octets
TINYBLOB
TINYTEXT
L+1
octets
28-1
octets
BLOB
TEXT
L+2
octets
216-1
octets
MEDIUMBLOB
MEDIUMTEXT
L+3
octets
224-1
octets
LONGBLOB
LONGTEXT
L+4
octets
232-1
octets
ENUM
``
val1
val2
…
1
2
octets
65.535
valeurs
SET
``
val1
val2
…
1
2
3
4
8
octets
64
valeurs
CHAR
longueur
chaîne
valeur
stockée
octets
supplémentaires
1
4
selon
longueur
valeurs
type
ENUM
stockées
comme
nombres
numéro
d'ordre
effet
diminuer
considérablement
taille
2
octets
suffisent
encoder
65.535
valeurs
Chaque
valeur
d'un
type
SET
codée
seul
bit
1
Ainsi
s'il
plus
4
valeurs
elles
codées
0001
0010
0100
1000
sorte
enregistrements
prend
première
troisième
valeurs
l'information
codée
0101
64
valeurs
faut
plus
8
octets
faut
encore
noter
colonne
type
VARCHAR
toutes
autres
colonnes
type
CHAR
deviendront
aussi
3.3.2.3
types
dates
heures
types
possibles
repris
tableau
ci-dessous
Nom
type
Espace
requis
Intervalle
DATE
3
octets
1000-01-01
``
9999-12-31
TIME
3
octets
-838:59:59
``
838:59:59
DATETIME
8
octets
1000-01-01
00:00:00
``
9999-12-31
00:00:00
TIMESTAMP
4
octets
19700101000000
2037…
YEAR
1
octet
1901
2155
Comme
pouvez
constater
dates
commencent
toujours
l'année
suivie
mois
jour
valeur
défaut
TIMESTAMP
correspond
date
l'heure
serveur
propre
fuseau
horaire
Étienne
Vandeput
–
©
CeFIS
2005
64
Publier
Web
-
Perfectionnement
3.4
primitives
gestion
d'une
base
données
3.4.1
Accès
BD
tables
3.4.1.1
Connexion
MySQL
ligne
commande
devez
préciser
nom
l'hôte
nom
d'utilisateur
mot
passe
\Program
Files\EasyPHP1-7\mysql\bin
mysql
-h
localhost
-u
root
-p
serveur
trouve
machine
locale
premier
paramètre
n'est
obligatoire
défaut
seul
utilisateur
reconnu
mysql
root
faut
fournir
mot
passe
L'instruction
suivante
convient
\Program
Files\EasyPHP1-7\mysql\bin
mysql
-u
root
encore
\Program
Files\EasyPHP1-7\mysql\bin
mysql
–uroot
premières
démarches
effectuer
MySQL
n'est
installé
localement
c'est
sécuriser
L'application
PHPMyAdmin
question
paragraphe
suivant
permet
d'effectuer
opération
remplaçant
exemple
l'utilisateur
root
utilisateur
administrateur
devra
fournir
mot
passe
L'administrateur
pourra
alors
définir
d'autres
utilisateurs
décider
finement
leurs
privilèges
opérations
vient
d'être
question
toutefois
réaliser
prudence
éviter
perdre
l'accès
serveurs
conseillé
rechercher
peu
documentation
Internet
propos23
avant
lancer
l'aventure
Toutefois
désinstallation
réinstallation
EasyPHP
rapides
relativise
danger
3.4.1.2
Déconnexion
MySQL
déconnecter
MySQL
utilise
commande
quit
mysql
quit
faut
noter
commandes
insensibles
casse
sauf
concerne
nom
bases
données
tables
3.4.1.3
Informations
BD
existantes
peut
obtenir
liste
bases
données
commande
mysql
show
databases
Toutes
commandes
fournies
ligne
commande
doivent
terminer
point-virgule
instruction
pouvant
s'étendre
plusieurs
lignes
convient
alors
sélectionner
base
données
travailler
opération
réalisée
grâce
commande
use
mysql
use
exemple
base
données
alors
accessible
pouvez
inquiéter
23
…comme
adresses
http
//www.wampserver.com/faq4.php
http
//linuxeduquebec.org/article.php3
id_article=4
Étienne
Vandeput
–
©
CeFIS
2005
65
Publier
Web
-
Perfectionnement
tables
composent
servant
commande
show
tables
mysql
show
tables
liste
tables
constituant
base
données
affichée
l'exemple
ci-contre
constate
qu'il
'
qu'une
seule
table
appelée
users
base
données
structure
d'une
table
nom
colonnes
types
autres
attributs
peut
être
obtenue
grâce
commande
describe
résultat
peut
également
être
obtenu
commande
show
columns
from
mysql
describe
users
commande
select
database
permet
connaître
base
données
active
mysql
select
database
Voilà
aperçu
commandes
permettent
d'obtenir
renseignements
souhaités
propos
bases
données
existantes
n'est
évidemment
encore
question
stade
d'interroger
bases
données
d'effectuer
requêtes
contenu
3.4.2
Création
gestion
contenu
d'une
BD
3.4.2.1
Création
d'une
base
données
création
d'une
base
données
implique
évidemment
celle-ci
complètement
décrite
niveau
conceptuel
schéma
ERA
niveau
logique
transformation
tables
commence
l'instruction
create
database
mysql
create
database
formations
commande
devra
être
suivie
création
différentes
tables
définition
structure
définition
colonnes
encodage
leurs
enregistrements
lignes
règle
d'attribution
noms
permet
d'utiliser
lettres
chiffres
caractères
déconseillé
s'en
doute
cause
PHP
_
nom
peut
composer
uniquement
chiffres
3.4.2.2
Suppression
d'une
base
données
suppression
d'une
base
données
fera
l'instruction
drop
mysql
drop
database
formations
clair
suppression
d'une
base
données
entraîne
suppression
toutes
tables
tous
enregistrements
qu'elle
contient
Voici
suivre
séquence
illustre
deux
commandes
ainsi
leurs
effets
Étienne
Vandeput
–
©
CeFIS
2005
66
Publier
Web
-
Perfectionnement
3.4.2.3
Création
d'une
table
table
créée
moyen
l'instruction
create
table
instruction
permet
nommer
table
s'accompagne
description
colonnes
type
leurs
attributs
éventuels
s'écrit
généralement
plusieurs
lignes
plus
lisibilité24
24
plupart
instructions
nécessitent
syntaxe
trop
rigoureuse
C'est
pourquoi
existe
applications
permettant
d'en
générer
code
via
interfaces
graphiques
décrivons
plus
loin
chapitre
Étienne
Vandeput
–
©
CeFIS
2005
67
Publier
Web
-
Perfectionnement
colonne
login
colonne
identifiante
primary
key
colonnes
prenom
statut
peuvent
contenir
valeurs
contrairement
colonnes
login
password
nom
possible
garnir
rapidement
table
autant
données
trouvent
fichier
grâce
l'instruction
load
data
exemple
possible
créer
fichier
texte
partir
d'Excel
récupérer
fichier
enregistré
format
texte
sous
nom
membres.txt
sauvegardé
répertoire
base
données
exemples
3.4.2.4
Suppression
d'une
table
table
supprimée
moyen
l'instruction
drop
table
mysql
drop
table
users
suppression
table
users
s'accompagne
comme
montre
résultat
commande
describe
suppression
structure
3.4.2.5
Modification
d'une
table
modification
d'une
table
entend
évidemment
modification
structure
nombreux
changements
peuvent
être
opérés
évoquons
quelques-uns
C'est
commande
alter
table
permet
modifications
suivie
nom
l'action
description
Parmi
actions
trouve
add
alter
drop
change
modify
rename
to
…
Étienne
Vandeput
–
©
CeFIS
2005
68
Publier
Web
-
Perfectionnement
souhaite
ajouter
colonne
depuis
contiendra
l'année
d'entrée
service
procèdera
comme
suit
mysql
alter
table
users
add
depuis
varchar
4
supprimer
colonne
depuis
utilisera
l'action
drop
mysql
alter
table
users
drop
depuis
l'action
add
options
first
after
suivi
nom
d'une
colonne
permettent
positionner
nouvelle
l'endroit
voulu
défaut
c'est
naturellement
fin
Voici
d'autres
exemples
mysql
alter
table
users
add
depuis
varchar
4
after
prenom
mysql
alter
table
users
add
depuis
varchar
4
commentaires
blob
titre
d'illustration
Étienne
Vandeput
–
©
CeFIS
2005
69
Publier
Web
-
Perfectionnement
ajouter
clé
primaire
colonne
utilisera
l'action
add
l'option
primary
key
Ainsi
exemple
estime
login
seul
n'est
identifiant
paire
login-password
commandera
mysql
alter
table
users
add
login
password
primary
key
Attention
MySQL
considère
qu'il
'
qu'un
seul
identifiant
possible
s'il
existe
déjà
faut
supprimer
avant
d'en
créer
autre
cela
utilise
l'action
drop
l'option
primary
key
comme
l'exemple
ci-dessous
peut
aussi
ajouter
index
colonnes
index
intéressants
sens
qu'ils
accélèrent
recherches
ralentissent
certains
autres
traitements
comme
l'insertion
d'une
ligne
table
exemple
ajout
fait
l'option
index
suivi
nom
colonnes
mysql
alter
table
users
add
index
nom
login
existe
plusieurs
sortes
clés
chaque
type
intérêt
connaissez
clés
primaires
clés
d'index
clés
unique
aussi
index
n'autorisent
valeurs
multiples
colonnes
lesquelles
elles
portent
mysql
alter
table
users
add
unique
login
permettra
lors
d'une
insertion
deux
enregistrements
valeur
login
supprimer
clé
unique
faut
utiliser
l'action
drop
l'option
index
suivie
nom
colonne
mysql
alter
table
users
drop
index
login
actions
change
modify
permettent
changer
définition
d'une
colonne
éventuellement
repositionner
première
permet
aussi
changer
nom
colonne
Ainsi
commande
mysql
alter
table
users
modify
depuis
varchar
4
not
null
after
prenom
Étienne
Vandeput
–
©
CeFIS
2005
70
Publier
Web
-
Perfectionnement
fournira
résultat
suivant
renommer
table
servira
l'action
rename
3.4.2.6
Copier
tables
peut
envisager
copie
tables
deux
manières

copie
intégrale
partielle
structure
données

copie
structure
deux
réalisent
moyen
commande
create
table
combinée
simple
commande
sélection
commandes
sélection
font
d'ailleurs
l'objet
section
suivante
copie
intégrale
mysql
create
table
util2
select
*
from
utilisateurs
copie
structure
Étienne
Vandeput
–
©
CeFIS
2005
71
Publier
Web
-
Perfectionnement
mysql
create
table
util2
select
*
from
utilisateurs
where
1=0
commande
donne
déjà
quelques
indications
attributs
commande
select
L'attribut
where
suivi
d'une
condition
vérifier
enregistrements
prendre
compte
Comme
1
n'est
jamais
égal
0
aucun
enregistrement
n'est
repris
nouvelle
table
toutefois
structure
table
originale
3.4.2.7
Ajouter
supprimer
mettre
jour
lignes
ajouter
ligne
table
utilise
commande
insert
différentes
manières
d'insérer
ligne
notamment
précisant

liste
colonnes
liste
valeurs
mysql
insert
users
login
password
nom
values
ldo
dddddd
Doumont
Observez
colonnes
citées
l'ordre
qu'elles
occupent
structure

liste
paires
colonne-valeur
mysql
insert
utilisateurs
set
nom='Donnay
'
login='jdo
'
password='eeeeee
'
commande
permet
d'insérer
qu'une
seule
ligne
fois

sélection
comme
l'exemple
ci-dessus
mysql
insert
utilisateurs
select…
instruction
permet
d'insérer
plusieurs
lignes
fois
demande
l'existence
d'une
table
laquelle
extraites
lignes
insérer
contraintes
cela
suppose
cohérence
noms
types
autres
attributs
colonnes
supprimer
lignes
utilise
commande
delete
from
commande
doit
être
agrémentée
d'une
condition
semblable
celles
l'on
trouve
souvent
commandes
select
précise
quels
lignes
doivent
disparaître
table
mysql
delete
from
utilisateurs
where
isnull
statut
manière
d'écrire
conditions
s'apparente
celles
l'on
trouve
plupart
langages
programmation
expressions
conditions
font
appel
variables
noms
ceux
colonnes
opérateurs
fonctions
constantes
voici
illustration
Étienne
Vandeput
–
©
CeFIS
2005
72
Publier
Web
-
Perfectionnement
l'expression
condition
utilisée
exemple
statut
joue
rôle
variable
isnull
fonction
renvoie
valeur
booléenne
attribut
limit
peut
être
utilisé
limiter
nombre
lignes
supprimées
mysql
delete
from
utilisateurs
where
isnull
statut
limit
1
n'aurait
supprimé
qu'une
seule
deux
lignes
mise
jour
informations
contenues
lignes
s'effectue
moyen
commande
update
commande
possède
aussi
attributs
where
limit
L'attribut
set
permet
préciser
quelles
colonnes
doivent
être
mises
jour
quelle
manière
commande
mysql
update
utilisateurs
set
login=concat
'
c-
'
login
effet
d'ajouter
tiret
devant
login
tous
utilisateurs
Étienne
Vandeput
–
©
CeFIS
2005
73
Publier
Web
-
Perfectionnement
l'expression
décrit
doit
devenir
colonne
login
retrouve
variable
login
fonction
concat
constante
chaîne
'
c-
'
3.4.3
Gestion
d'une
BD
PHPMyAdmin
Comme
dit
ailleurs
l'écriture
instructions
MySQL
souvent
fastidieuse
raison
existe
générateurs
code
permettent
gérer
bases
données
via
interfaces
graphiques
Toutefois
connaissance
syntaxe
d'un
tel
langage
reste
atout
résolution
problèmes
peuvent
surgir
lors
gestion
d'une
base
données
EasyPHP
comprend
application
PHPMyAdmin
offre
possibilité
gérer
bases
données
accessible
partir
menu
contextuel
programme
EasyPHP
interface
mérite
d'être
améliorée
permet
néanmoins
d'éviter
problèmes
syntaxe
Voici
illustration
d'un
écrans
interface
Sans
entrer
détail
application
précisons

l'onglet
Structure
permet
comme
s'en
doute
modifier
structure
tables
d'une
base
données

l'onglet
Afficher
permet
non
seulement
visualiser
lignes
d'une
table
aussi
éditer
facilement

l'onglet
SQL
permet
formuler
requête
qu'il
n'est
possible
formuler
l'intermédiaire
l'interface

l'onglet
Sélectionner
permet
construire
requêtes
comme
question
section
suivante
Étienne
Vandeput
–
©
CeFIS
2005
74
Publier
Web
-
Perfectionnement

l'onglet
Insérer
offre
facilités
génération
instructions
permettant
d'insérer
lignes
tables
autres
options
moins
importantes
stade
Comme
toutes
interfaces
type
connaissance
syntaxe
évidemment
très
éclairante
quand
signification
options
qu'elles
proposent
3.4.4
Sélection
d'informations
BD
3.4.4.1
requêtes
Toutes
primitives
venons
parler
servent
'
créer
utiliser
mettre
jour
bases
données
tables
qu'elles
censées
contenir
tout
autre
activité
consiste
interroger
bases
données
tirer
certain
nombre
d'informations
parle
généralement
requête
formuler
résultat
d'une
requête
présente
aussi
sous
forme
d'une
table
Dès
lors
rien
n'empêche
celle-ci
stockée
comme
autres
base
données
analysons
section
commande
select
base
formulation
requêtes
type
pouvoir
effectuer
requêtes
fines
commande
select
flanquée
nombreuses
options
présentons
d'abord
plus
importantes
d'entre
elles
reviendrons
fin
section
syntaxe
plus
complète
commande
3.4.4.2
Sélectionner
Quand
pense
sélectionner
imagine
extraire
l'information
d'une
plusieurs
tables
constituant
base
données
commande
select
permet
réaliser
souhait
toutefois
plus
générale
n'est
absolument
nécessaire
préciser
nom
table
L'écriture
d'une
simple
expression
suffit
voici
quelques
illustrations
3.4.4.3
Sélectionner
colonnes
Quand
parle
sélection
seule
table
peut
être
question
colonnes
lignes
d'un
mélange
deux
peut
préciser
quelles
colonnes
veut
sélectionner
informations
sélection
plus
simple
celle
consiste
sélectionner
toutes
colonnes
mysql
select
*
from
utilisateurs
fera
afficher
toutes
colonnes
table
utilisateurs
Étienne
Vandeput
–
©
CeFIS
2005
75
Publier
Web
-
Perfectionnement
Toutes
commandes
sélection
demandent
préciser
tables
concernées
celle-ci
mot
clé
'introduit
from
cas
informations
toutes
colonnes
souhaitées
convient
préciser
celles
concernées
mysql
select
nom
prenom
login
from
utilisateurs
fera
afficher
informations
colonnes
nom
prenom
login
sélection
peut
être
accompagnée
d'un
traitement
données
Ainsi
peut
souhaiter
voir
noms
apparaître
majuscules
mysql
select
upper
nom
prenom
from
utilisateurs
C'est
rôle
fonction
upper
transformer
caractères
majuscules
résultats
nécessairement
composés
d'informations
issues
base
données
aussi
traitements
effectués
informations
comme
…ou
mieux
Étienne
Vandeput
–
©
CeFIS
2005
76
Publier
Web
-
Perfectionnement
3.4.4.4
Sélectionner
lignes
sélection
lignes
partir
d'une
plusieurs
table
s'effectue
définissant
clause
l'aide
mot-clé
where
clause
expression
booléenne
écriture
nouveau
assemblage
variables
colonnes
constantes
opérateurs
fonctions
Parmi
opérateurs
fonctions
retrouve
grands
classiques
présents
plupart
langages
n'allons
énumérer
ici25
mentionnons
quelques-uns
plus
spécifiques
SGBD
travers
quelques
exemples
L'opérateur
in
permet
rechercher
valeur
liste
évidemment
possible
combiner
sélection
lignes
sélection
colonnes
l'exemple
précède
l'opérateur
between
permet
rechercher
valeur
intervalle
25
pourrez
trouver
documentation
assez
complète
opérateurs
fonctions
disponibles
l'adresse
http
//dev.mysql.com/doc/mysql/fr/
Étienne
Vandeput
–
©
CeFIS
2005
77
Publier
Web
-
Perfectionnement
Comme
peut
voir
l'opérateur
like
autorise
sélections
utilisant
caractères
génériques
nombreux
autres
opérateurs
existent
comme
not
like
not
between…and
not
in
is
null
encore
is
not
null
dehors
opérateurs
classiques
arithmétiques
logiques
comparaison
3.4.4.5
Opérer
classements
L'option
order
by
attribut
asc
desc
permettent
présenter
informations
ordre
choisi
éléments
d'une
colonne
mysql
select
prenom
upper
nom
login
order
by
prenom
asc
lignes
ici
présentées
l'ordre
alphabétique
ascendant
prénoms
3.4.4.6
Opérer
regroupements
Outre
fait
trier
lignes
peut
souhaiter
dernières
subissent
certain
regroupement
regroupement
doit
évidemment
précéder
tri
s'il
clause
utilisée
cas
clause
group
by
clause
permet
regrouper
lignes
selon
valeurs
d'une
plusieurs
colonnes
Attention
s'il
'
qu'une
seule
colonne
concernée
clause
s'agit
d'un
tri
bien
d'un
regroupement
illustrer
regroupements
convient
travailler
base
données
peu
plus
élaborée
C'est
faisons
après
avoir
précisé
deux
nouveaux
opérateurs
utilisables
commande
select
clause
group
by
peut
être
accompagnée
d'une
autre
clause
having
permettant
d'effectuer
filtrage
supplémentaire
lorsque
regroupement
effectué
exemples
suivront
3.4.4.7
Limiter
nombre
résultats
peut
souhaiter
obtenir
tous
résultats
seulement
certain
nombre
quelquefois
seul
L'attribut
limit
permet
fixer
nombre
Ainsi
s'intéresse
'
première
ligne
vérifiant
critère
donné
peut
procéder
comme
l'exemple
suivant
mysql
select
prenom
upper
nom
where
depuis
'1990
'
order
by
nom
limit
1
ligne
retournée
celle
première
personne
ordre
alphabétique
noms
engagée
après
1990
Étienne
Vandeput
–
©
CeFIS
2005
78
Publier
Web
-
Perfectionnement
3.4.4.8
Éliminer
doublons
s'agit
considérer
lignes
identiques
table
sélection
lignes
identiques
table
résultats
utilise
cela
l'opérateur
distinct
exemple
recherche
quelles
lettres
commencent
noms
utilisateurs
3.4.4.9
Syntaxe
plus
complète
commande
select
commande
select
peut
s'écrire
manière
relativement
longue
plusieurs
clauses
plusieurs
opérateurs
utilisés
principales
clauses
principaux
opérateurs
suivants

distinct
opérateur

from
mot-clé

where
clause

group
by
clause

having
clause

order
by…
asc
desc
clause

limit
opérateur
3.4.5
Sélections
multi-tables
3.4.5.1
Création
tables
Rappelons-nous
qu'une
base
données
rarement
composée
d'une
seule
table
transformation
schéma
conceptuel
aboutit
nécessairement
nombre
plus
moins
élevé
tables
continuer
illustrer
propos
allons
quelque
peu
modifier
base
données
repartir
d'un
schémas
simples
proposés
schéma
décrit
centre
formation
formés
participent
formations
assurées
formateurs
Étienne
Vandeput
–
©
CeFIS
2005
Formé
id
nom
prenom
…
Formation
participe
0-N
suivie
Participer
0-N
id
titre
nbrinscrits
…
assurée
1-1
Assurer
assure
1-N
Formateur
id
nom
…
79
Publier
Web
-
Perfectionnement
Tâchons
réfléchir
transformation
schéma
tables
allons
modifier
peu
schéma
étoffant
nombre
d'attributs
entités
ajoutant
voire
deux
attributs
l'association
attribut
paye
précise
formé
payé
inscription
attribut
attente
précise
l'inscription
retenue
formé
fait
partie
d'une
liste
d'attente
Notez
aussi
table
utilisateurs
servi
d'exemple
jusqu'ici
reconvertie
table
formateurs
grâce
vertu
commande
alter
table
…
rename
…
Forme
id
nom
prenom
naissance
institution
Formation
participe
1-N
Participer
paye
attente
suivie
0-N
id
titre
assurée
1-1
Assurer
assure
1-N
Formateur
id
nom
prenom
depuis
statut
L'identificateur
id
fait
office
d'identifiant
l'entité
formateur
faudra
s'assurer
programmation
deux
formateurs
n'ont
identifiant
Chaque
formé
participe
moins
formation
sauf
qu'il
peut-être
attente
formation
schéma
simple
toutefois
suffisant
illustrer
propos
clair
pourrions
rajouter
attributs
tels
l'adresse
formés
formateurs
prérequis
d'une
formation
etc
informations
supplémentaires
vont
aider
comprendre
mieux
qu'il
comprendre
première
démarche
consiste
transformer
schéma
table
relation
entre
formé
formation
relation
plusieurs
plusieurs
L'association
Participer
va
donner
naissance
table
reprenant
attributs
association
paye
attente
aussi
identifiants
chacune
entités
qu'elle
associe
relation
entre
formateur
formation
relation
plusieurs
conséquence
comme
l'avons
vu
précédemment
l'association
Assurer
donnera
naissance
table
tout
quatre
tables

formes
correspond
l'entité
Formé

formations
correspond
l'entité
Formation

inscriptions
correspond
l'association
Participer

formateurs
correspond
l'entité
Formateur
table
formes
décidé
choisir
identifiant
automatiquement
généré
MySQL
formé
nom
prénom
année
naissance
institution
souhaitait
développer
notion
d'institution
exemple
raisons
contact
courrier
autre
ferait
certainement
entité
Étienne
Vandeput
–
©
CeFIS
2005
80
Publier
Web
-
Perfectionnement
table
formations
comprend
trois
attributs
identifiant
construit
deux
derniers
chiffres
l'année
lettre
formation
titre
provenant
l'association
Assurer
l'identifiant
formateur
table
inscriptions
compose
identifiants
chacune
entités
l'association
Participer
attributs
paye
attente
choisis
type
enum
Enfin
table
formateurs
l'ancienne
table
utilisateurs
décidé
l'identificateur
identifiant
seul
non
mot
passe
d'ailleurs
disparu
structure
Afin
bien
comprendre
opérations
jointures
font
l'objet
paragraphe
suivant
importe
visualiser
contenu
différentes
tables
moment
jointures
effectuées
voici
commencer
table
formes…
Étienne
Vandeput
–
©
CeFIS
2005
81
Publier
Web
-
Perfectionnement
…ensuite
table
formations…
…la
table
inscriptions…
…et
finalement
table
formateurs
3.4.5.2
Jointures
L'opération
consiste
fusionner
d'une
manière
d'une
autre
informations
deux
plusieurs
tables
porte
nom
jointure
existe
différents
types
jointures
propos
n'est
décrire
tous
contenterons
d'en
illustrer
deux
jointures
plus
intéressantes
l'équijointure
C'est
jointure
basée
condition
d'égalité
noms
colonnes
doivent
nécessairement
être
identiques
comme
jointures
dites
naturelles26
l'égalité
porte
nécessairement
clés
primaires
étrangères
26
jointures
naturelles
font
base
colonnes
portant
mêmes
noms
mêmes
caractéristiques
Étienne
Vandeput
–
©
CeFIS
2005
82
Publier
Web
-
Perfectionnement
mysql
select
nom
prenom
titre
from
formes
formations
inscriptions
where
id_formation=formations.id
&
&
id_forme=formes.id
commande
précède
va
permettre
sélectionner
deux
colonnes
table
formes
table
formations
réalité
va
produire
l'affichage
toutes
inscriptions
prises
sous
forme
nom
prénom
l'inscrit
titre
formation
laquelle
inscrit
jointure
fait
l'intermédiaire
l'identifiant
table
inscriptions
composé
deux
clés
étrangères
remarquerez
certaines
colonnes
clause
where
écrites
sous
nom
long
nom
table
nom
colonne
C'est
dû
nécessité
confondre
noms
colonnes
identiques
deux
tables
ici
id
autres
colonnes
'
d'ambiguïtés
peut
combiner
jointure
tri
comme
commande
suivante
demandant
d'afficher
résultats
ordre
alphabétique
noms
puis
titres
mysql
select
nom
prenom
titre
from
formes
formations
inscriptions
where
id_formation=formations.id
&
&
id_forme=formes.id
order
by
nom
titre
Étienne
Vandeput
–
©
CeFIS
2005
83
Publier
Web
-
Perfectionnement
différent
commande
suit
tri
d'abord
réalisé
titre
puis
nom
mysql
select
nom
prenom
titre
from
formes
formations
inscriptions
where
id_formation=formations.id
&
&
id_forme=formes.id
order
by
titre
nom
certains
cas
raccourcir
l'écriture
requêtes
utilise
alias
tables
mysql
select
nom
prenom
titre
from
formes
f1
formations
f2
inscriptions
where
id_formation=f2.id
&
&
id_forme=f1.id
order
by
titre
nom
table
formes
comme
alias
f1
table
formations
f2
d'autres
cas
utilisation
inévitable
comme
cas
autojointures
recherchons
liste
inscrits
nés
année
donnerons
commande
mysql
select
f1.nom
f1.naissance
from
formes
f1
formes
f2
where
f1.naissance=f2.naissance
&
&
f1.id
=f2.id
Étienne
Vandeput
–
©
CeFIS
2005
84
Publier
Web
-
Perfectionnement
commande
crée
deux
alias
table
permet
comparer
ligne
toutes
autres
exemple
retenus
nom
date
naissance
lignes
première
instance
table
lorsque
année
naissance
retrouvée
autre
ligne
existe
d'autres
types
jointures
trouvera
bibliographie
ouvrages
intéressants
propos
3.5
Gérer
BD
PHP
3.5.1
principe
communication
gestion
d'une
base
données
MySQL
bien
amorcée
reste
voir
comment
PHP
peut
s'en
accommoder
vu
requêtes
fournies
PHP
sous
forme
chaînes
caractères
éventuellement
stockées
variables
avant
d'être
prises
charge
fonctions
fonctions
question
fonctions
communication
MySQL
importe
d'en
connaître
principales
savoir
qu'elles
prennent
argument
qu'elles
retournent
comme
types
valeurs
3.5.2
fonctions
PHP
existe
bonne
trentaine
fonctions
dédiées
communication
entre
PHP
MySQL
illustrons
ici
celles
paraissent
plus
intéressantes
premiers
stades
développement
d'une
application
gestion
base
données
PHP
3.5.2.1
mySql_connect
fonction
permet
d'établir
connexion
serveur
MySQL
prend
trois
arguments
type
chaîne
nom
l'hôte
nom
l'utilisateur
mot
passe
entier
mySql_connect
chaine
hôte
chaîne
utilisateur
chaîne
mot
passe
Tous
arguments
optionnels
existent
défaut
localhost
propriétaire
processus
mot
passe
vide
Voici
exemple
concret
d'ouverture
connexion
php
link
=
mysql_connect
``
localhost
``
root
``
or
die
``
p
Impossible
connecter
``
.mysql_error
``
/p
Étienne
Vandeput
–
©
CeFIS
2005
85
Publier
Web
-
Perfectionnement
print
``
Connexion
réussie
``
mysql_close
link
exemple
illustre
diverses
choses
fonction
renvoie
entier
identifiant
connexion
valeur
utilisée
clore
connexion
moyen
d'une
autre
fonction
mySql_close
prend
argument
renvoie
valeur
booléenne
Notez
précision
valeur
exemple
inutile
n'est
lorsque
confusion
possible
qu'elle
devient
nécessaire
plusieurs
connexions
ouvertes
exemple
fermeture
connexion
n'est
nécessaire
accompagne
fin
l'exécution
script
paramètres
fournis
fonction
ceux
fournis
lors
d'une
connexion
normale
MySQL
via
ligne
commande
L'exécution
fonction
s'accompagne
d'une
option
commande
script
terminer
connexion
peut
avoir
lieu
mot-clé
die
synonyme
exit
die
comporte
comme
fonction
sens
qu'elle
peut
prendre
comme
argument
chaîne
caractères
affichée
cas
d'arrêt
script
mySql_error
aussi
fonction
renvoie
chaîne
caractères
contenant
texte
message
d'erreur
existe
fonction
mySql_pconnect
rend
connexions
permanentes
évite
pertes
temps
certains
cas
3.5.2.2
mySql_create_db
fois
connecté
serveur
MySQL
convient
d'activer
base
données
d'en
créer
création
d'une
base
données
s'effectue
biais
fonction
mySql_create_db
booléen
mySql_create_db
chaîne
base
données
entier
lien
Voici
illustration
l'utilisation
fonction
php
link
=
mysql_pconnect
``
localhost
``
root
``
or
die
``
Connexion
impossible
if
mysql_create_db
``
ma_db
{
echo
``
p
base
données
correctement
créée.\n
/p
}
else
{
echo
``
p
Erreur
lors
création
base
``
.mysql_error
``
/p
}
noter
fonction
mySql_query
déjà
illustrée
tout
début
chapitre
permet
d'obtenir
résultat
commande
create
database
préférée
précédente
exemple
résultat
renvoyé
fonction
utilisé
test
3.5.2.3
mySql_select_db
fonction
renvoie
booléen
permet
sélectionner
base
données
prend
comme
arguments
nom
base
données
l'entier
lien
résultant
l'ouverture
connexion
booléen
mySql_select_db
chaîne
base
données
entier
lien
séquence
classique
script
PHP
php
link
=
mysql_connect
'localhost
'
'root
'
``
Étienne
Vandeput
–
©
CeFIS
2005
86
Publier
Web
-
Perfectionnement
if
link
{
die
'Non
connecté
'
mysql_error
}
db
=
mysql_select_db
'ma_db
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'.mysql_error
'
/p
'
}
3.5.2.4
mySql_query
connexion
bien
établie
base
données
bien
sélectionnée
possible
d'émettre
toutes
requêtes
possibles
imaginables
créations
tables
insertions
suppressions
mises
jour
lignes
sélections
diverses
…
confiera
nécessairement
script
PHP
soin
créer
tables
surtout
celles-ci
permanentes
l'application
pourquoi
fonction
mySql_query
importante
car
permet
véhiculer
toutes
requêtes
d'en
récupérer
résultats
entier
mySql_query
chaîne
requête
entier
lien
requêtes
d'insertion
suppression
mise
jour
retourne
valeur
booléenne
sélection
renvoie
tableau
résultats
Voici
nouveau
illustration
séquence
possible
php
link
=
mysql_connect
'localhost
'
'root
'
``
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'exemple
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery=
select
prenom
nom
institution
from
formes
order
by
nom
queryresult=mysql_query
sqlquery
…
requête
MySQL
stockée
variable
sqlquery
passée
argument
fonction
mysql_query
existe
également
fonction
mySql_db_query
semblable
précédente
n'est
qu'elle
prend
argument
plus
nom
base
données
laquelle
porte
requête
fonction
renvoie
entier
identifie
requête
stocké
l'exemple
variable
queryresult
entier
utilisé
suite
fonctions
d'exploration
résultats
telles
celles
suivent
3.5.2.5
mySql_fetch_row
fonction
renvoie
sous
forme
d'un
tableau
ligne
courante
chaque
appel
c'est
ligne
suivante
prise
compte
jusqu
'
qu'il
'
plus
auquel
cas
fonction
renvoie
valeur
false
Étienne
Vandeput
–
©
CeFIS
2005
87
Publier
Web
-
Perfectionnement
tableau
mySql_fetch_row
entier
résultat
L'entier
résultat
celui
identifie
requête
effectuée
via
mySql_query
tableau
indexé
partir
0
peut
être
parcouru
exploitation
valeurs
comme
l'exemple
suivant
php
echo
``
h1
Liste
inscrits
/h1
link
=
mysql_connect
'localhost
'
'root
'
``
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'exemple
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery=
select
nom
prenom
institution
from
formes
order
by
nom
queryresult=mysql_query
sqlquery
while
row=mysql_fetch_row
queryresult
{
echo
``
p
strong
row
1
``
row
0
``
/strong
``
row
2
``
/p
}
petit
script
ouvre
base
données
exemple
lance
requête
portant
trois
colonnes
table
formes
informations
récupérées
ligne
ligne
tableau
row
mises
forme
affichage
correct
Voici
cela
donne
Étienne
Vandeput
–
©
CeFIS
2005
88
Publier
Web
-
Perfectionnement
3.5.2.6
mySql_fetch_array
function
quasi
identique
précédente
différence
réside
fait
qu'elle
possède
argument
plus
argument
précise
l'intermédiaire
d'une
constante
MYSQL_NUM
MYSQL_ASSOC
tableau
indexé
classiquement
c'est
tableau
associatif
auquel
cas
noms
colonnes
peuvent
être
utilisés
tableau
mySql_fetch_array
entier
résultat
entier
type
boucle
l'exemple
précédent
peut
être
remplacée
while
row=mysql_fetch_array
queryresult
MYSQL_ASSOC
{
echo
``
p
strong
row
'prenom
'
``
row
'nom
'
``
/strong
``
row
'institution
'
``
/p
}
3.5.2.7
mySql_num_rows
fonction
renvoie
comme
s'en
doute
nombre
lignes
résultat
cas
d'une
requête
sélection
particulièrement
utile
lorsqu'on
veut
s'assurer
qu'il
p
php
link
=
mysql_connect
``
localhost
``
root
``
mysql_select_db
``
exemple
link
queryresult
=
mysql_query
``
SELECT
*
FROM
formateurs
link
num_rows
=
mysql_num_rows
queryresult
if
num_rows
{
echo
``
formateurs
``
}
else
{
echo
``
num_rows
formateurs.\n
}
/p
exemple
3.5.2.8
mySql_affected_rows
C'est
tout
simplement
correspondant
fonction
précédente
requêtes
mises
jour
révèle
utile
mesure
permet
tenir
l'utilisateur
courant
train
passer
3.5.2.9
Autres
fonctions
n'avons
illustré
fonctions
plus
directement
utiles
autres
fonctions
utilisées
plus
occasionnellement
rôle
cependant
facile
comprendre
compris
rôle
celles
précédé
plus
souvent
nom
fournit
déjà
bonne
description
quoi
elles
destinées
Citons
tout
fonctions
permettent
connaître
caractéristiques
Étienne
Vandeput
–
©
CeFIS
2005
89
Publier
Web
-
Perfectionnement
l'information
issue
d'une
colonne
résultat
notamment
longueur
mySql_field_len
nom
mySql_field_name
nom
table
mySql_field_table
type
mySql_field_type
…
reste
renvoyons
l'excellente
documentation
ligne
ouvrages
cités
bibliographie
3.6
Bilan
chapitre
survolé
grand
nombre
connaissances
évoqué
certain
nombre
savoir-faire

réaliser
schéma
ERA

transformer
schéma
tables

maîtriser
langage
MySQL

maîtriser
fonctions
base
permettant
PHP
communiquer
MySQL

…
éléments
permettent
traiter
complètement
applications
allient
création
pages
dynamiques
gestion
bases
données
Certaines
requêtes
n'ont
envisagées
sous
l'angle
PHP
telles
l'insertion
mise
jour
lignes
d'une
table
connaissez
principe
L'utilisation
formulaires
va
s'avérer
particulièrement
intéressante
gestion
données
l'utilisateur
remplissant
va
permettre
l'enregistrement
lignes
tables
également
possible
via
scripts
correctement
écrits
renvoyer
formulaires
garnis
d'information
compléter
modifier
Tout
place
réalisation
d'une
application
ligne
listes
primitives
fonctions
opérateurs
différents
langages
loin
d'avoir
explorées
fond
Voici
petit
exercice
commencer
douceur
3.7
Exercice

va
s'agir
concevoir
mini
schéma
ERA
décrivant
situation
connaissez
schéma
comprendra
plus
deux
trois
entités
minimum
deux
moins
association
plusieurs
plusieurs

Lorsque
schéma
complet
transformez-le
tables
selon
règles
établies
Déterminez
clairement
attributs
chacune
entités
identifiez
correctement
clés
primaires
clés
étrangères

Créez
base
données
tables
aidant
l'interface
PHPMyAdmin
Ajoutez-y
déjà
quelques
lignes

Écrivez
script
PHP
affiche
quelques
colonnes
d'une
tables
mise
forme
particulière

Écrivez
script
PHP
effectue
requête
portant
plusieurs
tables

Écrivez
script
PHP
permette
modifier
données
d'une
table
faire
utilisez
formulaires
allez
garnir
informations
disponibles
L'utilisateur
modifiera
données
formulaires
donnera
l'ordre
d'enregistrer
page
dynamique
construite
fournir
tous
renseignements
nécessaires
déroulement
traitement
effectué
base
données
Étienne
Vandeput
–
©
CeFIS
2005
90
Publier
Web
-
Perfectionnement
4
Application
4.1
Introduction
Afin
mettre
musique
différents
éléments
présentés
trois
premiers
chapitres
proposons
d'insister
démarches
mettre
œuvre
lors
développement
d'une
application
application
entendons
essentiellement
deux
choses

mise
place
d'un
programme
sous
forme
d'un
ensemble
scripts
objectif
principal
fourniture
d'informations
extraites
d'une
base
données
mise
jour

création
l'interface
communication
permettant
être
humain
selon
privilèges
accordés
gérer
base
données
et/ou
formuler
demandes
propos
d'informations
qu'elle
censée
contenir
conception
d'une
telle
application
élémentaire
soit-elle
demande
bonne
analyse
l'environnement
lequel
supposée
s'exécuter
Sans
aller
jusqu'au
développement
complet
l'exemple
allons
traiter
insisterons
points
importants
négliger
démarche
conception
d'une
telle
application
4.2
énoncé
raffiner
Lorsqu'il
s'agit
d'imaginer
application
Web
but
couvrir
domaine
d'activité
relativement
bien
connu
nécessaire
disposer
d'une
bonne
description
domaine
Diverses
techniques
possibles
afin
récolter
maximum
d'informations
pertinentes
interview
acteurs
responsables
analyse
documentation
existe
exercice
description
l'application
analyse
d'applications
similaires
…
acteurs
activités
également
importantes
cerner
manière
modéliser
réalité
trop
étendue
D'où
l'importance
prendre
compte
public
auquel
application
destinée
allons
tâcher
d'illustrer
cela
très
concrètement
base
d'un
énoncé
issu
description
écrite
d'une
situation
personne
réputée
bien
connaître
description
forcément
incomplète
amenés
faire
suppositions
pourraient
révéler
incorrectes
elles
rapidement
confrontées
l'avis
principaux
acteurs
Ceci
donne
déjà
quelques
indications
manière
procéder
avant
réfléchir
schéma
conceptuel
Voici
l'énoncé
fourni
s'agirait
mettre
l'intranet
d'une
école
voire
Internet
informations
concernant
stages
élèves
peut
décrire
situation
disant
qu'il

maîtres
stages

élèves
puériculture
12
classes
réparties
5e
6e
7e
puériculture
nursing
6
classes
réparties
5e
6e
nursing
gériatrie
2
classes
réparties
5e
6e
gériatrie

lieux
stages
vingtaine
lieux
différents

périodes
stages
Pendant
période
lieu
élèves
aussi
bien
nursing
puériculture
tant
5e
6e
7e
retrouvent
parfois
ensemble
titre
d'exemples
voici
quelques
opérations
différents
acteurs
pourraient
avoir
envie
réaliser
Étienne
Vandeput
–
©
CeFIS
2005
91
Publier
Web
-
Perfectionnement

élève
telle
classe
pourrait
rechercher
quel
moment
va
stage
quel
lieu
quel
professeur
quels
élèves
quelles
classes

professeur
chercherait
quels
élèves
supervise
quelle
période

s'il
accès
via
Internet
telle
crèche
pourrait
savoir
quels
élèves
telle
classe
section
va
devoir
accueillir
tel
moment
simple
description
bien
sûr
fort
incomplète
va
cependant
permettre
mettre
évidence
certain
nombre
démarches
pratiques
paraissent
fondamentales
4.3
bon
schéma
conceptuel
4.3.1
Première
ébauche
première
démarche
consiste
représenter
domaine
l'activité
sous
forme
d'un
schéma
conceptuel
schéma
entités-associations
peut
très
bien
convenir
genre
d'opération
entités
comme
associations
rôles
peuvent
généralement
être
mis
évidence
travers
discours
cardinalités
peuvent
également
être
déduites
discours
faire
l'objet
sinon
d'une
demande
précision
description
précède
retirons
d'abord
qu'il
élèves
professeurs
maîtres
stage
lieux
stage
également
question
stages
notion
stage
plus
délicate
cerner
notamment
concerne
l'établissement
cardinalités
peut
considérer
qu'un
stage
prestation
notée
d'un
élève
lieu
domaine
fixés
élèves
font
partie
d'une
classe
considérons
stages
déroulent
pendant
période
compacte
signifie
d'une
date
autre27
retenons
premier
temps
entités
Élève
Maître
Stage
Lieu
Date
Classe
élève
fait
partie
d'une
classe
effectue
stages
stages
déroulent
lieux
commencent
certaine
date
finir
autre
maîtres
stage
supervisent
stages
élève
appartient
seule
classe
classe
compose
d'au
moins
élève
L'élève
effectue
participe
minimum
stage
lorsque
parlons
d'un
stage
s'agit
celui
d'un
seul
élève
stage
déroule
seul
lieu
implantations
différentes
d'un
lieu
peuvent
exister
considérons
celles-ci
déterminantes
l'activité
consultation
mise
jour
envisageons
lieu
accueille
généralement
plusieurs
stages
stage
supervisé
seul
maître
stage
maître
stage
supervise
habituellement
plusieurs
stages
stage
commence
certaine
date
termine
autre
date
potentiellement
date
début
plusieurs
stages
date
fin
plusieurs
autres
Tout
cela
donne
schéma
ERA
suivant
allons
remanier
4.3.1.1
Réflexion
cardinalités
Plusieurs
éléments
prendre
compte
propos
associations
S'agit-il
relations
plusieurs
plusieurs
plusieurs
Ceci
concerne
deux
côtés
l'association
s'intéresse
seul
deux
côtés
faut
également
déterminer
cardinalité
démarre
zéro
réponse
première
question
évidente
description
domaine
claire
réponse
deuxième
dépend
l'importance
accordée
l'entité
Existe-t-elle
l'absence
d'instanciation
27
clair
tels
choix
orientent
modélisation
celle-ci
représente
plus
moins
bien
réalité
Étienne
Vandeput
–
©
CeFIS
2005
92
Publier
Web
-
Perfectionnement
l'association
oui
zéro
bon
choix
exemple
lieu
stage
peut
exister
base
données
alors
qu'aucun
élève
'
rend
cours
année
maître
stage
peut
retrouver
occasionnellement
sans
élèves
superviser
Cela
n'empêche
système
prendre
compte
série
traitements
comme
exemple
permettre
consulter
informations
stages
Date
date
début
0-N
0-N
début
commence
Élève
participe
fin
1-1
1-1
Stage
exécuté
date
fin
termine
supervisé
participation
1-N
appartient
1-1
appartenance
compose
1-N
Classe
supervise
Maître
supervision
1-1
1-1
déroule
0-N
1-1
déroulement
accueille
0-N
Lieu
Côté
dates
admettra
facilement
qu'une
date
donnée
corresponde
début
fin
d'aucun
stage
concerne
allons
quelque
peu
simplifier
schéma
4.3.2
Améliorations
schéma
4.3.2.1
Retouches
schéma
conceptuel
stade
importe
demander
toutes
entités
vraiment
utiles
sens
lors
passage
schéma
logique
elles
vont
donner
lieu
tables
cas
présent
aussi
simple
considérer
l'entité
stage
comme
attributs
date
début
date
fin
Cela
réduira
nombre
tables
gérer
l'activité
envisagée
fait
peu
place
notion
classe
entité
peut
être
transformée
attribut
l'entité
élève
lieu
c'est
plus
délicat
car
souhaitons
responsables
d'un
lieu
stage
puissent
également
bénéficier
services
l'application
devons
maintenir
lieu
comme
entité
Étienne
Vandeput
–
©
CeFIS
2005
93
Publier
Web
-
Perfectionnement
4.3.2.2
Attributs
entités
associations
bon
chacune
entités
possède
identifiant
application
utilisée
différents
types
clients
bon
chacun
ceux-ci
possède
outre
mot
passe
pourrait
également
faire
évoluer
schéma
sens
qu'un
lieu
stage
pourrait
compter
plusieurs
utilisateurs
chacun
identifiant
mot
passe
allons
simplifier
dernier
problème
considérant
raisonnable
utilisateurs
potentiels
servent
identifiant
mot
passe
faisant
pouvons
créer
deux
attributs
l'entité
lieu
représentent
autres
attributs
dépendent
essentiellement
informations
souhaite
disposer
propos
entités
associations
mises
évidence
Citons
minimum
comme
exemples
nom
prénom
élèves
maîtres
dénomination
adresse
principale
lieux
note
participation
stage
décidé
note
attribut
participation
bien
cas
vu
cardinalité
1-1
entre
association
l'entité
stage
pu
faire
directement
attribut
l'entité
Voici
comment
évolue
schéma
Élève
login
pw
nom
prenom
classe
participe
1-N
Stage
exécuté
participation
note
supervisé
id
domaine
date_debut
1-1
date_fin
1-1
déroule
supervise
supervision
0-N
Maître
login
pw
nom
prenom
1-1
déroulement
accueille
0-N
Lieu
login
pw
denomination
adresse
nom
prenom
peu
anormal
voir
apparaître
attributs
nom
prénom
l'entité
lieu
s'agit
coordonnées
d'un
responsable
n'avons
voulu
faire
entité
aménagement
non
obligatoire
dû
l'intérêt
d'avoir
structure
semblable
l'ensemble
utilisateurs
l'application
élèves
maîtres
stage
responsables
site
autorise
simplifications
niveau
code
voir
plus
loin
4.4
schéma
logique
transformation
schéma
conceptuel
schéma
logique
quasi
automatique
Seules
associations
plusieurs
plusieurs
donnent
naissance
tables
supplémentaires
'
l'exemple
seulement
quatre
tables
correspondant
entités
schéma
Étienne
Vandeput
–
©
CeFIS
2005
94
Publier
Web
-
Perfectionnement
L'attribut
note
retrouve
table
stage
occupant
place
centrale
schéma
contiendra
clés
étrangères
permettant
liens
entités
élève
maître
lieu
attributs
porteront
noms
id_eleve
id_lieu
id_maitre
Élève
login
pw
nom
prenom
classe
Stage
id
domaine
date_debut
date_fin
note
id_eleve
id_maitre
id_lieu
Maître
login
pw
nom
prenom
Lieu
login
pw
denomination
adresse
nom
prenom
constatons
chacune
tables
possède
identifiant
clé
primaire
table
stage
possède
clés
étrangères
permettant
liaison
d'autres
tables
D'autres
attributs
intéressants
pourraient
également
figurer
fonction
besoins
voulu
concentrer
démarche
évitant
noyer
explications
celle-ci
foule
détails
4.5
construction
d'une
interface
interface
communication
entre
êtres
humains
application
doit
d'être
utile
utilisable
gros
l'utilité
mesure
coïncidence
entre
attentes
utilisateurs
buts
lorsqu'il
utilise
l'application
fonctionnalités
proposées
celle-ci
travers
interface
Alors
l'utilisabilité
mesure
plutôt
degré
facilité
d'utilisation
l'interface
4.5.1
Utilité
bonne
manière
développer
interface
utile
d'imaginer
traitements
l'utilisateur
envie
faire
effectuer
l'application
Ceci
peut
faire
différentes
manières
interview
utilisateurs
potentiels
examen
produits
équivalents
…
application
comme
celle
occupe
s'agit
surtout
déterminer
quelles
requêtes
sélection
d'informations
risquent
d'avoir
plus
succès
yeux
utilisateurs
quelles
requêtes
mise
jour
souhaitables
repris
ici
quelques
requêtes
possibles
n'avons
effectué
travail
exhaustif
mené
trop
loin
L'interface
créée
l'état
développement
permet
répondre
besoins
suivants

élève
o
obtenir
liste
superviseurs
stage
o
obtenir
liste
lieux
dates
stages
Étienne
Vandeput
–
©
CeFIS
2005
95
Publier
Web
-
Perfectionnement
o
prendre
connaissance
lieu
stage
date
donnée

maître
stage
o
obtenir
liste
élèves
qu'il
supervise
o
ajouter
élève
base
données
o
programmer
stage
élève
n'avons
programmé
requête
responsables
site
exemples
pris
suffisent
faire
comprendre
quel
principe
programmation
Beaucoup
contraintes
devraient
être
prises
compte
Elles
relèvent
l'on
appelle
prévention
erreurs
conception
interfaces
homme-machine
IHM
Parmi
celles-ci
notons
exemple
vérification
l'unicité
l'identifiant
chacun
utilisateurs
catégorie
non
chevauchement
périodes
stage
élève
quoique
validité
formats
date
utilisés
validité
dates
elles-mêmes
…
Chacune
contraintes
considérée
séparément
demande
gros
effort
programmation
détermination
prise
compte
toutes
contraintes
problème
requiert
analyse
fouillée
surtout
l'écriture
nombreuses
lignes
code
4.5.2
Utilisabilité
utilisabilité
mesure
davantage
manière
concepteur
interface
facilite
travail
utilisateur
guidant
actions
réduisant
autant
faire
peut
charge
travail
évitant
commettre
erreurs
notamment
Sans
entrer
écriture
traité
ergonomie
interfaces
donnons
quelques
conseils
permettant
rendre
relativement
ergonomiques
création
feuille
style
possible
promouvoir

utilisation
police
caractères
lisibles
larges
sans
empattements

non
prolifération
polices
deux
plus

choix
appropriés
appariement
couleurs

…
création
modèles
notamment
utilisation
calques
tableaux
permet
gérer
certaine
uniformité
niveau
mise
page
favorise
là
bon
guidage
utilisateur
options
essentielles
prises
écriture
scripts
PHP
suivent
4.5.3
Création
modèles
Avant
aborder
création
modèles
convient
avoir
idée
claire
manière
fichiers
organisés
dossiers
sans
quoi
toute
référence
correcte
impossible
imaginé
procéder
comme
suit
voir
illustration
point
4.7

dossier
scripts
contenir
différentes
pages
application
plupart
donnant
lieu
écriture
scripts
PHP

dossier
images
placer
toutes
images
site

dossier
modeles
contiendra
fichiers
permettant
économies
code
fichier
cefis.css
contenant
feuille
style
quant
trouvera
racine
site
sorte
équivoque
manière
référencer
fichiers
Étienne
Vandeput
–
©
CeFIS
2005
96
Publier
Web
-
Perfectionnement
4.5.3.1
modèle
basique
considère
doit
être
page
site
tel
celui
voulons
mettre
place
pouvons
dégager
certain
nombre
caractéristiques
communes
notamment
concerne
répartition
diverses
zones
présence
permanente
certaines
informations
bandeau
exemple
présence
certains
liens
…
Voici
modèle
base
constitué
zone
entête
entete.php
zone
pied
page
pieddepage.php
modèle
modele.php
mentionnera
inclusion
code
deux
fichiers
Voici
propre
code
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
em
&
lt
Corps
texte
ici
&
gt
/em
/td
/tr
/table
php
include
'
..
/modeles/pieddepage.php
'
pourrait
étonner
constater
référence
fichiers
inclure
fasse
appel
dossier
parent
ensuite
replonger
dossier
modeles
..
/modeles/
alors
fichiers
trouvent
dossier
modeles
faut
bien
imaginer
fichier
construit
va
servir
modèle
fichiers
trouvant
dossier
scripts
raison
laquelle
faut
utiliser
référence
plus
complète
corps
modèle
tableau
seule
cellule
contenant
titre
générique
texte
défaut
supprimer
lors
création
page
intérêt
texte
défaut
signaler
usager
présence
modèle
modèle
très
générique
peut
donner
naissance
autres
modèles
plus
complets
résultant
inclusion
autres
fichiers
Voici
code
fichier
entete.php…
html
head
title
Institut
ABC
/title
meta
http-equiv=
Content-Type
content=
text/html
charset=iso-8859-1
link
href=
..
/cefis.css
rel=
stylesheet
type=
text/css
/head
body
table
width=
555
height=
113
border=
1
cellpadding=
10
cellspacing=
0
bordercolor=
#
FF8888
bgcolor=
#
FFDFD5
class=
grand
tr
td
height=
109
div
align=
center
img
src=
..
/images/cathedrale.jpg
width=
112
height=
89
align=
left
span
class=
grand
Institut
ABC
/span
/div
Étienne
Vandeput
–
©
CeFIS
2005
97
Publier
Web
-
Perfectionnement
/td
/tr
/table
fichier
contient
code
initial
particulier
liaison
feuille
style
cefis.css
code
suit
tableau
seule
cellule
contient
calque
lequel
trouve
photo
titre
bandeau
Voici
code
fichier
pieddepage.php
table
width=
555
border=
1
cellpadding=
10
cellspacing=
0
bordercolor=
#
FF8888
bgcolor=
#
FFDFD5
tr
td
href=
mailto
webmaster
det.fundp.ac.be
Contacter
/a
span
class=
gris
Webmaster
/span
/td
/tr
/table
/body
/html
dernier
contient
terminaison
fichier
aussi
tableau
cellule
contenant
lien
vers
message
électronique
adresse
Webmaster
code
modèle
interprété
ci-dessus
utilise
petite
partie
styles
définis
feuille
style
contenue
fichier
cefis.css
décrite
ci-après
Étienne
Vandeput
–
©
CeFIS
2005
98
Publier
Web
-
Perfectionnement
body
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
background-color
#
FFFFFF
font-size
11px
}
td
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
font-size
11px
margin
0px
padding
5px
}
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
color
#
00AAFF
text-decoration
none
font-weight
bold
font-size
11px
}
hover
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
color
#
003399
font-weight
bold
background-color
#
DFDFFF
font-size
11px
}
link
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
font-size
11px
}
div
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
11px
font-style
normal
}
br
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
11px
font-style
normal
margin-bottom
auto
}
p
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
margin-bottom
auto
font-size
11px
}
ol
{
font-family
sans-serif
list-style-image
none
}
Étienne
Vandeput
–
©
CeFIS
2005
99
Publier
Web
-
Perfectionnement
ul
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
list-style-image
url
images/puce.gif
}
li
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
padding-bottom
3px
font-size
11px
}
hr
{
border-color
#
333399
black
black
border-top-width
thick
}
h1
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
font-weight
bold
color
#
333399
border-color
black
#
DFDFFF
width
auto
margin-right
0px
margin-left
0px
border
#
DFDFFF
border-top-width
0px
border-right-width
10px
border-bottom-width
0px
border-left-width
10px
font-size
13px
background-color
#
FFFFCC
padding-right
10px
padding-left
10px
}
h2
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
13px
font-weight
bold
color
#
CC0033
background-color
#
FFE4CA
font-style
normal
padding-right
10px
padding-left
10px
border-color
black
#
FFE4CA
width
auto
margin-right
0px
margin-left
0px
border
#
FFE4CA
border-top-width
0px
border-right-width
10px
border-bottom-width
0px
border-left-width
10px
text-align
center
}
Étienne
Vandeput
–
©
CeFIS
2005
100
Publier
Web
-
Perfectionnement
h3
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
13px
font-style
normal
font-weight
bold
color
#
CC0033
width
auto
border-width
10px
}
h4
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
13px
font-style
normal
font-weight
bold
color
#
333399
background-color
#
DFFAFB
padding-right
10px
padding-left
10px
width
auto
border
1px
solid
#
333399
padding-top
2px
padding-bottom
2px
}
h5
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
13px
font-style
normal
font-weight
bold
color
#
FFFFCC
width
auto
border-width
10px
background-color
#
333399
padding-right
10px
padding-left
10px
}
h6
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
13px
font-weight
bold
color
#
CC0033
background-color
#
FFE4CA
font-style
normal
width
auto
margin-right
0px
margin-left
0px
border
1px
solid
#
CC0033
padding
10px
}
b
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
11px
font-style
normal
font-weight
bold
}
Étienne
Vandeput
–
©
CeFIS
2005
101
Publier
Web
-
Perfectionnement
.important1
{
font-weight
bold
color
#
FF0000
}
.important2
{
font-weight
bold
}
.different
{
font-style
italic
}
.inactif
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-size
11px
font-style
normal
font-weight
bold
color
#
999999
}
.encart
{
background-color
#
FFFFCC
color
#
333399
padding-right
20px
padding-left
20px
padding-top
20px
padding-bottom
20px
font-weight
normal
}
.enum1
{
list-style-image
url
images/puce.gif
}
.retrait
{
margin-left
20px
}
.justifie
{
text-align
justify
}
.grand
{
font-size
24px
color
#
999999
}
.blanc
{
color
#
FFFFFF
}
.nouveau
{
color
#
FFFFFF
font-weight
bolder
Étienne
Vandeput
–
©
CeFIS
2005
102
Publier
Web
-
Perfectionnement
border
#
FF0000
background-color
#
FF0000
padding-top
3px
padding-bottom
3px
text-align
center
font-size
13px
}
.titre
{
font-size
15px
color
#
333399
font-weight
bold
border-color
black
black
#
333399
border-style
solid
border-top-width
0px
border-right-width
0px
border-bottom-width
3px
border-left-width
0px
}
.intertitre
{
font-size
13px
color
#
990000
font-weight
bold
border-color
black
black
#
990033
border-style
solid
border-top-width
0px
border-right-width
0px
border-bottom-width
1px
border-left-width
0px
}
.evidence
{
color
#
FFFFCC
background-color
#
333399
padding-right
20px
padding-top
20px
padding-bottom
20px
padding-left
20px
}
.gris
{
font-family
Verdana
Arial
Helvetica
sans-serif
font-style
normal
font-weight
bold
color
#
999999
font-size
11px
}
4.5.3.2
sous-modèles
principe
inclusions
fichiers
utilisé
entete.php
pieddepage.php
peut
être
étendu
autres
fins
comme
exemple
ajout
boutons
spécifiques
barre
navigation
…
manière
créer
autres
modèles
clair
notion
modèle
telle
définie
ici
beaucoup
moins
riche
notion
modèle
pouvant
être
implantée
logiciels
édition
HTML
sophistiqués
modèle
chargé
créer
base
document
dès
instant
document
enregistré
sous
nom
propre
différent
celui
Étienne
Vandeput
–
©
CeFIS
2005
103
Publier
Web
-
Perfectionnement
modèle
plus
aucune
liaison
dernier
grand
intérêt
réfléchir
sérieusement
non
seulement
élaboration
modèles
aussi
arborescence
fichiers
déterminante
concerne
liens
relatifs
décrivant
fichiers
inclure
exemple
créé
deux
autres
modèles
très
différents
modèle
général
incluant
liens
vers
certaines
pages
importantes
application
modèles
liés
interactions
minimales
souhaitons
site
savoir

utilisateur
devra
connecter
site
partir
page
login

utilisateur
devra
déconnecter
site
possible
partir
certaines
pages
seulement

utilisateur
souhaitera
régulièrement
revenir
ensemble
fonctionnalités
autorisées
également
possible
partir
certaines
pages
Dès
lors
envisageons
modèle
inclut
lien
retour
vers
menu
modele_retour.php
modèle
inclut
lien
déconnexion
modele_deconnexion.php
construisons
fichiers
séparés
partie
code
concernant
ajout
liens
nouveaux
modèles
construits
partir
modèle
basique
Voici
abord
code
fichiers
modèles
commençant
modele_retour.php
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
p
em
&
lt
Corps
texte
ici
&
gt
/em
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
modèle
construit
partir
code
modèle
base
simplement
ajouté
inclusion
fichier
retour_menu.php
voici
aussi
code
table
width=
555
border=
0
cellspacing=
2
cellpadding=
5
tr
td
&
nbsp
/td
td
div
align=
right
Retour
href='menu.php
SID
'
menu
/a
/div
/td
/tr
/table
structure
tableau
cellule
nouveau
privilégiée
placer
lien
Notez
celui-ci
renvoie
vers
script
menu.php
encore
écrire
plus
valeur
fournie
script
sous
forme
constante
SID
rien
autre
identifiant
session
Voici
autre
sous-modèle
modele_deconnexion.php
construction
identique
php
include
'
..
/modeles/entete.php
'
Étienne
Vandeput
–
©
CeFIS
2005
104
Publier
Web
-
Perfectionnement
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h1
Système
gestion
stages
/h1
p
em
&
lt
Corps
texte
ici
&
gt
/em
/p
/td
/tr
/table
php
include
'
..
/modeles/deconnexion.php
'
include
'
..
/modeles/pieddepage.php
'
fichier
inclus
deconnexion.php
composé
seule
ligne
cas
présent
peu
utile
faire
fichier
inclure
Toutefois
principe
souhaitons
illustrer
ici
contient
lien
vers
fichier
login.php
code
évidemment
écrire
p
href=
login.php
Déconnecter
/a
/p
stade
développement
application
arborescence
site
présente
comme
suit
dossier
images
contient
images
site
comprises
images
correspondant
puces
pu
être
définies
styles
dossier
modeles
contient
modèle
base
deux
sousmodèles
quatre
fichiers
inclusions
code
fichier
contenant
définition
feuille
style
resté
niveau
racine
site
reste
maintenant
construire
différents
scripts
sans
trop
avoir
préoccuper
mise
page
Chaque
fichier
construit
partir
deux
sous-modèles
conception
plus
sophistiquée
pourrait
avoir
réflexion
plus
approfondie
permettant
raffiner
davantage
modèles
mise
page
forme
4.5.4
connexion
point
départ
application
page
connexion
Celle-ci
généralement
sobre
limite
demande
fourniture
identifiant
mot
passe
peut
proposer
autres
services
tels

possibilité
créer
soi-même
identifiant
mot
passe
utilité
estimer
fonction
visibilité
site
-
Internet
intranet
-
capacité
gérer
inscriptions
bidons

possibilité
renvoyer
mot
passe
oublié
utilisateur
base
renseignements
préalablement
fournis

…
considéré
exemple
chaque
utilisateur
recevait
identifiant
mot
passe
part
administrateur
peut
fournir
principe
simple
construction
identifiants
Étienne
Vandeput
–
©
CeFIS
2005
105
Publier
Web
-
Perfectionnement
exemple
première
lettre
prénom
suivie
lettres
nom
concurrence
huit
caractères
attribuer
information
comme
mot
passe
demandant
utilisateur
changer
dès
première
connexion
méthode
présente
toutefois
inconvénient
certains
utilisateurs
changeront
jamais
mot
passe
permettant
autres
connaissent
manière
construire
servir
manière
peu
loyale
4.5.4.1
Login
page
login
formulaire
sens
HTML
terme
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Connexion
syst
&
egrave
gestion
stages
/h6
form
name=
form1
method=
post
action=
connexion.php
p
label
Param
&
egrave
tres
connexion
/label
/p
p
label
input
name=
categorie
type=
radio
value=
1
checked
Él
&
egrave
ve
/label
br
label
input
type=
radio
name=
categorie
value=
2
Maître
stage
/label
br
label
input
type=
radio
name=
categorie
value=
3
Responsable
site
/label
/p
p
ID
input
type=
text
name=
login
/p
p
Mot
passe
input
type=
password
name=
pw
label
/label
/p
p
input
type=
submit
name=
Submit
value=
Aller
/p
/form
Étienne
Vandeput
–
©
CeFIS
2005
106
Publier
Web
-
Perfectionnement
p
&
nbsp
/p
/td
/tr
/table
php
include
'
..
/modeles/pieddepage.php
'
page
construite
partir
modèle
basique
sans
lien
retour
déconnexion
formulaire
compose
groupe
boutons
radios
deux
zones
texte
saisie
identifiant
mot
passe
bouton
soumission
contrôle
format
validation
prévus
ici
éviter
prolifération
code
certain
scripts
JavaScript
mesure
gérer
problèmes
potentiels
groupe
boutons
sert
identifier
catégorie
utilisateur
laquelle
affaire
sorte
script
associé
soumission
connexion.php
pourra
transmettre
information
manière
fournir
menus
rapport
catégorie
4.5.4.2
Connexion
script28
précédent
provoque
lorsque
bouton
soumission
formulaire
activé
exécution
script
connexion.php
Celui
contente
sélectionner
bonne
table
vérification
correspondance
identifiant
-
mot
passe
proposer
alternatives
cas
erreur
aucune
erreur
détectée
lien
permet
continuer
lien
fait
exécuter
script
menu.php
tout
fournissant
identificateur
session
28
mot
script
utilisé
sens
large
partie
code
contenant
instructions
PHP
Étienne
Vandeput
–
©
CeFIS
2005
107
Publier
Web
-
Perfectionnement
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
php
_SESSION
'categorie
'
=
_POST
'categorie
'
_SESSION
'login
'
=
_POST
'login
'
_SESSION
'pw
'
=
_POST
'pw
'
echo
``
h6
Système
gestion
stages
/h6
c=
_POST
'categorie
'
if
c==1
{
t='eleve
'
}
elseif
c==2
{
t='maitre
'
}
else
{
t='lieu
'
}
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'gestionstages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
login=
_POST
'login
'
sqlquery=
select
nom
prenom
login
pw
from
where
login=
'
login
'
queryresult=mysql_query
sqlquery
if
mysql_num_rows
queryresult
==0
{
echo
``
p
Identifiant
inconnu
/p
echo
``
p
href='login.php
'
Retour
/a
/p
}
else
{
row=mysql_fetch_array
queryresult
MYSQL_ASSOC
if
row
'pw
'
=
_POST
'pw
'
{
echo
``
Mot
passe
incorrect
``
echo
``
p
href='login.php
'
Retour
/a
/p
}
else
{
echo
``
p
Bienvenue
strong
row
'prenom
'
``
row
'nom
'
``
/strong
``
/p
echo
``
p
href='menu.php
.SID
``
'
Continuer
/a
/p
include
'
..
/modeles/deconnexion.php
'
}
}
Étienne
Vandeput
–
©
CeFIS
2005
108
Publier
Web
-
Perfectionnement
/tr
/table
php
include
'
..
/modeles/pieddepage.php
'
création
session
génération
identifiant
session
fait
grâce
fonction
session_start
instruction
doit
être
première
utilise
technique
cookies
retrouver
variables
session
valeurs
fournies
formulaire
variable
_POST
placées
tableau
global
prédéfini
_SESSION
façon
pouvoir
être
retrouvées
grâce
identifiant
session
SID
Comme
script
doit
également
identifier
utilisateur
page
produire
pourrait
comprendre
retour
menu
possibilité
déconnexion
raison
laquelle
page
créée
partir
modèle
basique
ajouté
instruction
générant
lien
retour
page
précédente
instruction
permettant
déconnexion
uniquement
cas
concernés
options
autres
pages
toutes
créées
base
deux
sous-modèles
cas
identification
script
appelé
menu.php
script
va
générer
menu
va
dépendre
type
utilisateur
connecté
identificateur
session
fourni
adresse
nécessaire
client
web
utilisateur
configuré
accepter
cookies
4.5.5
scripts
4.5.5.1
Menu
script
contient
instruction
démarrage
session
permet
récupérer
nécessaire
variables
session
page
construite
modèle
modele_deconnexion.php
variable
contiendra
nom
table
sélectionner
nom
évidemment
fonction
catégorie
menu
également
constitué
base
catégorie
utilisateur
adresses
chacun
liens
suivies
identifiant
session
permet
propager
notamment
catégorie
utilisateur
aussi
autres
informations
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
php
c=
_SESSION
'categorie
'
if
c==1
{
t='eleve
'
}
Étienne
Vandeput
–
©
CeFIS
2005
109
Publier
Web
-
Perfectionnement
elseif
c==2
{
t='maitre
'
}
else
{
t='lieu
'
}
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'stages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
login=
_SESSION
'login
'
sqlquery=
select
nom
prenom
login
pw
from
where
login=
'
login
'
queryresult=mysql_query
sqlquery
row=mysql_fetch_array
queryresult
MYSQL_ASSOC
echo
``
p
Session
strong
row
'prenom
'
``
row
'nom
'
``
/strong
``
``
/p
echo
``
h1
Faites
choix
/h1
if
c==1
{
echo
``
p
Obtenir
liste
lieux
dates
stages
href='stages_eleve.php
SID
'
Ici
/a
/p
echo
``
p
Savoir
stage
date
donnée
href='stages_par_date.php
SID
'
Ici
/a
/p
echo
``
p
Obtenir
liste
superviseurs
href='superviseurs.php
SID
'
Ici
/a
echo
``
p
Obtenir
liste
étudiants
présents
endroit
jour
href='date_stage.php
SID
'
Ici
/a
echo
``
/p
}
if
c==2
{
echo
``
p
Obtenir
liste
élèves
supervisez
href='supervision.php
SID
'
Ici
/a
/p
echo
``
p
Ajouter
élève
href='ajouter_eleve.php
SID
'
Ici
/a
p
echo
``
p
Ajouter
stage
élève
href='ajouter_stage.php
SID
'
Ici
/a
p
}
if
c==3
{
//
développer
}
/tr
/table
php
include
'
..
/modeles/deconnexion.php
'
include
'
..
/modeles/pieddepage.php
'
Étienne
Vandeput
–
©
CeFIS
2005
110
Publier
Web
-
Perfectionnement
Voici
interface
menu
élèves
menu
maîtres
stage
ressemblera
suit
Chacun
sept
scripts
mentionnés
page
vont
être
décrits
ferons
respectant
certaine
progression
difficulté
raison
laquelle
décrivons
abord
script
construction
page
destinée
élèves
avant
traiter
pages
maîtres
stage
revenir
pages
destinées
élèves
4.5.5.2
Liste
superviseurs
élève
agit
requête
sélection
relativement
élémentaire
adressant
seule
table
celle
maîtres
stage
requête
select
nom
prenom
from
maitre
order
by
nom
reste
code
classique
réfère
exemples
déjà
donnés
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
Étienne
Vandeput
–
©
CeFIS
2005
111
Publier
Web
-
Perfectionnement
h6
Système
gestion
stages
/h6
php
echo
``
h1
Liste
superviseurs
/h1
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'stages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery=
select
nom
prenom
from
maitre
order
by
nom
queryresult=mysql_query
sqlquery
echo
``
table
tr
td
strong
PRÉNOM
/strong
/td
td
strong
NOM
/strong
/td
/tr
while
row=mysql_fetch_array
queryresult
MYSQL_ASSOC
{
echo
``
tr
td
row
'prenom
'
/td
td
row
'nom
'
``
/td
/tr
}
echo
``
/table
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
donne
exemple
Étienne
Vandeput
–
©
CeFIS
2005
112
Publier
Web
-
Perfectionnement
4.5.5.3
Liste
supervisés
maître
stage
requête
peu
plus
compliquée
dès
lors
travaille
tables
eleve
maitre
stage
faut
liste
stages
identifiant
maître
celui
utilisateur
identifiants
maître
élèves
correspondent
tables
eleve
maitre
sqlquery=
select
eleve.nom
eleve.prenom
stage.domaine
from
eleve
stage
maitre
where
id_eleve=eleve.id
&
&
id_maitre=maitre.id
&
&
maitre.login=
'
_SESSION
'login
'
``
'
donne
quelque
chose
comme
ceci
4.5.5.4
Ajout
élève
maître
stage
Voici
script
effet
visible
agit
effet
modifier
contenu
base
données
importance
fournir
feed-back
utilisateur
indiquant
comment
passées
opérations
rôle
page
générée
avant
exécution
script
utilisateur
doit
fournir
données
nécessaires
requête
mise
jour
base
données
deux
fichiers
construire
cas
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Syst
&
egrave
gestion
stages
/h6
h1
Nouvel
&
eacute
&
egrave
ve
/h1
form
name=
form1
method=
post
action=
fb_enregistrer_eleve.php
p
Nom
input
name=
nom
type=
text
size=
30
maxlength=
50
/p
p
Pr
&
eacute
nom
input
name=
prenom
type=
text
id=
prenom
size=
30
maxlength=
50
/p
p
Classe
select
name=
classe
size=
1
id=
classe
option
value=
5G
5B
/option
option
value=
6G
6B
/option
Étienne
Vandeput
–
©
CeFIS
2005
113
Publier
Web
-
Perfectionnement
option
value=
5P
5P
/option
option
value=
6P
6P
/option
/select
/p
p
Identifiant
input
name=
login
type=
text
id=
login
size=
8
maxlength=
8
/p
p
Mot
passe
input
name=
pw
type=
password
id=
pw
size=
20
maxlength=
50
/p
p
input
name=
envoyer
type=
submit
id=
envoyer
value=
Envoyer
/p
p
&
nbsp
/p
/form
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
Voici
formulaire
soumission
formulaire
entraînera
exécution
script
fb_enregister_eleve.php
Observez
encore
choix
classe
fait
liste
fixe
pourrait
imaginer
nombre
classes
Étienne
Vandeput
–
©
CeFIS
2005
114
Publier
Web
-
Perfectionnement
variable
temps
faudrait
alors
faire
entité
modèle
ERA
commode
cas
générer
liste
base
requête
base
données
Voici
code
script
incluant
instructions
enregistrement
base
instructions
affichage
feed-back
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
R
&
eacute
sultat
l'enregistrement
/h1
p
php
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'stages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
foreach
_POST
key
=
value
{
varname
=
``
_
key
varname
=
value
}
sqlquery=
insert
eleve
nom
prenom
classe
login
pw
values
'
_nom
'
'
_prenom
'
'
_classe
'
'
_login
'
'
_pw
'
queryresult=mysql_query
sqlquery
or
die
``
Échec
l'enregistrement
echo
``
L'élève
_prenom
_nom
enregistré
correctement
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
requête
requête
mise
jour
sqlquery=
insert
eleve
nom
prenom
classe
login
pw
values
'
_nom
'
'
_prenom
'
'
_classe
'
'
_login
'
'
_pw
'
Étienne
Vandeput
–
©
CeFIS
2005
115
Publier
Web
-
Perfectionnement
noms
variables
générés
dynamiquement
aide
instruction
foreach
comme
déjà
donné
exemple
feed-back
donné
seule
instruction
echo
``
L'élève
_prenom
_nom
enregistré
correctement
voici
écran
donnant
feed-back
Chacun
scripts
venons
décrire
affiche
évidemment
lien
permettant
retour
menu
copies
écran
montrent
4.5.5.5
Ajout
stage
maître
stage
maître
stage
peut
encoder
nouveau
stage
élève
ferons
mêmes
observations
cas
précédent
savoir
deux
fichiers
nécessaires
générer
formulaire
autre
enregistrer
données
fournir
feed-back
particularité
script
certaines
données
vont
être
extraites
base
données
faciliter
choix
utilisateur
cas
liste
élèves
lieux
domaines
également
pu
associer
petit
calendrier
choix
dates
Tous
choix
évidemment
discutables
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
php
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'stages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery1=
select
nom
prenom
id
from
eleve
queryresult1=mysql_query
sqlquery1
sqlquery2=
select
denomination
id
from
lieu
queryresult2=mysql_query
sqlquery2
Étienne
Vandeput
–
©
CeFIS
2005
116
Publier
Web
-
Perfectionnement
h1
Nouveau
stage
/h1
form
name=
form1
method=
post
action=
fb_ajouter_stage.php
p
&
Eacute
&
egrave
ve
select
name=
id_eleve
size=
1
php
while
row=mysql_fetch_array
queryresult1
MYSQL_ASSOC
{
echo
option
value=
'
row
'id
'
'
row
'nom
'
``
row
'prenom
'
``
/option
}
/select
/p
p
Lieu
select
name=
lieu
size=
1
id=
lieu
php
while
row=mysql_fetch_array
queryresult2
MYSQL_ASSOC
{
echo
option
value=
'
row
'id
'
'
row
'denomination
'
``
/option
}
/select
/p
p
Domaine
select
name=
domaine
size=
1
id=
domaine
option
value=
P
&
eacute
diatrie
P
&
eacute
diatrie
/option
option
value=
G
&
eacute
riatrie
G
&
eacute
riatrie
/option
option
value=
Cr
&
egrave
che
Cr
&
egrave
che
/option
/select
/p
p
Date
&
eacute
but
jj/mm/aaaa
input
name=
date_debut
type=
text
id=
date_debut
size=
10
maxlength=
10
/p
p
Date
fin
jj/mm/aaaa
input
name=
date_fin
type=
text
id=
date_fin
size=
10
maxlength=
10
/p
p
input
name=
envoyer
type=
submit
id=
envoyer
value=
Envoyer
/p
p
&
nbsp
/p
/form
/p
/td
/tr
/table
Étienne
Vandeput
–
©
CeFIS
2005
117
Publier
Web
-
Perfectionnement
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
Voici
aperçu
formulaire
envoi
formulaire
active
script
fb_ajouter_stage.php
voici
code
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
R
&
eacute
sultat
l'enregistrement
/h1
p
php
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'gestionstages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
Étienne
Vandeput
–
©
CeFIS
2005
118
Publier
Web
-
Perfectionnement
foreach
_POST
key
=
value
{
varname
=
``
_
key
varname
=
value
}
_date_debut=substr
_date_debut,6,4
.'/'.substr
_date_debut,3,2
'/'.substr
_date_
debut,0,2
_date_fin=substr
_date_fin,6,4
.'/'.substr
_date_fin,3,2
'/'.substr
_date_fin,0
2
sqlquery1=
select
id
from
maitre
where
login=
'
_SESSION
'login
'
``
'
queryresult1=mysql_query
sqlquery1
or
die
'La
requête
échoué
'
row=mysql_fetch_array
queryresult1
MYSQL_ASSOC
sqlquery2=
insert
stage
domaine
date_debut
date_fin
id_eleve
id_lieu
id_maitre
values
'
_domaine
'
'
_date_debut
'
'
_date_fin
'
'
_id_eleve
'
'
_lieu
'
'
row
'id
'
``
'
queryresult2=mysql_query
sqlquery2
or
die
``
L'enregistrement
échoué
echo
``
stage
enregistré
correctement
``
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
Deux
requêtes
effectuées
première
requête
sélection
connaître
identifiant
maître
stage
nécessaire
créer
nouveau
stage
sqlquery1=
select
id
from
maitre
where
login=
'
_SESSION
'login
'
``
'
seconde
requête
mise
jour
insertion
nouveau
stage
sqlquery2=
insert
stage
domaine
date_debut
date_fin
id_eleve
id_lieu
id_maitre
values
'
_domaine
'
'
_date_debut
'
'
_date_fin
'
'
_id_eleve
'
'
_lieu
'
'
row
'id
'
``
'
Comme
cas
précédent
feed-back
relativement
sobre
echo
``
stage
enregistré
correctement
``
Étienne
Vandeput
–
©
CeFIS
2005
119
Publier
Web
-
Perfectionnement
4.5.5.6
Lieux
dates
stage
élève
requêtes
sélections
très
compliquées
elles
porte
tables
eleve
stage
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
Liste
stages
&
agrave
prester
/h1
p
php
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'gestionstages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery1=
select
stage.domaine
stage.date_debut
stage.date_fin
stage.id_lieu
stage.id_eleve
from
eleve
stage
where
stage.id_eleve=
'
_SESSION
'login
'
'
group
by
stage.domaine
queryresult1=mysql_query
sqlquery1
or
die
'La
requête
1
échoué
'
echo
``
table
tr
td
strong
Lieu
/strong
/td
td
strong
Domaine
/strong
/td
td
strong
Date
début
/strong
/td
td
strong
Date
fin
/strong
/td
/tr
while
row=mysql_fetch_array
queryresult1
{
sqlquery2=
select
denomination
from
lieu
where
login=
'
row
3
'
queryresult2=mysql_query
sqlquery2
or
die
'La
requête
2
échoué
'
row2=mysql_fetch_array
queryresult2
row
1
=substr
row
1
,8,2
.'/'.substr
row
1
,5,2
'/'.substr
row
1
,0,4
row
2
=substr
row
2
,8,2
.'/'.substr
row
2
,5,2
'/'.substr
row
2
,0,4
/tr
echo
``
tr
td
row2
0
/td
td
row
0
/td
td
row
1
/td
td
row
2
/td
}
echo
``
/table
/p
/td
/tr
/table
Étienne
Vandeput
–
©
CeFIS
2005
120
Publier
Web
-
Perfectionnement
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
première
requête
sqlquery1=
select
stage.domaine
stage.date_debut
stage.date_fin
stage.id_lieu
stage.id_eleve
from
eleve
stage
where
stage.id_eleve=
'
_SESSION
'login
'
'
group
by
stage.domaine
permet
retrouver
tous
stages
élève
connecté
seconde
requête
sert
retrouver
dénominations
lieux
fonction
identifiant
table
stages
sqlquery2=
select
denomination
from
lieu
where
login=
'
row
3
'
Voici
résultat
possible
4.5.5.7
Stages
date
donnée
élève
recherche
stages
élève
date
donnée
demande
nouveau
deux
fichiers

formulaire
préciser
date

script
recherche
base
données
affichage
résultats
soumission
formulaire
provoquera
exécution
script
appelé
ici
verifier_stage.php
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
Recherche
stage
/h1
form
name=
form1
method=
post
action=
verifier_stage.php
p
Précisez
date
input
name=
jour_de_stage
type=
text
size=
10
maxlength=
10
Étienne
Vandeput
–
©
CeFIS
2005
121
Publier
Web
-
Perfectionnement
/p
p
input
type=
submit
name=
Submit
value=
Envoyer
/p
/form
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
Voici
donne
affichage
formulaire
code
script
verifier_stage.php
suivant
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
stage
&
agrave
/h1
p
php
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'stages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
Étienne
Vandeput
–
©
CeFIS
2005
122
Publier
Web
-
Perfectionnement
}
jds=
_POST
'jour_de_stage
'
jds=substr
jds,6,4
.'/'.substr
jds,3,2
'/'.substr
jds,0,2
sqlquery1=
select
stage.domaine
stage.date_debut
stage.date_fin
from
eleve
stage
where
stage.id_eleve=
'
_SESSION
'login
'
'
&
&
'
jds
``
'
stage.date_debut
&
&
'
jds
``
'
stage.date_fin
queryresult1=mysql_query
sqlquery1
or
die
'La
requête
échoué
'
echo
``
table
tr
td
strong
Lieu
/strong
/td
td
strong
Domaine
/strong
/td
td
strong
Date
début
/strong
/td
td
strong
Date
fin
/strong
/td
/tr
while
row=mysql_fetch_array
queryresult1
{
row
1
=substr
row
1
,8,2
.'/'.substr
row
1
,5,2
'/'.substr
row
1
,0,4
row
2
=substr
row
2
,8,2
.'/'.substr
row
2
,5,2
'/'.substr
row
2
,0,4
sqlquery2=
select
denomination
from
lieu
where
id=
'
row
3
'
queryresult2=mysql_query
sqlquery2
or
die
'La
requête
échoué
'
row2=mysql_fetch_array
queryresult2
echo
``
tr
td
row2
0
/td
td
row
0
/td
td
row
1
/td
td
row
2
/td
/tr
}
echo
``
/table
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
première
requête
recherche
tous
stages
correspondant
utilisateur
intervalle
déroulement
inclut
date
fournie
sqlquery1=
select
stage.domaine
stage.date_debut
stage.date_fin
from
eleve
stage
where
stage.id_eleve=
'
_SESSION
'login
'
'
&
&
'
jds
``
'
stage.date_debut
&
&
'
jds
``
'
stage.date_fin
seconde
requête
sert
déterminer
dénomination
lieu
sqlquery2=
select
denomination
from
lieu
where
id=
'
row
3
'
Voici
exemple
résultat
Étienne
Vandeput
–
©
CeFIS
2005
123
Publier
Web
-
Perfectionnement
4.5.5.8
Liste
accompagnants
élève
dernière
fonctionnalité
décrite
deux
fichiers
également
nécessaires
premier
semblable
celui
exemple
précédent
génère
formulaire
saisie
date
Rappelons
aucun
script
valide
ici
format
cohérence
dates
php
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
Date
stage
/h1
form
name=
form1
method=
post
action=
accompagnants.php
p
Date
jj/mm/aaaa
input
name=
date_de_stage
type=
text
id=
date_de_stage
/p
p
input
name=
envoyer
type=
submit
id=
envoyer
value=
Envoyer
/p
/form
p
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
look
formulaire
semblable
précédent
soumission
provoque
exécution
script
accompagnants.php
voici
code
php
session_start
include
'
..
/modeles/entete.php
'
table
width=
556
border=
0
cellspacing=
2
cellpadding=
10
tr
td
height=
300
valign=
top
bgcolor=
#
FFFFCC
h6
Système
gestion
stages
/h6
h1
Liste
&
eacute
tudiants
stage
&
ecirc
endroit
jour
/h1
p
php
Étienne
Vandeput
–
©
CeFIS
2005
124
Publier
Web
-
Perfectionnement
jds=
_POST
'date_de_stage
'
jds=substr
jds,6,4
.'/'.substr
jds,3,2
'/'.substr
jds,0,2
link
=
mysql_connect
'localhost
'
'encodeur
'
'aaaaaa
'
if
link
{
die
'
p
Impossible
connecter
'
mysql_error
'
/p
'
}
db
=
mysql_select_db
'gestionstages
'
link
if
db
{
die
'
p
Impossible
d\'utiliser
base
'
mysql_error
'
/p
'
}
sqlquery1=
select
lieu.denomination
lieu.login
from
stage
eleve
lieu
where
stage.id_eleve=
'
_SESSION
'login
'
'
&
&
stage.date_debut
'
jds
'
&
&
stage.date_fin
'
jds
'
&
&
stage.id_lieu=lieu.login
group
by
lieu.denomination
queryresult1=mysql_query
sqlquery1
or
die
'La
requête
1
échoué
'
while
row=mysql_fetch_row
queryresult1
{
echo
``
table
tr
td
strong
Lieu
/strong
/td
/tr
echo
``
tr
td
row
0
/td
/tr
echo
``
tr
td
strong
Nom
présents
jour
/strong
/td
/tr
sqlquery2=
select
eleve.nom
from
eleve
stage
where
stage.id_lieu=
'
row
1
'
&
&
eleve.login=stage.id_eleve
&
&
stage.date_debut
'
jds
'
&
&
stage.date_fin
'
jds
'
group
by
eleve.nom
order
by
eleve.nom
queryresult2=mysql_query
sqlquery2
or
die
'La
requête
2
échoué
'
while
row2=mysql_fetch_row
queryresult2
{
echo
``
tr
td
row2
0
/td
/tr
}
}
echo
``
/table
/p
/td
/tr
/table
php
include
'
..
/modeles/retour_menu.php
'
include
'
..
/modeles/pieddepage.php
'
première
requête
permet
trouver
lieux
stage
utilisateur
date
fournie
sqlquery1=
select
lieu.denomination
lieu.login
from
stage
eleve
lieu
where
stage.id_eleve=
'
_SESSION
'login
'
'
&
&
stage.date_debut
'
jds
'
&
&
stage.date_fin
'
jds
'
&
&
stage.id_lieu=lieu.login
group
by
lieu.denomination
seconde
requête
permet
trouver
liste
élèves
stage
endroit
date
Étienne
Vandeput
–
©
CeFIS
2005
125
Publier
Web
-
Perfectionnement
sqlquery2=
select
eleve.nom
from
eleve
stage
where
stage.id_lieu=
'
row
1
'
&
&
eleve.login=stage.id_eleve
&
&
stage.date_debut
'
jds
'
&
&
stage.date_fin
'
jds
'
group
by
eleve.nom
order
by
eleve.nom
Voici
exemple
résultat
4.6
base
données
Voici
titre
documentaire
structure
quatre
tables
base
données
contenu
4.6.1
table
eleve
4.6.1.1
Structure
4.6.1.2
Contenu
Étienne
Vandeput
–
©
CeFIS
2005
126
Publier
Web
-
Perfectionnement
4.6.2
table
maitre
4.6.2.1
Structure
4.6.2.2
Contenu
4.6.3
table
lieu
4.6.3.1
Structure
Étienne
Vandeput
–
©
CeFIS
2005
127
Publier
Web
-
Perfectionnement
4.6.3.2
Contenu
4.6.4
table
stage
4.6.4.1
Structure
4.6.4.2
Contenu
4.7
Structure
site
terminer
voici
donne
structure
mini-site
application
termes
dossiers
fichiers
Étienne
Vandeput
–
©
CeFIS
2005
128
Publier
Web
-
Perfectionnement
Constatez
encore
fois
structure
tel
site
doit
être
connue
avant
rédaction
moindre
script
usage
modèles
références
font
autres
fichiers
code
doit
être
inclus
tous
éléments
font
chaque
fichier
doit
être
affecté
dossier
avant
avoir
construit
autres
répartitions
fichiers
possibles
faut
également
estimer
quantité
fichiers
application
va
nécessiter
nombre
fonctionnalités
proposées
importante
faut
non
seulement
envisager
autre
type
menu
voire
arborescence
aussi
autre
répartition
fichiers
dossiers
pourrait
imaginer
exemple
dossier
scripts
concernant
élèves
dossier
scripts
concernant
maîtres
stage
dossier
scripts
concernant
hôtes
stages
réalisation
feuille
style
correcte
aussi
déterminante
quant
qualité
relative
interface
pourrez
proposer
vain
consacrer
certain
temps
élaboration
également
possible
inspirer
feuilles
styles
utilisées
sites
trouvez
très
agréables
très
lisibles
sachions
copyright
feuilles
styles
celles-ci
retrouvent
évidemment
cache
Internet
machine
cliente
Dès
lors
…
reste
appliquer
démarche
venons
initier
développement
application
concerne
connaissez
caractéristiques
domaine
Bon
travail
Étienne
Vandeput
–
©
CeFIS
2005
129
