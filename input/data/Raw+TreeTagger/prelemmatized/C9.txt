Base
donnée
2
PHP
and
Mysql
Crée
Lamiae
DOUNAS
Lamiae.dounas
gmail.com
Plan
cours
1
Rappel
SQL
2
Introduction
web
PHP
3
Variables
constantes
4
Opérateurs
5
Tableaux
6
Structures
contrôles
7
Fonctions
8
Gestion
formulaires
9
Programmation
orienté
objet
POO
10
Accès
bases
données
Mysql
11
cinq
mini
Projets
réaliser
RAPPEL
SQL
•
Travaux
pratiques
Révision
opérations
CREATE
TABLE
INSERT
UPDATE
ALTER
TABLE
ADD
CONSTRAINTS
TP1
Introduction
Web
web
Ø
Terme
crée
Tim
Berners-Lee
désigne
toile
araignée
anglais
Ø
Enorme
réseau
ordinateurs
connectés
hébergent
sites
web
Quel
rapport
entre
web
internet
Ø
Web
application
internet
juste
comme
messagerie
instantanée
Introduction
Web
site
web
Ø
Ecrit
3
langages
html
marquer
contenu
site
Css
gérer
style
javascript
rendre
interactif
Ø
Accessible
depuis
dresse
unique
URL
Uniform
Resource
Locator
Protocole
Mot
passe
Nom
Port
Facultatif
chemin
facultatif
serveur
80
http
//
user
password
www.ccm.net
glossair/
glossair.php
Introduction
PHP
Php
php
hypertext
preprocessor
–
Langage
interprété
créer
sites
dynamiques
–
Langage
script
côté
serveur
–
langage
Embedded
HTML
–
Open
source
PHP
permis
créer
grand
nombre
sites
web
célèbres
comme
Facebook
Wikipédia
etc
Introduction
PHP
Site
statique
vs
site
dynamique
-
Site
statique
écrit
HTML
éventuel
ement
JavaScript
contenu
tous
utilisateurs
-
Site
Dynamique
contenus
adaptés
besoins
utilisateurs
nécessite
temps
traitement
Introduction
PHP
Relation
Client/Serveur
Installation
configuration
PHP
suffit
télécharger
serveur
web
•
WAMP
http
//www.wampserver.com/
•
MAMP
http
//www.mamp.info/
•
XAMPP
https
//www.apachefriends.org/fr/
Editeur
texte
•
Sublim
Text
http
//www.sublimetext.com/2
Introduction
PHP
Syntaxe
base
DOCTYPE
HTML
PUBLIC
-//W3C//
doctype
html
DTD
HTML
4.01//EN
http
//
html
www.w3.org/TR/html4/strict.dtd
head
title
Titre
/title
/head
body
php
echo
``
Hello
World
``
/body
/html
Introduction
PHP
Commentaires
Ø
Commentaires
hérités
langage
Perl
//
Ceci
commentaire
seule
ligne
/
*
Ceci
commentaire
plusieurs
lignes
*
/
Ø
Commentaire
style
shell
#
Ceci
commentaire
seule
ligne
Types
données
PHP
supporte
types
données
suivants
•
nombres
entiers
•
nombres
virgule
flottante
•
chaînes
caractères
•
tableaux
•
objets
développés
section
programmation
orientée
objet
fonction
gettype
permet
connaitre
type
variable
variable
n'est
définie
el
e
renvoie
string
Ex
a=
12
echo
gettype
//
=
integer
Types
données
Tous
noms
variables
précédés
spécifier
variable
type
entier
•
toto
=
123
#
entier
base
10
•
toto
=
-123
#
entier
négatif
spécifier
variable
type
chaîne
caractères
•
personne
=
toto
Smith
#
chaîne
caractères
afficher
caractères
spéciaux
•
personne
=
M.
Smith
#
aussi
chaîne
caractères
•
chaine=
chaine1
chaine2
//
affiche
chaine1chaine2
•
chaine=
chaine1
toto
//
affiche
chaine1
123
Types
données
Opérateur
chaînes
caractères
–
concaténation
chaine1
Chaine2
Opérateurs
logiques
•
AND
&
&
vrai
b
vrais
•
OR
||
vrai
b
vrais
Opérateurs
arithmétiques
•
addition
b
•
soustraction
-
b
•
multiplication
*
b
•
division
/
b
•
modulo
reste
division
entière
b
Types
données
Opérateurs
arithmétiques
•
Attention
lorsqu
chaine
caractère
évaluer
comme
valeur
numérique
règles
suivantes
appliquent
•
toto
=
1
4.5
#
toto
vaut
5.5
•
toto
=
1
titi
149
#
toto
vaut
1
car
chaine
vaut
0
texte
•
toto
=
1
149
titi
#
toto
vaut
150
car
chaine
vaut
149
commence
valeur
numérique
Types
données
Opérateurs
comparaison
•
égal
==
b
•
différent
=
b
•
supérieur
b
•
inférieur
b
•
supérieur
égal
=
b
•
inférieur
égal
=
b
Exemple
echo
toto
==
0
Vrai
Faux
Types
données
Date
Déclaration
•
DATETIME
date
=
new
DateTime
'2000-01-05
'
•
DATE_CREATE
Alias
DateTime
:__construct
date2
=
date_create
'2000-01-01
'
Extraction
Mois
année
……
Ø
style
procédural
utilisant
DATE_FORMAT
echo
date_format
date
Ø
style
orienté
objet
OO
echo
date-
format
'
'
Types
données
Date
Exemples
•
date=date
d-m-y
echo
ceci
date
jour
date
•
heure
=
date
``
h
i
echo
c'est
heure
jour
heure
Constantes
•
constantes
variables
valeur
peut
changer
durant
durée
vie
script
•
constantes
utilisées
définir
paramètres
applications
web
tq
racine
site
nom
base
données…
•
nom
constante
valide
commence
lettre
souligné
_
suivi
d'un
nombre
quelconque
lettre
chiffres
soulignés
•
définit
constante
utilisant
fonction
define
Exemple
define
``
MA_CONSTANTE
Hel
o
•
afficher
constante
echo
MA_CONSTANTE
echo
const
``
MA_CONSTANTE
Exemple
PHP
définit
certaines
constantes
comme
PHP_OS
indique
système
exploitation
utilisé
machine
fait
tourner
PHP
ex
Linux
Tableaux
tableaux
PHP
ressemblent
tableaux
associatifs
hash-tables
•
index
appelé
clé
•
valeur
associée
clé
appelée
valeur
déclare
tableau
deux
façons
•
Utiliser
fonction
array
créer
tableau
•
affecter
directement
valeurs
tableau
Tableaux
Fonctions
tableaux
•
sizeof
retourne
nombre
éléments
tableau
•
count
retourne
nombre
éléments
tableau
existe
1
variable
tableau
0
variable
existe
Tableaux
Exemple
•
suite
=
array
1
2
3
4
•
tab
0
=
1
•
tab
1
=
toto
#
peut
mélanger
contenus
•
tab
``
chaine
=
valeur
#
peut
mélanger
clés
•
personne
=
array
``
type
=
``
nom
=
•
``
Smith
Tableaux
Parcourir
tableau
php
//
crée
array
prenoms
prenoms
=
array
'François
'
'Michel
'
'Nicole
'
'Véronique
'
'Benoît
'
//
Puis
fait
boucle
tout
afficher
for
numero
=
0
numero
5
numero++
{
echo
prenoms
numero
'
br
/
'
}
Tableaux
Parcourir
tableau
associatif
php
personne
=
array
``
type
=
``
nom
=
Smith
foreach
personne
cle
=
valeur
{
echo
cle=
cle
“
valeur=
valeur
}
Conditions
if
…
else
Prototype
if
condition1
{
#
instructions
exécuter
condition1
vraie
}
elseif
condition2
{
#
instructions
exécuter
condition2
vraie
}
else
{
#
instructions
exécuter
aucune
conditions
vraie
}
Ø
fonctionnalités
instruction
if
mêmes
PHP
Conditions
if
…
else
Exemple
if
type
==
Femme
{
echo
Bonjour
Madame
}
elseif
type
==
Homme
{
echo
Bonjour
Monsieur
}
else
{
echo
Bonjour
bizarre
}
Conditions
switch
Prototype
switch
var
{
case
val1
#
instructions
exécuter
val1…
break
case
val2
#
instructions
exécuter
val2…
break
default
#
cas
utilisé
lorsque
tous
autres
cas
échoué
break
}
Boucles
while
boucle
while
moyen
plus
simple
implémenter
boucle
PHP
Ø
Prototype
while
condition
{
#
instructions
exécuter
tant
condition
vraie
}
Prototype
simplifié
while
condition
#
instructions
exécuter
tant
condition
vraie
endwhile
Boucles
while
Exemple
i
=
1
while
i
=
10
{
echo
i
i++
}
•
Affiche
1
2
3
4
5
6
7
8
9
10
Boucles
For
boucle
for
fonctionne
comme
boucle
for
langage
Prototype
for
expression1
condition
expression2
{
#
instructions
exécuter
tant
condition
vraie
}
Prototype
simplifié
for
expression1
condition
expression2
#
instructions
exécuter
tant
condition
vraie
endfor
Boucles
For
Exemple
for
i
=
1
i
=
10
i++
{
echo
i
}
•
Affiche
1
2
3
4
5
6
7
8
9
10
Exercices
1
Écrire
script
PHP
afficher
version
PHP
autres
information
configuration
Exercices
1
Solution
1
php
phpinfo
Solution
2
php
echo
pre
print_r
GLOBALS
//affiche
nom
super
globales
echo
/pre
Exercices
2
var
=
'PHP
Tutorial
'
1-Mettre
variable
var
section
h3
tag
centrer
afficher
couleur
rouge
document
HTML
2-Souligner
titre
3-
Ajouter
paragraphe
suivant
“
Ceci
paragraphe
”
Exercices
2
Solution
php
var
=
'PHP
Tutorial
'
DOCTYPE
html
html
head
title
php
echo
var
/title
/head
body
u
h3
font
color=
red
php
echo
var
/h3
/u
/font
p
ceci
paragraphe.
/p
/body
/html
Exercices
3
compter
10
jusqu
22
Exercices
3
Solution
for
i
=
10
i
=
22
i++
{
echo
i
}
Fonctions
fonction
peut
être
définie
mot
clé
function
utilisant
syntaxe
suivante
function
nomd-DelaFonction
arg_1
arg_2
/
*
*
/
arg_n
{
#
instructions
return
valeur_de_retour
//
optionnel
}
'
distinction
fonctions
/
procédures
PHP
Fonctions
fonctions
n'ont
besoin
d'être
définies
avant
d'être
utilisées
SAUF
lorsqu'une
fonction
définie
conditionnel
ement
intérieur
autre
fonction
1
fonction
conditionnel
e
//
imposible
appeler
foo
car
fonction
existe
if
condition
{
function
foo
{
echo
n'existe
tant
programme
n'est
passé
ici.\n
}
}
Fonctions
2
fonction
autre
fonction
function
foo
{
function
bar
{
echo
n'existe
tant
foo
n'est
appelé.\n
}
}
/
*
Impossible
d'appeler
bar
ici
car
n'existe
*
/
foo
/
*
Maintenant
pouvons
appeler
bar
car
l'utilisation
foo
'
rendue
accessible
*
/
bar
Fonctions
PHP
supporte
passage
d'arguments
•
valeur
comportement
défaut
•
référence
fonction
puisse
changer
valeur
arguments
Ex
toto=2
function
mafonctionRef
&
titi
{
titi=
titi+1
echo
titi
}
MafonctionRef
toto
//
affiche
3
echo
toto
//
affiche
3
Fonctions
•
liste
variable
d'arguments
mot
clé
…
indique
fonction
accepte
nombre
variable
arguments
Ex
Function
sum
vars
{
somme
=
0
foreach
vars
i
{
somme
=
i
}
return
somme
}
echo
sum
1
2
3
4
//
affiche
10
comme
résultat
Echo
sum
1,2
//
affcihe
3
Fonctions
•
valeurs
défaut
arguments
function
servir_cafe
type
=
cappuccino
{
return
Servir
type.\n
}
echo
servir_cafe
//
affiche
servir
cappuccino
àLes
arguments
sans
valeur
défaut
doivent
être
premiers
sinon
erreur
function
melangeDarguments
type
=
parDefault
varSansDefault
{
return
``
Message
type
varSansDefault.\n
}
echo
melangeDarguments
test
//
affiche
erreur
Fonctions
•
partir
version
7.0
php
supporte
définition
type
retour
Ex
function
maFonction
var
string
{
return
var
}
•
return
omis
valeur
NULL
retournée
•
renvoyer
plusieurs
valeurs
temps
suffit
retourner
tableau
Ex
function
couleurs
{
return
array
res1
res2
res3
}
}
list
var1
var2
var3
=
couleurs
Fonctions
•
retourner
référence
d'une
fonction
utilisez
l'opérateur
&
aussi
bien
déclaration
fonction
l'assignation
valeur
retour
Ex
php
function
&
mafonction
&
var
{
var=
var+2
return
var
}
toto=
&
mafonction
var2
propriétés
objet
retourné
fonction
mafonction
liées
toto
agit
copie
var
Fonctions
•
PHP
supporte
surcharge
destruction
redéfinition
fonctions
déjà
déclarées
•
possible
d'appeler
fonctions
récursives
PHP
noter
qu'un
appel
récursif
infini
considéré
comme
erreur
programmation
Fonctions
utiles
PHP
•
gettype
var
retourne
type
variable
•
Addslashes
Ajoute
antislash
devant
caractères
spéciaux
Ex
res
=
addslashes
``
'
//
retourn
L\
•
Strstr
texte
chaineAchercher
Trouve
première
occurrence
chaîne
Ex
email
=
'name
example.com
'
domain
=
strstr
email
'
'
echo
domain
//
Affiche
example.com
Fonctions
utiles
PHP
•
Htmlspecialchars
chaine
flags
Convertit
caractères
spéciaux
entités
HTML
El
e
remplace
exemple
&
commercial
&
amp
example
flag
ENT_QUOTES
Convertit
guil
emets
doubles
guil
emets
simples
Ex
str
=
This
is
some
b
bold
/b
text
``
echo
htmlspecialchars
str
//
affiche
This
is
some
&
lt
b
&
gt
bold
&
lt
/
`
b
&
gt
text
•
strip_tags
chaine
allowableTags
Supprime
balises
HTML
PHP
d'une
chaîne
commentaires
HTML
PHP
également
supprimés
comportement
peut
être
modifié
paramètre
allowableTags
Ex
text
=
'
p
Test
paragraph.
/p
Comment
href=
#
fragment
Other
text
/a
'
//
Autorise
p
echo
strip_tags
text
'
p
'
//
affiche
p
Test
paragraph.
/p
href=
#
fragment
Other
text
/a
Fonctions
utiles
PHP
•
strlen
Retourne
longueur
chaîne
•
Trim
efface
espaces
blancs
début
fin
chaine
•
Strtolower
passe
tous
caractères
miniscules
•
Strtoupper
passe
tous
caractères
majuscules
•
Strpos
texte
chaine
recherche
position
première
chaine
trouvée
•
Ereg
chaine
texte
recherche
texte
séquences
caractères
chaine
Retourne
longueur
l'occurrence
trouvée
occurrence
trouvée
chaîne
string
FALSE
cas
contraire
erreur
survenue
Ex
if
ereg
``
BCD
ABCDEF
{
echo
oui
}
else
{
echo
non
}
Fonctions
utiles
PHP
•
isset
var1
var2
…
Détermine
variable
plusieurs
définies
différentes
NULL
Ex
if
isset
var
{
echo
'Cette
variable
existe
peux
l\'afficher
'
•
unset
var1
var2
…
Détruit
variables
•
empty
var1
Détermine
variable
vide
•
array_key_exists
key
array
Vérifie
clé
existe
tableau
Fonctions
utiles
PHP
•
in_array
valeur
array
Indique
valeur
appartient
tableau
•
array_keys
array
valeur
Retourne
toutes
clés
ensemble
clés
contenant
valeur
valeur
spécifié
alors
retourne
toutes
clés
tableau
•
array_values
array
Retourne
toutes
valeurs
d'un
tableau
Exercice
1
•
Ecrire
script
permet
afficher
nombres
premiers
parmi
0
1000
Utiliser
2
méthodes
différentes
While
for
Exercice
1
Solution
php
i=1
while
i
=1000
{
z=0
for
j=2
i
j++
{
if
i
==0
&
&
i
=
z++
}
if
z==0
echo
i
'
'
i++
}
Exercice
2
•
Ecrire
script
permet
créer
tableau
contenant
coordonnées
personne
puis
afficher
éléments
Utiliser
tableau
numéroté́
puis
tableau
associatif
Exercice
2
Solution
•
php
coordonnees=
array
‘
Camil
e
'
Dupont
'
21
Paris
'
for
i=0
i
count
coordonnees
i++
echo
coordonnees
i
'
'
•
Tableau
associatif
php
coordonnees=
array
prenom
=
``
Camille
nom
=
``
Dupont
age
=
21
ville
=
``
Paris
foreach
coordonnees
cle
=
value
{
echo
cle
``
=
``
value
``
br/
}
Exercice
3
•
Ecrire
fonction
'
moisfr
'
permet
afficher
mois
toutes
lettres
français
utilisant
instructions
Switch
Case
Afficher
mois
4
faisant
appel
fonction
Exercice
3
Solution
php
function
moisfr
date
{
switch
date
{
case
1
return
'Janvier
'
break
case
2
return
'Fevrier
'
break
case
3
return
'Mars
'
break
case
4
return
'Avril
'
break
case
5
return
'Mai
'
break
case
6
return
'Juin
'
break
case
7
return
'Juil
'
break
case
8
return
'Aout
'
break
case
9
return
'Septembre
'
break
case
10
return
'Octobre
'
break
case
11
return
'Novembre
'
break
case
12
return
'Décembre
'
break
default
return
'mois
non
valide
'
}
}
echo
moisfr
4
Exercice
4
Ecrire
script
php
permettant
afficher
résulat
suivant
Astuce
Utiliser
tableau
associatif
foncion
gettype
Test
variables
variable
toto
type
entier
valeur
10.
variable
titi
type
String
valeur
chaine
Exercice
4
Solution
html
body
center
h1
Test
variables
/h1
/center
php
variables=
array
toto
=
10
titi
=
``
chaine
foreach
variables
cle
=
value
{
echo
``
variable
``
cle
``
type
``
gettype
value
``
valeur
``
value
``
br/
}
/body
/html
Formulaires
définition
formulaires
fait
balise
FORM
utilisant
deux
attributs
suivant
•
METHOD
définir
méthode
transfert
données
vers
serveur
deux
valeurs
possible
POST
GET
données
formulaire
encodées
URL
•
ACTION
préciser
action
exécuter
lors
envoie
données
Exemple
utilisation
FORM
METHOD=
POST
ACTION=
cible.php
…
/FORM
Formulaires
éléments
formulaire
I.
INPUT
Champs
saisie
texte
différents
types
boutons
II
TEXTAREA
zones
texte
multi-lignes
III
SELECT
Listes
déroulantes
IV
FIELDSET
regrouper
éléments
formulaire
Formulaires
I.
INPUT
Champs
saisie
texte
différents
types
boutons
définir
attribut
TYPE
1
Text
zone
texte
seule
ligne
input
type=
text
id=
toto
name=
titi
{
autofocus/
required
}
/
•
ID
attribut
lu
navigateur
HTML
CSS
Javascript
•
NAME
sert
PHP
lors
validation
d'un
formulaire
Coté
PHP
valeur
zone
texte
récupérée
PHP
variable
_
POST
‘
titi
contre
variable
utilisée
css
donner
style
zone
#
toto
{
…
}
•
Value
permet
pré-remplir
champ
valeur
défaut
•
Placeholder
permet
donner
indication
contenu
champ
indication
disparaîtra
dès
visiteur
cliqué
l'intérieur
champ
Formulaires
2
Password
Zone
mot
passe
caratères
saisis
affichent
écran
input
type=
password
name=
pass
id=
pass
/
3
Checkbox
cases
cocher
input
type=
checkbox
name=
choix
id=
choix
value=
choix1
checked
/
4
Radio
zones
options
input
type=
``
radio
name=
choix
id=
choix
value=
choix1
/
Formulaires
5
Boutons
•
Reset
remise
zéro
formulaire
input
type=
reset
value=
Effacer
•
Submit
validation
formulaire
input
type=
submit
value=
Envoyer
/
Formulaires
II
TEXTAREA
créer
zone
texte
multi-lignes
textarea
name=
ameliorer
id=
ameliorer
/textarea
deux
façons
modifier
tail
e
zone
•
CSS
utilisant
propriétés
CSS
width
height
•
attributs
rows
cols
balise
textarea
premier
indique
nombre
lignes
texte
peuvent
être
affichées
simultanément
second
nombre
colonnes
Formulaires
III
SELECT
faire
choix
parmi
plusieurs
possibilités
sous
forme
liste
•
attribut
multiple
indique
qu'on
peut
sélectionner
plusieurs
options
parmi
cel
offertes
contrôle
défaut
attribut
n'est
utilisé
seule
option
peut
être
sélectionnée
•
intérieur
select
/select
placer
plusieurs
balises
option
/option
et/ou
grouper
options
balise
optgroup
/
optgroup
Formulaires
•
Exemple
Select
select
id=
GID
multiple
optgroup
label=
Groupe
1
option
Option
1.1
/option
/optgroup
optgroup
label=
Groupe
2
option
Option
2.1
/option
option
Option
2.2
/option
/optgroup
optgroup
label=
Groupe
3
disabled
option
Option
3.1
/option
option
Option
3.2
/option
option
Option
3.3
/option
/optgroup
/select
Formulaires
IV
FIELDSET
regrouper
éléments
formulaire
rapport
entre
•
attribut
Legend
permet
donner
titre
groupement
fieldset
legend
coordonnées
/legend
label
for=
nom
Quel
nom
/label
input
type=
text
name=
nom
id=
nom
/
label
for=
prenom
Quel
prénom
/label
input
type=
text
name=
prenom
id=
prenom
/
/fieldset
Traitement
Formulaires
Traitement
Formulaires
Selon
méthode
utilisée
formulaire
spécifiée
attribut
method
•
_GET
variable
super-globale
récupérer
données
formulaire
méthode
GET
•
_POST
variable
super-globale
récupérer
données
formulaire
méthode
POST
•
élément
formulaire
identifié
php
attribut
name
Traitement
Formulaires
Ex
1
form
method=
post
action=
cible.php
input
type=
text
id=
toto
name=
titi
/
input
type=
submit
value=
Envoyer
/
/form
php
récupérer
valeur
saisie
zone
texte
p
sais
comment
t'appel
hé
hé
t'appel
php
echo
_POST
titi
'
/p
Traitement
Formulaires
Ex
2
form
method=
‘
GET
action=
cible.php
Qu'est-ce
aimer
br
/
input
type=
checkbox
name=
loisirs
value=
shopping
/
Faire
shopping
br
/
input
type=
checkbox
name=
loisirs
value=
sport
/
Faire
sport
br
/
input
type=
submit
value=
réponse
/
/form
php
récupérer
valeurs
cochées
loisirs
=
_GET
``
loisirs
echo
b
aimez
/b
br
/
for
i=0
i
count
loisirs
i++
{
echo
loisirs
i
``
br
/
}
Exercices
•
Exercice
1
Transmettre
valeurs
saisies
variables
Nom
Prénom
Age
formulaire
fichier
source.php
autre
page
Cible.php
permet
afficher
Exercices
Exercice
1
Solution
source.php
form
method=
“
post
”
action=
”
cible.php
”
Prenom
input
type=
”
text
”
name=
“
prenom
”
br/
Nom
input
type=
”
text
”
name=
“
nom
”
br/
Age
input
type=
”
text
”
name=
“
age
”
input
type=
”
submit
”
value=
“
envoyer
”
cible.php
php
prenom
=
_POST
“
prenom
”
nom
=
_POST
“
nom
”
age=
_POST
“
age
”
echo
“
Bonjour
b
prenom
nom
/b
age
age
br
”
Exercices
Exercice
2
Transmettre
travers
lien
valeurs
variables
Nom
Age
fichier
source.php
autre
page
Cible.php
permet
afficher
sans
utiliser
formulaires
Utiliser
plutôt
lien
hypertexte
href=
‘
nomLien
/a
Exercices
Exercice
2
solution
Source.php
html
body
php
nom=
george
age=21
href='pagecibleTransValssForm.php
nom=
php
echo
nom
&
age=
php
echo
age
'
Lien
vers
cible
/a
/body
/html
Cible.php
html
body
php
nom=
_GET
'nom
'
age=
_GET
'age
'
echo
'Bonjour
'
nom
'
age
'
age
'
br
'
/body
/html
Exercices
Exercice
3
Ecrire
script
permet
protéger
contenu
page
secrète
login
mot
passe
utilisant
formulaire
Tout
script
doit
être
écrit
page
Exercices
Exercice
3
Solution
php
log=
login
pass=
motDepass
if
isset
_POST
'login
'
and
isset
_POST
'passw
'
login=
_POST
'login
'
passw=
_POST
'passw
'
Endif
if
login==
log
&
&
passw==
pass
html
body
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
CONTENU
CONFIDENTIEL
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
br/
b
Code
secret
XXXXXYYEYEYEYE
/b
/body
/html
php
else
html
body
form
method=
post
Login
input
type=
text
name=
login
/
br
Mot
passe
input
type=
password
name=
passw
br/
input
type=
submit
value=
Envoyer
/
/body
/html
php
endif
Visibilité
variables
•
PHP
existe
3
niveaux
visibilité
variables
selon
contexte
•
variables
superglobales
disponibles
n'importe
programme
•
variables
globales
toutes
variables
tableaux
objets
constantes
créons
nous-même
programme
principal
généralement
visible
programme
principal
•
variables
locales
toutes
variables
d'une
fonction
paramètres
compris
visibilité
n'est
locale
programme
principal
peut
agir
variables
Portée
variables
globales
•
PHP
variable
globale
peut
être
utilisée
intérieur
fonction
sans
passer
paramètre
celle-ci
Cela
possible
utilisant
mot
clé
global
Cependant
variable
doit
être
déclarée
l'intérieur
chaque
fonction
afin
pouvoir
être
utilisée
celle-ci
Exemple
php
=
1
b
=
2
function
somme
{
global
b
b
=
+
b
echo
b
//
exemple
déclarer
b
mot
clé
global
intérieur
somme
elles
manipuler
celle-ci.
}
•
deuxième
méthode
accéder
variables
globales
d'utiliser
variable
superglobale
GLOBALS
Exemple
php
=
1
b
=
2
function
somme
{
GLOBALS
'
b
'
=
GLOBALS
'
'
+
GLOBALS
'
b
'
}
echo
b
}
variables
superglobales
•
variables
superglobales
générées
automatiquement
PHP
–
el
disponibles
quel
contexte
script
intérieur
fonction
sans
être
passées
paramètre
cel
e-ci
–
el
écrites
majuscules
commencent
underscore
_
–
El
généralement
tableaux
associatifs
variables
superglobales
Notons
•
GLOBALS
rassemble
variables
globales
•
_ENV
variables
d'environnement
toujours
données
serveur
•
_SESSION
variables
session
variables
restent
stockées
serveur
temps
présence
d'un
visiteur
•
_COOKIE
contient
valeurs
cookies
enregistrés
l'ordinateur
visiteur
•
_GET
contient
données
envoyées
paramètres
l'URL
•
_POST
contient
informations
viennent
d'être
envoyées
formulaire
variables
superglobales
Exemple
1
html
head
title
variable
_SERVER
/title
/head
body
php
echo
'Nom
fichier
cours
exécution
partir
racine
'.
_SERVER
'PHP_SELF
'
echo
'
br/
'
echo
'Nom
racine
script
'
_SERVER
'DOCUMENT_ROOT
'
echo
'
br/
'
echo
'Nom
client
HTML
'
_SERVER
'HTTP_USER_AGENT
'
'
br
'
echo
'Nom
serveur
exécute
script
'
_SERVER
'SERVER_NAME
'
echo
'
br/
br/
'
echo
‘
adresse
IP
‘
_SERVER
'REMOTE_ADDR
'
/body
/html
Inclusion
fichiers
inclusion
fichiers
PHP
sert
réutiliser
partie
code
identique
plusieurs
endroits
page
pages
différentes
inclusion
fichiers
fait
include
require
1.
include
fonction
renvoie
erreur
type
WARNING
fait
el
e
arrive
ouvrir
fichier
code
suit
exécuté
2.
require
fonction
identique
include
sauf
lorsqu'une
erreur
survient
erreur
type
FATAL
stoppera
exécution
script
Inclusion
fichiers
Lorsqu
fichier
importé
code
trouvant
intérieur
exécuté
Ainsi
variables
constantes
fichier
importé
peuvent
être
réutilisés
suite
programme
Exemple
fichier1
.php
php
//
Définition
variables
=
2
b
=
4
//
Affichage
d'un
texte
echo
'Un
peu
mathématiques
'
fichier2
réutilise
code
fichier1
php
//
Importation
exécution
fichier1
require
fichier1.php
'
//
Calcul
produit
produit
=
*
b
//
Affichage
somme
echo
Produit
b
=
'
produit
//
affichera
8
Redirection
vers
page
•
PHP
fonction
header
charge
d'envoyer
serveur
entêtes
passés
paramètre
•
créer
redirection
PHP
utilise
fonction
envoyer
entêtes
type
Location
adresse
•
Règle
importante
l'appel
‘
header
doit
faire
avant
tout
envoi
navigateur
Redirection
vers
page
Script
redirection
php
header
'Location
http
//
www.votresite.com/pageprotegee.php
'
Variables
session
•
variables
session
servent
stocker
temporairement
informations
utilisateur
serveur
•
El
présentes
toutes
page
site
pendant
présence
visiteur
•
El
accessible
via
superglobale
_SESSION
variables
session
Gestion
sessions
•
visiteur
arrive
site
session
créée
PHP
génère
identifiant
unique
appelé
‘
session
ID
•
fois
session
démarrée
automatiquement
session_start
infinité
variables
session
peuvent
être
créées
selon
besoin
•
session
fermée
session_destroy
visiteur
charge
plus
page
site
pendant
quelques
minutes
visiteur
souhaite
déconnecter
Variables
session
variables
sessions
accessibles
toutes
pages
site
web
faut
appeler
session_start
chacune
pages
avant
décrire
moindre
code
HTML
avant
doctype
Variables
session
•
Exemple
php
//
démarer
session
session_start
echo
'Bienvenue
page
numéro
1
//
s'amuse
créer
quelques
variables
session
_SESSION
_SESSION
'prenom
'
=
'Jean
'
_SESSION
'motPass
'
=
'MotDePasse
html
head
title
sessions
/title
/head
body
php
if
isset
_SESSION
'prenom
'
{
echo
p
salut
sais
es-tu
t'appel
_SESSION
'prenom
'
``
/p
echo
p
href=\
fichierUtilisantVariablesSession.php\
cliquer
ici
SVP
/a
/p
}
else
{
echo
variables
session
déclarées
br/
}
/body
/html
Cookies
•
cookie
mécanisme
stocker
informations
visiteurs
afin
identifier
plus
tard
•
Contrairement
variables
session
cookies
petits
fichiers
stockés
ordinateur
utilisateur
durée
vie
pouvons
définir
•
cookies
accessibles
via
superglobale
_COOKIE
Cookies
•
fonction
setcookie
permet
définir
cookie
envoyé
reste
en-têtes
HTTP
àLes
cookies
font
partie
en-têtes
HTTP
impose
setcookie
appelée
avant
tout
affichage
texte
avant
doctype
fonction
setcookie
peut
prendre
jusqu
'
7
paramètres
Seul
premier
obligatoire
car
définit
nom
cookie
deuxième
définit
valeur
cookie
troisième
définit
durée
vie
cookie
seconde
Exemple
setcookie
nom
'
‘
nomUtilisateur
time
+3600
*
24
echo
_COOKIE
‘
nom
//
affichage
cookie
•
fonction
setrawcookie
exactement
setcookie
excepté
valeur
cookie
automatiquement
encodée
URL
lors
l'envoi
navigateur
•
détruire
cookie
appeler
setCookie
date
expiration
passé
•
Ex
setcookie
Nomcookie
valeurCookie
time
-3600
Cookies
•
Exemple
cookie
sous
forme
tableau
php
setcookie
``
cookie
three
cookiethree
time
+3600
*
1
setcookie
``
cookie
two
cookietwo
time
+3600
*
1
setcookie
``
cookie
one
cookieone
time
+3600
*
1
//
affichage
cookies
php
if
isset
_COOKIE
'cookie
'
{
//
exemple
d'appel
cookie
echo
'le
cokie
two
'
_COOKIE
'cookie
'
'two
'
'
sinon
peut
parcourir
foreach
comme
suit
br/
'
foreach
_COOKIE
'cookie
'
name
=
value
{
name
=
htmlspecialchars
name
value
=
htmlspecialchars
value
echo
name
value
br
/
}
}
Exercice
Ecrire
script
permet
protéger
contenu
page
secrète
login
mot
passe
utilisant
formulaire
Note
1-écrire
page
authentification.php
contenant
formulaire
login/mot
passe
lien
hypertexte
permettant
afficher
page
secrète
variable
session
‘
login
déjà
créée
Manipuler
page
données
formulaire
comme
suit
2-Diriger
utilisateur
vers
pageSecret1.php
contenant
code
secret
ZZZZZZZZZZ
login==
‘
login1
pass==
‘
pass1
début
faut
vérifier
login==login1
afficher
bonjour
M/Mme
valeurdelogin
Afficher
code
secret
Créer
suite
lien
vers
page
précédente
lien
déconnexion
permettant
rester
page
tout
créant
variable
deconnecter=
yes
3-Diriger
utilisateur
vers
pageSecret2.php
contenant
code
secret
ZZZZZZZZZZ
login==
‘
login2
pass==
‘
pass2
début
faut
vérifier
login==login2
afficher
bonjour
M/Mme
valeurdelogin
Afficher
code
secret
Créer
suite
lien
vers
page
précédente
lien
déconnexion
permettant
rester
page
tout
créant
variable
deconnecter=
yes
4-Sinon
afficher
page
message
Veuil
ez
entrer
login
mot
passe
valide
tout
laissant
formulaire
visible
afin
permettre
utilisateur
authentifier
Programmation
Orienté
Objet
POO
Classe
Objet
•
classe
permet
définition
nouveau
type
variable
rassemble
plusieurs
attributs
•
El
e
permet
également
définition
fonctions
manipulant
attributs
POO
fonctions
appel
ent
‘
méthodes
•
objet
instance
classe
objet
alors
assimilé
variable
classe
type
objet
Programmation
Orienté
Objet
POO
concepts
base
POO
deux
buts
•
faciliter
réutilisation
code
déjà
écrit
grâce
l'héritage
–
héritage
permet
partir
d'une
classe
déjà
existante
d'en
créer
nouvel
e
reprendra
caractéristiques
adapter
besoins
sans
modifier
classe
base
–
possible
alors
redéfinir
méthode
classes
héritant
d'une
classe
base
sauf
méthode
défini
comme
final
appel
méthode
d'un
objet
possible
sans
soucier
type
intrinsèque
s'agit
polymorphisme
Ø
polymorphisme
traite
capacité
l'objet
posséder
plusieurs
formes
•
l'encapsulation
données
traitements
correspondants
–
encapsulation
permet
regrouper
ensemble
attribut
ensemble
méthodes
classe
permettant
manipuler
POO
PHP
syntaxe
base
définition
classe
commence
mot-clé
class
suivi
nom
classe
création
instanciation
objet
méthode
portant
nom
classe
appelée
automatiquement
constructeur
dernier
définit
mot
clé
__construct
Lors
définition
méthodes
classes
attributs
non
statiques
appelés
operateur
objet
this-
nomDePropriété
Exemple
class
Personne
{
//
déclaration
attributs
public
nom
age
//
déclaration
constructeur
public
function
__construct
nom
age
{
this-
nom=
nom
//
this
représente
objet
entrain
définir
this-
age=
age
}
//
déclaration
méthodes
public
function
affiche
{
echo
this-
nom
echo
this-
age
}
}
POO
PHP
Visibilité
d'un
attribut
d'une
méthode
•
public
attribut
méthode
public
alors
pourra
avoir
accès
depuis
n'importe
•
private
impose
quelques
restrictions
accès
attributs
méthodes
seulement
possible
depuis
l'intérieur
classe
Ø
mettez
jamais
constructeur
type
visibilité
private
sinon
el
e
pourra
jamais
être
appelé
pourrez
instancier
classe
•
protected
effet
private
exception
toutes
classes
fil
accès
attributs
protégés
POO
PHP
mot
clé
static
mot
clé
static
utilisé
après
type
visibilité
déclarer
méthode
attribut
statique
attributs
méthodes
statiques
peuvent
être
utilisés
sans
avoir
besoin
d'instancier
classe
peut
accéder
directement
utilisant
nom
classe
attributs
statiques
dites
‘
attributs
classe
Ainsi
tous
objets
accès
attributs
mêmes
valeurs
tous
objets
méthodes
statiques
classe
servent
manipuler
attributs
statiques
Ainsi
méthodes
statiques
peuvent
manipuler
attributs
non
statiques
classe
POO
PHP
opérateur
L'opérateur
résolution
portée
double
deux
point
fournit
moyen
d'accéder
membres
statiques
constantes
ainsi
qu'aux
attributs
méthodes
surchargées
d'une
classe
àLe
mot
clé
self
utilisé
accéder
méthodes
attributs
statiques
depuis
classe
àLe
mot
clé
parent
utilisé
accéder
propriétés
méthodes
surchargés
constantes
classe
depuis
classe
fil
e.
àPour
référencez
éléments
dehors
classe
utilisez
plutôt
nom
classe
nomClasse
POO
PHP
Héritage
classe
peut
hériter
d'une
autre
classe
utilisant
mot-clé
extends
déclaration
accéder
méthodes
propriétés
statiques
classe
mère
l'opérateur
parent
utilisé
Exemple
class
ExtendClass
extends
SimpleClass
{
//
Redéfinition
méthode
parente
et/ou
ajout
attributs
function
afficher
{
echo
Classe
étendue
parent
:afficher
}
}
extended
=
new
ExtendClass
//
instanciation
extended-
afficher
//
polymorphisme
POO
PHP
Abstraction
Classe
abstraite
classe
peut
instancier
directement
Ø
El
e
définit
mot
clé
abstract
déclaration
Ø
exploiter
classe
abstraite
faut
créer
classe
hérite
classe
abstraite
classe
abstraite
permet
définir
comportements
méthodes
l'implémentation
code
méthode
fait
classes
fil
Ø
rend
méthode
abstraite
utilisant
mot
clé
abstract
avant
visibilité
méthode
alors
toutes
classes
fil
forcés
écrire
méthode
POO
PHP
Abstraction
Exemple
classe
abstraite
abstract
class
NomAbstractClass
{
//
Force
classes
fil
définir
deux
méthode
suivants
abstract
protected
function
getValue
abstract
protected
function
prefixValue
prefix
//
méthode
commune
public
function
printOut
{
print
this-
getValue
``
\n
}
}
POO
PHP
constante
classe
possible
définir
valeurs
constantes
intérieur
classe
modifiables
visibilité
défaut
constantes
classe
public
Exemple
class
MyClass
{
const
CONSTANT
=
'valeur
constante
'
function
showConstant
{
echo
self
:CONSTANT
``
\n
//
self
:CONSTANT=
‘
nouvel
e
valeur
entrainera
erreur
}
}
echo
MyClasse
CONSTANT
POO
PHP
constante
classe
Attention
confondre
attributs
statiques
constantes
classe
àun
attribut
statique
peut
tout
fait
changer
valeur
cours
temps
différence
constante
valeur
fixée
POO
PHP
constante
classe
Cependant
possible
déclarer
constante
classe
base
changer
valeur
classe
fil
e
seulement
utilisant
méthode
get_called_class
retournera
nom
classe
depuis
laquel
e
constante
appelée
Ainsi
nouvel
e
valeur
constante
propre
classe
fil
e
classe
mère
garde
valeur
initiale
constante
POO
PHP
constante
classe
Exemple
php
class
Personne
{
//
déclaration
constante
const
nomClasse=
Personne
public
function
__construct
{
echo
‘
ceci
constructeur
/
*
peut
changer
valeur
constante
ici
self
:nomClasse=
‘
test
*
/
}
public
function
affiche
{
c=get_called_class
echo
valeur
constante
nomClasse
'
:nomClasse
'
br/
'
}
}
class
HPErsonne
extends
Personne
{
const
nomClasse=
HPErsonne
public
function
__construct
{
parent
:__construct
//parent
:nomClasse=
‘
test2
retournera
encore
erreur
}
}
p=new
Personne
p-
affiche
hp=new
HPErsonne
hp-
affiche
POO
PHP
mot
clé
final
mot-clé
final
indique
qu'un
élément
peut
être
changé
suite
programme
Ø
s'appliquer
méthodes
d'une
classe
ainsi
classe
el
e-même
Ø
attributs
peuvent
être
déclarés
comme
final
méthode
indiquée
comme
final
peut
être
redéfinie
classe
dérivée
Ø
peut
s'en
servir
forcer
comportement
d'une
méthode
sous-classes
•
classes
final
peuvent
être
dérivées
non
possibilité
héritage
POO
PHP
mot
clé
final
Exemple
classe
final
final
class
BaseClass
{
public
function
test
{
echo
BaseClass
:test
appelée
}
//
Ici
méthode
suivante
finale
final
public
function
moreTesting
{
echo
BaseClass
:moreTesting
appelée
}
}
class
ChildClass
extends
BaseClass
{
}
//
Résultat
Fatal
error
Class
ChildClass
may
not
inherit
from
final
class
BaseClass
SGBS
PHP
•
SGBD
logiciel
système
destiné
stocker
partager
informations
base
données
garantissant
qualité
pérennité
confidentialité
informations
tout
cachant
complexité
opérations.
WIKIPEDIA
Parmi
logiciels
plus
connus
trouve
MySQL
PostgreSQL
SQLite
Oracle
MAriaDB
liste
détail
ée
SGBD
consulter
lien
http
//fadace.developpez.com/sgbdcmp/
#
LI
SGBS
PHP
systèmes
peuvent
être
catégorisés
comme
suit
SGDB
Relationnel
Système
basé
modèle
relationnel
données
stockées
tables
structurées
colonnes
lignes
relations
lient
tables
entre
el
–
Système
libre
MySQL
PostgreSQL
MariaDB
Firebird
Ingres
HSQLDB
Derby
–
Système
propriétaire
Oracle
Database
Microsoft
SQL
Server
DB2
MaxDB
4D
dBase
Informix
Sybase
SGBD
Orienté
objet
ZODB
db4o
Embarqué
SQLite
Berkeley
DB
SGBD
NoSQL
Cassandra
Redis
MongoDB
SimpleDB
BigTable
CouchDB
HBase
LevelDB
RethinkDB
Memcached
SGBS
PHP
Manipulation
bases
données
mysql
fait
via
interface
graphique
comme
‘
PhpMyAdmin
exécutant
script
php
1
PhpMyadmin
•
programme
permettant
d'avoir
vue
rapide
ensemble
données
•
outils
plus
connus
permettant
manipuler
base
données
MySQL
•
PhpMyAdmin
livré
WAMP
presque
tous
hébergeurs
permettent
d'utiliser
phpMyAdmin
chemin
accès
http
//localhost:8888/phpMyAdmin
SGBS
PHP
2
Utilisation
SGBD
via
script
PHP
manipulation
base
données
s'effectue
5
temps
§
Connexion
serveur
données
§
Sélection
base
données
§
Requête
§
Exploitation
requêtes
§
Fermeture
connexion
MYSQL
PHP
Exemple
SGBD
MYSQL
PHP
offre
3
API
connecter
MySQL
1.Mysqli
//
connexion
base
données
link
=
mysqli_connect
``
localhost
root
passwords
dbName
if
mysqli_connect_errno
{
/
*
Vérification
connexion
*
/
printf
``
Échec
connexion
s\n
mysqli_connect_error
exit
}
query
=
SELECT
Name
FROM
tablename
ORDER
by
ID
DESC
if
result
=
mysqli_query
link
query
{
/
*
exécution
requête
*
/
while
row
=
mysqli_fetch_assoc
result
{
/
*
Récupère
tableau
associatif
*
/
printf
``
br/
row
'Name
}
mysqli_free_result
result
/
*
Libère
jeu
résultats
*
/
}
/
mysqli_close
link
/
*
Fermeture
connexion
*
MYSQL
PHP
2
Mysql
obsolète
supprimé
depuis
version
PHP.7
=
mysql_connect
``
example.com
user
password
mysql_select_db
``
database
result
=
mysql_query
``
SELECT
nom
from
tableName
row
=
mysql_fetch_assoc
result
echo
htmlentities
row
nom
'
MYSQL
PHP
3
PDO
OO
pdo
=
new
PDO
'mysql
host=example.com
dbname=database
'
'user
'
'password
statement
=
pdo-
query
``
SELECT
nom
from
tableName
row
=
statement-
fetch
PDO
:FETCH_ASSOC
echo
htmlentities
row
‘
nom
'
RQ
PHP
offre
possibilité
exploiter
API
mysqli
façon
orienté
objet
OO
mysqli
=
new
mysqli
``
localhost
root
password
world
result
=
mysqli-
query
``
SELECT
Name
from
tablename
while
row
=
result-
fetch_assoc
{
echo
htmlentities
row
'Name
'
``
br/
}
MYSQL
PHP
POO
Manipulation
résultats
requête
sous
forme
objets
Exemple
1
php
mysqli
=
new
mysqli
``
localhost
root
root
world
/
*
Vérification
connexion
*
/
if
mysqli_connect_errno
{
printf
``
Échec
connexion
s\n
mysqli_connect_error
exit
}
query
=
SELECT
ID
Name
CountryCode
FROM
citoyen
ORDER
by
ID
DESC
LIMIT
50,5
if
result
=
mysqli-
query
query
{
/
*
Récupère
tableau
d'objets
*
/
while
obj
=
result-
fetch_object
{
printf
``
\n
obj-
Name
obj-
CountryCode
}
/
*
free
result
set
*
/
result-
close
}
/
*
Fermeture
connexion
*
/
mysqli-
close
NOTEZ
fetch_object
affecte
attributs
l'objet
avant
d'en
appeler
constructeur
faut
alors
vérifier
valeurs
assignées
attributs
avant
leurs
affecter
nouvelles
valeurs
déclaration
constructeur
MYSQL
PHP
POO
Manipulation
résultats
requête
sous
forme
objets
déclaration
class
Exemple
2
//
Définition
classe
class
Personne
{
//
déclaration
attributs
Private
id
nom
age
//
déclaration
constructeur
public
function
__construct
id=0
{
if
this-
id
this-
id=
id
}
public
function
__ToString
{
Return
‘
nom
this-
nom
‘
age
‘
this-
age
‘
br/
}
}
//
connexion
base
données
…
//
affichage
résultats
while
obj
=
result-
fetch_object
‘
Personne
{
echo
obj
}
Traquer
erreurs
PDO
try-catch
PDOException
identifier
source
erreurs
lors
exécution
script
PHP
Ajouter
6ème
paramètre
PDO
comme
suit
php
bdd
=
new
PDO
'mysql
host=localhost
dbname=world
charset=utf8
'
'root
'
array
PDO
:ATTR_ERRMODE
=
PDO
:ERRMODE_EXCEPTION
àDésormais
toutes
requêtes
SQL
comportent
erreurs
vont
avoir
message
beaucoup
plus
clair
Exercices
PHP/MYSQL
Exercice
1
Ecrire
script
PHP
afficher
lignes
table
citoyen
affichant
date
format
jj-mm-yyyy
Exercice
2
REFAIRE
exercice
code
secret
utilisant
base
données
-login1/pass1
va
devoir
lire
page
secret1.php
-login2./pass2
va
devoir
lire
page
secret2.php
Transaction
Modèle
ACID
Transaction
ensemble
traitements
requêtes
exécutés
tous
rien
ACID
=
Atomicité
Cohérence
Isolation
Durabilité
1
Atomicité
assure
qu'une
transaction
fait
complet
tout
àCette
règle
doit
être
respectée
toute
situations
notamment
lors
panne
d'électricité
défaillance
l'ordinateur
Début
transaction
START
TRANSACTION
Requêtes
SELECT
UPDATE
..
Validation
transaction
COMMIT
Annulation
transaction
cas
erreur
ROLLBACK
RQ
erreur
intégrité
données
roolback
fait
automatiquement
Transaction
Modèle
ACID
2
Cohérence
assure
chaque
transaction
amènera
système
d'un
état
valide
autre
état
valide
t+1
avant
exécution
t+1
après
exécution
Transaction
Modèle
ACID
3
Isolation
aucune
dépendance
entre
transactions
Exemple
utilisation
notion
‘
verrou
bloquer
lecture
/ou
écriture
accès
base
données
4
Durabilité
assure
lorsqu'une
transaction
confirmée
el
e
demeure
enregistrée
suite
d'une
panne
d'électricité
d'une
panne
l'ordinateur
d'un
autre
problème
Transactions
MYSQL
MYSQL
particularité
gérer
plusieurs
moteurs
stockage
BD
aussi
appelé
moteur
table
•
moteur
stockage
ensemble
algorithmes
permettant
stocker
accéder
données
SGBD
principe
seul
moteur
utilisé
SGBD
•
lister
tous
moteurs
utilisez
requête
SHOW
ENGINES
Transactions
MYSQL
•
Principaux
moteurs
stockage
MYSQL
MyISAM
très
populaire
ü
Très
simple
utilisation
ü
très
performant
tables
fréquemment
ouvertes
très
rapide
opération
count
lecture
ü
Offre
index
FULL-TEXT
permet
faire
recherche
précise
textes
×
supporte
clés
étrangères
transactions
×
Gère
verrouil
age
niveau
table
bloque
table
entière
lors
opérations
insertions
suppressions
MAJ
Transactions
MYSQL
•
Principaux
moteurs
stockage
MYSQL
Memory
Stocke
données
table
mémoire
RAM
ü
Rapidité
accès
×
cas
panne
données
stockées
supprimées
InnoDB
souvent
utilisé
secteurs
sensibles
ü
Gestion
clés
étrangères
support
transactions
chaque
requête
considérée
comme
transaction
ü
Gère
verrouil
age
niveau
ligne
×
propose
index
FULL-TEXT
légèrement
plus
lent
opérations
Transactions
MYSQL
•
Exemple
gestion
transaction
Mysql
achat
ligne
1
supporter
transaction
faut
spécifier
moteur
InnoDB
lors
création
table
CREATE
TABLE
Compte
ID
int
Solde
int
not
null
ENGINE=InnoDB
SET
autocommit=0
//
désactiver
validation
automatique
requêtes
START
TRANSACTION
UPDATE
compte
SET
solde=solde+100
where
id=IDVendeur
UPDATE
compte
SET
solde=solde-100
where
id=IDAcheteur
COMMIT
Transactions
PDO
Exemple
•
Début
transaction
bdd-
beginTransaction
•
Specification
Transaction
bdd-
query
bdd-
query
..
Validation
/
annulation
transaction
bdd-
commit
bdd-
rol
back
Exercice
Écrire
script
php
va
compter
nombre
visiteurs
site
Remarque
1
Avant
écrire
script
pensez
choisir
moteur
stockage
adéquat
2
Utiliser
driver
PDO
Références
Manuel
PHP
•
http
//php.net
Cours
ligne
•
https
//openclassrooms.com/courses/
programmez-en-oriente-objet-en-php
•
http
//caron.ws/data/livre/PHP_v1.pdf
