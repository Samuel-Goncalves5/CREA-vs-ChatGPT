cours|cour
PHP
accélérer
version
Gérard
Rozsavolgyi
septembre
,
table
du
matière
ce
cours|cour
au
format
epub
ce
cours|cour
au
format
pdf
table
du
matière
:
caractéristique
principal
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fonctionnement
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
historique
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
installation
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
configuration
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
exemple
simple
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
imbrication
de
code
HTML
et
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
un
formulaire
HTML
et
son
réponse
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
variable
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
chaîne
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
typage
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
quelque
particularité
de
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
tableau
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
tableau
prédéfinir
de
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
L
’
inclusion
de
fichier
externe
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
objet
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
le
collection
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
connexion
au
base
de
donnée
depuis
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
requête
préparer
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
complément
sur
PDO
-
sécurité
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
filtrage
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
gestion
du
transaction
avec
PDO
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
connexion
persistant
avec
PDO
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
validation
et
contrôle
d
’
entrée
avec
GUMP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Http
et
le
conservation
d
’
information
sur
le
client
.
.
.
.
.
.
.
.
.
.
.
.
.
.
manipuler
XML
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
architecture
de
type
MVC
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Template
Twig
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
i
composer
,
Symfony
et
Flex
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tester
un
application
PHP
-
TDD
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
mettre
en
place
un
Web
service
REST
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
exemple
de
service
REST
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tester
un
api
REST
avec
votre
navigateur
ou
avec
curl
.
.
.
.
.
.
.
.
.
.
.
.
tester
un
api
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
Lic
pro
Web
et
mobile
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
2ème
année
IUT
informatique
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
Lic
pro
Web
et
mobile
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
CVRH
Tours
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
démarrer
avec
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Bob
travailler
avec
Alice
grâce
à
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
se
mettre
à
jour
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
travailler
sur
un
branche
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Bob
et
le
branche
d
’
Alice
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
récupérer
le
dernier
version
du
master
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
GIT
référence
index
et
recherche
index
ii
chapitrer
ce
cours|cour
au
format
epub
PHP
en
accéléré
format
epub
cours|cour
PHP
accélérer
,
version
chapitre
.
ce
cours|cour
au
format
epub
chapitre
ce
cours|cour
au
format
pdf
PHP
en
accéléré
en
pdf
cours|cour
PHP
accélérer
,
version
chapitre
.
ce
cours|cour
au
format
pdf
chapitrer
table
du
matière
:
caractéristique
principal
langage
interpréter
—
pas
de
compilation
—
exécuter
instruction
par
instruction
—
Multi-plateformes
—
compilateur
AOT
/
ByteCode
en
PHP7
zend
—
compilateur
JIT
pour
HHVM
Facebook
—
langage
hack
proposer
par
Facebook
spécialiser
dans
le
génération
de
texte
ou
de
document
—
HTML
—
PDF
—
image
fichier
d
’
extension
.php
—
coder
insérer
dans
un
page
HTML
—
entre
balise
<
?
php
et
?
>
cours|cour
PHP
accélérer
,
version
fonctionnement
L
’
interpréteur
lire
un
fichier
source
.php
puis
générer
un
flux
de
sortie
avec
le
règle
suivant
:
—
tout
ligne
situer
à
l
’
extérieur
d
’
un
bloc
PHP
(
entre
<
?
php
et
?
>
)
être
recopier
inchangé
dans
le
flux
de
sortie
—
le
code
PHP
être
interpréter
et
générer
éventuellement
du
résultat
intégré
eux
aussi
au
flux
de
sortie
—
le
erreur
éventuel
donner
lieu
à
du
message
d
’
erreur
qu
’
on
retrouver
également
dans
le
flux
de
sortie
(
selon
le
configuration
du
serveur
)
—
un
page
html
pur
sauvegarder
avec
l
’
extension
.php
être
donc
non
modifier
et
ren-
voyée
tel
quel
.
.
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
historique
créateur
Rasmus
Lerdorf
,
un
programmeur
Grœnlandais
avec
le
nationalité
canadien
,
créer
PHP
en
pour
analyser
le
connexion
sur
son
site
Web
.
il
réaliser
le
premier
mouture
du
langage
(
v1
et
v2
)
.
en
,
deux
étudiant
,
Andi
Gutmans
et
Zeev
Suraski
,
reprendre
le
moteur
,
il
en
sortir
PHP
puis
le
outil
zend
.
note
:
le
langage
PHP
avoir
subir
de
profond
remaniement
et
avoir
bénéficier
de
beaucoup
d
’
enrichis-sements
depuis
ce
premier
version
.
le
premier
version
objet
de
PHP
(
le
version
)
avoir
être
profondément
remanier
lors
du
passage
de
PHP4.0
à
PHP5.0
et
s
’
inspirer
désormais
largement
du
modèle
de
java
.
le
version
actuel
de
PHP
être
le
,
sortir
en
.
le
version
être
sortir
en
décembre
et
il
n
’
y
avoir
jamais
avoir
de
version
!
PHP
(
https
:
/
/
dns-remplacer
/
rfc
/
php7timeline
)
avertissement
:
le
début
du
développement
de
le
version
de
PHP
dater
de
et
avoir
être
abandonner
en
raison
de
difficulté
d
’
intégration
du
support
Unicode
.
le
autre
fonctionnalité
envisager
avoir
depuis
été
intégrer
à
PHP
ou
.
Ca
n
’
avoir
pas
empêcher
un
certain
nombre
de
livre
intituler
PHP
de
sortir
bien
que
ce
version
n
’
exister
jamais
.
.
.
le
saga
PHP
:
—
Facebook
avoir
publier
en
HipHop
Virtual
machiner
dire
HHVM
,
un
machine
virtuel
permettre
de
pré-compiler
le
code
PHP
en
bytecode
à
le
manière
de
java
(
JIT
Compi-
ler
)
.
—
en
,
Facebook
sortir
le
langage
hack
,
s
’
exécuter
grace
à
HHVM
et
apporter
du
fonctionnalité
comme
le
typage
fort
,
du
classe
paramétrables
,
un
api
de
collec-
tions
plus
riche
et
cohérent
,
du
traitement
asynchrone
et
davantage
de
sécurité
avec
l
’
extension
XHP
.
—
le
framework
PHP
Phalcon
(
extension
PECL
de
PHP
)
,
proposer
Zephir
(
zend
Engine
PHp
Intermediate
)
(
https
:
/
/
dns-remplacer
/
phalcon
/
zephir
)
qui
permettre
le
création
d
’
extension
rapide
en
PHP
(
coder
en
C
)
de
manière
simplifier
(
sans
écrire
du
C
directe-
mentir
)
.
—
le
société
zend
avoir
réagir
face
à
HHVM
en
accélérer
le
développement
de
le
nouveau
mouture
de
PHP
et
en
améliorer
son
performance
avec
un
mécanisme
de
compilation
AOT
(
Ahead
of
Time
)
PHP
signifier
d
’
abord
Personal
home
page
puis
HypertextPreProcessor
.
historique
cours|cour
PHP
accélérer
,
version
syntaxe
et
structure
—
proche
du
C
ou
du
Perl
—
peu
structurer
au
début
—
possibilité
de
définir
du
fonction
et
du
classe
—
très
bon
performance
pour
PHP
(
amélioration
de
l
’
ordre
de
%
de
le
vitesse
d
’
exécution
)
utilisation
—
grand
succès
—
utilisation
par
de
très
grand
site
—
beaucoup
de
code
libre
disponible
.
—
du
dizaine
de
million
de
site
Web
l
’
utiliser
à
travers
le
monde
.
.
.
—
comme
le
Monde
(
http
:
/
/
dns-remplacer
/
)
,
Facebook
(
http
:
/
/
dns-remplacer
/
)
ou
Yahoo
(
http
:
/
/
dns-remplacer
/
)
CMS
le
grand
CMS
content
management
System
ou
système
de
gestion
de
contenu
utiliser
PHP
,
comme
:
—
Wordpress
—
Joomla
—
Drupal
le
CMS
de
ecommerce
aussi
:
—
Prestashop
—
Magento
Frameworks
de
grand
Frameworks
de
développement
Web
aussi
être
disponible
en
PHP
:
—
Symfony
—
zend
—
Laravel
—
Phalcon
—
CakePHP
—
Yii
—
Slim
noter
:
plus
de
million
de
site
être
réaliser
en
PHP
à
travers
le
monde
!
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
installation
PHP
indication
:
tout
informaticien
devoir
savoir
ce
que
LAMP
vouloir
dire
.
.
.
LAMP
:
—
Linux
—
apache
—
MySQL
—
PHP
par
exension
,
le
logiciel
équivalent
pour
Windows
,
s
’
être
retrouver
nommer
:
WAMP
:
pour
Windows
et
MAMP
pour
le
mac
.
.
.
MAMP
:
pour
mac
.
pas
indispensable
car
apache
et
PHP
être
installer
sur
mac
os
10.xx
mais
un
peu
plus
simple
à
configurer
.
il
vous
falloir
alors
installer
MySQL
soit
dans
un
paquet
soit
en
utiliser
homebrew
ou
macport
pour
tout
le
plate-forme
,
on
pouvoir
aussi
installer
XAMPP
(
https
:
/
/
dns-remplacer
/
fr
/
dns-remplacer
)
revenir
à
l
’
os
de
référence
à
présent
.
sous
Linux
:
—
installer
Apache2
—
installer
PHP7
—
Télécharger
éventuellement
le
documentation
(
paquet
php-doc
)
—
vérifier
le
fichier
dns-remplacé
—
installer
MySQL
(
client
et
serveur
)
—
installer
PHPMyAdmin
—
installer
du
paquet
complémentaire
(
dont
le
nom
commencer
par
php5-
)
.
installation
PHP
cours|cour
PHP
accélérer
,
version
configuration
PHP
le
fichier
dns-remplacer
le
fichier
dns-remplacé
contenir
tout
le
directive
essentiel
de
réglage
.
—
taille
du
fichier
téléchargeables
—
Safe-Mode
—
affichage
et
traitement
du
erreur
—
communication
avec
MySQL
danger
:
attention
,
le
directive
de
ce
fichier
être
très
important
pour
le
sécurité
d
’
un
serveur
en
production
.
il
falloir
y
veiller
et
la|le
vérifier
minutieusement
dans
ce
cas
.
sous
certain
distribution
de
Linux
,
il
exister
version
de
ce
fichier
un
de
developpement
et
un
autre
pour
un
serveur
de
production
.
N
’
oublier
pas
d
’
activer
le
bon
version
selon
le
contexte
et
de
la
vérifier
en
tout
le
cas
.
le
directive
principal
dns-remplacer
:
ce
directive
être
très
nombreux
.
J
’
avoir
retenir
le
plus
important
dans
le
fichier
suivre
en
commenter
leur
rôle
.
[
PHP
]
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
about
dns-remplacé
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
fichier
de
configuration
principal
de
PHP
;
qui
permettre
de
préciser
le
principal
option
;
sous
certain
distribution
Linux
,
il
en
exister
version
:
;
un
de
developpement
et
un
autre
pour
un
serveur
de
production
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Language
option
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
pour
activer
PHP
engine
=
on
;
on
pouvoir
mettre
à
faux
:
le
tags
<
?
...
.
?
>
ne
être
pas
reconnaître
.
short_open_tag
=
off
;
Allow
ASP-style
<
%
%
>
tags
.
;
http
:
/
/
dns-remplacer
/
asp-tags
asp_tags
=
off
;
The
number
of
significant
digit
displayed
in
floating
point
˓→numbers
.
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
http
:
/
/
dns-remplacer
/
precision
precision
=
;
compatibilité
an
y2k_compliance
=
on
;
taille
du
buffers
output_buffering
=
;
pour
servir
ou
pas
du
page
compresser
dns-remplacer
_compression
=
off
;
mettre
à
on
pour
forcer
le
flush
en
phase
de
debuggage
implicit_flush
=
off
;
Safe
Mode
;
http
:
/
/
dns-remplacer
/
safe-mode
;
on
pouvoir
le
laisser
désactiver
car
;
avoir
être
déclarer
OBSOLETE
depuis
PHP
Safe_mode
=
off
;
pour
désactiver
certain
fonction
PHP
;
indépendant
du
safe_mode
;
http
:
/
/
dns-remplacer
/
disable-functions
disable_functions
=
;
meme
chose
avec
du
classe
disable_classes
=
;
Colors
for
Syntax
Highlighting
mode
.
;
à
utiliser
avec
le
fonction
highlight_file
(
)
=
show_source
(
)
dns-remplacer
=
#
DD0000
dns-remplacer
=
#
FF9900
dns-remplacer
=
#
dns-remplacé
=
#
FFFFFF
dns-remplacer
=
#
0000BB
dns-remplacer
=
#
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Miscellaneous
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
on
pouvoir
la|le
enlever
sur
un
serveur
de
production
;
mais
ne
être
pas
un
menace
de
sécurité
expose_php
=
on
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
(
suite
sur
le
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
Resource
Limits
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
temps
de
éxécution
max
de
un
script
;
attention
si
vous
avoir
du
code
un
peu
long
à
se
éxécuter
!
max_execution_time
=
;
traitement
du
donnée
reçu
;
laisser
le
valeur
par
défaut
max_input_time
=
;
taille
mémoire
maxi
donner
à
un
script
PHP
memory_limit
=
128M
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Error
handling
and
logging
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
pour
un
serveur
de
production
:
E_ALL
&
~
E_DEPRECATED
;
pour
un
serveur
de
développement
error_reporting
=
E_ALL
|
E_STRICT
;
affichage
du
erreur
sur
le
sortie
standard
;
cad
sur
le
navigateur
;
à
désactiver
sur
un
serveur
de
production
;
utile
pour
un
développeur
display_errors
=
on
;
affichage
du
erreur
au
démarrage
de
PHP
;
pour
débugger
du
erreur
sur
du
plugins
;
ou
du
module
complémentaire
de
PHP
display_startup_errors
=
off
;
logger
le
erreur
;
à
activer
log_errors
=
on
;
set
maximum
length
of
log_errors
.
in
error_log
information
about
˓→the
source
is
;
added
.
The
default
is
and
allows
to
not
apply
any
maximum
˓→length
at
all
.
;
http
:
/
/
dns-remplacer
/
log-errors-max-len
log_errors_max_len
=
;
ne
pas
répéter
le
erreur
identique
ignore_repeated_errors
=
on
;
...
sauf
si
elle
provenir
de
fichier
différent
ignore_repeated_source
=
off
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
rapporter
le
fuite
de
mémoire
;
à
activer
en
phase
de
dévelopement
report_memleaks
=
on
;
le
variable
$
php_errormsg
;
contenir
le
texte
du
dernier
message
;
de
erreur
;
à
désactiver
sur
un
serveur
de
production
track_errors
=
on
;
http
:
/
/
dns-remplacer
/
html-errors
html_errors
=
on
;
à
faire
pointer
sur
un
copie
local
de
le
documentation
;
de
PHP
;
à
désactiver
sur
un
serveur
de
production
docref_root
=
`
`
/
doc
/
php
/
'
'
;
extension
du
fichier
de
documentation
docref_ext
=
.html
;
chaine
à
afficher
avant
un
message
de
erreur
;
ici
pour
que
il
se
afficher
en
rouge
;
réserver
au
serveur
de
dévelopement
error_prepend_string
=
`
`
<
faire
color
=
#
ff0000
>
'
'
;
fermeture
du
tag
précédent
error_append_string
=
`
`
<
/
faire
>
'
'
;
pour
changer
le
fichier
où
être
logguées
;
le
erreur
.
laisser
inchangé
sauf
;
cas
particulier
;
error_log
=
syslog
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
dater
Handling
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
The
separator
used
in
PHP
generated
URLs
to
separate
argument
.
;
PHP
'
s
default
setting
is
`
`
&
'
'
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
;
Example
:
;
arg_
dns-remplacer
=
`
`
&
amp
;
'
'
;
List
of
separator
(
s
)
used
by
PHP
to
parse
input
URLs
into
˓→variable
.
;
PHP
'
s
default
setting
is
`
`
&
'
'
.
;
note
:
Every
character
in
this
directif
is
considered
avoir
˓→separator
!
(
suite
sur
le
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
http
:
/
/
dns-remplacer
/
dns-remplacer
;
Example
:
;
arg_
dns-remplacer
=
`
`
;
&
'
'
;
This
directif
determines
which
super
global
arrays
are
˓→registered
when
PHP
;
start
up
.
If
the
register_globals
directif
is
enabled
,
it
also
˓→determines
;
what
order
variable
are
populated
into
the
global
space
.
G
,
P
,
C
,
E
˓→
&
S
are
;
abbreviations
for
the
following
respectif
super
globals
:
GET
,
˓→POST
,
COOKIE
,
;
ENV
and
SERVER
.
There
is
avoir
performance
penalty
paid
for
the
˓→registration
of
;
these
arrays
and
because
ENV
is
not
avoir
commonly
used
avoir
the
˓→others
,
ENV
is
;
is
not
recommended
on
production
servers
.
You
can
still
get
˓→access
to
;
the
environment
variable
through
getenv
(
)
should
you
need
to
.
;
Default
value
:
`
`
EGPCS
'
'
;
Development
valoir
:
`
`
GPCS
'
'
;
production
valoir
:
`
`
GPCS
'
'
;
;
http
:
/
/
dns-remplacer
/
variables-order
variables_order
=
`
`
GPCS
'
'
;
laisser
le
valeur
par
défaut
request_order
=
`
`
GP
'
'
;
Ca
faire
longtemps
que
il
falloir
garder
ce
directive
à
off
register_globals
=
off
;
Determines
whether
the
deprecated
long
$
HTTP_
*
_VARS
type
˓→predefined
variable
;
are
registered
by
PHP
or
not
.
avoir
they
are
deprecated
,
we
˓→obviously
don't
;
recommend
you
user
them
.
They
are
on
by
default
for
compatibility
˓→reasons
but
;
they
are
not
recommended
on
production
servers
.
;
Default
value
:
on
;
Development
valoir
:
off
;
production
valoir
:
off
;
http
:
/
/
dns-remplacer
/
register-long-arrays
register_long_arrays
=
off
;
à
activer
seulement
si
vous
vouloir
utiliser
PHP
;
en
ligne
de
commande
et
lui
passer
du
argument
register_argc_argv
=
off
;
meilleur
performance
avec
:
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
auto_globals_jit
=
on
;
taille
maximal
du
donnée
accepter
en
POST
;
http
:
/
/
dns-remplacer
/
post-max-size
post_max_size
=
8M
;
à
éviter
désormais
magic_quotes_gpc
=
off
;
idem
magic_quotes_runtime
=
off
;
mimetype
par
défaut
:
text
/
html
default_mimetype
=
`
`
text
/
html
'
'
;
jeu
de
caractère
par
défaut
;
laisser
à
vide
ou
choisir
un
jeu
de
caractère
;
default_charset
=
`
`
iso-8859-1
'
'
default_charset
=
`
`
utf-8
'
'
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
file
Uploads
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
autoriser
le
`
`
uploads
'
'
de
fichier
file_uploads
=
on
;
spécifier
le
répertoire
temporaire
por
le
fichier
;
uploadés
:
;
upload_tmp_dir
=
/
tmp
/
upload-dir
;
taille
maxi
pour
le
fichies
uploadés
upload_max_filesize
=
4M
;
Nbre
de
fichier
maxi
pouvoir
être
uploadés
en
un
seul
requête
max_file_uploads
=
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Fopen
wrappers
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Whether
to
allow
the
treatment
of
URLs
(
like
http
:
/
/
or
ftp
:
/
/
)
˓→as
file
.
;
http
:
/
/
dns-remplacer
/
allow-url-fopen
allow_url_fopen
=
on
;
Whether
to
allow
include
/
require
to
open
URLs
(
like
http
:
/
/
or
˓→ftp
:
/
/
)
avoir
file
.
(
suite
sur
le
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
http
:
/
/
dns-remplacer
/
allow-url-include
allow_url_include
=
off
;
Define
the
anonymous
ftp
password
(
your
email
address
)
.
PHP's
˓→default
setting
;
for
this
is
empty
.
;
http
:
/
/
dns-remplacer
/
from
;
from
=
'
'
john
@
dns-remplacer
'
'
;
Define
the
User-Agent
string
.
PHP
'
s
default
setting
for
this
is
˓→empty
.
;
http
:
/
/
dns-remplacer
/
user-agent
;
user_agent
=
'
'
PHP
'
'
;
Timeout
pour
le
flux
baser
sur
du
socket
default_socket_timeout
=
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Dynamic
extension
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
sous
Windows
:
;
extension
=
dns-remplacer
;
...
et
sous
UNIX
:
;
;
extension
=
dns-remplacer
;
;
...
ou
avec
un
chemin
:
;
;
extension
=
/
path
/
to
/
extension
/
dns-remplacer
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
module
Settings
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
[
date
]
;
fuseau
horaire
utiliser
dns-remplacer
=
'
'
Europe
/
Paris
'
'
[
iconv
]
;
conversion
de
un
système
de
encodage
à
un
autre
;
dns-remplacer
_encoding
=
ISO-8859-1
;
dns-remplacer
_encoding
=
ISO-8859-1
;
dns-remplacer
_encoding
=
ISO-8859-1
[
Pdo_mysql
]
;
en
cas
de
utilisation
du
nouveau
moteur
mysqlnd
pdo_
dns-remplacer
_size
=
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
socket
par
défaut
pour
le
connexion
à
MySQL
;
le
valeur
par
défaut
fonctionner
le
plus
souvent
pdo_
dns-remplacer
_socket
=
/
var
/
mysql
/
dns-remplacer
[
mail
function
]
;
for
Win32
only
.
;
http
:
/
/
dns-remplacer
/
smtp
SMTP
=
localhost
;
http
:
/
/
dns-remplacer
/
smtp-port
smtp_port
=
;
emplacement
pour
logger
le
appel
à
le
fonction
mail
(
)
;
dns-remplacer
=
[
MySQL
]
;
autoriser
le
connexion
persistant
;
ne
apporter
aucun
fonctionnalité
supplémentaire
;
mais
pouvoir
améliorer
le
performance
dns-remplacer
_persistent
=
on
;
If
mysqlnd
is
used
:
Number
of
cacher
slots
for
the
internal
result
˓→set
cache
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_size
dns-remplacer
_size
=
;
Nbre
maxi
de
lien
persistant
dns-remplacer
_persistent
=
;
nombre
maxi
de
lien
permanent
:
;
vouloir
dire
sans
limitation
dns-remplacer
_links
=
;
port
par
défaut
de
MySQL
dns-remplacer
_port
=
;
laisser
généralement
le
valeur
par
défaut
dns-remplacer
_socket
=
;
hôte
par
défaut
pour
mysql_connect
(
)
dns-remplacer
_host
=
;
utilisateur
par
défaut
pour
mysql_connect
(
)
dns-remplacer
_user
=
;
Passwd
par
défaut
pour
mysql_connect
(
)
;
ce
ne
être
pas
un
bon
chose
de
garder
;
le
passwd
ici
!
!
obsolete
dns-remplacer
_password
=
(
suite
sur
le
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
Timeout
de
connexion
à
MySQL
dns-remplacer
_timeout
=
;
Mode
de
débuggage
MySQL
dns-remplacer
_mode
=
off
[
MySQLi
]
;
Nbre
maxi
de
lien
persistant
dns-remplacer
_persistent
=
;
autoriser
le
connexion
persistant
;
ne
apporter
aucun
fonctionnalité
supplémentaire
;
mais
pouvoir
améliorer
le
performance
dns-remplacer
_persistent
=
on
;
maximum
number
of
links
.
means
no
limit
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
dns-remplacer
_links
=
;
If
mysqlnd
is
used
:
Number
of
cacher
slots
for
the
internal
result
˓→set
cache
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_size
dns-remplacer
_size
=
;
Por
pour
mysqli
dns-remplacer
_port
=
;
socket
par
défaut
pour
MySQLi
dns-remplacer
_socket
=
/
tmp
/
dns-remplacer
;
autoriser
ou
interdire
le
reconnexion
dns-remplacé
=
off
[
mysqlnd
]
;
activation
du
statistique
de
mysqlnd
;
avoir
du
fin
de
réglage
du
serveur
de
BD
dns-remplacer
_statistics
=
on
;
même
chose
avec
le
opération
sur
le
mémoire
dns-remplacer
_memory_statistics
=
off
;
Size
of
avoir
pre-allocated
buffer
used
when
sending
command
to
˓→MySQL
in
bytes
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_cmd_buffer_size
;
dns-remplacer
_cmd_buffer_size
=
;
Size
of
avoir
pre-allocated
buffer
used
for
reading
dater
sentir
by
the
˓→server
in
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
bytes
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_read_buffer_size
;
dns-remplacer
_read_buffer_size
=
[
bcmath
]
;
Number
of
decimal
digit
for
all
bcmath
functions
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
dns-remplacer
=
[
session
]
;
...
/
...
;
le
session
devoir
elle
utiliser
le
cookies
?
dns-remplacé
_cookies
=
;
envoyer
le
cookies
à
travers
;
du
connexion
sécuriser
;
le
défaut
être
off
;
dns-remplacer
_secure
=
;
PHP
maintenir
un
cookie
avec
le
identifier
de
session
;
ce
être
un
précaution
viser
à
éviter
;
le
vol
de
session
;
ce
ne
être
pas
un
parade
absolu
dns-remplacer
_only_cookies
=
;
nom
de
le
session
dns-remplacer
=
PHPSESSID
;
démarrage
automatique
de
session
;
désactiver
par
défaut
dns-remplacer
_start
=
;
durée
de
vie
du
cookie
;
si
placer
à
,
le
temps
que
le
navigateur
;
être
redémarrer
dns-remplacer
_lifetime
=
;
domaine
de
validité
du
cookie
dns-remplacer
_domain
=
;
pour
interdire
à
javascript
de
accéder
à
ce
cookie
dns-remplacer
_httponly
=
on
;
;
HTTP_REFERER
devoir
contenir
ce
sous-chaine
;
pour
être
considérer
comme
valide
dns-remplacer
_check
=
(
suite
sur
le
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
;
durée
de
expiration
du
document
en
minute
dns-remplacer
_expire
=
;
choix
de
un
fonction
de
hachage
pour
le
session
;
comme
:
;
(
MD5
bit
)
;
(
SHA-1
bit
)
dns-remplacer
_function
=
[
assertion
]
;
assertion
actif
(
défaut
)
dns-remplacer
=
on
;
Emettre
un
warning
en
cas
de
assertion
non
vérifier
dns-remplacer
=
on
;
se
arrêter
en
cas
de
assertion
non
satisfaire
;
désactiver
par
défaut
;
dns-remplacer
=
off
;
fonction
utilisateur
à
appeller
en
cas
de
assertion
non
satisfaire
;
dns-remplacer
=
exemple
simple
bonjour
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
bonjour
depuis
PHP
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
bonjour
générer
dynamiquement
en
PHP
!
'
;
?
>
<
/
body
>
<
/
html
>
résultat
brut
html
<
!
doctype
html
>
<
html
>
<
head
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
bonjour
depuis
PHP
<
/
title
>
<
/
head
>
<
body
>
bonjour
générer
dynamiquement
en
PHP
!
<
/
body
>
<
/
html
>
exécution
bonjour
Infos
PHP
<
?
php
phpinfo
(
)
;
?
>
exécution
infos
php
user
agent
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
navigateur
<
/
title
>
<
body
>
le
information
sur
le
navigateur
être
:
<
?
php
echo
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
?
>
<
/
body
>
<
/
html
>
exemple
de
résultat
.
exemple
simple
cours|cour
PHP
accélérer
,
version
le
information
sur
le
navigateur
être
:
Mozilla
/
(
Macintosh
;
U
;
Intel
mac
os
X
10_6_4
;
fr-fr
)
AppleWebKit
/
˓→533.18.1
(
KHTML
,
like
gecko
)
version
/
safari
/
exécution
User-Agent
vous
pouvoir
consulter
le
documentation
de
PHP
sur
:
doc
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
)
imbrication
de
code
HTML
et
PHP
on
pouvoir
par
exemple
:
—
commencer
un
page
HTML
—
puis
écrire
un
peu
de
PHP
—
reprendre
en
HTML
—
etc
.
exemple
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
navigateur
<
/
title
>
<
body
>
le
information
sur
le
navigateur
être
:
<
?
php
$
agent
=
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
echo
$
agent
;
echo
(
`
`
\n
<
P
>
'
'
)
;
if
(
stristr
(
$
agent
,
'
'
MSIE
'
'
)
)
{
?
>
<
b
>
vous
sembler
utiliser
Internet
explorer
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
Firefox
/
i
'
'
,
$
agent
)
)
{
?
>
<
b
>
vous
sembler
utiliser
Firefox
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
chrome
/
i
'
'
,
$
agent
)
)
{
?
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
b
>
vous
sembler
utiliser
chrome
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
safari
/
'
'
,
$
agent
)
)
{
?
>
<
b
>
vous
sembler
utiliser
safari
!
<
/
b
>
<
?
php
}
else
echo
`
`
navigateur
inconnu
!
`
`
;
?
>
<
/
body
>
<
/
html
>
attention
:
cela
pouvoir
vite
devenir
illisible
exécution
user-agent
php
remède
:
pour
ne
pas
écrire
ce
genre
de
code
,
quelque
solution
courant
:
—
utiliser
du
fonction
PHP
—
utiliser
du
classe
et
objet
PHP
—
séparer
le
modèle
du
vue
—
séparer
le
modèle
,
le
vue
et
le
contrôleur
(
modèle
MVC
)
—
utiliser
du
système
de
template
comme
Twig
un
formulaire
HTML
et
son
réponse
en
PHP
on
coder
ici
:
—
un
petit
formulaire
HTML
—
et
son
réponse
en
PHP
formulaire
HTML
:
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
html
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
(
suite
sur
le
page
suivant
)
.
un
formulaire
HTML
et
son
réponse
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
votre
nom
:
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
>
votre
âge
:
<
input
type
=
'
'
text
'
'
name
=
'
'
age
'
'
>
<
p
>
<
input
type
=
submit
valoir
=
'
'
envoyer
'
'
>
<
/
form
>
<
/
body
>
<
/
html
>
son
réponse
:
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
test
formulaire
PHP
<
/
title
>
<
/
head
>
<
body
>
<
h@card@
>
bonjour
,
<
?
php
echo
$
_GET
[
'
nom
'
]
?
>
<
/
h1
>
<
h@card@
>
vous
sembler
avoir
<
?
php
echo
$
_GET
[
'
age
'
]
?
>
<
/
h2
>
<
?
php
$
n
=
$
_GET
[
'
nom
'
]
;
$
avoir
=
$
_GET
[
'
age
'
]
;
?
>
votre
nom
être
stocker
dans
le
variable
$
n
dont
le
type
être
<
?
php
echo
gettype
(
$
n
)
?
>
votre
âge
être
stocker
dans
le
variable
<
b
>
$
avoir
<
/
b
>
<
br
/
>
dont
le
type
être
<
i
>
<
?
php
echo
gettype
(
$
avoir
)
;
?
>
<
/
i
>
<
br
/
>
on
pouvoir
la
transformer
en
<
i
>
integer
<
/
i
>
en
faire
:
<
?
php
settype
(
$
avoir
,
'
'
integer
'
'
)
;
?
>
<
br
/
>
type
de
$
avoir
:
<
?
php
echo
gettype
(
$
avoir
)
;
?
>
<
/
body
>
<
/
html
>
exécution
:
formulaire
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
le
variable
en
PHP
déclaration
simple
:
<
?
php
$
variable
=
`
`
un
variable
en
PHP
'
'
;
/
/
un
autre
variable
:
$
variable
=
;
?
>
existence
de
variable
,
le
fonction
isset
(
)
:
<
?
php
$
avoir
=
`
`
un
variable
en
PHP
'
'
;
if
(
isset
(
$
avoir
)
)
echo
`
`
le
variable
avoir
exister
'
'
;
unset
(
$
avoir
)
;
echo
`
`
le
variable
avoir
avoir
être
supprimer
...
'
'
;
?
>
test
de
variable
,
le
fonction
empty
(
)
:
<
?
php
$
avoir
=
`
`
un
variable
en
PHP
'
'
;
if
(
!
empty
(
$
avoir
)
)
echo
`
`
le
variable
exister
et
elle
n\'est
˓→pas
vide
!
`
`
;
?
>
avertissement
:
le
fonction
empty
(
)
répondre
vrai
si
le
variable
n
’
exister
pas
et
ceci
sans
faire
aucun
warning
!
en
outre
,
avant
PHP
,
on
ne
pouvoir
pas
l
’
utiliser
sur
autre
chose
que
du
variable
(
impossible
d
’
appeller
un
fonction
dans
l
’
argument
qu
’
on
lui
passer
)
test
de
variable
en
PHP
avec
l
’
opérateur
coalescent
:
L
’
opérateur
Null
coalescent
?
?
permettre
de
simplifier
certain
test
d
’
existence
de
variable
et
d
’
alternatif
,
comme
par
exemple
:
<
?
php
/
/
$
avoir
non
initialiser
$
b
=
;
(
suite
sur
le
page
suivant
)
.
le
variable
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
echo
$
avoir
?
?
;
/
/
affiche
echo
PHP_EOL
;
echo
$
avoir
?
?
$
b
?
?
;
/
/
affiche
echo
PHP_EOL
;
ce
qui
permettre
de
limiter
le
recours
à
isset
dans
de
nombreux
situation
comme
:
<
?
php
/
/
récupérer
le
valeur
de
$
_GET
[
'
email
'
]
et
retourne
'
nobody
˓→
'
/
/
si
elle
ne
exister
pas
.
$
mail
=
$
_GET
[
'
email
'
]
?
?
'
nobody
@
null
'
;
/
/
Equivaloir
à
:
$
mail
=
isset
(
$
_GET
[
'
email
'
]
)
?
$
_GET
[
'
email
'
]
:
˓→'nobody
@
null
'
;
/
/
Coalescing
?
?
pouvoir
être
chainer
:
/
/
on
renvoyer
le
premier
valeur
définir
parmi
/
/
$
_GET
[
'
email
'
]
,
$
_POST
[
'
email
'
]
,
et
'
nobody
@
dns-remplacer
'
.
$
mail
=
$
_GET
[
'
email
'
]
?
?
$
_POST
[
'
email
'
]
?
?
'
nobody
@
null
'
;
echo
`
`
$
mail\n
'
'
;
porter
du
variable
:
—
par
défaut
,
tout
le
variable
être
local
—
leur
portée
se
réduire
à
le
fonction
ou
au
bloc
de
leur
déclaration
—
pour
déclarer
un
variable
global
,
on
pouvoir
utiliser
le
tableau
$
_GLOBALS
[
]
<
?
php
$
_GLOBALS
[
'
MaVar
'
]
=
'
'
bonjour
'
'
;
?
>
constante
:
<
?
php
define
(
`
`
user
'
'
,
'
'
toto
'
'
)
;
echo
user
;
/
/
noter
le
absence
de
$
ici
?
>
le
chaîne
en
PHP
le
base
:
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
guillemet
ou
cote
:
<
?
php
$
var
=
'
'
hello
PHP
'
'
;
$
machaine
=
'
'
le
contenu
de
\
$
var
être
$
var
<
br
>
'
'
;
echo
$
machaine
;
/
/
ou
avec
du
'
'
:
$
mystring
=
'
le
contenu
de
$
var
être
'
.
$
var
;
echo
$
mystring
;
?
>
dont
le
résultat
être
toujours
:
le
contenu
de
$
var
être
hello
PHP
le
concaténation
:
avoir
l
’
aide
de
.
le
longueur
d
’
un
chaine
:
<
?
php
int
lg
=
strlen
(
$
chaine
)
;
?
>
accéder
au
caractère
i
d
’
un
chaine
:
<
?
php
echo
$
chaine
[
i
]
;
?
>
le
chaine
être
traiter
comme
un
tableau
indéxé
par
un
*
entier
*
le
plupart
du
tableau
de
PHP
être
indéxés
par
du
chaine
...
mettre
en
majuscule
/
minuscule
:
—
avec
strtoupper
(
)
pour
obtenir
du
majuscule
—
avec
strtolower
(
)
pour
mettre
en
minuscule
—
avec
ucfirst
(
)
pour
mettre
en
majuscule
le
premier
lettre
d
’
un
chaine
—
avec
ucwords
(
)
pour
mettre
en
majuscule
le
premier
lettre
de
chaque
mot
dans
un
chaine
recherche
de
sous-chaine
ou
de
motif
dans
un
chaine
:
—
avec
strstr
(
)
—
avec
stristr
(
)
—
avec
ereg
(
)
ou
eregi
(
)
.
le
chaîne
en
PHP
cours|cour
PHP
accélérer
,
version
par
exemple
:
<
?
php
$
agent
=
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
echo
$
agent
;
echo
(
`
`
\n
<
P
>
'
'
)
;
if
(
stristr
(
$
agent
,
'
'
MSIE
'
'
)
)
echo
`
`
vous
sembler
utiliser
Internet
explorer
!
<
/
b
>
'
'
;
elseif
(
ereg
(
`
`
Firefox
'
'
,
$
agent
)
)
echo
`
`
vous
sembler
utiliser
Firefox
!
<
/
b
>
'
'
;
elseif
(
eregi
(
`
`
chrome
'
'
,
$
agent
)
)
echo
`
`
vous
sembler
utiliser
chrome
!
<
/
b
>
'
'
;
?
>
indication
:
le
variante
de
ce
fonction
comporter
un
i
indiquer
un
insensibilité
à
le
casse
c
’
être
à
dire
que
le
majuscule
et
minuscule
être
considérer
comme
identique
.
exemple
:
test
un
peu
plus
complet
du
UserAgent
:
<
?
php
function
getBrowser
(
$
userAgent
)
{
if
(
preg_match
(
`
`
/
MSIE
(
.
{
}
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
Firefox
(
.
*
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
chrome
(
.
{
}
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
safari
/
i
'
'
,
$
userAgent
,
$
num
)
)
{
preg_match
(
`
`
/
version
(
.
{
}
)
/
'
'
,
$
userAgent
,
$
num
)
;
return
`
`
safari
`
`
.
$
num
[
]
;
}
else
return
`
`
navigateur
inconnu
'
'
;
}
if
(
!
empty
(
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
)
)
{
echo
`
`
votre
navigateur
sembler
etre
:
\n
'
'
;
echo
getBrowser
(
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
)
;
}
/
/
test
avec
du
UserAgent
connu
:
$
FF
=
'
'
Mozilla
/
(
Macintosh
;
Intel
mac
os
X
;
rv
:
)
gecko
/
˓→20100101
Firefox
/
'
'
;
$
msie
=
'
'
Mozilla
/
(
compatible
;
MSIE
;
Windows
NT
;
trident
/
˓→5.0
;
InfoPath.2
;
SLCC1
;
.NET
CLR
;
.NET
CLR
.
˓→30729
;
.NET
CLR
)
3gpp-gba
UNTRUSTED
/
'
'
;
$
chromer
=
'
'
Mozilla
/
(
Windows
NT
;
Win64
;
x64
)
AppleWebKit
/
.
˓→36
(
KHTML
,
like
gecko
)
chrome
/
safari
/
'
'
;
$
safari
=
'
'
Mozilla
/
(
iPad
;
CPU
os
6_0
like
mac
os
X
)
AppleWebKit
/
˓→536.26
(
KHTML
,
like
gecko
)
version
/
mobile
/
10A5355d
safari
/
(
suite
sur
le
page
suivant
)
˓→8536.25
'
'
;
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
echo
`
`
<
br
/
>
test
Firefox
:
<
br
/
>
\n
'
'
;
echo
getBrowser
(
$
FF
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
MSIE
:
\n
'
'
;
echo
getBrowser
(
$
msie
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
chromer
:
\n
'
'
;
echo
getBrowser
(
$
chrome
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
safari
:
\n
'
'
;
echo
getBrowser
(
$
safari
)
;
?
>
résultat
:
<
br
/
>
test
Firefox
:
<
br
/
>
Firefox
/
<
br
/
>
<
br
/
>
test
MSIE
:
MSIE
<
br
/
>
<
br
/
>
test
chrome
:
chrome
/
@ord@
<
br
/
>
<
br
/
>
test
safari
:
safari
version
/
le
typage
en
PHP
le
fonction
gettype
(
)
et
settype
(
)
:
gettype
(
)
renvoyer
l
’
un
du
résultat
suivant
:
—
integer
—
doubler
—
string
—
array
—
object
—
class
—
«
unknown
type
»
settype
(
)
changer
le
type
d
’
un
élément
:
<
?
php
$
avoir
=
;
settype
(
$
avoir
,
'
'
integer
'
'
)
;
(
suite
sur
le
page
suivant
)
.
le
typage
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
echo
`
`
le
contenu
de
le
variable
avoir
être
`
`
.
$
avoir
;
?
>
dont
le
résultat
être
:
le
contenu
de
le
variable
avoir
être
fonction
de
test
:
—
is_int
(
)
—
is_long
(
)
—
is_double
(
)
—
is_array
(
)
—
is_object
(
)
—
is_string
(
)
attention
:
N
’
oublier
pas
comme
en
JavaScript
le
différence
entre
l
’
opérateur
=
=
et
=
=
=
le
premier
vérifier
l
’
égalité
du
contenu
en
ne
tenir
pas
compte
d
’
un
éventuel
diffé-
rence
de
typage
(
int
ou
string
par
exemple
)
tandis
que
le
second
vérifier
un
égalité
strict
.
en
d
’
autre
terme
:
=
=
«
»
être
vrai
tandis
que
=
=
=
«
»
être
faux
quelque
particularité
de
PHP
valeur
du
variable
:
<
?
php
$
toto
=
`
`
bonjour
<
br
/
>
\n
'
'
;
$
var
=
`
`
toto
'
'
;
echo
$
$
var
;
?
>
dont
le
résultat
être
toujours
:
résultat
brut
bonjour
<
br
/
>
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
le
fonction
eval
(
)
:
permettre
l
’
évaluation
d
’
expression
arithmetiques
directement
en
PHP
.
exister
aussi
en
JavaScript
.
délicat
à
manipuler
,
problématique
en
terme
de
sécurité
.
le
tableau
en
PHP
tableau
associatif
-
parcours
avec
boucle
foreach
:
<
?
php
$
jour
=
array
(
`
`
lire
'
'
=
>
'
'
lundi
'
'
,
'
'
mon
'
'
=
>
'
'
mardi
'
'
,
'
'
Me
'
'
=
>
'
'
mercredi
'
'
,
'
'
je
'
'
=
>
'
'
jeudi
'
'
,
'
'
Ve
'
'
=
>
'
'
vendredi
'
'
,
'
'
son
'
'
=
>
'
'
samedi
'
'
,
'
'
Di
'
'
=
>
'
'
dimanche
'
'
)
;
foreach
(
$
jour
avoir
$
key
=
>
$
val
)
echo
$
key
.
'
'
`
`
.
$
val
.
`
`
<
br
>
\n
'
'
;
?
>
ce
qui
donner
:
lu
lundi
mon
mardi
Me
mercredi
je
jeudi
Ve
vendredi
son
samedi
Di
dimanche
affichage
avec
print_r
(
)
:
<
?
php
print_r
(
$
jour
)
;
?
>
résultat
brut
html
:
Array
(
[
lire
]
=
>
lundi
[
mon
]
=
>
mardi
[
Me
]
=
>
mercredi
[
je
]
=
>
jeudi
[
Ve
]
=
>
vendredi
(
suite
sur
le
page
suivant
)
.
le
tableau
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
[
son
]
=
>
samedi
[
Di
]
=
>
dimanche
)
essayer
vous
même
tab
utilisation
de
le
fonction
array_walk
:
<
?
php
array_walk
(
$
jour
,
'
aff_tab
'
)
;
?
>
en
avoir
définir
au
préalable
:
<
?
php
function
aff_tab
(
$
val
,
$
key
)
{
echo
`
`
$
key-
$
val
<
br
/
>
\n
'
'
;
}
?
>
on
obtenir
le
même
résultat
qu
’
avec
le
boucle
foreach
tri
simple
d
’
un
tableau
:
<
?
php
sort
(
$
jour
)
;
array_walk
(
$
jour
,
'
aff_tab
'
)
;
?
>
on
obtenir
:
0-Dimanche
1-Jeudi
2-Lundi
3-Mardi
4-Mercredi
5-Samedi
6-Vendredi
C
’
être
à
dire
que
:
—
le
tableau
être
trier
selon
l
’
ordre
de
son
valeur
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
—
le
clef
être
effacer
et
réaffecter
avec
du
entier
.
si
on
vouloir
préserver
également
le
clef
du
tableau
associatif
,
il
falloir
utiliser
le
méthode
suivant
:
tri
selon
l
’
ordre
naturel
avec
natsort
<
?
php
$
jour
=
array
(
`
`
lire
'
'
=
>
'
'
lundi
'
'
,
'
'
mon
'
'
=
>
'
'
mardi
'
'
,
'
'
Me
'
'
=
>
'
'
mercredi
'
'
,
'
'
je
'
'
=
>
'
'
jeudi
'
'
,
'
'
Ve
'
'
=
>
'
'
vendredi
'
'
,
'
'
son
'
'
=
>
'
'
samedi
'
'
,
'
'
Di
'
'
=
>
'
'
dimanche
'
'
)
;
var_dump
(
$
jour
)
;
natsort
(
$
jour
)
;
var_dump
(
$
jour
)
;
?
>
résultat
brut
html
array
(
)
{
[
`
`
lire
'
'
]
=
>
string
(
)
`
`
lundi
'
'
[
`
`
mon
'
'
]
=
>
string
(
)
`
`
mardi
'
'
[
`
`
Me
'
'
]
=
>
string
(
)
`
`
mercredi
'
'
[
`
`
je
'
'
]
=
>
string
(
)
`
`
jeudi
'
'
[
`
`
Ve
'
'
]
=
>
string
(
)
`
`
vendredi
'
'
[
`
`
son
'
'
]
=
>
string
(
)
`
`
samedi
'
'
[
`
`
Di
'
'
]
=
>
string
(
)
`
`
dimanche
'
'
}
array
(
)
{
[
`
`
Di
'
'
]
=
>
string
(
)
`
`
dimanche
'
'
[
`
`
je
'
'
]
=
>
string
(
)
`
`
jeudi
'
'
[
`
`
lire
'
'
]
=
>
string
(
)
`
`
lundi
'
'
[
`
`
mon
'
'
]
=
>
string
(
)
`
`
mardi
'
'
[
`
`
Me
'
'
]
=
>
string
(
)
`
`
mercredi
'
'
[
`
`
son
'
'
]
=
>
string
(
)
`
`
samedi
'
'
(
suite
sur
le
page
suivant
)
.
le
tableau
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
[
`
`
Ve
'
'
]
=
>
string
(
)
`
`
vendredi
'
'
}
exécution
tritabnat
on
pouvoir
aussi
utiliser
le
fonction
natcasesort
(
)
si
on
ne
vouloir
pas
se
préoccuper
de
le
casse
du
chaine
présent
dans
le
tableau
,
soit
à
peu
près
l
’
ordre
du
dictionnaire
.
.
.
le
tableau
prédéfinir
de
PHP
le
tableau
concerner
le
protocole
HTTP
:
—
$
_GET
[
]
,
$
_POST
[
]
ou
$
_REQUEST
[
]
qui
englober
le
—
$
_SERVER
[
]
:
variable
décrire
le
client
ou
le
page
courant
—
$
_GLOBALS
[
]
variable
global
—
$
_COOKIE
[
]
pour
le
cookies
—
$
_SESSION
[
]
pour
le
session
exemple
récupération
de
$
_SERVER
[
]
grâce
à
le
fonction
getenv
(
)
:
<
?
php
function
infos
(
)
{
$
env
=
array
(
'
remote_addr
'
,
'
http_accept_language
'
,
'
http_
˓→host
'
,
'
http_user_agent
'
,
'
script_filename
'
,
'
server_addr
'
,
'
server_name
'
,
'
server_signature
'
,
'
server_software
'
,
'
request_method
'
,
'
query_string
'
,
'
request_uri
'
,
'
script_name
˓→
'
)
;
/
/
construction
de
un
tableau
associatif
/
/
avec
le
valeur
lire
dans
le
environnement
$
retour
=
array
(
)
;
foreach
(
$
env
avoir
$
clef
)
$
retour
[
$
clef
]
=
getenv
(
$
clef
)
;
return
$
retour
;
}
echo
(
`
`
voici
le
infos
disponible
:
<
BR
>
'
'
)
;
$
tab
=
infos
(
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
foreach
(
$
tab
avoir
$
clef
=
>
$
val
)
echo
$
clef
.
'
'
:
'
'
.
$
val
.
`
`
<
br
>
\n
'
'
;
?
>
résultat
voici
le
infos
disponible
:
remote_addr
:
:
:
http_accept_language
:
fr-fr
http_host
:
localhost
http_user_agent
:
Mozilla
/
(
Macintosh
;
U
;
Intel
mac
os
X
˓→10_6_4
;
fr-fr
)
AppleWebKit
/
(
KHTML
,
like
gecko
)
version
/
˓→Safari
/
script_filename
:
/
user
/
roza
/
site
/
php
/
exemple
/
dns-remplacer
server_addr
:
:
:
server_name
:
localhost
server_signature
:
server_software
:
apache
/
(
Unix
)
mod_ssl
/
OpenSSL
/
0.9.8l
DAV
/
PHP
/
request_method
:
GET
query_string
:
request_uri
:
/
~
roza
/
php
/
exemple
/
dns-remplacer
script_name
:
/
~
roza
/
php
/
exemple
/
dns-remplacer
Ùser-Agent
<
http
:
/
/
localhost
/
~
roza
/
php
/
exemple
/
infospy
.
˓→php
>
`
_
exécution
infospy
L
’
inclusion
de
fichier
externe
include
:
—
semblable
au
include
du
C
/
C++
—
réaliser
un
inclusion
physique
du
fichier
demander
include_once
:
—
identique
au
include
—
protéger
contre
d
’
éventuel
inclusion
multiple
.
L
’
inclusion
de
fichier
externe
cours|cour
PHP
accélérer
,
version
—
qui
pouvoir
mener
à
du
erreur
(
redéclaration
,
etc
.
)
<
?
php
include_once
(
`
`
dns-remplacer
'
'
)
;
?
>
require
et
require_once
:
—
fonctionner
comme
le
include
et
le
include_once
respectivement
—
mais
le
programme
s
’
arrêter
si
le
fichier
inclure
n
’
exister
pas
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
require_once
(
`
`
dns-remplacer
'
'
)
;
?
>
dirname
(
)
pour
savoir
dans
quel
répertoire
on
se
trouver
on
pouvoir
utiliser
le
fonction
PHP
dirname
(
)
<
?
php
include_once
(
dirname
(
__FILE__
)
.
'
/
config
/
dns-remplacer
'
)
;
?
>
indication
:
Lorsqu
’
on
inclure
ou
désigner
du
fichier
,
il
valoir
mieux
utiliser
du
chemin
relatif
pour
repérer
le
fichier
(
comme
ci
dessus
)
plutôt
que
de
donner
un
chemin
absoudre
par
rapport
à
le
racine
du
serveur
du
style
/
home
/
user
/
www
/
config
/
dns-remplacer
cela
être
beaucoup
plus
portable
d
’
un
serveur
à
l
’
autre
et
vous
éviter
bien
du
déboire
!
avertissement
:
L
’
utilisation
systématique
de
le
version
avec
once
(
include_once
ou
re-
quire_once
)
n
’
être
pas
recommander
car
elle
pouvoir
causer
du
ralentissement
à
l
’
exécution
du
programme
.
le
objet
en
PHP
Evolutions
et
grand
principe
:
—
le
objet
exister
en
PHP
à
partir
de
le
version
—
changement
important
en
PHP
:
convergence
vers
le
modèle
objet
de
java
—
introduction
comme
en
java
d
’
interface
et
de
classe
abstraire
—
emploi
du
modifieurs
private
et
public
comme
en
java
—
on
retrouver
aussi
__toString
(
)
,
__clone
(
)
et
un
mécanisme
de
traitement
du
exception
semblable
à
celui
de
java
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
—
le
constructeur
s
’
appeler
désormais
:
__construct
(
)
—
et
le
destructeur
__destruct
(
)
—
le
méthode
porter
le
mot
clef
function
mais
ne
signaler
pas
leur
type
de
retour
—
le
commentaire
de
documentation
se
faire
à
le
manière
de
java
indication
:
le
objet
s
’
instancient
avec
le
mot
clef
new
comme
en
java
ou
C++
mais
on
utiliser
-
>
pour
signifier
l
’
appel
d
’
un
méthode
.
le
.
être
déjà
prendre
pour
le
concaténation
du
chaîne
.
.
.
un
objet
simple
Etudiant
en
PHP
fabriquer
maintenant
un
objet
simple
en
PHP
.
Ecriver
un
objet
représenter
un
étudiant
avec
son
donnée
:
—
identifier
—
nom
—
date
de
naissance
et
du
méthode
pour
opérer
sur
ce
donnée
:
—
constructeur
—
getter
et
setter
—
equals
(
)
—
toString
(
)
pour
affichage
ce
qui
donner
le
code
suivre
:
<
?
php
/
*
*
classe
Etudiant
en
PHP
*
/
class
Etudiant
{
/
*
*
identification
unique
de
un
etudiant
*
/
protected
$
etudiant_id
;
/
*
*
nom
de
le
etudiant
*
/
protected
$
nom
;
/
*
*
date
de
naissance
de
le
etudiant
*
/
protected
$
naissance
;
public
function
__construct
(
$
id
,
$
nom
,
$
naissance
)
{
$
this-
>
etudiant_id
=
(
int
)
$
id
;
/
/
cast
vers
integer
$
this-
>
nom
=
(
string
)
$
nom
;
/
/
cast
vers
string
$
this-
>
naissance
=
(
int
)
$
naissance
;
/
/
cast
vers
date
(
timestamp
)
}
/
*
*
*
fonction
de
comparaison
simplifiee
entre
etudiants
*
=
=
comparer
id
,
nom
et
naissance
*
/
(
suite
sur
le
page
suivant
)
.
le
objet
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
public
function
equals
(
etudiant
$
etudiant
)
{
return
(
$
this-
>
getId
(
)
=
=
$
etudiant-
>
getId
(
)
)
;
}
public
function
getId
(
)
{
return
$
this-
>
etudiant_id
;
}
public
function
getNom
(
)
{
return
$
this-
>
nom
;
}
public
function
getNaissance
(
)
{
return
$
this-
>
naissance
;
}
public
function
__toString
(
)
{
setlocal
(
LC_TIME
,
`
`
fr_FR
'
'
)
;
$
ne
=
strftime
(
'
%
à
%
d
%
B
%
y
'
,
$
this-
>
naissance
)
;
return
'
etudiant
:
id
=
'
.
$
this-
>
getId
(
)
.
'
,
nom
=
'
.
$
this-
>
˓→getNom
(
)
.
'
'
$
ne
'
'
;
}
}
/
*
test
:
*
/
date_default_timezone_set
(
'
Europe
/
Paris
'
)
;
$
etu
=
new
Etudiant
(
,
'
'
talon
'
'
,
time
(
)
)
;
var_dump
(
$
etu
)
;
echo
`
`
<
br
/
>
'
'
;
echo
$
etu
;
?
>
Resultat
:
object
(
Etudiant
)
#
(
)
{
[
`
`
etudiant_id
'
'
:
protected
]
=
>
int
(
)
[
`
`
nom
'
'
:
protected
]
=
>
string
(
)
`
`
talon
'
'
[
`
`
naissance
'
'
:
protected
]
=
>
int
(
)
}
<
br
/
>
etudiant
:
id
=
,
nom
=
talon
mercredi
septembre
Execution
etudiant
php
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
indication
:
Lorsqu
’
on
utiliser
l
’
opérateur
de
comparaison
=
=
sur
du
objet
,
celui
-ci
être
comparer
en
utiliser
le
règle
suivant
:
deux
objet
être
égal
s
’
il
être
instance
de
le
même
classe
et
avoir
le
même
attribut
et
valeur
,
le
valeur
être
comparer
avec
l
’
opérateur
=
=
.
lors
de
l
’
utilisation
de
l
’
opérateur
d
’
identité
=
=
=
,
le
objet
être
identique
uniquement
s
’
il
faire
référence
à
le
même
instance
de
le
même
classe
.
avertissement
:
beaucoup
de
programmeur
débutant
se
contenter
d
’
utiliser
PHP
comme
un
langage
purement
procédural
sans
utiliser
son
côté
objet
.
ceci
la|le
bloquer
tôt
ou
tard
dans
l
’
apprentissage
du
langage
et
du
grand
frameworks
PHP
.
si
vous
être
trop
mal
à
l
’
aise
avec
le
objet
,
suivre
d
’
abord
un
cours|cour
d
’
introduction
à
le
programmation
objet
,
en
java
,
python
ou
C++
par
exemple
.
le
collection
en
PHP
en
PHP
standard
,
collection
=
Arrays
:
—
si
on
se
contenter
de
ce
qu
’
offrir
PHP
en
standard
,
le
collection
se
résumer
à
l
’
utilisation
du
tableau
associatif
en
PHP
—
le
framework
du
collection
en
java
être
beaucoup
plus
riche
DataStructures
ds
:
il
falloir
installer
un
librairie
supplémentaire
ds
(
DataStructures
)
pour
avoir
accès
à
un
Framework
similaire
en
PHP
.
voir
documentation
collecter
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
)
on
aller
pour
utiliser
le
commande
pecl
pour
installer
ds
comme
un
extension
:
pecl
install
ds
puis
charger
l
’
extension
en
ajouter
au
fichier
.ini
de
PHP
:
extension
=
dns-remplacer
ce
extension
nous
donner
accès
à
du
classe
similaire
à
celui
du
framework
du
collection
en
java
.
le
classe
proposer
être
par
exemple
:
—
Sequence
—
Vector
—
Deque
—
Vector
.
le
collection
en
PHP
cours|cour
PHP
accélérer
,
version
—
pair
—
set
—
Stack
—
queue
—
PriorityQueue
utilisation
de
Ds
:
le
classe
et
interface
de
ds
s
’
utiliser
dans
un
espace
de
nommage
Ds
:
<
?
php
$
vector
=
new
\Ds\Vector
(
)
;
$
vector-
>
push
(
`
`
un
'
'
)
;
$
vector-
>
push
(
`
`
deux
'
'
)
;
$
vector-
>
push
(
`
`
trois
'
'
,
`
`
quatre
'
'
)
;
/
/
...
[
,
]
=
unpacking
$
vector-
>
push
(
...
[
`
`
cinq
'
'
,
`
`
six
'
'
]
)
;
print_r
(
$
vector
)
;
?
>
exemple
d
’
utilisation
de
le
classe
set
utiliser
maintenant
concrètement
le
classe
set
.
question
HTML
dans
un
select
multiple
:
prendre
un
petit
formulaire
en
HTML
qui
proposer
un
choix
de
couleur
dans
un
select
:
<
p
>
quel
être
le
couleur
du
maillot
du
panthère
du
Fleury
˓→Loiret
Handball
?
<
select
name
=
'
'
coul
[
]
'
'
multiple
size
=
>
<
option
valoir
=
'
'
jaune
'
'
>
jaune
<
option
valoir
=
'
'
rose
'
'
>
Rose
<
option
valoir
=
'
'
bleu
'
'
>
bleu
<
option
valoir
=
'
'
noir
'
'
>
noir
<
option
valoir
=
'
'
blanc
'
'
>
Blanc
<
option
valoir
=
'
'
vert
'
'
>
vert
<
/
select
>
<
/
p
>
réponse
PHP
avec
collection
<
?
php
if
(
!
empty
(
$
_GET
[
'
coul
'
]
)
)
{
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
couleursReponse
=
new
\Ds\Set
(
$
_GET
[
'
coul
'
]
)
;
$
couleursCorrectes
=
new
\Ds\Set
(
[
'
rose
'
,
'
noir
'
,
'
blanc
˓→
'
]
)
;
/
/
calculer
le
différence
du
ensemble
et
voir
si
˓→elle
être
vide
if
(
(
$
couleursReponse-
>
diff
(
$
couleursCorrectes
)
)
-
>
isEmpty
(
)
)
echo
`
`
bravo
le
couleur
de
Fleury
Hand
Ball
être
˓→bien
Rose
noir
et
Blanc
!
`
`
;
else
echo
`
`
mauvais
réponse
:
le
couleur
de
Fleury
˓→Hand
Ball
être
:
rose
noir
et
Blanc
!
`
`
;
}
sans
collection
,
on
utiliser
le
tableau
.
.
.
sans
Ds
,
nous
avoir
être
obliger
de
nous
contenter
de
tableau
PHP
et
d
’
utiliser
par
exemple
le
méthode
array_diff
:
voir
:
array_diff
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
)
avec
du
Arrays
:
on
pouvoir
ici
s
’
en
sortir
avec
de
simple
tableau
PHP
en
vérifier
que
le
taille
du
tableau
du
réponse
donner
être
le
même
que
celui
du
tableau
du
bon
réponse
,
puis
que
le
contenu
de
ce
tableau
être
identique
.
<
?
php
if
(
!
empty
(
$
_GET
[
'
coul
'
]
)
)
{
$
couleursReponse
=
$
_GET
[
'
coul
'
]
;
$
couleursCorrectes
=
array
(
[
'
rose
'
,
'
noir
'
,
'
blanc
'
]
)
;
if
(
count
(
$
couleursReponse
)
=
=
count
(
$
couleursCorrectes
)
&
&
!
˓→array_diff
(
$
couleursReponse
,
$
couleursCorrectes
)
)
echo
`
`
bravo
le
couleur
de
Fleury
Hand
Ball
être
bien
Rose
˓→Noir
et
Blanc
!
`
`
;
else
echo
`
`
mauvais
réponse
:
le
couleur
de
Fleury
Hand
Ball
˓→sont
:
rose
noir
et
Blanc
!
`
`
;
}
connexion
au
base
de
donnée
depuis
PHP
un
table
simple
en
SQL
:
.
connexion
au
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
CREATE
tabler
`
carnet
`
(
ÌDìnt
(
)
NOT
NULL
AUTO_INCREMENT
,
`
nom
`
varchar
(
)
DEFAULT
NULL
,
`
PRENOM
`
varchar
(
)
DEFAULT
NULL
,
`
NAISSANCÈ
date
DEFAULT
NULL
,
`
VILLÈ
varchar
(
)
DEFAULT
NULL
,
PRIMARY
KEY
(
ÌD
`
)
)
ENGINE
=
InnoDB
AUTO_INCREMENT
=
DEFAULT
CHARSET
=
utf8
;
insert
INTO
`
carnet
`
valoir
(
,
'
Smith
'
,
'
John
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
Durand
'
,
'
jean
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
GUDULE
'
,
'
Jeanne
'
,
'
'
,
'
tour
'
)
,
(
,
'
ZAPATA
'
,
'
EMILIO
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
Jourdain
'
,
'
Nicolas
'
,
'
'
,
'
tour
'
)
,
(
,
'
DUPUY
'
,
'
marier
'
,
'
'
,
'
Blois
'
)
,
(
,
'
ANDREAS
'
,
'
LOU
'
,
'
'
,
'
ST
Petersbourg
'
)
,
(
,
'
Kafka
'
,
'
Franz
'
,
'
'
,
'
Prague
'
)
,
(
,
'
dalton
'
,
'
Joe
'
,
'
'
,
'
daller
'
)
;
on
insérer
ce
table
dans
MySQL
en
ligne
de
commande
ou
à
l
’
aide
de
PHPMyAdmin
.
puis
,
pour
consulter
ce
table
depuis
PHP
,
on
utiliser
le
connecteur
PDO
qui
offrir
un
interface
de
connexion
utilisable
pour
tout
le
SGBD
(
Systemes
de
gestion
de
base
de
Donnees
)
habituel
comme
MySQL
,
PostgreSQL
,
oracle
ou
Microsoft
SQL
Server
.
connexion
simple
en
PHP
avec
PDO
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
/
/
pour
oracle
:
$
dsn
=
'
'
oci
:
dbname
=
/
/
serveur
:
/
base
/
/
pour
sqlite
:
$
dsn
=
'
'
sqlite
:
/
tmp
/
dns-remplacer
'
'
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
le
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
au
carnet
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
naître
(
e
)
le
`
`
.
$
row
[
'
naissance
'
]
.
`
`
<
br
/
>
\n
'
'
;
}
?
>
<
/
body
>
<
/
html
>
avec
un
fichier
dns-remplacé
contenir
le
information
de
connexion
au
serveur
MySQL
:
<
?
php
define
(
'
user
'
,
'
'
scott
'
'
)
;
define
(
'
PASSWD
'
,
'
'
tiger
'
'
)
;
define
(
'
SERVER
'
,
'
'
localhost
'
'
)
;
define
(
'
base
'
,
'
'
dbscott
'
'
)
;
?
>
Resultat
brut
html
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h1
>
John
SMITHné
(
e
)
le
<
br
/
>
jean
DURANDné
(
e
)
le
<
br
/
>
Jeanne
GUDULEné
(
e
)
le
<
br
/
>
EMILIO
ZAPATAné
(
e
)
le
<
br
/
>
Nicolas
JOURDAINné
(
e
)
le
<
br
/
>
marier
DUPUYné
(
e
)
le
<
br
/
>
(
suite
sur
le
page
suivant
)
.
connexion
au
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
LOU
ANDREASné
(
e
)
le
<
br
/
>
Franz
Kafkané
(
e
)
le
<
br
/
>
Joe
Daltonné
(
e
)
le
<
br
/
>
<
/
body
>
<
/
html
>
Execution
carnet
php
fabrication
d
’
un
table
HTML
avec
le
résultat
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
le
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
au
carnet
'
'
;
else
{
?
>
<
table
>
<
tr
>
<
td
>
nom
<
/
td
>
<
td
>
prénom
<
/
td
>
<
/
tr
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
`
`
<
tr
>
<
td
>
'
'
.
$
row
[
'
nom
'
]
.
'
'
<
/
td
>
<
td
>
'
'
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
td
>
<
/
tr
>
\n
'
'
;
?
>
<
/
table
>
<
?
php
}
?
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
/
body
>
<
/
html
>
résultat
brut
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h@card@
>
<
table
>
<
tr
>
<
td
>
nom
<
/
td
>
<
td
>
prénom
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Smith
<
/
td
>
<
td
>
John
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Durand
<
/
td
>
<
td
>
jean
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
GUDULE
<
/
td
>
<
td
>
Jeanne
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
ZAPATA
<
/
td
>
<
td
>
EMILIO
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Jourdain
<
/
td
>
<
td
>
Nicolas
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
DUPUY
<
/
td
>
<
td
>
marier
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
ANDREAS
<
/
td
>
<
td
>
LOU
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Kafka
<
/
td
>
<
td
>
Franz
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
dalton
<
/
td
>
<
td
>
Joe
<
/
td
>
<
/
tr
>
<
/
table
>
<
/
body
>
<
/
html
>
Execution
carnet
tabler
on
pouvoir
faire
un
petit
refactoring
avec
un
fonction
qui
établir
le
connexion
à
le
base
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
function
connect_bd
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
(
suite
sur
le
page
suivant
)
.
connexion
au
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
le
connexion
:
%
s\n
'
'
,
$
e-
>
˓→getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
?
>
et
améliorer
l
’
affichage
du
résultat
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
au
carnet
'
'
;
else
{
?
>
<
table
class
=
'
'
centre
'
'
id
=
'
'
joli
'
'
>
<
tr
>
<
td
>
ID
<
/
td
>
<
td
>
prénom
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
naissance
<
/
˓→td
>
<
/
tr
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
`
`
<
tr
>
<
td
>
'
'
.
$
row
[
'
ID
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
nom
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
naissance
'
]
.
`
`
<
/
td
>
<
/
tr
>
<
br
/
>
\n
'
'
;
?
>
<
/
table
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
avec
le
fichier
CSS
:
/
*
bordurer
simple
autour
du
tableau
*
/
table
,
th
,
td
{
border
:
1px
solid
grey
;
}
table
{
border-collapse
:
collapse
;
}
/
*
centrage
tableau
*
/
dns-remplacer
{
margin
:
auto
;
}
/
*
centrage
du
texte
dans
le
cellule
du
tableau
*
/
dns-remplacé
td
{
text-align
:
center
;
}
table
#
joli
tr
:
first-child
{
background
:
LightPink
;
}
table
#
joli
tr
:
nth-child
(
2n
)
{
background
:
#
EFD3C9
;
}
table
#
joli
tr
:
nth-child
(
2n+3
)
{
background
:
#
BCBCD0
;
}
/
*
si
un
tableau
avoir
un
seul
ligne
on
la|le
afficher
en
rouge
*
/
table
tr
:
only-child
{
background
:
red
;
}
résultat
brut
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h@card@
>
<
table
class
=
'
'
centre
'
'
id
=
'
'
joli
'
'
>
<
tr
>
<
td
>
ID
<
/
td
>
<
td
>
prénom
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
naissance
<
/
˓→td
>
<
/
tr
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
John
<
/
td
>
<
td
>
Smith
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
(
suite
sur
le
page
suivant
)
.
connexion
au
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
td
>
jean
<
/
td
>
<
td
>
Durand
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Jeanne
<
/
td
>
<
td
>
GUDULE
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
EMILIO
<
/
td
>
<
td
>
ZAPATA
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Nicolas
<
/
td
>
<
td
>
Jourdain
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
marier
<
/
td
>
<
td
>
DUPUY
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
LOU
<
/
td
>
<
td
>
ANDREAS
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Franz
<
/
td
>
<
td
>
Kafka
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Joe
<
/
td
>
<
td
>
dalton
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
/
table
>
<
/
body
>
<
/
html
>
Execution
carnet
table
Version2
on
pouvoir
générer
du
page
différent
avec
du
liste
déroulant
ou
du
liste
de
lien
,
liste
à
puce
etc
.
création
d
’
un
liste
déroulant
:
<
!
doctype
html
>
<
html
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
au
carnet
'
'
;
else
{
?
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
select
name
=
'
'
ID
'
'
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
if
(
!
empty
(
$
row
[
'
nom
'
]
)
)
echo
`
`
<
option
valoir
=
'
'
'
.
$
row
[
'
ID
'
]
.
`
`
'
>
'
'
.
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
<
/
option
>
\n
'
'
;
?
>
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
rechercher
'
'
>
<
/
form
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
remarquer
l
’
usage
de
le
clef
primaire
de
le
table
comme
valoir
du
option
,
ce
qui
assurer
l
’
unicité
du
valeur
et
éviter
tout
amiguité
.
résultat
brut
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
(
suite
sur
le
page
suivant
)
.
connexion
au
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
h@card@
>
interrogation
de
le
table
carnet
avec
PDO
<
/
h@card@
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
select
name
=
'
'
ID
'
'
>
<
option
valoir
=
'
'
>
John
Smith
<
/
option
>
<
option
valoir
=
'
'
>
jean
Durand
<
/
option
>
<
option
valoir
=
'
'
>
Jeanne
GUDULE
<
/
option
>
<
option
valoir
=
'
'
>
EMILIO
ZAPATA
<
/
option
>
<
option
valoir
=
'
'
>
Nicolas
Jourdain
<
/
option
>
<
option
valoir
=
'
'
>
marier
DUPUY
<
/
option
>
<
option
valoir
=
'
'
>
LOU
ANDREAS
<
/
option
>
<
option
valoir
=
'
'
>
Franz
Kafka
<
/
option
>
<
option
valoir
=
'
'
>
Joe
dalton
<
/
option
>
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
rechercher
'
'
>
<
/
form
>
<
/
body
>
<
/
html
>
Execution
carnet
select
requête
préparer
en
PHP
recherche
simple
en
PHP
avec
PDO
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
recherche
de
un
personne
par
ID
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
?
php
$
wanted
=
$
_GET
[
'
ID
'
]
;
if
(
!
empty
(
$
wanted
)
)
{
echo
`
`
<
h@card@
>
recherche
de
$
wanted
<
/
h1
>
'
'
;
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
'
'
'
.
$
wanted
.
`
`
'
'
'
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
requete
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
$
row
[
'
nom
'
]
.
'
'
`
`
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
br
>
\n
'
'
;
}
}
?
>
<
/
body
>
<
/
html
>
appel
avec
le
paramètre
ID
passer
sur
l
’
URL
:
php
exemple
/
pdo
/
dns-remplacer
?
ID
=
Execution
rechercher
php
mais
lorsqu
’
il
y
avoir
de
nombreux
paramètre
,
on
se
retrouver
avec
de
nombreux
concaténation
de
chaine
entourer
de
“
cote
”
ce
qui
être
un
grand
source
d
’
erreur
et
de
lenteur
d
’
écriture
.
pour
remédier
à
cela
,
on
pouvoir
utiliser
du
requête
préparé
qui
permettre
de
bien
dissocier
le
requête
du
paramètre
qui
aller
lui
être
fournir
avant
son
exécution
.
ce
PreparedStatement
être
également
bien
préférable
en
terme
de
sécurité
et
à
utiliser
systématiquement
.
recherche
avec
PreparedStatement
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
recherche
de
un
personne
par
ID
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
?
php
$
wanted
=
$
_GET
[
'
ID
'
]
;
if
(
!
empty
(
$
wanted
)
)
{
echo
`
`
<
h@card@
>
recherche
de
$
wanted
<
/
h1
>
'
'
;
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
_GET
[
'
ID
'
]
)
;
$
stmt-
>
execute
(
)
;
if
(
!
$
stmt
)
echo
`
`
Pb
de
accès
au
carnet
'
'
;
else
{
(
suite
sur
le
page
suivant
)
.
requête
préparer
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
if
(
$
stmt-
>
rowCount
(
)
=
=
)
echo
`
`
inconnu
!
<
br
/
>
'
'
;
else
foreach
(
$
stmt
avoir
$
row
)
echo
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
naître
(
e
)
le
`
`
.
$
row
[
'
naissance
'
]
.
`
`
<
br
/
>
'
'
;
}
}
?
>
<
/
body
>
<
/
html
>
le
requête
préparé
limiter
fortement
le
possibilité
d
”
injection
SQL
comme
nous
le
ver-ront
plus
tard
.
complément
sur
PDO
-
sécurité
filtrage
d
’
entrée
on
pouvoir
vouloir
nourrir
un
requête
directement
avec
du
donnée
provenir
d
’
un
formulaire
:
<
?
php
$
sql
=
sprintf
(
'
select
id
FROM
carnet
WHERE
email
=
`
`
%
s
'
'
'
,
$
_GET
[
'
email
'
]
)
)
;
?
>
on
voir
bien
que
le
valeur
de
l
’
entrer
email
dans
le
tableau
_GET
n
’
être
absolument
pas
vérfifier
avant
son
utilisation
!
on
pouvoir
essayer
dans
ce
cas
d
’
utiliser
un
filtre
PHP
pour
contrôler
un
peu
le
chose
:
<
?
php
$
sql
=
sprintf
(
'
select
id
FROM
carnet
WHERE
email
=
`
`
%
s
'
'
'
,
filter_input
(
INPUT_GET
,
'
email
'
)
)
;
?
>
mais
ceci
constituer
un
manière
peu
sûr
de
procéder
malgré
l
’
utilisation
du
filtre
PHP
.
cela
laisser
en
effet
le
possiblilité
d
’
insertion
de
code
malveillant
non
contrôler
.
L
’
exemple
classique
être
le
requête
SQL
construire
dans
le
chaine
suivant
:
<
?
php
$
sql
=
`
`
select
nom
FROM
user
WHERE
login
=
'
'
'
.
$
_REQUEST
[
'
login
'
]
.
'
'
'
AND
PASSWD
=
'
'
'
.
$
_REQUEST
[
'
pass
'
]
.
`
`
'
'
'
;
?
>
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
qui
donner
lors
de
son
exécution
avec
$
_REQUEST
[
“
login
”
]
=
»
toto
”
–
»
:
select
nom
FROM
user
WHERE
login
=
'
toto
'
--
'
AND
PASSWD
=
'
'
'
.
$
_
˓→REQUEST
[
'
pass
'
]
.
'
'
'
`
`
;
avertissement
:
le
-
-
constituer
un
début
de
commentaire
SQL
,
ceci
constituer
un
in-
jection
SQL
qui
être
l
’
un
du
principal
faille
de
sécurité
exploiter
par
le
Hackers
.
pour
s
’
en
prémunir
,
il
falloir
utiliser
à
le
fois
le
filtrage
du
entrée
et
le
requête
préparé
.
<
?
php
$
sql
=
'
select
id
FROM
carnet
WHERE
email
=
:
email
'
;
$
statement
=
$
pdo-
>
prepare
(
$
sql
)
;
$
email
=
filter_input
(
INPUT_GET
,
'
email
'
)
;
$
statement-
>
bindValue
(
'
:
email
'
,
$
email
)
;
?
>
il
falloir
parfois
préciser
dans
un
troisième
argument
le
type
du
paramètre
attendre
:
<
?
php
$
sql
=
'
select
email
FROM
carnet
WHERE
id
=
:
id
'
;
$
statement
=
$
pdo-
>
prepare
(
$
sql
)
;
$
userId
=
filter_input
(
INPUT_GET
,
'
id
'
)
;
$
statement-
>
bindValue
(
'
:
id
'
,
$
userId
,
PDO
:
:
PARAM_INT
)
;
?
>
filtrage
en
PHP
le
vérification
dans
le
formulaire
HTML5
et
en
JavaScript
être
valable
uniquement
côté
client
.
pour
du
raison
de
sécurité
,
il
falloir
réeffectuer
complètement
tout
le
vérification
côté
serveur
.
PHP
mettre
pour
cela
à
le
disposition
du
programmeur
tout
un
ensemble
de
filtre
.
le
premier
du
vérification
consister
à
bien
prendre
en
compte
le
caractère
spécial
.
gestion
du
caractère
spécial
:
le
«
magic
quotes
»
:
avant
PHP
,
un
directive
concerner
ce
magic
quotes
exister
.
si
dans
le
fichier
de
configuration
de
PHP
,
le
directif
magic_quotes_gpc
etait
activer
,
PHP
modifier
automatiquement
certain
entrée
de
formulaire
en
procéder
à
du
protection
de
certain
caractère
spécial
par
du
insertion
de
«
backslashes
»
.
par
exemple
—
le
caractère
accentuer
—
le
apostrophe
—
le
backslashes
.
filtrage
en
PHP
cours|cour
PHP
accélérer
,
version
un
peu
à
le
manière
de
le
fonction
addslashes
(
)
.
ce
protection
être
destiner
à
préparer
le
donnée
avant
du
requête
SQL
pour
empêcher
un
éventuel
injection
SQL
.
ce
comportement
automatique
être
toutefois
parfois
gênant
si
on
vouloir
simplement
réafficher
le
chaine
saisir
et
non
pas
la|le
utiliser
dans
du
requête
SQL
.
en
outre
,
on
ne
vouloir
pas
toujours
protéger
le
chaine
de
le
même
façon
selon
l
’
usage
qu
’
on
vouloir
en
faire
par
le
suite
.
on
pouvoir
vouloir
dans
certain
cas
,
protéger
du
chaine
par
exemple
:
—
htmlspecialchar
(
)
pour
éviter
du
injection
de
code
HTML
—
PDO
:
:
quote
(
)
pour
se
protéger
d
’
injecter
SQL
<
?
php
$
pdo
=
new
PDO
(
'
sqlite
:
.
/
tmp
/
dns-remplacer
'
)
;
$
string
=
'
Orléans
'
;
print
`
`
chaîne
sans
quotes
:
$
string\n
'
'
;
print
`
`
chaîne
avec
quotes
:
`
`
.
$
pdo-
>
quote
(
$
string
)
.
`
`
\n
'
'
;
cela
ne
vous
dispenser
pas
d
’
utiliser
le
PreparedStatement
voir
précédemment
.
le
filtre
PHP
:
le
plus
direct
à
utiliser
sur
le
formulaire
être
baser
sur
le
fonction
filter_input
(
)
avec
en
paramètre
INPUT_GET
ou
INPUT_POST
voici
quelque
exemple
typique
:
<
?
php
$
entier
=
filter_input
(
INPUT_POST
,
'
var1
'
,
FILTER_SANITIZE_
˓→NUMBER_INT
)
;
$
url
=
filter_input
(
INPUT_POST
,
'
var2
'
,
FILTER_VALIDATE_URL
)
;
if
(
!
filter_input
(
INPUT_GET
,
`
`
email
'
'
,
FILTER_VALIDATE_EMAIL
)
)
echo
(
`
`
Email
non
valide
'
'
)
;
else
echo
(
`
`
Email
valide
'
'
)
;
?
>
on
pouvoir
aussi
filtrer
du
carctère
spécial
:
<
?
php
$
search_html
=
filter_input
(
INPUT_GET
,
'
search
'
,
FILTER_SANITIZE_
˓→SPECIAL_CHARS
)
;
$
search_url
=
filter_input
(
INPUT_GET
,
'
search
'
,
FILTER_SANITIZE_
˓→ENCODED
)
;
echo
`
`
vous
avoir
rechercher
$
search_html
.
\n
'
'
;
echo
`
`
<
avoir
href
=
'
?
search
=
$
search_url
'
>
nouveau
recherche
.
<
/
avoir
>
'
'
;
?
>
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
gestion
du
transaction
avec
PDO
problème
un
série
de
requête
SQL
être
logiquement
lier
entre
elle
et
on
vouloir
qu
’
elle
être
tout
exécuter
ou
aucun
.
en
effet
dans
certain
cas
,
le
prise
en
compte
d
’
un
partie
du
requête
seulement
pouvoir
conduire
à
un
incohérence
dans
le
système
d
’
information
.
le
base
de
donnée
pouvoir
ainsi
être
corrompre
et
très
difficile
à
rectifier
par
le
suite
.
par
exemple
,
si
on
avoir
requête
qui
se
suivre
et
qui
être
lier
:
<
?
php
require
'
dns-remplacer
'
;
$
connexion
=
connect_bd
(
)
;
$
stmt1
=
$
pdo-
>
prepare
(
'
UPDATE
compter
set
solder
=
solde
-
:
montant
WHERE
nom
=
:
nom
'
)
;
$
stmt2
=
$
pdo-
>
prepare
(
'
UPDATE
compter
set
solder
=
solder
+
:
monter
WHERE
nom
=
:
nom
'
)
;
/
/
retraire
du
Compte1
$
cpte1
=
'
Compte1
'
;
$
monter
=
;
$
stmt1-
>
bindParam
(
'
:
nom
'
,
$
cpte1
)
;
$
stmt1-
>
bindParam
(
'
:
solde
'
,
$
monter
,
PDO
:
:
PARAM_INT
)
;
$
stmt1-
>
execute
(
)
;
/
/
Credire
du
Compte2
$
cpte2
=
'
Compte2
'
;
$
depot
=
;
$
stmt2-
>
bindParam
(
'
:
nom
'
,
$
cpte2
)
;
$
stmt-
>
bindParam
(
'
:
montant
'
,
$
depot
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
?
>
ceci
pouvoir
conduire
à
un
problème
en
cas
d
’
interruption
de
ce
séquence
.
en
particulier
le
Compte1
pouvoir
avoir
être
débiter
sans
que
le
Compte2
être
créditer
.
on
pouvoir
résoudre
ce
fragilité
en
utiliser
un
transaction
:
<
?
php
require
'
dns-remplacer
'
;
$
connexion
=
connect_bd
(
)
;
(
suite
sur
le
page
suivant
)
.
gestion
du
transaction
avec
PDO
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
stmt1
=
$
connexion-
>
prepare
(
'
UPDATE
compter
set
solder
=
solde
-
:
solde
WHERE
nom
=
:
nom
'
)
;
$
stmt2
=
$
connexion-
>
prepare
(
'
UPDATE
compter
set
solder
=
solder
+
:
monter
WHERE
nom
=
:
nom
'
)
;
/
/
on
commencer
le
transaction
$
connexion
-
>
beginTransaction
(
)
/
/
retraire
du
Compte1
$
cpte1
=
'
Compte1
'
;
$
monter
=
;
$
stmt1-
>
bindParam
(
'
:
nom
'
,
$
cpte1
)
;
$
stmt1-
>
bindParam
(
'
:
solde
'
,
$
monter
,
PDO
:
:
PARAM_INT
)
;
$
stmt1-
>
execute
(
)
;
/
/
Credire
du
Compte2
$
cpte2
=
'
Compte2
'
;
$
depot
=
;
$
stmt2-
>
bindParam
(
'
:
nom
'
,
$
cpte2
)
;
$
stmt-
>
bindParam
(
'
:
montant
'
,
$
depot
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
/
/
on
terminer
le
transaction
$
connexion
-
>
commettre
(
)
;
?
>
si
le
séquence
échouer
,
PDO
commander
un
RollBack
automatique
,
c
’
être
à
dire
un
annulation
de
tout
le
transaction
.
connexion
persistant
avec
PDO
pour
créer
un
connexion
persistant
avec
PDO
,
il
suffire
d
’
utiliser
l
’
attribut
ATTR
persister
à
l
’
instanciation
de
l
’
objet
PDO
.
lors
du
appel
ultérieur
,
si
le
paramètre
de
création
être
identique
,
l
’
objet
déjà
créer
être
simplement
réutiliser
.
<
?
php
function
connect_db
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
,
array
(
PDO
:
:
ATTR_PERSISTENT
=
>
true
)
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
le
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
?
>
validation
et
contrôle
d
’
entrée
avec
GUMP
on
pouvoir
également
utiliser
du
librairie
aider
à
gérer
le
validation
comme
:
GUMP
(
https
:
/
/
dns-remplacer
/
Wixel
/
GUMP
)
pour
installer
:
créer
un
fichier
dns-remplacer
dans
notre
répertoire
de
travail
:
{
'
'
require
'
'
:
{
'
'
wixel
/
gump
'
'
:
`
`
dev-master
'
'
}
}
puis
utiliser
l
’
outil
PHP
composer
pour
installer
le
composant
demander
:
composer
update
nous
pouvoir
utiliser
Gump
pour
vérifier
du
entrée
:
<
?
php
require
`
`
vendor
/
wixel
/
gump
/
dns-remplacer
'
'
;
$
is_valid
=
GUMP
:
:
is_valid
(
$
_POST
,
array
(
'
username
'
=
>
'
required
|
alpha_numeric
'
,
'
password
'
=
>
'
required
|
max_len
,
|
min_len
,
'
)
)
;
if
(
$
is_valid
)
{
echo
`
`
valid
username
and
password
`
`
;
}
else
{
print_r
(
$
is_valid
)
;
(
suite
sur
le
page
suivant
)
.
validation
et
contrôle
d
’
entrée
avec
GUMP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
}
?
>
ou
de
manière
plus
détailler
:
<
?
php
require
`
`
vendor
/
wixel
/
gump
/
dns-remplacer
'
'
;
if
(
$
_SERVER
[
`
`
REQUEST_METHOD
'
'
]
=
=
`
`
POST
'
'
)
{
$
validator
=
new
GUMP
(
)
;
$
name
=
$
_POST
[
'
name
'
]
;
$
password
=
$
_POST
[
'
password
'
]
;
$
_POST
=
array
(
'
name
'
=
>
$
name
,
'
password
'
=
>
$
password
)
;
/
/
néttoie
le
donnée
et
convertir
le
chaine
en
utf-8
si
besoin
$
_POST
=
$
validator-
>
sanitize
(
$
_POST
)
;
/
/
définir
le
règle
et
le
filtre
:
$
rules
=
array
(
'
name
'
=
>
'
required
|
alpha_numeric
|
max_len
,
|
min_len
,
'
,
'
password
'
=
>
'
required
|
max_len
,
|
min_len
,
'
)
;
$
filters
=
array
(
'
name
'
=
>
'
trim
|
sanitize_string
'
,
'
password
'
=
>
'
trim
|
base64_encode
'
)
;
/
/
on
appliquer
le
filtre
$
_POST
=
$
validator-
>
filter
(
$
_POST
,
$
filters
)
;
/
/
on
valider
$
is_valid
=
$
validator-
>
validate
(
$
_POST
,
$
rules
)
;
/
/
on
vérifier
le
résultat
if
(
$
is_valid
=
=
=
true
)
{
echo
$
name
;
echo
$
password
;
exit
;
}
else
{
echo
`
`
erreur
détecter
dans
le
entrée
:
\n
'
'
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
/
/
on
afficher
le
erreur
en
html
echo
$
validator-
>
get_readable_errors
(
true
)
;
}
}
Http
et
le
conservation
d
’
information
sur
le
client
problème
le
protocole
HTTP
être
un
protocole
sans
mémoire
.
un
requête
d
’
un
client
ou
le
information
qui
y
être
rattacher
ne
être
pas
mémoriser
par
défaut
.
plusieurs
technique
avoir
être
développer
pour
remédier
à
ce
manque
:
—
envoyer
de
l
’
information
sur
l
’
URL
—
utiliser
un
champ
cacher
HTML
—
utiliser
du
Cookies
—
utiliser
du
session
envoi
d
’
information
sur
l
’
URL
:
considérer
un
premier
page
,
dns-remplacer
:
<
!
doctype
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
<
/
title
>
<
/
head
>
<
body
>
<
?
php
if
(
!
isset
(
$
_GET
[
'
login
'
]
)
)
{
?
>
<
form
method
=
'
GET
'
action
=
<
?
php
echo
$
_SERVER
[
'
PHP_SELF
'
]
?
>
>
<
p
>
Login
:
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
>
<
/
p
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
valider
'
'
>
<
/
form
>
<
?
php
}
else
{
header
(
'
location
:
dns-remplacer
?
login
=
'
.
$
_GET
[
'
login
'
]
)
;
}
?
>
(
suite
sur
le
page
suivant
)
.
Http
et
le
conservation
d
’
information
sur
le
client
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
/
body
>
<
/
html
>
qui
se
poursuivre
par
un
page2
:
<
!
doctype
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
<
/
title
>
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_GET
[
'
login
'
]
)
)
{
echo
$
_GET
[
'
login
'
]
;
}
else
{
header
(
'
location
:
dns-remplacer
'
)
;
}
?
>
<
/
body
>
<
/
html
>
exécution
:
passage
d
’
info
sur
l
’
URL
utiliser
du
cookies
:
L
’
information
être
stocker
dans
un
petit
fichier
texte
sur
le
navigateur
du
client
.
on
pouvoir
par
exemple
s
’
en
servir
pour
stocker
un
identifier
de
session
,
un
login
,
un
compteur
de
visite
ou
encore
mesurer
un
temps
de
connexion
.
<
?
php
if
(
isset
(
$
_COOKIE
[
'
compteur
'
]
)
)
{
$
message
=
`
`
vous
etes
deja
venir
`
`
.
$
_COOKIE
[
'
compteur
'
]
.
'
'
fois
˓→
<
br
/
>
\n
'
'
;
$
valeur
=
$
_COOKIE
[
'
compteur
'
]
+
;
}
else
{
$
message
=
`
`
je
vous
mettre
un
petit
cookie
<
br
/
>
\n
'
'
;
$
valeur
=
;
}
setCookie
(
`
`
compteur
'
'
,
$
valeur
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
echo
$
message
;
?
>
exécution
:
Cookies
en
PHP
mais
si
on
avoir
du
information
en
plus
grand
nombre
à
stocker
ou
qui
revètent
un
caractère
plus
sensible
,
on
préférer
le
stocker
essentiellement
côté
serveur
et
utiliser
le
mécanisme
plus
complet
du
session
.
celui
-ci
consister
à
utiliser
le
tableau
associatif
_SESSION
[
]
qui
permettre
de
stocker
tout
sorte
d
’
information
associer
à
ce
client
(
donner
de
type
nombre
ou
chaine
,
tableau
ou
objet
PHP
)
.
considérer
un
premier
page
mettre
en
place
un
session
:
<
?
php
/
/
dns-remplacer
session_start
(
)
;
if
(
!
isset
(
$
_SESSION
[
'
cpt
'
]
)
)
$
_SESSION
[
'
cpt
'
]
=
;
else
$
_SESSION
[
'
cpt
'
]
++
;
echo
`
`
vous
avoir
voir
ce
page
`
`
.
$
_SESSION
[
'
cpt
'
]
.
'
'
fois
<
br
/
>
\n
'
'
;
echo
`
`
le
SID
courant
être
`
`
.
session_id
(
)
;
echo
`
`
<
br
/
>
<
avoir
href
=
\
'
'
dns-remplacer
\
'
'
>
aller
à
le
page
suivant
˓→
dns-remplacer
<
/
avoir
>
'
'
;
?
>
puis
on
aller
relire
le
information
stocker
en
variable
de
session
dans
un
autre
page
:
<
?
php
/
/
dns-remplacer
session_start
(
)
;
if
(
!
isset
(
$
_SESSION
[
'
cpt
'
]
)
)
$
_SESSION
[
'
cpt
'
]
=
;
else
$
_SESSION
[
'
cpt
'
]
++
;
echo
`
`
bonjour
{
$
_SESSION
[
'
login
'
]
}
!
<
br
>
\n
'
'
;
echo
`
`
vous
avoir
voir
ce
page
`
`
.
$
_SESSION
[
'
cpt
'
]
.
`
`
fois
<
br
/
>
\n
'
'
;
echo
`
`
votre
SID
être
toujours
`
`
.
session_id
(
)
;
echo
`
`
<
br
/
>
<
avoir
href
=
\
'
'
dns-remplacer
\
'
'
>
retour
avoir
dns-remplacer
<
/
avoir
>
'
'
;
?
>
exécution
:
utilisation
variable
de
session
PHP
.
Http
et
le
conservation
d
’
information
sur
le
client
cours|cour
PHP
accélérer
,
version
Champs
cacher
un
quatrième
mécanisme
être
employer
pour
conserver
de
l
’
information
dans
du
page
Web
elle
même
comme
l
’
utilisation
de
champ
cacher
:
input
de
type
hidden
.
ce
champ
pouvoir
par
exemple
servir
à
stocker
dans
du
formulaire
HTML
un
champ
spécial
dire
csrf
token
qui
contenir
un
identifier
unique
temporaire
pour
se
prémunir
du
attaque
de
type
CSRF
:
cross
site
Request
Forgery
dont
un
exemple
être
l
’
envoi
d
’
un
mail
contenir
un
image
avoir
quelqu
’
un
et
ce
image
être
en
faire
un
lien
vers
un
page
d
’
administration
sur
lequel
le
destinataire
du
mail
avoir
du
droit
particulier
comme
editer
ou
supprimer
un
ressource
.
ce
page
pouvoir
déclencher
un
suppression
ou
un
modification
de
contenu
non
souhaiter
.
le
principal
Frameworks
Web
comme
Symfony
,
Laravel
en
PHP
ou
Django
,
flask
en
python
prendre
en
charge
le
génération
automatique
de
ce
token
et
son
mise
en
variable
de
session
mais
il
falloir
tout
de
même
l
’
appeler
dans
le
formulaire
ou
lors
de
l
’
utilisation
d
’
ajax
.
manipuler
XML
avec
PHP
le
format
XML
être
utiliser
de
façon
très
varier
.
nous
le
trouver
dans
du
service
Web
,
du
fichier
de
configuration
,
du
format
comme
SVG
,
MathML
,
docx
,
odt
,
etc
.
son
manipulation
dans
un
langage
comme
PHP
être
donc
particulièrement
important
.
on
pouvoir
manipuler
XML
de
différent
manière
—
à
le
main
—
avec
XMLWriter
/
XMLReader
—
avec
dom
—
avec
SimpleXML
ou
du
combinaison
de
ce
méthode
.
—
dom
ou
document
Object
Model
être
un
méthode
qui
recréer
tout
l
’
arborescence
d
’
un
document
XML
sous
forme
d
’
objet
PHP
.
son
utilisation
être
simple
mais
elle
être
cou-
teuse
en
ressource
,
en
temps
d
’
exécution
et
un
peu
verbeux
.
—
XMLWriter
et
XMLReader
traiter
le
fichier
XML
avoir
plus
bas
niveau
mais
leur
uti-
lisation
exclusif
rendre
parfois
le
code
délicat
à
implémenter
surtout
pour
le
lecture
de
fichier
complexe
.
—
SimpleXML
représenter
un
sorte
de
compromis
simplicité
/
performance
.
—
traiter
du
fichier
xml
«
à
le
main
»
être
généralement
à
éviter
sauf
pour
créer
du
fichier
très
simple
.
traitement
de
fichier
XML
à
le
main
:
observer
d
’
abord
comment
créer
un
fichier
XML
contenir
un
liste
de
programme
TV
:
le
lecture
de
fichier
XML
sans
api
être
peu
recommander
.
<
?
php
header
(
'
Content-Type
:
text
/
xml
'
)
;
print
'
<
?
xml
version
=
'
'
'
'
?
>
'
.
`
`
\n
'
'
;
print
`
`
<
programme
>
\n
'
'
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
programme
=
array
(
array
(
'
nom
'
=
>
'
Simpsons
'
,
'
chaine
'
=
>
'
TF18
'
,
'
debut
'
=
>
'
:
'
,
'
duree
'
=
>
'
'
)
,
array
(
'
nom
'
=
>
'
Blake
et
Mortimer
'
,
'
chaine
'
=
>
'
M54
'
,
'
debut
'
=
>
'
:
'
,
'
duree
'
=
>
'
'
)
)
;
foreach
(
$
programme
avoir
$
show
)
{
print
`
`
\t
<
show
>
\n
'
'
;
foreach
(
$
show
avoir
$
tag
=
>
$
dater
)
{
print
`
`
\t
<
$
tag
>
'
'
.
htmlspecialchar
(
$
dater
)
.
`
`
\t
<
/
$
tag
>
\n
'
'
;
}
print
`
`
<
/
show
>
\n
'
'
;
}
print
`
`
<
/
programme
>
\n
'
'
;
?
>
exécution
:
Ecriture
XML
à
le
main
Resultat
brut
html
:
<
?
xml
version
=
'
'
'
'
?
>
<
programme
>
<
show
>
<
nom
>
Simpsons
<
/
nom
>
<
chaine
>
TF18
<
/
chaine
>
<
debut
>
:
<
/
debut
>
<
duree
>
<
/
duree
>
<
/
show
>
<
show
>
<
nom
>
Blake
et
Mortimer
<
/
nom
>
<
chaine
>
M54
<
/
chaine
>
<
debut
>
:
<
/
debut
>
<
duree
>
<
/
duree
>
<
/
show
>
<
/
programme
>
Ecriture
avec
XMLWriter
:
un
exemple
simple
pour
démarrer
:
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
<
?
php
$
xml
=
new
XMLWriter
(
)
;
$
xml-
>
openURI
(
'
dns-remplacer
'
)
;
$
xml-
>
startElement
(
'
toto
'
)
;
$
xml-
>
writeElement
(
'
url
'
,
'
http
:
/
/
dns-remplacer
'
)
;
$
xml-
>
endElement
(
)
;
$
xml-
>
flush
(
)
;
?
>
Resultat
brut
:
<
toto
>
<
url
>
http
:
/
/
dns-remplacer
<
/
url
>
<
/
toto
>
et
si
on
récupérer
du
donnée
de
le
table
carnet
pour
la|le
exporter
en
XML
:
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
$
xml
=
new
XMLWriter
(
)
;
$
xml-
>
openUri
(
`
`
dns-remplacer
'
'
)
;
$
xml-
>
startDocument
(
'
'
,
'
utf-8
'
)
;
$
xml-
>
startElement
(
'
mescontact
'
)
;
while
(
$
pers
=
$
data-
>
fetch
(
)
)
{
$
xml-
>
startElement
(
'
contact
'
)
;
$
xml-
>
writeAttribute
(
'
id
'
,
$
pers
[
'
ID
'
]
)
;
$
xml-
>
writeElement
(
'
prenom
'
,
$
pers
[
'
PRENOM
'
]
)
;
$
xml-
>
writeElement
(
'
nom
'
,
$
pers
[
'
nom
'
]
)
;
$
xml-
>
writeElement
(
'
naissance
'
,
$
pers
[
'
naissance
'
]
)
;
$
xml-
>
endElement
(
)
;
}
$
xml-
>
endElement
(
)
;
$
xml-
>
endElement
(
)
;
$
xml-
>
flush
(
)
;
?
>
Resultat
:
<
?
xml
version
=
'
'
'
'
encoding
=
'
'
UTF-8
'
'
?
>
<
mescontact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
John
<
/
prenom
>
<
nom
>
Smith
<
/
nom
>
<
naissance
>
<
/
naissance
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
jean
<
/
prenom
>
<
nom
>
Durand
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Jeanne
<
/
prenom
>
<
nom
>
GUDULE
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
EMILIO
<
/
prenom
>
<
nom
>
ZAPATA
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Nicolas
<
/
prenom
>
<
nom
>
Jourdain
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
marier
<
/
prenom
>
<
nom
>
DUPUY
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
LOU
<
/
prenom
>
<
nom
>
ANDREAS
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Franz
<
/
prenom
>
<
nom
>
Kafka
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Joe
<
/
prenom
>
<
nom
>
dalton
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
/
mescontact
>
traitement
avec
dom
:
Ecriture
de
fichier
XML
avec
dom
en
utiliser
du
donnée
provenir
d
’
un
base
de
donnée
.
partir
de
le
table
film
suivant
:
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
CREATE
tabler
if
NOT
EXISTS
`
film
`
(
`
code_filmìnt
(
)
NOT
NULL
AUTO_INCREMENT
,
`
titre_original
`
varchar
(
)
DEFAULT
NULL
,
`
titre_francais
`
varchar
(
)
DEFAULT
NULL
,
`
pays
`
varchar
(
)
DEFAULT
NULL
,
`
dateìnt
(
)
DEFAULT
NULL
,
`
dureeìnt
(
)
DEFAULT
NULL
,
`
couleur
`
varchar
(
)
DEFAULT
NULL
,
`
realisateurìnt
(
)
DEFAULT
NULL
,
ìmagè
varchar
(
)
DEFAULT
NULL
,
PRIMARY
KEY
(
`
code_film
`
)
)
et
créer
un
fichier
XML
avec
le
donnée
de
ce
table
en
utiliser
dom
:
<
?
php
/
/
avec
le
fichier
dns-remplacé
utiliser
auparavant
require
(
`
`
dns-remplacer
'
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
film
limit
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
if
(
$
dater
)
{
$
document
=
new
DomDocument
(
)
;
$
document-
>
preserveWhiteSpace
=
false
;
$
document-
>
formatOutput
=
true
;
/
/
on
créer
le
racine
<
lesfilm
>
et
on
la|le
insérer
dans
le
document
$
lesfilm
=
$
document-
>
createElement
(
'
lesfilm
'
)
;
$
document-
>
appendChild
(
$
lesfilm
)
;
/
/
on
boucler
pour
tout
le
film
trouver
dans
le
BD
:
while
(
$
unfilm
=
$
data-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
)
{
$
film
=
$
document-
>
createElement
(
'
film
'
)
;
$
film-
>
setAttribute
(
'
idreal
'
,
$
unfilm-
>
realisateur
)
;
$
lesfilms-
>
appendChild
(
$
film
)
;
/
/
on
créer
le
élément
title
et
on
la|le
ajouter
à
$
film
$
title
=
$
document-
>
createElement
(
'
titre
'
)
;
$
film-
>
appendChild
(
$
title
)
;
/
/
on
définir
le
texte
pour
$
title
$
text
=
$
document-
>
createTextNode
(
utf8_encode
(
$
unfilm-
>
titre_
˓→original
)
)
;
$
title-
>
appendChild
(
$
text
)
;
/
/
créer
et
ajouter
le
realisateur
avoir
$
film
$
realisateur
=
$
document-
>
createElement
(
'
date
'
)
;
$
id
=
$
document-
>
createTextNode
(
$
unfilm-
>
date
)
;
$
realisateur-
>
appendChild
(
$
id
)
;
$
film-
>
appendChild
(
$
realisateur
)
;
}
$
document-
>
save
(
'
dns-remplacer
'
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
echo
`
`
Export
XML
finir
!
`
`
;
}
else
{
echo
`
`
aucun
film
dans
le
base
!
'
'
;
}
?
>
exécution
:
Creation
XML
avec
dom
Resultat
:
<
?
xml
version
=
'
'
'
'
?
>
<
lesfilm
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Pandora
and
the
flying
Dutchman
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Johnny
Guitar
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Woman
under
the
influence
(
à
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Apartment
(
The
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Victor
/
Victoria
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Modern
Times
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
(
suite
sur
le
page
suivant
)
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
titre
>
M
&
#
xC3
;
&
#
xA9
;
prendre
(
le
)
˓→
<
/
titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
jour
de
f
&
#
xC3
;
&
#
xAA
;
te
˓→
<
/
titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Olvidados
(
los
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
West
Side
Story
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
/
lesfilm
>
relecture
avec
SimpleXML
:
<
?
php
$
lesfilm
=
simplexml_load_file
(
'
dns-remplacer
'
)
;
foreach
(
$
lesfilms-
>
film
avoir
$
film
)
{
echo
`
`
titre
:
'
'
.
utf8_decode
(
$
film-
>
titre
)
.
`
`
<
br
/
>
\n
'
'
;
foreach
(
$
film-
>
attribute
(
)
as
$
avoir
=
>
$
b
)
{
echo
$
avoir
,
'
=
'
'
'
,
$
b
,
`
`
\
'
'
\n
'
'
;
}
print
`
`
Annee
:
{
$
film-
>
annee
}
<
br
/
>
\n
'
'
;
}
?
>
exécution
:
lecture
XML
avec
SimpleXML
Resultat
brut
:
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
titre
:
Pandora
and
the
flying
Dutchman
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Johnny
Guitar
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Woman
under
the
influence
(
à
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Apartment
(
The
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Victor
/
Victoria
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Modern
Times
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
méprendre
(
le
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
jour
de
fête
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Olvidados
(
los
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
West
Side
Story
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
architecture
de
type
MVC
avec
PHP
problème
Lorsqu
’
un
projet
augmenter
,
le
besoin
de
s
’
organiser
et
de
permettre
plus
de
réutilisabilité
et
de
lisibilité
demander
un
certain
méthode
.
MVC
=
modeler
voir
Controleur
pouvoir
être
un
solution
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
intéressant
.
nous
aller
commencer
à
nous
familiariser
avec
le
composant
d
’
un
Framework
MVC
et
à
voir
l
’
utilité
de
recourir
à
de
tel
outil
.
un
introduction
général
à
ce
sujet
se
trouver
ici
(
http
:
/
/
sym-
dns-remplacer
/
doc
/
current
/
book
/
from_flat_php_to_
dns-remplacé
)
du
PHP
pur
au
template
PHP
:
considérer
le
code
suivre
en
interroger
le
table
carnet
voir
précemment
depuis
PHP
avec
PDO
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
pour
acceder
au
carnet
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
echo
$
row
[
'
nom
'
]
<
br
/
>
\n
'
'
;
}
}
?
>
on
pouvoir
observer
quelque
défaut
dans
le
code
ci-dessus
:
—
Réutilisabilté
du
code
très
réduire
—
si
on
fabriquer
un
formulaire
avec
le
entrée
du
carnet
,
où
devoir
on
mettre
le
code
correspondre
?
un
template
PHP
:
on
pouvoir
améliorer
un
peu
le
chose
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
pour
acceder
au
carnet
'
'
;
else
{
$
ami
=
Array
(
)
;
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
$
ami
[
]
=
$
row
;
}
require
`
`
template
/
dns-remplacer
'
'
;
}
?
>
avec
un
template
dns-remplacer
à
placer
dans
template
/
dns-remplacer
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
title
>
liste
de
mon
ami
<
/
title
>
<
/
head
>
<
body
>
<
h@card@
>
List
of
friends
<
/
h@card@
>
<
ul
>
<
?
php
foreach
(
$
ami
avoir
$
ami
)
:
?
>
<
li
>
<
avoir
href
=
'
'
/
recherche
?
nom
=
<
?
php
echo
$
ami
[
'
ID
'
]
?
>
'
'
>
<
/
avoir
>
<
/
li
>
<
?
php
endforeach
;
?
>
<
/
ul
>
<
/
body
>
<
/
html
>
on
commencer
ainsi
à
séparer
le
présentation
du
codage
«
métier
»
.
isoler
le
logique
applicative
:
<
?
php
/
/
dns-remplacer
require
(
`
`
dns-remplacer
'
'
)
;
(
suite
sur
le
page
suivant
)
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
function
connect_db
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
/
/
puis
function
get_all_friends
(
)
{
$
connexion
=
connect_db
(
)
;
$
ami
=
Array
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
$
ami
[
]
=
$
row
;
}
return
$
ami
;
}
?
>
on
pouvoir
maintenant
avoir
un
controleur
très
simple
qui
interroger
le
modèle
puis
passer
le
donnée
au
template
pour
affichage
.
<
?
php
/
/
dns-remplacer
require_once
'
dns-remplacer
'
;
$
ami
=
get_all_friends
(
)
;
require
'
template
/
dns-remplacer
'
;
?
>
Layout
:
il
rester
un
partie
non
réutilisable
dans
le
code
à
savoir
le
layout
.
essayer
de
remédier
à
cela
:
<
!
--
template
/
dns-remplacer
--
>
<
!
DOCTYPE
html
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
html
>
<
head
>
<
title
>
<
?
php
echo
$
title
?
>
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
$
content
?
>
<
/
body
>
<
/
html
>
héritage
de
template
:
<
?
php
/
/
template
/
dns-remplacer
$
title
=
'
liste
du
ami
'
;
ob_start
(
)
;
?
>
<
h@card@
>
List
de
mon
ami
<
/
h@card@
>
<
ul
>
<
?
php
foreach
(
$
ami
avoir
$
ami
)
:
?
>
<
li
>
<
avoir
href
=
'
'
/
recherche
?
nom
=
<
?
php
echo
$
ami
[
'
nom
'
]
?
>
'
'
>
<
?
php
echo
$
ami
[
'
ville
'
]
?
>
<
/
avoir
>
<
/
li
>
<
?
php
endforeach
;
?
>
<
/
ul
>
<
?
php
$
content
=
ob_get_clean
(
)
;
include
'
dns-remplacer
'
?
>
observer
l
’
utilisation
de
le
bufferisation
avec
ob_start
(
)
et
ob_get_clean
(
)
.
ce
dernier
fonction
récupérer
le
contenu
bufferiser
et
nettoyer
ensuite
le
buffer
.
affichage
du
détail
d
’
un
personne
on
aller
ajouter
à
notre
modèle
un
fonction
pour
afficher
le
détail
d
’
un
personne
:
<
?
php
function
get_friend_by_id
(
$
id
)
{
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
(
suite
sur
le
page
suivant
)
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
return
$
stmt-
>
fetch
(
)
;
}
on
pouvoir
maintenant
créer
un
nouveau
controleur
dns-remplacé
:
<
?
php
/
/
dns-remplacer
require_once
'
dns-remplacer
'
;
$
pers
=
get_friend_by_id
(
$
_GET
[
'
id
'
]
)
;
require
'
template
/
dns-remplacer
'
;
?
>
qui
utiliser
le
template
:
<
?
php
/
/
template
/
dns-remplacer
$
title
=
$
pers
[
'
nom
'
]
;
ob_start
(
)
;
?
>
<
h@card@
>
details
sur
<
?
php
echo
$
pers
[
'
PRENOM
'
]
.
'
'
.
$
pers
[
'
nom
'
]
?
>
<
/
h1
>
<
p
>
<
?
php
echo
'
ne
le
'
.
$
pers
[
'
naissance
'
]
;
echo
'
<
br
/
>
ville
:
'
.
$
pers
[
'
ville
'
]
;
$
content
=
ob_get_clean
(
)
;
include
'
dns-remplacer
'
?
>
vous
pouvoir
tester
en
entrer
l
’
URL
de
dns-remplacé
avec
un
paramètre
id
.
le
code
être
similaire
à
celui
du
premier
template
et
nous
pouvoir
réutiliser
le
template
de
base
,
mais
il
subsister
plusieurs
problème
:
—
si
le
paramètre
id
n
’
être
pas
fournir
,
notre
application
aller
provoquer
un
erreur
.
—
nous
n
’
avoir
pas
de
controleur
principal
.
regrouper
d
’
abord
le
code
du
contrôleur
(
dns-remplacer
et
dns-remplacer
)
dans
un
fichier
unique
dns-remplacer
<
?
php
/
/
dns-remplacer
function
list_action
(
)
{
$
ami
=
get_all_friends
(
)
;
require
'
template
/
dns-remplacer
'
;
}
function
detail_action
(
$
id
)
{
$
pers
=
get_friend_by_id
(
$
id
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
require
'
template
/
dns-remplacer
'
;
}
?
>
nous
pouvoir
enfin
proposer
un
controleur
principal
(
front
Controller
)
dns-remplacer
:
<
?
php
/
/
dns-remplacer
/
/
on
charger
le
modeles
et
le
controleurs
require_once
'
dns-remplacer
'
;
require_once
'
dns-remplacer
'
;
/
/
gestion
du
route
$
urire
=
parse_url
(
$
_SERVER
[
'
REQUEST_URI
'
]
,
PHP_URL_PATH
)
;
if
(
'
/
dns-remplacer
'
=
=
$
uri
)
{
list_action
(
)
;
}
elseif
(
'
/
dns-remplacer
/
detail
'
=
=
$
urire
&
&
isset
(
$
_GET
[
'
id
'
]
)
)
{
detail_action
(
$
_GET
[
'
id
'
]
)
;
}
else
{
header
(
'
status
:
Not
Found
'
)
;
echo
'
<
html
>
<
body
>
<
h@card@
>
page
Not
Found
<
/
h1
>
<
/
body
>
<
/
html
>
'
;
}
?
>
nous
avoir
maintenant
un
structure
de
ce
type
:
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
template
dns-remplacé
dns-remplacer
on
pouvoir
améliorer
tout
cela
en
intégrer
dans
un
même
objet
tout
le
modèle
.
voir
sur
github
/
roza
/
php-basic-mvc
(
https
:
/
/
dns-remplacer
/
roza
/
php-basic-mvc
/
)
pour
le
code
complet
.
mais
ce
système
de
routage
être
encore
très
incomplet
et
nous
aller
plutôt
utliser
pour
continuer
le
outil
d
’
un
framework
Web
de
référence
:
Symfony
.
Template
Twig
en
PHP
L
’
installation
de
Twig
se
faire
grâce
à
l
’
outil
composer
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
composer
installer
d
’
abord
l
’
outil
composer
qui
servir
à
beaucoup
de
tâche
courant
dans
un
projet
PHP
.
on
aller
d
’
abord
créer
un
répertoire
bin
à
le
racine
de
notre
home
,
placer
y
l
’
exécutable
dns-remplacer
et
renommer
le
composer
.
cd
mkdir
bin
cd
bin
curl
-s
https
:
/
/
dns-remplacer
/
installer
|
php
mv
dns-remplacer
composer
vérifier
le
définition
de
votre
variable
d
’
environnement
http_proxy
et
https_proxy
dans
votre
.bashrc
ajouter
également
le
ligne
suivant
à
votre
.bashrc
:
export
PATH
=
$
PATH
:
~
/
bin
de
manière
à
ce
que
tout
le
programme
installer
dans
le
répertoire
bin
de
votre
home
être
accessible
de
n
’
importer
où
.
installation
installer
Twig
:
.
.
code-block
:
:
none
composer
require
twig
/
twig
:
~
ceci
créer
dans
le
répertoire
courir
un
dossier
vendor
contenir
le
librairie
demander
.
on
définir
d
’
abord
un
template
de
base
,
dns-remplacer
:
<
!
DOCTYPE
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
{
%
block
head
%
}
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
title
>
{
%
block
title
%
}
{
%
endblock
%
}
<
/
title
>
{
%
endblock
%
}
<
/
head
>
<
body
>
<
section
id
=
'
'
content
'
'
>
{
%
block
content
%
}
{
%
endblock
%
}
<
/
section
>
<
footer
id
=
'
'
footer
'
'
>
{
%
block
footer
%
}
&
copy
;
copyright
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
'
'
>
mon
super
site
<
/
avoir
>
.
{
%
endblock
%
}
<
/
footer
>
<
/
body
>
<
/
html
>
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
puis
un
template
plus
spécialiser
qui
en
hériter
,
dns-remplacer
:
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
menu
de
le
semaine
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
style
type
=
'
'
text
/
css
'
'
>
.important
{
color
:
#
;
}
<
/
style
>
{
%
endblock
%
}
{
%
block
content
%
}
<
h@card@
>
menu
<
/
h@card@
>
<
p
class
=
'
'
important
'
'
>
voici
votre
menu
de
le
semaine
:
<
dl
>
<
dt
>
lundi
<
/
dt
>
<
dd
>
{
{
lundi
}
}
<
/
dd
>
<
dt
>
mardi
<
/
dt
>
<
dd
>
{
{
mardi
}
}
<
/
dd
>
<
dt
>
mercredi
<
/
dt
>
<
dd
>
{
{
mercredi
}
}
<
/
dd
>
<
dt
>
jeudi
<
/
dt
>
<
dd
>
{
{
jeudi
}
}
<
/
dd
>
<
/
dl
>
<
/
p
>
{
%
endblock
%
}
enfin
,
on
utiliser
ce
template
dans
un
fichier
dns-remplacer
en
charger
d
’
abord
l
”
autoloader
:
<
?
php
/
/
inclure
le
autoloader
include
'
vendor
/
dns-remplacer
'
;
try
{
/
/
définir
le
dossier
ou
on
trouver
le
template
$
loader
=
new
Twig_Loader_Filesystem
(
'
template
'
)
;
/
/
initialiser
le
environement
Twig
$
twig
=
new
Twig_Environment
(
$
loader
)
;
/
/
charger
le
template
$
template
=
$
twig-
>
loadTemplate
(
'
dns-remplacer
'
)
;
/
/
affecter
le
variable
du
template
et
appeller
le
rendre
echo
$
template-
>
render
(
array
(
'
lundi
'
=
>
'
steak
frit
'
,
'
mardi
'
=
>
'
Raviolis
'
,
'
mercredi
'
=
>
'
pot
au
feu
'
,
'
jeudi
'
=
>
'
couscous
'
,
'
vendredi
'
=
>
'
Poisson
'
)
)
;
}
catch
(
exception
$
e
)
{
die
(
'
ERROR
:
'
.
$
e-
>
getMessage
(
)
)
;
(
suite
sur
le
page
suivant
)
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
}
affichage
du
personne
du
carnet
afficher
à
présent
le
personne
du
carnet
à
l
’
aide
d
’
un
template
Twig
.
on
réutiliser
le
fichier
dns-remplacé
voir
précédemment
:
<
?
php
/
/
dns-remplacer
class
carnet
{
private
static
$
connexion
;
function
__construct
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
self
:
:
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
le
connexion
:
%
s\n
'
'
,
$
e-
>
˓→getMessage
(
)
)
;
$
this-
>
connexion
=
NULL
;
}
}
/
*
*
Récupére
le
liste
du
contact
sous
forme
de
un
tableau
*
/
function
get_all_friends
(
)
{
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
self
:
:
$
connexion-
>
query
(
$
sql
)
;
return
$
dater
;
}
/
*
*
ajouter
un
contact
à
le
table
carnet
*
/
function
add_friend
(
$
dater
)
{
$
sql
=
`
`
insert
INTO
carnet
(
nom
,
PRENOM
,
naissance
,
ville
)
˓→values
(
?
,
?
,
?
,
?
)
'
'
;
$
stmt
=
self
:
:
$
connexion-
>
prepare
(
$
sql
)
;
return
$
stmt-
>
execute
(
array
(
$
dater
[
'
nom
'
]
,
$
dater
[
'
prenom
'
]
,
$
dater
[
'
naissance
'
]
,
$
dater
[
'
ville
'
]
)
)
;
}
/
*
*
Récupére
un
contact
à
partir
de
son
ID
*
/
function
get_friend_by_id
(
$
id
)
{
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
self
:
:
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
<
?
php
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
/
/
fichier
dns-remplacé
include
'
vendor
/
dns-remplacer
'
;
/
/
on
inclure
le
modele
include
'
dns-remplacer
'
;
/
/
on
instancie
un
carnet
$
car
=
new
carnet
(
)
;
try
{
/
/
indiquer
le
dossier
ou
on
trouver
le
template
$
loader
=
new
Twig_Loader_Filesystem
(
'
template
'
)
;
/
/
initialiser
le
environement
Twig
$
twig
=
new
Twig_Environment
(
$
loader
)
;
/
/
récupérer
le
donnée
depuis
le
base
$
ami
=
$
car-
>
get_all_friends
(
)
;
/
/
charger
le
template
$
template
=
$
twig-
>
loadTemplate
(
'
dns-remplacer
'
)
;
$
titre
=
'
'
liste
du
membre
du
carnet
trier
par
ville
'
'
;
echo
$
template-
>
render
(
array
(
'
titre
'
=
>
$
titre
,
'
ami
'
=
>
$
ami
,
)
)
;
}
catch
(
exception
$
e
)
{
die
(
'
ERROR
:
'
.
$
e-
>
getMessage
(
)
)
;
}
?
>
et
un
template
dns-remplacé
:
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
personne
du
carnet
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
style
type
=
'
'
text
/
css
'
'
>
.important
{
color
:
#
;
}
<
/
style
>
{
%
endblock
%
}
{
%
block
content
%
}
<
p
align
=
'
'
center
'
'
class
=
'
'
Style1
'
'
>
{
{
titre
}
}
<
/
p
>
<
tabler
border
=
'
'
'
'
align
=
'
'
center
'
'
cellspacing
=
'
'
'
'
cellpadding
=
'
'
'
'
>
<
tr
bgcolor
=
'
'
#
CA9999
'
'
>
<
td
width
=
'
'
'
'
>
<
strong
>
numero
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
nom
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
Prenom
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
age
<
/
strong
>
<
/
td
>
(
suite
sur
le
page
suivant
)
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
<
td
width
=
'
'
'
'
>
<
strong
>
ville
<
/
strong
>
<
/
td
>
<
/
tr
>
{
%
set
i
=
%
}
{
%
for
ami
in
ami
%
}
{
%
set
i
=
i@card@
%
}
{
%
if
i
is
odd
%
}
<
tr
bgcolor
=
'
'
#
F0F0F0
'
'
>
{
%
else
%
}
<
tr
bgcolor
=
'
'
#
A6A6A6
'
'
>
{
%
endif
%
}
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
/
tr
>
{
%
endfor
%
}
<
/
table
>
{
%
endblock
%
}
ce
template
être
un
peu
maladroit
mais
il
montrer
l
’
expressivité
du
langage
de
template
Twig
avec
du
boucle
,
du
conditionnel
,
calcul
avec
du
variable
,
etc
.
nous
pouvoir
bien
sûr
en
proposer
un
plus
simple
avec
le
CSS
adéquat
.
affichage
du
personne
avec
un
template
plus
simple
:
(
dns-remplacer
)
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
personne
du
carnet
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
static
/
css
/
dns-remplacer
'
'
/
>
{
%
endblock
%
}
{
%
block
content
%
}
<
h@card@
>
{
{
titre
}
}
<
/
h2
>
<
tabler
id
=
'
'
joli
'
'
class
=
'
'
centre
'
'
>
<
tr
>
<
td
>
numero
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
Prenom
<
/
td
>
<
td
>
age
<
/
td
>
<
td
>
ville
<
/
td
>
<
/
tr
>
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
{
%
for
ami
in
ami
%
}
<
tr
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
/
tr
>
{
%
endfor
%
}
<
/
table
>
{
%
endblock
%
}
avec
le
style
qui
aller
bien
sur
le
tableau
.
.
.
nous
pouvoir
ainsi
compléter
le
développement
MVC
effectuer
précédemment
en
utiliser
du
template
Twig
.
voir
sur
github
/
roza
/
php-basic-mvc
(
https
:
/
/
dns-remplacer
/
roza
/
php-basic-mvc
/
)
pour
un
code
plus
complet
.
mais
le
système
de
routage
employer
être
encore
très
rudimentaire
et
nous
aller
plutôt
utliser
le
outil
d
’
un
framework
Web
de
référence
:
Symfony
pour
aller
plus
loin
.
composer
,
Symfony
et
Flex
nous
aller
à
présent
nous
familiariser
avec
le
outil
et
composant
d
’
un
Framework
de
réfé-
rence
:
Symfony
qui
être
très
modulaire
et
permettre
d
’
installer
du
composant
très
riche
comme
SwiftMailer
pour
envoyer
du
mail
,
FOSUserBundle
pour
gérer
du
utilisateur
,
FOSREST-Bundle
ou
APIPlatform
pour
réaliser
rapidement
un
api
complet
.
le
Framework
Symfony
être
baser
sur
un
Micro-noyau
(
Micro-Kernel
)
%
plus
léger
que
le
noyau
de
Symfony
.
un
introduction
général
à
ce
framework
se
trouver
ici
(
https
:
/
/
dns-remplacer
/
)
le
gestion
du
dépendance
se
faire
à
présent
grâce
à
l
’
outil
Symfony
Flex
qui
permettre
d
’
établir
du
recette
ou
recipes
décrire
le
dépendance
et
le
configuration
d
’
un
projet
.
L
’
outil
de
base
être
composer
indication
:
composer
permettre
d
’
installer
du
centaine
de
package
librement
disponible
.
on
la|le
trouver
sur
Packagist
(
https
:
/
/
dns-remplacer
/
)
.
il
permettre
de
gérer
le
dépendance
d
’
un
projet
et
également
de
créer
le
squellette
d
’
un
application
Symfony
.
composer
installer
d
’
abord
l
’
outil
composer
qui
servir
à
beaucoup
de
tâche
courant
dans
un
projet
PHP
.
on
aller
d
’
abord
créer
un
répertoire
bin
à
le
racine
de
notre
home
,
placer
y
l
’
exécutable
dns-remplacer
et
renommer
le
composer
.
.
composer
,
Symfony
et
Flex
cours|cour
PHP
accélérer
,
version
cd
mkdir
bin
cd
bin
curl
-s
https
:
/
/
dns-remplacer
/
installer
|
php
mv
dns-remplacer
composer
vérifier
le
définition
de
votre
variable
d
’
environnement
http_proxy
et
https_proxy
dans
votre
.bashrc
ajouter
également
le
ligne
suivant
à
votre
.bashrc
:
export
PATH
=
$
PATH
:
~
/
bin
de
manière
à
ce
que
tout
le
programme
installer
dans
le
répertoire
bin
de
votre
home
être
accessible
de
n
’
importer
où
.
si
on
vouloir
juste
installer
un
composant
simple
comme
HTTP
Foundation
»
,
on
placer
à
le
racine
du
dossier
de
travail
le
fichier
*
dns-remplacer
suivre
:
{
'
'
require
'
'
:
{
'
'
symfony
/
http-foundation
'
'
:
`
`
~
'
'
}
}
ceci
indiquer
que
nous
n
’
installer
pour
l
’
instant
que
ce
seul
composant
et
que
nous
demander
le
dernier
version
stable
de
le
branche
pour
http-foundation
.
puis
utiliser
composer
pour
installer
le
composant
demander
:
composer
update
-o
noter
l
’
utilisation
de
l
’
option
-o
pour
optimize-autoloader
qui
optimiser
«
au
mieux
»
le
chargement
automatique
du
classe
.
HttpFoundation
:
le
principal
composant
de
HttpFoundation
à
savoir
Request
et
Response
être
alors
prêt
à
l
’
emploi
.
remarquer
l
’
usage
du
espace
de
nommage
en
PHP
semblable
à
celui
du
C++
ou
au
import
de
package
en
java
pour
éviter
du
conflit
de
nommage
entre
différent
vendor
c
’
être
à
dire
différent
entité
fournir
du
code
à
votre
projet
:
<
?
php
/
/
chargement
autoloader
require_once
__DIR__
.
'
vendor
/
dns-remplacer
'
;
user
Symfony\Component\HttpFoundation\Request
;
user
Symfony\Component\HttpFoundation\Response
;
/
/
Actual
request
:
/
/
$
request
=
Request
:
:
createFromGlobals
(
)
;
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
/
/
fake
request
$
request
=
Request
:
:
create
(
'
/
dns-remplacer
?
name
=
zozo
'
)
;
/
/
URI
demandee
(
sans
le
parametres
)
$
path
=
$
request-
>
getPathInfo
(
)
;
/
/
recup
GET
de
variable
$
nom
=
$
request-
>
query-
>
get
(
'
name
'
,
'
World
'
)
;
$
prenom
=
$
request-
>
query-
>
get
(
'
surname
'
,
'
Joe
'
)
;
echo
`
`
bonjour
$
surname
$
name
<
br
/
>
'
'
;
on
pouvoir
aussi
récupérer
d
’
autre
information
sur
le
client
et
fabriquer
un
réponse
:
<
?
php
/
/
recup
variable
SERVER
$
host
=
$
request-
>
server-
>
get
(
'
HTTP_HOST
'
)
;
/
/
get
COOKIES
$
request-
>
cookies-
>
get
(
'
PHPSESSID
'
)
;
/
/
HTTP
headers
$
headers
=
$
request-
>
headers-
>
get
(
'
host
'
)
;
$
content_type
=
$
request-
>
headers-
>
get
(
'
content_type
'
)
;
$
method
=
$
request-
>
getMethod
(
)
;
/
/
GET
,
POST
,
pouvoir
,
DELETE
ou
HEAD
$
langs
=
$
request-
>
getLanguages
(
)
;
$
IP
=
=
$
request-
>
getClientIp
(
)
;
$
response
=
new
Response
(
$
IP
.
'
'
`
`
.
$
host
.
'
'
`
`
.
$
path
.
'
'
`
`
.
$
headers
.
'
'
`
`
.
$
content_type
.
'
'
`
`
.
$
method
.
'
'
`
`
.
$
nom
.
'
'
`
`
.
$
langs
[
]
)
;
$
response-
>
send
(
)
;
?
>
Squellette
d
’
application
Symfony
:
créer
un
répertoire
de
travail
mvc-sf4
dans
votre
dossier
Web
,
par
exemple
~
/
www
(
ou
~
/
pu-blic_html
)
si
on
utiliser
user_dir
d
’
apache
ou
n
’
importer
où
si
on
utiliser
le
serveur
Web
embar-qué
de
PHP
.
et
créer
le
trame
d
’
un
application
symfony4
à
l
’
aider
de
composer
composer
create-project
symfony
/
skeleton
hello-sf4
veiller
à
bien
avoir
un
version
à
jour
de
composer
et
si
besoin
:
composer
self-update
le
structure
du
projet
ainsi
créer
être
le
suivant
:
.
composer
,
Symfony
et
Flex
cours|cour
PHP
accélérer
,
version
hello-sf4
/
bin
consoler
dns-remplacer
dns-remplacer
config
dns-remplacer
package
dns-remplacer
dns-remplacé
public
dns-remplacer
src
Controller
dns-remplacer
dns-remplacer
var
cacher
log
vendor
dns-remplacer
composer
psr
symfony
le
répertoire
bin
contenir
l
’
outil
console
qui
permettre
d
’
effectuer
le
tâche
de
routine
pour
créer
ou
gérer
un
projet
.
le
répertoire
config
contenir
le
fichier
de
configuration
.
le
répertoire
public
contenir
le
fichier
index
de
l
’
application
le
dossie
src
le
controleurs
,
le
Kernel
mais
aussi
le
entité
etc
.
le
dossier
var
contenir
le
cache
et
le
logs
et
le
dossier
vendor
le
classe
du
Bundles
installer
comme
http-foundation
.
vous
pouvoir
consulter
le
fichier
dns-remplacé
qui
se
trouver
à
le
racine
du
dossier
hello-sf4
pour
voir
le
liste
du
dépendance
installer
:
{
'
'
psr
/
cache
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
container
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
log
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
simple-cache
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
symfony
/
cache
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
'
'
symfony
/
config
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
console
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
e3868d2f4a5104f19f844fe551099a00c6562527
'
'
}
}
,
'
'
symfony
/
debug
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
dependency-injection
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
dotenv
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
event-dispatcher
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
filesystem
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
finder
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
flex
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
cc1afd81841db36fbef982fe56b48ade6716fac4
'
'
}
}
,
'
'
symfony
/
framework-bundle
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
c0c0bf94174609d740ca2a61e0201949c5683d50
'
'
}
}
,
'
'
symfony
/
http-foundation
'
'
:
{
(
suite
sur
le
page
suivant
)
.
composer
,
Symfony
et
Flex
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
http-kernel
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
lts
'
'
:
{
'
'
version
'
'
:
`
`
4-dev
'
'
}
,
'
'
symfony
/
polyfill-mbstring
'
'
:
{
'
'
version
'
'
:
`
`
v1.8.0
'
'
}
,
'
'
symfony
/
routing
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
cda8b550123383d25827705d05a42acf6819fe4e
'
'
}
}
,
'
'
symfony
/
yaml
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
}
application
simple
Symfony
compléter
à
présent
l
’
application
Symfony
.
tester
un
application
PHP
-
TDD
nous
aller
à
présent
nous
attaquer
à
un
problématique
fondamental
dans
tout
application
qu
’
elle
être
Web
,
mobile
ou
autre
:
le
test
.
TDD
TDD
vouloir
dire
test
Driven
Development
c
’
être
à
dire
développement
diriger
par
le
test
C
’
être
un
démarche
mettre
en
avant
en
méthodologie
agile
elle
consister
en
général
en
l
’
application
du
point
suivant
:
—
écrire
un
test
—
vérifier
qu
’
il
échouer
(
car
le
code
qu
’
il
tester
n
’
exister
pas
)
—
écrire
juste
le
code
suffire
pour
passer
le
test
—
vérifier
que
le
test
passer
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
—
procéder
à
un
refactoring
du
code
,
c
’
est-à-dire
l
’
améliorer
en
garder
le
même
fonctionnalité
.
intérêt
de
le
démarche
:
le
avantage
principal
de
ce
démarche
être
:
—
préciser
au
mieux
le
spécification
du
code
et
l
’
api
envisager
—
ceci
obliger
à
faire
du
choix
de
conception
qui
rester
parfois
trop
dans
le
flou
au
début
du
développement
—
plus
tard
,
disposer
d
’
un
large
base
de
test
être
un
riche
pour
un
application
car
elle
permettre
de
vérifier
à
tout
moment
que
le
test
installer
ne
être
pas
mettre
en
défaut
par
de
nouveau
développement
ou
du
refactoring
de
code
tout
le
langage
de
programmation
disposer
de
Frameworks
de
test
.
par
exemple
java
offrir
JUnit
.
PHP
quand
avoir
lui
proposer
PHPUnit
.
on
pouvoir
l
’
installer
via
composer
:
{
'
'
require
'
'
:
{
'
'
phpunit
/
phpunit
'
'
:
`
`
.
*
'
'
,
}
,
'
'
autoload
'
'
:
{
'
'
psr-0
'
'
:
{
'
'
exemple
'
'
:
`
`
src
'
'
}
}
}
dns-remplacer
install
Ecrivons
à
présent
notre
premier
test
dans
le
dossier
test
:
<
?
php
user
Exemple\FileLoader
;
class
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
(
)
{
$
f
=
new
FileLoader
;
}
}
pour
tester
:
placer
un
fichier
dns-remplacer
à
le
racine
de
votre
projet
contenir
:
<
?
xml
version
=
'
'
'
'
encoding
=
'
'
UTF-8
'
'
?
>
<
!
--
(
suite
sur
le
page
suivant
)
.
tester
un
application
PHP
-
TDD
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
PHPUnit
configuration
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
fichier
de
configuration
standard
de
phpunit
--
>
<
phpunir
backupGlobals
=
'
'
false
'
'
backupStaticAttribute
=
'
'
false
'
'
colors
=
'
'
true
'
'
bootstrap
=
'
'
vendor
/
dns-remplacer
'
'
convertErrorsToExceptions
=
'
'
true
'
'
convertNoticesToExceptions
=
'
'
true
'
'
convertWarningsToExceptions
=
'
'
true
'
'
processIsolation
=
'
'
false
'
'
stopOnFailure
=
'
'
false
'
'
syntaxCheck
=
'
'
false
'
'
>
<
testsuite
>
<
testsuite
>
<
directory
>
test
<
/
directory
>
<
/
testsuite
>
<
/
testsuite
>
<
/
phpunit
>
nous
être|sommer
prêt
à
lancer
notre
premier
test
:
phpunir
Ecriver
maintenant
un
peu
de
code
pour
nous
permettre
de
passer
notre
premier
test
:
nous
aller
compléter
notre
test
par
un
vérification
qu
’
un
fichier
situer
dans
le
textit
{
fixtures
}
de
test
avoir
bien
être
charger
:
<
?
php
class
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
(
)
{
$
f
=
new
FileLoader
;
}
/
*
*
*
nous
vouloir
récupérer
le
contenu
de
un
fichier
via
*
un
méthode
get
(
)
*
/
public
function
testFileLoaderCanLoadFileContent
(
)
{
$
f
=
new
FileLoader
;
$
r
=
$
f-
>
get
(
__DIR__
.
'
/
fixtures
/
dns-remplacer
'
)
;
$
this-
>
assertEquals
(
`
`
Foo\n
'
'
,
$
r
)
;
}
}
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
puis
si
nous
avoir
besoin
de
Mock
Objects
,
nous
installer
le
librairie
mockery
:
composer
require
--
dev
mockery
/
mockery
mettre
en
place
un
Web
service
REST
problème
dans
un
architecture
REST
classique
,
un
serveur
présenter
le
donnée
d
’
un
table
et
un
client
riche
(
ou
ria
)
en
JavaScript
ou
un
client
mobile
permettre
de
la|le
récupérer
et
du
la|le
afficher
.
REST
signifier
Representational
State
Transfer
.
ce
architecture
permettre
de
réaliser
du
application
de
type
onepage
en
reporter
sur
le
client
un
bon
partie
de
le
logique
métier
et
en
offrir
du
point
d
’
entrée
au
client
pour
lire
du
donnée
sur
le
serveur
ou
lui
en
envoyer
.
ce
donnée
pouvoir
être
envoyer
en
XML
ou
de
plus
en
plus
aujourd
’
hui
en
JSON
:
JavaScript
Object
notation
,
c
’
être
à
dire
du
objet
directement
utilisable
en
JS
.
on
poser
le
définition
suivant
:
—
ria
=
Rich
Internet
application
—
REST
=
Representational
State
Transform
—
logique
métier
déporter
vers
le
client
—
tâcher
principal
du
serveur
:
offrir
du
service
de
récupération
et
de
stockage
de
donnée
un
flux
de
news
pouvoir
ainsi
offrir
par
exemple
un
ressource
du
type
:
/
api
/
v1
/
news
/
qui
permettre
au
client
de
récupérer
le
news
numéro
en
JSON
ou
en
XML
en
employer
le
méthode
HTTP
GET
dans
le
version
de
notre
api
.
dans
ce
exemple
,
le
news
être
ici
le
ressource
ou
élément
manipuler
dans
l
’
api
version
.
le
méthode
GET
être
employer
pour
récupérer
du
élément
individuellement
ou
par
collection
.
le
méthode
POST
être
quand
à
elle
employer
pour
envoyer
vers
le
serveur
un
ou
plusieurs
élé-
ments
.
D
’
autre
méthode
HTTP
pour
créer
ou
modifier
complètement
(
pouvoir
)
ou
partiellement
(
patch
)
du
élément
ou
la|le
effacer
(
DELETE
)
être
souvent
également
disponible
dans
l
’
api
.
le
technologie
concurrent
à
REST
être
XML-RPC
et
SOAP
(
Microsoft
)
REST
être
un
façon
moderne
de
concevoir
ce
genre
de
service
et
posséder
le
avantage
suivant
:
—
bon
monter
en
charge
du
serveur
—
simplicité
du
serveur
(
retour
au
source
du
protocole
HTTP
)
—
Equilibrage
de
charge
—
le
serveur
offrir
un
api
—
le
service
être
représenter
par
du
URL
’
s
donc
simplicité
et
bon
gestion
du
cache
—
possibilité
de
décomposer
du
service
complexe
en
de
multiple
service
plus
simple
qui
communiquer
entre
eux
le
principe
de
REST
avoir
être
théoriser
par
Roy
Fielding
dans
son
thèse
(
http
:
/
/
dns-remplacer
/
~
fielding
/
pub
/
dissertation
/
rest_arch_
dns-remplacé
)
:
.
séparation
clair
entre
client
et
serveur
.
mettre
en
place
un
Web
service
REST
cours|cour
PHP
accélérer
,
version
.
le
client
contenir
le
logique
métier
,
le
serveur
être
sans
Etat
.
le
réponse
du
serveur
pouvoir
ou
non
être
mettre
en
cache
.
L
’
interface
devoir
être
simple
,
bien
définir
,
standardiser
.
le
système
pouvoir
avoir
plusieurs
couche
comme
du
proxys
,
système
de
cache
,
etc
.
Eventuellement
,
le
client
pouvoir
télecharger
du
code
du
serveur
qui
s
’
exécuter
dans
le
contexte
du
client
pour
mémoire
,
un
api
REST
pouvoir
offrir
le
méthode
suivant
:
méthode
HTTP
et
REST
:
méthode
rôle
coder
retour
HTTP
GET
URL
récupération
Element
GET
URL
récupération
collection
POST
URL
envoi
d
’
Elements
DELETE
URL
effacer
Element
(
s
)
pouvoir
URL
modifier
un
Element
patch
URL
Modif
.
partiel
d
’
Elt
.
mais
on
pouvoir
aussi
avoir
du
erreur
comme
:
coder
erreur
description
signification
Bad
Request
requêter
mal
former
Not
Found
Resource
demander
inexistant
Unauthorized
authentification
necessaire
pour
accéder
à
le
resource
.
Method
Not
Allowed
méthode
interdire
pour
ce
resource
.
Conflict
par
exemple
,
un
pouvoir
qui
créer
un
ressource
fois
Internal
Server
Error
autre
erreur
du
serveur
.
par
ailleurs
,
le
serveur
REST
ne
maintenir
pas
d
’
état
,
le
requête
être
indépendant
le
un
du
autre
.
C
’
être
un
retour
au
fondamental
du
protocole
HTTP
qui
n
’
être
pas
doter
de
beaucoup
de
capacité
de
mémorisation
.
.
.
le
logique
et
l
’
ergonomie
de
l
’
application
être
gérer
côté
client
.
C
’
être
un
méthode
aujourd
’
hui
plebisciter
pour
faire
dialoguer
du
client
(
mobile
ou
Web
)
avec
du
serveur
.
exemple
de
service
REST
avec
PHP
problème
nous
aller
réaliser
en
PHP
l
’
implémentation
d
’
un
service
REST
qui
exposer
le
donnée
de
le
table
de
contact
appeller
carnet
utiliser
dans
le
autre
exemple
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
un
contact
être
ainsi
ainsi
accessible
à
un
route
du
type
:
/
api
/
v1
/
contact
/
qui
permettre
au
client
de
récupérer
le
contact
en
JSON
employer
le
méthode
HTTP
GET
dans
le
version
de
notre
api
.
dans
ce
exemple
,
le
contact
constituer
le
ressource
manipuler
dans
notre
api
.
le
méthode
GET
être
employer
pour
récupérer
du
élément
individuellement
ou
par
collection
.
méthode
action
réaliser
URI
GET
Récup
.
tout
le
lien
/
api
/
v1
/
GET
Récuperation
un
Element
/
api
/
v1
/
contact
/
{
id
}
GET
récupération
collection
/
api
/
v1
/
contact
POST
Creation
d
’
Elements
/
api
/
v1
/
contact
DELETE
effacer
Element
/
api
/
v1
/
contact
/
{
id
}
pouvoir
modifier
un
Element
/
api
/
v1
/
contact
/
{
id
}
patch
Modif
.
partiel
d
’
Elt
.
/
api
/
v1
/
contact
/
{
id
}
le
route
/
api
/
v1
/
en
GET
renvoyer
le
liste
du
URLs
du
contact
plutôt
que
le
liste
de
tout
le
contact
avec
tout
leur
détail
.
ceci
permettre
d
’
avoir
un
serveur
REST
auto-documenté
où
le
récupération
d
’
un
premier
URL
permettre
en
suivre
d
’
obtenir
le
liste
du
ressource
présent
sur
le
service
avec
leur
URLs
respectif
.
on
pouvoir
également
paginer
le
réponse
pour
ne
pas
manipuler
trop
de
donnée
simultané-
mentir
.
pour
assurer
le
routage
simplement
nous
aller
continuer
avec
silex
(
http
:
/
/
dns-remplacer
/
)
nous
pouvoir
donc
modifier
le
fichier
dns-remplacer
déjà
mettre
en
place
comme
suivre
:
<
?
php
require_once
__DIR__
.
'
/
vendor
/
dns-remplacer
'
;
require_once
'
dns-remplacer
'
;
$
app
=
new
Silex\Application
(
)
;
$
app
[
'
debug
'
]
=
true
;
$
app-
>
get
(
'
/
contact
'
,
function
(
)
{
$
content
=
'
<
ul
>
'
;
$
ami
=
get_all_friends
(
)
;
foreach
(
$
ami
avoir
$
ami
)
{
$
content
.
=
'
<
li
>
'
.
$
ami
[
'
nom
'
]
.
'
<
/
li
>
'
;
}
$
content
.
=
'
<
/
ul
>
'
;
return
$
content
;
}
)
;
$
app-
>
get
(
'
/
api
/
'
,
function
(
)
{
$
ami
=
get_all_friends_links
(
)
;
return
json_encode
(
$
ami
)
;
}
)
;
$
app-
>
get
(
'
/
api
/
contact
'
,
function
(
)
{
(
suite
sur
le
page
suivant
)
.
exemple
de
service
REST
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
ami
=
get_all_friends
(
)
;
return
json_encode
(
$
ami
)
;
}
)
;
?
>
avec
un
nouveau
méthode
dans
dns-remplacé
:
<
?
php
function
get_all_friends_links
(
)
{
$
connexion
=
connect_db
(
)
;
$
ami
=
Array
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
while
(
$
pers
=
$
data-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
)
{
$
res
=
Array
(
)
;
$
res
[
'
nom
'
]
=
$
pers
[
'
nom
'
]
;
$
res
[
'
URL
'
]
=
$
_SERVER
[
`
`
REQUEST_SCHEME
'
'
]
.
'
:
/
/
'
.
$
_SERVER
[
'
HTTP_HOST
'
]
.
$
_SERVER
[
'
CONTEXT_PREFIX
'
]
.
'
/
silex
/
api
/
contact
/
'
.
$
pers
[
'
ID
'
]
;
$
ami
[
]
=
$
res
;
}
return
$
ami
;
}
?
>
indication
:
le
vue
de
base
de
notre
api
renvoyer
maintenant
le
liste
du
lien
de
notre
contact
et
quelqu
’
un
qui
s
’
y
connecter
pouvoir
décrouvrir
par
le
d
’
autre
URLs
gérer
par
notre
api
.
un
bon
api
REST
se
devoir
d
’
être
autodocumenter
dans
le
mesure
du
possible
!
puis
assurer
le
GET
sur
l
’
URI
/
api
/
contact
/
id
en
ajouter
à
dns-remplacé
:
<
?
php
$
app-
>
get
(
'
/
api
/
contact
/
{
id
}
'
,
function
(
$
id
)
user
(
$
app
)
{
$
ami
=
get_friend_by_id
(
$
id
)
;
if
(
!
$
ami
)
$
app-
>
abort
(
,
`
`
contact
inexistant
'
'
)
;
else
return
json_encode
(
$
ami
,
JSON_PRETTY_PRINT
)
;
}
)
;
?
>
qui
marcher
si
on
ajouter
le
nouveau
méthode
get_friend_by_id
(
)
au
modèle
:
<
?
php
function
get_friend_by_id
(
$
id
)
{
(
suite
sur
le
page
suivant
)
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
?
>
continuer
avec
le
méthode
http
DELETE
sur
le
même
route
en
ajouter
à
dns-remplacé
:
<
?
php
$
app-
>
delete
(
'
/
api
/
contact
/
{
id
}
'
,
function
(
$
id
)
user
(
$
app
)
{
$
ami
=
get_friend_by_id
(
$
id
)
;
if
(
!
$
ami
)
$
app-
>
abort
(
,
`
`
contact
inexistant
'
'
)
;
else
{
delete_friend_by_id
(
$
id
)
;
return
json_encode
(
$
ami
,
JSON_PRETTY_PRINT
)
;
}
}
)
;
?
>
en
ajouter
au
modèle
:
<
?
php
function
delete_friend_by_id
(
$
id
)
{
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
Delete
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
?
>
enfin
le
POST
devoir
nous
permettre
d
’
envoyer
un
nouveau
contact
pour
peupler
le
table
carnet
sur
le
route
/
api
/
contact
.
nous
assurer
d
’
abord
le
récupération
du
contenu
json
sous
le
forme
d
’
un
tableau
PHP
avec
le
méthode
before
de
silex
:
<
?
php
$
app-
>
before
(
function
(
Request
$
request
)
{
if
(
=
=
=
strpos
(
$
request-
>
headers-
>
get
(
'
Content-Type
'
)
,
˓→
'
application
/
json
'
)
)
{
$
dater
=
json_decode
(
$
request-
>
getContent
(
)
,
true
)
;
$
request-
>
request-
>
replacer
(
is_array
(
$
dater
)
?
$
dater
˓→
:
array
(
)
)
;
(
suite
sur
le
page
suivant
)
.
exemple
de
service
REST
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
le
page
précédent
)
}
}
)
;
?
>
puis
le
méthode
post
proprement
dire
:
<
?
php
$
app-
>
post
(
'
/
api
/
contact
'
,
function
(
Request
$
request
)
user
(
˓→
$
app
)
{
$
dater
=
$
request-
>
request-
>
all
(
)
;
add_friends
(
$
dater
)
;
return
new
Response
(
json_encode
(
$
dater
)
,
,
array
(
'
Content-
˓→Type
'
=
>
'
application
/
json
'
)
)
;
}
)
;
?
>
N
’
oublier
pas
de
faire
appel
au
objet
Request
et
Response
au
début
du
fichier
dns-remplacé
:
<
?
php
user
Symfony\Component\HttpFoundation\Request
;
user
Symfony\Component\HttpFoundation\Response
;
?
>
il
ne
rester
plus
qu
’
à
ajouter
au
modèle
:
<
?
php
function
add_friends
(
$
dater
)
{
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
insert
INTO
carnet
(
nom
,
PRENOM
,
naissance
,
ville
)
valoir
(
?
˓→
,
?
,
?
,
?
)
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
return
$
stmt-
>
execute
(
array
(
$
dater
[
'
nom
'
]
,
$
dater
[
'
PRENOM
'
]
,
˓→
$
dater
[
'
naissance
'
]
,
$
dater
[
'
ville
'
]
)
)
;
}
?
>
il
n
’
y
avoir
plus
qu
’
à
implémenter
un
pouvoir
et
surtout
à
tester
!
!
tester
un
api
REST
avec
votre
navigateur
ou
avec
curl
pour
tester
notre
api
nous
pouvoir
dans
un
premier
temps
utiliser
l
’
extension
Postman
de
chrome
ou
l
’
extension
RESTClient
pour
Firefox
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
avertissement
:
attention
à
bien
désactiver
le
proxys
dans
votre
navigateur
si
vous
vouloir
utiliser
ce
extension
.
pour
chrome
on
pouvoir
le
lancer
en
ligne
de
commande
avec
l
’
option
–
no-proxy-server
si
on
vouloir
un
solution
en
ligne
de
commande
,
curl
permettre
de
manipuler
le
différent
mé-
thodes
HTTP
.
le
syntaxe
n
’
être
pas
idéal
mais
on
pouvoir
tester
tout
le
méthode
HTTP
.
avertissement
:
si
vous
avoir
déclarer
du
variable
d
’
environnement
http_proxy
ou
https_proxy
,
il
valoir
mieux
la|le
désactiver
pour
que
curl
n
’
essayer
pas
de
passer
par
un
proxy
ce
qui
être
problématique
pour
certain
de
ce
requête
curl
:
unset
http_proxy
unset
https_proxy
pour
tester
un
GET
:
curl
-i
http
:
/
/
localhost
/
silex
/
api
/
v1
/
contact
/
ou
si
on
utiliser
le
module
user_dir
d
’
apache
.
curl
-i
http
:
/
/
localhost
/
~
login
/
silex
/
api
/
v1
/
contact
/
avertissement
:
attention
dans
le
cas
ou
on
utiliser
user_dir
,
le
réglage
pour
utiliser
tout
le
methodes
du
protocole
HTTP
/
pouvoir
s
’
avérer
délicat
.
notamment
le
fichier
/
etc
/
apache2
/
mods-available
/
dns-remplacer
devoir
être
modifier
comme
suivre
(
la|le
user_dir
être
dans
www
,
syntaxe
pour
apache
>
)
:
<
IfModule
mod_userdir.c
>
UserDir
www
UserDir
disabled
root
<
Directory
/
home
/
*
/
www
>
AllowOverride
All
opter
MultiViews
indexer
SymLinksIfOwnerMatch
<
Limit
GET
POST
pouvoir
DELETE
opter
>
Require
all
granted
<
/
Limit
>
<
LimitExcept
GET
POST
pouvoir
DELETE
opter
>
Require
all
denied
<
/
LimitExcept
>
<
/
Directory
>
<
/
IfModule
>
.
tester
un
api
REST
avec
votre
navigateur
ou
avec
curl
cours|cour
PHP
accélérer
,
version
et
il
falloir
aussi
dans
votre
dossier
sous
voter
user_dir
(
par
exemple
~
/
www
/
silex
)
avoir
le
.htaccess
suivre
:
<
Limit
GET
POST
DELETE
pouvoir
option
>
allow
from
all
<
/
Limit
>
FallbackResource
/
~
roza
/
silex
/
dns-remplacer
RewriteBase
/
~
roza
/
silex
dans
tout
le
cas
,
préciser
si
besoin
dans
votre
dns-remplacé
ou
un
fichier
équivalent
:
always_populate_raw_post_data
=
pour
tester
un
POST
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
POST
-d
'
{
`
`
nom
'
'
:
'
'
dalton
'
'
,
`
`
PRENOM
'
'
:
'
'
joe
'
'
,
`
`
naissance
'
'
:
'
'
'
'
,
˓→
'
'
ville
'
'
:
'
'
Orleans
'
'
}
'
http
:
/
/
localhost
/
silex
/
api
/
contact
test
un
pouvoir
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
pouvoir
-d
'
{
`
`
done
'
'
:
true
}
˓→
'
http
:
/
/
localhost
/
silex
/
api
/
contact
/
test
de
DELETE
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
`
`
DELETE
'
'
http
:
/
/
localhost
/
silex
/
api
/
contact
/
tester
un
api
tester
un
api
avec
Postman
C
’
être
le
moyen
le
plus
simple
pour
tester
un
api
.
on
l
’
installer
en
téléchargeant
l
’
App
de
Postman
(
https
:
/
/
dns-remplacer
/
apps
)
pour
votre
os
.
on
pouvoir
alors
se
constituer
du
collection
de
requête
HTTP
pour
tester
un
api
REST
spécifique
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
tester
un
api
REST
avec
Guzzle
le
test
de
notre
api
REST
avec
curl
être
peu
lisible
.
si
vous
préférer
disposer
d
’
un
batterie
de
test
en
PHP
,
vous
pouvoir
utiliser
un
librairie
spécialiser
comme
Guzzle
.
on
pouvoir
installer
ce
dernier
avec
composer
:
composer
require
guzzlehttp
/
guzzle
feuille
de
TD
Lic
pro
Web
et
mobile
année
—
TD1
—
TD2
—
TD3
feuille
de
TD
2ème
année
IUT
informatique
année
—
TD1
—
TP1
—
TD2
—
TP2
—
TP3
—
TD3
—
Git
init
feuille
de
TD
Lic
pro
Web
et
mobile
année
—
TD1
—
TD2
—
TD3
—
TD4
—
TD5
—
TD6
—
TD7
.
feuille
de
TD
Lic
pro
Web
et
mobile
cours|cour
PHP
accélérer
,
version
feuille
de
TD
CVRH
Tours
formation
de
juin
—
TD1
—
TD2
—
TD3
Alice
démarrer
avec
git
:
Paramétrage
et
initialisation
:
on
configurer
d
’
abord
son
paramètre
git
config
--
global
dns-remplacer
`
`
Alice
Torvalds
'
'
git
config
--
global
dns-remplacer
`
`
alice
@
dns-remplacer
'
'
création
d
’
un
dossier
local
versionné
mkdir
monprojet
cd
monprojet
git
init
si
vous
avoir
déja
du
contenu
:
git
add
.
création
d
’
un
dépot
«
monprojet
»
sur
gitlab
—
priver
—
public
—
ou
interne
à
gitlab
Bitbucket
(
https
:
/
/
dns-remplacer
/
)
offrir
également
le
possibilité
d
’
avoir
du
dépôt
priver
de
taille
limiter
.
Github
(
https
:
/
/
dns-remplacer
/
)
offrir
le
dépôt
public
et
faire
payer
le
dépôt
priver
.
connexion
entre
le
local
et
le
gitlab
:
Eventuellement
:
git
config
dns-remplacé
simple
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
git
remote
add
origin
https
:
/
/
dns-remplacer
/
alice
/
dns-remplacé
git
push
-u
origin
master
ou
simplement
:
git
push
par
le
suite
réalisation
d
’
un
fonctionnalité
par
Alice
:
—
Alice
prendre
un
chose
à
réaliser
et
implémentir
le
code
nécessaire
—
Alice
faire
le
test
et
vérifier
que
cela
marche
—
git
commettre
-am
«
message
de
commettre
»
Alice
pousser
son
master
sur
son
remote
:
git
push
-u
origin
master
Bob
travailler
avec
Alice
grâce
à
git
:
Bob
faire
d
’
abord
comme
Alice
pour
paramétrer
et
initialiser
son
dépôt
local
.
Bob
vérifier
qu
’
il
avoir
bien
remotes
:
—
le
sien
,
origin
qu
’
il
créer
au
besoin
en
faire
:
git
remote
add
origin
https
:
/
/
dns-remplacer
/
bob
/
dns-remplacer
—
celui
d
’
Alice
qu
’
il
ajouter
:
git
remote
add
alice
https
:
/
/
dns-remplacer
/
alice
/
dns-remplacer
—
il
taper
git
remote
-v
pour
vérifier
son
remotes
—
si
il
se
tromper
:
git
remote
remove
alice
Bob
récupérer
le
master
d
’
Alice
:
git
fetch
Alice
master
.
Bob
travailler
avec
Alice
grâce
à
git
:
cours|cour
PHP
accélérer
,
version
Bob
consulter
le
branche
local
correspondre
au
master
d
’
Alice
:
git
branch
-av
git
checkout
Alice
/
master
puis
vérifier
que
le
code
d
’
Alice
être
correct
Bob
revenir
dans
son
master
:
git
checkout
master
Bob
merge
le
travail
d
’
Alice
et
pousser
le
modifs
dans
son
dépôt
distant
:
git
merge
Alice
/
master
git
push
puis
detruit
le
branche
local
d
’
Alice
:
git
branch
-d
Alice
/
master
Alice
se
mettre
à
jour
:
—
ajouter
le
remote
de
Bob
—
fetche
le
master
de
Bob
pour
se
mettre
à
jour
:
git
fetch
Bob
master
—
fusionner
:
git
merge
Bob
/
master
Alice
travailler
sur
un
branche
git
:
Alice
devoir
par
exemple
intégrer
un
feature
de
connexion
à
un
base
de
donnée
.
elle
aller
pour
cela
créer
un
branche
bd
dédier
à
le
réalisation
de
ce
feature
et
se
placer
dedans
.
chapitre
.
table
du
matière
:
cours|cour
PHP
accélérer
,
version
création
et
choix
de
le
branche
:
git
checkout
-b
bd
elle
faire
ensuite
son
travail
,
le
tester
puis
:
git
commettre
-am
`
`
intégration
BD
'
'
Alice
pousser
son
branche
sur
son
remote
:
git
push
origin
bd
Bob
et
le
branche
d
’
Alice
:
Bob
récupérer
le
branche
d
’
Alice
:
git
fetch
Alice
bd
Bob
consulter
le
branche
d
’
Alice
:
S
’
il
le
souhaiter
,
Bob
consulter
le
liste
du
branche
disponible
puis
se
placer
dans
le
branche
d
’
Alice
pour
faire
un
petit
revue
du
code
de
son
collaborateur
.
.
.
git
branch
-av
git
checkout
Alice
/
bd
Bob
revenir
dans
son
branche
master
:
git
checkout
master
Bob
merge
le
branche
d
’
Alice
et
pousser
le
modifs
:
git
merge
Alice
/
bd
git
push
.
Bob
et
le
branche
d
’
Alice
:
cours|cour
PHP
accélérer
,
version
Alice
récupérer
le
dernier
version
du
master
:
Alice
fetche
le
master
de
Bob
pour
se
mettre
à
jour
:
git
fetch
Bob
master
git
merge
Bob
/
master
Alice
effacer
son
branche
bd
:
git
branch
-d
bd
chapitre
.
table
du
matière
:
chapitre
GIT
tout
bon
développeur
devoir
aujourd
’
hui
savoir
utiliser
un
système
de
gestion
de
version
pour
son
code
et
pour
collaborer
.
Git
être
aujourd
’
hui
le
plus
répandre
.
vous
trouver
à
le
fin
de
ce
cours|cour
un
rappel
du
principal
commande
git
pour
démarrer
:
GIT
start
et
quelque
commande
pour
travailler
à
plusieurs
sur
un
projet
avec
le
branche
git
:
GIT
branche
cours|cour
PHP
accélérer
,
version
chapitre
.
GIT
chapitrer
référence
—
Manuel
PHP
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
)
—
intro
JS
(
https
:
/
/
dns-remplacer
/
iut-orleans
/
informatique
/
intra
/
tuto
/
js-
initiation
/
dns-remplacer
#
/
le-langage-javascript
)
—
complément
JS
(
https
:
/
/
dns-remplacer
/
iut-orleans
/
informatique
/
intra
/
tuto
/
js-initiation
/
dns-remplacer
#
/
versions-de-javascript
)
cours|cour
PHP
accélérer
,
version
chapitre
.
référence
chapitre
index
et
recherche
—
genindex
—
search
cours|cour
PHP
accélérer
,
version
chapitre
.
index
et
recherche
index
Symbols
csrf
,
=
=
,
CURL
,
,
=
=
=
,
cvrh
,
$
_GET
[
]
,
,
D
$
_GLOBALS
[
]
,
,
$
_POST
[
]
,
,
DataBase
,
$
_SERVER
[
]
,
DB
,
,
define
,
,
DELETE
,
,
,
,
2eme
année
,
directive
,
dirname
,
Numbers
dom
,
,
E
,
echo
,
à
ensemble
,
array_walk
,
equals
,
associatif
,
ereg
(
)
,
autoload
,
eregi
(
)
,
autoloader
,
eval
,
B
F
base
,
filtrage
,
BD
,
,
filtrage
,
,
bundles
,
foreach
,
formulaire
,
C
G
cacher
,
chaine
,
génération
,
clef
,
GET
,
,
,
,
collection
,
gettype
,
composer
,
GUMP
,
concaténation
,
GUZZLE
,
constructeur
,
heure
controleur
,
Cookies
,
hidden
,
cours|cour
PHP
accélérer
,
version
HTTP
,
,
,
,
,
PHPUnit
,
Http
,
pile
,
HttpFoundation
,
portée
,
POST
,
,
,
,
I
PreparedStatement
,
imbrication
,
print
,
include
,
print_r
,
include_once
,
pouvoir
,
,
,
,
injection
SQL
,
Q
installation
,
,
interpréteur
,
queue
,
is_array
,
R
is_double
,
is_int
,
recherche
,
is_long
,
request
,
is_string
,
require
,
IUT
,
require_once
,
response
,
L
REST
,
,
,
,
Lamp
,
route
,
Lerdorf
,
route
,
licence
professionnel
,
S
M
sécurité
,
,
méthode
,
sax
,
magic
quotes
,
session
,
Mamp
,
set
,
modele
,
settype
,
mvc
,
,
,
SimpleXML
,
MySQL
,
sort
,
SQL
,
N
Stack
,
Namespace
,
string
,
stristr
(
)
,
O
strlen
(
)
,
objet
,
strstr
(
)
,
option
,
suppression
,
Orleans
,
symfony
,
P
T
pair
,
tableau
,
,
patch
,
td
,
PDO
,
,
,
TDD
,
persistant
,
template
,
,
PHP
,
,
,
,
test
,
dns-remplacé
,
test
,
,
,
PHP5
,
test
,
PHP7
,
time
,
phpinfo
,
timestamp
,
index
courir
PHP
accélérer
,
version
toString
,
Tours
,
transaction
,
twig
,
type
,
U
URL
,
user-agent
,
useragent
,
V
valeur
,
validation
,
,
variable
,
,
variable
PHP
,
vue
,
,
W
Wamp
,
Web
,
X
Xampp
,
XML
,
XMLReader
,
XMLWriter
,
z
zend
,
index
document
Outline
ce
cours|cour
au
format
epub
ce
cours|cour
au
format
pdf
table
du
matière
:
caractéristique
principal
fonctionnement
historique
installation
PHP
configuration
PHP
exemple
simple
imbrication
de
code
HTML
et
PHP
un
formulaire
HTML
et
son
réponse
en
PHP
le
variable
en
PHP
le
chaîne
en
PHP
le
typage
en
PHP
quelque
particularité
de
PHP
le
tableau
en
PHP
le
tableau
prédéfinir
de
PHP
L
’
inclusion
de
fichier
externe
le
objet
en
PHP
le
collection
en
PHP
connexion
au
base
de
donnée
depuis
PHP
requêter
préparer
en
PHP
complément
sur
PDO
-
sécurité
filtrage
en
PHP
gestion
du
transaction
avec
PDO
connexion
persistant
avec
PDO
validation
et
contrôle
d
’
entrée
avec
GUMP
Http
et
le
conservation
d
’
information
sur
le
client
manipuler
XML
avec
PHP
architecturer
de
type
MVC
avec
PHP
Templates
Twig
en
PHP
composer
,
Symfony
et
Flex
tester
un
application
PHP
-
TDD
mettre
en
place
un
Web
service
REST
exemple
de
service
REST
avec
PHP
tester
un
api
REST
avec
votre
navigateur
ou
avec
curl
tester
un
api
feuille
de
TD
Lic
pro
Web
et
mobile
feuille
de
TD
2ème
année
IUT
informatique
feuille
de
TD
Lic
pro
Web
et
mobile
feuille
de
TD
CVRH
Tours
Alice
démarrer
avec
git
:
Bob
travailler
avec
Alice
grâce
à
git
:
Alice
se
mettre
à
jour
:
Alice
travailler
sur
un
branche
git
:
Bob
et
le
branche
d
’
Alice
:
Alice
récupérer
le
dernier
version
du
master
:
GIT
référence
index
et
recherche
index
