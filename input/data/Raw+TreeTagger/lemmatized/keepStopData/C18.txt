PHP
(
et
MYSQL
)
introduction

HTML
:
page
destiner
à
être
publier
sur
Internet
texte
à
afficher
+
instruction
de
mise
en
page

pas
d
’
instruction
de
calcul
ou
de
traitement
conditionnel


du
site
de
plus
en
plus
riche
en
information
nécessiter
croissant
d
’
améliorer
le
contenu
du
site

mettre
à
jour
manuel
trop
complexe




exemple
:
modifier
la|le
entêter
sur
plusieurs
page
!
besoin
de
réponse
spécifique
lier
à
un
BD
par
exemple
passage
de
site
statique
à
du
site
dynamique
Web
dynamique
–
coter
client

traiter
par
le
navigateur
:

résultat
variable
en
fonction
du
navigateur

nécessiter
de
test
important

indépendant

pas

du
serveur
de
rechargement
de
le
page
,
tout
être
faire
en
local
confiance
:

source
du
programme
disponible

donnée
envoyer
au
serveur
pas
fiable

base
de
donnée
stocker
chez
le
client
?
Web
dynamique
–
coter
serveur

le
interprétation
être
réaliser
par
le
serveur
:

indépendant
de
le
machine
et
du
navigateur

`
`
compatible
'
'
avec
tout
le
navigateur

le

le

échange
ne
concerner
que
du
HTML
(
ou
Json
ou
autre
)
source
être
sur
le
serveur
donc
invisible
besoin
de
échange
entre
le
navigateur
et
le
serveur

rechargement

ou
ajax
...
de
le
page
à
chaque
modification
Web
dynamique
–
client
ou
serveur

il
falloir
le
deux
!

script
côté
client
(
Javascript
)
:
calcul
et
traitement
simple

mettre
à
jour
de
le
page
web
sans
rechargement
(
ajax
)


script
côté
serveur
(
Php
ou
autre
)
:
calcul
,
traitement
plus
conséquent

requête
vers
un
base
de
donnée

opération
sécuriser

le
langage
Php
-
histoire



PHP
:
Hypertext
PreProcessor
le
premier
version
de
PHP
(
Personal
home
page
)
sortir
en
le
version
actuel
être
sortir
en
:

le

version
ne
être
plus
maintenir
depuis
août
.
environ
%
du
site
web
dynamique
utiliser
php
.
le
langage
Php


langage
pour
le
création
d
’
application
Web
exécution
coter
serveur

indépendant
de
le
plate-forme
utiliser

facile
à
combiner
avec
un
serveur
Web
et
un
BD

logiciel



tout
en
un
(
WampServer
,
EasyPhp
,
...
)
.
gratuit
,
coder
source
disponible
Ecriture
de
script
simple
inclusion
direct
de
Php
dans
du
HTML
le
langage
Php

programme
se
exécuter
côté
serveur
Web

extension
.php
pour
le
page
PHP

fichier
pouvoir
aussi
contenir
du
HTML

le
fichier
.php
être
stocker
sur
le
serveur

désigner
par
un
URL
:
http
:
/
/
dns-remplacer
/
dns-remplacer

le
chargement
de
le
URL
provoquer
le
exécution
côté
serveur

le
script
Php
aller
généralement
créer
du
HTML
exemple

on
vouloir
créer
le
page
web
ci-dessous

pour
un
nombre
quelconque
de
valeur
(
venir
de
un
formulaire
par
exemple
)
.
<
html
>
<
body
>
:
<
br
/
>
:
<
br
/
>
:
<
br
/
>
<
/
body
>
<
/
html
>
version
Javascript

insertion
de
javascript
avec
le
balise
<
script
>
boucler
for
classique

affichage
du
contenu
via
dns-remplacé

concaténation
de
chaîne
avec
le
signe
+


exécuter
par
le
navigateur
<
html
>
<
body
>
<
script
type
=
'
'
text
/
javascript
'
'
>
for
(
var
i
=
;
i
<
=
;
i++
)
dns-remplacer
(
i+
'
'
:
`
`
+i
*
i+
'
'
<
br
/
>
'
'
)
;
<
/
script
>
<
/
body
>
<
/
html
>
version
Php

insertion
de
Php
avec
le
balise
<
?
php
boucle
for
classique

affichage
du
contenu
via
echo

concaténation
de
chaîne
avec
le
signe


exécuter
par
le
serveur
puis
envoyer
au
navigateur
<
html
>
<
body
>
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
echo
$
i
.
'
'
:
`
`
.
(
$
i
*
$
i
)
.
`
`
<
br
/
>
'
'
;
?
>
<
/
body
>
<
/
html
>
différence
entre
Javascript
et
Php

Javascript
:
le
navigateur
demander
le
fichier
html

le
fichier
html
(
contenir
du
javascript
)
être
envoyer

le
navigateur
exécuter
le
javascript

le
affichage
être
faire
de
manière
dynamique


Php
:
le
navigateur
demander
le
fichier
php

le
serveur
exécuter
le
code
php
et
envoyer
le
résultat

le
page
envoyer
au
navigateur
être
afficher

coder
Php
–
autre
version

seul
le
partie
purement
dynamique
être
faire
en
Php
tout
le
reste
être
du
html
de
base

pas
forcément
très
lisible

<
html
>
<
body
>
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
?
>
<
?
php
echo
$
i
?
>
:
<
?
php
echo
$
i
*
$
i
;
?
>
<
br
/
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
coder
Php
–
autre
version

tout
le
fichier
html
être
créer
en
Php
:

syntaxe
assez
lourd
<
?
php
echo
`
`
<
html
>
\n
'
'
;
echo
`
`
<
body
>
\n
'
'
;
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
$
i
.
'
'
:
`
`
.
(
$
i
*
$
i
)
.
`
`
<
br
/
>
\n
'
'
;
}
echo
`
`
<
/
body
>
\n
'
'
;
echo
`
`
<
/
html
>
\n
'
'
;
?
>
PHP
-
syntaxe
variable
variable

un
variable
être
toujours
précéder
de
$


type
:


$
i
être
un
variable
qui
se
appeler
i
entier
,
réel
,
chaîne
de
caractère
,
objet
pas
de
déclaration
explicite
,
le
affectation
de
un
valeur
suffire


affectation
par
valeur
:
$
i
=
affectation
par
(
référence
)
variable
:
$
j
=
&
$
i


changement
de
type
automatique
:


le
modification
de
$
i
modifier
$
j
(
comme
le
pointeur
en
C
)
$
compteur
=
'
'
premier
'
'
;
valeur
par
défaut
avant
le
affectation

attention
si
on
essayer
de
lire
son
contenu
!
variable

variable
local


visible
uniquement
à
l
’
intérieur
d
’
un
contexte
d
’
utilisation
variable
global


visible
dans
tout
le
script
utilisation
de
l
’
instruction
`
`
global
'
'
pour
accéder
à
un
variable
global
dans
du
contexte
local
$
var
=
;
function
test
(
)
{
global
$
var
;
echo
$
var
;
}
chaîne
de
caractère

création
/
affectation
entre
guillemet


concaténation
avec
le
signe
.


$
test
=
'
'
avoir
'
'
;
$
test
=
'
'
bonjour
'
'
.
`
`
au
revoir
'
'
;
substitution
possible
de
variable
à
le
intérieur
de
un
chaîne
:


'
'
x
$
test
x
'
'
être
similaire
à
`
`
x
`
`
.
$
test
.
'
'
x
'
'
pas
de
substitution
avec
du
apostrophe


'
x
$
test
x
'
;
/
/
`
`
x
$
test
x
'
'
encodage
du
caractère
spécial
obligatoire
:

\
$
\\
\n
\t
\
'
'
...
création
de
variable
dynamique

possibilité
de
créer
un
variable
dynamique
:

création
à
partir
du
contenu
de
un
autre
variable
.
$
var
=
'
'
test
'
'
;
$
$
var
=
'
'
test2
'
'
;
/
/
similaire
à
$
test
=
'
'
test2
'
'
;
echo
`
`
$
var
$
test
$
{
$
var
}
'
'
;
/
/
affiche
`
`
test
test2
test2
'
'
/
/
similaire
avec
du
tableau
$
nom_variable
=
array
(
`
`
val0
'
'
,
`
`
val1
'
'
)
;
$
{
$
nom_variable
[
]
}
=
`
`
x
'
'
;
opération
sur
le
chaîne

longueur
de
un
chaîne
strlen

strlen
(
$
str
)

comparaison
=
=

$
x

=
=
$
y
concaténation
.

$
x
.
$
y

nombreux
fonction
de
manipulation
disponible
fonction
sur
le
chaîne

afficher
un
chaîne
de
caractère
:


retourner
un
morceau
de
un
chaîne
:
substr
(
$
chaine
,
$
debut
,
$
longueur
)



$
debut
pouvoir
être
négatif
:
en
partir
de
le
fin
$
longueur
être
facultatif
:
tout
le
fin
de
le
chaîne
être
retourner
couper
un
chaîne
en
morceau
avec
un
délimiteur
:


echo
$
chaine
;
...
$
tableau
=
explode
(
$
delimiteur
,
$
chaine
)
;
instruction
instruction
conditionnel

if
then
else

définition
spécial
pour
le
else
if
(
pas
obligatoire
)
if
(
cond
)
{
...
}
elseif
(
cond
)
{
...
}
else
{
...
}
/
/
version
court
:
(
condition
)
?
instructionSiVrai
:
instructionSiFaux
;
instruction
conditionnel

switch
(
...
)
{
case
...
:
...
;
}
switch
(
expression
)
{
case
`
`
'
'
:
...
;
break
;
case
`
`
'
'
:
...
;
break
;
case
`
`
'
'
:
...
;
break
;
default
:
...
}
boucle

boucle
for
:

for

(
initialisation
;
condition
;
increment
)
{
...
}
boucle
while
:

while
(
condition
)
{
...
}

do
{
...
}
while
(
condition
)
;
instruction
conditionnel

saut
inconditionnel


arrêt
inconditionnel


continuer
:
terminer
le
itération
courant
de
le
boucle
break
:
terminer
le
boucle
complètement
arrêt
de
exécution
du
script

exit
:
terminer
le
script
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
if
(
$
i
=
=
)
continu
;
echo
$
i
.
`
`
<
br
/
>
'
'
;
}
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
if
(
$
i
=
=
)
break
;
echo
$
i
.
`
`
<
br
/
>
'
'
;
}
/
/
afficher
le
valeur
sauf
/
/
affiche
jusqu
'
à
(
exclure
)
tableau
le
tableau

création
à
l
’
aider
de
le
fonction
array
(
)

$
tableau

=
array
(
,
`
`
deux
'
'
,
)
;
tableau
à
un
dimension

le
élément
pouvoir
être
de
différent
type

L
’
index
d
’
un
tableau
commencer
à

fonction
:

count
(
)
pour
avoir
le
nombre
d
’
élément
d
’
un
tableau
tableau
simple

association
numéro
-
valeur
/
/
création
du
tableau
$
tableau
=
array
(
valeur0
,
valeur1
,
...
,
valeurN
)
;
/
/
affectation
de
un
élément
$
tableau
[
indice
]
=
valeur
;
/
/
récupération
de
un
élément
$
variable
=
$
tableau
[
indice
]
;
/
/
parcours
version
for
(
$
i
=
;
$
i
<
count
(
$
tableau
)
;
$
i++
)
echo
$
i
.
'
'
`
`
.
$
tableau
[
$
i
]
.
`
`
<
br
/
>
'
'
;
/
/
parcours
version
foreach
(
$
tableau
avoir
$
valeur
)
echo
$
valeur
.
`
`
<
br
/
>
'
'
;
tableau
associatif

association
clé
de
index
-
valeur
/
/
création
du
tableau
$
tableau
=
array
(
cle0
=
>
val0
,
cle1
=
>
val1
,
...
,
cleN
=
>
valN
)
;
/
/
affectation
de
un
élément
$
tableau
[
`
`
cle
'
'
]
=
valeur
;
/
/
récupération
de
un
élément
$
variable
=
$
tableau
[
`
`
cle
'
'
]
;
/
/
parcours
version
foreach
(
$
tableau
avoir
$
cle
=
>
$
valeur
)
echo
$
cle
.
'
'
`
`
.
$
valeur
.
`
`
<
br
/
>
;
/
/
parcours
version
reset
(
$
tableau
)
;
while
(
list
(
$
cle
,
$
valeur
)
=
each
(
$
tableau
)
)
echo
$
cle
.
'
'
`
`
.
$
valeur
.
`
`
<
br
/
>
;
tableau
multidimensionnel

pas
de
méthode
de
création
natif
:

on
imbriquer
du
tableau
.
/
/
création
de
un
tableau
à
deux
dimension
$
tab1
=
array
(
Val0
,
Val1
,
...
,
ValN
)
;
$
tab2
=
array
(
Val0
,
Val1
,
...
,
ValN
)
;
$
tableau
=
array
(
$
tab1
,
$
tab2
)
;
/
/
affectation
de
un
élément
$
tableau
[
indice
]
[
indice
]
=
$
variable
;
/
/
récupération
de
un
élément
$
variable
=
$
tableau
[
indice
]
[
indice
]
;
/
/
parcours
for
(
$
i
=
;
$
i
<
count
(
$
tableau
)
;
$
i++
)
for
(
$
j
=
;
$
j
<
count
(
$
tableau
[
$
i
]
)
;
$
j++
)
echo
$
i
.
'
'
`
`
.
$
j
.
'
'
`
`
.
$
tableau
[
$
i
]
[
$
j
]
.
`
`
<
br
/
>
'
'
;
fonction
sur
le
tableau

taille
de
un
tableau
:


compter
le
nombre
de
occurrence
du
valeur
de
un
tableau
:



$
tab2
=
array_map
(
`
`
fonction
'
'
,
$
tab
)
;
filtrage
par
un
fonction
(
supprimer
le
élément
ne
vérifier
pas
le
critère
)
:


sort
(
$
tab
)
;
/
/
selon
le
valeur
ksort
(
$
tab
)
;
/
/
selon
le
clef
Mappage
par
un
fonction
(
appliquer
le
fonction
à
tout
le
élément
)
:


$
tab2
=
array_count_values
(
$
tab
)
;
tri
:


count
(
)
$
tab2
=
array_filter
(
$
tab
,
`
`
fonction
'
'
)
intervertir
le
clef
et
valeur
:

$
tab2
=
array_flip
(
$
tab
)
;
fonction
fonction

pas
de
typage
argument

valeur
de
retour


récursivité
possible
<
?
php
/
/
définition
de
le
fonction
factoriel
function
factoriel
(
$
n
)
{
if
(
$
n
<
)
return
;
else
return
$
n
*
factoriel
(
$
n-1
)
;
}
/
/
appel
de
le
fonction
et
afficahage
du
résultat
echo
factoriel
(
)
;
?
>
fonction

valeur
par
défaut
possible
pour
le
argument




tout
le
argument
pouvoir
avoir
du
valeur
par
défaut
function
racine
(
$
x
,
$
racine
=
)
{
}
appel
:
racine
(
$
avoir
,
$
b
)
ou
racine
(
$
avoir
)
valeur
par
défaut
uniquement
pour
le
dernier
argument

racine
(
$
x
=
,
$
degre
)
impossible
/
/
si
un
seul
argument
alors
$
degre
valoir
par
défaut
function
racine
(
$
x
,
$
degre
=
)
{
return
pow
(
$
x
,
/
$
degre
)
;
}
racine
(
,
)
;
/
/
retourner
le
racine
cubique
de
racine
(
)
;
/
/
retourner
le
racine
carrer
de
fonction

nombre
d
’
argument
inconnu
:

func_num_args
(
)
:
nombre
d
’
argument

func_get_arg
(
$
i
)
:
argument
i
.

numéroter
à
partir
de
/
/
fonction
calculer
le
produit
de
tout
le
argument
function
produire
(
)
{
$
prod
=
;
for
(
$
i
=
;
$
i
<
func_num_args
(
)
;
$
i++
)
$
prod
*
=
func_get_arg
(
$
i
)
;
return
$
prod
;
}
echo
produire
(
,
,
,
,
,
)
;
fonction

passage
de
paramètre
par
valeur
:


utiliser
un
copie
du
paramètre
de
appel
.
passage
de
paramètre
par
référence
:


utiliser
directement
le
paramètre
de
appel
(
donc
modifiable
)
.
passage
de
paramètre
avec
&
function
double
(
$
val
)
{
$
val
*
=
;
return
$
val
;
}
$
x
=
;
$
y
=
double
(
$
x
)
;
/
/
y
=
x
=
$
y
=
double
(
&
$
x
)
;
/
/
y
=
x
=
variable
global
et
statique

Static
permettre
de
conserver
un
variable
dans
un
fonction
$
v
=
;
function
test
(
)
{
global
$
v
;
/
/
variable
global
static
$
x
=
;
/
/
variable
statique
$
x+
=
$
v
;
echo
$
x
.
`
`
<
br
/
>
'
'
;
}
test
(
)
;
/
/
affiche
test
(
)
;
/
/
affiche
appel
dynamique

similaire
au
variable
dynamique
function
bonjour
(
)
{
echo
`
`
bonjour
<
br
/
>
'
'
;
}
function
bonsoir
(
)
{
echo
`
`
bonsoir
<
br
/
>
'
'
;
}
/
/
création
de
un
variable
contenir
le
nom
de
un
fonction
$
salut
=
(
date
(
`
`
heure
'
'
)
<
=
)
?
`
`
bonjour
'
'
:
'
'
bonsoir
'
'
;
$
salut
(
)
;
fonction
de
fonction

vérifier
le
existence
de
un
fonction
:


retourner
le
liste
du
fonction
défini
:


$
tableau
=
get_defined_functions
(
)
;
enregistrer
un
fonction
à
exécuter
à
le
fin
du
script
:


function_exists
(
`
`
fonction
'
'
)
;
register_shutdown_function
(
`
`
fonction
'
'
)
;
...
fonction
utile

Header
:

permettre
de
modifier
la|le
entêter
du
protocole
http

utilisation
principal
:
redirection
vers
un
autre
page
if
(
isConnected
(
$
user
)
)
{
header
(
`
`
location
:
dns-remplacer
'
'
)
;
}
else
{
header
(
`
`
location
:
dns-remplacer
'
'
)
;
}
le
formulaire
exploitation
d
’
un
formulaire





accès
à
le
page
du
formulaire
remplissage
/
modification
du
champ
envoi
du
formulaire
(
submit
)
récupération
du
formulaire
soumettre
traitement
du
formulaire
calcul

transformation

accès
au
BD
...


client
envoi
de
le
réponse
au
client
serveur
récupération
du
paramètre

le
paramètre
être
récupérer
dans
un
tableau
:

$
_POST
[
`
`
nom
'
'
]
si
le
méthode
d
’
envoi
être
POST

$
_GET
[
`
`
nom
'
'
]
si
le
méthode
d
’
envoi
être
GET

<
form
method
=
'
'
POST
'
'
action
=
'
'
...
'
'
>

exemple

dans
le
formulaire
<
input
name
=
'
'
nom
'
'
>

on
récupérer
le
contenu
en
php
avec
:

$
_POST
[
`
`
nom
'
'
]

$
_GET
[
`
`
nom
'
'
]
pour
continuer

le
plus
simple
pour
comprendre
:

utiliser
le
méthode
GET
pour
passer
le
argument

regarder
le
URL
appelé

http
:
/
/
dns-remplacer
/
dns-remplacer
?
champ
=
valeur

le
différent
paramètre
envoyer
et
leur
valeur
être
visible

ici
$
_GET
[
`
`
champ
'
'
]
valoir
valeur

puis

utiliser
POST
un
fois
que
on
avoir
comprendre
spécificité
selon
le
type
:

le
case
à
cocher
être
envoyer
sous
forme
de
tableau
un
exemple
<
form
method
=
'
'
GET
'
'
action
=
'
'
dns-remplacer
'
'
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Champ1
'
'
value
=
'
'
texte
'
'
/
>
<
br
/
>
<
textarea
name
=
'
'
Champ2
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
texte
<
/
textarea
>
<
br
/
>
<
select
name
=
'
'
Champ3
'
'
>
<
option
valoir
=
'
'
Option_1
'
'
>
Option_1
<
/
option
>
<
option
valoir
=
'
'
Option_2
'
'
selected
=
'
'
selected
'
'
>
Option_2
<
/
option
>
<
/
select
>
<
br
/
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
Champ4
[
]
'
'
value
=
'
'
Case_1
'
'
checked
=
'
'
checked
'
'
>
caser
<
br
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
Champ4
[
]
'
'
value
=
'
'
Case_2
'
'
checked
=
'
'
checked
'
'
>
caser
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_1
'
'
>
radio
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_2
'
'
>
radio
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_3
'
'
>
radio
<
br
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
soumission
'
'
value
=
'
'
soumettre
'
'
>
<
/
form
>
dns-remplacer
?
Champ1
=
texte
&
Champ2
=
texte
&
Champ3
=
Option_2
&
Champ4
[
]
=
Case_1
&
Champ4
[
]
=
Case_2
&
champ
=
Case_2
&
soumission
=
soumettre
un
exemple

récupération
avec
$
_GET

vérification
de
le
existence
de
un
variable
:


isset
(
var
)
attention
au
contenu
du
chose
reçu

nombreux
faille
si
on
ne
faire
pas
attention
!
/
/
affichage
de
tout
le
champ
recevoir
via
le
formulaire
$
resultat
=
$
_GET
[
`
`
Champ1
'
'
]
.
`
`
<
br
>
'
'
;
$
resultat
.
=
$
_GET
[
`
`
Champ2
'
'
]
.
`
`
<
br
>
'
'
;
$
resultat
.
=
$
_GET
[
`
`
Champ3
'
'
]
.
`
`
<
br
>
'
'
;
for
(
$
i
=
;
$
i
<
count
(
$
_GET
[
`
`
Champ4
'
'
]
)
;
$
i++
)
{
$
resultat
.
=
$
_GET
[
`
`
Champ4
'
'
]
[
$
i
]
.
`
`
<
br
>
'
'
;
}
if
(
isset
(
$
_GET
[
`
`
Champ5
'
'
]
)
)
$
resultat
.
=
$
_GET
[
`
`
Champ5
'
'
]
.
`
`
<
br
>
'
'
;
echo
$
resultat
;
fonctionnalité
supplémentaire
date
et
heure

retourner
le
date
courant
dans
un
chaîne
de
caractère
:
$
chainer
=
date
(
format
[
,
nombre
]
)
;

$
chaine
=
date
(
`
`
y
/
m
/
d
'
'
)
;
retourne
/
/


idem
pour
un
tableau
associatif
:


$
tableau
=
getdate
(
[
nombre
]
)
;
vérification
de
le
validité
de
un
date
:

checkdate
(
mois|moi
,
jour
,
année
)
;
le
cookies

écrire
du
cookies
:

fonction
setcookie
(
`
`
PremierCookie
'
'
,
`
`
salut
'
'
,
time
(
)
*
*
)
;




timestamp
en
seconde|second
(
différent
de
Javascript
)
à
exécuter
avant
tout
autre
envoi
vers
le
serveur
(
envoyer
dans
la|le
entêter
)
cookie
non
visible
avant
le
prochain
chargement
de
un
page
lecture
:

(
$
_COOKIE
[
`
`
PremierCookie
'
'
]
setcookie
(
`
`
PremierCookie
'
'
,
`
`
salut
'
'
,
time
(
)
*
*
)
;
if
(
!
isset
(
$
_COOKIE
[
`
`
PremierCookie
'
'
]
)
)
{
echo
`
`
cookie
non
définir
<
br
/
>
'
'
;
}
else
{
echo
$
_COOKIE
[
`
`
PremierCookie
'
'
]
.
`
`
<
br
/
>
'
'
;
}
le
session

objectif
:
garder
du
donnée
de
page
en
page
.

session_start
(
)




créer
un
nouveau
session
ou
raviver
un
session
déjà
existant
$
_SESSION
[
`
`
nom
'
'
]
=
valeur
permettre
de
créer
un
variable
de
session
session_destroy
(
)
détruire
le
session
en
cours|cour
session_start
(
)
;
$
_SESSION
[
`
`
ma_variable
'
'
]
=
;
session
–
exemple
<
html
>
<
body
>
<
form
method
=
'
'
post
'
'
action
=
'
'
dns-remplacer
'
'
>
<
tabler
border
=
'
'
'
'
>
<
tr
>
<
td
>
nom
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
size
=
'
'
'
'
value
=
'
'
x
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
prénom
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Prenom
'
'
size
=
'
'
'
'
value
=
'
'
y
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
eMail
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Email
'
'
size
=
'
'
'
'
value
=
'
'
z
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
colspan
=
'
'
'
'
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
soumettre
'
'
value
=
'
'
envoyer
'
'
>
<
/
td
>
<
/
tr
>
<
/
table
>
<
/
form
>
<
/
body
>
<
/
html
>
session
–
exemple
`
`
dns-remplacer
'
'
<
?
php
session_start
(
)
;
$
_SESSION
[
`
`
nom
'
'
]
=
$
_POST
[
`
`
nom
'
'
]
;
$
_SESSION
[
`
`
prenom
'
'
]
=
$
_POST
[
`
`
Prenom
'
'
]
;
$
_SESSION
[
`
`
email
'
'
]
=
$
_POST
[
`
`
Email
'
'
]
;
?
>
session
–
exemple
`
`
dns-remplacer
'
'
<
html
>
<
body
>
<
?
php
session_start
(
)
;
echo
`
`
identifier
:
'
'
.session_id
(
)
.
`
`
<
br
/
>
'
'
;
echo
`
`
nom
de
le
session
:
'
'
.session_name
(
)
.
`
`
<
br
/
>
'
'
;
echo
`
`
nom
:
`
`
.
$
_SESSION
[
`
`
nom
'
'
]
.
`
`
<
br
>
'
'
;
echo
`
`
prénom
:
`
`
.
$
_SESSION
[
`
`
prenom
'
'
]
.
`
`
<
br
>
'
'
;
echo
`
`
mail
:
`
`
.
$
_SESSION
[
`
`
email
'
'
]
.
`
`
<
br
>
'
'
;
session_destroy
(
)
;
?
>
<
/
body
>
<
/
html
>
envoyer
du
email

le
fonction
mail
:
mail
(
$
recipient
,
$
subject
,
$
message
[
,
$
headers
,
$
params
]
)
;

nécessiter
un
serveur
mail
accessible
sur
le
serveur

<
?
php
$
dest
=
`
`
moi
<
moi
@
dns-remplacer
>
,
toi
<
toi
@
dns-remplacer
'
'
;
$
subject
=
`
`
test
'
'
;
$
content
=
`
`
bonjour
,
\n
'
'
;
$
content
.
=
`
`
ceci
être
un
message
de
test\n
'
'
;
$
content
.
=
`
`
moi
'
'
;
$
headers
=
`
`
From
:
moi
<
moi
@
dns-remplacer
>
\n
'
'
;
$
headers
.
=
`
`
Content-Type
:
text
/
html
;
charset
=
iso-8859-1\n
'
'
;
$
headers
.
=
`
`
Cc
:
lui
@
dns-remplacer
\n
'
'
;
mail
(
$
dest
,
$
subject
,
$
content
,
$
headers
)
;
?
>
créer
autre
chose
que
du
HTML

Php
pouvoir
créer
autre
chose
que
du
HTML

image
:

grand
choix
de
format
,
comme
GIF
,
PNG
,
JPEG
,
WBMP
...
fichier
pdf
(
librairie
tcpdf
)
,
csv
,
word
,
excel
,
...

aucun
limitation
,
il
suffire
de
savoir
comment
modifier
la|le
entêter
(
header
)
puis
afficher
le
contenu
...

<
?
php
header
(
`
`
Content-type
:
image
/
png
'
'
)
;
$
im
=
imagecreatefrompng
(
`
`
dns-remplacer
'
'
)
;
$
im
=
imagerotate
(
$
im
,
,
)
;
imagepng
(
$
im
)
;
?
>
PHP
et
MYSQL
base
de
donnée

présentation
:
HTML
,
Javascript

navigateur
:
IE
,
Firefox
,
chrome
,
...


traitement
/
création
de
le
page
:
PHP
,
ASP
,
JSP
,
servlet
,
CGI
,
...

serveur
Web
apache
,
IIS
,
...


donnée
:
table
SQL

serveur
BD
Access
,
oracle
,
MySQL
,
PostGreSQL
,
...

base
de
donnée

PHP
permettre
de
travailler
nativement
avec
le
plupart
du
SGBDR



trois
fonction
être
essentiel
:




Mysql
,
oracle
,
Sybase
,
Microsoft
SQL
Server
,
PostgreSQL
,
...
dans
le
autre
cas
on
pouvoir
utiliser
du
driver
spécifique
connexion
au
serveur
exécution
de
le
requête
SQL
gestion
du
résultat
on
aller
voir
le
fonctionnement
avec
le
`
`
PHP
dater
Objects
'
'
:

indépendant
(
partiellement
)
du
SGBD
utiliser
.
MySQL
et
Php
–
connexion

connexion
=
création
de
un
objet
PDO
:




adresse
de
le
base
et
nom
de
le
table
nom
de
utilisateur
mot
de
passe
déconnexion
:
destruction
de
le
objet
try
{
/
/
ouverture
de
le
connexion
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
port
=
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
...
/
/
fermeture
de
le
connexion
$
dbh
=
null
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
MySQL
et
Php
–
requête

avec
:
le
méthode
query
pour
le
recherche

le
méthode
exec
pour
le
modification


libération
du
ressource
:

closeCursor
(
)
;
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
'
)
;
$
nb_modifs
=
$
dbh-
>
exec
(
'
UPDATE
`
test
`
set
test_id
=
'
)
;
...
$
reponse-
>
closeCursor
(
)
;
$
dbh
=
null
;
MySQL
et
Php
–
traitement

nombre
de
réponse
:


rowCount
(
)
traitement
du
réponse
:
fetch
(
)
:
retourner
le
résultat
un
par
un

fetchAll
(
)
:
retourner
un
tableau
avec
tout
le
résultat

if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
$
donnees
[
'
test_id
'
]
.
'
'
.
$
donnees
[
'
test_val
'
]
.
'
<
br
/
>
'
;
}
}
else
{
echo
`
`
aucun
résultat
<
br
/
>
'
'
;
}
MySQL
et
Php
–
un
exemple
<
html
>
<
body
>
<
ul
>
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
$
id
=
$
_POST
[
'
id
'
]
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
$
id
)
;
if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
`
`
<
li
>
'
'
.
$
donnees
[
'
test_id
'
]
.
'
:
'
.
$
donnees
[
'
test_val
'
]
.
'
<
/
li
>
'
;
}
}
else
{
echo
`
`
<
li
>
aucun
résultat
<
/
li
>
'
'
;
}
$
reponse-
>
closeCursor
(
)
;
$
dbh
=
null
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
?
>
<
/
ul
>
<
/
body
>
<
/
html
>
sécurité

que
se
passe-t-il
si
:

$
id
=
`
`
'
'

$
id
=
`
`
or
'
'

$
id
=
`
`
;
drop
table
`
test
`
;
'
'
$
id
=
$
_POST
[
'
id
'
]
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
$
id
)
;
select
*
FROM
`
test
`
WHERE
test_id
=
select
*
FROM
`
test
`
WHERE
test_id
=
or
select
*
FROM
`
test
`
WHERE
test_id
=
;
drop
table
`
test
`
;
requêter
avancer

préparation
de
requête
générique
:

prepare
(
$
query
)
;

execute
avec
argument

plus
sécuriser
que
le
version
précédent
,
mettre
en
cache
,
plus
portable
...
en
clair
à
utiliser
$
req
=
$
dbh-
>
prepare
(
'
select
test_id
,
test_val
FROM
`
test
`
WHERE
test_id
=
?
AND
test_val
=
?
'
)
;
$
req-
>
execute
(
array
(
$
x
,
$
y
)
)
;
remarque
final


limiter
au
maximum
le
droit
de
le
utilisateur
.
le
donnée
transmettre
par
le
client
ne
être
pas
fiable
:

SQL
injection

Javascript
injection

tenter


de
mettre
javascript
:
alert
(
`
`
hello
!
`
`
)
;
dans
un
input
toujours
tester
le
existence
/
le
validité
de
un
fichier
/
code
à
inclure
.
regarder
régulièrement
le
logs
.
MYSQL
MySQL
–
type
de
donnée




INT
FLOAT
TEXT
DATETIME
/
TIMESTAMP


ENUM
(
'
value1
'
,
'
value2
'
,
...
)
:


Ensemble
fixer
de
valeur
set
(
'
value1
'
,
'
value2
'
,
...
)
:


date
et
heure
/
horaire
Unix
un
ou
plusieurs
parmi
et
beaucoup
de
autre
MySQL
–
opération

création
de
base
de
donnée

CREATE

suppression
de
base
de
donnée

drop

if

DATABASE
nom_bd
DATABASE
[
if
EXISTS
]
nom_bd
EXISTS
éviter
un
erreur
si
le
base
ne
exister
pas
.
utilisation
d
’
un
base
de
donnée

user

le
nom_bd
base
spécifier
être
utiliser
par
défaut
.
MySQL
–
opération

CREATE
table
:
permettre
de
créer
un
nouveau
table
dans
le
base
de
donnée
courant

CREATE
tabler
tbl_name
[
(
champ1
,
...
)
]

AUTO_INCREMENT
:
le
contenu
être
incrémenter
automatiquement
après
chaque
insertion

PRIMARY_KEY
:
clé
d
’
index
primaire
unique
CREATE
tabler
`
test
`
(
`
test_id
`
INT
NOT
NULL
AUTO_INCREMENT
PRIMARY
KEY
,
`
test_val
`
INT
NOT
NULL
)
MySQL
–
opération

suppression
d
’
un
table

drop

table
tbl_name
[
,
tbl_name
,
...
]
modifier
le
structure
d
’
un
table
existant

ALTER
tabler
tbl_name
alter_spec
[
,
alter_spec
...
]
MySQL
–
opération

insérer
de
nouveau
enregistrement
insert
INTO
articler
(
Champ1
,
Champ2
)
valoir
(
'
'
,
'
test
'
)
;

remplacer
un
enregistrement
replacer
INTO
articler
(
Champ1
,
Champ2
)
valoir
(
'
'
,
'
test
'
)
;
MySQL
–
opération

modification
du
valeur
UPDATE
table_name
set
column_name
=
expr1
[
WHERE
section_condition_where
]

suppression
d
’
enregistrement
DELETE
FROM
table_name
[
WHERE
definition
]
MySQL
–
opération

sélection
d
’
enregistrement
select
[
distinct
|
ALL
]
expression_de_selection
FROM
table
WHERE
expression_where
[
group
by
col_name
,
...
]
[
HAVING
where_definition
]
[
ORDER
by
[
ASC
|
DESC
]
]

exemple
select
*
FROM
articler
WHERE
PrixArt
>

select
NumGrArt
,
AVG
(
PrixArt
)
FROM
articler
group
by
NumArt

un
exemple
`
`
complet
'
'
simple
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
en
'
'
`
`
http
:
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
'
'
>
<
html
>
<
head
>
<
title
>
site
de
vente
en
ligne
<
/
title
>
<
/
head
>
<
body
>
<
div
id
=
'
'
container
'
'
>
<
div
id
=
'
'
header
'
'
>
<
ul
id
=
'
'
top_menu
'
'
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
index
<
/
avoir
>
<
/
li
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
rechercher
<
/
avoir
>
<
/
li
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
commander
<
/
avoir
>
<
/
li
>
<
/
ul
>
<
/
div
>
<
!
--
/
header
--
>
<
div
id
=
'
'
main
'
'
>
<
!
–
affichage
du
catalogue
venir
de
le
base
de
donnée
--
>
<
/
div
>
<
!
--
/
main
--
>
<
div
id
=
'
'
footer
'
'
>
<
p
>
copyright
&
copy
;
SdVeL
.
tout
droit
réserver
<
/
p
>
<
/
div
>
<
!
--
/
footer
--
>
<
/
div
>
<
!
--
/
container
--
>
<
/
body
>
<
/
html
>
dns-remplacer
<
?
php
session_start
(
)
;
$
user
=
`
`
root
'
'
;
$
pwd
=
`
`
'
'
;
$
host
=
`
`
ip-remplacée
>
'
'
;
$
bdd
=
`
`
test
'
'
;
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
'
.
$
host
.
'
;
dbname
=
'
.
$
bdd
,
$
user
,
$
pwd
)
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
$
menu
=
array
(
'
'
dns-remplacer
'
'
=
>
`
`
index
'
'
,
'
'
dns-remplacer
'
'
=
>
`
`
rechercher
'
'
,
'
'
dns-remplacer
'
'
=
>
`
`
commander
'
'
)
;
?
>
dns-remplacé
<
?
php
include_once
(
'
dns-remplacer
'
)
;
?
>
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
en
'
'
`
`
http
:
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
'
'
>
<
html
>
<
head
>
<
title
>
site
de
vente
en
ligne
<
/
title
>
<
/
head
>
<
body
>
<
div
id
=
'
'
container
'
'
>
<
div
id
=
'
'
header
'
'
>
<
ul
id
=
'
'
top_menu
'
'
>
<
?
php
foreach
(
$
menu
avoir
$
page_url
=
>
$
page_title
)
echo
`
`
<
li
>
<
avoir
href
=
\
'
'
$
page_url\
'
'
>
$
page_title
<
/
avoir
>
<
/
li
>
\n
'
'
;
?
>
<
/
ul
>
<
/
div
>
<
!
--
/
header
--
>
<
div
id
=
'
'
main
'
'
>
dns-remplacer
<
/
div
>
<
!
--
/
main
--
>
<
div
id
=
'
'
footer
'
'
>
<
p
>
copyright
&
copy
;
DVD
club
.
tout
droit
réserver
<
/
p
>
<
/
div
>
<
!
--
/
footer
--
>
<
/
div
>
<
!
--
/
container
--
>
<
/
body
>
<
/
html
>
tout
le
autre
page
création
de
autant
de
page
que
nécessaire
:




modification
de
la|le
entêter
ou
du
pied
de
page
via
le
fichier
dns-remplacé
,
dns-remplacé
modification
du
identifiants
de
connexion
via
le
fichier
dns-remplacé
...
rester
à
modifier
le
fichier
header
/
footer
et
faire
un
css
.

<
?
php
include
(
'
dns-remplacer
'
)
;
?
>
<
!
–
affichage
du
catalogue
venir
de
le
base
de
donnée
--
>
<
?
php
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
'
)
;
if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
...
}
}
else
{
echo
`
`
<
li
>
aucun
résultat
<
/
li
>
'
'
;
}
?
>
<
?
php
include
(
'
dns-remplacer
'
)
;
?
>
pour
aller
plus
loin

il
falloir
ensuite
apprendre
:

quelque
fonction
de
base
supplémentaire

à
ne
jamais
faire
confiance
au
client

le
gestion
du
objet
en
Php

le
méthode
de
programmation
avancer

MVC

gestion

...
de
template
