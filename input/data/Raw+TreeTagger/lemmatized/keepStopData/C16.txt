programmation
Web
:
PHP
avec
le
aimable
autorisation
de
Jérôme
CUTRONA
PHP
:
langage
de
script
pour
le
Web

Qu
’
être
ce
que
PHP
?







langage
de
script
.
utiliser
coter
serveur
acronyme
récursif
:
PHP
:
Hypertext
Preprocessor
créer
en
par
Rasmus
Lerdorf
extension
utiliser
sur
certain
serveur
Web
(
%
)
langage
multi
plate-forme
(
UNIX
/
Windows
...
)
open
source
verser
actuel
(
source
dns-remplacé
)
:

PHP4
(
%
en
octobre
)

PHP5
(
%
en
octobre
)
:
:
programmation
Web
utilité
et
utilisation
de
PHP

création
de
page
HTML
«
dynamique
»
,
fabriquer
à
le
volée
,
construire
à
le
demande

interface
entre
un
serveur
Web
et
du
base
de
donnée

création
d
’
application
Web
:
:
programmation
Web
principal
fonctionnalité
de
PHP









manipulation
de
chaîne
et
tableau
calendrier
/
date
/
heure
fonction
mathématique
accès
au
système
de
fichier
manipulation
d
’
image
HTTP
/
FTP
/
IMAP
base
de
donnée
(
oracle
,
MySQL
,
...
)
XML
...
:
:
programmation
Web
fonctionnement
de
PHP
requêter
HTTP
du
client
(
(
(
port
dns-remplacé
)
)
rendre
localisation
connexion
exécution
fermeture
graphique
du
de
sur
de
du
code
le
le
le
code
connexion
serveur
du
ressource
PHP
PHP
donner
dans
le
envoi
résultat
au
client
localisation
rendre
exécution
fermeture
connexion
requêter
graphique
HTTP
du
de
sur
de
du
code
le
le
le
code
du
connexion
serveur
du
ressource
client
PHP
PHP
donnée
(
port
dns-remplacé
dans80
)
)
le
fichier
fichier
envoi
du
du
résultat
au
client
=
=
réponse
réponse
HTTP
HTTP
client
client
GET
navigateur
GET
/
dns-remplacer
/
dns-remplacer
HTTP
/
HTTP
/
réseau
•HTML
réseau
•JavaScript
•CSS
protocole
protocole
HTTP
HTTP
exécution
exécution
d
’
un
d
’
un
programme
programmer
sur
sur
le
le
serveur
serveur
construction
de
le
réponse
construction
de
le
réponse
<
<
html
>
html
>
<
<
head
head
>
>
serveur
serveur
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
serveur
Web
.html
<
<
body
body
>
>
hello
hello
world
world
<
/
<
/
body
body
>
>
.php
<
/
<
/
html
html
>
>
.jpg
moduler
PHP
MySQL
:
:
<
?
php
<
?
php
echo
dns-remplacer
echo
<
<
<
<
<
<
HTML
HTML
dns-remplacer
<
<
html
>
html
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
hello
hello
world
world
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
HTML
;
HTML
;
programmation
Web
fonctionnement
de
PHP
client

serveur
.
.
.
.
.
connexion
TCP
sur
le
serveur
(
port
)
requête
HTTP
du
client
(
mon_
dns-remplacer
)
localisation
de
le
ressource
exécution
du
code
PHP
envoi
du
résultat
de
l
’
exécution
au
client
=
réponse
HTTP
.
fermeture
de
le
connexion
.
rendre
graphique
du
donnée
(
HTML
,
image
,
...
)
:
:
programmation
Web
programme
en
PHP
délimitation
du
code
PHP
dans
le
fichier
.php
:

<
?
php
code
PHP
?
>
fermeture
fermeture
optionnel
optionnel

<
script
language
=
'
'
PHP
'
'
>
confusion
confusion
avec
avec
JavaScript
JavaScript


àà
bannir
bannir
!
!
!
!
code
PHP
<
/
script
>


<
?
code
PHP
?
>
<
%
code
PHP
%
>
:
:
dépendre
dépendre
de
de
le
le
configuration
configuration
short_open_tag
short_open_tag
du
du
serveur
serveur
asp_tags
asp_tags


àà
bannir
bannir
!
!
!
!
programmation
Web
Eléments
de
syntaxe
PHP

le
syntaxe
de
PHP
ressembler
à
celui
de
famille
'
'
C
'
'
(
C
,
C++
,
java
,
...
)

chaque
instruction
se
terminer
par
`
`
;
'
'

commentaire
:
/
*
jusqu
’
au
prochain
*
/
/
/
jusqu
’
à
le
fin
de
le
ligne
#
jusqu
’
à
le
fin
de
le
ligne
:
:
programmation
Web
le
variable
et
le
type
de
donnée

tout
identificateur
commencer
par
`
`
$
'
'

le
affectation
être
réaliser
grâce
à
`
`
=
'
'

numérique
entier
:
ou
réel
:

chaîne
:
`
`
hello
'
'
ou
’
bonjour
’

booléen
:
true
,
false
(
PHP
)

tableau
:
$
tab
[
]
=

objet
(
PHP4
,
PHP5
)

ressource

NULL

le
type
d
’
un
variable
être
dynamique
et
être
déterminer
par
le
valeur
qui
lui
être
affecter
:
:
programmation
Web
Typage
faible
.
exemple
/
/
pas
de
déclaration
de
variable
$
test
=
;
/
/
réel
$
test
=
;
/
/
entier
$
test
=
array
(
)
;
/
/
tableau
$
test
=
`
`
'
'
;
/
/
chaîne
echo
$
test
;
/
/
:
:
programmation
Web
Typage
automatique
.
exemple
$
nombre1
$
nombre2
$
chaine1
$
chaine2
=
=
=
=
;
;
'
'
'
'
;
'
coucou
'
;
/
/
/
/
/
/
/
/
réel
entier
chaîner
chaîne
$
total
=
$
nombre1
+
$
nombre2
+
$
chaine1
+
$
chaine2
;
'
'
'
'
'
'
'
'
echo
$
total
;
/
/
réel
:
:
'
coucou
'
'
coucou
'
programmation
Web
le
chaîne
de
caractère
substitution
de
variable
dans
le
chaîne

guillemet
simple


$
avoir
=
'
chaîne
'
;
$
b
=
'
voici
un
$
avoir
'
;

guillemet
double


$
avoir
=
'
'
chaîne
'
'
;
$
b
=
'
'
voici
un
$
avoir
'
'
;

syntaxe
HereDoc


:
:
$
avoir
=
'
'
chaîne
'
'
;
$
b
=
<
<
<
MARQUE_DE_FIN
voici
un
$
avoir
sur
deux
ligne
;
-
)
MARQUE_DE_FIN
;
chaîne
chaîne
voici
voici
un
un
$
avoir
$
avoir
chaîne
chaîner
voici
voici
un
un
chaîne
chaîner
chaîne
chaîner
voici
voici
un
un
chaîne
chaîner
sur
sur
deux
deux
ligne
ligne
;
-
)
;
-
)
programmation
Web
concaténation
de
chaîne


permettre
d
’
assembler
plusieurs
chaîne
réaliser
grâce
à
l
’
opérateur
point
:
.
`
`
bonjour
`
`
.
`
`
Marcel
'
'

valoir
`
`
bonjour
Marcel
'
'
$
nb
=
*
;
'
'
acheter
`
`
.
$
nb

valoir
:
:
.
`
`
œuf
'
'
'
'
acheter
œuf
'
'
programmation
Web
le
commande
echo

permettre
d
’
envoyer
du
texte
au
navigateur
du
client
(
«
écrire
»
le
page
au
format
HTML
résulter
de
l
’
interprétation
de
PHP
)


echo
`
`
bonjour
'
'
;
$
nom
=
'
'
Marcel
'
'
;
echo
`
`
bonjour
$
nom
'
'
;

plus
généralement
,
permettre
d
’
envoyer
du
octet
au
navigateur
du
client



:
:
ficher
HTML
,
XML
,
CSS
,
JavaScript
,
...
donner
de
un
image
contenir
de
un
ficher
PDF
,
flash
,
etc
.
programmation
Web
hello
world
!
interprétation
interprétation
du
du
code
coder
PHP
PHP
sur
sur
le
le
serveur
serveur
<
?
php
serveur
du
navigateur
<
?
php
et
transmission
résultat
au
client
et
transmission
du
résultat
au
client
$
$
debut
debut
=
=
<
<
<
<
<
<
HTML
HTML
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
\n
\n
HTML
HTML
;
;
$
$
corps
corps
=
=
`
`
'
'
hello
hello
world
!
world
!
\n
\n
'
'
;
'
'
;
$
$
fin
=
=
<
<
<
fin
<
<
<
HTML
HTML
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
HTML
HTML
;
;
/
*
/
*
envoi
envoi
au
au
client
client
*
/
*
/
echo
echo
$
$
debut
debut
.
$
.
$
corps
corps
.
$
.
$
fin
fin
;
;
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
hello
hello
world
!
world
!
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
impossible
impossible
de
de
voir
voir
le
le
code
coder
PHP
PHP
depuis
depuis
le
le
navigateur
navigateur
!
!
!
!
:
:
programmation
Web
le
opérateur
arithmétique
$
b
Somme
$
b
différence
$
b
multiplication
$
avoir
+
*
/
$
b
division
$
avoir
%
$
b
modulo
(
rester
de
le
division
entier
)
$
avoir
$
avoir
$
avoir
:
:
programmation
Web
le
opérateur
d
’
in-
et
de
dé-crémentation
pré-
et
post-fixé
$
a++
++
$
avoir
$
avoir
--
--
$
avoir
:
:
retourne
le
valeur
de
$
avoir
puis
augmenter
le
valeur
de
$
avoir
de
augmenter
le
valeur
de
$
avoir
de
puis
retourner
le
nouveau
valeur
de
$
avoir
retourne
le
valeur
de
$
avoir
puis
diminuer
le
valeur
de
$
avoir
de
diminuer
le
valeur
de
$
avoir
de
puis
retourner
le
nouveau
valeur
de
$
avoir
programmation
Web
le
opérateur
de
comparaison
=
=
$
b
$
avoir
!
=
$
b
$
avoir
<
$
b
$
avoir
>
$
b
$
avoir
<
=
$
b
$
avoir
>
=
$
b
$
avoir
=
=
=
$
b
$
avoir
!
=
=
$
b
$
avoir
:
:
vrai
si
égalité
entre
le
valeur
de
$
avoir
et
$
b
vrai
si
différence
entre
le
valeur
de
$
avoir
et
$
b
vrai
si
$
avoir
inférieur
à
$
b
vrai
si
$
avoir
supérieur
à
$
b
vrai
si
$
avoir
inférieur
ou
égal
à
$
b
vrai
si
$
avoir
supérieur
ou
égal
à
$
b
vrai
si
$
avoir
et
$
b
identique
(
valeur
et
type
)
vrai
si
$
avoir
et
$
b
différent
(
valeur
ou
type
)
programmation
Web
le
opérateur
logique
and
[
Expr2
]
[
Expr1
]
&
&
[
Expr2
]
[
Expr1
]
or
[
Expr2
]
[
Expr1
]
|
|
[
Expr2
]
[
Expr1
]
[
Expr1
]
!
:
:
xor
vrai
si
[
Expr1
]
et
[
Expr2
]
être
vrai
idem
vrai
si
[
Expr1
]
ou
[
Expr2
]
être
vrai
idem
vrai
si
[
Expr1
]
ou
[
Expr2
]
être
vrai
[
Expr2
]
mais
pas
le
deux
[
Expr1
]
vrai
si
[
Expr1
]
être
non
vrai
programmation
Web
le
opérateur
sur
bit
$
avoir
$
avoir
$
avoir
&
|
^
$
b
et
binaire
$
b
ou
binaire
$
b
XOR
binaire
~
$
avoir
$
avoir
<
<
$
b
$
avoir
>
>
$
b
:
:
inversion
bit
à
bit
$
avoir
décaler
à
gauche
de
$
b
rang
$
avoir
décaler
à
droit
de
$
b
rang
programmation
Web
Précédence
du
opérateur
:
:
programmation
Web
Précédence
du
opérateur
en
en
cas
cas
de
de
doute
,
doute
,
utiliser
utiliser
le
le
parenthèse
parenthèse
;
-
)
;
-
)
:
:
programmation
Web
structure
de
contrôle
si
...
alors
...
sinon
...
if
(
condition
)
{
/
*
bloc
d
’
instruction
exécuter
si
le
condition
être
vrai
*
/
}
[
else
{
/
*
bloc
d
’
instruction
exécuter
si
le
condition
être
faux
*
/
}
]
:
:
programmation
Web
structure
de
contrôle
tant
que
...
faire
...
while
(
condition
)
{
/
*
bloc
d
’
instruction
répéter
tant
que
le
condition
être
vrai
*
/
}
do
{
/
*
bloc
d
’
instruction
exécuter
un
fois
puis
répéter
tant
que
le
condition
être
vrai
*
/
}
while
(
condition
)
;
:
:
programmation
Web
structure
de
contrôle
tant
que
...
faire
...
for
(
avant
;
condition
;
fin_chaque_itération
)
{
/
*
bloc
d
’
instruction
répéter
tant
que
le
condition
être
vrai
*
/
}
équivaloir
à
:
avant
;
while
(
condition
)
{
/
*
bloc
d
’
instruction
répéter
tant
que
le
condition
être
vrai
*
/
fin_chaque_itération
;
}
:
:
programmation
Web
structure
de
contrôle
switch
...
switch
(
val
)
{
case
v1
:
instruction
caser
v2
:
instruction
}
exécuter
si
val
=
=
v1
exécuter
si
val
=
=
v2
ou
si
val
=
=
v1
...
default
:
instruction
dans
tout
le
cas
:
:
programmation
Web
L
’
instruction
break
permettre
de
sortir
d
’
un
structure
de
contrôle
switch
(
val
)
{
case
v1
:
instruction
exécuter
si
val
=
=
v@card@
break
;
/
*
on
sortir
du
switch
si
val
=
=
v@card@
*
/
case
v2
:
instruction
exécuter
si
val
=
=
v2
ou
si
val
=
=
v@card@
break
;
/
*
on
sortir
du
switch
si
val
=
=
v@card@
*
/
...
default
:
instruction
exécuter
dans
tout
le
cas
si
val
!
=
v1
et
val
!
=
v@card@
}
:
:
programmation
Web
le
tableau

création
/
initialisation
:
$
tab1
=
array
(
,
`
`
fraise
'
'
,
)
;
$
tab2
[
]
$
tab2
[
]
$
tab2
[
]
=
=
=
;
'
'
fraise
'
'
;
;
$
tab3
[
]
=
;
$
tab3
[
]
=
`
`
fraise
'
'
;
$
tab3
[
]
=
;
:
:
programmation
Web
clé
valeur
'
'
fraise
'
'
le
tableau
«
à
trou
»

le
élément
du
tableau
ne
être
pas
forcement
d
’
indice
consécutif
:
$
tab4
[
]
$
tab4
[
]
$
tab4
[
]
$
tab4
[
]
=
=
=
=
;
'
'
fraise
'
'
;
;
'
'
el5
'
'
;
clé
valeur
`
`
fraise
'
'
'
'
el5
'
'

comment
parcourir
de
tel
tableau
?
:
:
programmation
Web
le
tableau
«
à
trou
»
(
suite
)
parcours
classique
:
for
(
$
i
=
;
$
i
<
sizeof
(
$
tab4
)
;
$
i++
)
{
echo
`
`
tab4
[
$
i
]
:
`
`
.
$
tab4
[
$
i
]
.
`
`
<
BR
>
\n
'
'
;
}
clé
valeur
?
:
:
programmation
Web
'
'
fraise
'
'
'
'
el5
'
'
structure
de
contrôle
pour
chaque
...
foreach
(
$
tableau
avoir
$
element
)
{
/
*
bloc
d
’
instruction
répéter
pour
chaque
élément
de
$
tableau
*
/
/
*
chaque
élément
de
$
tableau
être
accessible
grâce
à
$
element
*
/
}
:
:
programmation
Web
parcours
de
tableau
:
foreach
PHP
...
$
tab4
[
]
=
;
$
tab4
[
]
=
`
`
fraise
'
'
;
$
tab4
[
]
=
;
$
tab4
[
]
=
`
`
el5
'
'
;
foreach
(
$
tab4
avoir
$
v
)
{
echo
`
`
val
:
$
v
<
br
>
\n
'
'
;
}
...
:
:
HTML
...
val
:
<
br
>
\n
val
:
fraiser
<
br
>
\n
val
:
<
br
>
\n
val
:
el5
<
br
>
\n
...
programmation
Web
navigateur
tableau
associatif

tableau
dont
l
’
accès
au
élément
n
’
être
plus
réaliser
grâce
à
un
index
(
,
,
...
)
mais
grâce
à
un
clé
de
type
entier
ou
chaîne
.

exemple
de
clé
:
$
tab
[
'
un
'
]
=
;
$
tab
[
]
=
`
`
bonjour
'
'
;
$
tab
[
`
`
le

création
valeur
'
'
]
$
tab
=
array
(
cle1
=
>
cle2
=
>
=
;
val1
,
val2
,
...
)
;
:
:
programmation
Web
tableau
associatif
-
exemple
$
tab5
[
'
un
'
]
$
tab5
[
'
trois
'
]
$
tab5
[
`
`
deux
'
'
]
$
tab5
[
]
=
=
=
=
;
'
'
fraise
'
'
;
;
'
'
el5
'
'
;
clé
'
'
un
'
'
:
:
=
>
=
>
=
>
=
>
'
'
trois
'
'
'
'
fraise
'
'
'
'
deux
'
'
$
tab6
=
array
(
'
un
'
'
trois
'
'
'
deux
'
'
valeur
'
'
el5
'
'
,
'
'
fraise
'
'
,
,
'
'
el5
'
'
)
;
programmation
Web
structure
de
contrôle
pour
chaque
...
foreach
(
$
tableau
avoir
$
cle
=
>
$
element
)
{
/
*
bloc
d
’
instruction
répéter
pour
chaque
élément
de
$
tableau
*
/
/
*
chaque
élément
de
$
tableau
être
accessible
grâce
à
$
element
*
/
/
*
le
clé
d
’
accès
à
chaque
élément
être
donner
par
$
cle
*
/
}
:
:
programmation
Web
parcours
de
tableau
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
<
html
html
>
>
<
<
head
head
>
<
>
<
title
title
>
>
foreach
foreach
clé
clé
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
HTML
HTML
;
;
$
$
tab6
=
>
tab6
=
=
array
array
(
(
`
`
un
un
'
'
=
>
,
,
'
'
deux
=
>
deux
'
'
=
>
`
`
'
'
fraiser
fraise
'
'
,
'
'
,
'
'
'
'
trois
trois
'
'
'
'
=
>
=
>
,
,
'
'
'
'
quatre
quatre
'
'
'
'
=
>
=
>
`
`
'
'
el5
el5
'
'
'
'
)
)
;
;
foreach
foreach
(
(
$
$
tab6
tab6
avoir
avoir
$
$
cle
cle
=
>
=
>
$
$
val
val
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
tab
[
tab
[
$
$
cle
cle
]
:
]
:
$
$
val
val
<
br
>
<
br
>
\n
\n
'
'
'
'
;
;
}
}
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
\n
<
/
>
\n
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
exemple
de
génération
de
code
HTML
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
meta
meta
http-equiv
http-equiv
=
=
'
'
Content-Type
'
'
'
'
Content-Type
'
'
content
content
=
=
'
'
text
/
html
;
'
'
text
/
html
;
charset
=
iso-8859-1
'
'
charset
=
iso-8859-1
'
'
>
>
<
<
title
title
>
boucle
<
/
>
boucle
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
HTML
;
HTML
;
for
for
(
(
$
$
ii
=
=
;
;
$
$
ii
<
<
;
;
$
$
ii++
++
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
le
le
serveur
serveur
compte
...
compte
...
`
`
'
'
.
.
$
$
ii
.
.
`
`
'
'
<
br
>
<
br
>
\n
'
'
\n
'
'
;
;
}
}
$
$
html
html
.
=
.
=
<
<
<
<
<
<
HTML
HTML
<
/
body
>
<
/
body
>
<
/
<
/
html
html
>
>
HTML
;
HTML
;
echo
echo
$
$
html
html
;
;
:
:
programmation
Web
traitement
du
donnée
de
formulaire

PHP
permettre
de
traiter
le
donnée
saisi
grâce
à
un
formulaire
HTML
si
le
champ
action
du
formulaire
désigner
un
page
PHP
du
serveur
.

après
récupération
par
le
serveur
Web
,
le
donnée
être
contenir
dans
le
un
du
variable
superglobale
de
type
tableau
associatif
$
_GET
ou
$
_POST
(
ou
$
_REQUEST
)
.

le
valeur
pouvoir
être
trouver
grâce
à
un
clé
qui
porter
le
même
nom
que
le
champ
du
formulaire
de
le
page
HTML
de
saisie
.
:
:
programmation
Web
traitement
du
donnée
de
formulaire
réseau
réseau
client
client
navigateur
•HTML
nomPers
=
robert
nomPers
=
robert
•JavaScript
•CSS
<
<
html
html
>
>
<
<
head
head
>
>
serveur
serveur
nomPers
<
<
title
nomPers
title
>
>
bonjour
bonjour
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
serveur
Web
<
?
php
<
?
php
<
<
body
body
>
>
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
bonjour
bonjour
robert
robert
!
!
<
html
>
<
html
>
<
/
<
/
body
body
>
>
<
<
head
head
>
<
>
<
title
title
>
>
bonjour
bonjour
<
/
<
/
title
title
>
<
/
>
<
/
head
head
>
>
<
/
html
<
/
html
>
>
PHP
moduler
<
<
body
body
>
>
HTML
HTML
;
;
$
$
html
html
.
=
.
=
`
`
'
'
bonjour
bonjour
`
`
'
'
.
$
.
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
.
.
'
'
'
'
!
!
\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
robert
robert
:
:
programmation
Web
exemple
–
formulaire
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
nom
:
nom
:
<
<
input
input
typer
type
=
=
'
'
'
'
text
text
'
'
'
'
name
name
=
=
'
'
'
'
nomPers
nomPers
'
'
'
'
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
:
:
programmation
Web
exemple
–
traitement
en
PHP
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
html
<
!
DOCTYPE
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
>
html
>
<
<
head
head
>
>
$
$
_GET
<
<
title
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
title
>
>
validation
validation
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
est-il
défini
?
?
est-il
définir
<
<
body
>
body
>
HTML
HTML
;
;
if
if
(
(
isset
isset
(
(
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
)
)
)
)
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
{
{
est-il
est-il
vide
vide
?
?
if
if
(
(
!
!
empty
empty
(
(
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
)
)
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
vous
vous
avoir
avoir
saisir
saisir
`
`
'
'
'
'
.
$
.
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
.
.
'
'
'
'
'
'
\n
\n
'
'
'
'
;
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
aucun
aucun
valeur
valeur
saisir
saisie\n
\n
'
'
;
'
'
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
utilisation
utilisation
incorrect
incorrecte\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
formulaire
contenir
du
champ
«
select
»
:
:
programmation
Web
formulaire
contenir
du
champ
«
select
unique
»
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
de
de
saisie
saisir
du
du
fruit
fruit
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
choisir
choisir
du
du
fruit
:
fruit
:
&
nbsp
;
&
nbsp
;
<
<
select
select
name
name
=
=
'
'
'
'
sel
sel
'
'
'
'
>
>
<
<
option
option
>
>
fraise
fraiser
<
<
option
option
>
>
pomme
pommer
<
<
option
option
>
>
poire
poirer
envoyer
envoyer
<
<
option
option
>
>
banane
banane
<
<
option
option
>
>
cerise
cerise
<
/
<
/
select
select
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
dns-remplacer
?
dns-remplacer
?
sel
=
pomme
sel
=
pommer
<
/
html
>
<
/
html
>
:
:
programmation
Web
formulaire
contenir
du
champ
«
select
multiple
»
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
en
'
'
>
<
html
>
<
head
>
<
title
>
formulaire
de
saisie
du
fruit
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
'
'
>
choisir
du
fruit
:
&
nbsp
;
<
select
name
=
'
'
sel
'
'
multiple
>
<
option
>
fraiser
<
option
>
pommer
<
option
>
poirer
envoyer
<
option
>
banane
envoyer
<
option
>
cerise
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
>
<
/
form
>
dns-remplacer
?
<
/
body
>
dns-remplacer
?
sel
=
pomme
&
sel
=
poirer
sel
=
pommer
&
sel
=
poirer
<
/
html
>
:
:
programmation
Web
?
?
?
?
?
?
formulaire
contenir
du
champ
«
select
multiple
»
<
html
>
<
head
>
<
title
>
formulaire
de
saisie
du
fruit
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
'
'
>
choisir
du
fruit
:
&
nbsp
;
<
select
name
=
'
'
sel
[
]
'
'
multiple
>
<
option
>
fraiser
<
option
>
pommer
<
option
>
poirer
envoyer
envoyer
<
option
>
banane
<
option
>
cerise
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
>
<
/
form
>
dns-remplacer
?
dns-remplacer
?
sel
%
5B
%
5D
=
pommer
&
sel
%
5B
%
5D
=
poirer
sel
%
5B
%
5D
=
pommer
&
sel
%
5B
%
5D
=
poire
<
/
body
>
dns-remplacer
?
<
/
html
>
dns-remplacer
?
sel
[
]
=
pommer
&
sel
[
]
=
poirer
sel
[
]
=
pommer
&
sel
[
]
=
poirer
:
:
programmation
Web
traitement
du
donnée
du
champ
«
select
»
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
liste
lister
de
de
fruit
fruit
<
/
<
/
title
title
>
>
$
$
_GET
_GET
[
[
‘
‘
sel
sel
'
'
]
]
<
/
head
>
<
/
head
>
être
être
un
un
tableau
tableau
<
<
body
body
>
>
HTML
HTML
;
;
if
if
(
(
isset
isset
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
)
]
)
&
&
&
&
!
!
empty
empty
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
)
)
]
)
)
{
{
/
*
le
variable
$
_GET
[
'
sel
'
]
être
définir
/
*
le
variable
$
_GET
[
'
sel
'
]
être
définir
et
et
elle
elle
ne
être
ne
être
pas
pas
vide
vide
*
/
*
/
foreach
foreach
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
]
avoir
avoir
$
$
fruit
fruit
)
)
$
$
html
html
.
=
.
=
`
`
'
'
vous
vous
avoir
avoir
choisir
choisir
$
$
fruit
fruit
<
br
>
<
br
>
\n
\n
'
'
'
'
;
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
vous
vous
ne
avoir
ne
avoir
pas
pas
choisir
choisir
de
de
fruit
fruit\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
résultat
:
:
programmation
Web
formulaire
contenir
du
champ
«
CHECKBOX
»
:
:
programmation
Web
formulaire
contenir
du
champ
«
CHECKBOX
»
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
'
'
>
Transitional
/
/
en
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
de
de
saisie
saisir
du
du
fruit
fruit
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
name
name
=
=
'
'
'
'
formu
formu
'
'
'
'
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
choisir
choisir
du
du
fruit
fruit
&
nbsp
;
&
nbsp
;
:
<
:
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
fraiser
fraise
'
'
'
'
>
fraise
<
>
fraise
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
pomme
pomme
'
'
'
'
>
pomme
>
pomme
<
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
poirer
poire
'
'
'
'
>
poirer
>
poire
<
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
banane
banane
'
'
'
'
>
banane
<
>
banane
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
cerise
cerise
'
'
'
'
>
cerise
<
>
cerise
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
:
:
programmation
Web
résultat
:
:
programmation
Web
référence
$
avoir
=
;
$
b
=
$
avoir
;
$
c
=
&
$
avoir
;
$
b
=
`
`
coucou
'
'
;
$
c
=
;
echo
'
'
\
$
avoir
:
$
a\n
'
'
$
avoir
$
avoir
:
:
echo
'
'
\
$
b
:
$
b\n
'
'
$
b
$
b
:
:
coucou
coucou
echo
'
'
\
$
c
:
$
c\n
'
'
$
c
$
c
:
:
unset
(
$
c
)
;
$
c
=
`
`
hello
'
'
;
:
:
$
$
aa
$
$
bb
'
'
'
'
coucou
coucou
'
'
'
'
$
$
cc
'
'
'
'
hello
hello
'
'
'
'
;
;
;
programmation
Web
fonction
utilisateur

description
d
’
un
fonctionnalité
dépendre
éventuellement
de
paramètre
et
retourner
éventuellement
un
résultat

définition
function
moyen
(
$
avoir
,
$
b
)
{
return
(
$
a+
$
b
)
/
.
;
}

utilisation
$
resultat
=
moyen
(
,
)
;
echo
$
resultat
;
/
/
valoir
:
:
programmation
Web
fonction
utilisateur

valeur
de
retour
function
moyen
(
$
avoir
,
$
b
)
{
...
}
Typage
Typage
faible
faible
de
de
PHP
PHP
:
:
aucun
aucun
information
information

argument
function
moyen
(
{
...
}
$
avoir
,
$
b
)
Typage
Typage
faible
faible
de
de
PHP
PHP
:
:
aucun
aucun
information
information
:
:
programmation
Web
Mode
de
passage
du
argument
(
type
natif
)
<
?
php
function
permutation
(
$
x
,
$
y
)
{
echo
`
`
permutation
...
'
'
;
$
t
=
$
x
;
permutation
permutation
impossible
impossible
:
:
$
x
=
$
y
;
passage
passage
du
du
argument
argument
$
y
=
$
t
;
du
du
fonction
fonction
par
par
valeur
valeur
}
$
avoir
=
;
$
b
=
;
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
permutation
...
permutation
(
$
avoir
,
$
b
)
;
permutation
...
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
?
>
:
:
programmation
Web
Mode
de
passage
du
argument
(
type
natif
)
<
?
php
function
permutation
(
&
$
x
,
&
$
y
)
{
echo
`
`
permutation
...
'
'
;
$
t
=
$
x
;
$
x
=
$
y
;
$
y
=
$
t
;
}
$
avoir
=
;
$
b
=
;
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
permutation
...
permutation
(
$
avoir
,
$
b
)
;
permutation
...
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
?
>
:
:
programmation
Web
permutation
permutation
réussir
réussir
argument
par
défaut
du
fonction

valeur
par
défaut
d
’
un
argument
s
’
il
n
’
avoir
pas
être
définir
lors
de
l
’
appel
de
le
fonction
function
bonjour
(
$
nom
=
'
'
inconnu
'
'
)
{
echo
`
`
bonjour
cher
$
nom
'
'
;
}

utilisation
bonjour
(
)
;
bonjour
bonjour
cher
cher
inconnu
inconnu
bonjour
(
`
`
Marcel
'
'
)
;
bonjour
bonjour
cher
cher
Marcel
Marcel
:
:
programmation
Web
définition
de
fonction
fréquemment
utiliser

certain
fonction
être
utiliser
dans
plusieurs
script
PHP

comment
faire
pour
ne
pas
la|le
définir
dans
chacun
du
page
?

utilisation
de
:




include
(
`
`
fichier
'
'
)
;
require
(
`
`
fichier
'
'
)
;
include_once
(
`
`
fichier
'
'
)
;
require_once
(
`
`
fichier
'
'
)
;

permettre
d
’
inclure
le
contenu
de
fichier
dans
le
script
courir
:
:
programmation
Web
include
et
require
fichier
fichier
dns-remplacé
dns-remplacer
<
?
function
mafonction
(
$
arg
)
{
if
(
isset
(
$
arg
)
)
{
echo
(
`
`
vrai
'
'
)
;
}
else
{
echo
(
`
`
faux
'
'
)
;
}
}
?
>
:
:
fichier
fichier
dns-remplacer
dns-remplacer
...
require
(
`
`
dns-remplacer
'
'
)
mafonction
(
true
)
;
...
fichier
fichier
dns-remplacer
dns-remplacé
...
include
(
`
`
dns-remplacer
'
'
)
...
$
var
=
false
;
mafonction
(
$
var
)
;
...
fichier
fichier
dns-remplacer
dns-remplacer
...
require
(
`
`
dns-remplacer
'
'
)
...
programmation
Web
définition
de
constant
<
?
php
define
(
`
`
ma_constant
'
'
,
`
`
bonjour
à
tout
'
'
)
;
nom
nom
valeur
valeur
définition
définition
de
un
de
un
constant
constant
echo
ma_constant
;
?
>
utilisation
utilisation
de
de
le
le
constant
constante
:
:
programmation
Web
gestion
du
erreur

dans
certain
cas
,
il
n
’
être
ni
possible
ni
utile
de
poursuivre
l
’
exécution
du
code
PHP
(
variable
non
définir
,
valeur
erroné
,
échec
de
connexion
,
...
)

arrêt
brutal
de
l
’
exécution
du
code
:


die
(
message
)
exit
(
message
)
envoyer
message
au
navigateur
et
terminer
l
’
exécution
du
script
courir
:
:
programmation
Web
gestion
du
erreur
–
(
mauvais
)
exemple
<
?
php
PHP
$
html
=
<
<
<
HTML
<
html
>
<
head
>
<
title
>
die-exit
<
/
title
>
<
/
head
>
<
body
>
HTML
;
if
(
!
isset
(
$
val
)
)
{
HTML
non
non
die
(
$
html
.
`
`
problèmeHTML
val
'
'
)
;
/
*
au
delà
de
ce
point
,
fin
du
script
*
/
}
$
html
.
=
<
<
<
HTML
choix
:
$
val
<
/
body
>
<
/
html
>
:
:
<
html
>
HTML
<
head
>
<
title
>
die-exit
<
/
title
>
<
/
head
>
<
body
>
problème
val
valide
valide
...
...
navigateur
problème
val
programmation
Web
gestion
de
le
affichage
du
erreur

int
error_reporting
(
[
int
level
]
)
Débogage
constant
ancien
ancien
niveau
niveau
de
erreur
de
erreur
E_ERROR
E_WARNING
sur
sur
un
un
serveur
serveur
en
en
E_PARSE
production
,
production
,
tout
tout
E_NOTICE
erreur
erreur
afficher
afficher
E_CORE_ERROR
donner
donner
du
du
indice
indice
sur
sur
le
E_CORE_WARNIN
le
script
script
et
et
rendre
rendre
le
le
site
G
site
vulnérable
vulnérable
E_COMPILE_ERR
dns-remplacer
dns-remplacé
or
display_errors
display_errors
boolean
boolean
E_COMPILE_WAR
NING
programmation
Web
:
:
opérateur
de
contrôle
de
erreur
$
v
=
file
(
`
`
dns-remplacer
'
'
)
or
die
(
`
`
problème
de
fichier
fichier
absent
absent
lecture
'
'
)
;
warning
warning
:
:
file
(
dns-remplacer
)
:
file
(
dns-remplacer
)
:
failed
failed
to
to
open
open
stream
:
stream
:
No
No
such
such
filer
file
or
or
directory
directory
in
in
dns-remplacer
dns-remplacer
on
on
line
line
problème
problème
de
de
lecture
lecture
$
v
=
@
file
(
`
`
dns-remplacer
'
'
)
or
die
(
`
`
problème
de
lecture
'
'
)
;
problème
problème
de
de
lecture
lecture
:
:
programmation
Web
développement
objet

définition
de
brique
logicielles
représenter
un
concept
,
un
idée
ou
un
entité
ainsi
que
leur
interaction
:
le
objet

un
objet
être
un
structure
de
donner
comprendre
également
le
fonctionnalité
de
traitement
du
donnée

L
’
objet
être
voir
au
travers
de
son
spécification

le
concept
associer
être
:

encapsulation

héritage

polymorphisme
:
:
programmation
Web
classe

un
classe
définir
un
modèle
,
un
moule
,
à
partir




duquel
tout
le
objet
de
classe
être
créer
le
classe
décrire
le
donnée
interne
ainsi
que
le
fonctionnalité
du
objet
le
classe
être
un
vision
«
inerte
»
,
un
recette
de
cuisine
,
viser
à
décrire
le
structure
et
le
comportement
du
objet
qui
être
créer
le
construction
d
’
un
objet
à
partir
de
le
classe
générateur
s
’
appeler
instanciation
le
objet
,
entité
«
vivant
»
en
mémoire
,
être
du
instance
de
le
classe
:
:
programmation
Web
Instanciation

le
classe
être
un
description
«
inerte
»

le
objet
devoir
être
instanciés
à
partir
de
le
classe
générateur
pour
exister
et
devenir
fonctionnel

exemple
:
le
classe
animal
$
bambi
=
new
animal
(
)
;
$
scrat
=
new
animal
(
)
;
$
melman
=
new
animal
(
)
;
:
:
programmation
Web
encapsulation

procédé
consister
à
rassembler
le
donnée
et
le
traitement
au
sein
du
objet

L
’
implémentation
interne
du
objet
être
cacher

le
objet
être
voir
à
travers
leur
spécification

le
donnée
interne
et
le
fonctionnalité
posséder
un
niveau
de
visibilité
et
pouvoir
éventuellement
être
masquer
:

public

priver

protéger
:
:
programmation
Web
encapsulation

le
donnée
interne
du
objet
être
appeler
attribut

le
fonctionnalité
du
objet
être
appeler
méthode

méthode
habituel
:

constructeur
/
destructeur

Accesseurs
/
modificateur
(
getter
/
setter
)

référence
à
l
’
objet
courir
dans
le
description
de
le
classe
:
$
this
:
:
programmation
Web
visibilité

publique
:
le
donnée
interne
et
le
méthode
être
accessible
par
tout

protégé
:
le
donnée
interne
et
le
méthode
être
accessible
au
objet
dérivé

priver
:
le
donnée
interne
et
le
méthode
ne
être
accessible
qu
’
au
objet
de
le
classe
:
:
programmation
Web
héritage
ou
dérivation
ou
extension

création
de
nouveau
classe
à
partir
du
modèle
d
’
un
classe
existant

le
nouveau
classe
posséder
tout
le
attribut
et
méthode
de
le
classe
mère

le
nouveau
classe
pouvoir
proposer
de
nouveau
attribut
et
de
nouveau
méthode
ou
spécialiser
du
méthode
mammifère
de
le
classe
mère
herbivore
impala
:
:
caribou
carnivore
guépard
programmation
Web
léopard
polymorphisme
mammifère
nourriture

choix
dynamique
de
le
méthode
qui
correspondre
au
type
réel
de
l
’
objet

méthode
manger
(
)
herbivore
plante
impala
herber
caribou
mousse
carnivore
viande
guépard
impala
léopard
impala

function
nourriture
(
Mammifere
$
m
)
{
return
$
m-
>
manger
(
)
;
}

$
i
=
new
impala
(
)
;
nourriture
(
$
i
)
;

$
c
=
new
carnivore
(
)
;
nourriture
(
$
c
)
;
:
:
programmation
Web
herbe
viander
développement
objet
en
PHP

PHP

classe
(
tout
être
public
)

constructeur

héritage

méthode
statique
implicite

outil
pour
le
linéarisation
(
sauvegarde
sur
disque
)

PHP

classe
(
choix
public
,
protected
,
private
)

constructeur
et
destructeur

membre
et
méthode
statique

classe
et
méthode
abstraire

...
:
:
programmation
Web
déclaration
définition
de
un
classe
en
PHPde4classe
<
?
php
class
macler
{
var
$
madonnee
;
/
/
attribut
attribut
public
constructeur
public
référencer
à
/
/
constructeur
le
objet
courir
function
macler
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
}
accès
à
un
attribut
function
affiche
(
)
{
/
/
méthode
echo
get_class
(
$
this
)
méthode
publique
.
'
'
contenir
`
`
.
$
this-
>
madonnee
;
}
donner
le
nom
de
le
classe
de
le
objet
courir
}
?
>
:
:
programmation
Web
utilisation
de
un
classe
en
PHP
inclusion
de
le
définition
de
le
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
un
objet
/
/
nouveau
objet
$
o
=
new
macler
(
)
macler
contenir
;
/
/
utilisation
de
un
méthode
$
o-
>
affiche
(
)
;
$
o-
>
madonnee
=
`
`
coucou
'
'
;
méthode
affiche
de
le
objet
$
o
impossible
de
restreindre
le
accès
au
attribut
?
>
:
:
programmation
Web
héritage
en
PHP
héritage
de
macler
<
?
php
class
MaClasseHeritee
extends
macler
{
var
$
autredonnee
;
function
MaClasseHeritee
(
$
param1
,
$
param2
)
{
opérateur
de
parent
:
:
macler
(
$
param1
)
;
résolution
de
portée
$
this-
>
autredonnee
=
$
param2
;
(
Paamayim
}
Nekudotayim
)
function
affiche
(
)
{
macler
:
:
affiche
(
)
;
méthode
macler
echo
`
`
et
`
`
.get_class
(
$
this
)
du
parent
.
'
'
contenir
`
`
.
$
this-
>
autredonnee
;
}
}
méthode
affiche
de
?
>
le
classe
macler
:
:
programmation
Web
méthode
de
classe
implicite
<
?
php
class
macler
{
var
$
madonnee
;
/
/
attribut
/
/
constructeur
function
macler
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
}
function
affiche
(
)
{
/
/
méthode
echo
$
this-
>
madonnee
;
}
function
statique
(
)
{
/
/
méthode
echo
`
`
statique
!
!
!
'
'
;
}
}
?
>
:
:
programmation
Web
méthode
publique
ne
faire
pas
référence
à
$
this

méthode
statique
(
méthode
de
classe
)
méthode
de
classe
implicite
inclusion
de
le
définition
de
le
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
un
objet
/
/
création
de
un
objet
$
o
=
new
macler
(
)
;
méthode
affiche
de
le
objet
$
o
/
/
utilisation
de
un
méthode
$
o-
>
affiche
(
)
;
impossible
de
restreindre
le
accès
/
/
utilisation
de
un
méthode
implicitement
auxstatique
attribut
macler
:
:
statique
(
)
;
statique
!
!
!
?
>
:
:
programmation
Web
développement
objet
en
PHP
à
partir
de
maintenant
,
développement
en
PHP
:
:
programmation
Web
définition
de
un
classeDéclaration
de
classe
<
?
php
class
macler
{
private
$
madonnee
;
attribut
privé
constructeur
public
public
function
__construct
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
référence
à
le
objet
}
courir
function
__destruct
(
)
{
echo
`
`
destruction
...
'
'
;
}
destructeur
public
function
affiche
(
)
{
echo
`
`
madonnee
:
`
`
méthode
publique
.
$
this-
>
madonnee
;
par
défaut
}
}
?
>
accès
à
un
attribut
:
:
programmation
Web
utilisation
de
un
classe
inclusion
de
le
définition
de
le
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
un
objet
/
/
nouveau
objet
$
o
=
new
macler
(
)
macler
contenir
;
/
/
utilisation
de
un
méthode
$
o-
>
affiche
(
)
;
{
class
fatal
macler
error
:
Can
not
access
private
private
$
madonnee
;
property
macler
:
:
$
madonnee
in
...
dns-remplacer
on
=
line
$
o-
>
madonnee
'
'
coucou
'
'
;
function
__destruct
(
)
{
destruction
...
echo
`
`
destruction
...
'
'
;
}
unset
(
$
o
)
;
?
>
:
:
programmation
Web
méthode
afficher
de
le
objet
$
o
le
attribut
être
priver
destruction
de
le
objet
$
o
valeur
par
défaut
du
attribut
attribut
avec
valeur
par
défaut
<
?
php
class
macler
{
private
$
madonnee
=
`
`
défaut
'
'
;
function
affecter
(
$
val
)
{
$
this-
>
madonnee
=
$
val
;
}
function
affiche
(
)
{
nouveau
objet
echo
`
`
madonnee
:
`
`
.
$
this-
>
madonnee
;
}
}
affichage
madonnee
:
défaut
$
o
=
new
macler
(
)
;
affectation
$
o-
>
affiche
(
)
;
madonnee
:
nouveau
$
o-
>
affecter
(
`
`
nouveau
'
'
)
;
affichage
$
o-
>
affiche
(
)
;
?
>
:
:
programmation
Web
attribut
et
méthode
de
classe

mot
clé
static

attribut
et
méthode
utilisable
sans
instance
de
le
classe
(
=
attribut
et
méthode
de
classe
)

attribut
ne
pouvoir
pas
être
accéder
depuis
un
instance
(
$
objet-
>
attribut
)

attribut
partager
par
tout
le
instance
de
le
classe

méthode
pouvoir
être
accéder
depuis
un
instance
(
$
objet-
>
methode
(
)
)

dans
le
méthode
,
$
this
ne
être
pas
disponible
:
:
programmation
Web
attribut
statique
attribut
privé
statique
:
ne
pouvoir
être
accéder
que
par
du
méthode
de
le
classe
class
macler
{
private
static
$
n
=
;
function
__construct
(
)
{
accès
à
le
attribut
statique
echo
++MaClas
:
:
$
n
.
'
'
instance
(
s
)
'
'
;
}
function
__destruct
(
)
{
echo
`
`
destruction
'
'
;
self
:
:
$
n
--
;
}
instance
(
s
)
}
instance
(
s
)
$
s
=
new
macler
(
)
;
destruction
$
tinstance
(
s
)
=
new
macler
(
)
;
unset
(
$
t
)
;
Can
not
access
private
property
instance
(
s
)
fatal
error
:
$
u
=
new
macler
(
)
;
macler
:
:
$
n
in
dns-remplacer
on
line
$
v
=
new
macler
(
)
;
:
:
programmation
Web
méthode
statique
class
macler
{
private
static
$
n
=
;
function
__construct
(
)
{
echo
++MaClasse
:
:
$
n
.
'
'
instance
(
s
)
<
br
>
\n
'
'
;
}
méthode
publique
statique
function
__destruct
(
)
{
macler
:
:
$
n
--
;
}
static
function
f
(
$
i
)
{
echo
`
`
dans
f
(
)
:
`
`
.
(
$
i
*
$
i
)
appel
;
}
à
partir
de
un
instance
}
instance
(
s
)
tolérer
dans
f
(
)
:
$
s
=
f
(
)
new
:
macler
(
)
;
dans
$
s-
>
f
(
)
;
macler
:
:
f
(
)
programmation
;
:
:
Web
appel
sans
instance
constante
de
classe
class
macler
{
const
constant
=
`
`
valeur
'
'
;
public
function
montrer
(
)
{
echo
self
:
:
constant
;
}
}
valeur
$
c
=
new
macler
(
)
;
valeur
$
c-
>
montrer
(
)
;
echo
macler
:
:
constant
;
:
:
programmation
Web
constante
publique
de
classe
accès
à
le
constante
de
classe
depuis
le
classe
accès
à
le
constante
de
classe
à
le
extérieur
de
le
classe
héritage
class
simple
{
function
affiche
(
)
{
echo
`
`
je
être|suivre
simple
'
'
;
}
}
class
Etendue
extends
simple
{
function
affiche
(
)
{
parent
:
:
affiche
(
)
;
echo
`
`
mais
aussi
Etendue
'
'
;
}
}
$
s
=
new
simple
(
)
;
$
e
=
new
Etendue
(
)
;
je
être|suivre
simple
;
$
s-
>
affiche
(
)
$
e-
>
affiche
(
)
je
être|suivre
simple
;
mais
aussi
Etendue
:
:
programmation
Web
classe
simple
un
méthode
publique
classer
étendre
hériter
de
le
classe
simple
surcharger
de
le
méthode
appel
de
le
méthode
du
parent
assignation
de
objet
class
point
{
private
$
_x
;
private
$
_y
;
public
function
__construct
(
$
x
=
,
$
y
=
)
{
$
this-
>
_x
=
$
x
;
$
this-
>
_y
=
$
y
;
}
public
function
set
(
$
x
,
$
y
)
{
$
this-
>
_x
=
$
x
;
$
this-
>
_y
=
$
y
;
}
public
function
toString
(
)
{
return
`
`
(
{
$
this-
>
_x
}
,
{
$
this-
>
_y
}
)
'
'
;
}
:
:
programmation
Web
assignation
de
objet
$
segment
=
array
(
)
;
$
point
=
new
point
(
)
;
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
$
point-
>
set
(
$
i
,
$
i
)
;
$
segment
[
]
=
$
point
;
}
foreach
(
$
segment
avoir
$
k
=
>
$
p
)
echo
`
`
$
k
:
{
$
p-
>
toString
(
)
}
<
br
>
\n
'
'
;
:
:
programmation
Web
$
point
$
segment
:
(
,
)
:
(
,
)
)
:
(
,
)
:
(
,
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
)
:
(
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
clonage
de
objet
$
segment
=
array
(
)
;
$
point
=
new
point
(
)
;
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
$
point-
>
set
(
$
i
,
$
i
)
;
$
segment
[
]
=
cloner
$
point
;
}
foreach
(
$
segment
avoir
$
k
=
>
$
p
)
echo
`
`
$
k
:
{
$
p-
>
toString
(
)
}
<
br
>
\n
'
'
;
$
point
$
segment
:
(
,
)
:
(
,
)
)
:
(
,
)
:
(
,
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
)
:
(
,
,
,
,
,
,
,
,
,
,
,
:
:
programmation
Web
objet
comme
argument
de
fonction
function
origine
(
$
p
)
{
$
p-
>
set
(
,
)
;
}
$
point
=
new
point
(
,
)
;
echo
`
`
avant
:
{
$
point-
>
toString
(
)
}
<
br
>
\n
'
'
;
origine
(
$
point
)
;
echo
`
`
apres
:
{
$
point-
>
toString
(
)
}
<
br
>
\n
'
'
;
passage
de
le
objet
avant
:
(
,
)
point
par
référence
apres
:
(
,
)
:
:
programmation
Web
objet
dans
le
chaîne
de
caractère

problème
:

ambiguïté

non
évaluable

chaîne
contenir
:

un
attribut
de
un
objet
dans
un
chaîne
'
'
avoir
:
$
a-
>
attribut
'
'

le
résultat
de
un
méthode
de
un
objet
dans
un
chaîne
'
'
résultat
:
$
a-
>
calculer
(
)
'
'

un
entrée
de
tableau
associatif

`
`
valeur
:
$
tab
[
'
cle
'
]
'
'

un
variableProgrammation
suivre
de
texte
(
sans
espace
)
:
:
Web
objet
dans
le
chaîne
de
caractère

solution
:

effectuer
du
concaténation
(
pénible
)

délimiter
par
{
}

chaîne
contenir
:

un
attribut
de
un
objet
dans
un
chaîne
'
'
avoir
:
{
$
a-
>
attribut
}
'
'

le
résultat
de
un
méthode
de
un
objet
dans
un
chaîne
'
'
résultat
:
{
$
a-
>
calculer
(
)
}
'
'

un
entrée
de
tableau
associatif

`
`
valeur
:
{
$
tab
[
'
cle
'
]
}
'
'

un
variableProgrammation
suivre
de
texte
(
sans
espace
)
:
:
Web
gestion
du
erreur
:
excepter

gestion
du
exception
identique
à
C++
/
java

exception
pouvoir
être
:

jeter
:
throw

essayer
:
try

capturer
:
catch

exception
jeter
:
code
après
throw
non
exécuter

capture
:
ou
plusieurs
bloc
(
selon
type
)

exception
non
capturer
:
erreur
fatal
:
:
programmation
Web
utilisation
du
exception
try
{
$
error
=
'
toujours
lancer
ce
erreur
'
;
déroutement
throw
new
exception
(
$
error
)
;
/
*
le
code
après
un
exception
ne
être
capturer
essayer
lancer
jamais
exécuter
.
*
/
echo
'
jamais
exécuter
'
;
}
capturer
exception
:
toujours
lancer
ce
erreur
catch
(
exception
$
e
)
{
echo
`
`
capturer
exception
:
`
`
.
$
e-
>
getMessage
(
)
.
'
'
\n
'
'
;
}
bonjour
le
monde
/
/
poursuite
de
le
exécution
echo
'
bonjour
le
monde
'
;
:
:
programmation
Web
classe
exception
PHP
<
?
php
class
exception
{
protected
$
message
=
`
`
;
/
/
message
de
le
exception
protected
$
code
=
;
/
/
code
de
le
exception
protected
$
file
;
/
/
fichier
source
de
le
exception
protected
$
line
;
/
/
ligne
de
le
source
de
le
exception
function
__construct
(
string
$
message
=
NULL
,
int
code
=
)
;
final
final
final
final
final
final
function
function
function
function
function
function
function
getMessage
(
)
;
/
/
message
de
le
exception
getCode
(
)
;
/
/
code
de
le
exception
getFile
(
)
;
/
/
nom
du
fichier
source
getLine
(
)
;
/
/
ligne
du
fichier
source
getTrace
(
)
;
/
/
un
tableau
de
backtrace
(
)
getTraceAsString
(
)
;
/
/
chaîne
de
trace
_toString
(
)
;
/
/
chaîne
pour
le
affichage
}
?
>
:
:
programmation
Web
PDO

PDO
:
PHP
dater
Objects

extension
PHP
fournir
un
interface
pour
accéder
à
un
base
de
donnée

fournir
un
interface
de
abstraction
pour
le
accès
au
donnée

ne
fournir
pas
un
abstraction
de
base
de
donnée

SQL
spécifique
au
moteur

fonctionnalité
présent
/
absent

interface
orienter
objet
:
:
programmation
Web
nom
du
driver
base
de
donnée
supporter
base
de
donnée
supporter
PDO_DBLIB
FreeTDS
/
Microsoft
SQL
Server
/
Sybase
PDO_FIREBIRD
Firebird
/
Interbase
PDO_IBM
IBM
DB@card@
PDO_INFORMIX
IBM
Informix
Dynamic
Server
PDO_MYSQL
MySQL
3.x
/
4.x
/
5.x
PDO_OCI
oracle
Call
interface
PDO_ODBC
ODBC
v3
(
IBM
DB@card@
,
unixODBC
et
win32
ODBC
)
PDO_PGSQL
PostgreSQL
PDO_SQLITE
SQLite
et
SQLite
PDO_4D
4D
:
:
programmation
Web
:
:
programmation
Web
classe
prédéfinie

PDO
:
connexion
PHP
/
base
de
donnée

__construct
(
)

exec
(
)
,
prepare
(
)
,
query
(
)

errorCode
(
)
,
errorInfo
(
)

getAttribute
(
)
,
setAttribute
(
)

lastInsertId
(
)
,
quote
(
)

beginTransaction
(
)

commettre
(
)
,
rollBack
(
)

getAvailableDrivers
(
)
:
:
programmation
Web
classe
prédéfinies

PDOStatement
:
requêter
préparer
,
jeu
de
résultat

bindColumn
(
)
,
bindParam
(
)
,
bindValue
(
)
,
closeCursor
(
)

errorCode
(
)
,
errorInfo
(
)

fetch
(
)
,
fetchAll
(
)
,
fetchColumn
(
)
,
fetchObject
(
)
,




setFetchMode
(
)
,
nextRowset
(
)
rowCount
(
)
,
columnCount
(
)
,
getColumnMeta
(
)
getAttribute
(
)
,
setAttribute
(
)
execute
(
)
debugDumpParams
(
)
:
:
programmation
Web
:
:
programmation
Web
connexion
et
gestionnaire
de
connexion

Instanciation
de
un
objet
PDO

$
dbh
=
new
PDO
(
DSN
[
,
user
[
,
pass
[
,
option
]
]
]
)
;

DSN
:
dater
source
Name

nom_du_driver
:
syntaxe_spécifique_au_driver

ex
:
mysql
:
host
=
localhost
;
dbname
=
ma_base

user
:
nom
de
utilisateur
,
pass
:
mot
de
passe

option
:
tableau
associatif

spécifique
au
driver

ex
:
array
(
PDO
:
:
ATTR_PERSISTENT
=
>
true
)
)
;

fin
de
connexion
:
$
dbh
=
null
;
ou
unset
(
$
dbh
)
;
:
:
programmation
Web
:
:
programmation
Web
gestion
du
erreur
de
connexion

connexion
par
construction
de
un
objet

gestion
envisageable
du
erreur

aucun

fin
brutal
(
exit
,
die
)

État

exception

en
cas
de
erreur
de
connexion

objet
PDOException
lancer

PDOException
hériter
de
exception
:
:
programmation
Web
gestion
du
erreur
de
connexion
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
heure
;
dbname
=
db
'
,
$
user
,
$
pass
)
;
...
$
dbh
=
null
;
}
catch
(
PDOException
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
.
`
`
<
br
/
>
'
'
;
die
(
)
;
}
?
>
:
:
programmation
Web
gestion
du
erreur
(
hormis
connexion
)

PDO
:
:
ERRMODE_SILENT
(
par
défaut
)

Mode
silencieux
,
mettre
en
place
de
un
code
de
erreur

PDO
:
errorCode
(
)
/
errorInfo
(
)

PDOStatement
:
errorCode
(
)
/
errorInfo
(
)

PDO
:
:
ERRMODE_WARNING

mettre
en
place
du
code
de
erreur

émission
de
un
erreur
de
type
E_WARNING

PDO
:
:
ERRMODE_EXCEPTION

mettre
en
place
du
code
de
erreur

objet
PDOException
lancer
:
:
programmation
Web
gestion
du
erreur
(
hormis
connexion
)
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
heure
;
dbname
=
db
'
,
$
user
,
$
pass
)
;
$
dbh-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
...
$
dbh
=
null
;
}
catch
(
PDOException
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
.
`
`
<
br
/
>
'
'
;
die
(
)
;
}
:
:
programmation
Web
gestion
du
erreur
:
code
de
erreur
<
?
php
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
coucou
'
'
)
;
code
SQLSTATE
if
(
$
pdo-
>
errorCode
(
)
)
{
echo
`
`
erreur
!
!
\n
'
'
;
echo
`
`
<
pre
>
\n
'
'
;
coder
erreur
spécifique
var_dump
(
$
pdo-
>
errorInfo
(
)
)
;
du
driver
echo
`
`
<
/
pre
>
\n
'
'
;
erreur
!
!
}
array
(
)
{
chaîner
erreur
spécifique
[
]
=
>
string
(
)
`
`
'
'
au
driver
[
]
=
>
int
(
)
[
]
=
>
string
(
)
`
`
erreur
de
syntaxe
près
de
'
coucou
'
à
le
ligne
'
'
}
:
:
programmation
Web
gestion
du
erreur
:
exception
<
?
php
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
coder
erreur
;
spécifique
du
driver
$
pdostat
=
$
pdo-
>
query
(
`
`
coucou
'
'
)
;
}
catch
code
(
exception
$
e
)
{
chaîner
erreur
spécifique
SQLSTATE
au
driver
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
erreur
:
SQLSTATE
[
]
:
Syntax
error
or
access
violation
:
erreur
de
syntaxe
près
de
'
coucou
'
à
le
ligne
:
:
programmation
Web
:
:
programmation
Web
exécution
de
un
requête

PDOStatement
PDO
:
:
query
(
string
statement
)
résultat
de
requête
requêter
<
?
php
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
*
FROM
client
'
'
)
;
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
du
résultat
de
un
requête

récupération
du
donné
ligne
à
ligne

un
ligne
pouvoir
être
:

un
tableau
indexer

un
tableau
associatif

un
tableau
mixte
(
par
défaut
)

un
objet
anonyme

un
objet
de
un
classe
définir
par
le
utilisateur

récupération
du
donnée
de
un
colonne
:
:
programmation
Web

parcourir
le
résultat
de
le
requête
parcourir
du
résultat
de
un
requête
select
*
résultat
de
requête
FROM
morceau
ORDER
by
mor_id
curseur
interner
+
--
--
--
--
+
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
+
|
mor_id
|
mor_nom
|
+
--
--
--
--
+
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
+
|
|
With
à
Little
Help
From
My
Friends
|
|
|
The
Letter
|
|
|
Marjorine
|
|
|
Midnight
rider
|
|
|
You
are
So
Beautiful
|
|
|
Feelin
'
Allright
|
|
|
Cry
Me
à
river
|
...
:
:
programmation
Web
exploitation
du
résultat
de
un
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
$
pdostat-
>
setFetchMode
(
PDO
:
:
FETCH_ASSOC
)
;
foreach
(
$
pdostat
avoir
$
ligne
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
du
résultat
de
un
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
foreach
(
$
pdostat-
>
fetchAll
(
PDO
:
:
FETCH_ASSOC
)
avoir
$
ligne
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
du
résultat
de
un
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
while
(
$
ligne
=
$
pdostat-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
mode
de
récupération
du
donnée
(
)

PDO
:
:
FETCH_ASSOC

retourner
chaque
ligne
dans
un
tableau
indexer
par
le
nom
du
colonne
comme
elle
être
retourner
dans
le
jeu
de
résultat
correspondre
.
si
le
jeu
de
résultat
contenir
de
multiple
colonne
avec
le
même
nom
,
PDO
:
:
FETCH_ASSOC
retourner
un
seul
valeur
par
nom
de
colonne
.

PDO
:
:
FETCH_NUM

retourner
chaque
ligne
dans
un
tableau
indexer
par
le
numéro
du
colonne
comme
elle
être
retourner
dans
le
jeu
de
résultat
correspondre
,
en
commencer
à
.
:
:
programmation
Web
mode
de
récupération
du
donnée
(
)

PDO
:
:
FETCH_BOTH
(
par
défaut
)

retourner
chaque
ligne
dans
un
tableau
indexer
par
le
nom
du
colonne
ainsi
que
leur
numéro
,
comme
elle
être
retourner
dans
le
jeu
de
résultat
correspondre
,
en
commencer
à
.

PDO
:
:
FETCH_OBJ

retourner
chaque
ligne
dans
un
objet
avec
le
nom
de
propriété
correspondre
au
nom
du
colonne
comme
elle
être
retourner
dans
le
jeu
de
résultat
.
:
:
programmation
Web
mode
de
récupération
du
donnée
(
)

PDO
:
:
FETCH_BOUND

retourner
true
et
assigner
le
valeur
du
colonne
du
jeu
de
résultat
dans
le
variable
PHP
auquel
elle
être
lier
avec
le
méthode
PDOStatement
:
:
bindParam
(
)
ou
le
méthode
PDOStatement
:
:
bindColumn
(
)
.

PDO
:
:
FETCH_CLASS
|
PDO
:
:
FETCH_CLASSTYPE

retourner
un
nouveau
instance
de
le
classe
demander
,
lier
le
colonne
au
propriété
nommer
dans
le
classe
.
nom
de
le
classe
=
1er|1ère
colonne
.
:
:
programmation
Web
mode
de
récupération
du
donnée
(
)

PDO
:
:
FETCH_INTO

mettre
à
jour
un
instance
existant
de
le
classe
demander
,
lier
le
colonne
du
jeu
de
résultat
au
nom
du
propriété
de
le
classe
.

PDO
:
:
FETCH_LAZY

retourner
chaque
ligne
en
tant
que
objet
avec
le
nom
du
attribut
correspondre
au
nom
du
colonne
retourner
dans
le
jeu
de
résultat
.

PDO
:
:
FETCH_LAZY
créer
le
nom
du
attribut
de
le
objet
comme
il
être
rencontrer
.
:
:
programmation
Web
exemple
avec
PDO
:
:
FETCH_CLASS
$
stmt
=
$
pdo-
>
query
(
<
<
<
SQL
select
id
,
name
FROM
artist
WHERE
id
=
SQL
)
;
$
stmt-
>
setFetchMode
(
PDO
:
:
FETCH_CLASS
,
'
Artist
'
)
;
if
(
(
$
object
=
$
stmt-
>
fetch
(
)
)
!
=
=
false
)
{
return
$
object
;
Instancie
un
objet
de
le
classe
Artist
}
dont
le
attribut
être
supposer
être
id
et
name
:
:
programmation
Web
préparation
de
un
requête

déroulement
de
un
requête
SQL
.
.
.
.




analyser
compilation
optimisation
exécution
exécution
répéter
de
un
requête
:
préparation
de
un
requête
:
exécution
répéter
de
un
requête
préparé
:
préparation
en
fonction
de
paramètre
:


:
:
anonyme
nommer
programmation
Web
:
:
programmation
Web
préparation
de
un
requête

PDOStatement
PDO
:
:
prepare
(
string
statement
[
,
array
driver_option
]
)

statement
:
le
requête
à
préparer
.
pouvoir
contenir
du
paramètre
anonyme
(
?
)
ou
nommer
(
:
nom
)

driver_option
:
tableau
de
option
du
driver

retourner
un
objet
PDOStatement
qui
effectuer
le
association
du
paramètre
et
exécuter
le
requête
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
?
'
'
)
;
:
:
programmation
Web
association
du
paramètre
de
un
requête

bool
PDOStatement
:
:
bindValue
(
mixed
parameter
,
mixed
valoir
[
,
int
data_type
]
)

parameter
:
le
paramètre
(
nom
ou
position
[
...
n
]
)

value
:
son
valeur

data_type
:
le
type
de
le
valeur

PDO
:
:
PARAM_BOOL
booléen
.

PDO
:
:
PARAM_NULL
NULL
SQL
.

PDO
:
:
PARAM_INT
INTEGER
SQL
.

PDO
:
:
PARAM_STR
char
,
VARCHAR
ou
autre
chaîne
.

PDO
:
:
PARAM_LOB
'
'
objet
large
'
'
SQL
.

bool
PDOStatement
:
:
execute
(
[
array
parameters
]
)

parameters
:
tableau
associatif
ou
indexer
du
valeur
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
?
'
'
)
;
paramètre
anonyme
$
pdostat-
>
bindValue
(
,
'
root
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
du
résultat
$
pdostat-
>
bindValue
(
,
'
cutrona
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
du
résultat
association
préparation
de
un
valeur
valeur
delalarequête
au
requête
1er
paramètre
association
exécution
de
un
de
au
1er
paramètre
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
:
utilisateur
'
'
)
;
paramètre
nommer
$
pdostat-
>
bindValue
(
'
:
utilisateur
'
,
'
root
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
du
résultat
$
pdostat-
>
bindValue
(
'
:
utilisateur
'
,
'
cutrona
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
du
résultat
association
préparation
exécution
de
un
valeur
de
dela
au
larequête
requêter
paramètre
nommer
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
paramètre
WHERE
user
=
?
'
'
)
;
anonyme
$
pdostat-
>
execute
(
array
(
'
root
'
)
)
;
/
/
utilisation
du
résultat
$
pdostat-
>
execute
(
array
(
'
cutrona
'
)
)
;
/
/
utilisation
du
résultat
association
association
préparation
exécution
de
un
de
un
valeur
valeur
de
delalarequête
au
au
requête
1er
1er
paramètre
paramètre
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
:
utilisateur
'
'
)
paramètre
nommé
;
$
pdostat-
>
execute
(
array
(
'
:
utilisateur
'
=
>
'
root
'
)
)
;
/
/
utilisation
du
résultat
$
pdostat-
>
execute
(
array
(
'
:
utilisateur
'
=
>
'
cutrona
'
)
)
;
/
/
utilisation
du
résultat
association
préparation
exécution
de
un
valeur
de
dela
au
larequête
requêter
paramètre
nommer
:
:
programmation
Web
intérêt
du
requête
préparer

amélioration
du
performance
en
cas
de
exécution
répéter

émulation
faire
par
PDO
si
le
driver
ne
la|le
supporter
pas
nativement

protection
automatique
du
valeur
du
paramètre
pour
interdire
le
attaque
par
injection
de
code
SQL
:
:
programmation
Web
:
:
programmation
Web
attaque
par
injection
SQL
?

ex
:
validation
de
un
login
/
pass
sur
un
site

requête
consister
à
trouver
un
enregistrement
correspondre
au
couple
login
/
pass
fournir
par
le
utilisateur

select
*
FROM
membrer
WHERE
login
=
'
{
$
_GET
[
'
login
'
]
}
'
AND
passwd
=
'
{
$
_GET
[
'
passwd
'
]
}
'

et
si
on
essayer
de
fournir
un
mot
de
passe
un
peu
particulier
...
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
pdostat
=
$
pdo-
>
query
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
WHERE
login
=
'
{
$
_GET
[
'
login
'
]
}
'
AND
passwd
=
'
{
$
_GET
[
'
passwd
'
]
}
'
SQL
)
;
echo
`
`
requête
:
\n
$
req\n
'
'
;
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
'
'
;
else
echo
`
`
désoler
...
'
'
;
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
saisir
de
le
utilisateur
par
formulaire
:

mail
:
whatever

pass
:
who_cares
?
URL
:
?
mail
=
whatever
&
passwd
=
who_cares
?
requête
:
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
?
'
désoler
...
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
saisir
de
le
utilisateur
:

mail
:
whatever

pass
:
who_cares
?
'
or
true
!
=
'
URL
:
?
mail
=
whatever
&
passwd
=
who_cares
?
'
%
20OR
%
20true
!
=
'
requête
:
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
?
'
or
true
!
=
'
'
bienvenue
John
:
:
programmation
Web
protection
contre
le
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
pdostat
=
$
pdo-
>
prepare
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
WHERE
login
=
?
AND
passwd
=
?
SQL
)
;
$
pdostat-
>
execute
(
array
(
$
_GET
[
'
login
'
]
,
$
_GET
[
'
passwd
'
]
)
)
;
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
{
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
\n
'
'
;
}
else
{
echo
`
`
désoler
...
\n
'
'
;
}
:
:
programmation
Web
protection
contre
le
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
login
=
$
pdo-
>
quote
(
$
_GET
[
'
login
'
]
)
;
$
passwd
=
$
pdo-
>
quote
(
$
_GET
[
'
passwd
'
]
)
;
$
pdostat
=
$
pdo-
>
query
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
requête
:
WHERE
login
=
$
login
select
*
AND
passwd
=
$
passwd
FROM
membrer
SQL
WHERE
login
=
'
whatever
'
)
;
AND
passwd
=
'
who_cares
?
\
'
or
true
!
=
\
'
'
echo
`
`
requête
:
\n
$
req\n
'
'
;
désoler
...
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
{
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
\n
'
'
;
}
:
:
programmation
Web
