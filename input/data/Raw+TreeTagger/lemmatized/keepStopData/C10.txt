développement
Web
–
PHP
cours|cour
organisation
•
séance
•
un
séance
=
1h30
cours|cour
1h30
TD
,
projet
•
projet
en
binôme
ou
en
solo
(
selon
le
groupe
du
premier
semestre
)
•
devoir
sur
table
•
Interros
surprendre
minute
•
participation
,
travail
continu
noter
sous
forme
de
point
bonus
•
TD
de
le
semaine
,
divers
document
et
information
divers
sur
l
’
EPI
•
fin
cours|cour
avril
•
Evaluation
–
contrôle
continu
(
%
)
•
devoir
maison
•
projet
•
devoir
sur
table
•
interrogation
surprendre
•
bonus
participation
–
examen
partiel
(
%
)
programme
du
cours|cour
•
introduction
général
au
web
–
architecture
technique
–
rappel
sur
HTML
et
le
différence
statique
/
dynamique
–
explication
sur
l
’
environnement
web
–
premier
pas
en
PHP
–
installation
WAMP
/
MAMP
/
XAMP
•
PHP
•
PHP
et
MySQL
architecturer
général
d
’
un
site
web
base
de
donnée
(
information
brut
)
navigateur
serveur
Web
(
utilisateur
)
(
site
visible
)
serveur
d
’
application
(
traitement
interne
)
front
office
Back
office
architecturer
général
d
’
un
site
web
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
architecturer
général
d
’
un
site
web
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
architecturer
général
d
’
un
site
web
navigateur
serveur
Web
&
base
de
donnée
apache
XAMP
front
office
Back
office
rappel
du
version
du
technologie
vérifier
bien
le
version
de
tutoriaux
que
vous
trouver
sur
Internet
!
§
HTML
pas
vraiment
de
version
minimal
hormis
...
le
navigateur
interpréter
ce
qu
’
il
pouvoir
§
HTML
version
actuel
(
passe
aussi
)
§
PHP
obsolète
et
non-supporté
(
+
faille
de
sécurité
)
§
PHP
supporter
§
PHP
version
actuel
§
MySQL
version
actuel
(
mais
peu
de
souci
avec
le
langage
,
car
standard
SQL
,
excepté
si
tutorial
<
=
MySQL
)
rappel
du
version
du
technologie
vérifier
bien
le
version
de
tutoriaux
que
vous
trouver
sur
Internet
!
§
documentation
PHP
:
http
:
/
/
dns-remplacer
/
manual
/
fr
/
§
exemple
concret
avec
le
fonction
de
chaîne
:
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
rappel
HTML
•
Header
/
body
•
lister
•
tableau
•
image
et
lien
HTML
chaque
balise
ouvert
html
devoir
être
fermer
<
html
>
<
balise
>
...
<
/
balise
>
head
body
<
head
>
<
title
>
exemple
HTML
<
/
title
>
title
h1
p
p
<
/
head
>
<
body
>
i
b
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
ceci
être
<
i
>
really
<
/
i
>
<
b
>
importer
<
/
b
>
.
<
/
p
>
<
p
>
le
informatique
pouvoir
vous
aider
!
<
/
p
>
<
/
body
>
<
/
html
>
HTML
•
structure
d
’
un
document
HTML
<
!
DOCTYPE
html
>
indication
«
idiome
»
HTML
<
html
>
<
head
>
<
meta
name
=
'
'
author
'
'
content
=
entêter
(
head
)
'
'
Manuele
kirsch
Pinheiro
'
'
/
>
information
général
<
title
>
exemple
HTML
<
/
title
>
sur
le
document
<
/
head
>
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
ceci
être
<
i
>
really
<
/
i
>
corps
(
body
)
<
b
>
importer
<
/
b
>
.
<
/
p
>
contenir
du
document
<
p
>
le
informatique
pouvoir
vous
aider
!
<
/
p
>
<
/
body
>
<
/
html
>
HTML
•
Elément
DOCTYPE
–
indiquer
au
navigateur
quel
version
de
HTML
avoir
être
utiliser
–
HTML
•
couramment
comprendre
par
tout
le
navigateur
<
!
DOCTYPE
html
public
'
'
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
en
'
'
http
:
/
/
dns-remplacer
/
TR
/
html4
/
dns-remplacer
>
–
HTML
<
!
DOCTYPE
html
>
•
en
cours|cour
de
définition
•
reconnaître
uniquement
par
le
navigateur
le
plus
récent
(
Google
chromer
,
Firefox
,
Internet
explorer
...
)
HTML
•
Eléments
de
l
’
entêter
(
head
)
<
head
>
<
meta
name
=
'
'
author
'
'
–
information
complémentaire
content
=
'
'
Manuele
'
'
/
>
sur
le
document
<
title
>
exemple
HTML
<
/
title
>
<
/
head
>
–
ce
n
’
être
pas
le
contenu
du
document
,
donc
ce
information
ne
être
pas
afficher
dans
le
page
–
typiquement
,
information
pour
le
moteur
de
recherche
•
balise
–
<
titre
>
...
<
/
titre
>
:
titre
du
document
–
<
meta
...
/
>
:
métadonner
(
description
)
sur
le
document
–
<
link
...
/
>
,
<
styler
>
...
<
/
style
>
:
style
HTML
•
Eléments
de
l
’
entêter
(
head
)
<
title
>
exemple
HTML
<
/
title
>
ouverture
et
fermeture
de
le
balise
<
meta
name
=
'
'
author
'
'
content
=
'
'
auteur
'
'
/
>
attribut
associer
à
le
balise
le
élément
de
précision
sur
un
balise
l
’
entêter
ne
être
chaque
balise
posséder
son
ensemble
pas
visible
dans
le
corps
du
d
’
attribut
document
<
baliser
attribut
=
'
'
valeur
'
'
...
>
<
meta
name
=
'
'
description
'
'
value
=
'
'
...
'
'
/
>
<
meta
charset
=
'
'
ISO-8859-1
'
'
>
HTML
•
Eléments
du
corps
(
body
)
<
body
>
–
contenir
du
document
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
ceci
être
<
i
>
really
<
/
i
>
–
partie
rendre
visible
par
le
<
b
>
importer
<
/
b
>
.
<
/
p
>
navigateur
<
p
>
le
informatique
pouvoir
vous
•
balise
:
il
y
en
avoir
plein
...
aider
!
<
/
p
>
<
/
body
>
–
titre
:
<
h@card@
>
,
<
h@card@
>
...
<
h@card@
>
–
paragraphe
et
saut
de
ligne
:
<
p
>
et
<
br
/
>
–
citation
et
mettre
en
valeur
:
<
b
>
,
<
i
>
,
<
blockquote
>
...
–
image
et
lien
:
<
img
>
,
<
avoir
...
>
...
–
liste
:
<
ol
>
,
<
ul
>
,
<
li
>
–
tableau
:
<
table
>
,
<
tr
>
,
<
td
>
...
–
organisation
du
document
:
<
div
>
,
<
section
>
...
HTML
•
Eléments
du
corps
(
body
)
•
le
titre
:
h1
,
h2
,
h3
,
h4
,
h5
,
h@card@
–
le
élément
heure
x
permettre
de
définir
du
titre
de
différent
niveau
•
h1
correspondre
au
titre
principal
–
il
devoir
apparaître
dans
l
’
ordre
(
h1
avant
h2
)
avec
un
seul
titre
principal
(
h1
)
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
h1
...
<
/
body
>
HTML
•
Eléments
du
corps
(
body
)
•
paragraphe
,
saut
de
ligne
et
citation
...
–
le
balise
<
p
>
...
<
/
p
>
indiquer
un
paragraphe
–
le
balise
<
br
/
>
faire
un
simple
saut
de
ligne
–
le
balise
<
b
>
...
<
/
b
>
et
<
i
>
...
<
/
i
>
mettre
un
texte
en
relief
(
en
gras
ou
en
italique
)
–
le
balise
<
blockquote
>
...
<
/
blockquote
>
permettre
de
citer
un
autre
page
Web
<
blockquote
citer
=
'
'
http
:
/
/
source
/
'
'
>
citation
<
/
blockquote
>
–
le
balise
<
hr
/
>
permettre
d
’
établir
un
séparation
(
ligne
horizontal
)
dans
le
document
HTML
•
Eléments
body
<
html
>
h@card@
<
head
>
...
<
/
head
>
<
body
>
h2
i
<
h@card@
>
exemple
h1
<
/
h@card@
>
br
<
h@card@
>
exemple
h2
<
/
h@card@
>
p
<
p
>
ceci
être
un
paragraphe
avec
un
<
i
>
terme
technique
<
/
i
>
et
un
b
<
br
/
>
<
b
>
mot-clé
<
/
b
>
.
<
/
p
>
<
blockquote
citer
=
'
'
http
:
/
/
dns-remplacer
/
wiki
/
Hypertext_markup_language
'
'
>
HTML
n
’
être
pas
concevoir
pour
spécifier
l
’
apparence
visuel
exact
du
document
.
<
/
blockquote
>
hr
<
hr
/
>
<
p
>
le
informatique
pouvoir
vous
aider
!
<
/
p
>
blockquote
<
/
body
>
<
/
html
>
HTML
•
HTML
–
langage
de
balise
,
permettre
le
structuration
du
page
Web
–
organisation
en
balise
<
baliser
attr
=
'
'
valeur
'
'
>
...
<
/
balise
>
–
organisation
du
document
•
entêter
:
head
•
corps
du
document
:
body
–
différent
type
de
balise
possible
•
liste
,
tableau
,
image
,
lien
...
HTML
:
liste
•
plusieurs
type
de
liste
être
possible
–
liste
numéroter
:
<
ol
>
...
<
/
ol
>
–
liste
non-numérotés
:
<
ul
>
...
<
/
ul
>
–
peu
importer
le
liste
,
un
seul
moyen
d
’
indiquer
le
élément
:
<
li
>
...
<
/
li
>
<
ol
>
<
li
>
item
<
/
li
>
<
li
>
item
<
/
li
>
<
/
ol
>
<
ul
>
<
li
>
Premier
item
<
/
li
>
<
li
>
second
item
<
/
li
>
<
/
ul
>
HTML
:
tableau
•
pour
créer
un
tableau
en
HTML
,
on
aller
combiner
plusieurs
balise
:
–
table
,
tr
,
td
,
caption
,
th
,
thead
,
tbody
<
tabler
border
=
'
'
'
'
>
tableau
<
tr
>
<
table
>
ligner
<
td
>
HTML
<
/
td
>
<
tr
>
<
td
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
cellule
<
/
tr
>
<
td
>
<
/
table
>
HTML
:
tableau
<
tabler
border
=
'
'
'
'
>
caption
:
légende
<
caption
>
historique
du
HTML
<
/
caption
>
<
thead
>
thead
:
entêter
du
tableau
<
tr
>
<
th
>
version
<
/
th
>
th
:
cellule
de
l
’
entêter
<
th
>
année
<
/
th
>
<
/
tr
>
<
/
thead
>
tbody
:
corps
du
<
tbody
>
tableau
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
/
tbody
>
<
/
table
>
HTML
:
image
•
insertion
d
’
image
dans
le
texte
:
balise
img
<
img
src
=
'
'
dns-remplacer
'
'
width
=
'
'
'
'
alt
=
'
'
texte
'
'
/
>
texte
alternatif
tailler
optionnel
infobulle
width
=
'
'
'
'
height
=
'
'
'
'
src
:
où
se
trouver
l
’
image
dns-remplacer
soit
elle
être
avec
le
page
Web
img
(
répertoire
)
src
=
'
'
.\img\Paris_
dns-remplacer
'
'
Paris_
dns-remplacer
(
fichier
)
soit
elle
être
sur
un
serveur
:
src
=
'
'
http
:
/
/
dns-remplacer
/
image
/
dns-remplacer
'
'
HTML
:
image
•
balise
HTML
:
image
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
image
distant
:
<
img
src
=
'
'
http
:
/
/
dns-remplacer
/
image
/
dns-remplacer
'
'
width
=
'
'
'
'
alt
=
'
'
cochonnet
et
petanques
'
'
/
>
<
/
p
>
<
p
>
image
local
:
<
img
src
=
'
'
.\img\Paris_
dns-remplacer
'
'
height
=
'
'
'
'
alt
=
'
'
vue
de
Paris
'
'
/
>
<
/
p
>
<
/
body
>
<
/
html
>
HTML
:
lien
•
L
’
usage
du
lien
permettre
de
relier
un
page
Web
à
d
’
autre
page
,
voire
à
d
’
autre
point
dans
le
page
<
avoir
href
=
'
'
ref
'
'
>
lien
visible
<
/
avoir
>
•
L
’
attribut
href
indiquer
vers
où
aller
lorsqu
’
on
cliquer
sur
le
lien
–
lien
local
:
<
avoir
href
=
'
'
dns-remplacer
'
'
>
vers
autre
page
<
/
avoir
>
–
lien
distant
:
<
avoir
href
=
'
'
http
:
/
/
serveur
/
dns-remplacer
'
'
>
ailleurs
<
/
avoir
>
–
envoyer
un
mail
:
<
avoir
href
=
'
'
mailto
:
monemail
@
dns-remplacer
'
'
>
envoyer
mail
<
/
avoir
>
HTML
:
lien
on
attribuer
un
identificateur
<
baliser
id
=
'
'
identificateur
'
'
>
<
h@card@
id
=
'
'
debut
'
'
>
lien
<
/
h@card@
>
<
p
>
lien
vers
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
'
'
>
le
EPI
<
/
avoir
>
<
/
p
>
<
p
>
lien
vers
<
avoir
href
=
'
'
dns-remplacer
'
'
>
exemple
tableau
<
/
avoir
>
<
/
p
>
<
p
>
envoyer
un
mail
à
<
avoir
href
=
'
'
mailto
:
moi
@
dns-remplacer
'
'
>
moi
<
/
avoir
>
<
/
p
>
<
p
>
...
.
<
/
p
>
lien
vers
l
’
identificateur
<
avoir
href
=
'
'
#
identificateur
'
'
>
<
p
>
<
avoir
href
=
'
'
dns-remplacer
#
debut
'
'
>
retourner
au
début
<
/
avoir
>
<
/
p
>
statique
vs
dynamique
•
statique
:
partie
«
fixe
»
du
page
–
HTML
renvoyer
au
client
:
le
–
CSS
parti
qui
ne
changer
pas
–
JavaScript
(
JS
)
quoi
qu
’
il
arriver
•
dynamique
:
–
CGI
partie
«
variable
»
du
page
–
PHP
renvoyer
au
client
:
le
–
java
parti
qui
changer
selon
–
JavaScript
(
JS
)
le
requête
et
le
–
...
information
disponible
statique
vs
dynamique
•
site
web
statique
:
aucun
changement
dans
le
page
lorsque
l
’
on
«
rafraichit
»
/
refaire
le
même
requête
•
dynamique
:
le
page
évoluer
selon
le
information
externe
(
à
chaque
requête
,
en
général
)
statique
vs
dynamique
•
site
web
statique
body
{
<
html
>
background-color
:
<
head
>
lightblue
;
<
link
rel
=
'
'
stylesheet
'
'
}
type
=
'
'
text
/
css
'
'
href
=
'
'
dns-remplacer
'
'
>
h@card@
{
<
/
head
>
color
:
navy
;
<
body
>
margin-left
:
20px
;
<
/
body
>
}
<
/
html
>
CSS
HTML
statique
vs
dynamique
•
site
web
dynamique
body
{
<
html
>
<
?
php
background-color
:
<
head
>
include
(
`
`
dns-remplacer
'
'
)
;
lightblue
;
<
link
rel
=
'
'
stylesheet
'
'
echo
'
'
<
body
>
'
'
;
}
type
=
'
'
text
/
css
'
'
Var
=
;
href
=
'
'
dns-remplacer
'
'
>
echo
'
'
valeur
:
$
Var
'
'
;
h1
{
<
/
head
>
color
:
navy
;
echo
'
'
<
/
body
>
'
'
;
margin-left
:
20px
;
include
(
`
`
dns-remplacer
'
'
)
;
}
?
>
CSS
HTML
PHP
apache
,
URI
/
URL
,
DNS
,
PHP
•
serveur
Web
:
apache
(
traiter
le
connexion
et
transmettre
le
requête
)
•
S
’
appuyer
sur
HTTP
,
URI
/
URL
,
DNS
(
pour
communiquer
ainsi
que
comprendre
quel
ressourcer
et
quel
site
être
viser
)
•
extension
au
serveur
web
:
PHP
(
lire
le
requête
qu
’
apache
lui
transmettre
,
et
faire
le
traitement
demander
)
apache
&
PHP
•
apache
aller
traiter
le
connexion
et
requête
•
PHP
aller
construire
le
réponse
en
exécuter
le
logique
métier
(
le
code
)
navigateur
serveur
Web
apache
apache
•
apache
:
serveur
web
libre
et
gratuit
disposer
d
’
extension
pour
se
lier
à
PHP
ou
à
d
’
autre
outil
pour
traiter
le
requête
navigateur
serveur
Web
apache
apache
•
apache
:
usage
classique
associer
du
fichier
à
du
requête
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
dns-remplacer
navigateur
serveur
Web
apache
apache
.
client
envoyer
un
requête
avec
le
ressource
viser
.
apache
lire
le
requête
,
et
chercher
le
fichier
.
apache
répondre
à
le
requête
en
envoyer
le
fichier
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
<
html
>
navigateur
coucou
serveur
Web
<
/
html
>
dns-remplacer
apache
apache
•
requête
et
réponse
transmettre
avec
:
–
HTTP
ou
HTTP
ou
HTTP
/
–
(
HyperText
Transfer
Protocol
)
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
protocole
pour
transmettre
le
apache
information
:
HTTP
apache
apache
•
serveur
web
s
’
appuyer
donc
,
sur
:
–
protocole
HTTP
(
utiliser
généralement
le
port
)
–
protocole
HTTPS
(
utiliser
généralement
le
port
)
[
S
pour
«
secure
»
,
en
utiliser
du
certificat
pour
chiffrer
le
connexion
et
pour
s
’
assurer
que
l
’
hôte
/
host
être
bien
celui
que
l
’
on
chercher
]
•
pour
pouvoir
communiquer
avec
le
navigateur
apache
&
URI
/
URL
•
identification
du
ressource
avec
URI
et
URL
–
URI
:
Uniform
Resource
identifier
adresse
unique
vers
–
URL
:
Uniform
Resource
Locator
le
ressource
«
dns-remplacer
»
GET
dns-remplacé
http
:
/
/
dns-remplacer
/
dns-remplacer
(
GET
dns-remplacer
)
coucou
<
html
>
<
html
>
coucou
navigateur
coucou
serveur
Web
<
/
html
>
<
/
html
>
dns-remplacer
dns-remplacé
apache
apache
&
URI
/
URL
•
identification
du
ressource
avec
URI
et
URL
•
http
:
/
/
dns-remplacer
/
dns-remplacer
–
ressource
:
«
dns-remplacer
»
–
dans
le
dossier
:
«
/
»
(
le
racine
)
–
sur
le
site
web
:
«
http
:
/
/
dns-remplacer
»
•
ftp
:
/
/
dns-remplacer
/
image
/
dns-remplacer
–
ressource
:
«
dns-remplacer
»
–
dans
le
dossier
:
«
/
image
/
»
–
sur
le
machine
«
dns-remplacer
»
accessible
en
«
ftp
:
/
/
»
apache
&
URI
/
URL
apache
&
DNS
•
chaque
machine
sur
Internet
être
identifier
par
son
IP
•
exemple
IPV4
:
ip-remplacée
>
ou
ip-remplacée
>
•
exemple
IPV6
:
:
0db8
:
85a3
:
:
:
8a2e
:
:
•
pas
très
pratique
pour
visiter
du
site
web
...
...
mais
parfait
pour
rendre
unique
un
machine
apache
&
DNS
•
DNS
:
Domain
Name
System
•
gérer
le
«
nom
de
domaine
»
(
exemple
:
dns-remplacer
)
•
permettre
de
lier
un
nom
de
domaine
à
un
ou
du
IP
•
permettre
de
gérer
du
«
sous-domaine
»
•
exemple
:
dns-remplacer
dns-remplacer
dns-remplacer
•
«
www
»
et
«
ent
»
être
du
sous-domaine
apache
&
DNS
apache
&
DNS
.
client
envoyer
un
requête
avec
le
ressource
viser
.
apache
lire
le
requête
,
et
chercher
le
fichier
.
apache
répondre
à
le
requête
en
envoyer
le
fichier
GET
dns-remplacé
host
dns-remplacer
<
html
>
GET
dns-remplacé
GET
dns-remplacer
coucou
host
dns-remplacer
host
dns-remplacer
<
/
html
>
coucou
Pouet
dns-remplacer
<
html
>
<
html
>
navigateur
coucou
Pouet
serveur
Web
<
html
>
<
/
html
>
<
/
html
>
Pouet
<
/
html
>
dns-remplacer
dns-remplacé
apache
dns-remplacé
apache
&
DNS
•
plusieurs
nom
de
domaine
pouvoir
renvoyer
vers
le
même
IP
•
le
serveur
web
pouvoir
donc
afficher
du
site
différent
selon
l
’
hôte
demander
dans
le
requête
–
chez
apache
,
on
appeler
cela
du
«
virtual
host
»
(
vhost
)
–
pour
gérer
cela
,
vous
devoir
avoir
accès
à
le
configuration
du
serveur
web
.
ce
qui
n
’
être
pas
toujours
le
cas
lorsque
vous
souscrire
à
un
service
«
d
’
hébergement
web
»
.
•
pour
avoir
un
«
bon
»
site
,
il
être
utile
de
lui
choisir
un
nom
de
domaine
pertinent
–
le
certificat
pour
mettre
du
HTTPS
se
baser
sur
le
nom
de
domaine
,
et
pas
sur
le
IP
apache
&
PHP
•
PHP
être
un
extension
à
côté
de
apache
<
html
>
–
apache
configurer
pour
appeler
PHP
lorsqu
’
il
<
?
php
voir
passer
un
requête
terminer
par
«
.php
»
echo
'
'
B
'
'
;
?
>
–
PHP
traiter
le
fichier
en
question
,
et
produire
<
/
html
>
un
réponse
renvoyer
par
apache
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
B
<
html
>
navigateur
serveur
Web
<
html
>
B
B
<
/
html
>
<
/
html
>
apache
dns-remplacé
dns-remplacé
apache
&
CGI
•
CGI
:
Common
Gateway
interface
–
du
outil
autre
que
PHP
pouvoir
être
appeler
par
le
<
html
>
serveur
web
...
–
<
/
html
>
CGI
être
un
standard
pour
envoyer
le
requête
au
autre
outil
,
et
lire
leur
réponse
dns-remplacé
GET
dns-remplacer
GET
dns-remplacer
hello
CGI
<
html
>
navigateur
serveur
Web
<
html
>
B
hello
<
/
html
>
<
/
html
>
CGI
apache
dns-remplacé
dns-remplacer
objectif
du
cours|cour
:
création
d
’
un
site
Web
dynamique
PHP
PHP
•
PHP
être
un
langage
de
programmation
utiliser
pour
le
construction
de
site
Web
dynamique
–
page
PHP
:
page
Web
qui
contenir
de
PHP
•
on
aller
mélanger
le
PHP
au
code
HTML
/
CSS
•
le
code
PHP
aller
être
analyser
par
le
serveur
•
le
résultat
aller
être
un
nouveau
page
Web
mettre
à
jour
automatiquement
par
le
code
PHP
dns-remplacer
<
html
>
...
le
code
PHP
être
à
<
?
php
l
’
intérieur
de
le
balise
date_default_timezone_set
(
`
`
Europe
/
Paris
'
'
)
;
<
?
php
...
?
>
ou
entourer
par
le
balise
echo
'
'
<
p
styler
=
'
font-style
:
italic
;
'
>
Paris
,
le
'
'
<
script
language
=
'
'
php
'
'
>
.date
(
'
d
/
m
/
y
'
)
.
`
`
<
/
p
>
'
'
;
...
<
/
script
>
?
>
...
<
/
html
>
PHP
PHP
:
Php
Hypertext
Preprocessor
.
Ø
langage
interpréter
pour
créer
du
site
dynamique
Ø
langage
de
script
côté
serveur
Ø
langage
faiblement
typer
Ø
langage
«
Embedded
HTML
»
Ø
open
source
:
PHP
avoir
permettre
de
créer
un
grand
nombre
de
site
web
célèbre
,
comme
Facebook
,
Wikipédia
,
etc
.
commande
PHP
de
base
•
variable
•
type
•
opérateur
•
fonction
•
echo
,
gettype
,
unset
installation
et
configuration
de
PHP
il
suffire
de
télécharger
le
suite
logiciele
:
•
WAMP
:
http
:
/
/
dns-remplacer
/
•
MAMP
:
http
:
/
/
dns-remplacer
/
•
XAMPP
:
https
:
/
/
dns-remplacer
/
fr
/
et
un
éditeur
de
texte
:
•
Sublim
Text
(
macOs
)
:
http
:
/
/
dns-remplacer
/
•
Notepad++
(
Windows
)
:
https
:
/
/
dns-remplacer
/
fr
/
•
autre
(
Linux
/
BSD
/
UNIX
)
:
emacs
,
vim
,
nano
,
gedit
,
...
introduction
au
PHP
syntaxe
de
base
:
<
!
DOCTYPE
HTML
public
'
'
-
/
/
W3C
/
/
<
!
doctype
html
>
DTD
HTML
/
/
en
'
'
'
'
http
:
/
/
<
html
>
dns-remplacer
/
TR
/
html4
/
dns-remplacer
'
'
>
<
head
>
<
title
>
titre
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
'
hello
World
!
`
`
;
?
>
<
/
body
>
<
/
html
>
commentaire
PHP
commentaire
:
commentaire
hériter
du
langage
C
et
Perl
/
/
ceci
être
un
commentaire
sur
un
seul
ligne
/
*
ceci
être
un
commentaire
sur
plusieurs
ligne
*
/
commentaire
styler
shell
#
ceci
être
un
commentaire
sur
un
seul
ligne
variable
PHP
•
le
notion
de
variable
–
un
variable
être
un
conteneur
de
valeur
–
on
pouvoir
lui
affecter
un
valeur
,
qu
’
on
aller
utiliser
plus
tard
$
variable
=
`
`
PHP5
'
'
;
le
«
$
»
indiquer
un
variable
le
«
=
»
être
un
affectation
on
attribut
un
valeur
à
le
le
nom
de
variable
variable
commencer
toujours
par
un
lettre
ou
un
«
_
»
,
sans
echo
'
'
...
$
variable
...
'
'
;
espace
on
récupérer
le
valeur
garder
dans
le
variable
par
son
nom
variable
PHP
•
le
notion
de
variable
:
le
type
du
donnée
–
le
variable
pouvoir
garder
de
valeur
de
différent
type
•
nombre
entier
(
integer
)
:
•
nombre
décimal
(
double
ou
float
)
:
•
chaîne
de
caractère
(
string
)
:
«
super
chaîne
!
»
•
logique
(
boolean
)
:
«
true
»
(
)
ou
«
false
»
–
le
fonction
gettype
(
$
variable
)
permettre
de
savoir
quel
typer
de
valeur
contenir
le
variable
•
$
entier
=
;
gettype
(
$
entier
)
-
>
integer
•
$
decimal
=
;
gettype
(
$
decimal
)
-
>
doubler
•
$
chaine
=
'
'
super
chaîne
!
`
`
;
gettype
(
$
chaine
)
-
>
string
•
$
bool
=
true
;
gettype
(
$
bool
)
-
>
boolean
variable
PHP
•
exemple
:
<
?
php
définition
d
’
un
$
entier
=
;
variable
$
decimal
=
;
$
chainer
=
'
'
super
chaîne
!
`
`
;
$
boolean
=
true
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
entier
)
.
`
`
:
$
entier
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
decimal
)
.
`
`
:
$
decimal
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
chaine
)
.
`
`
:
$
chainer
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
boolean
)
.
`
`
:
$
boolean
<
/
li
>
'
'
;
?
>
valeur
de
chaque
on
récupérer
le
gettype
(
)
variable
valeur
de
le
variable
informer
le
type
$
boolean
de
le
variable
type
de
donnée
PHP
opérateur
sur
le
chaîne
de
caractère
:
–
concaténation
:
chaine1
.
Chaine2
opérateur
logique
:
•
AND
ou
&
&
(
vrai
si
$
avoir
et
$
b
vrai
)
•
or
ou
|
|
(
vrai
si
$
avoir
ou
$
b
être
vrai
)
opérateur
arithmétique
:
•
addition
:
$
avoir
$
b
,
•
soustraction
:
$
avoir
-
$
b
,
•
multiplication
:
$
avoir
*
$
b
,
•
division
:
$
avoir
/
$
b
,
•
modulo
(
rester
de
le
division
entier
)
:
$
avoir
%
$
b
.
type
de
donnée
PHP
opérateur
arithmétique
:
•
attention
:
lorsqu
’
un
chaine
de
caractère
être
évaluer
comme
un
valeur
numérique
,
le
règle
suivant
s
’
appliquer
:
•
$
toto
=
'
'
'
'
;
#
$
toto
valoir
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
car
le
chaine
valoir
si
c
’
être
du
texte
ou
,
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
car
le
chaine
valoir
(
commencer
par
un
valeur
numérique
)
.
type
de
donnée
PHP
opérateur
de
comparaison
:
•
égal
à
:
$
avoir
=
=
$
b
•
différent
de
:
$
avoir
!
=
$
b
•
supérieur
à
:
$
avoir
>
$
b
•
inférieur
à
:
$
avoir
<
$
b
•
supérieur
ou
égal
à
:
$
avoir
>
=
$
b
•
inférieur
ou
égal
à
:
$
avoir
<
=
$
b
exemple
:
echo
$
toto
=
=
?
`
`
vrai
'
'
:
'
'
faux
'
'
;
opérateur
PHP
•
opérateur
–
différent
opérateur
permettre
de
manipuler
du
valeur
,
qu
’
il
être
dans
le
variable
ou
pas
opérateur
opérateur
opérateur
de
opérateur
logique
mathématique
string
comparaison
+
-
*
/
%
.
=
=
!
=
|
|
(
or
)
(
concaténation
)
<
=
<
>
=
>
&
&
(
AND
)
!
(
not
)
<
?
php
$
avoir
=
;
$
b
=
-
$
avoir
;
$
nom
=
'
'
toto
”
;
echo
'
'
salut
'
'
.
$
nom
;
echo
'
'
<
p
>
-
$
avoir
valoir
$
b
<
/
p
>
'
'
;
?
>
fonction
PHP
dater
déclaration
avec
:
•
DATETIME
$
date
=
new
DateTime
(
'
'
)
;
•
DATE_CREATE
:
un
alias
de
DateTime
:
:
__construct
(
)
$
date2
=
date_create
(
'
'
)
;
extraction
du
mois|moi
,
année
,
...
...
:
avec
style
procédural
en
utiliser
DATE_FORMAT
echo
date_format
(
$
date
,
'
'
m
'
'
)
;
avec
style
orienter
objet
(
OO
)
:
echo
$
date-
>
format
(
'
y
'
)
;
fonction
PHP
dater
exemple
:
•
$
date
=
date
(
'
'
d-m
y
'
'
)
;
echo
'
'
ceci
être
le
date
du
jour
'
'
.
$
date
;
•
$
heure
=
date
(
`
`
heure
:
i
:
s
'
'
)
;
echo
'
'
ce
être
l
’
heure
du
jour
'
'
.
$
heure
;
tableau
PHP
•
tableau
–
variable
capable
d
’
enregistrer
plusieurs
valeur
d
’
un
type
•
tableau
à
indice
:
attention
avoir
définir
tout
–
chaque
position
être
identifier
par
le
position
avant
de
le
un
numéro
(
commencer
par
)
utiliser
ou
il
y
avoir
un
•
message
d
’
erreur
.
$
tableau
[
]
=
'
'
à
'
'
;
•
$
tableau
[
]
=
'
'
B
'
'
;
•
$
tableau
[
]
=
'
'
fin
'
'
;
•
à
B
fin
suite
$
tableau
[
]
=
'
'
suite
'
'
;
•
tableau
associatif
:
–
chaque
position
recevoir
un
identifier
(
un
label
)
Jean
Dupont
•
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
•
Prenom
nom
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
tableau
PHP
le
tableau
de
PHP
ressembler
au
tableau
associatif
(
hash-
table
)
.
•
L
’
index
être
appeler
clé
•
le
valeur
associer
à
le
clé
être
appeler
valeur
on
déclarer
un
tableau
de
deux
façon
:
•
utiliser
le
fonction
array
(
)
pour
créer
un
tableau
•
ou
affecter
directement
le
valeur
au
tableau
PHP
message
d
’
erreur
car
le
<
head
>
...
contenir
de
le
position
<
style
>
...
<
/
style
>
(
$
tableau
[
]
)
n
’
avoir
pas
<
/
head
>
être
définir
auparavant
.
<
body
>
...
<
h@card@
>
tableau
à
indice
<
/
h2
>
<
table
>
<
?
php
$
tableau
[
]
=
'
'
à
'
'
;
$
tableau
[
]
=
'
'
B
'
'
;
$
tableau
[
]
=
'
'
fin
'
'
;
contenir
de
le
$
tableau
[
]
=
'
'
suite
'
'
;
position
(
$
tableau
[
]
)
echo
'
'
<
tr
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
/
tr
>
`
`
;
?
>
<
/
table
>
...
tableau
PHP
...
<
h@card@
>
tableau
associatif
<
/
h@card@
>
<
table
>
<
tr
>
<
th
>
nom
<
/
th
>
<
th
>
prénom
<
/
th
>
<
/
tr
>
<
?
php
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
echo
'
'
<
tr
>
<
td
>
'
'
.
$
tableauAssoc
[
`
`
nom
'
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
tableauAssoc
[
`
`
Prenom
'
'
]
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
?
>
<
/
table
>
<
/
body
>
tableau
PHP
fonction
sur
le
tableau
:
•
sizeof
(
)
:
retourner
le
nombre
d
’
élément
d
’
un
tableau
,
ou
•
count
(
)
:
retourner
le
nombre
d
’
élément
d
’
un
tableau
s
’
il
exister
,
si
le
variable
n
’
être
pas
un
tableau
et
si
le
variable
n
’
exister
pas
.
tableau
PHP
exemple
:
•
$
suite
=
array
(
,
,
,
)
;
•
$
tab
[
]
=
;
•
$
tab
[
]
=
'
'
toto
'
'
;
#
on
pouvoir
mélanger
le
contenu
•
$
tab
[
`
`
chaine
'
'
]
=
'
'
valeur
'
'
;
#
on
pouvoir
mélanger
le
clé
.
•
$
personne
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
'
'
Smith
'
'
)
;
tableau
PHP
parcourir
un
tableau
:
<
?
php
/
/
on
créer
notre
array
$
prenom
$
prenom
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
/
/
puis
on
faire
un
boucle
pour
tout
afficher
:
for
(
$
numero
=
;
$
numero
<
;
$
numero++
)
{
echo
$
prenom
[
$
numero
]
.
'
<
br
/
>
'
;
}
?
>
tableau
PHP
parcourir
un
tableau
:
<
?
php
$
prenom
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
foreach
(
$
prenom
avoir
$
id
=
>
$
valeur
)
{
echo
'
'
case
(
$
id
)
=
$
valeur
'
'
;
}
?
>
tableau
PHP
parcourir
un
tableau
associatif
:
<
?
php
$
personne
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
'
'
Smith
'
'
)
;
foreach
(
$
personne
avoir
$
cle
=
>
$
valeur
)
{
echo
'
'
cle
=
'
'
.
$
cle
.
“
valeur
=
'
'
.
$
valeur
;
}
?
>
développement
Web
–
PHP
cours|cour
rappel
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
rappel
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
rappel
•
WAMP
/
MAMP
/
LAMP
/
XAMP
:
–
Windows
/
mac
/
Linux
/
Unix
–
apache
=
serveur
Web
–
MySQL
=
base
de
donnée
–
PHP
=
Préprocesseur
du
page
web
rappel
•
communication
entre
«
navigateur
web
»
et
«
serveur
web
»
se
faire
avec
protocole
HTTP
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
protocole
pour
transmettre
le
apache
information
:
HTTP
rappel
•
PHP
être
un
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
PHP
lorsqu
’
il
voir
passer
un
requête
terminer
par
«
.php
»
–
PHP
traiter
le
fichier
en
question
,
et
produire
un
réponse
renvoyer
par
apache
<
html
>
<
?
php
echo
'
'
B
'
'
;
?
>
<
/
html
>
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
B
<
html
>
navigateur
serveur
Web
<
html
>
B
B
<
/
html
>
<
/
html
>
apache
dns-remplacer
dns-remplacer
caractéristique
PHP
•
langage
faiblement
typer
–
beaucoup
plus
flexible
...
–
...
mais
possibilité
de
faire
n
’
importer
quoi
•
langage
interpréter
/
/
sur
le
terminal
de
Linux
–
CLI
disponible
pour
script
/
/
command
Line
interface
•
usage
dans
ce
cours|cour
:
extension
apache
rappel
:
formulaire
HTML
•
communication
entre
le
client
(
navigateur
)
et
le
serveur
(
php
)
–
le
formulaire
en
HTML
permettre
de
recueillir
du
donnée
auprès
de
l
’
utilisateur
•
le
donnée
être
ensuite
communiquer
à
un
programme
–
le
navigateur
envoyer
le
donnée
récolter
par
le
formulaire
au
serveur
•
le
programme
(
page
PHP
)
récupérer
le
donné
grâce
à
du
variable
page
PHP
rappel
:
formulaire
HTML
•
un
formulaire
HTML
être
définir
par
le
balise
<
form
...
>
...
<
/
form
>
–
tout
le
élément
être
à
l
’
intérieur
de
le
balise
<
form
name
=
'
'
nomFormulaire
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
|
post
'
'
>
...
.
<
/
form
>
action
:
à
qui
on
envoyer
le
donnée
method
:
comment
on
envoyer
le
donnée
–
le
champ
du
formulaire
être
introduire
par
différent
balise
:
•
<
input
type
=
'
'
...
'
'
name
=
'
'
...
'
'
value
=
'
'
...
'
'
id
=
'
'
...
'
'
/
>
•
<
textarea
name
=
'
'
...
'
'
id
=
'
'
...
'
'
col
=
'
'
...
'
'
rows
=
'
'
...
'
'
>
...
<
/
textarea
>
•
<
select
name
=
'
'
...
'
'
id
=
'
'
...
'
'
size
=
'
'
...
'
'
>
<
option
valoir
=
'
'
...
'
'
>
...
<
/
option
>
<
/
select
>
rappel
:
formulaire
HTML
<
input
type
=
'
'
text
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
votre
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
option
>
...
<
/
select
>
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
votre
opinion
sur
notre
produit
<
/
textarea
>
<
input
type
=
'
'
reset
'
'
value
=
'
'
nettoyer
'
'
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
input
type
=
'
'
submit
'
'
se
charger
d
’
envoyer
le
donnée
du
formulaire
rappel
:
formulaire
HTML
à
qui
le
donnée
être
envoyer
input
type
=
'
'
text
'
'
zone
de
saisie
select
...
option
liste
de
sélection
d
’
option
textarea
zone
de
texte
input
type
=
'
'
submit
'
'
input
type
=
'
'
reset
'
'
bouton
d
’
envoi
et
de
reset
du
formulaire
<
form
name
=
'
'
formClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
votre
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
label
>
produire
<
/
label
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
option
>
<
option
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
option
>
<
option
valoir
=
'
'
BabyFun
'
'
>
baby
Fun
<
/
option
>
<
/
select
>
<
br
/
>
<
label
>
opinion
<
/
label
>
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
votre
opinion
sur
notre
produit
<
/
textarea
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
class
=
'
'
bouton
'
'
/
>
<
input
type
=
'
'
reset
'
'
value
=
'
'
nettoyer
'
'
class
=
'
'
bouton
'
'
/
>
<
/
form
>
communication
client
-
serveur
•
méthode
générique
d
’
envoi
de
donnée
:
–
GET
:
(
Query
string
)
valeur
passer
via
l
’
URL
par
le
navigateur
[
valeur
lisible
dans
l
’
en-tête
et
dans
le
logs
d
’
accès
]
•
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
truc
&
nom
=
moi
–
POST
:
on
remplir
un
formulaire
,
et
le
navigateur
envoyer
le
formulaire
dans
le
«
body
»
de
le
requête
HTTP
[
valeur
lisible
si
le
«
body
»
de
le
requête
être
accessible
]
•
http
:
/
/
dns-remplacer
/
dns-remplacer
communication
client
-
serveur
•
le
donnée
recueillir
dans
le
formulaire
être
transmettre
au
programme
indiquer
dans
action
=
...
•
dans
PHP
,
on
récupérer
ce
donné
grâce
à
deux
tableau
associatif
spécial
–
$
_GET
-
>
<
form
action
=
'
'
...
'
'
method
=
'
'
get
'
'
>
•
$
_GET
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
–
$
_POST
-
>
<
form
action
=
'
'
...
'
'
method
=
'
'
post
'
'
>
•
$
_POST
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
communication
C
/
S
:
GET
.
client
envoyer
du
donnée
ou
clique
sur
un
lien
prévoir
.
apache
récupérer
et
analyser
le
requête
.
apache
créer
du
tableau
contenir
le
valeur
et
la|le
envoyer
à
PHP
GET
dns-remplacé
GET
var
=
GET
:
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
var
=
GET
/
dns-remplacer
?
var
=
<
html
>
coucou
<
/
html
>
navigateur
serveur
Web
dns-remplacer
apache
communication
C
/
S
:
GET
•
URL
de
le
requête
contenir
le
valeur
–
formulaire
passer
par
l
’
URL
–
construction
de
son
propre
URL
:
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
bla
&
x
=
&
y
=
'
'
>
lien
<
/
avoir
>
dns-remplacer
le
page
qui
traiter
le
requête
var
contenir
«
bla
»
x
contenir
y
contenir
«
?
»
séparer
l
’
adresse
de
ressource
du
donnée
«
&
»
séparer
chaque
donnée
(
champ
/
valeur
)
communication
C
/
S
:
GET
•
méthode
GET
–
le
donnée
être
envoyer
dans
l
’
URL
du
programme
–
limiter
à
octet
<
form
name
=
'
'
formGet
'
'
–
déconseiller
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
label
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
<
?
php
echo
'
'
<
p
>
bienvenu
,
<
i
>
'
'
.
$
_GET
[
`
`
client
'
'
]
.
`
`
<
/
i
>
!
<
/
p
>
'
'
;
?
>
communication
C
/
S
:
GET
-
on
lancer
un
programme
qui
écouter
le
requête
envoyer
sur
notre
propre
machine
(
localhost
)
,
sur
le
port
-
on
créer
un
formulaire
qui
envoyer
le
donnée
avec
le
méthode
GET
,
vers
un
page
de
notre
machine
sur
le
port
communication
C
/
S
:
GET
–
on
remplir
le
formulaire
avec
du
valeur
,
puis
on
cliquer
sur
«
envoyer
»
–
le
navigateur
envoyer
un
requête
GET
au
serveur
(
localhost
)
avec
l
’
ensemble
du
variable
dans
l
’
URL
communication
C
/
S
:
GET
–
depuis
le
programme
«
serveur
»
on
écrire
un
réponse
–
le
navigateur
récupérer
un
réponse
,
il
considérer
donc
qu
’
il
s
’
agir
de
le
ressource
viser
par
ce
URL
avec
ce
variable
et
valeur
–
le
navigateur
commencer
à
récupérer
le
réponse
communication
C
/
S
:
GET
–
depuis
le
programme
«
serveur
»
,
on
terminer
le
réponse
(
Ctrl
D
)
/
ferme
le
connexion
–
le
navigateur
voir
le
connexion
se
fermer
,
il
considérer
que
le
donnée
qu
’
il
avoir
récupérer
constituer
le
réponse
entier
,
il
l
’
affiche
communication
C
/
S
:
GET
(
logs
)
–
on
aller
regarder
le
«
logs
»
de
apache
(
le
journal
enregistrer
tout
le
transaction
que
le
serveur
web
avoir
traiter
)
–
le
navigateur
demander
le
page
contenir
le
formulaire
au
serveur
–
le
navigateur
envoyer
le
formulaire
par
l
’
URL
...
on
voir
tout
le
valeur
dans
le
requête
GET
enregistrer
communication
C
/
S
:
POST
.
client
remplir
formulaire
puis
déclencher
un
requête
.
apache
récupérer
et
analyser
le
requête
.
apache
créer
du
tableau
contenir
le
valeur
et
la|le
envoyer
à
PHP
GET
dns-remplacer
POST
Name
=
Flo
POST
:
http
:
/
/
dns-remplacer
/
dns-remplacer
Name
=
Flo
POST
Name
=
Flo
Name
:
Flo
<
html
>
coucou
<
/
html
>
navigateur
serveur
Web
dns-remplacer
apache
communication
C
/
S
:
POST
<
form
name
=
'
'
formClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
votre
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
...
<
?
php
$
nom
=
$
_POST
[
`
`
nomClient
'
'
]
;
$
op
=
$
_POST
[
`
`
opinionClient
'
'
]
;
$
prod
=
$
_POST
[
`
`
produit
'
'
]
;
echo
'
'
<
p
>
merci
de
votre
participation
,
$
nom
!
<
/
p
>
'
'
;
echo
'
'
<
p
>
votre
produit
être
:
<
i
>
$
prod
<
/
i
>
<
/
p
>
'
'
;
echo
'
'
<
p
>
votre
opinion
être
:
<
i
>
$
op
<
/
i
>
<
/
p
>
'
'
;
?
>
communication
C
/
S
:
POST
-
HTML
•
exemple
<
form
name
=
'
'
...
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
fieldset
>
<
legend
>
votre
donnée
<
/
legend
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
...
/
>
<
br
/
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
email
'
'
name
=
'
'
email
'
'
...
/
>
<
br
/
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
Homme
'
'
/
>
Homme
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
femme
'
'
/
>
femme
<
br
/
>
<
/
fieldset
>
<
fieldset
>
<
legend
>
votre
produit
<
/
legend
>
<
label
>
...
<
/
label
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
...
<
/
option
>
<
option
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
option
>
<
option
valoir
=
'
'
BabyFun
'
'
>
...
<
/
option
>
<
/
select
>
<
br
/
>
<
label
>
...
<
/
label
>
<
textarea
name
=
'
'
opinion
'
'
...
>
...
<
/
textarea
>
<
/
fieldset
>
communication
C
/
S
:
POST
-
PHP
•
exemple
<
body
>
<
h@card@
>
récapitulatif
<
/
h@card@
>
<
ul
>
<
?
php
echo
'
'
<
li
>
nom
:
'
'
.
$
_POST
[
`
`
nom
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
Email
:
'
'
.
$
_POST
[
`
`
email
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
sexe
:
'
'
.
$
_POST
[
`
`
sexe
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
produire
préférer
:
'
'
.
$
_POST
[
`
`
produit
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
suggestion
:
'
'
.
$
_POST
[
`
`
opinion
'
'
]
.
`
`
<
/
li
>
'
'
;
?
>
<
/
ul
>
<
/
body
>
communication
C
/
S
:
POST
-
on
lancer
un
programme
qui
écouter
le
requête
envoyer
sur
notre
propre
machine
(
localhost
)
,
sur
le
port
-
on
créer
un
formulaire
qui
envoyer
le
donnée
avec
le
méthode
POST
,
vers
un
page
de
notre
machine
sur
le
port
communication
C
/
S
:
POST
–
on
remplir
le
formulaire
avec
du
valeur
,
puis
on
cliquer
sur
«
envoyer
»
–
le
navigateur
envoyer
un
requête
POST
au
serveur
(
localhost
)
en
viser
le
ressource
/
dns-remplacer
,
et
en
inclure
l
’
ensemble
du
variable
dans
le
corps
(
body
)
de
le
requête
HTTP
communication
C
/
S
:
POST
–
depuis
le
programme
«
serveur
»
on
écrire
un
réponse
–
le
navigateur
récupérer
un
réponse
,
il
considérer
donc
qu
’
il
s
’
agir
–
le
navigateur
d
’
un
réponse
possible
accessible
à
commencer
à
récupérer
le
ce
URL
lorsque
l
’
on
envoyer
du
réponse
donner
en
POST
communication
C
/
S
:
POST
–
le
navigateur
voir
le
connexion
se
fermer
,
il
considérer
que
le
donnée
qu
’
il
avoir
récupérer
constituer
le
réponse
entier
,
il
l
’
affiche
–
depuis
le
programme
«
serveur
»
,
on
terminer
le
réponse
(
Ctrl
D
)
/
ferme
le
connexion
communication
C
/
S
:
POST
(
logs
)
–
on
aller
regarder
le
«
logs
»
de
apache
(
le
journal
enregistrer
tout
le
transaction
que
le
serveur
web
avoir
traiter
)
–
le
navigateur
demander
le
page
contenir
le
formulaire
au
serveur
–
le
navigateur
envoyer
le
formulaire
en
POST
,
on
ne
voir
aucun
nom
de
variable
ni
valeur
dans
le
logs
d
’
apache
!
statut
HTTP
•
un
requête
envoyer
=
un
réponse
reçu
•
réponse
HTTP
de
type
(
officiel
)
:
–
1xx
:
informationnel
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
/
/
:
url
n
’
exister
pas
–
5xx
:
erreur
côté
serveur
–
[
autre
erreur
être
lier
au
serveur
web
utiliser
]
statut
HTTP
:
classique
OK
le
requête
avoir
bien
être
recevoir
,
comprendre
,
et
exécuter
permanent
Redirect
le
ressource
avoir
être
définitivement
déplacer
à
un
autre
URL
Temporary
Redirect
le
ressource
être
temporairement
déplacer
à
un
autre
URL
Forbidden
le
requête
être
correct
,
mais
le
client
n
’
avoir
pas
le
droit
de
demander
au
serveur
de
faire
ce
action
Not
Found
le
ressource
viser
par
l
’
URL
n
’
avoir
pas
être
trouver
Internal
Server
Error
erreur
générique
/
non
spécifique
...
le
serveur
web
avoir
échouer
quelque
chose
à
un
moment
Bad
Gateway
le
serveur
web
viser
n
’
arriver
pas
à
contacter
le
serveur
qui
traiter
le
requête
envoyer
statut
HTTP
:
statut
HTTP
–
on
envoyer
un
requête
au
serveur
«
localhost
»
sur
le
port
,
en
demander
le
ressource
‘
/
’
–
apache
répondre
dans
l
’
en-tête
de
le
réponse
HTTP
que
tout
aller
bien
(
OK
)
:
code
–
apache
envoyer
le
page
web
demander
dans
le
corps
(
body
)
de
le
réponse
statut
HTTP
:
statut
HTTP
–
on
envoyer
un
requête
au
serveur
«
localhost
»
sur
le
port
,
en
demander
un
ressource
qui
n
’
exister
pas
–
apache
répondre
dans
l
’
en-tête
de
le
réponse
HTTP
que
le
ressource
n
’
avoir
pas
être
trouver
:
code
–
apache
envoyer
dans
le
corps
de
le
réponse
HTTP
un
page
web
détailler
l
’
erreur
au
client
(
au
format
HTML
pour
que
le
client
pouvoir
le
lire
)
statut
HTTP
:
statut
HTTP
–
on
envoyer
un
requête
incorrect
(
protocole
inexistant
)
au
serveur
«
localhost
»
sur
le
port
–
apache
répondre
dans
l
’
en-tête
de
le
réponse
HTTP
que
le
requête
être
incorrect
(
elle
ne
respecter
pas
le
standard
qu
’
il
connaître
)
–
apache
envoyer
dans
le
corps
de
le
réponse
HTTP
un
page
web
détailler
l
’
erreur
au
client
(
au
format
HTML
pour
que
le
client
pouvoir
le
lire
)
PHP
:
contrôle
de
flot
•
instruction
de
contrôle
–
instruction
pour
gérer
le
flot
d
’
exécution
–
instruction
conditionnel
•
elle
conditionner
l
’
exécution
•
semblable
à
un
nœud
de
décision
(
diagramme
activité
)
•
if
...
else
...
,
switch
...
case
...
–
instruction
de
boucle
•
elle
permettre
le
répétition
d
’
un
bloc
d
’
instruction
•
for
...
,
foreach
...
,
while
...
,
do
...
while
PHP
:
if
...
else
...
•
instruction
conditionnel
if
...
else
...
if
(
condition
)
{
bloc
d
’
instruction
si
vrai
;
}
else
{
bloc
d
’
instruction
si
faux
;
}
[
condition
vrai
]
bloc
d
’
instruction
si
vrai
optionnel
[
sinon
]
bloc
d
’
instruction
si
faux
if
(
$
qte
>
=
)
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
echo
'
'
<
p
>
vous
avoir
un
remise
de
%
!
<
/
p
>
'
'
;
}
else
{
...
$
remise
=
;
echo
'
'
<
p
>
vous
avoir
un
remise
de
%
<
/
p
>
'
'
;
PHP
:
if
...
else
...
•
instruction
conditionnel
if
...
else
...
–
le
donnée
pour
le
condition
pouvoir
venir
d
’
un
formulaire
dns-remplacer
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
...
<
select
name
=
'
'
prix
'
'
>
<
option
valoir
=
'
'
'
'
>
super
Kdo
-
€
<
/
option
>
...
<
/
select
>
...
<
input
type
=
'
'
number
'
'
size
=
'
'
'
'
name
=
'
'
qte
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
dns-remplacer
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
$
remise
=
;
if
(
$
qte
>
=
)
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
echo
'
'
<
p
>
vous
avoir
un
remise
de
%
!
<
/
p
>
'
'
;
}
$
prix
=
$
prixunit
*
$
qte
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
echo
'
'
<
p
>
pour
un
prix
de
<
i
>
$
prixunit
<
/
i
>
le
unité
et
<
i
>
$
qte
<
/
i
>
unité
,
vous
avoir
à
régler
<
i
>
$
prix
<
/
i
>
<
/
p
>
'
'
;
?
>
PHP
:
if
...
else
...
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
<
label
>
produire
:
<
/
label
>
<
select
name
=
'
'
prix
'
'
>
<
option
valoir
=
'
'
'
'
>
super
...
<
/
option
>
...
<
/
select
>
<
br
/
>
<
label
>
quantité
:
<
/
label
>
<
input
name
=
'
'
qte
'
'
type
=
'
'
number
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
$
remise
=
;
...
.
if
(
$
qte
>
=
)
{
$
remise
=
;
echo
'
'
<
p
>
vous
avoir
...
.
<
/
p
>
'
'
;
}
...
?
>
PHP
:
if
...
elseif
...
else
...
•
instruction
conditionnel
if
...
else
...
–
le
bloc
if
...
else
...
pouvoir
contenir
n
’
importer
quel
instruction
,
y
comprendre
d
’
autre
bloc
if
...
else
...
if
(
condition1
)
{
bloc
d
’
instruction
si
condition1
vrai
;
}
elseif
(
condition2
)
{
bloc
d
’
instruction
si
condition2
vrai
;
}
else
{
bloc
d
’
instruction
si
le
condition
être
faux
;
}
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
...
<
select
name
=
'
'
prix
'
'
>
...
<
/
select
>
...
<
input
type
=
'
'
number
'
'
...
name
=
'
'
qte
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
if
(
$
qte
>
=
)
{
$
remise
=
;
}
elseif
(
$
qte
>
=
)
{
$
remise
=
;
}
else
{
$
remise
=
;
}
$
prix
=
$
prixunit
*
$
qte
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
echo
'
'
<
p
>
prix
unitaire
:
<
i
>
$
prixunit
<
/
i
>
,
quantité
:
<
i
>
$
qte
<
/
i
>
,
remettre
:
<
i
>
'
'
.
$
remise
*
.
`
`
<
/
i
>
%
<
/
p
>
'
'
;
echo
`
`
<
p
>
<
i
>
total
à
régler
:
<
/
i
>
<
b
>
$
prix
<
/
b
>
<
/
p
>
'
'
;
?
>
PHP
:
for
...
•
instruction
de
boucle
:
for
–
le
boucle
for
permettre
de
répéter
(
un
certain
nombre
de
fois
)
l
’
exécution
d
’
un
bloc
d
’
instruction
for
(
initialisation
;
condition
;
incrémentation
)
{
bloc
d
’
instruction
à
répéter
;
}
$
i
=
[
i
<
=
]
echo
...
i++
[
else
]
le
suite
...
$
i++
-
>
$
i
=
$
i
+
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
}
PHP
:
for
...
•
instruction
de
boucle
:
for
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
}
?
>
PHP
:
while
...
•
instruction
de
boucle
:
while
–
le
boucle
while
permettre
de
continuer
à
réaliser
un
bloc
d
’
opération
tant
qu
’
un
condition
être
vrai
$
i
=
[
i
<
=
]
echo
...
$
i
=
$
i
+
;
[
else
]
le
suite
...
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
+
;
}
PHP
:
while
...
•
instruction
de
boucle
:
while
on
donner
un
valeur
initial
à
le
variable
$
i
tant
que
$
i
ne
dépasser
pas
le
valeur
on
mettre
à
jour
le
valeur
de
le
variable
$
i
<
?
php
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
+
;
}
?
>
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
–
le
boucle
foreach
permettre
de
répéter
un
bloc
d
’
instruction
pour
chaque
valeur
dans
un
tableau
$
tableau
[
reste-t-il
un
valeur
?
]
$
titre
recevoir
le
prochain
valeur
echo
...
[
plus
de
valeur
dans
le
tableau
]
le
suite
...
foreach
(
$
tableau
avoir
$
titre
)
{
echo
'
'
<
$
titre
>
titre
$
titre
<
/
$
titre
>
'
'
;
}
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
on
définir
un
tableau
pour
chaque
valeur
dans
le
tableau
<
?
php
$
tableau
=
array
(
`
`
h1
'
'
,
'
'
h2
'
'
,
'
'
h3
'
'
,
'
'
h4
'
'
,
'
'
h5
'
'
,
'
'
h6
'
'
)
;
foreach
(
$
tableau
avoir
$
titre
)
{
echo
'
'
<
$
titre
>
titre
$
titre
<
/
$
titre
>
'
'
;
}
?
>
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
–
cela
fonctionner
aussi
pour
le
tableau
associatif
on
définir
un
tableau
associatif
:
clé
=
>
valeur
pour
chaque
pair
$
clé
=
>
$
valeur
dans
$
tableau
<
?
php
$
tableau
=
array
(
`
`
nom
'
'
=
>
'
'
Dupont
'
'
,
'
'
prenom
'
'
=
>
'
'
Jean
'
'
,
'
'
adresse
'
'
=
>
'
'
qq
part
à
Paris
'
'
)
;
foreach
(
$
tableau
avoir
$
cle
=
>
$
valeur
)
{
echo
'
'
<
li
>
$
cle
:
$
valeur
<
/
li
>
'
'
;
}
?
>
PHP
:
boucle
•
instruction
de
boucle
:
boucle
imbriqué
–
il
être
possible
d
’
imbriquer
du
boucle
le
un
dans
le
autre
<
table
>
<
?
php
for
(
$
lin
=
;
$
lin
<
=
;
$
lin++
)
{
echo
'
'
<
tr
>
'
'
;
for
(
$
col
=
;
$
col
<
=
;
$
col++
)
{
echo
'
'
<
td
>
'
'
.
(
$
col
*
$
lin
)
.
'
'
<
/
td
>
'
'
;
}
echo
'
'
<
/
tr
>
'
'
;
}
?
>
<
/
table
>
Evaluation
du
Etudiants
date
typer
description
binôme
S05
(
/
)
[
DM
]
devoir
maison
mini
projet
à
rendre
par
mail
(
/
–
23h42
)
oui
S10
(
/
)
[
DST
]
devoir
sur
table
examen
écrire
sans
document
ni
machiner
non
%
S12
(
/
)
[
PROJ
]
projet
présentation
du
projet
oui
mai
partiel
examen
écrire
sans
document
ni
machiner
non
%
PHP
:
fonction
•
fonction
–
PHP
offrir
un
large
panoplie
de
fonction
•
exemple
:
isset
(
$
var
)
à
TRUE
si
$
var
avoir
être
déclarer
•
exemple
:
empty
(
$
var
)
à
TRUE
si
$
var
être
vide
(
ou
valoir
)
–
on
pouvoir
aussi
écrire
la|le
nôtre
(
même
en
dehors
du
classe
)
•
function
nomFonction
(
$
paramètre
,
...
)
{
instruction
}
function
salutation
(
$
nom
)
{
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
echo
'
'
<
p
class
=
droit|droite
>
aujourd'hui
,
nous
être|sommer
le
'
'
.date
(
'
d
/
m
/
y
'
)
.
`
`
<
/
p
>
'
'
;
}
PHP
...
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
<
label
>
nom
:
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
size
=
'
'
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
<
?
php
function
salutation
(
$
nom
)
{
date_default_timezone_set
(
`
`
Europe
/
Paris
'
'
)
;
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
echo
'
'
<
p
class
=
droit|droite
>
aujourd'hui
...
'
'
.
date
(
'
d
/
m
/
y
'
)
.
`
`
<
/
p
>
'
'
;
}
if
(
isset
(
$
_POST
[
`
`
client
'
'
]
)
AND
!
empty
(
$
_POST
[
`
`
client
'
'
]
)
)
{
salutation
(
$
_POST
[
`
`
client
'
'
]
)
;
}
else
{
salutation
(
`
`
cher
client
'
'
)
;
}
?
>
visibilité
du
variable
en
PHP
il
exister
niveau
de
visibilité
d
’
un
variable
selon
le
contexte
:
•
le
variable
superglobale
:
elle
être
disponible
ne
importer
où
dans
le
programme
.
•
le
variable
global
:
ce
être
tout
le
variable
,
tableau
,
objet
et
constant
que
nous
créer
nous
même
dans
le
programme
principal
.
elle
ne
être
généralement
visible
que
dans
le
programme
principal
.
•
le
variable
local
:
ce
être
tout
le
variable
de
un
fonction
(
paramètre
comprendre
)
.
leur
visibilité
ne
être
que
local
,
et
le
programme
principal
ne
pouvoir
pas
agir
sur
ce
variable
.
porter
du
variable
global
•
en
PHP
,
un
variable
global
pouvoir
être
utiliser
à
l
’
intérieur
d
’
un
fonction
sans
le
passer
en
paramètre
–
usage
du
mot
clé
«
global
»
–
le
variable
devoir
être
déclarer
avec
«
global
»
dans
chaque
fonction
où
cela
être
nécessaire
porter
du
variable
global
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
global
$
avoir
,
$
b
;
$
b
=
$
avoir
$
b
;
echo
«
»
.
$
b
;
}
somme
(
)
;
somme
(
)
;
?
>
on
avoir
déclarer
$
avoir
et
$
b
avec
le
mot
clé
«
global
»
à
l
’
intérieur
de
somme
pour
qu
’
elle
être
manipuler
par
celui
-ci
.
porter
du
variable
global
•
un
autre
méthode
pour
accéder
au
variable
global
être
de
utiliser
le
superglobal
$
GLOBALS
:
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
$
GLOBALS
[
'
b
'
]
=
$
GLOBALS
[
'
avoir
'
]
$
GLOBALS
[
'
b
'
]
;
echo
$
GLOBALS
[
'
b
'
]
;
}
?
>
le
variable
superglobale
•
le
variable
superglobale
être
générer
automatiquement
par
PHP
:
–
elle
être
disponible
quel
que
être
le
contexte
du
script
(
même
à
l
’
intérieur
d
’
un
fonction
sans
être
passer
en
paramètre
de
celui
-ci
)
–
elle
être
écrire
en
majuscule
et
commencer
,
par
un
underscore
«
_
»
–
elle
être
généralement
du
tableau
associatif
le
variable
superglobale
•
$
GLOBALS
:
rassembler
le
variable
global
.
•
$
_ENV
:
ce
être
du
variable
de
environnement
toujours
donner
par
le
serveur
.
•
$
_SESSION
:
se
être
du
variable
de
session
.
ce
variable
rester
stocker
sur
le
serveur
le
temps
de
le
présence
de
un
visiteur
.
•
$
_COOKIE
:
contenir
le
valeur
du
cookies
enregistrer
sur
le
ordinateur
du
visiteur
.
•
$
_GET
:
contenir
le
donnée
envoyer
en
paramètre
dans
le
URL
.
•
$
_POST
:
contenir
le
information
qui
venir
de
être
envoyer
par
un
formulaire
.
le
variable
superglobale
<
html
>
<
head
>
<
title
>
le
variable
$
_SERVER
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
nom
du
fichier
en
cours|cour
d\'execution
'
.
'
avoir
partir
de
le
racine
:
'
.
$
_SERVER
[
'
PHP_SELF
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
de
le
racine
du
script
:
'
.
$
_SERVER
[
'
DOCUMENT_ROOT
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
du
client
HTML
:
'
.
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
.
'
<
br
>
'
;
echo
'
nom
du
serveur
qui
execute
le
script
:
'
.
$
_SERVER
[
'
SERVER_NAME
'
]
;
echo
'
<
br
/
>
<
br
/
>
'
;
echo
'
votre
adresse
IP
être
:
'
.
$
_SERVER
[
'
REMOTE_ADDR
'
]
;
?
>
<
/
body
>
<
/
html
>
fonction
avancer
•
fonction
avancer
PHP
(
serveur
)
–
=
=
=
,
isset
,
empty
,
is_nul
–
include
,
require
,
include_once
,
require_once
–
...
•
fonction
avancer
HTTP
(
client
)
–
header
(
)
PHP
:
fonction
avancée
<
?
php
$
var1
=
;
$
var2
=
'
'
'
'
;
$
var3
=
'
'
`
`
;
$
var4
=
'
'
'
'
;
echo
(
(
$
var1
=
=
$
var2
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
$
var3
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
$
var4
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
=
$
var2
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
=
$
var3
)
.
`
`
#
'
'
)
;
echo
(
(
$
var2
=
=
$
var3
)
.
`
`
#
'
'
)
;
?
>
PHP
faiblement
typer
:
=
=
comparer
le
valeur
=
=
=
comparer
valeur
et
type
TRUE
=
=
FALSE
=
=
#
#
#
#
#
#
PHP
:
fonction
avancer
•
importation
du
fichier
•
incorporer
le
contenu
d
’
un
fichier
dans
un
page
PHP
•
but
:
réutilisation
du
fichier
,
uniformisation
du
site
–
include
'
'
fichier
'
'
et
include_once
'
'
fichier
'
'
•
include
remplacer
le
ligne
par
le
contenu
du
fichier
•
include_once
faire
cela
un
seul
fois
(
même
dans
un
boucle
)
–
require
'
'
fichier
'
'
et
require_once
'
'
fichier
'
'
•
idem
include
,
mais
si
le
fichier
n
’
exister
pas
,
on
avoir
un
erreur
PHP
:
fonction
avancée
<
meta
charset
=
'
'
UTF-8
'
'
/
>
...
<
title
>
mon
site
<
/
title
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
header
>
<
h@card@
>
mon
site
<
/
h1
>
<
/
header
>
<
nav
>
<
h@card@
>
exemple
<
/
h@card@
>
<
ul
>
<
li
>
...
<
/
li
>
...
<
/
ul
>
<
/
nav
>
<
head
>
<
?
php
include_once
'
'
dns-remplacer
'
'
;
require
'
'
dns-remplacer
'
'
;
?
>
<
/
head
>
<
body
>
<
?
php
include_once
'
'
dns-remplacer
'
'
;
?
>
...
<
?
php
salutation
(
`
`
cher
client
'
'
)
;
?
>
<
article
>
<
h@card@
>
News
<
/
h@card@
>
<
p
>
...
<
/
p
>
<
/
article
>
...
<
?
php
function
salutation
(
$
nom
)
{
echo
'
'
<
p
class
=
droit|droite
>
<
b
>
bienvenu
,
$
nom
!
<
/
b
>
<
/
p
>
'
'
;
echo
'
'
<
p
class
=
droit|droite
>
aujourd'hui
,
nous
être|sommer
le
'
'
.date
(
'
d
/
m
/
y
'
)
.
`
`
<
/
p
>
'
'
;
}
?
>
PHP
include_once
'
'
dns-remplacer
'
'
include_once
'
'
dns-remplacer
'
'
;
require
'
'
dns-remplacer
'
'
;
salutation
(
`
`
cher
client
'
'
)
;
<
head
>
...
<
title
>
mon
site
<
/
title
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
header
>
<
h@card@
>
mon
site
<
/
h1
>
<
/
header
>
<
nav
>
<
h@card@
>
exemple
<
/
h@card@
>
<
ul
>
<
li
>
...
<
/
li
>
...
<
/
ul
>
<
/
nav
>
<
section
>
<
p
class
=
droit|droite
>
<
b
>
bienvenir
,
cher
client
!
<
/
b
>
<
/
p
>
<
p
class
=
droit|droite
>
aujourd'hui
,
nous
être|sommer
le
/
/
<
/
p
>
...
PHP
:
fonction
avancer
•
gettype
(
$
var
)
:
retourner
le
type
de
le
variable
•
addslashes
(
)
:
ajouter
du
antislashs
devant
le
caractère
spécial
$
res
=
addslashes
(
`
`
L
'
avoir
'
'
)
;
/
/
retourne
L\
’
avoir
.
•
strstr
(
texte
,
chaineAchercher
)
:
trouver
le
premier
occurrence
dans
un
chaîne
$
email
=
'
name
@
dns-remplacer
'
;
$
domain
=
strstr
(
$
email
,
'
@
'
)
;
echo
$
domain
;
/
/
affiche
:
@
dns-remplacer
PHP
:
fonction
avancer
•
htmlspecialchar
(
chaine
,
flag
)
:
conversion
du
caractère
spécial
en
entité
HTML
.
remplacer
par
exemple
&
(
et
commercial
)
en
&
amp
;
un
exemple
de
flag
être
ENT_QUOTES
qui
convertir
le
guillemet
double
et
le
guillemet
simple
.
$
str
=
'
'
This
is
some
<
b
>
bold
<
/
b
>
text
.
`
`
;
echo
htmlspecialchars
(
$
str
)
;
/
/
afficher
:
This
is
some
&
lt
;
b
&
gt
;
bold
&
lt
;
/
b
&
gt
;
text
.
PHP
:
fonction
avancer
•
strip_tags
(
chaine
,
allowableTags
)
:
supprimer
le
balise
HTML
et
PHP
de
un
chaîne
.
le
commentaire
HTML
et
PHP
être
également
supprimer
ce
comportement
pouvoir
être
modifier
avec
le
paramètre
allowableTags
$
text
=
‘
<
p
>
Paragraph
.
<
/
p
>
<
!
--
comment
--
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
'
;
/
/
autoriser
<
p
>
et
<
avoir
>
echo
strip_tags
(
$
text
,
'
<
p
>
<
avoir
>
'
)
;
/
/
afficher
:
/
/
<
p
>
Paragraph
.
<
/
p
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
PHP
:
fonction
avancer
•
strlen
(
)
:
retourner
le
longueur
de
le
chaîne
•
strtolower
(
)
:
passer
tout
le
caractère
en
minuscule
•
strtoupper
(
)
:
passer
tout
le
caractère
en
majuscule
•
strpos
(
texte
,
chaine
)
:
rechercher
le
position
de
le
premier
«
chaine
»
trouver
PHP
:
fonction
avancer
•
trim
(
)
:
effacer
le
espace
blanc
au
début
et
à
le
fin
d
’
un
chaine
•
ereg
(
chaine
,
texte
)
:
recherche
dans
texte
,
le
séquence
du
caractère
«
chaine
»
.
retourner
le
longueur
de
le
occurrence
trouver
si
un
occurrence
avoir
être
trouver
dans
le
chaîne
string
,
FALSE
dans
le
cas
contraire
ou
si
un
erreur
être
survenir
.
if
(
ereg
(
`
`
BCD
'
'
,
'
'
ABCDEF
'
'
)
)
{
echo
'
'
oui
'
'
;
}
else
{
echo
'
'
non
'
'
;
}
PHP
:
fonction
avancer
•
isset
(
$
var1
,
$
var2
,
...
)
:
déterminer
si
un
variable
ou
plusieurs
être
définir
et
être
différent
de
NULL
•
unset
(
$
var1
,
$
var2
,
...
)
:
détruire
le
variable
•
empty
(
$
var
)
:
déterminer
si
un
variable
être
vide
PHP
:
fonction
avancer
•
un
variable
non
déclarer
et
un
variable
vide
ne
être
pas
pareil
...
FALSE
=
TRUE
=
<
?
php
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
$
var
=
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
$
var
=
'
'
'
'
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
unset
(
$
var
)
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
?
>
PHP
:
fonction
avancée
$
Var
isset
empty
(
$
var
non
déclarer
)
(
)
faux
(
)
vrai
(
)
vrai
(
)
faux
«
»
(
)
vrai
(
)
vrai
(
unset
$
var
)
(
)
faux
(
)
vrai
PHP
:
fonction
avancer
•
valeur
«
null
»
disponible
,
mais
signifier
que
le
variable
exister
•
Null
!
=
Empty
<
?
php
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
'
'
'
'
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
null
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
?
>
PHP
notice
:
Undefined
variable
:
var
in
standard
input
coder
on
line
;
;
;
;
;
;
PHP
:
fonction
avancée
$
Var
is_null
empty
(
$
var
non
déclarer
)
(
)
vrai
*
(
)
vrai
(
)
faux
(
)
vrai
«
»
(
)
faux
(
)
vrai
null
(
)
vrai
(
)
vrai
*
:
is_null
(
)
déclencher
un
alerte
(
PHP
notice
)
si
le
variable
n
’
avoir
pas
être
allouer
PHP
:
fonction
avancer
•
array_value
(
array
)
:
retourner
tout
le
valeur
de
un
tableau
–
elle
même
dans
un
tableau
(
utile
pour
vider
case
vide
)
•
array_keys
(
array
,
valeur
)
:
retourner
tout
le
clé
associer
à
«
valeur
»
–
si
valeur
n
’
être
pas
spécifier
alors
retourner
tout
le
clé
du
tableau
(
utile
pour
connaître
tout
le
clé
possible
)
PHP
:
fonction
avancer
•
array_value
(
array
)
:
retourner
tout
le
valeur
de
un
tableau
–
elle
même
dans
un
tableau
-
;
;
-
;
;
-
;
;
-
;
;
-
-
;
;
-
;
;
-
;
;
-
;
;
-
<
?
php
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
var1
=
array_values
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancée
Prenom
-
Jean
;
;
nom
-
Martin
;
;
Prenom2
-
Olivier
;
;
Prenom3
-
Jean
-
Jean
;
;
-
Martin
;
;
-
Olivier
;
;
-
Jean
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_values
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
array_keys
(
array
,
valeur
)
:
retourner
tout
le
clé
associer
à
«
valeur
»
–
si
valeur
n
’
être
pas
spécifier
alors
retourner
tout
le
clé
du
tableau
-
Prenom
;
;
-
Prenom3
;
;
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_keys
(
$
tab
,
'
'
Jean
'
'
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
array_keys
(
array
,
valeur
)
:
retourner
tout
le
clé
associer
à
«
valeur
»
–
si
valeur
n
’
être
pas
spécifier
alors
retourner
tout
le
clé
du
tableau
-
Prenom
;
;
-
nom
;
;
-
Prenom2
;
;
-
Prenom3
;
;
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_keys
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
in_array
(
valeur
,
array
)
:
vérifier
si
un
valeur
appartenir
à
un
tableau
•
array_key_exists
(
key
,
array
)
:
vérifier
si
un
clé
exister
dans
un
tableau
PHP
:
fonction
avancée
TRUE
=
FALSE
=
-
-
-
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
in_array
(
`
`
Jean
'
'
,
$
tab
)
;
$
var2
=
array_key_exists
(
`
`
nom
'
'
,
$
tab
)
;
$
var3
=
in_array
(
`
`
à
'
'
,
$
tab
)
;
$
var4
=
array_key_exists
(
`
`
à
'
'
,
$
tab
)
;
echo
'
'
$
var1
-
$
var2
-
$
var3
-
$
var4
'
'
;
?
>
PHP
:
fonction
avancée
HTTP
•
en
PHP
,
le
fonction
header
(
)
se
charger
de
envoyer
au
client
le
en-tête
passer
en
paramètre
•
règle
important
:
le
appel
à
‘
header
(
)
’
devoir
se
faire
avant
tout
envoi
au
navigateur
–
attention
au
includes
qui
écrire
quelque
chose
...
–
ne
pas
écrire
de
<
html
>
voir
que
l
’
on
être
dans
le
en-tête
HTTP
et
non
HTML
!
PHP
:
fonction
avancée
HTTP
•
on
pouvoir
utiliser
le
fonction
«
header
(
)
»
pour
envoyer
du
code
HTTP
:
<
?
php
header
(
`
`
HTTP
/
Not
Found
'
'
)
;
?
>
<
?
php
header
(
`
`
status
:
Moved
Permanently
'
'
,
false
,
)
;
header
(
'
location
:
http
:
/
/
dns-remplacer
/
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
Header
HTTP
renvoyer
par
apache
...
...
donc
ce
que
vous
pouvoir
modifier
avec
le
fonction
«
header
(
)
»
PHP
:
fonction
avancée
HTTP
•
pour
créer
un
redirection
avec
PHP
,
on
utiliser
header
pour
envoyer
du
en-tête
de
type
location
(
adresse
)
•
script
de
redirection
(
HTTP
)
:
<
?
php
header
(
'
location
:
http
:
/
/
dns-remplacer
/
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
•
on
pouvoir
envoyer
du
fichier
et
jouer
avec
d
’
autre
champ
HTTP
tel
que
le
«
Content-
type
»
–
«
Content-Type
»
indiquer
le
type
de
donnée
,
donc
le
navigateur
essayer
d
’
utiliser
l
’
outil
préférer
de
l
’
utilisateur
pour
lire
ce
fichier
•
readfile
(
)
permettre
d
’
envoyer
un
fichier
PHP
:
fonction
avancée
HTTP
le
serveur
web
déclarer
en
header
qu
’
il
s
’
agir
de
«
text
/
html
»
,
donc
du
texte
interprétable
par
le
navigateur
ou
lisible
par
l
’
utilisateur
.
le
navigateur
l
’
affiche
donc
.
PHP
:
fonction
avancée
HTTP
le
serveur
web
déclarer
en
header
qu
’
il
s
’
agir
de
«
image
/
jpeg
»
,
donc
d
’
un
image
au
format
JPEG
.
le
texte
n
’
en
être
pas
,
il
être
impossible
d
’
afficher
un
image
,
mais
le
navigateur
essayer
tout
de
même
PHP
:
fonction
avancée
HTTP
le
serveur
web
déclarer
en
header
qu
’
il
s
’
agir
de
«
video
/
mp4
»
,
donc
d
’
un
vidéo
au
format
MP4
.
le
texte
n
’
en
être
pas
,
il
être
impossible
d
’
afficher
le
vidéo
,
mais
le
navigateur
essayer
tout
de
même
de
le
lire
avec
un
lecteur
de
vidéo
PHP
:
fonction
avancée
HTTP
le
serveur
web
déclarer
en
header
qu
’
il
s
’
agir
de
«
application
/
octet-
stream
»
,
donc
d
’
un
flux
d
’
octet
.
par
défaut
,
le
navigateur
proposer
de
télécharger
le
fichier
associer
plutôt
que
de
l
’
afficher
PHP
:
fonction
avancée
HTTP
<
?
php
/
/
on
declare
un
PDF
header
(
'
Content-Type
:
application
/
pdf
'
)
;
/
/
le
client
voir
un
fichier
'
'
dns-remplacer
'
'
header
(
'
Content-
disposition
:
attachment
;
filename
=
'
'
dns-remplacer
'
'
'
)
;
/
/
le
fichier
du
serveur
web
qui
être
transmettre
readfile
(
'
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
<
?
php
$
file
=
'
dns-remplacer
'
;
if
(
file_exists
(
$
file
)
)
{
header
(
'
Content-Description
:
file
Transfer
'
)
;
header
(
'
Content-Type
:
application
/
octet-stream
'
)
;
header
(
'
Content-
disposition
:
attachment
;
filename
=
'
'
'
.basename
(
$
file
)
.
'
'
'
'
)
;
header
(
'
expirer
:
'
)
;
header
(
'
Cache-Control
:
must-revalidate
'
)
;
header
(
'
Pragma
:
public
'
)
;
header
(
'
Content-Length
:
'
.
filesize
(
$
file
)
)
;
readfile
(
$
file
)
;
exit
;
}
?
>
développement
Web
–
PHP
cours|cour
rappel
:
architecturer
général
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
rappel
:
architecturer
général
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
rappel
:
serveur
Web
•
communication
entre
«
navigateur
web
»
et
«
serveur
web
»
se
faire
avec
protocole
HTTP
http
:
/
/
dns-remplacer
/
dns-remplacer
(
GET
dns-remplacer
)
GET
dns-remplacer
<
html
>
coucou
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
apache
protocole
pour
transmettre
le
information
:
HTTP
rappel
:
serveur
Web
•
communication
entre
client
et
serveur
se
faire
avec
le
méthode
GET
et
POST
•
GET
:
passage
d
’
information
par
l
’
URL
,
donc
par
le
requête
elle
même
•
POST
:
passage
d
’
information
par
le
contenu
de
le
requête
rappel
:
serveur
Web
•
un
requête
envoyer
=
un
réponse
reçu
•
réponse
HTTP
de
type
(
officiel
)
:
–
1xx
:
informationnel
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
–
5xx
:
erreur
côté
serveur
–
[
autre
erreur
être
lier
au
serveur
web
utiliser
]
rappel
:
serveur
Web
•
Header
HTTP
permettre
de
déclarer
le
type
de
donnée
transmettre
–
Content-Type
:
text
/
html
–
Content-Type
:
application
/
pdf
–
Content-Type
:
application
/
octet-stream
–
Content-Type
:
video
/
mp4
•
le
navigateur
web
avoir
du
paramètre
personnalisables
pour
choisir
un
programme
externe
(
ou
pas
)
selon
le
type
de
donné
rappel
:
PHP
•
PHP
être
un
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
PHP
lorsqu
’
il
voir
passer
un
requête
terminer
par
«
.php
»
–
PHP
traiter
le
fichier
en
question
,
et
produire
un
réponse
renvoyer
par
apache
<
html
>
<
?
php
echo
'
'
B
'
'
;
?
>
<
/
html
>
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
navigateur
serveur
Web
apache
<
html
>
B
<
html
>
dns-remplacer
<
html
>
B
<
/
html
>
dns-remplacer
rappel
:
PHP
•
langage
faiblement
typer
–
beaucoup
plus
flexible
...
–
...
mais
possibilité
de
faire
n
’
importer
quoi
•
langage
interpréter
–
CLI
disponible
pour
script
•
usage
dans
ce
cours|cour
:
extension
apache
SGBD
&
BDD
•
SGBD
:
système
de
gestion
de
base
de
donnée
[
DBMS
:
DataBase
management
System
]
•
BDD
:
base
de
donnée
[
DB
:
DataBase
]
SGBD
&
BDD
personne
cours|cour
ID
nom
Prenom
Jaffal
Ali
Boissier
Fabrice
•
BDD
:
le
donnée
organiser
dans
un
conteneur
table
:
personne
•
SGBD
:
le
système
ou
le
select
*
FROM
personne
logiciel
qui
gérer
le
base
de
donnée
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
SGBD
&
BDD
•
Qu
’
être
ce
qu
’
un
SGBD
?
«
C
’
être
un
logiciel
système
destiner
à
stocker
et
à
partager
du
information
dans
un
base
de
donnée
,
en
garantir
le
qualité
,
le
pérennité
et
le
confidentialité
du
information
,
tout
en
cacher
le
complexité
du
opération
.
»
WIKIPEDIA
parmi
le
logiciel
le
plus
connu
,
on
trouver
:
MySQL
,
PostgreSQL
,
SQLite
,
oracle
et
MariaDB
.
pour
un
liste
détailler
du
SGBD
,
consulter
ce
lien
http
:
/
/
dns-remplacer
/
sgbdcmp
/
#
LI
SGBD
&
BDD
•
«
avant
»
:
on
organiser
soi
même
un
disque
ou
un
fichier
,
et
on
coder
un
bout
de
programme
spécifique
pour
naviguer
dedans
(
et
effectuer
du
lecture
/
écriture
)
BDD
(
Search
for
«
handle
»
description
)
Get
/
car
/
door
/
handle
/
description
[
Seek
Disc
,
Track
,
block
&
Extract
block
]
application
SGBD
&
BDD
•
Aujourd
’
hui
:
usage
d
’
un
pilote
logiciel
effectuer
le
transaction
avec
le
SGBD
–
api
,
bibliothèque
,
...
extension
permettre
de
mettre
du
SQL
dans
un
langage
de
programmation
,
et
de
récupérer
un
tableau
réponse
select
*
FROM
personne
connecteur
(
api
,
extension
,
...
)
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
serveur
Web
SGBD
PHP
&
SGBD
:
connecteur
$
sql
=
'
'
select
*
FROM
personne
'
'
;
$
res
=
mysqli-
>
query
(
$
sql
)
;
$
line
=
$
res-
>
fetch_object
(
)
;
echo
$
line-
>
nom
;
dns-remplacer
select
*
FROM
personne
GET
dns-remplacer
MySQLi
Jaffal
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
navigateur
base
de
donnée
serveur
Web
PHP
&
SGBD
:
connecteur
•
plusieurs
extension
à
PHP
exister
pour
interroger
du
SGBD
:
–
MySQL
:
obsolète
–
ne
pas
l
’
utiliser
!
(
attention
:
ancien
tutos
l
’
utiliser
)
–
MySQLi
:
MySQL
«
improved
»
mise
à
jour
de
l
’
extension
MySQL
–
PDO
:
PHP
dater
Object
piloter
générique
multi-SGBD
•
(
hors
PHP
:
ODBC
(
middleware
)
,
connecteur
quasi-universel
)
–
open
DataBase
Connectivity
MySQL
avec
PHP
manipulation
du
base
de
donnée
MySQL
se
faire
soit
via
un
interface
graphique
comme
‘
PhpMyAdmin
’
soit
en
exécuter
un
script
PHP
.
.
PhpMyAdmin
•
un
programme
permettre
de
avoir
un
vue
rapide
de
l
’
ensemble
du
donnée
.
•
C
’
être
un
du
outil
le
plus
connaître
permettre
de
manipuler
un
base
de
donnée
MySQL
.
•
PhpMyAdmin
être
livrer
avec
WAMP
,
et
presque
tout
le
hébergeur
permettre
de
utiliser
phpMyAdmin
.
(
chemin
d
’
accès
:
http
:
/
/
localhost
:
/
phpMyAdmin
)
MySQL
avec
PHP
.
script
PHP
•
Etapes
pour
utiliser
un
base
du
donnée
)
connexion
au
serveur
MySQL
)
envoi
du
requête
SQL
(
select
,
insert
into
...
)
)
récupération
du
résultat
)
fermeture
de
le
connexion
MySQLi
•
connexion
à
un
serveur
MySQL
à
travers
mysqli
–
tout
le
communication
avec
le
BdD
passer
par
un
objet
de
le
classe
«
mysqli
»
–
le
connexion
s
’
effectuer
à
le
création
de
ce
objet
(
new
)
$
idcon
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
objet
identifier
de
le
connexion
nom
du
serveur
utilisateur
autoriser
à
accéder
à
le
base
mot
de
passe
base
de
donnée
•
tout
connexion
ouvert
devoir
être
fermer
$
bool
=
$
idcon-
>
clore
(
)
;
on
demander
à
l
’
objet
mysqli
de
fermer
le
connexion
MySQLi
astuce
:
placer
ce
information
dans
un
fichier
et
faire
require
(
ou
include
)
'
'
fichier
'
'
création
de
l
’
objet
connexion
L
’
attribut
connect_errno
de
indique
si
le
connexion
avoir
bien
être
établir
en
cas
de
problème
,
on
arrêter
avec
le
fonction
die
.
fermeture
de
le
connexion
<
?
php
$
host
=
'
'
localhost
'
'
;
$
user
=
'
'
root
'
'
;
$
mdp
=
'
'
root
'
'
;
$
bdd
=
'
'
clientsBD
'
'
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
if
(
$
mysqli-
>
connect_errno
)
{
die
(
`
`
<
p
>
impossible
de
connecter
à
$
bdd
:
'
'
.
$
mysqli-
>
connect_error
.
'
'
<
/
p
>
'
'
)
;
}
else
{
echo
'
'
<
p
>
connecter
au
serveur
$
host
,
à
le
base
$
bdd
<
/
p
>
'
'
;
$
mysqli-
>
clore
(
)
;
}
?
>
MySQLi
•
envoyer
de
requête
à
un
base
de
donnée
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
résultat
de
le
requête
exécution
de
le
requête
sur
l
’
objet
connexion
requêter
SQL
à
exécuter
–
requêter
SQL
:
•
S
’
il
s
’
agir
d
’
un
select
,
le
résultat
correspondre
au
donnée
fournir
par
le
requête
(
objet
mysqli_result
)
•
sinon
(
insert
,
UPDATE
,
DELETE
...
)
,
le
résultat
être
TRUE
si
le
requête
être
bien
exécuter
,
FALSE
sinon
<
form
name
=
'
'
formNouveauClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
...
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
...
/
>
...
<
input
type
=
'
'
text
'
'
name
=
'
'
email
'
'
...
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
PHP
dns-remplacer
<
?
php
function
connexion
(
)
{
$
host
=
'
'
localhost
'
'
;
$
user
=
'
'
uml
'
'
;
$
mdp
=
'
'
uml
'
'
;
$
bdd
=
'
'
clientsBD
'
'
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
if
(
$
mysqli-
>
connect_errno
)
{
die
(
`
`
<
p
>
impossible
...
'
'
.
$
mysqli-
>
connect_error
.
`
`
<
/
p
>
'
'
)
;
}
return
$
mysqli
;
}
?
>
dns-remplacé
<
?
php
if
(
!
empty
(
$
_POST
[
`
`
nom
'
'
]
)
AND
!
empty
(
$
_POST
[
`
`
e
mail
'
'
]
)
)
{
require
'
'
dns-remplacer
'
'
;
$
mysqli
=
connexion
(
)
;
$
nom
=
$
_POST
[
`
`
nom
'
'
]
;
$
email
=
$
_POST
[
`
`
email
'
'
]
;
$
adr
=
$
_POST
[
`
`
adresse
'
'
]
;
$
id
=
'
\N
'
;
/
*
auto-increment
*
/
$
sql
=
'
'
insert
INTO
client
(
id
,
nom
,
email
,
adresse
)
valoir
(
'
$
id
'
,
'
$
nom
'
,
'
$
email
'
,
'
$
adr
'
)
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
if
(
!
$
result
)
{
echo
'
'
<
p
>
désoler
,
...
<
/
p
>
'
'
;
}
else
{
echo
'
'
<
p
>
vous
être
le
client
numéro
<
i
>
'
'
.
$
mysqli-
>
insert_id
.
`
`
<
/
i
>
<
/
p
>
'
'
;
}
$
mysqli-
>
clore
(
)
;
}
...
?
>
MySQLi
•
récupération
du
donnée
$
result
=
$
mysqli-
>
query
(
`
`
select
*
FROM
table
'
'
)
;
–
le
requête
select
fournir
du
donnée
–
on
récupérer
le
résultat
(
ligne
à
ligne
)
à
l
’
aide
du
opération
fetch_
*
–
chaque
appel
à
fetch_
*
retourner
le
prochain
ligne
•
ligner
dans
un
tableau
à
indice
:
$
result-
>
fetch_row
(
)
;
•
ligner
dans
un
tableau
associatif
:
$
result-
>
fetch_assoc
(
)
;
•
ligner
dans
un
objet
:
$
result-
>
fetch_object
(
)
;
dns-remplacer
<
?
php
function
connexion
(
)
{
...
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
...
return
$
mysqli
;
}
?
>
on
exécuter
le
requête
avec
l
’
opération
$
mysqli-
>
query
L
’
opération
$
result-
>
fetch_object
récupérer
le
prochain
ligne
,
faux
s
’
il
n
’
y
rester
plus
de
ligne
.
chaque
attribut
de
le
requête
devenir
un
attribut
de
l
’
objet
$
ligner
dns-remplacer
<
?
php
require
'
'
dns-remplacer
'
'
;
$
mysqli
=
connexion
(
)
;
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
if
(
!
$
result
)
{
echo
'
'
<
p
>
Desolée
...
<
/
p
>
'
'
;
}
else
{
...
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne-
>
id
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
nom
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
email
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
adresse
.
`
`
<
/
td
>
'
'
;
...
}
...
}
?
>
MySQLi
le
même
requête
avec
récupération
du
information
•
...
par
tableau
à
indice
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
while
(
$
ligne
=
$
result-
>
fetch_row
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
...
}
...
cela
commencer
toujours
par
•
...
par
tableau
associatif
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
while
(
$
ligne
=
$
result-
>
fetch_assoc
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
id
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
nom
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
email
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
adresse
'
]
.
`
`
<
td
>
'
'
;
...
}
...
chaque
attribut
être
accessible
par
son
nom
MySQLi
•
autre
information
pouvoir
être
récupérer
d
’
un
objet
mysqli_result
(
$
result
=
$
mysqli-
>
query
(
...
)
)
–
combien
de
ligne
et
colonne
on
pouvoir
récupérer
•
$
nbligne
=
$
result-
>
num_rows
;
•
$
nbcol
=
$
result-
>
field_count
;
–
le
nom
du
colonne
(
attribut
)
dans
le
résultat
•
$
colonne
=
$
result-
>
fetch_fields
(
)
;
MySQLi
à
partir
de
l
’
objet
$
result
,
on
pouvoir
récupérer
le
nombre
de
ligne
(
attribut
num_rows
)
et
de
colonne
par
ligne
(
attribut
field_count
)
.
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
echo
'
'
<
p
>
nous
avoir
'
'
.
$
result-
>
num_rows
.
`
`
client
.
<
/
p
>
'
'
;
echo
'
'
<
p
>
il
y
avoir
'
'
.
$
result-
>
field_count
.
'
'
attribut
par
client
.
<
/
p
>
'
'
;
...
on
pouvoir
aussi
récupérer
le
colonne
.
chaque
colonne
être
un
objet
et
l
’
attribut
name
donner
son
nom
.
le
ligne
aussi
être
un
objet
dont
le
attribut
correspondre
au
colonne
.
on
pouvoir
utiliser
un
foreach
pour
accéder
à
le
valeur
du
attribut
.
...
$
titre
=
$
result-
>
fetch_fields
(
)
;
foreach
(
$
titre
avoir
$
colonne
)
{
echo
'
'
<
th
>
'
'
.
$
colonne-
>
name
.
'
'
<
/
th
>
'
'
;
}
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
echo
'
'
<
tr
>
'
'
;
foreach
(
$
ligne
avoir
$
colonne
=
>
$
val
)
{
echo
'
'
<
td
>
'
'
.
$
val
.
`
`
<
/
td
>
'
'
;
}
}
echo
'
'
<
/
tr
>
'
'
;
}
...
MySQLi
$
mysql
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
$
mysql-
>
connect_errno
(
)
;
$
sql
=
'
'
insert
INTO
client
(
id
,
nom
,
email
,
adresse
)
valoir
(
'
$
id
'
,
'
$
nom
'
,
'
$
email
'
,
'
$
adr
'
)
'
'
;
$
result
=
$
mysql-
>
query
(
$
sql
)
;
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
$
ligne-
>
id
;
$
ligne-
>
nom
;
}
$
mysql-
>
clore
(
)
;
MySQLi
•
pour
debugger
:
(
sauf
en
production
)
/
*
test
d
’
erreur
avoir
le
connexion
*
/
$
mysqli
=
new
mysqli
(
`
`
localhost
'
'
,
'
'
nobody
'
'
,
'
'
'
'
)
;
if
(
mysqli_connect_errno
(
)
)
{
printf
(
`
`
le
connexion
avoir
échouer
:
%
s\n
'
'
,
mysqli_connect_error
(
)
)
;
exit
(
)
;
}
/
*
test
d
’
erreur
lors
de
le
requête
*
/
if
(
!
$
mysqli-
>
query
(
`
`
set
avoir
=
'
'
)
)
{
print_r
(
$
mysqli-
>
error_list
)
;
}
PDO
•
PDO
:
PHP
dater
Object
•
piloter
générique
multi-SGBD
–
MySQL
,
PostGreSQL
,
oracle
,
DB2
,
SQL
Server
,
...
•
similaire
à
MySQLi
–
quelque
variation
dans
le
syntaxe
...
–
...
et
dans
le
comportement
PDO
:
connexion
•
connexion
se
faire
avec
un
«
connection
string
»
contenir
le
information
de
le
BDD
:
–
host
:
Localhost
(
ou
ip-remplacée
>
)
–
port
:
$
connexion
=
new
PDO
(
'
'
mysql
:
host
=
mon_serveur
;
port
=
mon_port
;
dbname
=
ma_bdd
'
'
,
'
'
mon_login
'
'
,
'
'
mon_pass
'
'
)
;
PDO
:
Ecriture
/
EXEC
•
requêter
d
’
écriture
:
insert
,
UPDATE
,
DELETE
–
se
faire
avec
méthode
PDO
:
:
exec
(
)
–
pas
avec
QUERY
!
–
renvoyer
le
nombre
de
modification
effectuer
(
integer
)
$
requete
=
'
'
DELETE
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
compteur
=
$
connexion-
>
exec
(
$
requete
)
;
PDO
:
lecture
/
QUERY
•
requêter
de
lecture
:
select
–
se
faire
avec
méthode
PDO
:
:
query
(
)
–
pas
avec
EXEC
!
–
renvoyer
le
résultat
(
PDOStatement
)
$
requete
=
'
'
select
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
PDO
:
résultat
/
fetch
•
lecture
de
le
réponse
d
’
un
requête
de
lecture
:
fetch
•
fetch
(
)
:
renvoyer
le
ligne
suivant
du
résultat
•
fetchObject
(
)
:
renvoyer
le
ligne
suivant
en
tant
qu
’
objet
•
fetchAll
(
)
:
renvoyer
un
tableau
de
tout
le
réponse
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
;
<
-
tableau
associatif
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_NUM
)
;
<
-
tableau
simple
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_BOTH
)
;
<
-
le
(
par
défaut
)
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
<
-
objet
PDO
:
fermeture
connexion
•
avant
de
refaire
un
requête
,
il
falloir
libérer
le
curseur
en
place
$
resultats-
>
closeCursor
(
)
;
PDO
$
connexion
=
new
PDO
(
'
'
mysql
:
host
=
mon_serveur
;
port
=
mon_port
;
dbname
=
ma_bdd
'
'
,
'
'
mon_login
'
'
,
'
'
mon_pass
'
'
)
;
$
requete
=
'
'
select
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
while
(
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
)
{
$
ligne-
>
id
;
$
ligne-
>
nom
;
}
$
resultats-
>
closeCursor
(
)
;
PDO
:
...
or
die
(
)
•
pour
débugger
son
requête
,
ne
pas
oublier
de
demander
à
PHP
d
’
afficher
l
’
erreur
s
’
il
y
en
avoir
!
–
sauf
en
production
!
un
fois
le
site
en
ligne
,
il
ne
falloir
jamais
afficher
le
erreur
...
–
risquer
qu
’
un
pirate
récupérer
le
information
de
debug
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
if
(
!
$
resultats
)
{
print_r
(
$
connexion-
>
errorInfo
(
)
)
;
}
programmation
orienter
objet
(
POO
)
«
classe
et
objet
»
•
un
classe
permettre
le
définition
d
’
un
nouveau
type
de
variable
qui
rassembler
plusieurs
attribut
.
–
elle
permettre
également
le
définition
de
fonction
manipuler
ce
attribut
,
en
POO
,
ce
fonction
s
’
appeler
du
‘
méthode
’
.
•
un
objet
être
un
instance
d
’
un
classe
.
un
objet
être
alors
assimiler
à
un
variable
et
son
classe
au
type
de
ce
objet
.
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
le
POO
avoir
deux
but
:
•
faciliter
le
réutilisation
du
code
déjà
écrire
grâce
à
le
héritage
•
encapsulation
du
donnée
et
le
traitement
correspondant
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
•
faciliter
le
réutilisation
du
code
déjà
écrire
grâce
à
le
héritage
:
–
L
’
héritage
permettre
,
à
partir
de
un
classe
déjà
existant
,
de
en
créer
un
nouveau
qui
reprendre
son
caractéristique
et
de
la|le
adapter
au
besoin
sans
modifier
le
classe
de
base
.
–
il
être
possible
alors
de
redéfinir
un
méthode
dans
du
classe
hériter
de
un
classe
de
base
sauf
si
ce
méthode
avoir
être
définir
comme
final
.
L
’
appel
de
le
méthode
de
un
objet
être
possible
sans
se
soucier
de
son
type
intrinsèque
:
il
se
agir
du
polymorphisme
.
•
le
polymorphisme
traire
de
le
capacité
de
le
objet
à
posséder
plusieurs
forme
.
ex
:
ma_fonction
(
int
i
)
ma_fonction
(
string
str
)
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
•
encapsulation
du
donnée
et
le
traitement
correspondant
.
–
L
’
encapsulation
permettre
de
regrouper
un
ensemble
d
’
attribut
avec
un
ensemble
de
méthode
en
un
classe
permettre
de
la|le
manipuler
.
PHP
orienter
objet
•
PHP
être
un
langage
«
orienter
objet
»
–
manipulation
de
classe
et
d
’
objet
définition
de
classe
class
personne
visibilité
:
private
$
nom
définition
d
’
un
attribut
opération
:
public
function
...
accès
à
un
attribut
$
this-
>
attribut
retourner
un
valeur
return
valeur
;
<
?
php
class
personne
{
private
$
nom
;
public
function
setNom
(
$
nouvNom
)
{
$
this-
>
nom
=
$
nouvNom
;
}
public
function
getNom
(
)
{
return
$
this-
>
nom
;
}
}
POO
en
PHP
«
visibilité
de
un
attribut
ou
de
un
méthode
»
•
«
public
»
:
si
un
attribut
ou
un
méthode
être
public
,
alors
on
pouvoir
y
avoir
accès
depuis
ne
importer
où
.
•
«
private
»
:
imposer
quelque
restriction
.
L
’
accès
au
attribut
et
méthode
être
seulement
possible
depuis
le
intérieur
de
le
classe
.
–
ne
mettre
jamais
le
constructeur
avec
le
type
de
visibilité
private
sinon
,
elle
ne
pouvoir
jamais
être
appeler
,
vous
ne
pouvoir
donc
pas
instancier
votre
classe
•
«
protected
»
avoir
le
même
effet
que
private
,
à
l
’
exception
que
tout
le
classe
fille
avoir
accès
au
attribut
protéger
.
PHP
orienter
objet
•
classer
&
objet
–
création
d
’
un
objet
:
$
obj
=
new
classe
(
)
;
création
d
’
un
objet
$
toto
=
new
personne
(
)
accès
au
opération
publique
$
toto-
>
setNom
(
`
`
toto
'
'
)
$
toto
-
>
getNom
(
)
impossible
d
’
accéder
au
attribut
privé
...
<
?
php
$
toto
=
new
personne
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
echo
'
'
<
p
>
...
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
$
toto-
>
nom
=
'
'
blablabla
'
'
;
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
?
>
PHP
orienter
objet
erreur
car
l
’
attribut
«
nom
»
être
priver
!
!
<
html
>
<
head
>
...
<
?
php
class
personne
{
private
$
nom
;
...
}
/
/
fin
classe
personne
?
>
<
/
head
>
<
body
>
...
<
?
php
$
toto
=
new
personne
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
echo
'
'
<
p
>
objet
<
i
>
personne
<
/
i
>
:
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
...
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
?
>
<
/
body
>
<
/
htlml
>
PHP
orienter
objet
•
classer
&
objet
:
–
héritage
:
class
SousClasse
extends
superclasse
le
classe
Employe
hériter
de
le
classe
personne
class
Employe
extends
personne
on
rajouter
un
nouveau
attribut
private
$
salaire
et
du
nouveau
opération
public
function
augmentation
public
function
getSalaire
class
Employe
extends
personne
{
private
$
salaire
=
;
public
function
augmentation
(
$
perc
)
{
if
(
$
perc
>
)
{
$
this-
>
salaire
=
$
this-
>
salaire
$
this-
>
salaire
*
$
perc
;
}
}
public
function
getSalaire
(
)
{
return
$
this-
>
salaire
;
}
}
fichier
dns-remplacé
PHP
orienter
objet
•
classer
&
objet
on
importer
le
définition
du
classe
Employe
et
personne
toto
être
un
employé
,
il
être
donc
un
personne
toto
posséder
un
salaire
(
Employe
)
,
mais
aussi
un
nom
(
personne
)
le
classe
Employe
hériter
tout
le
attribut
et
opération
de
personne
<
?
php
include
'
'
dns-remplacer
'
'
;
$
toto
=
new
Employe
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
;
echo
'
'
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
`
`
€
<
/
p
>
'
'
;
?
>
PHP
orienter
objet
•
classer
&
objet
<
html
>
<
head
>
.
.
.
<
/
head
>
<
body
>
<
h@card@
>
objet
en
PHP
<
/
h1
>
<
?
php
include
'
'
dns-remplacer
'
'
;
$
toto
=
new
Employe
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
p
>
objet
Employe
:
<
/
p
>
<
ul
>
'
'
;
echo
'
'
<
li
>
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
<
/
li
>
'
'
;
echo
'
'
<
/
ul
>
'
'
;
?
>
<
/
body
>
<
/
html
>
PHP
orienter
objet
•
classer
&
objet
–
méthode
constructeur
:
__construct
–
redéfinition
d
’
un
opération
le
constructeur
être
appeler
chaque
fois
qu
’
un
objet
être
créer
(
new
)
redéfinition
de
l
’
opération
getSalaire
parent
:
:
getSalaire
correspondre
à
l
’
opération
getSalaire
définir
par
le
super-classe
(
Employe
)
class
manager
extends
Employe
{
private
$
bonus
;
function
__construct
(
$
bon
)
{
$
this-
>
bonus
=
$
bon
;
}
public
function
getSalaire
(
)
{
return
parent
:
:
getSalaire
(
)
$
this-
>
bonus
;
}
public
function
setBonus
(
$
nouvBon
)
{
...
}
public
function
getBonus
(
)
{
...
}
}
PHP
orienter
objet
•
classer
&
objet
appel
au
constructeur
:
function
__construct
(
$
bon
)
{
$
this-
>
bonus
=
$
bon
;
}
appel
à
l
’
opération
getSalaire
de
le
classe
manager
<
?
php
require
'
'
dns-remplacer
'
'
;
$
toto
=
new
manager
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
p
>
<
i
>
manager
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
,
salaire
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
'
'
.
`
`
,
bonus
'
'
.
$
toto-
>
getBonus
(
)
.
`
`
<
/
p
>
'
'
;
?
>
POO
en
PHP
«
l
’
opérateur
:
:
»
le
opérateur
de
résolution
de
portée
«
:
:
»
(
doubler
deux
point
)
fournir
un
moyen
de
accéder
au
membre
statique
ou
constant
,
ainsi
que
au
attribut
ou
méthode
surcharger
de
un
classe
.
•
le
mot
clé
«
self
:
:
»
être
utiliser
pour
accéder
au
méthode
et
attribut
statique
depuis
le
classe
•
le
mot
clé
«
parent
:
:
»
être
utiliser
pour
accéder
au
propriété
ou
au
méthode
surchargé
ou
constant
d
’
un
classe
depuis
le
classe
fille
•
pour
référencer
ce
élément
en
dehors
de
le
classe
,
utiliser
plutôt
le
nom
de
le
classe
«
nomClasse
:
:
»
PHP
:
session
•
mécanisme
de
session
–
chaque
visite
à
un
site
/
page
être
indépendant
–
le
session
permettre
de
conserver
le
information
du
visiteur
entre
le
page
–
le
information
sur
le
session
être
stocker
sur
le
serveur
•
fonctionnement
général
)
ouverture
de
session
:
session_start
(
)
•
chaque
utilisateur
recevoir
un
identifier
transmettre
entre
le
page
)
définition
du
variable
de
session
(
donner
)
•
le
variable
de
session
être
transmettre
de
page
à
page
•
$
_SESSION
[
`
`
variable
'
'
]
=
valeur
;
)
fermeture
de
session
:
session_destroy
(
)
PHP
:
session
Login
&
mdp
différent
de
uml
Login
&
mdp
correct
(
uml
/
uml
)
<
form
name
=
'
'
...
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
>
Login
:
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
:
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
PHP
:
session
ouverture
d
’
un
session
(
au
début
de
chaque
page
)
définition
du
variable
de
session
$
_SESSION
[
`
`
var
'
'
]
le
variable
de
session
contenir
le
information
qui
passer
de
page
en
page
.
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
...
$
login
=
$
_POST
[
`
`
login
'
'
]
;
$
mdp
=
$
_POST
[
`
`
mdp
'
'
]
;
if
(
$
login
=
=
'
'
uml
'
'
AND
$
mdp
=
=
'
'
uml
'
'
)
{
$
_SESSION
[
`
`
login
'
'
]
=
$
login
;
...
echo
'
'
<
h@card@
>
bienvenu
,
cher
$
login
<
/
h1
>
'
'
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
page
accessible
uniquement
au
membre
.
<
/
p
>
'
'
;
}
?
>
<
/
body
>
<
/
html
>
PHP
:
session
usage
du
variable
de
session
$
_SESSION
[
`
`
var
'
'
]
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
$
login
=
$
_SESSION
[
`
`
login
'
'
]
;
...
echo
'
'
<
p
>
client
<
b
>
$
login
<
/
b
>
:
ceci
être
un
page
pour
le
abonné
<
/
p
>
'
'
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
il
se
agir
de
un
page
priver
!
!
il
falloir
être
membre
.
<
/
p
>
'
'
;
}
?
>
...
PHP
:
session
fermeture
de
le
session
session_destroy
(
)
ne
pas
oublier
de
vider
le
variable
de
session
unset
(
$
_SESSION
[
'
'
var
'
'
]
)
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
...
unset
(
$
_SESSION
[
`
`
login
'
'
]
)
;
session_destroy
(
)
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
pas
de
connexion
actif
.
<
/
p
>
'
'
;
}
?
>
...
PHP
:
fonction
avancer
(
rappel
)
•
isset
(
$
var1
,
$
var2
,
...
)
:
déterminer
si
un
variable
ou
plusieurs
être
définir
et
être
différent
de
NULL
•
unset
(
$
var1
,
$
var2
,
...
)
:
détruire
le
variable
•
empty
(
$
var
)
:
déterminer
si
un
variable
être
vide
PHP
:
session
sans
session
,
si
on
demander
un
page
web
,
on
obtenir
un
réponse
classique
:
le
déclaration
habituel
du
serveur
web
,
et
le
page
demander
–
on
demander
un
page
web
classique
sans
session
au
serveur
web
sur
«
localhost
»
port
«
»
–
le
serveur
web
répondre
normalement
avec
le
code
HTTP
,
puis
avec
divers
valeur
indiquer
le
plugins
dont
il
disposer
–
le
serveur
web
envoyer
finalement
le
page
web
<
?
php
?
>
<
html
>
<
body
>
PageWeb
<
/
body
>
<
/
html
>
statut
HTTP
:
classique
(
rappel
)
OK
le
requête
avoir
bien
être
recevoir
,
comprendre
,
et
exécuter
permanent
Redirect
le
ressource
avoir
être
définitivement
déplacer
à
un
autre
URL
Temporary
Redirect
le
ressource
être
temporairement
déplacer
à
un
autre
URL
Forbidden
le
requête
être
correct
,
mais
le
client
n
’
avoir
pas
le
droit
de
demander
au
serveur
de
faire
ce
action
Not
Found
le
ressource
viser
par
l
’
URL
n
’
avoir
pas
être
trouver
Internal
Server
Error
erreur
générique
/
non
spécifique
...
le
serveur
web
avoir
échouer
quelque
chose
à
un
moment
Bad
Gateway
le
serveur
web
viser
n
’
arriver
pas
à
contacter
le
serveur
qui
traiter
le
requête
envoyer
PHP
:
session
–
on
demander
un
page
web
contenir
un
session
au
serveur
web
sur
«
localhost
»
port
«
»
–
le
serveur
web
répondre
avec
le
code
HTTP
,
puis
il
envoyer
le
numéro
de
session
PHP
(
un
ID
unique
)
.
ce
ID
être
renvoyer
par
le
navigateur
avec
chaque
requête
pour
identifier
le
–
le
serveur
web
envoyer
client
côté
serveur
finalement
le
page
web
lorsque
PHP
demander
à
créer
un
session
,
son
ID
être
transmettre
par
le
serveur
web
au
navigateur
.
côté
serveur
web
&
PHP
:
un
liste
du
session
actif
être
stocker
dans
du
fichier
(
avec
l
’
ensemble
du
variable
que
l
’
on
souhaiter
conserver
entre
chaque
page
web
)
côté
client
:
l
’
ID
de
session
être
renvoyer
pour
pouvoir
«
s
’
identifier
»
...
attention
!
L
’
ID
être
visible
sur
le
réseau
!
Quelqu
’
un
de
mal
intentionner
pouvoir
copier
ce
ID
et
s
’
identifier
avec
à
le
place
du
navigateur
légitime
...
pour
faire
un
session
«
à
peu
près
»
sécuriser
,
il
être
nécessaire
de
s
’
assurer
que
l
’
on
parler
au
même
navigateur
(
en
vérifier
l
’
IP
du
client
,
par
exemple
)
.
nous
ne
voir
pas
l
’
ensemble
du
bon
pratique
dans
ce
cours|cour
.
<
?
php
session_start
(
)
;
?
>
<
html
>
<
body
>
PageWeb
<
/
body
>
<
/
html
>
PHP
:
session
•
mécanisme
de
session
–
base
pour
le
gestion
de
panier
dans
le
site
de
e-commerce
–
le
produit
choisir
par
le
client
être
enregistrer
en
tant
que
variable
de
session
–
on
pouvoir
y
garder
du
objet
simple
contenir
du
panier
être
garder
dans
le
variable
de
session
.
tableau
contenir
du
objet
LigneProduit
.
chaque
$
_SESSION
[
$
produire
]
contenir
un
objet
.
class
LigneProduit
{
public
$
nom
;
public
$
qte
;
/
*
constructeur
*
/
function
__construct
(
$
nom
)
{
$
this-
>
nom
=
$
nom
;
$
this-
>
qte
=
;
}
}
PHP
:
session
chaque
produit
choisir
être
identifier
par
un
«
id
»
(
ici
le
nom
)
.
$
_SESSION
[
$
produire
]
aller
contenir
un
objet
LigneProduit
S
’
il
n
’
y
avoir
aucun
$
_SESSION
[
$
produit
]
,
on
aller
créer
un
nouveau
objet
LigneProduit
S
’
il
y
avoir
déjà
un
$
_SESSION
[
$
produit
]
,
on
aller
juste
augmenter
le
valeur
de
l
’
attribut
«
qte
»
dans
l
’
objet
LigneProduit
function
ajouterProduit
(
$
produit
)
{
$
qte
=
;
if
(
!
isset
(
$
_SESSION
[
$
produit
]
)
)
{
$
_SESSION
[
$
produit
]
=
new
LigneProduit
(
$
produit
)
;
$
qte
=
$
_SESSION
[
$
produit
]
-
>
qte
}
else
{
/
/
produire
déjà
là
,
augmenter
alors
son
quantité
$
objet
=
$
_SESSION
[
$
produit
]
;
$
objet-
>
qte
=
$
objet-
>
qte
;
$
qte
=
$
objet-
>
qte
;
}
return
$
qte
;
}
PHP
:
session
Lorsqu
’
on
vouloir
supprimer
un
produit
,
on
aller
réduire
son
quantité
dans
l
’
objet
LigneProduit
on
récupérer
l
’
objet
LigneProduit
garder
dans
$
_SESSION
[
$
produit
]
on
réduire
son
quantité
d
’
un
unité
S
’
il
n
’
en
rester
plus
(
le
quantité
avoir
atteindre
unité
)
,
on
supprimer
le
produit
de
le
session
function
supprimerProduit
(
$
produit
)
{
$
qte
=
;
if
(
isset
(
$
_SESSION
[
$
produit
]
)
)
{
$
objet
=
$
_SESSION
[
$
produit
]
;
$
objet-
>
qte
=
$
objet-
>
qte
-
;
$
qte
=
$
objet-
>
qte
;
if
(
$
qte
<
=
)
{
/
/
on
supprimer
le
produit
unset
(
$
_SESSION
[
$
produit
]
)
;
}
}
return
$
qte
;
}
PHP
:
session
on
pouvoir
récupérer
le
contenu
du
panier
en
récupérer
le
contenu
de
le
variable
de
session
$
_SESSION
pour
chaque
objet
LigneProduit
garder
dans
$
_SESSION
function
afficherPanier
(
)
{
echo
'
'
<
table
>
'
'
;
foreach
(
$
_SESSION
avoir
$
objet
)
{
echo
'
'
<
tr
>
<
td
>
'
'
.
$
objet-
>
nom
.
`
`
<
/
td
>
<
td
>
'
'
.
$
objet-
>
qte
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
}
echo
'
'
<
/
table
>
'
'
;
}
PHP
:
session
Cookies
•
un
cookie
être
un
mécanisme
pour
stocker
du
information
sur
le
visiteur
afin
de
la|le
identifier
plus
tard
•
contrairement
au
variable
de
session
,
le
cookies
être
du
petit
fichier
stocker
sur
l
’
ordinateur
de
l
’
utilisateur
pour
un
durée
de
vie
que
nous
pouvoir
définir
PHP
:
Cookies
•
le
cookies
être
accessible
via
le
superglobal
$
_COOKIE
•
le
fonction
setcookie
(
)
permettre
de
définir
un
cookie
qui
être
envoyer
avec
le
reste
du
en-tête
HTTP
–
le
cookies
faire
partie
du
en-tête
HTTP
,
ce
qui
imposer
que
setcookie
(
)
soit
appeler
avant
tout
affichage
de
texte
et
avant
même
<
!
doctype
>
–
le
fonction
setcookie
(
)
pouvoir
prendre
jusqu
'
à
paramètre
:
•
le
premier
être
obligatoire
car
il
définir
le
nom
du
cookie
•
le
deuxième
définir
le
valeur
du
cookie
•
le
troisième
définir
le
durée
de
vie
du
cookie
en
second
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
echo
$
_COOKIE
[
'
nom
’
]
;
/
/
affichage
du
cookie
PHP
:
Cookies
–
on
demander
un
page
web
contenir
un
session
et
un
cookie
avec
un
variable
–
le
serveur
web
répondre
avec
le
code
HTTP
,
puis
il
envoyer
le
numéro
de
session
PHP
,
et
le
variable
«
nom
»
contenir
le
valeur
«
nomUtilisateur
»
...
chacun
dans
un
cookie
lorsque
PHP
demander
à
créer
du
cookies
,
le
valeur
être
envoyer
par
le
serveur
web
au
navigateur
,
pour
que
celui
-ci
stocker
le
valeur
localement
.
le
cookies
être
stocker
sur
votre
disque
dur
!
...
il
être
donc
renvoyer
à
chaque
demande
de
page
web
.
attention
à
ne
pas
mettre
trop
de
donnée
:
-
ne
pas
y
mettre
de
fichier
-
ne
pas
y
mettre
d
’
objet
ou
conteneur
trop
gros
!
(
tableau
,
etc
...
)
<
?
php
session_start
(
)
;
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
?
>
PHP
:
Cookies
•
le
fonction
setrawcookie
(
)
être
exactement
le
même
que
setcookie
(
)
excepter
que
le
valeur
du
cookie
ne
être
pas
automatiquement
encoder
dans
l
’
URL
lors
de
le
envoi
au
navigateur
•
pour
détruire
un
cookie
:
appeler
setcookie
(
)
avec
un
date
d
’
expiration
dans
le
passé
:
setcookie
(
`
`
Nomcookie
'
'
,
'
'
valeurCookie
'
'
,
time
(
)
)
;
PHP
:
Cookies
•
exemple
de
cookie
sous
forme
de
tableau
:
<
?
php
setcookie
(
`
`
cookie
[
three
]
'
'
,
'
'
cookiethree
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
two
]
'
'
,
'
'
cookietwo
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
one
]
'
'
,
'
'
cookieone
'
'
,
time
(
)
*
)
;
?
>
<
?
php
/
/
affichage
de
ce
cookies
if
(
isset
(
$
_COOKIE
[
'
cookie
'
]
)
)
{
/
/
exemple
de
appel
du
cookie
:
echo
'
le
cookie
two
être
:
'
.
$
_COOKIE
[
'
cookie
'
]
[
'
two
'
]
.
'
sinon
parcours
avec
foreach
comme
suivre
:
<
br
/
>
'
;
foreach
(
$
_COOKIE
[
'
cookie
'
]
avoir
$
name
=
>
$
value
)
{
$
name
=
htmlspecialchar
(
$
name
)
;
$
value
=
htmlspecialchar
(
$
value
)
;
echo
'
'
$
name
:
$
value
<
br
/
>
'
'
;
}
}
?
>
PHP
:
Cookies
<
?
php
session_start
(
)
;
setcookie
(
`
`
cookie
[
three
]
'
'
,
'
'
cookiethree
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
two
]
'
'
,
'
'
cookietwo
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
one
]
'
'
,
'
'
cookieone
'
'
,
time
(
)
*
)
;
?
>
–
on
demander
un
page
web
contenir
un
session
et
trois
cookies
–
le
serveur
web
répondre
avec
le
code
HTTP
,
puis
il
envoyer
du
cookies
contenir
le
variable
et
le
numéro
de
session
PHP
chaque
cookie
être
envoyer
au
navigateur
avec
son
valeur
et
son
date
d
’
expiration
...
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
[
navigateur
faire
un
requête
]
le
client
avoir
cliquer
sur
le
lien
vers
dns-remplacé
bien
que
ce
page
n
’
avoir
besoin
d
’
aucun
valeur
de
cookie
(
hormis
le
session
)
,
le
navigateur
renvoyer
tout
le
temps
tout
son
valeur
stocker
dans
du
cookies
!
(
évident
:
le
navigateur
ne
connaître
pas
le
code
PHP
contenir
dans
le
page
web
,
donc
il
renvoyer
tout
le
valeur
qu
’
il
être
censé
conserver
)
PHP
:
Cookies
[
serveur
Web
répondre
]
le
serveur
web
«
détruire
»
le
session
...
en
pratiquer
cela
signifier
que
le
variable
de
session
être
détruire
...
mais
pas
celui
du
cookies
!
PHP
:
Cookies
[
navigateur
faire
un
requête
]
le
navigateur
demander
dns-remplacer
le
session
être
détruire
côté
serveur
,
mais
le
navigateur
continu
d
’
envoyer
l
’
ID
dont
il
disposer
,
ainsi
que
le
cookies
qu
’
il
avoir
stocker
PHP
:
Cookies
[
serveur
Web
répondre
]
on
forcer
le
serveur
web
avoir
écrire
du
valeur
de
session
et
de
cookies
...
seul
le
valeur
stocker
dans
le
cookies
être
affichables
...
être
donner
que
le
session
être
détruire
!
PHP
:
Cookies
en
effet
:
le
variable
stocker
dans
du
cookies
s
’
afficher
,
mais
pas
le
autre
-
nom
rester
vide
,
car
le
session
être
détruire
,
donc
le
contenu
être
vide
-
Prenom
et
MonRawCookie
s
’
afficher
car
il
être
renvoyer
par
le
navigateur
avec
chaque
requête
«
tant
que
»
leur
durée
de
vie
être
valable
PHP
:
Cookies
[
navigateur
faire
un
requête
]
le
navigateur
demander
le
page
dns-remplacé
il
continuer
d
’
envoyer
tout
le
variable
«
encore
valable
»
contenir
dans
du
cookies
PHP
:
Cookies
[
serveur
Web
répondre
]
le
serveur
web
répondre
,
mais
il
ne
renvoyer
aucun
ID
de
session
(
usage
de
le
valeur
précédent
encore
possible
)
PHP
:
Cookies
le
donnée
du
navigateur
être
stocker
dans
un
fichier
Cookie
«
prenom
»
,
contenir
«
Fab
»
,
pour
le
serveur
web
dns-remplacer
dans
le
dossier
«
test_cookie
»
avec
divers
timestamps
un
exemple
de
fichier
contenir
du
cookies
du
navigateur
du
client
.
le
valeur
être
lisible
!
ne
jamais
stocker
de
mot
de
passe
dans
un
cookie
!
(
que
le
contenu
de
le
variable
soit
chiffrer
ou
non
:
le
mot
de
passe
être
accessible
sur
l
’
ordinateur
du
client
!
)
Cookie
«
MonRawCookie
»
,
contenir
«
valeurCookie
»
,
pour
le
serveur
web
dns-remplacer
dans
le
dossier
«
test_cookie
»
avec
divers
timestamps
PHP
:
session
&
Cookies
•
session
:
variable
conserver
côté
serveur
–
session_start
(
)
;
/
/
sur
chaque
page
PHP
–
$
_SESSION
[
`
`
ma_variable
'
'
]
=
;
/
/
variable
–
unset
(
$
_SESSION
[
`
`
ma_variable
'
'
]
)
;
/
/
variable
–
session_destroy
(
)
;
/
/
seulement
en
fin
de
session
•
Cookies
:
variable
conserver
côté
client
–
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
–
echo
$
_COOKIE
[
'
nom
'
]
;
–
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
)
;
transaction
&
BDD
•
un
site
de
vente
en
ligne
avoir
presque
vider
son
stock
...
il
ne
rester
plus
qu
’
un
seul
objet
en
vente
en
un
seul
exemplaire
•
que
se
passe-t-il
lorsque
utilisateur
essayer
d
’
acheter
en
même
temps
ce
objet
?
–
impossible
à
déterminer
...
en
général
,
le
deux
utilisateur
arriver
à
passer
commande
,
et
le
vendeur
voir
commande
sur
le
même
objet
,
et
le
stock
passer
en
négatif
transaction
&
BDD
•
un
transaction
être
un
ensemble
de
requête
viser
à
changer
l
’
état
d
’
un
base
de
donnée
•
exemple
:
.
on
sélectionner
du
produit
dans
un
BDD
choix
du
produit
.
on
créer
un
nouveau
ligne
dans
un
table
création
d
’
un
nouveau
réservation
de
produit
.
on
réduire
du
valeur
dans
un
autre
table
réduction
de
le
quantité
de
plusieurs
produit
le
requête
être
exécuter
en
un
seul
transaction
transaction
&
BDD
•
un
transaction
pouvoir
être
vue
comme
un
requête
«
métier
»
/
haut
niveau
:
-
«
réserver
du
produit
dans
un
magasin
»
être
un
transaction
qu
’
un
client
pouvoir
demander
-
en
pratique
il
falloir
que
le
client
choisir
du
produit
disponible
,
que
l
’
on
préparer
un
note
lier
le
client
au
produit
,
et
isoler
le
produit
pour
la|le
mettre
de
côté
le
requête
«
technique
»
/
bas
niveau
tout
seul
n
’
avoir
que
peu
de
signification
,
mais
ensemble
elle
servir
un
but
commun
(
cf
process
mining
...
)
transaction
&
BDD
•
le
transaction
se
terminer
par
un
«
commettre
»
–
validation
de
le
transaction
–
écriture
du
modification
•
on
pouvoir
vouloir
annuler
un
transaction
en
cours|cour
de
route
ou
après
un
commettre
.
on
effectuer
dans
ce
cas
un
«
rollback
»
–
le
transaction
être
annuler
,
aucun
modification
n
’
être
apporter
au
donnée
dans
le
BDD
–
le
ancien
valeur
être
remettre
dans
le
BDD
transaction
&
BDD
le
«
commettre
»
être
le
dernier
étape
d
’
un
transaction
:
c
’
être
à
ce
moment
là
que
le
SGBD
enregistrer
le
changement
.
généralement
,
le
transaction
être
effectuer
en
mémoire
ram
,
et
lorsque
qu
’
un
commettre
être
effectuer
,
le
changement
être
inscrire
sur
le
disque
dur
.
si
un
SGBD
crasher
,
il
devoir
pouvoir
retrouver
son
dernier
état
cohérent
...
...
ou
alors
il
devoir
pouvoir
proposer
de
“
rejouer
”
l
’
ensemble
du
transaction
effectuer
pour
retrouver
un
base
de
donnée
cohérent
et
à
jour
.
le
transaction
(
leur
requête
grouper
)
être
enregistrer
dans
le
logs
du
SGBD
,
permettre
de
rejouer
l
’
ensemble
du
transaction
effectuer
.
transaction
&
BDD
•
propriété
ACID
:
–
atomicité
–
cohérence
–
isolation
–
durabilité
«
un
ensemble
de
propriété
qui
garantir
que
un
transaction
informatique
être
exécuter
de
façon
fiable
.
»
Wikipédia
–
propriété
ACID
le
propriété
ACID
permettre
d
’
assurer
qu
’
un
SGBD
supporter
le
«
transaction
»
transaction
&
BDD
•
atomicité
:
un
transaction
être
«
atomique
»
si
elle
s
’
effectuer
intégralement
ou
pas
du
tout
(
un
transaction
non-atomique
créer
un
réservation
avec
le
produit
,
mais
ne
réduire
pas
le
quantité
dans
le
stock
(
par
exemple
)
.
le
stock
réel
ne
être
pas
correctement
représenter
,
ce
qui
entraîner
du
problème
)
transaction
&
BDD
•
cohérence
:
le
cohérence
assurer
que
tout
le
contrainte
de
le
base
de
donnée
être
respecter
avant
et
après
le
transaction
(
l
’
état
de
le
base
de
donnée
être
valide
selon
le
règle
)
(
un
transaction
incohérent
permettre
par
exemple
de
faire
référence
à
du
objet
qui
n
’
exister
plus
,
ce
qui
bloquer
le
jointure
)
transaction
&
BDD
•
isolation
:
capacité
de
protéger
le
donnée
contre
plusieurs
modification
simultané
.
un
transaction
ne
devoir
pas
dépendre
du
donnée
d
’
un
autre
transaction
.
(
du
transaction
non-isolé
permettre
de
faire
du
modification
sur
du
valeur
qui
n
’
exister
plus
ou
qui
avoir
être
modifier
entre
temps
)
transaction
&
BDD
•
exemple
problème
isolation
:
un
produit
être
en
quantité
un
transaction
à
le
réduit
de
,
il
devoir
se
retrouver
à
,
mais
un
transaction
B
le
réduire
de
entre
temps
.
•
le
valeur
correct
devoir
être
=
=
>
–
=
mais
comme
l
’
ordre
du
écriture
être
important
:
)
à
lit
le
valeur
select
qte
FROM
produit
WHERE
nom
=
«
pomme
»
)
B
lire
le
valeur
select
qte
FROM
produit
WHERE
nom
=
«
pomme
»
)
B
réduire
de
le
quantité
:
–
=
(
UPDATE
qte
)
)
à
réduit
de
le
quantité
:
–
=
(
UPDATE
qte
)
)
le
valeur
final
être
,
car
B
être
exécuter
en
dernier
transaction
&
BDD
•
durabilité
:
en
cas
de
panne
(
de
l
’
ordinateur
,
du
système
d
’
exploitation
,
du
SGBD
,
...
)
,
le
transaction
exécuter
être
définitivement
enregistrer
.
(
à
moins
que
le
panne
ne
concerner
l
’
ensemble
du
disque
qui
contenir
le
BDD
,
le
transaction
effectuer
devoir
être
enregistrer
dès
qu
’
elle
être
effectuer
)
transaction
avec
MySQL
MySQL
avoir
le
particularité
de
gérer
plusieurs
moteur
de
stockage
dans
un
même
BDD
,
aussi
appeler
moteur
de
table
.
•
un
moteur
de
stockage
être
un
ensemble
d
’
algorithme
permettre
de
stocker
et
d
’
accéder
au
donnée
dans
un
SGBD
.
en
général
,
un
seul
moteur
être
utiliser
par
BDD
.
•
pour
lister
tout
le
moteur
,
utiliser
le
requête
:
show
ENGINES
;
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
MyISAM
:
moteur
par
défaut
jusque
MySQL
•
très
simple
d
’
utilisation
•
très
performant
sur
du
table
fréquemment
ouvrir
(
très
rapide
pour
le
opération
count
(
)
et
le
lecture
)
•
offrir
un
index
FULL-TEXT
qui
permettre
de
faire
du
recherche
précis
sur
du
texte
×
ne
supporter
ni
le
clé
étranger
,
ni
le
transaction
×
gérer
le
verrouillage
au
niveau
de
le
table
(
bloquer
le
table
entier
lors
du
opération
d
’
insertion
,
suppression
ou
MAJ
)
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
InnoDB
:
moteur
par
défaut
depuis
MySQL
•
gestion
du
clé
étranger
et
support
du
transaction
(
par
défaut
:
chaque
requête
SQL
être
considérer
comme
un
transaction
)
–
véritable
gestion
du
modèle
relationnel
&
transactionnel
–
respecter
ACID
•
gérer
le
verrouillage
au
niveau
de
le
ligne
×
ne
proposer
pas
d
’
index
FULL-TEXT
,
légèrement
plus
lent
dans
le
opération
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
Memory
:
stocker
le
donnée
de
le
table
en
mémoire
(
ram
)
.
•
accès
très
rapide
×
en
cas
de
panne
,
le
donnée
stocker
être
perdre
transaction
avec
MySQL
.
début
de
le
transaction
:
start
transaction
.
requête
:
select
,
UPDATE
,
...
.
validation
de
le
transaction
:
commettre
ou
annulation
de
le
transaction
en
cas
d
’
erreur
:
ROLLBACK
•
S
’
il
y
avoir
un
erreur
d
’
intégrité
dans
le
donnée
,
le
rollback
se
faire
automatiquement
transaction
avec
MySQL
ne
pas
oublier
d
’
utiliser
un
moteur
de
BDD
compatible
avec
le
transaction
et
le
propriété
ACID
...
...
et
utiliser
le
requête
et
fonction
de
transaction
si
nécessaire
...
...
sinon
:
un
requête
=
un
transaction
“
pas
toujours
ACID
”
transaction
avec
MySQL
exemple
de
gestion
de
transaction
:
achat
en
ligne
•
spécification
du
moteur
InnoDB
lors
de
le
création
de
le
table
,
pour
supporter
le
transaction
CREATE
tabler
compte
(
ID
int
,
solder
int
not
nul
)
ENGINE
=
InnoDB
;
set
autocommettre
=
;
/
/
désactiver
le
validation
automatique
du
requête
start
transaction
;
UPDATE
compter
set
solder
=
solde+100
where
id
=
IDVendeur
;
UPDATE
compter
set
solder
=
solde-100
where
id
=
IDAcheteur
;
commettre
;
transaction
avec
PDO
.
début
de
le
transaction
:
$
bdd-
>
beginTransaction
(
)
;
.
requête
de
le
transaction
:
$
bdd-
>
query
(
)
;
$
bdd-
>
query
(
)
;
.
validation
/
annulation
de
le
transaction
:
$
bdd-
>
commettre
(
)
;
$
bdd-
>
rollback
(
)
;
