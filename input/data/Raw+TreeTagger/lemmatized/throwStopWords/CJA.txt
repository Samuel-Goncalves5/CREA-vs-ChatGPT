langage
java
Petit
mémento
syntaxe
&
élément
programmation
site
REFERENCE
site
officiel
java
dns-remplacer
pouvoir
notamment
consulter
intérêt
-
tutoriel
dns-remplacer
/
doc
/
books
/
tutorial
/
-
grand
collection
petit
exemple
programmer
dns-remplacer
/
developer
/
codesamples
/
examplet
/
-
recommandation
styler
dns-remplacer
/
doc
/
codeconv
/
html
/
dns-remplacer
-
descriptif
tout
paquetage
classe
méthode
standard
dns-remplacer
/
javase
/
/
doc
/
api
/
-
mode
de
emploi
générateur
documentation
javadoc
dns-remplacer
/
j2se
/
javadoc
/
dns-remplacer
-
préparation
certification
programmeur
java
dns-remplacer
/
doc
/
books
/
tutorial
/
extra
/
certification
/
sommaire
langage
programmation
orienter
objet
programme
java
...
.
style
programmation
Identificateurs
commentaire
commentaire
documentation
commentaire
de
implémentation
fichier
java
nom
contenir
de
un
fichier
java
compilation
exécution
génération
documentation
paquetage
paquetage
standard
affectation
de
un
classe
paquetage
importation
de
un
classe
de
un
paquetage
classe
interface
...
...
classe
standard
classe
abstraire
sous-classe
classe
abstraire
sous-classe
interface
interface
classe
implanter
interface
Enumération
...
...
...
...
...
classe
imbriquer
Nested
classe
contrôle
de
accès
modificateur
instance
classe
type
DONNEES
...
.
type
primitif
type
objet
type
référence
.
.
classe
enveloppe
.
.
chaîne
caractère
non
modifiable
string
chaîne
caractère
modifiable
StringBuffer
...
...
...
...
...
...
...
...
.
.
tableau
collection
Transtypage
OPERATEURS
expression
opérateur
expression
arithmétique
opérateur
expression
booléen
opérateur
relationnel
METHODES
définition
appel
de
un
méthode
ordinaire
constructeur
méthode
main
...
...
...
...
...
.
instruction
instruction
de
affectation
instruction
contrôle
instruction
sélection
instruction
boucle
instruction
de
entrée
/
sortir
notion
flux
entrée
/
sortie
terminal
entrée
/
sortie
fichier
lecture
de
un
chaîne
caractère
formater
HERITAGE
...
...
.
notion
de
héritage
que
hériter
sous-classe
redéfinir
méthode
type
statique
/
dynamique
-
liaison
statique
/
dynamique
type
statique
/
dynamique
-
Transtypage
...
...
...
...
...
...
...
liaison
statique
/
dynamique
polymorphisme
classe
méthode
particulier
interface
exception
exception
contrôler
non
contrôler
classe
de
exception
standard
hiérarchie
Error
hiérarchie
exception
hiérarchie
RuntimeException
...
...
...
.
lancement
de
un
exception
capture
de
un
exception
...
...
...
clause
throws
instruction
try
.
.
catch
...
...
...
...
.
.
iii
définir
nouveau
classe
de
exception
annexe
-
programmation
graphique
swing
.
.
conteneur
composant
gestion
mettre
page
gestion
événement
notion
de
événement
réaliser
gestionnaire
de
événement
...
...
...
...
affichage
/
fermeture
de
un
fenêtre
graphique
architecture
composant
swing
...
...
Applets
annexe
-
THREADS
créer
thread
extension
classe
Thread
créer
thread
implémentation
le
interface
Runnable
...
...
...
...
...
...
...
.
.
synchronisation
communication
entre
threads
section
critique
synchronisation
communication
entre
threads
annexe
-
conception
DEVELOPPEMENT
java
conseil
général
bon
conception
classe
architecture
de
un
application
interactif
modèle
MVC
test
unitaire
définition
JUnit
...
...
...
.
java
Beans
design
pattern
exemple
modeler
singleton
exemple
modèle
Decorator
...
...
...
...
...
.
.
annexe
-
machine
virtuel
java
JVM
annexe
-
communication
entre
java
JNI
...
...
...
...
...
...
appel
de
un
procédure
déclaration
appel
java
prototype
Implémentation
Echange
donner
entre
java
déclaration
appel
java
prototype
Implémentation
annexe
-
PLATES-FORMES
java
annexe
-
glossaire
langage
programmation
orienter
objet
java
langage
programmation
orienter
objet
objet
représentation
simplifier
de
un
entité
monde
réel
entité
concret
ex
voiturer
non
ex
date
de
aujourd'hui
objet
caractériser
état
comportement
objet
stocker
état
variable
appeler
champ
attribut
présent
comportement
travers
fonctionnalité
appeler
méthode
exemple
de
objet
maVoiture
=
{
valeur
attribut
Fiat
griser
/
100km
...
.
méthode
démarrer
arrêter
accélérer
...
.
}
typiquement
le
état
encapsuler
cœur
le
objet
ne
être
accessible
depuis
le
extérieur
le
objet
consultation
modification
via
méthode
offrir
objet
exemple
le
objet
maVoiture
getCouleur
setCouleur
démarrer
arrêter
accélérer
Fiat
griser
interagir
objet
envoyer
message
demander
de
activation
de
un
méthode
exemple
de
envoi
de
un
message
objet
dns-remplacer
élérer
méthode
particulier
appeler
constructeur
permettre
de
initialiser
le
état
le
objet
création
classe
servir
regrouper
sous
catégorie
nom
générique
objet
partager
type
de
état
comportement
classer
type
de
objet
dire
réciproquement
que
un
objet
instance
classer
exemple
classer
automobile
=
{
attribut
marquer
couleur
consommation
...
.
méthode
démarrer
arrêter
accélérer
...
.
}
classe
pouvoir
être
organiser
hiérarchie
chaque
classe
hériter
alors
attribut
méthode
classer
situer
ligne
hiérarchique
ascendant
réaliser
programme
langage
orienter
objet
ce
être
-
modéliser
classe
objet
la|le
on
manipuler
-
écrire
classe
langage
programmation
orienter
objet
-
créer
objet
instance
classe
-
communiquer
objet
invoquer
leur
méthode
java
naître
le
entreprise
californien
Sun
Microsystem
concevoir
James
GOSLING
&
al
programme
java
style
programmation
largement
admettre
respect
syntaxe
programme
fonctionner
critère
qualité
suffisant
programmer
le
expérience
programmation
ainsi
conduire
établir
recommandation
styler
respecter
ne
être
techniquement
obligatoire
contribuer
améliorer
lisibilité
programmer
convention
viser
faire
finalité
économique
contribuer
produire
programme
plus
facilement
maintenable
pendant
tout
durée
vie
chapitre
suivant
exemple
respecter
convention
styler
préconiser
dns-remplacer
Identificateurs
quelque
règle
recommandation
nommer
identificateurs
+
caractère
minuscule-majuscule
caractère
discriminer
règle
langage
java
+
identificateurs
de
objet
champ
méthode
commencer
toujours
minuscule
convention
+
identificateurs
classe
de
interface
commencer
toujours
majuscule
convention
+
identificateurs
constant
tout
majuscule
convention
+
identificateurs
méthode
commencer
verbe
recommandation
commentaire
commentaire
documentation
commentaire
documentation
viser
décrire
spécification
coder
sans
considération
de
implémentation
destiner
développeur
utilisateur
ne
avoir
nécessairement
code
source
sous
main
commentaire
pouvoir
être
automatiquement
extraire
le
utilitaire
javadoc
constituer
fichier
documentation
HTML
documentation
de
un
classe
devoir
inclure
minima
-
nom
classe
fonctionnalité
grand
caractéristique
auteur
version
-
documentation
chaque
constructeur
chaque
méthode
documentation
de
un
méthode
devoir
inclure
minima
-
nom
méthode
fonctionnalité
description
chaque
paramètre
valeur
retourner
excepter
susceptible
de
être
lancer
méthode
syntaxe
/
*
*
*
commentaire
*
/
/
*
*
commentaire
*
/
principal
balise
commentaire
prédéfinies
author
version
param
return
see
throws
commentaire
de
implémentation
commentaire
de
implémentation
viser
expliciter
sans
paraphraser
code
choix
de
implémentation
choix
identificateurs
clarté
programmation
devoir
permettre
minimiser
nombre
tel
commentaire
syntaxe
/
*
*
commentaire
*
/
/
*
commentaire
*
/
/
/
commentaire
fichier
java
nom
contenir
de
un
fichier
java
+
chaque
fichier
source
java
contenir
seul
classe
publique
le
organisation
recommandé
suivant
commentaire
début
ce
être
commentaire
documentation
comprendre
typiquement
le
intitulé
classe
descriptif
sommaire
fonction
le
auteur
version
instruction
paquetage
instruction
de
import
déclaration
classer
+
fichier
devoir
contenir
moins
ligne
ligner
moins
caractère
voire
commentaire
documentation
recommandation
+
fichier
java
porter
nom
classe
publique
que
il
contenir
fichier
source
java
suffixer
.java
fichier
java
compiler
suffixer
.class
convention
suffixe
.java
.class
imposer
outil
compilation
exécution
génération
documentation
depuis
ligne
commander
+
compilation
javac
dns-remplacer
+
exécution
java
fileName
/
/
fichier
main
+
génération
documentation
javadoc
*
java
avoir
documentation
`
`
programmeur
`
`
compléter
comprendre
membre
priver
tout
classe
interaction
falloir
lancer
commander
le
option
-
private
paquetage
paquetage
package
anglais
bibliothèque
classer
organiser
façon
hiérarchique
nom
de
un
paquetage
nécessairement
nom
répertoire
nom
de
un
paquetage
toujours
lettre
minuscule
convention
différent
paquetage
pouvoir
être
rassembler
compacter
fichier
de
archiver
.zip
.jar
paquetage
standard
variable
de
environnement
CLASSPATH
indique
machiner
virtuel
java
trouver
classe
bibliothèque
classe
besoin
hiérarchie
partiel
paquetage
standard
java
applet
awt
io
lang
util
event
paquetage
plus
immédiatement
utile
paquetage
contenir
dns-remplacé
classe
relatif
entrer
/
sortir
dns-remplacer
classe
fondamental
type
basique
classe
envelopper
string
StringBuffer
...
...
classe
math
dns-remplacer
classe
utilitaire
divers
collection
ArrayList
Vector
classer
Random
gestion
date
heure
affectation
de
un
classe
paquetage
que
un
classe
appartenir
paquetage
falloir
déclarer
paquetage
de
appartenance
tête
fichier
source
syntaxe
package
packageName
importation
de
un
classe
de
un
paquetage
utiliser
classe
défini
paquetage
autre
celui
classe
de
utilisation
classe
devoir
être
importer
tête
fichier
source
syntaxe
import
dns-remplacer
import
packageName
*
/
/
former
déconseiller
car
peu
informatif
exemple
import
dns-remplacer
import
dns-remplacer
import
dns-remplacer
*
/
/
former
déconseiller
car
peu
informatif
paquetage
dns-remplacer
importer
automatiquement
classe
interface
classe
standard
syntaxe
public
class
ClassName
{
Fields
Constructors
Methods
/
/
accessor
methods
/
/
mutator
methods
}
exemple
/
*
*
*
class
RationalNumber
-
Represents
rational
number
num
/
den
*
*
author
AM
*
version
*
*
/
public
class
RationalNumber
{
/
/
FIELDS
private
int
numerator
private
int
denominator
private
boolean
reduced
/
/
CONSTRUCTORS
/
*
*
Construct
rational
number
initialized
to
/
*
/
public
RationalNumber
{
numerator
=
denominator
=
reduced
=
true
}
/
/
METHODS
-
ACCESSORS
/
*
*
Get
the
numerator
of
this
rational
number
*
/
public
int
getNumerator
{
return
numerator
}
/
*
*
Get
the
denominator
of
this
rational
number
*
/
public
int
getDenominator
{
return
denominator
}
/
*
*
Return
true
iff
the
numerator
/
denominator
form
is
irreducible
*
/
public
boolean
isReduced
{
return
reduced
}
/
/
METHODS
-
MUTATORS
/
*
*
set
this
rational
number
to
_numerator
/
_denominator
*
/
public
void
setNumber
int
_numerator
int
_denominator
{
numerator
=
_numerator
denominator
=
_denominator
reduced
=
false
}
/
*
*
set
this
rational
number
to
irreducible
*
numerator
/
denominator
form
*
/
public
void
reduce
{
int
divisor
=
greatestCommonDivisor
numerator
denominator
numerator
=
numerator
/
divisor
denominator
=
denominator
/
divisor
reduced
=
true
}
/
/
METHODS
-
UTILITIES
/
*
*
Return
the
greatest
common
divisor
of
the
two
integers
*
x
and
*
/
private
int
greatestCommonDivisor
int
x
int
{
int
divisor
/
/
implémenter
return
divisor
}
}
/
/
end
class
RationalNumber
classe
abstraire
sous-classe
classe
posséder
moins
méthode
abstrait
i.e.
sans
corps
abstraire
devoir
être
déclarer
modificateur
abstract
classe
abstraire
pouvoir
être
instanciées
pouvoir
créer
objet
falloir
créer
sous-classe
lequel
tout
méthode
abstrait
définir
sous-
classe
non
abstrait
pouvoir
alors
être
instanciée
classe
abstrait
syntaxe
public
abstract
class
ClassName
{
Fields
Constructors
Methods
}
exemple
/
*
*
*
abstract
class
progression
*
*
Represents
real
linear
progression
of
order
with
constant
*
coefficient
*
*
author
AM
*
version
*
/
public
abstract
class
progression
{
/
/
FIELDS
private
double
u0
/
/
the
first
term
of
the
progression
/
/
CONSTRUCTORS
/
*
*
Define
progression
the
first
term
of
which
is
u0
*
/
public
progression
double
u0
{
dns-remplacer
=
u0
}
/
/
METHODS
/
*
*
Get
the
first
term
of
this
progression
*
/
public
double
getu0
{
return
u0
}
/
*
*
Given
current
term
u
return
the
next
term
u
n+1
*
/
public
abstract
double
nextTerm
double
/
*
*
Return
the
term
of
rank
*
/
public
double
termOfRank
int
{
double
u
=
u0
/
/
u
double
v
/
/
u
n+1
for
int
i
=
i
=
i++
{
v
=
nextTerm
u
u
=
v
}
return
u
}
}
/
/
end
class
progression
sous-classe
syntaxe
public
class
SubclassName
extends
SuperclassName
{
Fields
Constructors
Methods
}
exemple
/
*
*
*
class
ArithGeomProgression
*
*
Represents
real
arithmetic-geometric
progression
with
constant
*
coefficient
u
n+1
=
*
u
+
b
*
*
author
AM
*
version
*
/
public
class
ArithGeomProgression
extends
progression
{
/
/
FIELDS
private
double
/
/
multiplying
coefficient
private
double
b
/
/
additif
coefficient
/
/
CONSTRUCTORS
/
*
*
Define
an
arithmetic-geometric
progression
*
param
u0O
first
term
of
the
progression
*
param
multiplying
coefficient
*
param
b
additif
coefficient
*
/
public
ArithGeomProgression
double
u0
double
double
b
{
super
u0
this.a.
=
this.b.
=
b
}
/
/
METHODS
/
*
*
Given
current
term
u
return
the
next
term
u
n+1
*
/
public
double
nextTerm
double
u
{
return
*
u
+
b
}
}
/
/
end
class
ArithGeomProgression
interface
remarquer
liminaire
terme
`
`
interface
`
`
sémantique
multiple
cadre
programmation
java
pouvoir
prendre
selon
contexte
trois
sens|sen
distinct
conceptuellement
apparenter
-
sens|sen
informatique
commun
interface
`
`
jonction
entre
deux
élément
matériel
logiciel
permettre
le
échange
de
information
`
`
exemple
le
interface
homme-machine
-
sens|sen
programmation
objet
le
interface
de
un
classe
partie
visible
publique
classe
définir
typiquement
liste
membre
attribut
constructeur
méthode
non
priver
associer
leur
commentaire
documentation
-
sens|sen
spécifique
langage
java
interface
sorte
classer
abstraire
posséder
caractéristique
particulier
définir
protocole
comportement
ce
être
sens|sen
définir
section
ce
être
contexte
de
utilisation
donner
sens|sen
mot
interface
interface
sentir
langage
java
sorte
classe
abstraire
sans
aucun
détail
de
implémentation
posséder
degré
de
abstraction
supérieur
celui
classe
abstrait
interface
-
méthode
tout
implicitement
abstraire
elle
ne
avoir
corps
-
noter
que
il
ne
être
recommander
de
ajouter
modificateur
abstract
puisqu'il
implicite
-
posséder
champ
le
exception
éventuel
constant
classe
implicitement
static
final
assigner
-
membre
implicitement
public
le
interface
publique
interface
spécifier
signature
minimal
de
un
classe
le
implémente
interface
contrat
respecter
quand
classe
implémente
interface
se
engager
conformer
interface
classe
pouvoir
implémenter
plusieurs
interface
classe
définir
type
implémentation
interface
définir
type
sans
implémentation
interface
syntaxe
public
interface
InterfaceName
{
constantAttribute
abstractMethods
}
exemple
public
interface
Measurable
{
double
size
/
*
*
return
if
this
is
=
or
than
x
*
/
int
isLargerThan
Measurable
x
}
classe
implanter
interface
syntaxe
public
class
ClassName
implements
InterfaceNamel
InterfaceName2
{
}
exemple
public
class
square
implements
Measurable
{
private
double
width
public
square
double
_width
{
width
=
_width
}
public
double
size
{
return
width
*
width
}
public
int
isLargerThan
Measurable
x
{
if
dns-remplacer
x.size
{
return
}
if
dns-remplacé
x.size
{
return
}
return
}
}
Enumération
classer
enum
permettre
représenter
ensemble
constant
nommer
type
classer
elle
même
classe
contribuer
accroître
lisibilité
programmer
syntaxe
public
enum
EnumName
{
/
/
List
of
named
constant
/
/
Possibility
of
other
fields
and
methods
.
}
exemple
public
enum
direction
{
NORTH
SOUTH
EAST
WEST
}
public
class
test
{
private
direction
dir
public
setDir
direction
{
dir
=
}
public
boolean
isNorthSouth
{
return
dir
=
=
dns-remplacer
|
|
dir
=
=
dns-remplacer
}
}
sous
forme
plus
simple
classe
enum
souvent
utiliser
sous
forme
de
un
classe
interner
inner
class
exemple
public
class
MyClass
{
private
direction
dir
private
enum
direction
{
NORTH
SOUTH
EAST
WEST
}
public
void
setNorth
{
dir
=
dns-remplacer
}
}
-
possible
de
associer
chaque
constant
énumérer
valeur
de
un
type
quelconque
-
possible
de
utiliser
type
énumérer
instruction
switch
classe
imbriquer
Nested
classe
concept
ne
être
vital
débuter
classe
pouvoir
être
définir
le
intérieur
de
un
autre
classe
parler
alors
classe
imbriquer
distinguer
quatre
catégorie
-
classe
membre
déclarer
static
static
nested
classe
membre
statique
classe
englobant
-
classe
interne
inner
classe
membre
non
statique
classe
englobant
-
classe
local
local
classe
classer
définir
le
intérieur
de
un
méthode
-
classe
anonyme
anonymous
classe
classe
local
sans
nom
exemple
public
class
OuterClass
{
public
static
class
StaticNestedClass
{
}
private
class
InnerClass
{
}
}
/
/
exemple
référence
classe
StaticNestedClass
/
/
dns-remplacer
quel
intérêt
peut-il
avoir
déclarer
classe
imbriquer
potentiellement
regroupement
logique
encapsulation
accroître|accroire
coder
plus
lisible
plus
facilement
maintenable
pratique
plupart
classer
imbriquer
classe
interne
quant
classe
anonyme
elle
pouvoir
rendre
code
difficile
lire
devoir
être
limiter
classe
très
petit
de
un
deux
méthode
voir
exemple
typique
section
contrôle
de
accès
modificateur
contrôle
de
accès
membre
de
un
classe
pouvoir
être
préciser
déclaration
mots-clés
appeler
modificateur
modificateur
permettre
spécifier
-
visibilité
champ
méthode
private
protected
public
-
lieu
stockage
classer
modificateur
static
le
objet
défaut
-
caractère
modifiable
défaut
non
modificateur
final
modificateur
*
commentaire
exemple
private
membrer
déclarer
private
ne
être
accessible
'
le
intérieur
classe
définition
modificateur
de
accès
recommander
champ
protected
membrer
déclarer
protected
ne
être
accessible
depuis
classe
déclaration
sous-classe
classer
paquetage
modificateur
de
accès
recommander
méthode
super-
classe
public
membrer
déclarer
public
accessible
depuis
ne
importer
quel
classer
modificateur
de
accès
recommander
méthode
static
champ
déclarer
static
variable
classe
ne
être
dupliquer
différent
instance
champ
non
static
variable
de
instance
dupliquer
chaque
instance
méthode
déclarer
static
méthode
classer
invoquer
sans
référence
objet
particulier
faire
référence
classer
méthode
non
static
méthode
de
instance
invoquer
objet
particulier
voir
également
chapitrer
@ord@
final
variable
déclarer
final
pouvoir
plus
être
modifier
après
que
elle
initialiser
cela
permettre
particulier
déclarer
champ
constant
exemple
final
int
SIZE
=
méthode
déclarer
final
pouvoir
être
redéfinir
sous-classe
classer
déclarer
final
pouvoir
être
sous-classer
*
noter
défaut
modificateur
private
protected
public
visibilité
dire
package
access
`
`
membrer
classe
visible
depuis
tout
classe
paquetage
exemple
public
static
final
double
GRAVITY
=
instance
classer
avant
pouvoir
être
utiliser
objet
-
instance
classe
-
devoir
être
déclarer
ClassName
objectName
créer
puis
initialiser
objectName
=
new
constructorCall
exemple
GregorianCalendar
cal
cal
=
GregorianCalendar
Timer
myTimer
=
new
Timer
déclaration
de
un
objet
créer
le
objet
uniquement
variable
pointeur
destiner
mémoriser
le
adresse
futur
le
objet
création
le
objet
lui
même
i.e.
le
instance
proprement
dire
réaliser
le
opérateur
new
le
appel
constructeur
suivre
le
opérateur
new
rôle
de
initialiser
proprement
le
objet
ainsi
créer
in
fine
le
adresse
le
objet
ainsi
créer
initialiser
adresse
renvoyer
le
opérateur
new
stocker
grâce
le
opérateur
de
affectation
=
variable
préalablement
déclarer
quelque
précision
important
*
déclaration
déclaration
ClassName
objectName
créer
variable
nom
objectName
typer
référence
i.e.
pointeur
la|le
initialiser
automatiquement
null
null
constant
littéral
prédéfinie
java
pouvoir
être
assigner
tout
variable
type
référence
identifier
pointeur
nul
variable
valeur
null
poindre
vers
aucun
objet
tout
tentative
référer
objet
partir
de
un
pointeur
null
engendrer
erreur
compilation
de
exécution
selon
contexte
*
gestion
dynamique
mémoire
le
opérateur
new
créer
le
instance
classer
zone
mémoire
général
appeler
`
`
tas
`
`
contenir
tout
donnée
allouer
le
exécution
ne
avoir
porter
local
le
objet
ainsi
créer
conserver
porter
global
rester
`
`
vivant
`
`
tant
que
on
disposer
de
un
référence
i.e.
pointeur
permettre
'
accéder
quand
objet
ne
être
plus
référencer
devenir
définitivement
inaccessible
mourir
`
`
espace
mémoire
automatiquement
désalloué
récupération
automatique
espace
mémoire
réaliser
processus
appeler
ramasse-miettes
garbage
collector
façon
détruire
objet
de
assigner
valeur
null
variable
faire
référence
directement
indirectement
type
DONNEES
java
connaître
deux
type
donner
-
type
primitif
donné
type
primitif
stocker
directement
variable
sémantique
valeur
i.e.
ce
être
valeur
copier
quand
variable
affecté
autre
variable
-
type
objet
type
référencer
donner
type
objet
stocker
sous
forme
référencer
objet
non
tant
que
objet
quand
variable
type
objet
affecter
autre
variable
seul
référencer
copier
le
objet
lui
même
java
utiliser
système
Unicode-4
interner
coder
caractère
chaîne
caractère
identificateurs
chaque
caractère
Unicode
coder
bit
permettre
représenter
nombreux
alphabet
grec
cyrillique
hébreu
arabe
ainsi
symbole
mathématique
technique
bien
que
Unicode
utiliser
certain
système
de
exploitation
Windows
NT
Vista
exemple
plupart
système
de
exploitation
utiliser
système
codage
bit
sorte
transcodage
nécessaire
problème
de
incompatibilité
pouvoir
survenir
le
affichage
type
primitif
typer
description
exemple
littéral
nombre
entier
type
signer
byte
octet
entier
bit
short
entier
courir
bit
int
entier
bit
long
entier
long
bit
5123456789L
-55L
nombre
réel
type
signé
float
réel
simple
précision
43.889F
341.159E-2F
double
réel
double
précision
-2.4E107
autre
type
type
non
signé
char
caractère
seul
bit
'
'
'
\u00F6
'
boolean
valeur
booléen
false
true
+
nombre
sans
point
décimal
interpréter
comme
entier
type
int
immédiatement
convertir
byte
short
long
lors
le
affection
pouvoir
déclarer
littéral
type
long
la|le
affecter
suffixer
+
nombre
point
décimal
interpréter
comme
réel
type
double
pouvoir
déclarer
littéral
type
float
la|le
affecter
suffixe
F
+
caractère
littéral
pouvoir
être
écrire
sous
forme
de
un
unique
caractère
Unicode
entre
apostrophe
de
un
valeur
Unicode
précéder
'
\u
'
+
deux
littéral
booléen
true
false
+
variable
de
un
type
primitif
référer
objet
elle
ne
avoir
méthode
associer
type
objet
type
référencer
tout
type
autre
type
primitif
type
objet
inclure
classe
non
abstrait
bibliothèque
standard
java
tel
type
string
exemple
ainsi
classe
définir
le
utilisateur
variable
de
un
type
objet
contenir
référence
pointeur
objet
affectation
passage
paramètre
sémantique
référencer
i.e.
ce
être
référence
copier
non
le
objet
lui
même
après
le
affectation
de
un
variable
autre
deux
variable
référer
objet
se
agir
de
un
copie
surfacer
opposition
copier
profond
dupliquer
objet
deux
variable
alors
dire
alias
objet
classe
envelopper
classe
enveloppe
permettre
transformer
type
simple
objet
opération
appeler
anglais
boxing
classe
envelopper
type
primitif
Boolean
boolean
Byte
byte
Character
char
double
double
Float
float
Integer
int
long
long
short
short
exemple
/
/
convert
primitif
typer
wrapper
type
Integer
k
=
new
Integer
/
/
convert
wrapper
typer
primitif
type
double
x
=
K.doubleValue
classe
enveloppe
utile
quand
méthode
ne
accepter
type
simple
requérir
objet
toutefois
depuis
plate-forme
voir
chapitre
valeur
typer
primitif
cas
besoin
implicitement
convertir
le
objet
classe
envelopper
correspondant
autoboxing
réciproquement
unboxing
auparavant
conversion
devoir
être
explicite
objet
tel
classe
immuable
immutable
ce
est-à-dire
non
modifiable
fois
créer
conséquence
méthode
pouvoir
avoir
paramètre
sortir
tel
type
classer
enveloppe
présenter
surtout
le
intérêt
de
offrir
méthode
conversion
type
primitif
-
string
ainsi
utilitaire
donnée
typer
primitif
exemple
/
/
Convert
string
type
-
primitif
type
double
x
=
dns-remplacer
`
`
`
`
chaîne
caractère
non
modifiable
string
bien
chaîne
caractère
typer
string
objet
ne
être
nécessaire
de
avoir
recourir
le
opérateur
new
créer
caractère
de
un
chaîne
caractère
chainer
indicer
dns-remplacé
chaîne
caractère
littéral
noter
entre
apostrophe
le
opérateur
+
le
opérateur
concaténation
chaîne
produire
nouveau
chaîne
sans
élément
physiquement
partagé
opérande
comparaison
deux
chaîne
caractère
caractère
nécessiter
faire
appel
fonction
equals
le
opérateur
=
=
donner
résultat
intuitivement
attendre
cas
particulier
objet
typer
string
immuable
immutable
ce
est-à-dire
non
modifiable
fois
créer
conséquence
méthode
pouvoir
avoir
paramètre
sortir
typer
string
classer
string
appartenir
paquetage
dns-remplacer
exemple
string
chainer
=
`
`
exemple
n
°
+
+
`
`
chaine
littéral
dns-remplacer
`
`
longueur
\
+
chainer
+
`
`
\
=
+
dns-remplacer
chaîne
caractère
modifiable
StringBuffer
chaîner
caractère
contrairement
chaîne
typer
string
pouvoir
être
modifier
le
opérateur
new
indispensable
créer
chaîne
type
StringBuffer
classer
StringBuffer
appartenir
paquetage
dns-remplacer
exemple
StringBuffer
chainer
chaine
=
new
StringBuffer
`
`
meeting
at
pm
dns-remplacer
'
'
/
/
meeting
at
and
not
dns-remplacé
chainer
tableau
tableau
collection
tailler
fixe
de
élément
typer
chaque
élément
repérer
indice
permettre
accès
direct
le
élément
tout
tableau
automatiquement
associer
classe
dériver
de
Object
partager
tout
tableau
type
de
élément
le
attribut
de
instance
length
champ
public
non
méthode
contenir
nombre
de
élément
tableau
élément
de
un
tableau
array
indicer
dns-remplacé
-
quand
tente
de
accéder
élément
le
indice
hors
plage
permettre
exception
type
IndexOutOfBoundsException
lever
noter
que
un
tableau
caractère
ne
être
objet
type
Siring
réciproquement
syntaxe
cas
de
un
tableau
mono-dimensionnel
/
/
Declaring
an
array
variable
TypeOfElements
arrayVariable
/
/
Creating
an
array
object
arrayVariable
=
new
TypeOfElements
numberOfElements
/
/
Referring
to
an
element
arrayVariable
integerIndex
exemple
/
/
Declaring
an
array
variable
private
double
mark
/
/
Creating
an
array
object
static
final
int
NB_OF_STUDENTS
=
mark
=
new
double
NB_OF_STUDENTS
/
/
Using
an
array
object
for
int
=
dns-remplacé
i++
{
mark
i
=
dns-remplacer
*
dns-remplacé
`
`
mark
`
`
+
+
`
`
=
`
`
+
mark
i
}
exemple
static
final
int
NROW
static
final
int
NCOL
=
string
matrix
=
new
string
NROW
NCOL
possible
créer
de
initialiser
tableau
déclaration
exemple
int
=
{
}
dns-remplacer
+
`
`
`
`
+
/
/
string
=
{
{
`
`
monsieur
`
`
`
`
Mrs
`
`
`
`
Ms
`
`
}
/
/
row
{
`
`
Smith
`
`
Jones
}
/
/
row
}
dns-remplacer
+
/
/
Ms
Jones
classer
dns-remplacer
offrir
divers
méthode
utilitaire
applicable
tableau
comparaison
tri
...
...
depuis
plate-forme
voir
chapitre
java
offrir
boucle
for
simplifier
parcourir
élément
de
un
tableau
exemple
/
/
for
each
element
of
my
array
of
double
print
this
element
for
double
e
myArrayOfDoubles
{
dns-remplacer
e
}
collection
collection
objet
représenter
groupe
de
objet
collection
agrégat
regrouper
élément
multiple
seul
entité
aucun
hypothèse
ne
être
faire
priori
type
élément
le
ordre
élément
possibilité
de
élément
dupliquer
plus
formellement
java
collection
de
élément
type
E
classe
implémente
le
interface
collection
E
paquetage
standard
dns-remplacé
offrir
variété
collecter
collection
framework
répondre
besoin
plus
fréquent
exemple
ArrayList
E
Vector
E
LinkedList
E
Stack
E
Hashtable
K
V
ip-remplacée
>
Généricité
notion
ne
exister
java
depuis
plate-forme
voir
chapitre
version
introduire
révision
majeur
rapport
précédent
notamment
matière
gestion
collecter
le
apparition
type
générique
probablement
le
évolution
plus
marquant
généricité
permettre
communiquer
compilateur
typer
élément
de
un
collection
moment
création
le
objet
non
fixer
priori
définition
classer
exemple
classe
générique
/
/
Defining
generic
collection
/
/
The
formal
parameter
is
the
generic
type
of
the
elements
public
class
MyCollection
implements
List
{
/
/
can
be
used
here
any
type
}
/
/
Creating
collection
of
Integers
MyCollection
Integer
collectionOfIntegers
CollectionOfIntegers
=
new
MyCollection
Integer
/
/
Creating
collection
of
string
MyCollection
string
collectionOfString
CollectionOfStrings
=
new
MyCollection
string
tout
comme
déclaration
type
pouvoir
être
générique
déclaration
méthode
pouvoir
être
aussi
générique
ce
est-à-dire
paramétrisées
plusieurs
paramètre
exemple
méthode
générique
/
/
Defining
public
static
void
fromArrayToCollection
collection
{
for
o
{
c.add
o
}
}
/
/
Using
it
string
a@card@
=
{
`
`
datal
`
`
data2
`
`
data3
`
`
data4
`
`
data5
}
collection
Object
c1
=
new
ArrayList
string
fromArrayToCollection
a1
c1
noter
signaler
tableau
générique
faire
encore
bon
ménage
exemple
Vector
Integer
sheets
=
new
Vector
Integer
NBOFSHEETS
produire
le
erreur
classique
`
`
Generic
array
creation
exemple
solution
pouvoir
consister
passer
classe
intermédiaire
simplement
définir
class
VectorOfIntegers
extends
Vector
Integer
{
}
type
appeler
typer
joker
wildcard
type
permettre
représenter
tout
type
exemple
public
void
printAll
collection
{
for
Object
o
{
dns-remplacer
o
}
}
possible
borner
type
joker
caractère
joker
borner
supérieur
spécifier
extends
type
représenter
tout
sous-type
typer
caractère
joker
borner
inférieur
spécifier
super
type
représenter
tout
type
super-typer
type
ip-remplacée
>
exemple
collection
ArrayList
objet
type
ArrayList
E
collection
tailler
variable
de
élément
typer
E
.
chaque
élément
repérer
indice
permettre
accès
direct
le
élément
liste-tableau
supporter
principal
fonctionnalité
suivant
-
ajout
de
un
élément
fin
tableau
méthode
add
E
-
accès
élément
de
indice
donner
méthode
get
int
add
int
E
-
suppression
de
un
élément
de
indice
donner
méthode
remove
int
-
consultation
nombre
de
élément
méthode
size
élément
de
un
objet
collection
type
ArrayList
E
indicer
dns-remplacé
-
classe
ArrayList
E
devoir
être
importer
paquetage
dns-remplacer
import
dns-remplacer
exemple
ArrayList
Integer
myCollectionOfIntegers
myCollectionOfIntegers
=
new
ArrayList
Integer
for
int
=
i++
{
dns-remplacer
i
}
ip-remplacée
>
parcours
de
un
collection
Itérateur
parcours
de
un
collection
le
opération
consister
explorer
collection
élément
élément
deux
façon
faire
parcourir
collection
-
utiliser
itérateur
itérateur
objet
type
Iterator
E
trois
fonctionnalité
plus
utile
créer
gérer
itérateur
méthode
iterator
classer
collection
hasNext
next
classe
Iterator
noter
suppression
de
élément
collection
cours|cour
parcours
relever
méthode
remove
le
itérateur
non
celui
collection
classer
Iterator
E
devoir
être
importer
paquetage
dns-remplacer
import
dns-remplacer
itérateurs
façon
faire
historique
parcourir
collection
depuis
version
générique
-
utiliser
boucle
for
généraliser
tel
boucle
permettre
se
affranchir
itérateurs
parcourir
très
simplement
collection
quelconque
ne
être
offrir
depuis
version
exemple
parcourir
itérateur
Iterator
Integer
it
=
dns-remplacé
while
dns-remplacer
{
/
/
call
dns-remplacer
to
get
the
next
object
of
the
collection
/
/
and
do
something
with
that
object
}
exemple
parcours
sans
itérateur
/
/
for
each
element
of
my
collection
of
Integers
print
it
for
Integer
v
myCollectionOfIntegers
{
dns-remplacer
v
}
Transtypage
transtypage
anglais
cast
/
casting
opération
consister
convertir
type
de
un
expression
conversion
type
réaliser
faire
précéder
le
expression
typer
cible
entre
parenthèse
proposition
se
appliquer
certain
type
primitif
type
objet
lier
relation
de
héritage
conversion
incorrect
provoquer
erreur
compilation
le
exécution
noter
que
un
transtypage
changer
type
variable
concerner
type
de
un
variable
défini
fois
tout
dès
création
le
opération
transtypage
simplement
changement
point
voir
que
on
demander
compilateur
syntaxe
newType
expression
exemple
int
=
char
=
char
/
certain
classe
offrir
méthode
spécifique
plus
adéquat
notamment
°
conversion
réel
-
entier
-
méthode
math
round
realValue
permettre
convertir
réel
le
entier
plus
proche
-
méthode
dns-remplacé
realValue
associer
conversion
entier
fournir
plus
grand
entier
inférieur
égal
le
argument
exemple
int
dns-remplacer
valoir
-
méthode
dns-remplacé
realValue
associer
conversion
entier
fournir
plus
petit
entier
supérieur
égal
le
argument
exemple
int
dns-remplacer
valoir
°
converser
partir
string
-
méthode
toString
hériter
tout
objet
permettre
convertir
objet
string
-
méthode
valueOf
primitiveTypeExpression
classer
string
renvoyer
représentation
string
valeur
argument
-
méthode
valueOf
string
disposer
tout
classe
enveloppe
renvoyer
instance
classer
enveloppe
contenir
valeur
représenter
le
argument
typer
string
exemple
/
/
Convert
string
type
-
primitif
type
double
x
=
dns-remplacer
`
`
/
/
Convert
string
type
-
wrapped
type
double
pi
=
dns-remplacer
`
`
/
/
Convert
wrapped
type
-
primitif
type
int
k
=
dns-remplacer
`
`
.intValue
/
/
Convert
primitif
type
-
string
type
string
piStr
=
dns-remplacer
/
/
Convert
primitif
type
-
string
type
double
pi
=
new
double
string
=
dns-remplacer
Autoboxing
/
unboxing
depuis
plate-forme
voir
chapitre
valeur
typer
primitif
cas
besoin
implicitement
convertir
le
objet
classe
envelopper
correspondant
autoboxing
réciproquement
unboxing
auparavant
conversion
devoir
être
expliciter
OPERATEURS
expression
java
posséder
nombre
considérable
de
opérateur
arithmétique
logique
expression
constituer
de
opérande
de
opérateur
opérande
pouvoir
être
différent
nature
variable
constant
appel
fonction
expression
tout
opérateur
devoir
être
explicite
quand
plus
de
un
opérateur
apparaître
seul
expression
alors
règle
précédence
utiliser
déterminer
le
ordre
de
application
se
il
nécessaire
de
altérer
le
ordre
normal
de
évaluation
parenthèse
pouvoir
être
utiliser
précédences
égal
le
expression
évaluer
gauche
droit
recommandation
styler
+
utiliser
parenthèse
isoler
sous-expression
afin
de
éviter
problème
précédence
de
opérateur
rendre
code
plus
lisible
tout
programmeur
+
insérer
espace
avant
après
chaque
opérateur
autre
point
opérateur
expression
arithmétique
quelque
opérateur
arithmétique
binaire
opérateur
fonction
champ
de
application
/
division
réel
réel
/
division
entier
entier
#
modulo
reste
division
entier
*
entier
*
noter
java
comme
plupart
langage
programmation
B
toujours
signer
alors
que
en
mathématique
rester
division
euclidien
toujours
positif
quotient
calculer
conséquence
java
à
/
B
=
sgn
*
sgn
B
*
|
à
|
/
|
B
|
B
=
A-
à
/
B
*
B
/
java
math
*
noter
java
le
opérateur
modulo
pouvoir
aussi
être
appliquer
réel
résultat
alors
rester
obtenir
après
soustraction
le
opérande
droit
le
opérande
gauche
nombre
entier
fois
toutefois
causer
arrondir
calcul
résultat
ne
être
toujours
celui
que
on
attendre
exemple
donne
non
Grande
prudence
opérateur
appliquer
réel
quelque
opérateur
arithmétique
unaire
opérateur
fonction
champ
de
application
++
incrémentation
entier
réel
décrémentation
entier
réel
opérateur
expression
booléen
quelque
opérateur
booléen
binaire
opérateur
fonction
&
&
logique
conditionnel
*
|
|
logique
conditionnel
*
^
logique
exclusif
*
opérateur
le
évaluation
le
expression
logique
se
arrêter
dès
que
il
possible
de
inférer
valeur
final
le
expression
tout
opérande
nécessairement
évaluer
opérateur
booléen
unaire
opérateur
fonction
négation
logique
opérateur
relationnel
quelque
opérateur
relationnel
comparaison
opérateur
fonction
=
=
égal
=
non
égal
inférieur
=
inférieur
égal
supérieur
=
supérieur
égal
METHODES
définition
appel
de
un
méthode
ordinaire
définition
de
un
procédure
définition
de
un
fonction
public
void
procName
formalParams
public
fctlype
fctName
formalParams
{
{
declaration
declaration
statements
statements
}
return
expression
}
appel
de
un
procédure
appel
de
un
fonction
appel
interne
classer
définition
appel
interne
classer
définition
procName
actualParams
variable
=
fctName
actualParams
appel
externe
classer
définition
appel
externe
classer
définition
-
méthode
de
instance
-
méthode
de
instance
dns-remplacé
actualParams
variable
=
dns-remplacer
actualParams
-
méthode
classe
-
méthode
classer
dns-remplacer
actualParams
variable
=
ClassName
fctName
actualParams
déclaration
de
un
paramètre
formel
spécification
de
un
paramètre
effectif
formal
parameter
actual
parameter
paramètre
de
entrée
typer
primitif
objet
paramètre
de
entrée
typer
primitif
objet
parameterType
parameterName
expression
paramètre
sortir
typer
primitif
paramètre
sorti
type
primitif
impossible
utiliser
fonction
passer
impossible
paramètre
typer
objet
paramètre
sortir
typer
objet
paramètre
sortir
typer
objet
parameterType
parameterName
objectName
+
paramètre
spécifier
définition
de
un
méthode
appeler
paramètre
formel
devoir
être
précéder
type
paramètre
apparaître
forme
de
appel
appeler
paramètre
effectif
se
il
plusieurs
paramètre
séparer
virguler
+
tout
paramètre
type
primitif
passer
valeur
ce
être
copie
argument
transmettre
méthode
disposer
le
original
tout
paramètre
typer
objet
passer
référencer
ce
être
référence
i.e.
pointeur
transmettre
méthode
le
objet
lui
même
+
défaut
méthode
méthode
de
instance
elle
invoquer
instance
classe
exister
aussi
méthode
classe
pouvoir
être
invoquer
sans
instance
spécifier
méthode
classe
déclarer
static
+
signature
de
un
méthode
constituer
nom
lister
type
paramètre
classer
deux
méthode
pouvoir
avoir
signature
elle
pouvoir
toutefois
porter
nom
cela
se
appeler
surcharger
+
tout
méthode
de
instance
constructeur
pouvoir
référer
le
objet
courir
i.e.
le
objet
méthode
constructeur
cours|cour
de
appel
mot
clé
this
pouvoir
ainsi
référer
tout
membre
champ
méthode
le
objet
courir
identifier
former
dns-remplacer
constructeur
constructeur
méthode
particulier
le
invocation
explicitement
associer
création
de
un
instance
classer
finalité
de
initialiser
proprement
le
état
objet
lors
création
définition
de
un
constructeur
suivre
règle
syntaxique
spécifique
nom
de
un
constructeur
obligatoirement
nom
classe
de
appartenance
le
en-tête
définition
spécifier
type
syntaxe
définition
de
un
constructeur
de
un
classe
nom
ClassName
public
ClassName
formalParameters
{
/
/
Fields
initializations
}
constructeur
typiquement
utiliser
association
le
opérateur
new
exemple
syntaxe
de
utilisation
de
un
constructeur
de
un
classe
nom
ClassName
ClassName
object
=
new
ClassName
actualParameters
classe
pouvoir
comporter
plusieurs
constructeur
sous
condition
que
il
ne
avoir
même
paramètre
cas
éviter
duplication
code
constructeur
pouvoir
appeler
autre
syntaxe
this
actualParameters
exemple
public
class
point
{
private
int
x
public
pointe
int
x
int
{
/
/
first
constructor
this.x.
=
X
this.y.
=
}
public
point
{
/
/
second
constructor
this
}
/
/
}
noter
définition
adopter
java
prendre
considération
typer
méthode
sens|sen
`
`
signature
`
`
correspondre
parfois
appeler
ailleurs
`
`
profil
`
`
méthode
méthode
main
méthode
main
comme
C++
point
de
entrée
de
un
application
lancement
le
exécution
syntaxe
public
static
void
main
string
args
{
}
le
argument
args
capter
éventuel
argument
ligne
commander
premier
argument
ligne
commander
stocker
args
non
args
comme
C
/
C++
exemple
considérer
application
classe
principal
-
celui
contenir
méthode
main
-
se
appeler
game
supposer
le
application
dépendre
deux
paramètre
valeur
devoir
être
fournir
lancement
supposer
également
fichier
source
game
java
compiler
fichier
exécutable
dns-remplacer
lancement
le
application
commander
java
game
Daniel
attribuer
args
tableau
{
`
`
Daniel
`
`
}
instruction
plan
syntaxique
instruction
statements
pouvoir
être
regrouper
grand
catégorie
-
instruction
simple
instruction
de
affectation
instruction
de
entrée
/
sortie
instruction
de
appel
procédure
instruction
simple
terminer
toujours
point-virgule
point-virgule
seul
définir
instruction
vide
-
instruction
contrôle
instruction
sélection
instruction
boucler
instruction
rupture
séquence
-
bloc
de
instruction
bloc
de
instruction
-
aussi
appeler
instruction
composer
-
séquence
de
instruction
enserrer
entre
accolade
bloc
{
}
définir
instruction
vide
instruction
de
affectation
syntaxe
variable
=
expression
symbole
=
le
opérateur
de
affectation
valeur
le
expression
situer
partie
droit
affecter
variable
spécifier
partie
gauche
typer
le
expression
devoir
se
apparier
type
variable
le
impact
physique
différent
selon
le
expression
typer
primitif
objet
voir
chapitre
instruction
contrôle
instruction
sélection
ip-remplacée
>
if-else
premier
forme
Deuxième
former
if
expression
{
if
expression
{
statements
statements
}
}
else
{
statements
}
exemple
if
dns-remplacer
=
=
{
dns-remplacer
`
`
The
field
is
empty
`
`
}
exemple
if
number
{
reportError
}
else
{
processNumber
number
}
exemple
if
{
handleNegative
}
else
if
=
=
{
handlezero
}
else
{
handlePositive
}
ip-remplacée
>
switch
premier
forme
Deuxième
former
switch
expression
{
switch
expression
{
caser
value1
caser
value1
statements
/
*
falls
through
*
/
break
caser
value2
case
value2
/
*
falls
through
*
/
statements
caser
value3
break
statements
default
break
statements
caser
value4
break
/
*
falls
through
*
/
}
caser
value5
statements
break
default
statements
break
}
+
instruction
switch
pouvoir
avoir
nombre
quelconque
label
caser
+
le
instruction
break
mettre
fin
le
instruction
switch
défaut
de
instruction
break
le
exécution
poursuivre
instruction
label
suivant
deuxième
forme
ci-
dessus
exploiter
comportement
chacun
trois
premier
valeur
conduire
le
exécution
parti
statements
associer
value3
chacun
deux
valeur
suivant
conduire
le
exécution
parti
statements
associer
value5
+
clause
default
optionnel
recommander
défaut
pouvoir
que
aucun
cas
conduire
exécution
exemple
switch
day
{
caser
dayString
=
`
`
Monday
break
caser
dayString
=
`
`
Tuesday
break
caser
dayString
=
`
`
Wednesday
break
caser
dayString
=
`
`
Thursday
break
caser
dayString
=
`
`
Friday
break
caser
dayString
=
`
`
Saturday
break
caser
dayString
=
`
`
Sunday
break
default
error
break
}
exemple
switch
winterMonth
{
caser
numberOfDays
=
break
caser
/
*
falls
through
*
/
case
numberOfDays
=
break
caser
if
isLeapYear
{
numberOfDays
=
}
else
{
numberOfDays
=
}
break
default
error
break
}
instruction
boucler
ip-remplacée
>
while
boucle
while
exécuter
bloc
de
instruction
aussi
longtemps
valeur
de
un
expression
donner
true
le
expression
tester
avant
chaque
exécution
corps
boucler
bien
corps
boucle
pouvoir
être
exécuter
fois
syntaxe
while
expression
{
statements
}
exemple
int
i
=
while
dns-remplacé
{
dns-remplacer
dns-remplacé
i++
}
exemple
while
dns-remplacer
{
processObject
dns-remplacer
}
ip-remplacée
>
do-while
boucle
do-while
exécuter
bloc
de
instruction
aussi
longtemps
valeur
de
un
expression
donner
true
le
expression
tester
après
chaque
exécution
corps
boucler
bien
corps
boucler
toujours
exécuter
moins
fois
syntaxe
do
{
statements
}
while
expression
exemple
do
{
input
=
readInput
if
input
=
=
null
{
dns-remplacer
`
`
Try
again
}
}
while
input
=
=
null
ip-remplacée
>
for
boucler
for
se
exécuter
aussi
longtemps
que
un
condition
se
évaluer
true
avant
boucle
démarrer
instruction
de
initialisation
exécuter
exactement
fois
condition
évaluer
avant
chaque
exécution
corps
boucle
comme
boucle
while
instruction
mettre
jour
variable
exécuter
après
chaque
exécution
corps
boucler
syntaxe
for
initialization
condition
update
{
statements
}
exemple
for
int
=
dns-remplacé
i++
{
dns-remplacer
dns-remplacer
}
ip-remplacée
>
foreach
depuis
plate-forme
voir
chapitre
java
offrir
boucle
for
améliorer
parcourir
élément
de
un
tableau
de
un
collection
reporter
section
respectif
syntaxe
/
/
for
each
element
of
the
collection
process
element
for
TypeOfElements
element
collectionOfElements
{
/
/
process
element
}
instruction
de
entrée
/
sortie
java
offrir
nombre
considérable
fonction
procédure
de
entrée
/
sortir
tant
mode
texte
graphique
limiter
section
principal
instruction
de
entrée
/
sortir
mode
texte
entrer
/
sortir
mode
graphique
voir
chapitre
méthode
de
entrée
/
sortie
primaire
appartenir
classe
paquetage
java
io
depuis
plate-forme
voir
chapitre
classer
scanner
paquetage
dns-remplacer
offre
-
fonctionnalité
baser
lire
facilement
donner
depuis
tout
flux
de
entrée
-
sortir
formater
comme
complément
classer
dns-remplacer
permettre
spécifier
format
de
entrée
sortir
notion
flux
flux
flot
stream
anglais
généraliser
notion
périphérique
de
entrée
/
sortie
flux
pouvoir
être
voir
comme
interface
intelligent
unidirectionnel
relier
machine
java
périphérique
permettre
lecture
aussi
bien
que
en
écriture
se
affranchir
spécificité
périphérique
concerner
réaliser
entrée
/
sortie
consister
ainsi
créer
flux
typer
approprier
sauf
se
il
exister
déjà
prédéfinir
dns-remplacer
dns-remplacer
dns-remplacer
lire
écrire
selon
cas
flux
souvent
cas
de
un
lecture
convertir
donner
lire
type
cibler
souhaiter
premier
approche
limiter
flux
accès
séquentiel
entrée
/
sortie
terminal
solution
suivant
se
affranchir
erreur
saisir
gérer
type
de
erreur
reporter
chapitre
excepter
chapitre
ip-remplacée
>
affichage
écran
syntaxe
de
un
affichage
écran
mode
texte
dns-remplacer
string
dns-remplacer
string
dns-remplacer
primitiveTypeExpression
dns-remplacer
primitiveTypeExpresstion
ip-remplacée
>
affichage
formater
depuis
plate-forme
java
offrir
également
méthode
printf
permettre
sortie
formater
comme
voir
classe
dns-remplacer
spécification
format
exemple
dns-remplacer
`
`
count
=
`
`
+
count
dns-remplacer
`
`
5d
\n
user
total
fonctionnement
printf
code
formatage
printf
réclamer
chaîne
caractère
premier
paramètre
chaîne
pouvoir
être
suivre
variable
ce
être
chaîne
pouvoir
contenir
code
formatage
imprimer
coder
formatage
commencer
caractère
chaque
fois
que
un
code
formatage
rencontrer
printf
imprimer
variable
suivant
liste
paramètre
principal
code
formatage
commander
le
affichage
de
un
valeur
typer
caractère
entier
e
réel
notation
exposer
f
réel
#
chaîner
caractère
coder
formatage
pouvoir
inclure
spécification
format
champ
de
affichage
exemple
code
formatage
champ
de
affichage
spécifier
paramètre
typer
considérer
6d
champ
caractère
-6d
champ
caractère
justification
gauche
8.2f
champ
caractère
droit|droite
virguler
ip-remplacer
>
lecture
clavier
exemple
scanner
input
=
new
scanner
dns-remplacer
string
s1
=
dns-remplacer
/
/
read
string
word
string
s2
=
dns-remplacer
/
/
read
the
rest
of
the
line
int
=
dns-remplacer
/
/
read
an
integer
double
r
=
dns-remplacer
/
/
read
double
dns-remplacer
entrée
/
sortie
fichier
opérer
fichier
consister
créer
flux
approprié
opération
souhaiter
lire
écrire
fichier
fermer
fichier
solution
suivant
se
affranchir
erreur
de
entrée
/
sortir
gérer
type
de
erreur
reporter
chapitre
excepter
chapitre
ip-remplacée
>
Ecriture
fichier
depuis
plate-forme
java
offrir
également
méthode
printf
permettre
sortie
formater
comme
voir
classe
dns-remplacer
spécification
format
exemple
de
écriture
fichier
texte
PrintWriter
out
=
new
PrintWriter
outputFileName
for
int
i
=
i
i++
dns-remplacer
`
`
'
\t
'
i
dns-remplacer
ip-remplacée
>
lecture
fichier
exemple
lecture
de
un
fichier
texte
mot
mot
scanner
in
=
new
scanner
new
filer
inputFileName
string
while
dns-remplacer
{
=
dns-remplacer
/
/
read
string
word
dns-remplacer
}
dns-remplacé
ip-remplacée
>
contexte
particulier
Cas1
ouverture
lecture
de
un
fichier
texte
stocker
fichier
.jar
exécuter
import
dns-remplacer
import
dns-remplacer
ClassLoader
cl
=
dns-remplacer
InputStream
is
=
dns-remplacer
inputFileName
scanner
in
=
new
scanner
is
Cas2
ouverture
lecture
de
un
fichier
texte
distant
identifier
URL
import
dns-remplacer
import
dns-remplacer
URL
url
=
new
URL
`
`
http
/
/
dns-remplacer
/
/
inputFileName
scanner
in
=
new
scanner
dns-remplacer
noter
solution
non
applicable
depuis
applet
outre
bien
se
assurer
tout
condition
de
accessibilité
fichier
lever
de
interdiction
pare-feu
local
notamment
Cas3
ouverture
de
un
nouveau
page
html
depuis
applet
répertoire
import
dns-remplacer
import
dns-remplacer
URL
url
=
new
URL
getDocumentBase
`
`
dns-remplacé
getAppletContext
.showDocument
url
`
`
_blank
repaint
lecture
de
un
chaîne
caractère
formater
fréquent
de
avoir
lire
chaîne
caractère
connaître
format
quel
flux
de
entrée
terminal
fichier
depuis
plate-forme
classer
scanner
paquetage
dns-remplacer
offrir
fonctionnalité
très
pratique
exemple
lecture
de
un
chaîne
caractère
formater
string
str
=
`
`
XXX
XXX
yellow
XXX
blue
XXX
'
'
scanner
in
=
new
scanner
str
.useDelimiter
`
`
\\s
*
XXX\\s
*
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
/
/
Will
display
/
/
/
/
/
/
yellow
/
/
blue
HERITAGE
notion
de
héritage
le
héritage
technique
offrir
nombreux
avantage
-
éviter
duplication
coder
-
permettre
réutilisation
coder
autre
contexte
-
faciliter
maintenance
programme
-
faciliter
le
extension
de
application
existant
le
héritage
inheritancer
relation
`
`
est_un
`
`
non
`
`
a_un
`
`
permettre
définir
classe
comme
le
extension
de
un
autre
exemple
classer
astre
est_un
est_un
classe
Etoile
classer
planète
étoiler
astre
planeter
astre
classe
Etoile
étendre
classe
astre
=
classer
Etoile
hériter
classe
astre
super-classe
classe
étendre
de
autre
classe
sous-classe
classe
étendre
hériter
autre
classe
hériter
le
état
comportement
tout
ancêtre
pouvoir
aussi
redéfinir
classe
lier
relation
de
héritage
former
hiérarchie
de
héritage
exemple
hiérarchie
de
héritage
astre
Etoile
planeter
Exoplanète
planeter
solaire
Pégaside
chtonien
tellurique
habitable
constructeur
de
un
sous-classe
devoir
toujours
invoquer
constructeur
super-classe
premier
instruction
défaut
java
essayer
de
insérer
appel
automatique
former
de
appel
suivant
super
actualParameters
tout
classe
sans
super-classe
explicite
Object
comme
super-classe
comme
hiérarchie
classe
type
former
hiérarchie
type
typer
définir
définition
de
un
sous-classe
sous-type
typer
défini
super-classe
exemple
Etoile
sous-type
type
astre
variable
pouvoir
contenir
-
objet
typer
déclarer
variable
-
objet
tout
sous-type
type
déclarer
exemple
astre
al
=
new
astre
/
/
correct
astre
a2
=
new
Etoile
/
/
correct
transtypage
ascendre
astre
a3
=
new
Planete
/
/
correct
transtypage
ascendre
Etoile
el
=
new
astre
/
/
erreur
Etoile
e@card@
=
Etoile
a2
/
/
correct
transtypage
descendre
/
/
devoir
être
explicite
objet
de
un
sous-type
peut-être
utiliser
partout
objet
de
un
super-type
attendu
ceci
se
appeler
substitution
java
permettre
le
héritage
multiple
sous-classe
pouvoir
hériter
directement
de
un
seul
super-classe
que
hériter
sous-classe
sous-classe
hériter
tout
membre
super-classe
accessible
sauf
membre
attribut
méthode
redéfinir
sous-classe
sous-classe
hériter
super-classe
-
membre
déclarer
public
protected
-
membre
déclarer
sans
modificateur
de
accès
sous-classe
paquetage
super-classe
sous-classe
ne
hériter
super-classe
-
membre
redéfinir
sous-classe
-
constructeur
attention
choix
identificateurs
sous-classe
choix
pouvoir
involontairement
masquer
membre
super-classe
ce
être
particulièrement
cas
attribut
attribut
nom
que
un
attribut
super-classe
masque
le
attribut
super-
classer
se
il
type
différent
redéfinir
méthode
redéfinir
méthode
sous-classe
falloir
que
elle
signature
typer
retour
méthode
super-classe
méthode
redéfinir
pouvoir
autoriser
accès
plus
large
moins
ex
méthode
déclarer
protected
super-
classe
pouvoir
être
redéfinir
public
sous-classe
private
le
exemple
typique
méthode
toString
classer
Object
appliquer
objet
produire
chaîne
caractère
former
nom
classe
coder
hachage
méthode
pouvoir
être
redéfinir
tout
classe
méthode
redéfinir
sous-classe
simplement
besoin
de
ajouter
quelque
fonctionnalité
complémentaire
celui
méthode
super-classe
ne
être
besoin
réécrire
complètement
car
pouvoir
appeler
méthode
super-classe
dns-remplacé
actualParameters
quelque
règle
-
méthode
de
instance
pouvoir
redéfinir
méthode
classer
réciproquement
-
méthode
de
instance
de
un
sous-classe
même
signature
type
que
un
méthode
de
instance
super-classe
redéfinir
méthode
super-classe
version
méthode
invoquer
instance
sous-classe
type
dynamique
car
liaison
dynamique
méthode
de
instance
celui
sous-classe
-
méthode
classe
de
un
sous-classe
même
signature
type
que
un
méthode
classe
super-classe
masque
méthode
super-classe
version
méthode
invoquer
dépendre
appeler
super-classe
sous-classe
car
liaison
statique
méthode
classe
-
sous-classe
pouvoir
redéfinir
méthode
déclarer
final
super-classe
-
sous-classe
devoir
redéfinir
méthode
déclarer
abstract
super-classe
moins
sous-classe
elle
même
déclarer
abstract
depuis
plate-forme
voir
chapitre
conseiller
de
utiliser
le
annotation
méta-donner
Override
marquer
tout
méthode
supposer
redéfinir
méthode
hériter
de
un
classe
parent
cela
permettre
compilateur
signaler
immédiatement
erreur
jamais
redéfinition
ne
être
avérer
cause
exemple
de
un
faute
frapper
nom
méthode
outre
signaler
méthode
redéfinir
le
annotation
Override
permettre
de
accroître
lisibilité
coder
covariance
type
retour
autoriser
méthode
de
un
sous-classe
pouvoir
retourner
objet
typer
sous-classe
typer
retourner
méthode
signature
super-classe
caractéristique
supprimer
besoin
test
converser
type
excessif
exemple
Override
public
string
toString
{
/
/
}
exemple
classer
point
posséder
deux
attribut
x
classe
ColoredPoint
hériter
point
possédant
attribut
spécifique
color
comment
écrire
méthode
equals
sans
duplication
code
/
*
in
the
class
point
*
/
Override
public
boolean
equals
Object
o
{
if
o
=
=
null
return
false
/
/
case
null
if
this
=
=
o
return
true
/
/
reflexivity
if
dns-remplacer
=
o.getClass
return
false
/
/
symmetry
/
/
Now
this
and
o
having
the
same
class
comparer
the
fields
point
p
=
point
o
return
this.x.
=
=
p.x.
&
&
this.y.
=
=
p.y.
}
/
*
in
the
class
ColoredPoint
extending
point
*
/
Override
public
boolean
equals
Object
o
{
/
/
Verify
if
this
and
o
haver
the
same
class
and
if
their
super
/
/
fields
are
equal
if
dns-remplacer
o
return
false
/
/
Now
comparer
the
specific
fields
ColoredPoint
cp
=
ColoredPoint
o
return
dns-remplacer
dns-remplacer
}
exemple
public
class
MotherClass
{
public
void
normal
{
dns-remplacer
`
`
the
normal
method
in
MotherClass
}
public
static
void
hide
{
dns-remplacer
`
`
the
hide
method
in
MotherClass
}
public
void
override
{
dns-remplacer
`
`
the
override
method
in
MotherClass
}
}
/
/
end
MotherClass
public
class
DaughterClass
extends
MotherClass
{
Override
public
static
void
hide
{
dns-remplacer
`
`
the
hide
method
in
DaughterClass
}
Override
public
void
override
{
dns-remplacer
`
`
the
override
method
in
DaughterClass
}
public
static
void
main
string
args
{
DaughterClass
o@card@
=
new
DaughterClass
MotherClass
o2
o1
dns-remplacer
/
/
call
dns-remplacé
dns-remplacer
/
/
call
dns-remplacé
dns-remplacer
/
/
call
dns-remplacé
dns-remplacer
/
/
call
dns-remplacer
liaison
statique
dns-remplacer
/
/
call
dns-remplacé
dns-remplacer
/
/
call
dns-remplacer
Tiaison
dynamique
}
}
/
/
end
DaughterClass
méthode
main
afficher
the
normal
method
in
MotherClass
the
normal
method
in
MotherClass
the
hide
method
in
DaugterClass
the
hide
method
in
MotherClass
the
override
method
in
DaugterClass
the
override
method
in
DaugterClass
type
statique
/
dynamique
-
liaison
statique
/
dynamique
section
reprendre
formaliser
quelque
un
important
concept
introduire
section
précédent
type
statique
/
dynamique
-
Transtypage
typer
statique
de
un
objet
typer
spécifier
déclaration
ce
être
type
déclarer
ce
être
type
compilation
type
dynamique
de
un
objet
type
i.e.
classe
de
appartenance
le
objet
instancié
ce
être
type
constater
ce
être
type
effectif
le
exécution
typer
dynamique
de
un
objet
toujours
type
statique
sous-type
type
statique
sauf
exception
devoir
transtypages
exemple
classer
classe
B
sous-classe
considérer
code
suivant
if
dns-remplacer
{
=
new
}
else
{
=
new
B
/
/
transtypage
ascendre
implicite
}
typer
statique
type
dynamique
B
pouvoir
être
constater
que
après
condition
évaluer
transtypage
casting
appliquer
référence
ne
être
possibilité
de
avoir
vue
spécifique
le
objet
pointé
changer
rien
type
le
objet
sous-jacent
garder
bien
évidemment
tout
long
vie
type
lequel
créer
le
opération
transtypage
purement
syntaxique
fait
que
indiquer
compilateur
point
voir
depuis
lequel
devoir
voir
le
objet
transtypage
vers
sur-type
dire
ascendant
transtypage
ascendre
implicite
transtypage
vers
sous-type
dire
descendant
transtypage
descendre
devoir
être
explicite
permettre
forcer
compilation
garantir
nécessairement
le
absence
de
erreur
de
exécution
transtypage
ne
être
garantir
correct
se
il
respecter
règle
suivant
T1
T2
deux
type
définir
o
objet
typer
dynamique
T3
considérer
déclaration
T1
obj
=
T2
o
transtypage
garantir
possible
tant
compilation
'
le
exécution
seulement
T3
sous-type
T2
T2
sous-type
T1
le
opérateur
instanceof
permettre
tester
objet
de
un
type
dynamique
donner
tout
sous-type
type
donner
pouvoir
permettre
vérifier
compatibilité
type
avant
de
opérer
transtypage
exemple
supposer
définir
public
class
Shape2D
{
}
public
class
Circle
extends
Shape2D
{
}
public
class
triangle
extends
Shape2D
{
}
public
class
date
{
}
déclaration
suivant
génèreraient
erreur
incompatibilité
type
Shape2D
=
Shape2D
new
date
/
/
erreur
compilation
Circle
=
new
Shape2D
/
/
erreur
compilation
Circle
=
Circle
new
Shape2D
/
/
erreur
de
exécution
triangle
=
new
triangle
Circle
=
Circle
/
/
erreur
de
exécution
déclaration
suivant
sain
Shape2D
=
new
Circle
Circle
=
Circle
Shape2D
if
obj
instanceof
Shape2D
=
Shaped2D
obj
liaison
statique
/
dynamique
considérer
le
invocation
o.m.
o
objet
typer
statique
type
dynamique
'
message
attribut
méthode
envoyer
o
.
message
exécuter
celui
code
accessible
depuis
classe
alors
liaison
le
objet
message
dire
statique
liaison
compilation
sinon
dire
dynamique
liaison
le
exécution
java
-
liaison
de
un
objet
variable
de
instance
statique
-
liaison
de
un
objet
méthode
dynamique
sauf
méthode
static
final
exemple
public
class
{
public
boolean
m1
{
return
true
}
public
boolean
m2
{
return
true
}
}
public
class
B
extends
{
public
boolean
m1
{
return
false
}
public
boolean
m3
{
return
false
}
public
static
void
main
string
args
{
=
new
B
dns-remplacé
a.m1
dns-remplacer
a.m2
/
/
dns-remplacer
a.m3
/
/
problème
}
}
méthode
main
afficher
false
true
pourquoi
typer
statique
type
dynamique
B
.
ce
être
m1
B
exécuter
quant
méthode
m2
ne
être
définir
B
super-classe
B
hériter
normalement
m2
m2
exécuter
dernier
instruction
dns-remplacer
a.m3
provoquer
erreur
compilation
pourquoi
parce
compilateur
connaître
type
statique
i.e.
type
déclarer
méthode
m3
ne
être
définir
classe
super-classes
compilateur
trouver
définition
m3
bien
B
générer
erreur
solution
transtypage
descendant
préalable
dns-remplacer
B
.m@card@
transtypage
correct
car
posséder
déjà
création
tout
attribut
de
un
instance
B
.
polymorphisme
appel
méthode
pouvoir
invoquer
méthode
différent
car
liaison
réaliser
dynamiquement
i.e.
le
exécution
non
compilation
le
identification
typer
le
objet
associer
le
appel
dynamique
exemple
polymorphisme
de
héritage
public
class
Shape
{
public
void
draw
{
dns-remplacer
this
+
`
`
.draw
}
}
public
class
Circle
extends
Shape
{
Override
public
string
toString
{
return
`
`
circle
}
}
public
class
square
extends
Shape
{
Override
public
string
toString
{
return
`
`
square
}
}
public
class
Picture
{
public
static
void
main
string
args
{
Vector
Shape
v
=
new
Vector
Shape
v.add
new
Circle
v.add
new
square
for
Shape
v
{
dns-remplacé
s.draw
/
/
polymorphism
}
méthode
main
afficher
dns-remplacer
dns-remplacer
classe
méthode
particulier
classer
déclarer
final
pouvoir
être
sous-classer
méthode
déclarer
final
pouvoir
être
redéfinir
sous-classe
classer
déclarer
abstract
représenter
concept
abstrait
pouvoir
être
instanciée
pouvoir
être
sous-classer
méthode
déclarer
abstract
méthode
corps
ne
être
spécifier
classe
abstraire
pouvoir
contenir
méthode
non
abstraire
tout
classe
contenir
méthode
abstraire
devoir
être
déclarer
abstract
sous-classe
ne
implémente
tout
méthode
abstraire
super-classe
devoir
être
déclarer
abstract
interface
interface
sentir
langage
java
cf
section
protocole
comportement
pouvoir
être
implanter
tout
classe
interface
dehors
hiérarchie
classe
interface
différencier
principalement
de
un
classe
abstraire
caractéristique
-
aucun
méthode
concret
opposition
abstraire
pouvoir
être
définir
interface
-
classe
pouvoir
implémenter
plusieurs
interface
tout
comme
pouvoir
construire
hiérarchie
classe
pouvoir
construire
hiérarchie
de
interface
alors
que
un
classe
pouvoir
étendre
directement
que
un
seul
super-classe
de
héritage
multiple
interface
pouvoir
étendre
directement
plusieurs
super-interfaces
héritage
multiple
possible
exemple
public
interface
List
E
extends
collection
E
{
}
exemple
public
interface
Predator
{
boolean
chasePrey
Prey
p
}
public
interface
Prey
{
boolean
isChasedBy
Predator
p
}
public
interface
Venomous
{
}
public
interface
VenomousPredator
extends
Predator
Venomous
{
}
public
class
pet
{
}
public
class
Cat
extends
pet
implements
Predator
{
}
public
class
Frog
implements
Predator
Prey
{
}
exception
exception
objet
fournir
information
relatif
défaillance
programmer
exception
générer
chacun
situation
suivant
-
condition
de
exécution
anormal
comme
exemple
tentative
division
zéro
mémoire
insuffisant
-
exécution
de
un
instruction
throw
paquetage
java
lang
définir
nombre
classe
de
exception
couvrir
cas
plus
courant
exception
contrôler
non
contrôler
tout
exception
instance
classer
Throwable
sous-classe
Object
Throwable
Error
exception
MyCheckedException
RunTimeException
MyUncheckedException
java
diviser
classe
de
exception
deux
catégorie
-
excepter
non
contrôler
unchecked
exception
concerner
cas
imprévu
`
`
ce
est-à-dire
situation
devoir
avoir
défaillance
fonctionnement
normal
elle
concerner
situation
pouvoir
être
raisonnablement
éviter
exemple
indicer
tableau
hors
limite
exception
indiquer
généralement
erreur
programmer
elle
normalement
vocation
conduire
arrêt
immédiat
définitif
programme
-
excepter
contrôler
checked
exception
concerner
cas
`
`
prévoir
`
`
ce
est-à-dire
situation
programmeur
devoir
se
attendre
que
un
opération
pouvoir
échouer
elle
concerner
situation
défaillance
delà
contrôler
programmeur
exemple
disquer
devenir
plein
rendre
impossible
écriture
fichier
excepter
normalement
vocation
être
récupérer
permettre
programme
poursuivre
normalement
gestion
de
un
exception
contrôler
imposer
le
utilisation
clause
throws
le
instruction
contrôler
try
.
.
catch
excepter
non
contrôler
classe
RuntimeException
Error
leur
sous-
classe
tout
autre
classe
sous-classe
excepter
contrôler
classe
de
exception
standard
hiérarchie
Error
classer
Error
super-classe
de
un
hiérarchie
de
erreur
grave
non
contrôler
hiérarchie
habituellement
réservé
erreur
de
exécution
système
exemple
sous-
classe
prédéfinie
NoSuchMethodError
StackOverFlowError
OutOfMemoryError
IllegalAccessError
hiérarchie
exception
classer
exception
super-classe
de
un
hiérarchie
de
exception
exclusion
faire
sous-hiérarchie
RuntimeException
contrôler
exemple
sous-classe
de
exception
contrôler
prédéfinie
DataFormatException
IOException
EOFException
FileNotFoundException
hiérarchie
RuntimeException
classer
RuntimeException
super-classe
de
un
hiérarchie
de
exception
non
contrôler
exemple
sous-classe
prédéfinie
ArithmeticException
IllegalArgumentException
NumberFormatException
IllegalStateException
IndexOutOfBoundsException
NullPointerException
lancement
de
un
exception
le
instruction
throw
permettre
lancer
exception
recommander
la|le
appliquer
'
excepter
non
contrôler
syntaxe
throw
new
ClassOfException
`
`
diagnostic
message
to
print
exemple
if
key
=
=
null
{
throw
new
NullPointerException
`
`
null
key
found
in
method
x
}
exemple
if
key
=
=
{
throw
new
IllegalArgumentException
`
`
empty
key
received
}
exemple
constructeur
if
dns-remplacer
=
=
{
throw
new
IllegalStateException
`
`
name
must
be
provided
-
`
`
+
`
`
object
creation
aborted
}
exemple
le
opération
remove
le
interface
Iterator
spécifier
optionnel
ce
est-à-dire
implémentation
pouvoir
être
cas
public
void
remove
{
throw
new
UnsupportedOperationException
}
capture
de
un
exception
capturer
de
un
exception
ne
être
obligatoire
exception
la|le
on
vouloir
contrôler
cas
excepter
contrôler
compilateur
renforcer
contrôle
fois
méthode
lancer
tel
exception
le
appelant
méthode
clause
throws
clause
throws
déclaration
ajouter
le
en-tête
de
un
méthode
susceptible
lever
exception
contrôler
déclarer
excepter
contrôler
prendre
compter
cadre
méthode
ceci
nécessaire
compilateur
pouvoir
savoir
quel
excepter
contrôler
convention
excepter
non
contrôler
devoir
être
inclus
clause
throws
syntaxe
throws
ExceptionClass1
ExceptionClass2
exemple
public
void
saveToFile
string
filename
throws
IOException
{
}
instruction
try
.
.
catch
le
instruction
try
.
.
catch
permettre
capturer
exception
générer
le
appel
de
un
méthode
quand
exception
générer
contrôle
transférer
coder
générer
le
exception
clause
catch
capturer
le
exception
clause
catch
devoir
avoir
seul
paramètre
formel
typer
paramètre
devoir
être
classe
Throwable
sous-classe
instruction
try
pouvoir
contenir
plusieurs
bloc
catch
cas
le
exception
plus
général
devoir
être
traiter
dernier
syntaxe
try
{
/
/
protect
one
or
more
statement
here
}
catch
ExceptionClass
e
{
/
/
report
and
recover
from
the
exception
here
}
finally
{
/
/
in
fine
in
any
caser
always
execute
these
statements
}
bloc
finally
optionnel
permettre
souvent
de
éviter
duplication
coder
exemple
partir
plate-forme
/
/
Read
doubler
from
the
standard
input
stream
scanner
input
=
new
scanner
dns-remplacer
double
x
try
{
x
=
dns-remplacer
}
catch
InputMismatchException
e
{
dns-remplacer
`
`
Error
-
double
waited
-
`
`
+
e
}
dns-remplacer
exemple
partir
plate-forme
/
/
Create
copy
of
text
filer
scanner
in
=
null
PrintWriter
out
=
null
try
{
in
=
new
scanner
new
filer
inputFileName
out
=
new
PrintWriter
outputFileName
while
dns-remplacé
{
dns-remplacer
dns-remplacer
}
}
catch
exception
e
{
dns-remplacer
`
`
Error
in
reading
/
writing
file
-
`
`
+
e
}
finally
{
if
in
=
null
dns-remplacer
if
out
=
null
dns-remplacer
}
exemple
partir
plate-forme
/
/
Read
and
print
text
file
of
double
scanner
in
=
null
try
{
in
=
new
scanner
new
filer
inputFileName
while
dns-remplacer
{
dns-remplacé
dns-remplacer
dns-remplacer
}
}
catch
FileNotFoundException
e
{
dns-remplacer
`
`
Unable
to
open
the
input
filer
+
e
}
catch
NumberFormatException
e
{
dns-remplacer
`
`
token
is
not
doubler
+
e
}
catch
exception
e
'
dns-remplacer
`
`
Problem
in
reading
the
filer
`
`
+
e
}
finally
{
if
in
=
null
{
try
{
dns-remplacer
}
catch
exception
e
{
dns-remplacer
`
`
Error
in
closing
the
filer
+
e
}
}
définir
nouveau
classe
de
exception
principal
raison
conduire
définition
de
un
nouveau
classe
de
exception
besoin
de
inclure
information
complémentaire
le
objet
exception
afin
permettre
diagnostic
récupération
le
erreur
tout
nouveau
classe
de
exception
définir
comme
sous-classe
de
un
classe
de
exception
existant
hiérarchie
exception
exemple
public
class
WrongValueException
extends
exception
{
private
string
key
public
WrongValueException
string
key
{
dns-remplacer
=
key
}
public
string
getKey
{
return
key
}
public
string
toString
{
return
`
`
Wrong
valoir
`
`
+
key
+
`
`
found
}
}
annexe
-
programmation
graphique
référence
baser
swing
exemple
programmation
de
interface
graphique
dns-remplacer
/
doc
/
books
/
tutorial
/
uiswing
/
mini
/
dns-remplacé
gestion
événement
exemple
programmation
dns-remplacer
/
doc
/
books
/
tutorial
/
uiswing
/
event
/
dns-remplacer
swing
architecturer
Overview
dns-remplacer
/
products
/
jfc
/
isc
/
article
/
architecturer
chapitre
introduire
programmation
graphique
bibliothèque
dns-remplacer
swing
exister
deux
grand
paquetage
de
utilitaire
java
réaliser
interface
graphique
-
AWT
abstract
Window
Toolkit
paquetage
primitif
composant
paquetage
se
importer
import
dns-remplacer
*
-
swing
plus
récent
plus
évoluer
construire
AWT
ce
être
paquetage
recommander
composant
paquetage
se
importer
import
dns-remplacer
*
deux
paquetage
swing
plus
communément
utiliser
dns-remplacer
dns-remplacer
classe
dns-remplacer
plus
courant
JFrame
JPanel
JLabel
JTextField
JButton
JOPtionPane
exemple
saisir
/
affichage
boîte
dialogue
/
/
import
dns-remplacé
/
/
user
method
showInputDialog
to
prompt
for
some
input
string
inputValue
=
dns-remplacer
`
`
value
`
`
/
/
user
method
showMessageDialog
to
display
message
dns-remplacer
null
message
conteneur
composant
tout
objet
graphique
composer
différent
objet
conteneur
container
composant
atomique
différent
constituant
organiser
hiérarchie
de
inclusion
principal
catégorie
conteneur
composant
+
conteneur
plus
haut
niveau
que
un
objet
graphique
pouvoir
être
afficher
le
écran
hiérarchie
constituant
devoir
nécessairement
avoir
racine
le
un
trois
conteneur
suivant
Frame
classer
JFrame
conteneur
plus
général
fournir
fenêtre
principal
lequel
autre
composant
swing
pouvoir
dessiner
Dialog
classer
JDialog
plus
limiter
que
un
Frame
fournir
fenêtre
dialoguer
classe
J0ptionPane
permettre
créer
fenêtre
dialogue
simple
standard
classe
JDialog
permettre
créer
fenêtre
dialoguer
personnaliser
Applet
classer
JApplet
spécialiser
interface
web
fournir
fenêtrer
afficher
navigateur
web
+
conteneur
intermédiaire
notamment
panel
classe
JPanel
simplifier
positionnement
objet
graphique
atomique
tout
conteneur
haut
niveau
contenir
conteneur
intermédiaire
spécial
appeler
ContentPane
ce
être
conteneur
intermédiaire
principal
contenir
typiquement
plusieurs
panel
+
composant
atomique
exemple
Button
classer
JButton
label
classe
JLabel
Text
field
classe
JTextField
sauf
conteneur
plus
haut
niveau
tout
composant
conteneur
intermédiaire
composer
atomique
commencer
hériter
classe
JComponent
ajouter
objet
conteneur
utiliser
méthode
add
méthode
prendre
général
deuxième
argument
spécifier
mettre
page
exemple
/
/
import
dns-remplacer
*
frame
=
new
JFrame
paner
=
new
JPanel
button
=
new
JButton
label
=
new
JLabel
dns-remplacer
button
dns-remplacer
1abel
dns-remplacer
.add
paner
dns-remplacer
dns-remplacer
/
/
sizes
at
or
above
preferred
sizes
dns-remplacer
true
/
/
le
objet
frame
ainsi
créer
hiérarchie
JFrame
ContentPane
JPanel
JButton
JLabel
exemple
import
dns-remplacer
public
class
AppletExample
extends
JApplet
{
public
void
init
{
JPanel
paner
=
new
JPanel
dns-remplacer
new
JLabel
`
`
hello
World
dns-remplacé
paner
gestion
mettre
pager
mettre
page
layout
consister
fixer
taille
position
composant
tout
conteneur
posséder
gestionnaire
mise
pager
défaut
se
il
convenir|convier
pouvoir
remplacer
composant
pouvoir
solliciter
taille
alignement
donner
in
fine
ce
être
gestionnaire
mise
pager
conteneur
conserver
décision
final
exister
gestionnaire
mise
pager
+
BorderLayout
gestionnaire
mettre
page
défaut
tout
ContentPane
définir
zone
placement
NORTH
SOUTH
EAST
WEST
CENTER
+
FlowLayout
gestionnaire
mettre
page
défaut
tout
JPanel
positionner
simplement
composant
gauche
droit|droite
passer
nouveau
ligne
nécessaire
+
BoxLayout
gestionnaire
mettre
page
très
flexible
positionner
composant
seul
ligner
colonne
respecter
attente
composant
matière
tailler
maximal
de
alignement
+
GridLayout
gestionnaire
mettre
page
très
simple
créer
ensemble
composant
taille
afficher
nombre
ligner
colonne
spécifier
+
GridBagLayout
gestionnaire
mettre
page
plus
sophistiquer
plus
flexible
aligner
composant
placer
grille
cellule
permettre
certain
se
étendre
plusieurs
cellule
largeur
ranger
hauteur
colonne
respectivement
pouvoir
être
différent
+
CardLayout
gestionnaire
mettre
page
usage
spécial
permettre
de
implémenter
zone
contenir
différent
composant
différent
moment
utiliser
combinaison
de
autre
gestionnaire
mettre
pager
exemple
changement
gestionnaire
mettre
page
défaut
JPanel
paner
=
new
JPanel
dns-remplacer
new
BorderLayout
tailler
le
alignement
de
un
composant
pouvoir
être
spécifier
méthode
suivant
setMinimumSize
setPreferredSize
setMaximumSize
setAlignmentX
setAlignmentY
gestion
événement
notion
de
événement
chaque
fois
le
utilisateur
agir
clavier
sourire
événement
survenir
objet
événement
générer
objet
événement
objet
contenir
information
source
nature
le
événement
survenir
swing
offrir
interface
sentir
java
appeler
`
`
écouteur
de
événement
`
`
event
listeners
permettre
capter
événement
façon
sélectif
afin
pouvoir
traiter
event
source
event
object
event
listener
event
listener
event
listener
exemple
de
événement
type
Listener
clic
de
un
bouton
graphique
enfoncement
toucher
return
ActionListener
lors
de
un
saisi
champ
texte
fermeture
de
un
fenêtre
WindowListener
graphique
frame
clic
sourire
lors
passage
curseur
composer
MouseListener
graphique
afin
faciliter
travail
programmeur
swing
associer
généralement
chaque
interface
Listener
classer
adaptateur
adapter
adaptateur
exister
ce
être
la|le
on
travailler
exemple
de
interface
Listener
classer
adapter
associer
ActionListener
none
WindowListener
WindowAdapter
MouseListener
MouseAdapter
KeyListener
KeyAdapter
réaliser
gestionnaire
de
événement
réaliser
gestionnaire
de
événement
event
handler
requérir
trois
élément
coder
+
déclarer
classe
gestionnaire
de
événement
classe
devoir
implémenter
interface
Listener
étendre
classe
adapter
exemple
import
dns-remplacer
*
public
class
MyClass
implements
ActionListener
{
}
+
définir
classe
gestionnaire
de
événement
méthode
le
interface
Listener
exemple
public
void
actionPerformed
ActionEvent
e
{
.
.
}
+
définir
instance
classe
gestionnaire
de
événement
la|le
enregistrer
composer
concerner
exemple
dns-remplacer
instanceOfMyClass
type
ActionListener
permettre
définir
gestionnaire
de
événement
plus
simple
plus
commun
lorsque
un
événement
typer
générer
clic
de
un
bouton
graphique
enfoncement
toucher
return
lors
de
un
saisi
champ
texte
message
actionPerformed
envoyer
tout
écouteur
de
événement
enregistrer
composer
concerner
classe
gestionnaire
de
événement
généralement
implanter
sous
forme
de
un
classe
interner
inner
class
sein
de
un
classe
graphique
exemple
/
/
Ecriture
de
un
MouseListener
public
class
myClass
extends
JPanel
{
dns-remplacer
new
MyAdapter
class
MyAdapter
extends
MouseAdapter
{
public
void
mouseClicked
MouseEvent
e
{
}
}
}
typiquement
classe
gestionnaire
de
événement
implanter
sous
forme
de
un
classe
interne
anonyme
exemple
solution
équivalent
celui
le
exemple
précédent
/
/
Ecriture
de
un
MouseListener
public
class
myClass
extends
JPanel
{
dns-remplacer
new
MouseAdapter
{
public
void
mouseClicked
MouseEvent
e
{
}
}
}
affichage
/
fermeture
de
un
fenêtre
graphique
le
affichage
/
masquage
de
un
fenêtre
graphique
type
JFrame
commander
méthode
setVisible
quand
le
utilisateur
ferme
fenêtrer
graphique
type
JFrame
fenêtrer
ne
être
faire
défaut
masquer
Quoiqu'invisible
le
objet
graphique
exister
toujours
programme
pouvoir
nouveau
rendre
visible
la|le
on
désirer
comportement
différent
nécessaire
-
de
enregistrer
objet
graphique
gestionnaire
de
événement
typer
WindowListener
capter
message
windowClosing
-
spécifier
comportement
défaut
utiliser
méthode
setDefaultCloseOperation
comportement
indiqué
argument
constant
définir
le
interface
WindowConstant
exemple
de
argument
DISPOSE_ON_CLOSE
architecture
composant
swing
objectif
application
facilement
adaptable
le
architecture
composant
swing
baser
adaptation
très
renommer
architecture
MVC
`
`
Modèle-Vue-Contrôleur
`
`
voir
section
communauté
swing
appeler
`
`
architecturer
modèle
séparable
`
`
partie
modèle
de
un
composant
swing
partie
représenter
donner
le
application
traiter
comme
élément
séparer
tout
comme
préconiser
conception
MVC
swing
fusionner
partir
vue
prendre
charge
représentation
visuel
donner
contrôleur
traite
entrer
utilisateur
chaque
composant
seul
objet
interface
utilisateur
user
interface
Object
général
considérer
comme
bon
pratiquer
centrer
le
architecture
de
un
application
autour
donner
plutôt
que
autour
interface
utilisateur
supporter
paradigme
swing
définir
interface
modeler
séparer
chaque
composant
séparation
fournir
programme
de
application
possibilité
connecter
facilement
composant
swing
implémentation
modeler
propre
table
suivant
montrer
interface
modèle
offrir
composant
swing
Component
Model
interface
Model
typer
JButton
ButtonModel
gui
JToggleButton
ButtonModel
gui
/
dater
JCheckBox
ButtonModel
gui
/
dater
JRadioButton
ButtonModel
gui
/
dater
JMenu
ButtonModel
gui
JMenuItem
ButtonModel
gui
JCheckBoxMenuItem
ButtonModel
gui
/
dater
JRadioButtonMenuItem
ButtonModel
gui
/
dater
JComboBox
ComboBoxModel
dater
JProgressBar
BoundedRangeModel
gui
/
dater
JScrollBar
BoundedRangeModel
gui
/
dater
Slider
BoundedRangeModel
gui
/
dater
Component
Model
interface
Model
typer
JTabbedPane
SingleSelectionModel
gui
JList
ListModel
dater
JList
ListSelectionModel
gui
JTable
TableModel
dater
JTable
TableColumnModel
gui
JTree
TreeModel
dater
JTree
TreeSelectionModel
gui
JEditorPane
document
dater
JTextPane
document
dater
JTextArea
document
dater
JTextField
document
dater
JPasswordField
document
dater
interface
modeler
fournir
swing
relever
deux
grand
catégorie
type
Etat
le
interface
graphique
`
`
gui
définir
statut
visuel
commander
le
interface
graphique
type
`
`
donnée
de
application
`
`
dater
représenter
donner
quantifiable
sens|sen
le
application
certain
modèle
relever
type
partager
gui
/
dater
recommander
de
utiliser
catégorie
`
`
donnée
de
application
`
`
dater
modèle
swing
car
renforcer
grandement
le
adaptabilité
modularité
application
long
terme
paradigme
vision
monde
reposer
modèle
Applet
java
permettre
créer
deux
type
programme
-
application
se
exécuter
directement
sous
contrôle
machiner
virtuel
java
-
appliquette
applette
anglais
applet
destiner
être
exécuter
navigateur
Web
réaliser
applette
minimum
consister
-
créer
sous-classe
classe
JApplet
voir
section
-
créer
méthode
init
lancer
navigateur
-
référencer
classe
baliser
APPLET
coder
=
de
un
fichier
HTML
syntaxe
import
dns-remplacer
public
class
AppletClassName
extends
JApplet
{
/
/
Fields
public
void
init
{
}
}
syntaxe
APPLET
coder
=
dns-remplacer
WIDTH
=
anint
HEIGHT
=
anint
/
APPLET
annexe
-
THREADS
référencer
programmation
concurrent
processus
threads
dns-remplacer
/
doc
/
books
/
tutorial
/
essential
/
concurrency
/
dns-remplacer
threads
permettre
programmer
tâche
le
intérieur
de
un
programme
se
exécuter
concurremment
processus
léger
tâcher
exécuter
thread
devoir
être
implémenter
méthode
run
exister
deux
façon
fournir
méthode
run
-
définir
sous-classe
classe
Thread
redéfinir
méthode
run
-
définir
classe
implémente
le
interface
Runnable
définir
méthode
run
créer
thread
extension
classe
Thread
exemple
/
/
Example
of
defining
thread
extending
Thread
public
class
SimpleThread
extends
Thread
{
public
SimpleThread
string
threadName
{
super
threadName
}
/
/
The
task
of
this
thread
is
to
print
times
its
name
/
/
at
random
rate
public
void
run
{
for
int
i
=
i
i++
{
dns-remplacer
i
+
`
`
`
`
+
getName
try
{
sleep
long
dns-remplacer
*
}
catch
InterruptedException
e
{
}
}
dns-remplacer
`
`
DONE
`
`
+
getName
}
}
/
/
end
class
SimpleThread
/
/
Example
of
running
two
threads
concurrently
/
/
`
`
Jamaica
and
`
`
Fiji
Will
be
printed
randomly
times
public
static
void
main
string
args
{
new
SimpleThread
`
`
Jamaica
.start
new
SimpleThread
`
`
Fiji
.start
}
créer
thread
implémentation
le
interface
Runnable
façon
faire
se
imposer
lorsque
classer
créer
devoir
sous-classer
classe
quelconque
cas
typique
Applet
parce
java
supporter
le
héritage
multiple
exemple
/
/
Example
of
defining
thread
implementing
Runnable
public
class
SimpleThread
implements
Runnable
{
string
threadName
public
SimpleThread
string
threadName
{
dns-remplacer
=
threadName
}
/
/
The
task
of
this
thread
is
to
print
times
its
name
/
/
at
random
rate
public
void
run
{
for
int
i
=
i
i++
{
dns-remplacer
i
+
`
`
`
`
+
threadName
try
{
dns-remplacer
long
dns-remplacer
*
}
catch
InterruptedException
e
{
}
}
dns-remplacer
`
`
DONE
+
threadName
}
}
/
/
end
class
SimpleThread
/
/
Example
of
running
two
threads
concurrently
/
/
`
`
Jamaica
and
`
`
Fiji
Will
be
printed
randomly
times
public
static
void
main
string
args
{
new
Thread
new
SimpleThread
`
`
Jamaica
.start
new
Thread
new
SimpleThread
`
`
Fiji
.start
}
synchronisation
communication
entre
threads
section
critique
synchronisation
programmer
segment
code
accéder
donner
depuis
threads
concurrent
appeler
section
critique
lorsque
deux
threads
concurrent
invoquer
méthode
opérer
donner
partager
méthode
critique
nécessaire
java
pouvoir
synchroniser
méthode
afin
garantir
accès
sûr
le
information
fin
chacun
méthode
devoir
être
déclarer
modificateur
synchronized
le
exécution
le
accès
donner
partager
ainsi
automatiquement
verrouiller
tant
que
elle
utiliser
méthode
critique
exemple
get
pouvoir
supposer
deux
méthode
critique
le
objet
partager
public
synchronized
int
get
{
}
public
synchronized
void
pouvoir
int
valoir
{
}
communication
entre
threads
deux
threads
processus
indépendant
dérouler
façon
asynchrone
pouvoir
communiquer
donnée
nécessaire
que
il
savoir
synchroniser
autour
de
un
sas
communication
thread
émetteur
donner
appeler
producteur
thread
destinataire
donner
appeler
consommateur
thread
producteur
donner
devoir
être
capable
-
attendre
le
espace
stockage
sas
communication
libre
-
puis
déposer
nouveau
donner
-
puis
informer
threads
consommateur
mettre
disposition
donner
façon
symétrique
thread
consommateur
donner
devoir
être
capable
-
attendre
donner
mettre
disposition
le
espace
stockage
sas
communication
-
puis
lire
donner
-
puis
informer
threads
producteur
disponibilité
sas
communication
accuser
réception
ce
être
sas
communication
que
on
confier
charge
synchronisation
mettre
attente
réaliser
méthode
wait
notification
autre
threads
méthode
notify
notifyAll
méthode
tout
deux
défini
classe
Object
exemple
classe
définir
sas
communication
de
un
seul
élément
typer
entier
attribut
content
noter
particulier
sécurisation
apporter
le
usage
de
un
while
non
de
un
if
afin
prévenir
faux
réveil
éventuel
public
class
CubbyHole
{
private
int
content
private
boolean
available
=
false
public
synchronized
int
get
{
/
/
called
by
consumer
while
available
=
=
false
{
try
{
wait
/
/
wait
for
Producer
to
pouvoir
valoir
}
catch
InterruptedException
e
{
}
}
available
=
false
notifyAll
return
content
}
public
synchronized
void
pouvoir
int
x
{
/
/
called
by
Producer
while
available
=
=
true
{
try
{
wait
/
/
wait
for
consumer
to
get
valoir
}
catch
InterruptedException
e
{
}
}
content
=
x
available
=
true
notifyAll
}
annexe
-
conception
DEVELOPPEMENT
java
référence
architecturer
Modèle-Vue-Contrôleur
dns-remplacé
/
blueprints
/
guidelines
/
designing_enterprise_applications_2e
/
app-arch
/
dns-remplacer
développement
test
unitaire
cadre
de
application
JUnit
dns-remplacer
/
doc
/
cookbook
/
dns-remplacer
JavaBeans
dns-remplacer
/
products
/
javabeans
/
dns-remplacer
/
doc
/
books
/
tutorial
/
javabeans
/
dns-remplacé
design
pattern
section
aller
au-delà
langage
java
aborder
quelque
aspect
conception
développement
programmer
java
conseil
général
bon
conception
classer
rechercher
couplage
faible
couplage
décrire
le
interconnectivité
entre
classe
couplage
faible
quand
chaque
classe
largement
indépendant
autre
communiquer
elle
via
interface
petit
bien
définir
le
interface
de
un
classe
partie
visible
publique
classe
définir
typiquement
liste
membre
attribut
constructeur
méthode
non
priver
associer
leur
commentaire
documentation
rechercher
COHESION
fort
cohésion
décrire
le
adéquation
entre
unité
coder
entité
tâcher
logique
cohésion
fort
quand
chaque
unité
coder
méthode
classer
module
...
.
.
responsable
de
un
entité
tâcher
très
bien
définir
utiliser
maximum
le
encapsulation
le
encapsulation
technique
baser
réduire
couplage
contribuer
séparer
quoi
comment
voir
le
implémentation
définition
le
utilisation
principe
baser
rendre
attribut
priver
utiliser
méthode
de
accès
DECOUPLER
ENTREES
traitement
sortir
voir
particulier
section
adopter
conception
DIRIGEE
responsabilité
le
attribution
bon
responsabilité
bon
classe
le
un
problème
plus
délicat
conception
orienter
objet
programmation
diriger
responsabilité
processus
conception
classe
attribution
responsabilité
bien
définir
chaque
classe
approche
pouvoir
être
utiliser
déterminer
quel
classer
devoir
implémenter
tel
fonctionnalité
conception
diriger
responsabilité
contribuer
réduire
couplage
EVITER
duplication
coder
Eviter
que
un
segment
coder
retrouver
plus
de
un
fois
application
utiliser
le
HERITAGE
bon
escient
le
héritage
relation
`
`
est_un
`
`
relation
a_un
`
`
hiérarchie
de
héritage
objet
devoir
avoir
relation
`
`
est_un
`
`
classe
base
afin
le
héritage
tout
attribut
propriété
méthode
classer
base
garder
sens|sen
sous-classe
spécialiser
complet
objet
relever
strictement
de
un
relation
`
`
est_un
`
`
devoir
traduire
classe
interface
sans
relation
de
héritage
entre
elle
limiter
taille
COMPLEXITE
mettre
trop
chose
méthode
méthode
trop
longue
faire
plus
de
un
tâche
logique
tout
mettre
seul
classe
classer
trop
complexe
représenter
plus
de
un
entité
logique
chercher
faciliter
changement
localiser
réaliser
changement
classe
devoir
avoir
que
un
minimum
de
impact
autre
classe
localisation
changement
le
un
but
rechercher
de
un
bon
conception
classer
produire
de
un
couplage
faible
de
un
cohésion
fort
architecture
de
un
application
interactif
modèle
MVC
le
architecture
Modèle-Vue-Contrôleur
Model-View-Controller
MVC
modèle
de
architecture
logicielle
recommander
-
largement
utiliser
-
conception
de
application
interactif
modèle
viser
minimiser
degré
couplage
entre
objet
le
application
découpler
structurellement
entrer
traitement
sortir
point
essentiel
consister
séparer
objet
relever
le
interface
utilisateur
objet
métier
afin
pouvoir
faire
évoluer
indépendamment
réutiliser
MVC
organiser
application
interactif
trois
grand
composant
modèle
vue
contrôleur
découpler
leur
responsabilité
respectif
+
MODELE
encapsuler
fonctionnalité
donner
cœur
le
application
indépendant
représentation
sortir
spécifique
de
un
comportement
de
entrée
charger
représentation
interner
donner
le
application
logique
gestion
donner
notifier
composant
vue
changement
donner
permettre
la|le
interroger
état
fournir
contrôleur
possibilité
de
accéder
certain
fonctionnalité
applicatives
encapsuler
modèle
+
vue
afficher
information
le
utilisateur
récupérer
modèle
donner
présenter
le
utilisateur
spécifier
présentation
externe
mettre
jour
le
information
afficher
relayer
aussi
contrôleur
entrée
utilisateur
la|le
autoriser
sélectionner
voir
séparation
modèle
de
un
part
voir
contrôleur
de
autre
part
permettre
voir
multiple
de
un
modèle
quand
plusieurs
vue
modeler
chaque
vue
alors
contrôleur
associer
+
CONTROLEUR
gérer
entrer
utilisateur
recevoir
entrer
généralement
sous
forme
de
événement
encoder
mouvement
sourire
le
activation
de
un
bouton
entrer
clavier
bien
se
il
se
agir
de
un
application
web
requête
HTTP
GET
POST
événement
traduire
requête
service
modeler
voir
application
typiquement
contrôleur
chaque
ensemble
fonctionnalité
apparenter
application
pouvoir
avoir
contrôleur
séparer
type
client
interaction
utilisateur
varier
selon
type
client
le
utilisateur
interagir
système
uniquement
travers
contrôleur
le
ensemble
voir
+
contrôleur
composer
le
interface
utilisateur
modèle
interrogation
de
état
notification
changement
changement
de
état
voir
requêter
utilisateur
sélection
voir
contrôleur
invocation
méthode
Evènements
pratique
schéma
principe
laisser
place
grand
variété
de
implémentations
possible
difficulté
implémentation
idéal
java
résider
notamment
faire
composant
graphique
swing
fusionner
partir
voir
contrôleur
cf
section
petit
programme
tout
particulièrement
voir
contrôleur
souvent
combiner
tout
cas
modèle
devoir
être
séparer
exemple
de
implémentation
de
un
architecture
MVC
import
dns-remplacer
import
dns-remplacer
import
dns-remplacer
import
dns-remplacer
import
dns-remplacer
import
dns-remplacer
public
class
Controller
extends
JApplet
implements
ActionListener
{
private
View
view
private
Model
model
public
void
init
{
model
=
new
Mode1
view
=
new
View
model
this
dns-remplacer
view
dns-remplacer
view
}
public
void
actionPerformed
ActionEvent
e
{
/
/
process
the
event
}
}
public
class
View
extends
JPanel
implements
observer
{
private
Model
model
/
/
Declare
here
the
JPanel
components
public
View
Model
ActionListener
listener
{
model
=
makeContentPane
listener
}
public
void
update
observable
o
Object
arg
{
/
/
Automatically
called
when
observer
is
notified
/
/
Update
the
view
.
}
public
void
makeContentPane
ActionListener
listener
{
/
/
Create
and
initialize
the
JPanel
components
and
/
/
when
need
be
attach
them
the
event
listener
/
/
Define
the
layout
.
}
}
public
class
Model
extends
observable
{
/
/
Wherever
the
valoir
of
an
attribute
interesting
the
/
/
View
is
changed
insert
these
two
statements
/
/
setChanged
/
/
notifyObservers
or
notifyObservers
arg
}
chercher
découpler
traitement
entrées-sortir
classique
programmation
esprit
pouvoir
noter
particulier
modèle
MVC
certain
similitude
classique
architecturer
trois-tiers
three-tiers
système
distribuer
architecturer
trois-
tiers
architecturer
logicielle
client-serveur
lequel
le
interface
utilisateur
logique
traitement
donner
trois
module
indépendant
le
interface
utilisateur
stocker
client
gros
logique
le
application
stocker
serveur
de
application
donner
stocker
serveur
baser
donner
exemple
application
web
professionnel
reposer
solution
java
EE
voir
chapitre
modèle
assurer
EJB
et
/
ou
JavaBeans
contrôleur
assurer
servlets
vue
JSP
glossaire
chapitre
test
unitaire
définition
test
activité
consister
déterminer
segment
coder
méthode
classe
programmer
produire
bien
résultat
attendre
définir
classiquement
trois
niveau
test
mettre
œuvre
successivement
+
test
unitaire
unir
testing
se
agir
tester
chaque
composante
individuel
méthode
classer
le
application
+
test
de
intégration
integration
testing
se
agir
tester
groupe
classe
interrelation
puis
tout
le
application
ensemble
test
appliquer
suivre
généralement
plan
test
i.e.
approche
systématique
méthodique
+
test
système
system
testing
se
agir
tester
le
application
intégré
environnement
de
utilisation
complet
test
entrer
catégorie
test
boîte
noir
tant
tel
devoir
nécessiter
connaissance
conception
interne
coder
logique
considération
suivant
limiter
essentiellement
test
unitaire
cas
test
ensemble
condition
variable
partir
duquel
testeur
déterminer
exigence
requérir
complètement
partiellement
satisfaire
cas
test
caractériser
entrée
connaître
pré-condition
sorti
attendre
post-
condition
nombreux
cas
test
pouvoir
être
nécessaire
vérifier
exigence
donner
distinguer
généralement
deux
type
cas
test
-
cas
test
positif
consister
tester
cas
censé
faire
réussir
fonctionnalité
test
devoir
convaincre
le
élément
coder
tester
fonctionner
bien
comme
espérer
-
cas
test
négatif
consister
tester
cas
censé
mettre
échec
fonctionnalité
tout
situation
valeur
hors
limite
de
erreur
...
.
exemple
entrer
valeur
hors
plage
lire
ensemble
vide
tel
cas
devoir
attendre
programme
traiter
le
erreur
de
un
façon
contrôler
approprier
simple
correction
erreur
détecter
test
devoir
systématiquement
améliorer
qualité
programmer
malheureusement
le
expérience
montrer
tout
changement
programme
pouvoir
introduire
façon
inattendu
de
autre
erreur
particulier
erreur
régression
regression
bugs
erreur
régression
survenir
quand
fonctionnalité
fonctionner
précédemment
fonctionner
plus
suite
modification
programmer
méthode
courant
test
non-régression
non-regression
testing
consister
réexécuter
test
réaliser
antérieurement
voir
défaut
apparaître
voire
réapparaître
test
devant
être
appliquer
non
seul
fois
chaque
modification
logiciel
souhaitable
disposer
de
un
batterie
test
programmer
afin
permettre
automatisation
test
se
agir
programmer
cas
test
chaque
méthode
non
trivial
veiller
chaque
cas
test
bien
séparer
autre
JUnit
JUnit
développer
communauté
open
source
offrir
cadre
de
application
framework
programmation
test
régression
utiliser
implémenter
test
unitaire
java
classe
TestCase
permettre
définir
cas
test
classe
Assert
fournir
ensemble
méthode
faciliter
gestion
erreur
détecter
classe
TestSuite
permettre
de
exécuter
suite
test
classer
TestRunner
outil
de
exploitation
permettre
définir
suite
test
exécuter
de
afficher
résultat
exemple
cas
test
/
*
*
*
test
caser
for
the
class
MyClass
*
/
import
dns-remplacer
*
public
class
TestMyClass
extends
TestCase
{
/
*
The
test
need
to
run
against
the
background
of
known
*
set
of
objects
This
set
of
objects
is
called
test
*
fixture
*
Define
here
an
instance
variable
for
each
partir
of
the
*
fixture
*
/
private
MyClass
myObject
public
TestMyClass
string
name
{
super
name
}
/
*
*
*
set
up
the
test
fixture
*
setUp
is
called
before
every
test
caser
method
*
Initialize
the
instance
variable
*
/
protected
void
setUp
{
myObject
=
new
MyClass
}
/
*
*
*
Tears
down
the
test
fixture
*
tearDown
is
called
after
every
test
caser
method
*
Releases
any
permanent
resource
allocated
in
setUp
*
example
clore
file
*
/
protected
void
tearDown
{
/
/
}
/
/
once
the
fixture
is
in
place
many
test
case
/
/
necessary
can
be
written
/
*
*
*
test
the
method
methodX
*
/
public
void
testMethodX
{
ArgumentType
argument
=
ResponseType
expectedResponse
=
string
errorMessage
=
`
`
`
`
assertTrue
errorMessage
dns-remplacer
MethodX
argument
}
}
/
/
end
class
TestMyClass
JUnit
déterminer
succès
le
échec
de
un
test
via
instruction
de
assertion
assertion
simplement
procédure
comparaison
entre
valeur
espéré
valeur
effectif
générer
échec
cas
différence
procédure
de
assertion
disponible
définir
classe
dns-remplacer
exemple
de
instruction
de
assertion
assertTrue
errorMessage
booleanCondition
assertFalse
errorMessage
booleanCondition
assertEquals
errorMessage
expectedValue
actualValue
assertEquals
errorMessage
doubleExpected
doubleActual
doubleDelta
exécuter
test
créer
instance
classer
paramètre
nom
méthode
test
exemple
new
TestMyClass
`
`
testMethodX
JUnit
intégrer
certain
outil
développement
tel
outil
offrir
alors
fonctionnalité
permettre
créer
facilement
test
java
Beans
java
Bean
`
`
grain
java
`
`
définir
Sun
comme
`
`
composer
réutilisable
java
destiner
être
manipuler
outil
développement
graphique
visuel
`
`
java
Beans
composant
java
i.e.
classe
respecter
certain
critère
afin
pouvoir
être
facilement
développer
assembler
réutiliser
créer
application
sophistiquer
exemple
technologie
java
Beans
le
architecture
composant
plate-forme
java
obligation
devoir
respecter
java
Bean
nombreux
le
enjeu
de
importance
disposer
composant
`
`
Write
One
run
Anywhere
`
`
WORA
réutilisable
java
Beans
classe
publique
concret
caractéristique
commun
+
supporter
`
`
propriété
`
`
propriété
attribut
discret
nommer
de
un
java
Bean
pouvoir
affecter
apparence
comportement
propriété
java
Beans
le
équivalent
champ
objet
exemple
bouton
graphique
pouvoir
avoir
propriété
nommer
`
`
label
`
`
représenter
texte
afficher
bouton
méthode
de
accès
propriété
devoir
respecter
convention
nommage
particulier
exemple
-
propriété
simple
exister
de
autre
lier
contraindre
indexer
PropertyType
getPropertyName
/
/
simple
getter
void
setPropertyName
PropertyType
/
/
simple
setter
-
propriété
booléen
utiliser
typiquement
is
lieu
get
+
communiquer
entre
événement
pratique
utiliser
technique
swing
`
`
listeners
`
`
voir
section
+
supporter
le
introspection
le
exécution
le
environnement
développement
devoir
être
capable
déterminer
de
analyser
propriété
événement
méthode
supporter
java
Bean
noter
propriété
de
introspection
déjà
présent
objet
java
puisqu'un
objet
pouvoir
être
analyser
grâce
classe
class
Method
Field
+
supporter
personnalisation
`
`
customization
`
`
outil
développement
devoir
permettre
modifier
le
apparence
comportement
de
un
java
Bean
phase
conception
+
supporter
persistance
persistance
de
un
objet
capacité
sauvegarder
support
stockage
restaurer
le
identique
afin
programme
pouvoir
terminer
sans
objet
perdre
exemple
persistance
que
un
objet
pouvoir
prétendre
être
document
Excel
le
intérieur
de
un
document
Word
mécanisme
rendre
possible
persistance
appeler
`
`
sérialisation
`
`
serialization
fin
java
Bean
devoir
implémenter
le
interface
Serializable
Externalizable
exemple
java
Bean
package
dns-remplacer
import
dns-remplacer
*
import
dns-remplacé
/
*
*
*
SimpleBean
wi11
be
displayed
with
green
*
centered
rectangle
boire
its
color
may
be
changed
1ater
*
/
public
class
SimpleBean
extends
Canvas
implements
Serializable
{
private
Color
color
=
dns-remplacer
/
/
Property
getter
method
public
Color
getColor
{
return
color
}
/
/
Property
setter
method
/
/
set
new
SimpleBean
color
and
repaints
public
void
setColor
Color
newColor
{
color
=
newColor
repaint
}
public
void
paint
Graphics
g
{
g.setColor
color
g.fillRect
}
/
/
Constructor
set
inherited
properties
public
SimpleBean
{
setSize
,
setBackground
dns-remplacer
}
}
/
/
end
class
SimpleBean
être
reconnaître
outil
développement
java
Bean
devoir
être
conditionnné
fichier
de
archiver
format
jar
bien
obligatoire
souhaitable
java
Beans
paquetage
éviter
notamment
conflit
cas
de
homonymie
beans
design
pattern
section
ne
être
que
un
tout
premier
introduction
modèle
conception
design
pattern
développement
orienter
objet
de
application
professionnel
conduire
généralement
rencontrer
problème
conception
type
familier
communauté
développeur
confirmer
lequel
solution
éprouver
exister
se
agir
ici
solution
théorique
algorithme
solution
orienter
objet
empirique
solidité
le
efficacité
faire
preuve
pratique
solution
appeler
modèle
conception
design
pattern
développeur
expérimenter
devoir
connaître
disposer
de
un
`
`
panier
`
`
modèle
conception
que
il
appliquer
aussi
systématiquement
possible
modèle
conception
stratégie
résolution
grand
type
problème
conception
orienter
objet
décrire
forme
générique
de
organisation
classe
indépendant
langage
programmation
objet
mettre
œuvrer
titre
illustratif
le
architecture
MVC
décrire
section
exemple
modeler
conception
de
architecture
logicielle
architectural
design
pattern
plus
connu
modèle
conception
base
modèle
fondamental
décrire
quatre
auteur
appeler
collectivement
`
`
The
gang
of
four
`
`
`
`
bande
quatre
`
`
tout
simplement
GoF
distinguer
habituellement
grand
famille
modèle
conception
le
expression
design
pattern
souvent
traduire
aussi
patron
conception
-
modèle
construction
boire
de
organiser
création
de
objet
façon
gagner
abstraction
exemple
présenter
ci-après
modèle
singleton
-
modèle
structuration
faciliter
le
organisation
hiérarchie
classer
leur
relation
exemple
présenter
ci-après
modèle
Decorator
-
modèle
comportement
proposer
solution
organiser
interaction
répartir
traitement
entre
objet
tenter
répartir
responsabilité
entre
chaque
classe
exemple
modèle
Chain
of
Responsibility
permettre
créer
chaîne
de
objet
tel
le
un
de
eux
pouvoir
répondre
requête
pouvoir
transmettre
successeur
jusqu
'
le
un
de
entre
répondre
exemple
modeler
singleton
modeler
conception
singleton
permettre
de
assurer
que
un
classe
posséder
que
un
instance
plus
de
offrir
méthode
unique
retourner
instance
exemple
de
implémentation
cas
tout
information
nécessaire
création
singleton
disponible
moment
chargement
classer
mémoire
public
final
class
MySingleton
{
/
/
Creating
at
the
class
loading
private
static
MySingleton
singleInstance
=
new
MySingleton
/
/
Private
constructor
Ca
ne
t
be
used
outside
this
class
private
MySingleton
{
}
/
*
*
Get
singleton
of
this
class
*
/
public
static
MySingleton
getInstance
{
return
singleInstance
}
}
/
/
Creation
of
singleton
MySingleton
singleton
=
dns-remplacer
exemple
modèle
Decorator
modeler
conception
Decorator
permettre
de
ajouter
dynamiquement
fonctionnalité
objet
ceci
réaliser
créer
nouveau
classe
Decorator
envelopper
classe
original
modèle
conception
Decorator
alternatif
le
approche
création
de
un
sous-
classer
classe
original
se
imposer
notamment
approcher
extension
classer
original
cas
suivant
classe
original
pouvoir
être
étendre
héritage
nombre
sous-classe
permettre
définir
tout
combinaison
possible
fonctionnalité
trop
important
le
ajout
fonctionnalité
pouvoir
être
statique
i.e.
réaliser
compilation
devoir
être
dynamique
.e
réaliser
le
exécution
exemple
Wikipedia
considérer
fenêtre
de
affichage
instance
de
un
classe
Window
supposer
classe
ne
offrir
possibilité
de
ajouter
barre
défilement
créer
décorateur
pouvoir
ajouter
dynamiquement
fonctionnalité
objet
Window
existant
/
/
an
interface
common
to
the
decorator
and
the
decorated
public
interface
Window
{
public
void
draw
}
/
/
The
original
class
the
instance
of
which
can
be
decorated
public
class
SimpleWindow
implements
Window
public
void
draw
{
}
}
/
/
The
abstract
decorator
public
abstract
class
WindowDecorator
implements
Window
{
protected
Window
decoratedWindow
public
WindowDecorator
Window
decoratedWindow
{
dns-remplacer
=
decoratedWindow
}
}
/
/
first
concrete
decorator
public
class
VerticalScrollBarDecorator
extends
WindowDecorator
{
public
VerticalScrollBarDecorator
Window
decoratedWindow
{
super
decoratedWindow
}
public
void
draw
{
drawVerticalScrollBar
dns-remplacer
}
public
void
drawVerticalScrollBar
{
}
}
/
/
second
concrete
decorator
public
class
HorizontalScrollBarDecorator
extends
WindowDecorator
{
public
HorizontalScrollBarDecorator
Window
decoratedWindow
{
super
decoratedWindow
}
public
void
draw
{
drawHorizontalScrollBar
dns-remplacer
}
public
void
drawHorizontalScrollBar
{
}
}
/
/
Example
creation
of
fully
decorated
Window
instance
Window
decoratedWindow
=
new
HorizontalScrollBarDecorator
new
VerticalScrollBarDecorator
new
SimpleWindow
annexe
machine
virtuel
java
JVM
objectif
premier
chapitre
-
comprendre
comment
se
opérer
chargement
dynamique
classe
mémoire
lors
le
exécution
de
un
programme
java
-
comprendre
traitement
champ
bloc
static
chargement
classe
machiner
virtuel
java
JVM
interpréteur
coder
java
compiler
bytecode
permettre
de
exécuter
programme
java
machine
cibler
le
espace
mémoire
JVM
comporter
plusieurs
zone
notamment
-
zoner
méthode
contenir
code
méthode
constructeur
ainsi
information
structurer
chaque
classe
notamment
tabler
symbole
-
piler
espace
propre
chaque
thread
mémoriser
dynamiquement
contexte
de
exécution
variable
local
notamment
méthode
cours|cour
de
exécution
-
tas
contenir
objet
créer
new
instance
classer
tableau
cf
chapitrer
ce
être
demande
de
exécution
de
un
programme
java
lancer
machine
virtuel
java
JVM
réaliser
alors
grand
étape
suivant
-
chargement
classe
principal
spécifier
main
class
classe
dépendre
immédiatement
premier
rang
duquel
tout
sur-classes
o
création
champ
static
création
tabler
méthode
o
traitement
champ
initialisation
bloc
exécution
static
-
exécution
méthode
main
classe
principal
durant
le
exécution
de
un
code
java
classe
bytecode
charger
JVM
fur
mesurer
besoin
hiérarchie
de
héritage
chargement
classer
opérer
ordre
hiérarchique
descendre
i.e.
super-classe
racine
vers
classe
courant
exemple
public
class
classer
{
static
{
dns-remplacer
`
`
start
loading
classer
}
public
static
final
int
private
static
int
=
static
{
=
}
static
{
dns-remplacer
`
`
=
`
`
+
dns-remplacer
`
`
=
`
`
+
}
public
classer
{
dns-remplacer
`
`
start
classer
=
+
dns-remplacé
`
`
End
classer
}
public
int
getN
{
return
}
static
{
dns-remplacer
`
`
End
loading
classer
}
}
/
/
end
classer
public
class
ClassB
extends
classer
{
static
{
dns-remplacer
`
`
start
loading
ClassB
}
private
int
x
=
public
ClassB
{
dns-remplacé
`
`
start
ClassB
x
=
x
+
getN
dns-remplacé
x
dns-remplacer
`
`
End
ClassB
}
static
{
dns-remplacer
`
`
End
loading
ClassB
}
}
/
/
end
ClassB
public
class
class
{
static
{
dns-remplacer
`
`
start
loading
Class0
}
private
static
int
=
initY
private
static
int
initY
{
dns-remplacer
`
`
Init
return
}
public
static
void
main
string
args
{
dns-remplacer
`
`
start
main
Class0
ClassB
b
=
new
ClassB
dns-remplacer
`
`
End
main
Class0
}
static
{
dns-remplacer
`
`
End
loading
Class0
}
}
/
/
end
Class0
après
compilation
trois
classe
le
exécution
commander
java
Class0
afficher
commentaire
ajouter
marger
start
loading
Class0
Init
End
loading
Class0
start
main
Class0
start
loading
classer
/
/
Sur-classes
ClassB
de
abord
=
=
End
loading
classer
start
loading
ClassB
/
/
puis
enfin
ClassB
End
loading
ClassB
start
classer
/
/
car
super
de
abord
End
classer
start
ClassB
/
/
+
classer
+
ClassB
End
ClassB
End
main
Class0
annexe
-
communication
entre
java
JNI
référence
The
java
natif
interface
programmer
'
guider
and
Specification
dns-remplacer
/
doc
/
books
/
jni
/
tutoriel
dns-remplacer
/
doc
/
books
/
jni
/
html
/
dns-remplacé
java
natif
interface
Specification
v1.5
dns-remplacer
/
j2se
/
/
doc
/
guide
/
jni
/
spec
/
dns-remplacer
javah
-
Header
and
Stub
filer
Generator
dns-remplacer
/
javase
/
/
doc
/
technote
/
tools
/
windows
/
dns-remplacer
poser
problème
de
appeler
sous-programme
depuis
méthode
java
environnement
Unix
solution
mettre
œuvre
le
interface
programmation
JNI
java
natif
interface
offrir
plate-forme
java
JNI
ensemble
fonctionnalité
permettre
programme
java
fonctionner
machine
virtuel
java
JVM
de
appeler
de
être
appeler
programme
écrire
autre
langage
typiquement
C++
assembleur
permettre
le
interfaçage
application
bibliothèque
natif
mise
œuvrer
JNI
accroître
le
interopérabilité
application
java
évidemment
détriment
portabilité
bon
architecturer
le
application
devoir
minimiser
nombre
classe
faire
référence
méthode
natif
suite
supposer
fichier
java
appeler
sous-programme
nommer
dns-remplacer
fichier
implémentir
sous-programme
nommer
MyRoutines.c.
développement
le
application
complet
comporter
étape
Ecrire
programmer
java
compiler
javac
dns-remplacer
produire
fichier
de
en-tête
MyClass.h.
programme
javah
MyClass
Ecrire
sous-programme
compiler
gcc
-o
MyRoutines
-c
MyRoutines.c.
-pedantic
-W
-Wal1l
-Idir
dir
répertoire
de
installation
JDK
fichier
de
include
JNI
exemple
fichier
répartir
deux
répertoire
gcc
-o
MyRoutines
-c
MyRoutines.c.
-pedantic
-W
-Wall
-I
/
usr
/
lib
/
jdk1.5.0v11
/
include
-I
/
usr
/
lib
/
jdk1.5.0v11
/
include
/
linux
application
bibliothèque
sous-programme
dit
code
natif
dépendant
de
un
environnement
hôte
système
de
exploitation
jeu
de
instruction
processeur
particulier
exemple
programmer
compiler
système
de
exploitation
donner
coder
natif
car
fonctionner
autre
système
de
exploitation
produire
bibliothèque
partager
lib
*
.so
chargeable
programme
java
gcc
-Wall
-shared
-o
dns-remplacer
MyRoutines.o.
avant
tout
premier
exécution
spécifier
machine
virtuel
java
chemin
de
accès
bibliothèque
setenv
LD_LIBRARY_PATH
path
path
désigner
chemin
de
accès
supposer
celui
-ci
répertoire
courant
commander
setenv
LD_LIBRARY_PATH
exécuter
programme
java
java
MyClass
façon
de
écrire
programme
java
de
implémenter
sous-programme
associer
illustrer
ci-après
appel
de
un
procédure
considèrera
bout
bouillir
exemple
déclaration
appel
java
exemple
classer
java
public
class
MyClass
{
/
/
Declaration
of
an
extern
class
procedure
natif
public
static
void
procedure1
/
/
Declaration
of
an
extern
instance
procedure
natif
public
void
procedure2
/
/
test
procedure
public
static
void
main
string
argv
{
dns-remplacer
MyClass
o
=
new
MyClasse
o.procedure2
}
/
/
Load
the
library
libMyRoutines
static
{
dns-remplacer
`
`
MyRoutines
}
}
commentaire
-
modificateur
natif
indique
que
il
se
agir
de
un
procédure
externe
non
écrire
java
nom
procédure
arbitraire
-
méthode
loadLibrary
aller
charger
bibliothèque
dns-remplacer
mot
clé
static
encapsuler
bloc
de
instruction
lequel
le
appel
réaliser
permettre
de
exécuter
bloc
dès
chargement
classe
MyClass
sans
avoir
besoin
passer
le
appel
de
un
méthode
intermédiaire
prototype
fichier
MyClass.h.
produire
javah
cf
étape
précédent
spécifier
prototype
devoir
respecter
sous-programme
écrire
contenir
expurger
fichier
MyClass.h.
produire
javah
/
*
do
NOT
EDIT
THIS
filer
-
it
is
machine
generated
*
/
/
*
Header
for
class
MYClass
*
/
JNIEXPORT
void
JNICALL
Java_MyClass_procedure1
JNIEnv
*
jclass
JNIEXPORT
void
JNICALL
Java_MyClass_procedure2
JNIEnv
*
jobject
commentaire
-
JNIEXPORT
JNICALL
deux
macros
prédéfinies
JNI
faire
communiquer
java
-
void
spécifier
que
il
se
agir
de
un
procédure
-
Java_MyClass_procedure1
nom
imposé
devoir
porter
procédure
correspondre
méthode
nom
procedure1
déclarer
programme
java
idem
procedure2
-
deux
paramètre
systématiquement
introduire
tête
lister
paramètre
o
premier
type
JNIEnv
*
pointeur
vers
le
environnement
JNIEnv
lui
même
pointeur
vers
structure
contenir
fonction
de
interface
machiner
virtuel
java
JVM
o
second
type
jclass
se
il
se
agir
de
un
méthode
classer
jobject
si
il
se
agir
de
un
méthode
de
instance
pointeur
vers
descripteur
classer
le
objet
sorte
this
de
appel
implémentation
exemple
fichier
MyRoutines.c.
#
include
stdio.h.
#
include
`
`
MyClass.h.
JNIEXPORT
void
JNICALL
Java_MyClass_procedure1
JINIEnv
*
penv
jclass
cla
{
printf
`
`
routine
procedure1\n
}
JNIEXPORT
void
JNICALL
Java_MyClass_procedure2
JINIEnv
*
penv
jobject
obj
{
printf
`
`
routiner
procedure2\n
}
Echange
donner
entre
java
le
échange
donner
entre
le
application
java
sous-programme
paramètre
résultat
fonction
supposer
compatibilité
type
correspondant
or
'
correspondance
systématique
naturel
entre
type
langage
java
type
langage
caractère
exemple
coder
bit
java
bit
JNI
définir
ensemble
type
nom
*
correspondre
type
java
JNI
traiter
type
primitif
type
objet
différemment
correspondance
type
primitif
direct
voir
tableau
ci-après
car
reposer
représentation
machiner
donner
identique
ne
être
cas
type
objet
transmission
de
un
chaîne
caractère
de
un
tableau
fortiori
de
un
instance
quelconque
classe
ne
être
direct
nécessiter
conversion
typer
paramètre
java
typer
objet
ainsi
transmettre
sous-
programme
sous
forme
de
un
pointeur
structurer
donner
interne
machine
virtuel
java
le
organisation
interne
structurer
masquer
programmeur
celui
-ci
pouvoir
néanmoins
accéder
composante
sous-jacent
via
fonction
utilitaire
offrir
JNI
le
environnement
JNIEnv
typer
primitif
java
typer
primitif
côté
description
boolean
jboolean
unsigned
bit
byte
jbyte
signed
bit
char
jchar
unsigned
bit
short
jshort
signed
bit
int
jint
signed
bit
long
jlong
signed
bit
float
jfloat
bit
double
jdoubler
bit
suite
considèrera
bout
bouillir
exemple
déclaration
appel
java
exemple
classer
java
public
class
MyClass
{
/
/
Declaration
of
an
extern
instance
function
natif
public
string
getMessage
int
id
string
prompt
/
/
test
procedure
public
static
void
main
string
argv
{
MyClass
o
=
new
MyClasse
dns-remplacer
o.getMessage
`
`
Name
`
`
}
/
/
Load
the
library
libMyRoutines
static
{
dns-remplacer
`
`
libMyRoutine
}
}
prototyper
contenir
expurger
fichier
MyClass.h.
produire
javah
/
*
do
NOT
EDIT
THIS
filer
-
it
is
machine
generated
*
/
/
*
Header
for
class
MYClass
*
/
JNIEXPORT
jstring
JNICALL
Java_MyClass_getMessage
INIEnv
*
jobject
jint
jstring
implémentation
exemple
fichier
MyRoutines.c.
#
include
stdio.h.
#
include
`
`
MyClass.h.
JNIEXPORT
jstring
JNICALL
Java_MyClass_getMessage
JINIEnv
*
penv
jobject
obj
jint
jid
jstring
jprompt
{
const
char
*
str
char
buf
/
*
Get
the
string
from
the
java
string
*
/
str
=
*
penv
-
GetStringUTFChars
penv
jprompt
NULL
printf
`
`
-
jid
str
/
*
do
ne
t
forget
this
line
*
/
*
penv
-
ReleaseStringUTFChars
penv
jprompt
str
/
*
assumer
the
user
does
ne
t
type
more
than
char
*
/
scanf
`
`
buf
return
*
penv
-
NewStringUTF
penv
buf
}
commentaire
-
représentation
physique
chaîne
typer
jstring
typer
char
*
identique
conversion
devoir
être
réaliser
ce
être
rôle
fonction
GetStringUTFChars
NewStringUTF
noter
tout
cas
conversion
caractère
non
codables
ASCII
bit
lettre
accentué
poser
problème
-
fonction
GetStringUTFChars
réaliser
allocation
mémoire
dynamique
désallocation
devoir
être
obligatoirement
réaliser
avant
fin
sous-
programmer
ce
être
rôle
fonction
ReleaseStringUTFChars
annexe
-
PLATES-FORMES
java
référencer
java
Platform
standard
Edition
api
Specification
dns-remplacer
/
javase
/
/
doc
/
api
/
New
features
and
Enhancements
J2SE
dns-remplacé
/
j2se
/
/
doc
/
relnote
/
dns-remplacer
java
Platform
standard
Edition
dns-remplacer
/
javase
/
java
Platform
Enterprise
Edition
dns-remplacer
/
javaee
/
java
Platform
micro
Edition
dns-remplacer
/
javame
/
JDK
Tools
and
Utilities
dns-remplacer
/
javase
/
/
doc
/
technote
/
tools
/
Sun
Microsystems
fournir
trois
plates-formes
java
permettre
développement
le
exécution
programmer
java
java
standard
base
java
EE
java
noter
nom
celui
employé
verser
sortir
depuis
antérieurement
plates-
forme
nommer
respectivement
J2SE
J2EE
J2ME
java
Platform
standard
Edition
java
plate-forme
framework
java
base
permettre
développer
ou
/
et
exécuter
programme
java
dernier
version
nommer
J2SE
version
porter
nom
J2SE
souligner
version
apporter
mettre
jour
majeur
rapport
précédent
version
actuel
plus
récent
date
décembre
ce
être
version
porte
nom
java
version
java
annoncer
comme
nouveau
mettre
jour
majeur
mi
toujours
attendre
plate-forme
java
délivrer
deux
produit
logiciel
principal
java
Runtime
Environment
plus
communément
JRE
fournir
librairie
machiner
java
virtuel
de
autre
composante
nécessaire
exécuter
programme
java
java
Development
kit
plus
communément
JDK
inclure
JRE
plus
outil
développement
tel
compilateur
débogueur
nécessaire
utile
développer
programme
java
noter
terme
JDK
bien
très
populaire
devenir
imprécis
car
de
autre
plates-forme
java
java
EE
exemple
comporter
elle
aussi
propre
kit
développement
java
Platform
Enterprise
Edition
java
EE
plate-forme
framework
java
plus
particulièrement
destiner
application
de
entreprise
offrir
cadre
standard
développer
application
distribuer
java
Platform
micro
Edition
java
plate-forme
framework
java
spécialiser
application
mobile
plates-formes
java
compatibles
J2ME
embarquer
nombreux
téléphone
mobile
PDA
façon
plus
spécifique
pouvoir
aussi
citer
plateforme
java
Card
fournir
environnement
développement
de
application
carte
puce
JavaFX
créer
Rich
Internet
application
annexe
-
glossaire
trouver
facilement
web
de
excellent
définition
anglais
terme
sigler
produire
référence
informatique
parmi
source
possible
citer
exemple
-
parmi
encyclopédie
dns-remplacer
version
anglaiser
plus
complet
-
parmi
moteur
spécialiser
rechercher
encyclopédie
dictionnaire
glossaire
dns-remplacer
voici
glossaire
quelque
terme
sigle
général
courant
sigle
/
terme
définition
commentaire
api
application
Programming
bibliothèque
fonctionnalité
commun
interface
courant
bas
niveau
constituer
interface
entre
couche
bas
couche
applicatives
plus
haut
niveau
exemple
dns-remplacer
/
javase
/
/
doc
/
api
/
spécifier
api
standard
java
fournir
JDK
Framework
cadre
de
application
Ensemble
cohérent
classe
généralement
abstraire
de
interface
permettre
développement
rapide
de
application
fournir
suffisamment
brique
logicielles
pouvoir
produire
application
aboutir
typiquement
spécialiser
type
de
application
gui
Graphical
user
interface
interface
homme-machine
graphique
opposition
interface
ligne
commander
IDE
Integrated
Development
programme
regrouper
ensemble
de
utilitaire
Environment
logiciel
développement
programmer
éditeur
texte
compilateur
débogueur
gestionnaire
version
aider
production
de
interface
généralement
dédier
seul
langage
programmation
JDK
java
Development
kit
voir
chapitre
JFC
java
Foundation
classe
cadre
de
application
graphique
Ensemble
classe
java
permettre
construire
interface
utilisateur
graphique
portable
contenir
notamment
composant
swing
JRE
java
Runtime
Environment
voir
chapitre
J2EE
java
Platform
Enterpriser
voir
chapitre
Edition
java
java
Platform
Enterprise
J2ME
java
Platform
micro
voir
chapitre
Edition
java
java
Platform
micro
Edition
J2SE
java
Platform
standard
voir
chapitre
Edition
java
java
Platform
standard
Edition
plus
spécifiquement
cadre
de
application
professionnel
java
distribuer
sigle
/
terme
définition
commentaire
EJB
Enterprise
JavaBeans
technologie
java
offert
plateforme
java
EE
permettre
créer
composant
distribuer
héberger
serveur
de
application
architecturer
MVC
utiliser
réaliser
modèle
dns-remplacer
/
products
/
ejb
/
JSP
java
Server
page
technologie
java
offert
plateforme
java
EE
permettre
créer
page
Web
dynamique
architecturer
MVC
utiliser
réaliser
vue
dns-remplacer
/
products
/
jsp
/
Servlet
technologie
java
offert
plateforme
java
EE
permettre
de
étendre
fonctionnalité
de
un
serveur
Web
accès
baser
donner
transaction
'
e-commerce
...
...
architecture
MVC
utiliser
réaliser
contrôleur
dns-remplacer
/
products
/
servlet
/
