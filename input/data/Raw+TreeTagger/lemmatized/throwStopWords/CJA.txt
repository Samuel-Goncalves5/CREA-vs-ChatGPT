le
langage
java
Petit
mémento
de
syntaxe
élément
de
programmation
site
de
REFERENCE
le
site
officiel
de
java
être
java
sun
com
on
pouvoir
notamment
y
consulter
avec
intérêt
du
tutoriel
java
sun
com
doc
books
tutorial
un
grand
collection
de
petit
exemple
de
programme
java
sun
com
developer
codesample
examplet
du
recommandation
de
style
java
sun
com
doc
codeconv
html
CodeConvTOC
doc
html
le
descriptif
de
tout
le
paquetage
classe
et
méthode
standard
java
sun
com
javase
doc
api
le
mode
d
emploi
du
générateur
de
documentation
javadoc
java
sun
com
j
se
javadoc
index
jsp
un
préparation
à
le
certification
de
programmeur
java
java
sun
com
doc
books
tutorial
extra
certification
sommaire
langage
et
programmation
orienter
objet
programmer
java
style
de
programmation
Identificateurs
commentaire
commentaire
de
documentation
commentaire
d
implémentation
fichier
java
nom
et
contenu
d
un
fichier
java
compilation
exécution
génération
de
le
documentation
paquetage
paquetage
standard
affectation
d
un
classe
à
un
paquetage
importation
d
un
classe
d
un
paquetage
classe
et
interface
classe
standard
classe
abstraire
et
sous
classe
classe
abstraire
sous
classe
interface
interface
classe
implanter
un
interface
Enumération
classer
imbriquer
Nested
classe
contrôle
d
accès
par
le
modificateur
instance
de
classe
type
de
DONNEES
type
primitif
type
objet
ou
type
référencer
classe
envelopper
chaîne
de
caractère
non
modifiable
string
chaîne
de
caractère
modifiable
StringBuffer
tableau
collection
Transtypage
OPERATEURS
et
expression
opérateur
et
expression
arithmétique
opérateur
et
expression
booléen
opérateur
relationnel
METHODES
définition
et
appel
d
un
méthode
ordinaire
constructeur
méthode
main
instruction
instruction
d
affectation
instruction
de
contrôle
instruction
de
sélection
instruction
de
boucle
instruction
d
entrer
sortir
notion
de
flux
entrée
sortir
terminal
entrée
sortir
fichier
lecture
d
un
chaîne
de
caractère
formater
HERITAGE
notion
d
héritage
Qu
hériter
un
sou
classer
redéfinir
un
méthode
type
statique
dynamique
liaison
statique
dynamique
type
statique
dynamique
Transtypage
liaison
statique
dynamique
polymorphisme
classe
et
méthode
particulier
interface
excepter
exception
contrôler
et
non
contrôler
classe
d
exception
standard
le
hiérarchie
Error
le
hiérarchie
exception
le
hiérarchie
RuntimeException
lancement
d
un
exception
capturer
d
un
exception
clause
throws
instruction
try
catch
iii
définir
un
nouveau
classe
d
exception
annexe
programmation
graphique
swing
conteneur
et
composant
gestion
de
le
mise
en
page
gestion
du
événement
notion
d
événement
réaliser
un
gestionnaire
d
événement
affichage
fermeture
d
un
fenêtre
graphique
architecture
du
composant
swing
Applets
annexe
THREADS
créer
un
thread
par
extension
de
le
classe
Thread
créer
un
thread
par
implémentation
de
l
interface
Runnable
synchronisation
et
communication
entre
threads
section
critique
et
synchronisation
communication
entre
threads
annexe
conception
et
DEVELOPPEMENT
en
java
conseil
général
pour
un
bon
conception
du
classe
architecture
d
un
application
interactif
le
modèle
MVC
test
unitaire
définition
JUnit
java
Beans
design
pattern
exemple
le
modèle
singleton
exemple
le
modèle
Decorator
annexe
machiner
virtuel
java
JVM
annexer
communication
entre
java
et
C
JNI
appel
d
un
procédure
C
déclaration
et
appel
java
prototyper
C
Implémentation
C
Echange
de
donnée
entre
java
et
C
déclaration
et
appel
java
prototyper
C
Implémentation
C
annexe
plat
forme
java
annexe
glossaire
langage
et
programmation
orienter
objet
java
être
un
langage
de
programmation
orienter
objet
un
objet
être
un
représentation
simplifier
d
un
entité
du
monde
réel
entité
concréter
ex
mon
voiture
ou
non
ex
le
date
d
aujourd
hui
un
objet
se
caractériser
par
son
état
et
son
comportement
un
objet
stocker
son
état
dans
du
variable
appelé
champ
ou
attribut
et
présenter
son
comportement
au
travers
de
fonctionnalité
appeler
méthode
exemple
d
objet
maVoiture
valeur
du
attribut
Fiat
griser
kilomètre
méthode
démarrer
arrêter
accélérer
typiquement
l
état
être
encapsuler
au
cœur
de
l
objet
et
n
être
accessible
depuis
l
extérieur
de
l
objet
en
consultation
ou
modification
que
via
le
méthode
offrir
par
ce
objet
exemple
l
objet
maVoiture
getCouleur
setCouleur
démarrer
arrêter
accélérer
Fiat
griser
on
interagir
avec
un
objet
en
lui
envoyer
un
message
de
demande
d
activation
d
un
de
son
méthode
exemple
d
envoi
d
un
message
à
un
objet
maVoiture
accélérer
un
méthode
particulier
appeler
constructeur
permettre
d
initialiser
l
état
de
l
objet
à
son
création
un
classe
servir
à
regrouper
sous
un
même
catégorie
et
un
même
nom
générique
le
objet
partager
le
même
type
d
état
et
le
même
comportement
un
classe
être
donc
un
type
d
objet
on
dire
réciproquement
qu
un
objet
être
un
instance
de
classe
exemple
de
classe
automobile
attribut
marquer
couleur
consommation
méthode
démarrer
arrêter
accélérer
le
classe
pouvoir
être
organiser
en
hiérarchie
chaque
classe
hériter
alors
du
attribut
et
méthode
du
classe
situer
sur
son
ligne
hiérarchique
ascendant
réaliser
un
programme
dans
un
langage
orienter
objet
c
être
modéliser
par
du
classe
le
objet
que
l
on
avoir
à
manipuler
écrire
ce
classe
dans
le
langage
de
programmation
orienter
objet
créer
du
objet
instance
de
ce
classe
communiquer
avec
ce
objet
en
invoquer
leur
méthode
java
être
naître
en
dans
l
entreprise
californien
Sun
Microsystems
il
avoir
être
concevoir
par
James
GOSLING
al
programme
java
style
de
programmation
il
être
largement
admettre
que
le
respect
de
le
syntaxe
et
un
programme
qui
fonctionner
ne
être
pas
du
critère
de
qualité
suffisant
pour
un
programme
L
expérience
de
le
programmation
avoir
ainsi
conduire
à
établir
du
recommandation
de
style
la
respecter
n
être
pas
techniquement
obligatoire
mais
contribuer
à
améliorer
le
lisibilité
du
programme
ce
convention
viser
en
faire
un
finalité
économique
contribuer
à
produire
du
programme
plus
facilement
maintenable
pendant
tout
leur
durée
de
vie
dans
le
chapitre
suivant
le
exemple
respecter
le
convention
de
style
préconiser
par
java
sun
com
Identificateurs
quelque
règle
et
recommandation
pour
nommer
le
identificateurs
le
caractère
minuscule
majuscule
du
caractère
être
discriminant
règle
du
langage
java
le
identificateurs
d
objet
de
champ
et
de
méthode
commencer
toujours
par
un
minuscule
par
convention
le
identificateurs
de
classe
et
d
interface
commencer
toujours
par
un
majuscule
par
convention
le
identificateurs
de
constant
être
tout
en
majuscule
par
convention
le
identificateurs
de
méthode
commencer
par
un
verbe
recommandation
commentaire
commentaire
de
documentation
le
commentaire
de
documentation
viser
à
décrire
le
spécification
du
code
sans
considération
d
implémentation
il
être
destiner
à
du
développeur
et
utilisateur
qui
n
avoir
pas
nécessairement
le
code
source
sous
le
main
ce
commentaire
pouvoir
être
automatiquement
extraire
par
l
utilitaire
javadoc
pour
en
constituer
un
fichier
de
documentation
en
HTML
le
documentation
d
un
classe
devoir
inclure
avoir
minima
le
nom
de
le
classe
son
fonctionnalité
et
son
grand
caractéristique
son
auteur
son
version
un
documentation
pour
chaque
constructeur
et
chaque
méthode
le
documentation
d
un
méthode
devoir
inclure
avoir
minima
le
nom
de
le
méthode
son
fonctionnalité
un
description
de
chaque
paramètre
et
de
le
valeur
retourner
le
exception
susceptible
d
être
lancer
par
ce
méthode
syntaxe
commentaire
commentaire
principal
balise
de
commentaire
prédéfinies
author
version
param
return
see
throws
commentaire
d
implémentation
le
commentaire
d
implémentation
viser
à
expliciter
sans
paraphraser
le
code
et
le
choix
d
implémentation
le
choix
du
identificateurs
et
le
clarté
de
le
programmation
devoir
permettre
de
minimiser
le
nombre
de
tel
commentaire
syntaxe
commentaire
commentaire
commentaire
fichier
java
nom
et
contenu
d
un
fichier
java
chaque
fichier
source
java
contenir
un
seul
classe
publique
L
organisation
recommander
être
le
suivant
le
commentaire
de
début
C
être
un
commentaire
de
documentation
comprendre
typiquement
l
intituler
de
le
classe
et
un
descriptif
sommaire
de
son
fonction
l
auteur
le
version
le
instruction
de
paquetage
le
instruction
d
import
le
déclaration
du
classe
un
fichier
devoir
contenir
moins
de
ligne
et
du
ligne
de
moins
de
caractère
voire
pour
le
commentaire
de
documentation
recommandation
un
fichier
java
porter
le
nom
de
le
classe
publique
qu
il
contenir
le
fichier
source
java
avoir
pour
suffixe
java
le
fichier
java
compiler
avoir
pour
suffixe
class
par
convention
le
suffixe
java
et
class
être
imposer
par
le
outil
compilation
exécution
génération
de
le
documentation
depuis
le
ligne
de
commande
compilation
javac
fileName
java
exécution
java
fileName
fichier
du
main
génération
de
le
documentation
javadoc
java
pour
avoir
un
documentation
programmeur
compléter
y
comprendre
le
membre
priver
de
tout
le
classe
et
de
leur
interaction
il
falloir
lancer
ce
commander
avec
l
option
private
paquetage
un
paquetage
package
en
anglais
être
un
bibliothèque
de
classe
organiser
de
façon
hiérarchique
le
nom
d
un
paquetage
être
nécessairement
le
nom
de
son
répertoire
le
nom
d
un
paquetage
être
toujours
en
lettre
minuscule
par
convention
différent
paquetage
pouvoir
être
rassembler
et
compacter
dans
un
fichier
d
archiver
zip
ou
jar
paquetage
standard
le
variable
d
environnement
CLASSPATH
indiquer
à
le
machine
virtuel
java
où
trouver
le
classe
et
bibliothèque
de
classe
dont
elle
avoir
besoin
hiérarchie
partiel
du
paquetage
standard
java
applet
awt
io
lang
util
event
paquetage
le
plus
immédiatement
utile
paquetage
contenir
java
io
classe
relatif
au
entrée
sorti
java
lang
classe
fondamental
type
basique
classe
envelopper
string
StringBuffer
classer
math
java
util
classe
utilitaire
divers
collection
ArrayList
Vector
classer
Random
gestion
du
date
et
du
heure
affectation
d
un
classe
à
un
paquetage
pour
qu
un
classe
appartenir
à
un
paquetage
il
falloir
déclarer
le
paquetage
d
appartenance
en
tête
de
fichier
source
syntaxe
package
packageName
importation
d
un
classe
d
un
paquetage
pour
utiliser
un
classe
définir
dans
un
paquetage
autre
que
celui
de
le
classe
d
utilisation
ce
classe
devoir
être
importer
en
tête
de
fichier
source
syntaxe
import
packageName
CTassName
import
packageName
former
déconseiller
car
peu
informatif
exemple
import
java
util
ArrayList
import
java
util
lterator
import
java
io
former
déconseiller
car
peu
informatif
le
paquetage
java
lang
être
importer
automatiquement
classe
et
interface
classe
standard
syntaxe
public
class
ClassName
Fields
Constructors
Methods
accessor
methods
mutator
methods
exemple
class
RationalNumber
Represents
avoir
rational
number
num
den
author
AM
version
public
class
RationalNumber
FIELDS
private
int
numerator
private
int
denominator
private
boolean
reduced
CONSTRUCTORS
Construct
avoir
rational
number
initialized
to
public
RationalNumber
numerator
denominator
reduced
true
METHODS
ACCESSORS
Get
the
numerator
of
this
rational
number
public
int
getNumerator
return
numerator
Get
the
denominator
of
this
rational
number
public
int
getDenominator
return
denominator
Return
true
iff
the
numerator
denominator
form
is
irreducible
public
boolean
isReduced
return
reduced
METHODS
MUTATORS
set
this
rational
number
to
numerator
denominator
public
void
setNumber
int
numerator
int
denominator
numerator
numerator
denominator
denominator
reduced
false
set
this
rational
number
to
avoir
irreducible
numerator
denominator
form
public
void
reduce
int
divisor
greatestCommonDivisor
numerator
denominator
j
numerator
numerator
divisor
denominator
denominator
divisor
reduced
true
METHODS
UTILITIES
Return
the
greatest
common
divisor
of
the
two
integers
x
and
y
private
int
greatestCommonDivisor
int
x
int
y
int
divisor
à
implémenter
return
divisor
end
class
RationalNumber
classe
abstraire
et
sous
classe
un
classe
qui
posséder
au
moins
un
méthode
abstrait
i
e
sans
corps
être
abstraire
et
devoir
être
déclarer
avec
le
modificateur
abstract
le
classe
abstrait
ne
pouvoir
pas
être
instanciées
pour
pouvoir
créer
du
objet
il
falloir
créer
un
sous
classe
dans
lequel
tout
le
méthode
abstrait
être
définir
ce
sous
classe
non
abstrait
pouvoir
alors
être
instanciée
classe
abstrait
syntaxe
public
abstract
class
ClassName
Fields
Constructors
Methods
exemple
abstract
class
progression
Represents
avoir
real
linear
progression
of
order
with
constant
coefficient
author
AM
version
public
abstract
class
progression
FIELDS
private
double
u
the
first
term
of
the
progression
CONSTRUCTORS
Define
avoir
progression
the
first
term
of
which
is
u
public
progression
double
u
this
u
u
METHODS
Get
the
first
term
of
this
progression
public
doubler
getu
return
u
Given
à
current
term
u
n
return
the
next
term
u
n
public
abstract
double
nextTerm
doubler
un
Return
the
term
of
rank
n
public
double
termOfRank
int
n
double
u
u
u
n
double
v
u
n
for
int
i
i
n
i
v
nextTerm
u
u
v
return
u
end
class
progression
sous
classe
syntaxe
public
class
SubclassName
extends
SuperclassName
Fields
Constructors
Methods
exemple
class
ArithGeomProgression
Represents
avoir
real
arithmetic
geometric
progression
with
constant
coefficient
u
n
avoir
u
n
b
author
AM
version
public
class
ArithGeomProgression
extends
progression
FIELDS
private
double
avoir
multiplying
coefficient
private
double
b
additif
coefficient
CONSTRUCTORS
Define
an
arithmetic
geometric
progression
param
u
O
first
term
of
the
progression
param
avoir
multiplying
coefficient
param
b
additif
coefficient
public
ArithGeomProgression
double
u
double
avoir
double
b
super
u
this
avoir
avoir
this
b
b
METHODS
Given
à
current
term
u
n
return
the
next
term
u
n
public
double
nextTerm
double
u
return
avoir
u
b
end
class
ArithGeomProgression
interface
remarquer
liminaire
le
terme
interface
avoir
un
sémantique
multiple
dans
le
cadre
de
le
programmation
en
java
il
pouvoir
prendre
selon
le
contexte
trois
sens
distinct
même
si
conceptuellement
apparenter
au
sens
informatique
commun
un
interface
être
un
jonction
entre
deux
élément
matériel
ou
logiciel
permettre
l
échanger
d
information
par
exemple
l
interface
homme
machiner
au
sens
programmation
objet
l
interface
d
un
classe
être
le
partie
visible
publique
de
ce
classe
elle
se
définir
typiquement
par
le
liste
du
membre
attribut
constructeur
méthode
non
priver
associer
à
leur
commentaire
de
documentation
au
sens
spécifique
du
langage
java
un
interface
être
un
sorte
de
classe
abstrait
posséder
du
caractéristique
particulier
et
qui
définir
un
protocole
de
comportement
c
être
le
sens
qui
être
définir
dans
ce
section
C
être
son
contexte
d
utilisation
qui
donner
sens
au
mot
interface
le
interface
au
sens
du
langage
java
être
du
sorte
de
classe
abstraire
sans
aucun
détail
d
implémentation
et
qui
posséder
un
degré
d
abstraction
supérieur
à
celui
du
classe
abstraire
le
interface
avoir
du
méthode
qui
être
tout
implicitement
abstraire
elle
n
avoir
pas
de
corps
à
noter
qu
il
n
être
pas
recommander
d
ajouter
le
modificateur
abstract
puisqu
il
être
implicite
ne
posséder
pas
de
champ
à
l
exception
éventuel
de
constant
de
classe
implicitement
static
final
assigner
son
membre
être
implicitement
public
si
l
interface
être
publique
un
interface
spécifier
le
signature
minimal
d
un
classe
qui
l
implémente
un
interface
être
donc
un
contrat
à
respecter
quand
un
classe
implémentir
un
interface
elle
s
engager
à
se
conformer
à
ce
interface
un
classe
pouvoir
implémenter
plusieurs
interface
un
classe
définir
un
type
et
son
implémentation
un
interface
définir
un
type
sans
son
implémentation
interface
syntaxe
public
interface
InterfaceName
constantAttributer
abstractMethods
exemple
public
interface
Measurable
double
size
return
if
this
is
or
than
x
int
isLargerThan
Measurable
x
classe
implanter
un
interface
syntaxe
public
class
ClassName
implements
InterfaceNamel
InterfaceName
exemple
public
class
square
implements
Measurable
private
double
width
public
square
double
width
width
width
public
double
size
return
width
width
public
int
isLargerThan
Measurable
x
if
this
size
x
size
return
if
this
size
x
size
return
return
Enumération
un
classe
enum
permettre
de
représenter
un
ensemble
de
constante
nommé
dont
le
type
être
le
classe
elle
même
ce
classe
contribuer
à
accroître
le
lisibilité
du
programme
syntaxe
public
enum
EnumName
List
of
named
constant
Possibility
of
other
fields
and
methods
exemple
public
enum
direction
NORTH
SOUTH
EAST
WEST
public
class
test
private
direction
dir
public
setDir
direction
d
dir
d
public
boolean
isNorthSouth
return
dir
direction
NORTH
dir
direction
SOUTH
sous
leur
forme
le
plus
simple
le
classe
enum
être
souvent
utiliser
sous
le
forme
d
un
classe
interner
inner
class
exemple
public
class
MyClass
private
direction
dir
private
enum
direction
NORTH
SOUTH
EAST
WEST
public
void
setNorth
dir
direction
NORTH
il
être
possible
d
associer
à
chaque
constante
énumérer
un
valeur
d
un
type
quelconque
il
être
possible
d
utiliser
un
type
énumérer
dans
un
instruction
switch
classe
imbriquer
Nested
classe
ce
concept
n
être
pas
vital
pour
un
débuter
un
classe
pouvoir
être
définir
à
l
intérieur
d
un
autre
classe
on
parler
alors
de
classe
imbriqué
on
en
distinguer
quatre
catégorie
le
classe
membrer
déclarer
static
static
nested
classe
membre
statique
de
le
classe
englobant
le
classe
interne
inner
classe
membre
non
statique
de
le
classe
englobant
le
classe
local
local
classe
classe
définir
à
l
intérieur
d
un
méthode
le
classe
anonyme
anonymous
classe
classe
local
sans
nom
exemple
public
class
OuterClass
public
static
class
StaticNestedClass
private
class
InnerClass
exemple
de
référence
à
le
classe
StaticNestedClass
OuterClass
StaticNestedClass
quel
intérêt
pouvoir
il
y
avoir
à
déclarer
du
classe
imbriquer
potentiellement
un
regroupement
logique
un
encapsulation
accroître
un
code
plus
lisible
et
plus
facilement
maintenable
en
pratique
le
plupart
du
classe
imbriqué
être
du
classe
interne
quant
au
classe
anonyme
elle
pouvoir
rendre
le
code
difficile
à
lire
et
devoir
donc
être
limiter
à
du
classe
très
petit
d
un
ou
deux
méthode
voir
exemple
typique
en
section
contrôle
d
accès
par
le
modificateur
le
contrôle
d
accès
à
un
membre
d
un
classe
pouvoir
être
préciser
dans
leur
déclaration
par
du
mot
clé
appeler
modificateur
ce
modificateur
permettre
de
spécifier
le
visibilité
du
champ
ou
de
le
méthode
private
protected
ou
public
le
lieu
de
stockage
dans
le
classe
modificateur
static
ou
dans
l
objet
par
défaut
le
caractère
modifiable
par
défaut
ou
non
modificateur
final
modificateur
commentaire
et
exemple
private
un
membre
déclarer
private
n
être
accessible
qu
à
l
intérieur
de
son
classe
de
définition
modificateur
d
accès
recommander
pour
le
champ
protected
un
membre
déclarer
protected
n
être
accessible
que
depuis
son
classe
de
déclaration
un
sous
classe
ou
un
classe
du
même
paquetage
modificateur
d
accès
recommander
pour
le
méthode
du
super
classe
public
un
membre
déclarer
public
être
accessible
depuis
n
importer
quel
classer
modificateur
d
accès
recommander
pour
le
méthode
static
un
champ
déclarer
static
être
un
variable
de
classe
et
n
être
pas
dupliquer
dans
le
différent
instance
un
champ
non
static
être
un
variable
d
instance
et
être
dupliquer
dans
chaque
instance
un
méthode
déclarer
static
être
un
méthode
de
classe
et
être
invoquer
sans
référence
à
un
objet
particulier
mais
en
faire
référence
à
son
classe
un
méthode
non
static
être
un
méthode
d
instance
et
être
invoquer
sur
un
objet
particulier
voir
également
chapitre
final
un
variable
déclarer
final
ne
pouvoir
plus
être
modifier
après
qu
elle
avoir
être
initialiser
cela
permettre
en
particulier
de
déclarer
du
champ
constant
exemple
final
int
SIZE
un
méthode
déclarer
final
ne
pouvoir
pas
être
redéfinir
dans
un
sous
classe
un
classe
déclarer
final
ne
pouvoir
pas
être
sous
classer
nota
à
défaut
de
modificateur
private
protected
ou
public
le
visibilité
être
dire
package
access
le
membre
de
le
classe
être
visible
depuis
tout
le
classe
du
même
paquetage
exemple
public
static
final
double
GRAVITY
instance
de
classe
avant
de
pouvoir
être
utiliser
un
objet
ou
instance
de
classe
devoir
être
déclarer
ClassName
objectName
créer
puis
initialiser
objectName
new
constructorCall
exemple
GregorianCalendar
cal
cal
GregorianCalendar
Timer
myTimer
new
Timer
le
déclaration
d
un
objet
ne
créer
pas
l
objet
mais
uniquement
un
variable
pointeur
destiner
à
mémoriser
l
adresse
futur
de
l
objet
le
création
de
l
objet
en
lui
même
i
e
l
instance
proprement
dire
être
réaliser
par
l
opérateur
new
L
appel
au
constructeur
qui
suivre
l
opérateur
new
avoir
pour
rôle
d
initialiser
proprement
l
objet
ainsi
créer
in
fine
l
adresse
de
l
objet
ainsi
créer
et
initialiser
adresse
renvoyer
par
l
opérateur
new
être
stocker
grâce
à
l
opérateur
d
affectation
dans
le
variable
préalablement
déclarer
quelque
précision
important
déclaration
le
déclaration
ClassName
objectName
créer
un
variable
de
nom
objectName
de
type
référence
i
e
un
pointeur
et
l
initialiser
automatiquement
à
null
null
être
un
constant
littéral
prédéfinie
de
java
qui
pouvoir
être
assigner
à
tout
variable
de
type
référence
et
qui
identifier
un
pointeur
nul
un
variable
de
valeur
null
ne
poindre
vers
aucun
objet
tout
tentative
de
référer
à
un
objet
à
partir
d
un
pointeur
null
engendrer
un
erreur
de
compilation
ou
d
exécution
selon
le
contexte
gestion
dynamique
de
le
mémoire
L
opérateur
new
créer
l
instance
de
classe
dans
un
zone
mémoire
général
appelé
tas
qui
contenir
tout
le
donnée
allouer
à
l
exécution
et
n
avoir
pas
de
portée
local
L
objet
ainsi
créer
conserver
donc
un
portée
global
et
rester
vivant
tant
qu
on
disposer
d
un
référence
i
e
un
pointeur
permettre
d
y
accéder
quand
un
objet
n
être
plus
référencer
il
devenir
définitivement
inaccessible
et
mourir
son
espace
mémoire
être
automatiquement
désallouer
le
récupération
automatique
de
ce
espace
mémoire
être
réaliser
par
un
processus
appeler
ramasser
miette
garbage
collector
un
façon
de
détruire
un
objet
être
donc
d
assigner
le
valeur
null
au
variable
qui
y
faire
référence
directement
ou
indirectement
type
de
DONNEES
java
connaître
deux
type
de
donnée
le
type
primitif
le
donnée
de
type
primitif
être
stocker
directement
dans
le
variable
et
avoir
un
sémantique
de
valeur
i
e
c
être
le
valeur
qui
être
copier
quand
un
variable
être
affecter
à
un
autre
variable
le
type
objet
ou
type
référencer
le
donnée
de
type
objet
être
stocker
sous
forme
de
référence
à
ce
objet
et
non
pas
en
tant
qu
objet
même
quand
un
variable
de
type
objet
être
affecter
à
un
autre
variable
seul
le
référence
être
copier
pas
l
objet
lui
même
java
utiliser
le
système
Unicode
en
interner
pour
coder
le
caractère
le
chaîne
de
caractère
et
le
identificateurs
chaque
caractère
Unicode
être
coder
sur
bit
ce
qui
permettre
de
représenter
de
nombreux
alphabet
grec
cyrillique
hébreu
arabe
ainsi
que
le
symbole
mathématique
et
technique
bien
qu
Unicode
être
utiliser
par
certain
système
d
exploitation
Windows
NT
ou
Vista
par
exemple
le
plupart
du
système
d
exploitation
utiliser
du
système
de
codage
bit
de
sorte
que
du
transcodage
être
nécessaire
et
du
problème
d
incompatibilité
pouvoir
survenir
à
l
affichage
type
primitif
typer
description
exemple
de
littéral
nombre
entier
type
signer
byte
octet
entier
bit
short
entier
courir
bit
int
entier
bit
long
entier
long
bit
L
L
nombre
réel
type
signé
float
réel
simple
précision
F
E
F
doubler
réel
double
précision
E
autre
type
type
non
signé
char
caractère
un
seul
bit
u
F
boolean
valeur
booléen
false
true
un
nombre
sans
point
décimal
être
interpréter
comme
un
entier
de
type
int
mais
immédiatement
convertir
en
byte
short
ou
long
lors
de
l
affection
on
pouvoir
déclarer
un
littéral
de
type
long
en
l
affecter
du
suffixe
L
un
nombre
avec
un
point
décimal
être
interpréter
comme
un
réel
de
type
double
on
pouvoir
déclarer
un
littéral
de
type
float
en
l
affecter
du
suffixe
F
un
caractère
littéral
pouvoir
être
écrire
sous
forme
d
un
unique
caractère
Unicode
entre
apostrophe
ou
d
un
valeur
Unicode
précéder
par
u
le
deux
littéral
booléen
être
true
et
false
le
variable
d
un
type
primitif
ne
référer
pas
à
du
objet
elle
n
avoir
pas
de
méthode
associer
type
objet
ou
type
référencer
tout
le
type
autre
que
le
type
primitif
être
du
type
objet
il
inclure
le
classe
non
abstraire
du
bibliothèque
standard
java
tel
que
le
type
string
par
exemple
ainsi
que
le
classe
définir
par
l
utilisateur
un
variable
d
un
type
objet
contenir
un
référence
ou
pointeur
sur
ce
objet
le
affectation
et
passage
de
paramètre
avoir
un
sémantique
de
référence
i
e
c
être
le
référence
qui
être
copier
et
non
l
objet
lui
même
après
l
affectation
d
un
variable
à
un
autre
le
deux
variable
référer
au
même
objet
il
s
agir
donc
d
un
copie
de
surface
par
opposition
à
un
copie
profond
qui
dupliquer
le
objet
le
deux
variable
être
alors
dire
alias
pour
le
même
objet
classe
envelopper
le
classe
enveloppe
permettre
de
transformer
un
type
simple
en
objet
ce
opération
être
appeler
en
anglais
boxing
classe
envelopper
type
primitif
Boolean
boolean
Byte
byte
Character
char
double
double
Float
float
Integer
int
long
long
short
short
exemple
convert
primitif
type
wrapper
type
Integer
k
new
Integer
convert
wrapper
typer
primitif
type
double
x
K
doubleValue
le
classe
enveloppe
être
utile
quand
un
méthode
n
accepter
pas
le
type
simple
mais
requérir
du
objet
toutefois
depuis
le
plat
former
voir
chapitre
le
valeur
de
type
primitif
être
en
cas
de
besoin
implicitement
convertir
en
l
objet
de
le
classe
envelopper
correspondant
autoboxing
et
réciproquement
unboxing
auparavant
le
conversion
devoir
être
expliciter
le
objet
de
tel
classe
être
immuable
immutable
c
être
à
dire
non
modifiable
un
fois
créer
en
conséquence
un
méthode
ne
pouvoir
pas
avoir
de
paramètre
de
sortie
de
tel
type
le
classe
enveloppe
présenter
surtout
l
intérêt
d
offrir
du
méthode
de
conversion
typer
primitif
string
ainsi
que
du
utilitaire
pour
du
donnée
de
type
primitif
exemple
Convert
string
typer
primitif
type
double
x
double
parseDouble
chaîne
de
caractère
non
modifiable
string
bien
que
le
chaîne
de
caractère
de
type
string
être
du
objet
il
n
être
pas
nécessaire
d
avoir
recours
à
l
opérateur
new
pour
la
créer
le
caractère
d
un
chaîne
de
caractère
chaine
être
indicer
de
à
chaine
length
un
chaîne
de
caractère
littéral
être
noter
entre
apostrophe
L
opérateur
être
l
opérateur
de
concaténation
de
chaîne
il
produire
un
nouveau
chaîne
sans
élément
physiquement
partager
avec
son
opérande
le
comparaison
de
deux
chaîne
caractère
par
caractère
nécessiter
de
faire
appel
à
le
fonction
equals
l
opérateur
ne
donner
le
résultat
intuitivement
attendre
que
dans
un
cas
particulier
le
objet
de
type
string
être
immuable
immutable
c
être
à
dire
non
modifiable
un
fois
créer
en
conséquence
un
méthode
ne
pouvoir
pas
avoir
de
paramètre
de
sortie
de
type
string
le
classe
string
appartenir
au
paquetage
java
lang
exemple
string
chainer
exemple
n
de
chaine
littéral
System
out
println
longueur
de
chaine
chainer
length
chaîne
de
caractère
modifiable
StringBuffer
ce
chaîne
de
caractère
contrairement
au
chaîne
de
type
string
pouvoir
être
modifier
L
opérateur
new
être
indispensable
pour
créer
un
chaîne
de
type
StringBuffer
le
classe
StringBuffer
appartenir
au
paquetage
java
lang
exemple
StringBuffer
chainer
chaine
new
StringBuffer
meeting
at
pm
chainer
setCharAt
meeting
at
and
not
System
out
println
chaine
tableau
un
tableau
être
un
collection
de
taille
fixe
d
élément
de
même
type
chaque
élément
être
repérer
par
son
indice
qui
permettre
un
accès
direct
à
l
élément
à
tout
tableau
être
automatiquement
associer
un
classe
dérivé
d
Object
et
partager
par
tout
le
tableau
avoir
le
même
type
d
élément
L
attribut
d
instance
length
qui
être
un
champ
public
et
non
un
méthode
contenir
le
nombre
d
élément
du
tableau
le
élément
d
un
tableau
array
être
indicer
de
à
array
length
quand
on
tenter
d
accéder
à
un
élément
dont
l
indice
être
hors
de
le
plage
permettre
un
exception
de
type
IndexOutOfBoundsException
être
lever
il
être
à
noter
qu
un
tableau
de
caractère
n
être
pas
un
objet
de
type
Siring
et
réciproquement
syntaxe
pour
le
cas
d
un
tableau
mono
dimensionnel
Declaring
an
array
variable
TypeOfElements
arrayVariable
Creating
an
array
object
arrayVariable
new
TypeOfElements
numberOfElements
Referring
to
an
element
arrayVariable
integerIndex
exemple
Declaring
an
array
variable
private
double
mark
Creating
an
array
object
static
final
int
NB
OF
STUDENTS
mark
new
double
NB
OF
STUDENTS
Using
an
array
object
for
int
mark
length
i
mark
i
math
random
System
out
println
mark
mark
i
exemple
static
final
int
NROW
static
final
int
NCOL
string
matrix
new
string
NROW
NCOL
il
être
possible
de
créer
et
d
initialiser
un
tableau
à
le
déclaration
exemple
int
t
System
out
println
t
t
string
s
monsieur
Mrs
Ms
row
Smith
Jones
row
System
out
print
s
s
Ms
Jones
le
classe
java
util
Arrays
offrir
divers
méthode
utilitaire
applicable
à
du
tableau
comparaison
tri
depuis
le
plat
former
voir
chapitre
java
offrir
un
boucle
for
simplifier
pour
parcourir
le
élément
d
un
tableau
exemple
for
each
element
of
my
array
of
double
print
this
element
for
double
e
myArrayOfDoubles
System
out
println
e
collection
un
collection
être
un
objet
représenter
un
groupe
d
objet
un
collection
être
un
agrégat
qui
regrouper
du
élément
multiple
en
un
seul
entité
aucun
hypothèse
n
être
faire
avoir
priori
sur
le
type
du
élément
ni
sur
l
ordre
du
élément
ni
sur
le
possibilité
d
élément
dupliquer
plus
formellement
en
java
un
collection
d
élément
de
type
E
être
un
classe
qui
implémente
l
interface
collection
E
le
paquetage
standard
java
util
offrir
un
variété
de
collection
collection
framework
qui
répondre
au
besoin
le
plus
fréquent
par
exemple
ArrayList
E
Vector
E
LinkedList
E
Stack
E
Hashtable
K
V
Généricité
ce
notion
n
exister
en
java
que
depuis
le
plat
former
voir
chapitre
ce
version
introduire
un
révision
majeur
par
rapport
à
le
précédent
notamment
en
matière
de
gestion
du
collection
L
apparition
de
type
générique
en
être
probablement
l
évolution
le
plus
marquant
le
généricité
permettre
de
communiquer
au
compilateur
le
type
du
élément
d
un
collection
au
moment
de
le
création
de
l
objet
et
non
pas
en
le
fixer
avoir
priori
dans
le
définition
de
classe
exemple
de
classe
générique
Defining
avoir
generic
collection
The
formal
parameter
T
is
the
generic
type
of
the
elements
public
class
MyCollection
T
implements
List
T
T
can
be
used
here
avoir
any
type
Creating
avoir
collection
of
Integers
MyCollection
Integer
collectionOfIntegers
CollectionOfIntegers
new
MyCollection
Integer
Creating
avoir
collection
of
string
MyCollection
string
collectionOfString
CollectionOfStrings
new
MyCollection
string
tout
comme
le
déclaration
de
type
pouvoir
être
générique
le
déclaration
de
méthode
pouvoir
être
aussi
générique
c
être
à
dire
paramétrisées
par
un
ou
plusieurs
paramètre
exemple
de
méthode
générique
Defining
public
static
T
void
fromArrayToCollection
T
avoir
collection
T
c
for
T
o
avoir
c
add
o
Using
it
string
avoir
datal
dater
dater
dater
dater
collection
Object
c
new
ArrayList
string
fromArrayToCollection
avoir
c
noter
il
être
à
signaler
que
le
tableau
et
le
générique
ne
faire
pas
encore
bon
ménage
exemple
Vector
Integer
sheets
new
Vector
Integer
NBOFSHEETS
produire
l
erreur
classique
Generic
array
creation
dans
ce
exemple
un
solution
pouvoir
consister
à
passer
par
un
classe
intermédiaire
simplement
définir
par
class
VectorOfIntegers
extends
Vector
Integer
le
type
être
appeler
type
joker
wildcard
type
il
permettre
de
représenter
tout
type
exemple
public
void
printAll
collection
c
for
Object
o
c
System
out
println
o
il
être
possible
de
borner
le
type
joker
un
caractère
joker
avec
un
borne
supérieur
être
spécifier
extends
type
et
représenter
tout
le
sous
type
de
type
un
caractère
joker
avec
un
borne
inférieur
être
spécifier
super
type
et
représenter
tout
le
type
qui
être
du
super
type
de
type
exemple
de
collection
ArrayList
un
objet
de
type
ArrayList
E
être
un
collection
de
taille
variable
d
élément
de
type
E
chaque
élément
être
repérer
par
son
indice
qui
permettre
un
accès
direct
à
l
élément
un
liste
tableau
supporter
le
principal
fonctionnalité
suivant
ajout
d
un
élément
en
fin
de
tableau
méthode
add
E
accès
à
un
élément
d
indicer
donner
méthode
get
int
et
add
int
E
suppression
d
un
élément
d
indicer
donner
méthode
remove
int
consultation
du
nombre
d
élément
méthode
size
le
élément
d
un
objet
collection
de
type
ArrayList
E
être
indicer
de
à
collection
size
le
classe
ArrayList
E
devoir
être
importer
du
paquetage
java
util
par
import
java
util
ArrayList
exemple
ArrayList
Integer
myCollectionOfIntegers
myCollectionOfIntegers
new
ArrayList
Integer
for
int
i
listOfintegers
add
i
parcours
d
un
collection
Itérateur
le
parcours
d
un
collection
être
l
opération
qui
consister
à
explorer
ce
collection
élément
par
élément
deux
façon
de
faire
pour
parcourir
un
collection
soit
utiliser
un
itérateur
un
itérateur
être
un
objet
de
type
Iterator
E
le
trois
fonctionnalité
le
plus
utile
pour
créer
et
gérer
un
itérateur
être
le
méthode
iterator
de
le
classe
collection
hasNext
et
next
de
le
classe
Iterator
à
noter
que
le
suppression
d
élément
de
le
collection
en
cours
de
parcours
relever
de
le
méthode
remove
de
l
itérateur
et
non
de
celui
de
le
collection
le
classe
Iterator
E
devoir
être
importer
du
paquetage
java
util
par
import
java
util
Iterator
le
itérateurs
être
le
façon
de
faire
historique
pour
parcourir
un
collection
depuis
le
version
il
être
générique
soit
utiliser
un
boucle
for
généraliser
un
tel
boucle
permettre
de
s
affranchir
du
itérateurs
et
de
parcourir
très
simplement
un
collection
quelconque
elle
n
être
offrir
que
depuis
le
version
exemple
de
parcours
avec
itérateur
Iterator
Integer
it
myCollectionOfIntegers
iterator
while
it
hasNext
call
it
next
to
get
the
next
object
of
the
collection
and
do
something
with
that
object
exemple
de
parcours
sans
itérateur
for
each
element
of
my
collection
of
Integers
print
it
for
Integer
v
myCollectionOfIntegers
System
out
println
v
Transtypage
le
transtypage
en
anglais
cast
casting
être
un
opération
qui
consister
à
convertir
le
type
d
un
expression
le
conversion
de
type
se
réaliser
en
faire
précéder
l
expression
par
le
type
cibler
entre
parenthèse
ce
proposition
s
appliquer
à
certain
type
primitif
et
au
type
objet
lier
par
un
relation
d
héritage
le
conversion
incorrect
provoquer
un
erreur
à
le
compilation
ou
à
l
exécution
à
noter
qu
un
transtypage
ne
changer
pas
le
type
du
variable
concerner
le
type
d
un
variable
être
définir
un
fois
pour
tout
dès
son
création
l
opération
de
transtypage
être
simplement
un
changement
de
point
de
vue
qu
on
demander
au
compilateur
syntaxe
newType
expression
exemple
int
n
char
c
char
n
mais
certain
classe
offrir
du
méthode
spécifique
plus
adéquat
notamment
pour
le
conversion
réel
entier
le
méthode
math
round
realValue
permettre
de
convertir
un
réel
en
l
entier
le
plus
proche
le
méthode
math
floor
realValue
associer
à
un
conversion
en
entier
fournir
le
plus
grand
entier
inférieur
ou
égal
à
l
argument
exemple
int
math
floor
valoir
le
méthode
math
ceil
realValue
associer
à
un
conversion
en
entier
fournir
le
plus
petit
entier
supérieur
ou
égal
à
l
argument
exemple
int
math
cei
valoir
pour
le
conversion
en
ou
à
partir
de
string
le
méthode
toString
dont
hériter
tout
objet
permettre
de
convertir
un
objet
en
string
le
méthode
valueOf
primitiveTypeExpression
de
le
classe
string
renvoyer
le
représentation
string
de
le
valeur
de
son
argument
le
méthode
valueOf
string
dont
disposer
tout
classe
enveloppe
renvoyer
un
instance
de
ce
classe
envelopper
contenir
le
valeur
représenter
par
l
argument
de
type
string
exemple
Convert
string
typer
primitif
type
double
x
double
parseDouble
Convert
string
typer
wrapped
type
double
pi
double
valueOf
Convert
wrapped
type
primitif
type
int
k
Integer
valueOf
intValue
Convert
primitif
type
string
typer
string
piStr
string
valueOf
Convert
primitif
type
string
typer
double
pi
new
doubler
string
s
pi
toString
Autoboxing
unboxing
depuis
le
plat
former
voir
chapitre
le
valeur
de
type
primitif
être
en
cas
de
besoin
implicitement
convertir
en
l
objet
de
le
classe
envelopper
correspondant
autoboxing
et
réciproquement
unboxing
auparavant
le
conversion
devoir
être
explicite
OPERATEURS
et
expression
java
posséder
un
nombre
considérable
d
opérateur
arithmétique
et
logique
le
expression
être
constituer
d
opérande
et
d
opérateur
le
opérande
pouvoir
être
de
différent
nature
variable
constant
appel
de
fonction
dans
un
expression
tout
le
opérateur
devoir
être
explicite
quand
plus
d
un
opérateur
apparaître
dans
un
seul
expression
alors
du
règle
de
précédence
être
utiliser
pour
déterminer
l
ordre
d
application
S
il
être
nécessaire
d
altérer
l
ordre
normal
d
évaluation
du
parenthèse
pouvoir
être
utiliser
à
précédences
égal
l
expression
être
évaluer
de
gauche
à
droit
recommandation
de
style
utiliser
le
parenthèse
pour
isoler
le
sous
expression
afin
d
éviter
le
problème
de
précédence
d
opérateur
et
rendre
le
code
plus
lisible
pour
tout
programmeur
insérer
un
espace
avant
et
après
chaque
opérateur
autre
que
le
point
opérateur
et
expression
arithmétique
quelque
opérateur
arithmétique
binaire
opérateur
fonction
champ
d
application
division
réel
réel
division
entier
entier
modulo
reste
de
le
division
entier
entier
nota
en
java
comme
dans
le
plupart
du
langage
de
programmation
à
B
être
toujours
du
signe
de
à
alors
qu
en
mathématique
le
reste
de
le
division
euclidien
être
toujours
positif
le
quotient
se
calculer
en
conséquence
pour
java
à
B
sgn
à
sgn
B
à
B
à
B
à
à
B
B
en
java
en
math
noter
en
java
l
opérateur
modulo
pouvoir
aussi
être
appliquer
sur
du
réel
le
résultat
être
alors
le
reste
obtenir
après
soustraction
de
l
opérande
droit
à
l
opérande
gauche
un
nombre
entier
de
fois
toutefois
à
cause
du
arrondir
de
calcul
le
résultat
n
être
pas
toujours
celui
qu
on
attendre
par
exemple
donner
et
non
Grande
prudence
donc
avec
ce
opérateur
appliquer
sur
du
réel
quelque
opérateur
arithmétique
unaire
opérateur
fonction
champ
d
application
incrémentation
entier
ou
réel
décrémentation
entier
ou
réel
opérateur
et
expression
booléen
quelque
opérateur
booléen
binaire
opérateur
fonction
et
logique
conditionnel
ou
logique
conditionnel
ou
logique
exclusif
avec
ce
opérateur
l
évaluation
de
l
expression
logique
s
arrêter
dès
qu
il
être
possible
d
inférer
le
valeur
final
de
l
expression
tout
le
opérande
ne
être
donc
pas
nécessairement
évaluer
opérateur
booléen
unaire
opérateur
fonction
négation
logique
opérateur
relationnel
quelque
opérateur
relationnel
ou
de
comparaison
opérateur
fonction
égal
à
non
égal
à
inférieur
à
inférieur
ou
égal
à
supérieur
à
supérieur
ou
égal
à
METHODES
définition
et
appel
d
un
méthode
ordinaire
définition
d
un
procédure
définition
d
un
fonction
public
void
procName
formalParams
public
fctlype
fctName
formalParams
declaration
declaration
statements
statements
return
expression
appel
d
un
procédure
appel
d
un
fonction
appel
interne
à
le
classe
de
définition
appel
interne
à
le
classe
de
définition
procName
actualParams
variable
fctName
actualParams
appel
externe
à
le
classe
de
définition
appel
externe
à
le
classe
de
définition
méthode
d
instance
méthode
d
instance
objectName
procName
actualParams
variable
objectName
fctName
actualParams
méthode
de
classe
méthode
de
classe
ClassName
procName
actualParams
variable
ClassName
fctName
actualParams
déclaration
d
un
paramètre
formel
spécification
d
un
paramètre
effectif
formal
parameter
actual
parameter
paramètre
d
entrer
type
primitif
ou
objet
paramètre
d
entrer
type
primitif
ou
objet
parameterType
parameterName
expression
paramètre
de
sortie
de
type
primitif
paramètre
de
sortie
de
type
primitif
impossible
utiliser
un
fonction
ou
passer
impossible
un
paramètre
de
type
objet
paramètre
de
sortie
de
type
objet
paramètre
de
sortie
de
type
objet
parameterType
parameterName
objectName
le
paramètre
spécifier
dans
le
définition
d
un
méthode
être
appeler
paramètre
formel
il
devoir
être
précéder
de
leur
type
le
paramètre
apparaître
dans
le
forme
d
appel
être
appeler
paramètre
effectif
S
il
y
avoir
plusieurs
paramètre
il
être
séparer
par
du
virgule
tout
le
paramètre
de
type
primitif
être
passer
par
valeur
c
être
un
copie
de
ce
argument
qui
être
transmettre
à
le
méthode
elle
ne
disposer
pas
de
l
original
tout
le
paramètre
de
type
objet
être
passer
par
référence
c
être
un
référence
i
e
un
pointeur
qui
être
transmettre
à
le
méthode
et
pas
l
objet
lui
même
par
défaut
le
méthode
être
du
méthode
d
instance
elle
être
invoquer
sur
un
instance
de
classe
il
exister
aussi
du
méthode
de
classe
qui
pouvoir
être
invoquer
sans
instance
on
spécifier
un
méthode
de
classe
en
le
déclarant
static
le
signature
d
un
méthode
être
constituer
de
son
nom
et
de
le
liste
du
type
du
paramètre
dans
un
même
classe
deux
méthode
ne
pouvoir
pas
avoir
le
même
signature
elle
pouvoir
toutefois
porter
le
même
nom
cela
s
appeler
le
surcharge
dans
tout
méthode
d
instance
ou
constructeur
on
pouvoir
référer
à
l
objet
courir
i
e
l
objet
dont
le
méthode
ou
le
constructeur
être
en
cours
d
appel
par
le
mot
clé
this
on
pouvoir
ainsi
référer
à
tout
membre
champ
ou
méthode
de
l
objet
courir
par
un
identifier
de
le
forme
this
membre
constructeur
un
constructeur
être
un
méthode
particulier
dont
l
invocation
être
explicitement
associer
à
le
création
d
un
instance
de
classe
et
dont
le
finalité
être
d
initialiser
proprement
l
état
de
ce
objet
lors
de
son
création
le
définition
d
un
constructeur
suivre
du
règle
syntaxique
spécifique
le
nom
d
un
constructeur
être
obligatoirement
le
nom
de
son
classe
d
appartenance
l
en
tête
de
son
définition
ne
lui
spécifier
pas
de
type
syntaxe
de
définition
d
un
constructeur
d
un
classe
de
nom
ClassName
public
ClassName
formalParameters
Fields
initializations
un
constructeur
être
typiquement
utiliser
en
association
avec
l
opérateur
new
exemple
de
syntaxe
d
utilisation
d
un
constructeur
d
un
classe
de
nom
ClassName
ClassName
object
new
ClassName
actualParameters
un
même
classe
pouvoir
comporter
plusieurs
constructeur
sous
condition
qu
il
n
avoir
pas
le
même
paramètre
dans
ce
cas
pour
éviter
de
le
duplication
de
code
un
constructeur
pouvoir
en
appeler
un
autre
avec
le
syntaxe
this
actualParameters
exemple
public
class
point
private
int
x
y
public
pointe
int
x
int
y
à
first
constructor
this
x
X
this
y
y
public
point
à
second
constructor
this
à
noter
que
ce
définition
adopter
par
java
ne
prendre
pas
en
considération
le
type
de
le
méthode
en
ce
sens
le
signature
correspondre
à
ce
qui
être
parfois
appeler
par
ailleurs
profil
de
le
méthode
méthode
main
le
méthode
main
comme
en
C
ou
C
être
le
point
d
entrée
d
un
application
au
lancement
de
l
exécution
syntaxe
public
static
void
main
string
args
L
argument
args
capter
le
éventuel
argument
de
le
ligne
de
commande
le
premier
argument
de
le
ligne
de
commande
être
stocker
dans
args
et
non
dans
args
comme
en
C
C
exemple
considérer
un
application
dont
le
classe
principal
celui
contenir
le
méthode
main
s
appeler
game
supposer
que
l
application
dépendre
de
deux
paramètre
dont
le
valeur
devoir
être
fournir
au
lancement
supposer
également
que
le
fichier
source
game
java
avoir
être
compiler
en
un
fichier
exécutable
game
class
le
lancement
de
l
application
par
le
commande
java
game
Daniel
attribuer
à
args
le
tableau
Daniel
instruction
sur
le
plan
syntaxique
le
instruction
statements
pouvoir
être
regrouper
en
grand
catégorie
le
instruction
simple
instruction
d
affectation
instruction
d
entrer
sortir
instruction
d
appel
à
un
procédure
un
instruction
simple
se
terminer
toujours
par
un
point
virguler
un
point
virguler
seul
définir
un
instruction
vide
le
instruction
de
contrôle
instruction
de
sélection
instruction
de
boucle
instruction
de
rupture
de
séquence
le
bloc
d
instruction
un
bloc
d
instruction
aussi
appeler
instruction
composer
être
un
séquence
d
instruction
enserrer
entre
accolade
le
bloc
définir
un
instruction
vide
instruction
d
affectation
syntaxe
variable
expression
le
symbole
être
l
opérateur
d
affectation
le
valeur
de
l
expression
situer
en
partie
droit
être
affecter
à
le
variable
spécifier
en
partie
gauche
le
type
de
l
expression
devoir
s
apparier
au
type
de
le
variable
L
impact
physique
être
différent
selon
que
l
expression
être
de
type
primitif
ou
objet
voir
chapitre
instruction
de
contrôle
instruction
de
sélection
if
else
premier
forme
Deuxième
former
if
expression
if
expression
statements
statements
else
statements
exemple
if
field
size
System
out
println
The
field
is
empty
exemple
if
number
reportError
else
processNumber
number
exemple
if
n
handleNegative
else
if
n
handlezero
else
handlePositive
switch
premier
forme
Deuxième
former
switch
expression
switch
expression
caser
valoir
caser
valoir
statements
falls
through
break
caser
valoir
caser
valoir
falls
through
statements
caser
valoir
break
statements
default
break
statements
caser
valoir
break
falls
through
caser
valoir
statements
break
default
statements
break
un
instruction
switch
pouvoir
avoir
un
nombre
quelconque
de
label
caser
L
instruction
break
mettre
fin
à
l
instruction
switch
à
défaut
d
instruction
break
l
exécution
se
poursuivre
sur
le
instruction
du
label
suivant
le
deuxième
forme
ci
dessus
exploiter
ce
comportement
chacun
du
trois
premier
valeur
conduire
à
l
exécution
de
le
partie
statements
associer
à
value
chacun
du
deux
valeur
suivant
conduire
à
l
exécution
de
le
partie
statements
associer
à
value
le
clause
default
être
optionnel
mais
recommander
à
défaut
il
se
pouvoir
qu
aucun
cas
ne
conduire
à
un
exécution
exemple
switch
day
caser
dayString
Monday
break
caser
dayString
Tuesday
break
caser
dayString
Wednesday
break
caser
dayString
Thursday
break
caser
dayString
Friday
break
caser
dayString
Saturday
break
caser
dayString
Sunday
break
default
error
break
exemple
switch
winterMonth
caser
numberOfDays
break
caser
falls
through
caser
numberOfDays
break
caser
if
isLeapYear
numberOfDays
else
numberOfDays
break
default
error
break
instruction
de
boucle
while
le
boucle
while
exécuter
un
bloc
d
instruction
aussi
longtemps
que
le
valeur
d
un
expression
donner
être
true
L
expression
être
tester
avant
chaque
exécution
du
corps
de
boucle
si
bien
que
le
corps
de
boucle
pouvoir
être
exécuter
fois
syntaxe
while
expression
statements
exemple
int
i
while
text
size
System
out
printl
text
get
i
exemple
while
iter
hasNext
processObject
iter
next
do
while
le
boucle
do
while
le
exécuter
un
bloc
d
instruction
aussi
longtemps
que
le
valeur
d
un
expression
donner
être
true
L
expression
être
tester
après
chaque
exécution
du
corps
de
boucle
si
bien
que
le
corps
de
boucle
être
toujours
exécuter
au
moins
fois
syntaxe
do
statements
while
expression
exemple
do
input
readInput
if
input
null
System
out
printl
Try
again
while
input
null
for
le
boucle
for
s
exécuter
aussi
longtemps
qu
un
condition
s
évaluer
à
true
avant
que
le
boucle
ne
démarrer
un
instruction
d
initialisation
être
exécuter
exactement
fois
le
condition
être
évaluer
avant
chaque
exécution
du
corps
de
boucle
comme
pour
un
boucle
while
un
instruction
de
mise
à
jour
du
variable
être
exécuter
après
chaque
exécution
du
corps
de
boucle
syntaxe
for
initialization
condition
update
statements
exemple
for
int
text
size
i
System
out
println
text
get
foreach
depuis
le
plat
former
voir
chapitre
java
offrir
un
boucle
for
améliorer
pour
parcourir
le
élément
d
un
tableau
ou
d
un
collection
se
reporter
au
section
respectif
syntaxe
for
each
element
of
the
collection
process
element
for
TypeOfElements
element
collectionOfElements
process
element
instruction
d
entrer
sortir
java
offrir
un
nombre
considérable
de
fonction
et
procédure
d
entrer
sortir
tant
en
mode
texte
que
graphique
nous
nous
limiter
dans
ce
section
au
principal
instruction
d
entrer
sortir
en
mode
texte
pour
du
entrée
sortir
en
mode
graphique
voir
chapitre
le
méthode
d
entrer
sortie
primaire
appartenir
au
classe
du
paquetage
java
io
depuis
le
plat
former
voir
chapitre
le
classe
scanner
du
paquetage
java
uti
offrir
du
fonctionnalité
de
base
pour
lire
facilement
du
donnée
depuis
tout
flux
d
entrer
du
sortie
formater
comme
en
C
en
complément
le
classe
java
util
Formatter
permettre
de
spécifier
du
format
d
entrée
ou
de
sorti
notion
de
flux
le
flux
ou
flot
stream
en
anglais
généraliser
le
notion
de
périphérique
d
entrer
sortir
un
flux
pouvoir
être
voir
comme
un
interface
intelligent
unidirectionnel
relier
le
machine
java
et
le
périphérique
et
qui
permettre
en
lecture
aussi
bien
qu
en
écriture
de
s
affranchir
du
spécificité
du
périphérique
concerner
réaliser
un
entrée
sorti
consister
ainsi
à
créer
un
flux
du
type
approprier
sauf
s
il
exister
déjà
ou
être
prédéfinir
System
in
System
out
ou
System
err
lire
ou
écrire
selon
le
cas
dans
ce
flux
et
souvent
dans
le
cas
d
un
lecture
convertir
le
donnée
lire
dans
le
type
cibler
souhaiter
pour
un
premier
approcher
nous
nous
limiter
à
du
flux
à
accès
séquentiel
entrée
sortir
terminal
le
solution
suivant
ne
s
affranchir
pas
du
erreur
de
saisie
pour
gérer
ce
type
d
erreur
se
reporter
au
chapitre
excepter
chapitre
affichage
écran
syntaxe
d
un
affichage
écran
en
mode
texte
System
out
print
string
System
out
println
string
System
out
print
primitiveTypeExpression
System
out
println
primitiveTypeExpresstion
affichage
formater
depuis
le
plat
forme
java
offrir
également
un
méthode
printf
permettre
du
sortie
formater
comme
en
C
voir
classe
java
util
Formatter
pour
le
spécification
du
format
exemple
System
out
println
count
count
System
out
printf
s
d
n
user
total
fonctionnement
du
printf
et
code
de
formatage
un
printf
réclamer
un
chaîne
de
caractère
en
premier
paramètre
ce
chaîne
pouvoir
être
suivre
de
n
variable
n
C
être
ce
chaîne
qui
pouvoir
contenir
du
code
de
formatage
qui
être
imprimer
un
code
de
formatage
commencer
par
le
caractère
à
chaque
fois
qu
un
code
de
formatage
être
rencontrer
printf
imprimer
le
variable
suivant
dans
le
liste
de
son
paramètre
principal
code
de
formatage
commander
l
affichage
d
un
valeur
de
type
c
caractère
d
entier
e
réel
en
notation
avec
exposant
f
réel
s
chaîne
de
caractère
le
code
de
formatage
pouvoir
inclure
un
spécification
de
format
du
champ
d
affichage
exemple
de
code
de
formatage
champ
d
affichage
spécifier
pour
le
paramètre
du
type
considérer
d
champ
de
caractère
d
champ
de
caractère
avec
justification
à
gauche
f
champ
de
caractère
dont
à
droit
de
le
virgule
lecture
clavier
exemple
scanner
input
new
scanner
System
in
string
s
input
next
read
avoir
string
avoir
word
string
s
input
nextLine
read
the
rest
of
the
line
int
n
input
nextInt
read
an
integer
doubler
r
input
nextDouble
read
avoir
double
input
clore
entrée
sortir
fichier
opérer
sur
un
fichier
consister
à
créer
un
flux
approprier
au
opération
souhaiter
lire
ou
écrire
dans
le
fichier
fermer
le
fichier
le
solution
suivant
ne
s
affranchir
pas
du
erreur
d
entrer
sortir
pour
gérer
ce
type
d
erreur
se
reporter
au
chapitre
excepter
chapitre
Ecriture
fichier
depuis
le
plat
forme
java
offrir
également
un
méthode
printf
permettre
du
sortie
formater
comme
en
C
voir
classe
java
util
Formatter
pour
le
spécification
du
format
exemple
d
écriture
dans
un
fichier
texte
PrintWriter
out
new
PrintWriter
outputFileName
for
int
i
i
i
out
printf
c
d
t
i
out
clore
lecture
fichier
exemple
de
lecture
d
un
fichier
texte
mot
à
mot
scanner
in
new
scanner
new
filer
inputFileName
string
s
while
in
hasNext
s
in
next
read
avoir
string
avoir
word
System
out
println
s
in
clore
contexte
particulier
cas
ouverture
en
lecture
d
un
fichier
texte
stocker
dans
le
fichier
jar
exécuter
import
java
io
InputStream
import
java
util
scanner
ClassLoader
cl
ClassLoader
getSystemClassLoader
InputStream
is
cl
getResourceAsStream
inputFileName
scanner
in
new
scanner
is
cas
ouverture
en
lecture
d
un
fichier
texte
distant
identifier
par
un
URL
import
java
net
URL
import
java
util
scanner
URL
url
new
URL
http
www
esiee
fr
inputFileName
scanner
in
new
scanner
url
openStream
noter
solution
non
applicable
depuis
un
applet
en
outre
bien
s
assurer
que
tout
le
condition
d
accessibilité
au
fichier
être
lever
pas
d
interdiction
par
le
parer
feu
local
notamment
cas
ouverture
d
un
nouveau
page
html
depuis
un
applet
de
même
répertoire
import
java
net
URL
import
javax
swing
JApplet
URL
url
new
URL
getDocumentBase
myFile
html
getAppletContext
showDocument
url
blank
repaint
lecture
d
un
chaîne
de
caractère
formater
il
être
fréquent
d
avoir
à
lire
un
chaîne
de
caractère
dont
on
connaître
le
format
quel
que
être
le
flux
d
entrée
terminal
ou
fichier
depuis
le
plat
former
le
classe
scanner
du
paquetage
java
util
offrir
du
fonctionnalité
très
pratique
exemple
de
lecture
d
un
chaîne
de
caractère
formater
string
str
XXX
XXX
yellow
XXX
blue
XXX
scanner
in
new
scanner
str
useDelimiter
s
XXX
s
System
out
println
in
nextInt
System
out
println
in
nextInt
System
out
println
in
next
System
out
println
in
next
in
clore
Will
display
yellow
blue
HERITAGE
notion
d
héritage
L
héritage
être
un
technique
qui
offrir
de
nombreux
avantage
éviter
le
duplication
de
code
permettre
le
réutilisation
de
code
dans
un
autre
contexte
faciliter
le
maintenance
du
programme
faciliter
l
extension
d
application
existant
L
héritage
inheritance
être
un
relation
être
un
non
pas
avoir
un
qui
permettre
de
définir
un
classe
comme
l
extension
d
un
autre
exemple
classer
astre
être
un
être
un
classe
Etoile
classer
planète
un
étoile
être
un
astre
un
planète
être
un
astre
le
classe
Etoile
étendre
le
classe
astre
le
classe
Etoile
hériter
de
le
classe
astre
un
super
classe
être
un
classe
qui
être
étendre
par
d
autre
classe
un
sous
classe
être
un
classe
qui
étendre
hériter
de
un
autre
classe
elle
hériter
l
état
et
le
comportement
de
tout
son
ancêtre
mais
pouvoir
aussi
la
redéfinir
le
classe
qui
être
lier
par
du
relation
d
héritage
former
un
hiérarchie
d
héritage
exemple
de
hiérarchie
d
héritage
astre
Etoile
planeter
Exoplanète
planeter
solaire
Pégaside
chtonien
tellurique
habitable
le
constructeur
d
un
sous
classe
devoir
toujours
invoquer
le
constructeur
de
le
super
classe
en
premier
instruction
à
défaut
java
essayer
d
insérer
un
appel
automatique
le
forme
d
appel
être
le
suivant
super
actualParameters
tout
classe
sans
super
classe
explicite
avoir
Object
comme
super
classe
comme
pour
le
hiérarchie
de
classe
le
type
former
un
hiérarchie
de
type
le
type
définir
par
le
définition
d
un
sous
classe
être
un
sous
type
du
type
définir
par
le
super
classe
exemple
Etoile
être
un
sous
type
du
type
astre
un
variable
pouvoir
contenir
un
objet
du
type
déclarer
de
le
variable
ou
un
objet
de
tout
sous
type
de
ce
type
déclarer
exemple
astre
al
new
astre
correct
astre
avoir
new
Etoile
correct
transtypage
ascendre
astre
avoir
new
Planete
correct
transtypage
ascendre
Etoile
el
new
astre
erreur
Etoile
e
Etoile
avoir
correct
un
transtypage
descendre
devoir
être
expliciter
un
objet
d
un
sous
type
pouvoir
être
utiliser
partout
où
un
objet
d
un
super
type
être
attendre
ceci
s
appeler
le
substitution
java
ne
permettre
pas
l
héritage
multiple
un
sous
classe
ne
pouvoir
hériter
directement
que
d
un
seul
super
classe
Qu
hériter
un
sous
classe
un
sous
classe
hériter
de
tout
le
membre
de
son
super
classe
qui
être
accessible
sauf
si
ce
membre
attribut
ou
méthode
être
redéfinir
dans
le
sous
classe
un
sous
classe
hériter
de
son
super
classe
le
membre
déclarer
public
ou
protected
le
membre
déclarer
sans
modificateur
d
accès
si
le
sous
classe
être
dans
le
même
paquetage
que
le
super
classe
un
sous
classe
n
hériter
pas
de
son
super
classe
le
membre
qui
être
redéfinir
dans
le
sous
classe
le
constructeur
attention
au
choix
du
identificateurs
dans
le
sous
classe
ce
choix
pouvoir
involontairement
masquer
un
membre
de
le
super
classe
C
être
particulièrement
le
cas
pour
le
attribut
un
attribut
avoir
le
même
nom
qu
un
attribut
de
son
super
classe
masque
l
attribut
de
le
super
classe
même
s
il
être
de
type
différent
redéfinir
un
méthode
pour
redéfinir
un
méthode
dans
un
sous
classe
il
falloir
qu
elle
avoir
le
même
signature
et
le
même
type
de
retour
que
le
méthode
de
le
super
classe
le
méthode
redéfinir
pouvoir
autoriser
un
accès
plus
large
mais
pas
moins
ex
un
méthode
déclarer
protected
dans
le
super
classe
pouvoir
être
redéfinir
public
dans
le
sous
classe
mais
pas
private
L
exemple
typique
être
le
méthode
toString
de
le
classe
Object
appliquer
à
un
objet
elle
produire
un
chaîne
de
caractère
former
du
nom
de
son
classe
et
de
son
code
de
hachage
mais
ce
méthode
pouvoir
être
redéfinir
dans
tout
classe
si
le
méthode
redéfinir
dans
le
sous
classe
avoir
simplement
besoin
d
ajouter
quelque
fonctionnalité
complémentaire
à
celui
de
le
méthode
de
le
super
classe
il
n
être
pas
besoin
de
le
réécrire
complètement
car
elle
pouvoir
appeler
le
méthode
de
le
super
classe
par
super
superclassMethodName
actualParameters
quelque
règle
un
méthode
d
instance
ne
pouvoir
pas
redéfinir
un
méthode
de
classe
et
réciproquement
un
méthode
d
instance
d
un
sous
classe
avoir
le
même
signature
et
type
qu
un
méthode
d
instance
dans
le
super
classe
redéfinir
le
méthode
de
le
super
classe
le
version
de
le
méthode
invoquer
sur
un
instance
de
le
sous
classe
type
dynamique
car
liaison
dynamique
du
méthode
d
instance
être
celui
de
le
sous
classe
un
méthode
de
classe
d
un
sous
classe
avoir
le
même
signature
et
type
qu
un
méthode
de
classe
dans
le
super
classe
masquer
le
méthode
de
le
super
classe
le
version
de
le
méthode
invoquer
dépendre
de
si
elle
être
appeler
sur
le
super
classe
ou
sur
le
sous
classe
car
liaison
statique
du
méthode
de
classe
un
sous
classe
ne
pouvoir
pas
redéfinir
le
méthode
déclarer
final
de
son
super
classe
un
sous
classe
devoir
redéfinir
le
méthode
déclarer
abstract
dans
le
super
classe
à
moins
que
le
sous
classe
soit
elle
même
déclarer
abstract
depuis
le
plat
former
voir
chapitre
il
être
conseiller
d
utiliser
l
annotation
ou
méta
donner
Override
pour
marquer
tout
méthode
qui
être
supposer
redéfinir
un
méthode
hériter
d
un
classe
parent
cela
permettre
au
compilateur
de
signaler
immédiatement
un
erreur
si
jamais
le
redéfinition
n
être
pas
avérer
à
cause
par
exemple
d
un
faute
de
frappe
dans
le
nom
de
le
méthode
en
outre
en
signaler
le
méthode
redéfinir
l
annotation
Override
permettre
d
accroître
le
lisibilité
du
code
le
covariance
du
type
de
retour
être
autoriser
un
méthode
d
un
sous
classe
pouvoir
retourner
un
objet
dont
le
type
être
un
sous
classe
du
type
retourner
par
le
méthode
de
même
signature
dans
le
super
classe
ce
caractéristique
supprimer
le
besoin
de
test
et
de
conversion
de
type
excessif
exemple
Override
public
string
toString
exemple
soit
un
classe
point
posséder
deux
attribut
x
et
y
être
un
classe
ColoredPoint
hériter
de
point
et
posséder
un
attribut
spécifique
color
où
et
comment
écrire
le
méthode
equals
sans
duplication
de
code
in
the
class
point
Override
public
boolean
equals
Object
o
if
o
null
return
false
caser
null
if
this
o
return
true
reflexivity
if
this
getClass
o
getClass
return
false
symmetry
Now
this
and
o
having
the
same
class
comparer
the
fields
point
p
point
o
return
this
x
p
x
this
y
p
y
in
the
class
ColoredPoint
extending
point
Override
public
boolean
equals
Object
o
Verify
if
this
and
o
haver
the
same
class
and
if
their
super
fields
are
equal
if
super
equals
o
return
false
Now
comparer
the
specific
fields
ColoredPoint
cp
ColoredPoint
o
return
this
color
equals
cp
color
exemple
public
class
MotherClass
public
void
normal
System
out
println
the
normal
method
in
MotherClass
public
static
void
hide
System
out
println
the
hide
method
in
MotherClass
public
void
override
System
out
println
the
override
method
in
MotherClass
end
MotherClass
public
class
DaughterClass
extends
MotherClass
Override
public
static
void
hide
System
out
println
the
hide
method
in
DaughterClass
Override
public
void
override
System
out
println
the
override
method
in
DaughterClass
public
static
void
main
string
args
DaughterClass
o
new
DaughterClass
MotherClass
o
o
o
normal
call
super
normal
o
normal
call
super
normal
o
hide
call
this
hide
o
hide
call
super
hide
liaison
statique
o
override
call
this
override
o
override
call
this
override
Tiaison
dynamique
end
DaughterClass
le
méthode
main
afficher
the
normal
method
in
MotherClass
the
normal
method
in
MotherClass
the
hide
method
in
DaugterClass
the
hide
method
in
MotherClass
the
override
method
in
DaugterClass
the
override
method
in
DaugterClass
type
statique
dynamique
liaison
statique
dynamique
ce
section
reprendre
et
formaliser
quelque
un
du
important
concept
introduire
dans
le
section
précédent
type
statique
dynamique
Transtypage
le
type
statique
d
un
objet
être
le
type
spécifier
par
son
déclaration
C
être
le
type
déclarer
C
être
le
type
à
le
compilation
le
type
dynamique
d
un
objet
être
le
type
i
e
le
classe
d
appartenance
de
l
objet
instancié
C
être
le
type
constater
C
être
le
type
effectif
à
l
exécution
le
type
dynamique
d
un
objet
être
toujours
soit
son
type
statique
soit
un
sous
type
de
son
type
statique
sauf
exception
devoir
au
transtypage
exemple
être
un
classe
à
et
un
classe
B
sous
classe
de
à
considérer
le
code
suivre
à
avoir
if
myClass
booleanRandom
avoir
new
à
else
avoir
new
B
transtypage
ascendre
implicite
le
type
statique
de
avoir
être
à
le
type
dynamique
de
avoir
être
à
ou
B
mais
ne
pouvoir
être
constater
qu
après
que
le
condition
avoir
être
évaluer
le
transtypage
casting
appliquer
à
un
référence
n
être
que
le
possibilité
d
avoir
un
vue
spécifique
de
l
objet
pointé
il
ne
changer
en
rien
le
type
de
l
objet
sous
jacent
qui
garder
bien
évidemment
tout
au
long
de
son
vie
le
type
avec
lequel
il
avoir
être
créer
L
opération
de
transtypage
être
purement
syntaxique
et
ne
faire
qu
indiquer
au
compilateur
le
point
de
vue
depuis
lequel
il
devoir
voir
l
objet
le
transtypage
vers
un
sur
type
être
dire
ascendre
le
transtypage
ascendre
être
implicite
le
transtypage
vers
un
sous
type
être
dire
descendre
un
transtypage
descendre
devoir
être
expliciter
il
permettre
de
forcer
le
compilation
mais
ne
garantir
pas
nécessairement
l
absence
d
erreur
d
exécution
un
transtypage
n
être
garantir
correct
que
s
il
respecter
le
règle
suivant
être
T
et
T
deux
type
définir
soit
o
un
objet
de
type
dynamique
T
considérer
le
déclaration
T
obj
T
o
ce
transtypage
être
garantir
possible
tant
à
le
compilation
qu
à
l
exécution
si
et
seulement
si
T
être
un
sous
type
de
T
et
T
un
sous
type
de
T
L
opérateur
instanceof
permettre
de
tester
si
un
objet
être
d
un
type
dynamique
donner
ou
de
tout
sous
type
de
ce
type
donner
il
pouvoir
donc
permettre
vérifier
le
compatibilité
du
type
avant
d
opérer
un
transtypage
exemple
supposer
définir
public
class
Shape
D
public
class
Circle
extends
Shape
D
public
class
triangle
extends
Shape
D
public
class
date
le
déclaration
suivant
génèreraient
un
erreur
pour
incompatibilité
de
type
Shape
D
s
Shape
D
new
dater
erreur
de
compilation
Circle
c
new
Shape
D
erreur
de
compilation
Circle
c
Circle
new
Shape
D
erreur
d
exécution
triangle
t
new
triangle
Circle
c
Circle
t
erreur
d
exécution
le
déclaration
suivant
être
sain
Shape
D
s
new
Circle
Circle
c
Circle
s
Shape
D
s
if
obj
instanceof
Shape
D
s
Shaped
D
obj
liaison
statique
dynamique
considérer
l
invocation
o
m
où
o
être
un
objet
de
type
statique
T
et
de
type
dynamique
T
et
m
un
message
attribut
ou
méthode
envoyer
à
o
si
le
message
m
exécuter
être
celui
dont
le
code
être
accessible
depuis
le
classe
T
alors
le
liaison
de
l
objet
au
message
être
dire
statique
liaison
à
le
compilation
sinon
elle
être
dire
dynamique
liaison
à
l
exécution
en
java
le
liaison
d
un
objet
avec
son
variable
d
instance
être
statique
le
liaison
d
un
objet
avec
son
méthode
être
dynamique
sauf
si
méthode
static
ou
final
exemple
public
class
à
public
boolean
m
à
avoir
return
true
public
boolean
m
à
avoir
return
true
public
class
B
extends
à
public
boolean
m
à
avoir
return
false
public
boolean
m
à
avoir
return
false
public
static
void
main
string
args
à
avoir
new
B
System
out
prinln
avoir
m
avoir
System
out
prinln
avoir
m
avoir
System
out
prinln
avoir
m
avoir
problème
le
méthode
main
afficher
false
true
pourquoi
le
type
statique
de
avoir
être
à
et
son
type
dynamique
B
C
être
donc
le
m
de
B
qui
être
exécuter
quant
à
le
méthode
m
elle
n
être
pas
définir
dans
B
mais
dans
son
super
classe
à
B
hériter
donc
normalement
de
m
et
m
être
exécuter
le
dernier
instruction
System
out
prinln
avoir
m
avoir
provoquer
un
erreur
à
le
compilation
pourquoi
parce
que
le
compilateur
ne
connaître
que
le
type
statique
i
e
le
type
déclarer
le
méthode
m
n
être
pas
définir
dans
le
classe
à
ni
dans
un
de
son
super
classe
le
compilateur
ne
trouver
pas
le
définition
de
m
bien
que
dans
B
et
générer
un
erreur
le
solution
être
le
transtypage
descendre
préalable
de
avoir
System
out
prinln
B
avoir
m
avoir
ce
transtypage
être
correct
car
à
posséder
déjà
par
création
tout
le
attribut
d
un
instance
de
B
polymorphisme
un
même
appel
de
méthode
pouvoir
invoquer
du
méthode
différent
car
le
liaison
être
réaliser
dynamiquement
i
e
à
l
exécution
et
non
à
le
compilation
l
identification
du
type
de
l
objet
associer
à
l
appel
être
dynamique
exemple
de
polymorphisme
d
héritage
public
class
Shape
public
void
draw
System
out
println
this
draw
public
class
Circle
extends
Shape
Override
public
string
toString
return
circle
public
class
square
extends
Shape
Override
public
string
toString
return
square
public
class
Picture
public
static
void
main
string
args
Vector
Shape
v
new
Vector
Shape
v
add
new
Circle
v
add
new
square
for
Shape
s
v
System
out
prinln
s
draw
polymorphism
le
méthode
main
afficher
circle
draw
square
draw
classe
et
méthode
particulier
un
classe
déclarer
final
ne
pouvoir
pas
être
sous
classer
un
méthode
déclarer
final
ne
pouvoir
pas
être
redéfinir
dans
un
sous
classe
un
classe
déclarer
abstract
représenter
un
concept
abstrait
elle
ne
pouvoir
pas
être
instanciée
et
ne
pouvoir
être
que
sous
classer
un
méthode
déclarer
abstract
être
un
méthode
dont
le
corps
n
être
pas
spécifier
un
classe
abstrait
pouvoir
contenir
du
méthode
non
abstraire
mais
tout
classe
contenir
un
méthode
abstrait
devoir
être
déclarer
abstract
si
un
sous
classe
n
implémentir
pas
tout
le
méthode
abstraire
de
son
super
classe
elle
devoir
être
déclarer
abstract
interface
un
interface
au
sens
du
langage
java
cf
section
être
un
protocole
de
comportement
qui
pouvoir
être
implanter
par
tout
classe
un
interface
être
en
dehors
de
le
hiérarchie
du
classe
un
interface
se
différencier
principalement
d
un
classe
abstraire
par
ce
caractéristique
aucun
méthode
concret
par
opposition
à
abstrait
ne
pouvoir
être
définir
dans
un
interface
un
classe
pouvoir
implémenter
plusieurs
interface
tout
comme
on
pouvoir
construire
un
hiérarchie
de
classe
on
pouvoir
construire
un
hiérarchie
d
interface
mais
alors
qu
un
classe
ne
pouvoir
étendre
directement
qu
un
seul
super
classe
pas
d
héritage
multiple
un
interface
pouvoir
étendre
directement
plusieurs
super
interface
héritage
multiple
possible
exemple
public
interface
List
E
extends
collection
E
exemple
public
interface
Predator
boolean
chasePrey
Prey
p
public
interface
Prey
boolean
isChasedBy
Predator
p
public
interface
Venomous
public
interface
VenomousPredator
extends
Predator
Venomous
public
class
pet
public
class
Cat
extends
pet
implements
Predator
public
class
Frog
implements
Predator
Prey
excepter
un
exception
être
un
objet
fournir
du
information
relatif
à
un
défaillance
du
programme
un
exception
être
générer
dans
chacun
du
situation
suivant
condition
d
exécution
anormal
comme
par
exemple
tentative
de
division
par
zéro
mémoire
insuffisant
exécution
d
un
instruction
throw
le
paquetage
java
lang
définir
nombre
de
classe
d
exception
qui
couvrir
le
cas
le
plus
courant
exception
contrôler
et
non
contrôler
tout
exception
être
un
instance
de
le
classe
Throwable
ou
un
de
son
sous
classe
Object
Throwable
Error
exception
MyCheckedException
RunTimeException
MyUncheckedException
java
diviser
le
classe
d
exception
en
deux
catégorie
le
exception
non
contrôler
unchecked
ce
exception
concerner
le
cas
imprévu
c
être
à
dire
le
situation
où
il
ne
devoir
pas
y
avoir
de
défaillance
en
fonctionnement
normal
elle
concerner
du
situation
qui
pouvoir
être
raisonnablement
éviter
exemple
un
indice
de
tableau
hors
limite
ce
exception
indiquer
généralement
un
erreur
de
programme
elle
avoir
normalement
vocation
à
conduire
à
un
arrêt
immédiat
et
définitif
du
programme
le
exception
contrôler
checked
ce
exception
concerner
le
cas
prévu
c
être
à
dire
le
situation
où
le
programmeur
devoir
s
attendre
à
ce
qu
un
opération
pouvoir
échouer
elle
concerner
du
situation
de
défaillance
qui
être
au
delà
du
contrôle
du
programmeur
exemple
un
disque
devenir
plein
rendre
impossible
un
écriture
dans
un
fichier
ce
exception
avoir
normalement
vocation
à
être
récupérer
pour
permettre
au
programme
de
se
poursuivre
normalement
le
gestion
d
un
exception
contrôler
imposer
l
utilisation
de
le
clause
throws
et
de
l
instruction
de
contrôle
try
catch
le
exception
non
contrôler
être
le
classe
RuntimeException
Error
et
leur
sous
classe
tout
le
autre
classe
et
sous
classe
être
du
exception
contrôler
classe
d
exception
standard
le
hiérarchie
Error
le
classe
Error
être
le
super
classe
d
un
hiérarchie
d
erreur
grave
non
contrôler
ce
hiérarchie
être
habituellement
réserver
au
erreur
d
exécution
système
exemple
de
sous
classe
prédéfinie
NoSuchMethodError
StackOverFlowError
OutOfMemoryError
IllegalAccessError
le
hiérarchie
exception
le
classe
exception
être
le
super
classe
d
un
hiérarchie
d
excepter
exclusion
faire
de
le
sous
hiérarchie
RuntimeException
contrôler
exemple
de
sous
classe
d
excepter
contrôler
prédéfinie
DataFormatException
IOException
EOFException
FileNotFoundException
le
hiérarchie
RuntimeException
le
classe
RuntimeException
être
le
super
classe
d
un
hiérarchie
d
excepter
non
contrôler
exemple
de
sous
classe
prédéfinie
ArithmeticException
IllegalArgumentException
NumberFormatException
IllegalStateException
IndexOutOfBoundsException
NullPointerException
lancement
d
un
exception
L
instruction
throw
permettre
de
lancer
un
exception
il
être
recommander
de
ne
l
appliquer
qu
à
du
exception
non
contrôler
syntaxe
throw
new
ClassOfException
diagnostic
message
to
print
exemple
if
key
null
throw
new
NullPointerException
null
key
found
in
method
x
exemple
if
key
throw
new
IllegalArgumentException
empty
key
received
exemple
dans
un
constructeur
if
this
name
length
throw
new
IllegalStateException
name
must
be
provided
object
creation
aborted
exemple
L
opération
remove
de
l
interface
Iterator
être
spécifier
optionnel
c
être
à
dire
que
son
implémentation
pouvoir
être
dans
ce
cas
public
void
remove
throw
new
UnsupportedOperationException
capturer
d
un
exception
le
capture
d
un
exception
n
être
obligatoire
que
pour
le
exception
que
l
on
vouloir
contrôler
dans
le
cas
du
exception
contrôler
le
compilateur
renforcer
son
contrôle
à
le
fois
dans
le
méthode
qui
lancer
un
tel
exception
et
dans
l
appeler
de
ce
méthode
clause
throws
un
clause
throws
être
un
déclaration
ajouter
à
l
en
tête
d
un
méthode
susceptible
de
lever
un
exception
contrôler
elle
déclarer
le
exception
contrôler
à
prendre
en
compte
dans
le
cadre
de
ce
méthode
ceci
être
nécessaire
pour
que
le
compilateur
pouvoir
savoir
quel
excepter
contrôler
par
convention
le
exception
non
contrôler
ne
devoir
pas
être
inclus
dans
un
clause
throws
syntaxe
throws
ExceptionClass
ExceptionClass
exemple
public
void
saveToFile
string
filename
throws
IOException
instruction
try
catch
L
instruction
try
catch
permettre
de
capturer
un
exception
générer
par
l
appel
d
un
méthode
quand
un
exception
être
générer
le
contrôle
être
transférer
du
code
qui
avoir
générer
l
exception
à
le
clause
catch
qui
avoir
capturer
l
exception
le
clause
catch
devoir
avoir
un
seul
paramètre
formel
le
type
de
ce
paramètre
devoir
être
le
classe
Throwable
ou
un
de
son
sous
classe
un
instruction
try
pouvoir
contenir
plusieurs
bloc
catch
dans
ce
cas
l
exception
le
plus
général
devoir
être
traiter
en
dernier
syntaxe
try
protect
one
or
more
statement
here
catch
ExceptionClass
e
report
and
recover
from
the
exception
here
finally
in
fin
in
any
caser
always
execute
these
statements
le
bloc
finally
être
optionnel
mais
il
permettre
souvent
d
éviter
le
duplication
de
code
exemple
à
partir
de
le
plat
forme
Read
avoir
double
from
the
standard
input
stream
scanner
input
new
scanner
System
in
double
x
try
x
input
nextDouble
catch
InputMismatchException
e
System
err
println
Error
doubler
waited
e
input
clore
exemple
à
partir
de
le
plat
forme
Create
avoir
copy
of
avoir
text
file
scanner
in
null
PrintWriter
out
null
try
in
new
scanner
new
filer
inputFileName
out
new
PrintWriter
outputFileName
while
in
hasNext
out
println
in
nextLine
catch
exception
e
System
err
println
Error
in
reading
writing
file
e
finally
if
in
null
in
clore
if
out
null
out
clore
exemple
à
partir
de
le
plat
forme
Read
and
print
avoir
text
file
of
double
scanner
in
null
try
in
new
scanner
new
filer
inputFileName
while
in
hasNext
System
out
println
double
parseDouble
in
next
catch
FileNotFoundException
e
System
err
println
Unable
to
open
the
input
file
e
catch
NumberFormatException
e
System
err
println
à
token
is
not
avoir
double
e
catch
exception
e
System
err
println
Problem
in
reading
the
filer
e
finally
if
in
null
try
in
clore
catch
exception
e
System
err
println
Error
in
closing
the
file
e
définir
un
nouveau
classe
d
exception
un
du
principal
raison
conduire
à
le
définition
d
un
nouveau
classe
d
exception
être
le
besoin
d
inclure
du
information
complémentaire
dans
l
objet
exception
afin
de
permettre
le
diagnostic
et
le
récupération
de
l
erreur
tout
nouveau
classe
d
exception
être
définir
comme
sous
classe
d
un
classe
d
exception
existant
de
le
hiérarchie
exception
exemple
public
class
WrongValueException
extends
exception
private
string
key
public
WrongValueException
string
key
this
key
key
public
string
getKey
return
key
public
string
toString
return
Wrong
valoir
key
found
annexe
programmation
graphique
référence
base
de
swing
et
exemple
de
programmation
d
interface
graphique
java
sun
com
doc
books
tutorial
uiswing
mini
index
html
gestion
du
événement
et
exemple
de
programmation
java
sun
com
doc
books
tutorial
uiswing
event
api
html
swing
architecturer
Overview
java
sun
com
products
jfc
isc
article
architecturer
ce
chapitre
introduire
à
le
programmation
graphique
avec
le
bibliothèque
javax
swing
swing
il
exister
deux
grand
paquetage
d
utilitaire
java
pour
réaliser
du
interface
graphique
AWT
abstract
Window
Toolkit
le
paquetage
primitif
le
composant
de
ce
paquetage
s
importer
par
import
java
awt
swing
le
plus
récent
et
le
plus
évoluer
construire
sur
AWT
c
être
le
paquetage
recommander
le
composant
de
ce
paquetage
s
importer
par
import
javax
swing
le
deux
paquetage
swing
le
plus
communément
utiliser
être
javax
swing
javax
swing
event
le
classe
de
javax
swing
le
plus
courant
être
JFrame
JPanel
JLabel
JTextField
JButton
JOPtionPane
exemple
de
saisi
affichage
dans
un
boîte
de
dialogue
import
javax
swing
JOptionPane
user
method
showInputDialog
to
prompt
for
some
input
string
inputValue
JOptionPane
showInputDialog
valoir
user
method
showMessageDialog
to
display
avoir
message
JOptionPane
showMessageDialog
null
à
message
conteneur
et
composant
tout
objet
graphique
être
composer
de
différent
objet
du
conteneur
container
et
du
composant
atomique
ce
différent
constituant
être
organiser
en
un
hiérarchie
d
inclusion
principal
catégorie
de
conteneur
et
composant
le
conteneur
de
plus
haut
niveau
pour
qu
un
objet
graphique
pouvoir
être
afficher
à
l
écran
le
hiérarchie
de
son
constituant
devoir
nécessairement
avoir
pour
racine
l
un
du
trois
conteneur
suivant
Frame
classer
JFrame
conteneur
le
plus
général
il
fournir
le
fenêtre
principal
dans
lequel
le
autre
composant
swing
pouvoir
se
dessiner
Dialog
classer
JDialog
plus
limiter
qu
un
Frame
il
fournir
un
fenêtre
de
dialogue
le
classe
J
ptionPane
permettre
de
créer
du
fenêtre
de
dialogue
simple
et
standard
le
classe
JDialog
permettre
de
créer
du
fenêtre
de
dialogue
personnaliser
Applet
classer
JApplet
spécialiser
pour
du
interface
web
il
fournir
un
fenêtre
qui
être
afficher
par
un
navigateur
web
le
conteneur
intermédiaire
notamment
panel
classe
JPanel
simplifier
le
positionnement
du
objet
graphique
atomique
tout
conteneur
de
haut
niveau
contenir
un
conteneur
intermédiaire
spécial
appeler
ContentPane
C
être
le
conteneur
intermédiaire
principal
il
contenir
typiquement
un
ou
plusieurs
panel
le
composant
atomique
par
exemple
Button
classer
JButton
label
classe
JLabel
Text
field
classe
JTextField
sauf
pour
le
conteneur
de
plus
haut
niveau
tout
le
composant
conteneur
intermédiaire
ou
composer
atomique
qui
commencer
par
J
hériter
de
le
classe
JComponent
pour
ajouter
un
objet
à
un
conteneur
on
utiliser
un
méthode
add
ce
méthode
prendre
en
général
un
deuxième
argument
qui
spécifier
le
mise
en
page
exemple
import
javax
swing
frame
new
JFrame
paner
new
JPanel
button
new
JButton
label
new
JLabel
paner
add
button
paner
add
abel
frame
getContentPane
add
paner
BorderLayout
CENTER
frame
pack
sizes
at
or
above
preferred
sizes
frame
setVisible
true
l
objet
frame
ainsi
créer
avoir
pour
hiérarchie
JFrame
ContentPane
JPanel
JButton
JLabel
exemple
import
javax
swing
JApplet
public
class
AppletExample
extends
JApplet
public
void
init
JPanel
paner
new
JPanel
paner
add
new
JLabel
hello
World
this
setContentPane
paner
gestion
de
le
mise
en
page
le
mise
en
page
layout
consister
à
fixer
le
taille
et
le
position
du
composant
tout
conteneur
posséder
un
gestionnaire
de
mise
en
page
par
défaut
S
il
ne
convenir
pas
on
pouvoir
le
remplacer
le
composant
pouvoir
solliciter
un
taille
et
un
alignement
donné
mais
in
fin
c
être
le
gestionnaire
de
mise
en
page
du
conteneur
qui
conserver
le
décision
final
il
exister
gestionnaire
de
mise
en
page
BorderLayout
gestionnaire
de
mise
en
page
par
défaut
pour
tout
ContentPane
définir
zone
de
placement
NORTH
SOUTH
EAST
WEST
CENTER
FlowLayout
gestionnaire
de
mise
en
page
par
défaut
pour
tout
JPanel
positionner
simplement
le
composant
de
gauche
à
droit
passer
à
un
nouveau
ligne
si
nécessaire
BoxLayout
gestionnaire
de
mise
en
page
très
flexible
positionner
le
composant
sur
un
seul
ligne
ou
colonne
en
respecter
le
attente
de
composant
en
matière
de
taille
maximal
et
d
alignement
GridLayout
gestionnaire
de
mise
en
page
très
simple
créer
un
ensemble
de
composant
de
même
taille
et
le
affiche
dans
le
nombre
de
ligne
et
de
colonne
spécifier
GridBagLayout
gestionnaire
de
mise
en
page
le
plus
sophistiqué
et
le
plus
flexible
aligner
le
composant
en
le
placer
dans
un
grille
de
cellule
permettre
à
certain
de
s
étendre
sur
plusieurs
cellule
le
largeur
du
rangée
et
le
hauteur
du
colonne
respectivement
pouvoir
être
différent
CardLayout
gestionnaire
de
mise
en
page
pour
usage
spécial
permettre
d
implémenter
un
zone
qui
contenir
différent
composant
à
différent
moment
utiliser
en
combinaison
avec
d
autre
gestionnaire
de
mise
en
page
exemple
de
changement
du
gestionnaire
de
mise
en
page
par
défaut
JPanel
paner
new
JPanel
paner
setLayout
new
BorderLayout
le
taille
et
l
alignement
d
un
composant
pouvoir
être
spécifier
par
le
méthode
suivant
setMinimumSize
setPreferredSize
setMaximumSize
setAlignmentX
setAlignmentY
gestion
du
événement
notion
d
événement
à
chaque
fois
que
l
utilisateur
agir
sur
le
clavier
ou
le
souris
un
événement
survenir
un
objet
événement
être
générer
un
objet
événement
être
un
objet
contenir
du
information
sur
le
source
et
le
nature
de
l
événement
survenir
swing
offrir
du
interface
au
sens
java
appeler
écouteur
d
événement
event
listeners
qui
permettre
de
capter
le
événement
de
façon
sélectif
afin
de
pouvoir
la
traiter
event
source
event
object
event
listener
event
listener
event
listener
exemple
d
événement
type
de
Listener
clic
d
un
bouton
graphique
ou
enfoncement
de
le
touche
return
ActionListener
lors
d
un
saisie
dans
un
champ
texte
fermeture
d
un
fenêtre
WindowListener
graphique
frame
clic
de
le
souris
lors
du
passage
du
curseur
sur
un
composant
MouseListener
graphique
afin
de
faciliter
le
travail
du
programmeur
swing
associer
généralement
à
chaque
interface
Listener
un
classe
adaptateur
adapter
si
ce
adaptateur
exister
c
être
avec
lui
que
l
on
travailler
exemple
d
interface
Listener
classer
adapter
associer
ActionListener
none
WindowListener
WindowAdapter
MouseListener
MouseAdapter
KeyListener
KeyAdapter
réaliser
un
gestionnaire
d
événement
réaliser
un
gestionnaire
d
événement
event
handler
requérir
trois
élément
de
code
déclarer
un
classe
gestionnaire
d
événement
ce
classe
devoir
implémenter
un
interface
Listener
ou
étendre
un
classe
adapter
exemple
import
java
awt
event
public
class
MyClass
implements
ActionListener
définir
dans
ce
classe
gestionnaire
d
événement
le
méthode
de
l
interface
Listener
exemple
public
void
actionPerformed
ActionEvent
e
définir
un
instance
de
ce
classe
gestionnaire
d
événement
et
l
enregistrer
sur
le
s
composant
s
concerner
s
exemple
someComponent
addActionListener
instanceOfMyClass
le
type
ActionListener
permettre
de
définir
le
gestionnaire
d
événement
le
plus
simple
et
le
plus
commun
Lorsqu
un
événement
de
ce
type
être
générer
clic
d
un
bouton
graphique
ou
enfoncement
de
le
touche
return
lors
d
un
saisie
dans
un
champ
texte
un
message
actionPerformed
être
envoyer
à
tout
le
écouteur
d
événement
qui
être
enregistrer
sur
le
composant
concerner
un
classe
gestionnaire
d
événement
être
généralement
implanter
sous
le
forme
d
un
classe
interner
inner
class
au
sein
d
un
classe
graphique
exemple
Ecriture
d
un
MouseListener
public
class
myClass
extends
JPanel
someObject
addMouseListener
new
MyAdapter
class
MyAdapter
extends
MouseAdapter
public
void
mouseClicked
MouseEvent
e
typiquement
un
classe
gestionnaire
d
événement
être
implanter
sous
le
forme
d
un
classe
interne
anonyme
exemple
solution
équivalent
à
celui
de
l
exemple
précédent
Ecriture
d
un
MouseListener
public
class
myClass
extends
JPanel
someObject
addMouseListener
new
MouseAdapter
public
void
mouseClicked
MouseEvent
e
affichage
fermeture
d
un
fenêtre
graphique
L
affichage
le
masquage
d
un
fenêtre
graphique
de
type
JFrame
se
commander
par
le
méthode
setVisible
quand
l
utilisateur
ferme
un
fenêtre
graphique
de
type
JFrame
ce
fenêtre
n
être
en
fait
par
défaut
que
masquer
Quoiqu
invisible
l
objet
graphique
exister
toujours
et
le
programme
pouvoir
à
nouveau
le
rendre
visible
si
l
on
désirer
un
comportement
différent
il
être
nécessaire
soit
d
enregistrer
sur
ce
objet
graphique
un
gestionnaire
d
événement
de
type
WindowListener
et
de
capter
le
message
windowClosing
soit
de
spécifier
le
comportement
par
défaut
en
utiliser
le
méthode
setDefaultCloseOperation
le
comportement
être
indiquer
en
argument
par
un
constant
définir
dans
l
interface
WindowConstant
exemple
d
argument
disposer
on
clore
architecture
du
composant
swing
objectif
du
application
facilement
adaptable
L
architecture
du
composant
swing
être
baser
sur
un
adaptation
de
le
très
renommé
architecture
MVC
modeler
vue
contrôleur
voir
section
dans
le
communauté
swing
elle
être
appeler
architecture
à
modèle
séparable
le
partie
modèle
d
un
composant
swing
parti
qui
représenter
le
donnée
de
l
application
être
traiter
comme
un
élément
séparer
tout
comme
le
préconiser
le
conception
MVC
mais
swing
fusionner
le
parti
vue
qui
prendre
en
charge
le
représentation
visuel
du
donnée
et
contrôleur
qui
traiter
le
entrée
utilisateur
de
chaque
composant
en
un
seul
objet
interface
utilisateur
user
interface
Object
il
être
en
général
considérer
comme
un
bon
pratique
de
centrer
l
architecture
d
un
application
autour
de
son
donnée
plutôt
qu
autour
de
son
interface
utilisateur
pour
supporter
ce
paradigme
swing
définir
un
interface
modeler
séparer
pour
chaque
composant
ce
séparation
fournir
au
programme
d
application
le
possibilité
de
connecter
facilement
du
composant
swing
dans
son
implémentation
modeler
propre
le
table
suivant
montrer
le
interface
modeler
offrir
par
le
composant
swing
Component
Model
interface
Model
typer
JButton
ButtonModel
gui
JToggleButton
ButtonModel
gui
dater
JCheckBox
ButtonModel
gui
dater
JRadioButton
ButtonModel
gui
dater
JMenu
ButtonModel
gui
JMenuItem
ButtonModel
gui
JCheckBoxMenuItem
ButtonModel
gui
dater
JRadioButtonMenuItem
ButtonModel
gui
dater
JComboBox
ComboBoxModel
dater
JProgressBar
BoundedRangeModel
gui
dater
JScrollBar
BoundedRangeModel
gui
dater
Slider
BoundedRangeModel
gui
dater
Component
Model
interface
Model
typer
JTabbedPane
SingleSelectionModel
gui
JList
ListModel
dater
JList
ListSelectionModel
gui
JTable
TableModel
dater
JTable
TableColumnModel
gui
JTree
TreeModel
dater
JTree
TreeSelectionModel
gui
JEditorPane
document
dater
JTextPane
document
dater
JTextArea
document
dater
JTextField
document
dater
JPasswordField
document
dater
le
interface
modeler
fournir
par
swing
relever
de
deux
grand
catégorie
le
type
Etat
de
l
interface
graphique
gui
qui
définir
le
statut
visuel
du
commande
de
l
interface
graphique
et
le
type
donné
d
application
dater
qui
représenter
du
donnée
quantifiable
avoir
sens
pour
l
application
certain
modèle
relever
de
type
partagé
gui
dater
il
être
recommander
d
utiliser
le
catégorie
donné
d
application
dater
du
modèle
de
swing
car
il
renforcer
grandement
l
adaptabilité
et
le
modularité
du
application
sur
le
long
terme
un
paradigme
être
un
vision
du
monde
qui
reposer
sur
un
modèle
Applets
java
permettre
de
créer
deux
type
de
programme
du
application
qui
s
exécuter
directement
sous
le
contrôle
de
le
machine
virtuel
java
du
appliquette
ou
applette
en
anglais
applet
destiner
à
être
exécuter
par
un
navigateur
Web
pour
réaliser
un
applette
le
minimum
consister
à
créer
un
sous
classe
de
le
classe
JApplet
voir
section
y
créer
le
méthode
init
qui
être
lancer
par
le
navigateur
référencer
ce
classe
dans
le
balise
APPLET
coder
d
un
fichier
HTML
syntaxe
import
javax
swing
JApplet
public
class
AppletClassName
extends
JApplet
Fields
public
void
init
syntaxe
APPLET
coder
AppletClassName
class
WIDTH
anint
HEIGHT
anint
APPLET
annexer
THREADS
référence
programmation
concurrent
processus
threads
java
sun
com
doc
books
tutorial
essential
concurrency
procthread
html
le
threads
permettre
de
programmer
du
tâche
qui
à
l
intérieur
d
un
même
programme
s
exécuter
concurremment
ce
être
du
processus
léger
le
tâche
à
exécuter
par
un
thread
devoir
être
implémenter
dans
un
méthode
run
il
exister
deux
façon
de
fournir
le
méthode
run
définir
un
sous
classe
de
le
classe
Thread
et
y
redéfinir
le
méthode
run
définir
un
classe
qui
implémente
l
interface
Runnable
et
y
définir
le
méthode
run
créer
un
thread
par
extension
de
le
classe
Thread
exemple
Example
of
defining
avoir
thread
avoir
extending
Thread
public
class
SimpleThread
extends
Thread
public
SimpleThread
string
threadName
super
threadName
The
task
of
this
thread
is
to
print
times
its
name
at
avoir
random
rater
public
void
run
for
int
i
i
i
System
out
println
i
getName
try
sleep
long
math
random
catch
InterruptedException
e
System
out
println
DONE
getName
end
class
SimpleThread
Example
of
running
two
threads
concurrently
Jamaica
and
Fiji
Will
be
printed
randomly
times
public
static
void
main
string
args
new
SimpleThread
Jamaica
start
new
SimpleThread
Fiji
start
créer
un
thread
par
implémentation
de
l
interface
Runnable
ce
façon
de
faire
s
imposer
lorsque
le
classe
à
créer
devoir
sous
classer
un
classe
quelconque
le
cas
typique
être
un
Applet
parce
que
java
ne
supporter
pas
l
héritage
multiple
exemple
Example
of
defining
avoir
thread
avoir
implementing
Runnable
public
class
SimpleThread
implements
Runnable
string
threadName
public
SimpleThread
string
threadName
this
threadName
threadName
The
task
of
this
thread
is
to
print
times
its
name
at
avoir
random
rater
public
void
run
for
int
i
i
i
System
out
println
i
threadName
try
Thread
sleep
long
math
random
catch
InterruptedException
e
System
out
println
DONE
threadName
end
class
SimpleThread
Example
of
running
two
threads
concurrently
Jamaica
and
Fiji
Will
be
printed
randomly
times
public
static
void
main
string
args
new
Thread
new
SimpleThread
Jamaica
start
new
Thread
new
SimpleThread
Fiji
start
synchronisation
et
communication
entre
threads
section
critique
et
synchronisation
dans
un
programme
du
segment
de
code
qui
accéder
à
un
même
donner
depuis
du
threads
concurrent
être
appeler
section
critique
lorsque
deux
threads
concurrent
invoquer
du
méthode
qui
opérer
sur
un
même
donner
partagé
méthode
critique
il
être
nécessaire
que
java
pouvoir
synchroniser
ce
méthode
afin
de
garantir
un
accès
sûr
à
l
information
à
ce
fin
chacun
de
ce
méthode
devoir
être
déclarer
avec
le
modificateur
synchronized
à
l
exécution
l
accès
à
le
donnée
partagé
être
ainsi
automatiquement
verrouiller
tant
qu
elle
être
utiliser
par
un
méthode
critique
exemple
get
et
pouvoir
être
supposer
deux
méthode
critique
de
l
objet
partager
public
synchronized
int
get
public
synchronized
void
pouvoir
int
valoir
communication
entre
threads
pour
que
deux
threads
processus
indépendant
qui
se
dérouler
de
façon
asynchrone
pouvoir
se
communiquer
du
donnée
il
être
nécessaire
qu
il
savoir
se
synchroniser
autour
d
un
sas
de
communication
le
thread
émetteur
de
le
donnée
être
appeler
producteur
le
thread
destinataire
de
le
donnée
être
appeler
consommateur
le
thread
producteur
de
le
donnée
devoir
être
capable
de
attendre
que
l
espace
de
stockage
du
sas
de
communication
être
libre
puis
y
déposer
un
nouveau
donner
puis
informer
le
threads
consommateur
de
le
mise
à
disposition
de
le
donnée
de
façon
symétrique
le
thread
consommateur
de
le
donnée
devoir
être
capable
de
attendre
que
le
donnée
être
mettre
à
disposition
dans
l
espace
de
stockage
du
sas
de
communication
puis
lire
ce
donnée
puis
informer
le
threads
producteur
de
le
disponibilité
du
sas
de
communication
ou
lui
accuser
réception
C
être
au
sas
de
communication
qu
on
confier
le
charge
de
ce
synchronisation
le
mise
en
attente
se
réaliser
par
le
méthode
wait
le
notification
au
autre
threads
par
le
méthode
notify
ou
notifyAll
ce
méthode
être
tout
deux
définir
dans
le
classe
Object
exemple
de
classe
définir
un
sas
de
communication
d
un
seul
élément
de
type
entier
attribut
content
y
noter
en
particulier
le
sécurisation
apporter
par
l
usage
d
un
while
et
non
d
un
if
afin
de
prévenir
de
faux
réveil
éventuel
public
class
CubbyHole
private
int
content
private
boolean
available
false
public
synchronized
int
get
called
by
consumer
while
available
false
try
wait
wait
for
Producer
to
pouvoir
valoir
catch
InterruptedException
e
available
false
notifyAll
return
content
public
synchronized
void
pouvoir
int
x
called
by
Producer
while
available
true
try
wait
wait
for
consumer
to
get
valoir
catch
InterruptedException
e
content
x
available
true
notifyAll
annexe
conception
et
DEVELOPPEMENT
en
java
référence
architecturer
modèle
voir
contrôleur
java
sun
com
blueprints
guidelines
designing
enterpriser
application
e
app
arch
app
arch
html
développement
de
test
unitaire
avec
le
cadre
d
application
JUnit
junit
sourceforge
net
doc
cookbook
cookbook
htm
JavaBeans
java
sun
com
products
javabeans
java
sun
com
doc
books
tutorial
javabeans
index
html
design
pattern
ce
section
aller
au
delà
du
langage
java
pour
aborder
quelque
aspect
de
le
conception
et
du
développement
de
programme
java
conseil
général
pour
un
bon
conception
du
classe
rechercher
un
couplage
faible
le
couplage
décrire
l
interconnectivité
entre
le
classe
le
couplage
être
faible
quand
chaque
classe
être
largement
indépendant
du
autre
et
communiquer
avec
elle
via
un
interface
petit
et
bien
définir
l
interface
d
un
classe
être
le
partie
visible
publique
de
ce
classe
elle
se
définir
typiquement
par
le
liste
du
membre
attribut
constructeur
méthode
non
priver
associer
à
leur
commentaire
de
documentation
rechercher
un
COHESION
fort
le
cohésion
décrire
l
adéquation
entre
un
unité
de
code
et
un
entité
ou
tâche
logique
le
cohésion
être
fort
quand
chaque
unité
de
code
méthode
classer
module
être
responsable
d
un
entité
ou
tâcher
très
bien
définir
utiliser
au
maximum
L
encapsulation
L
encapsulation
être
un
technique
de
base
pour
réduire
le
couplage
elle
contribuer
à
séparer
le
quoi
et
le
comment
le
vue
et
l
implémentation
le
définition
et
l
utilisation
principe
de
base
rendre
le
attribut
priver
et
utiliser
du
méthode
d
accès
DECOUPLER
ENTREES
traitement
et
sortir
voir
en
particulier
section
adopter
un
conception
DIRIGEE
par
le
responsabilité
L
attribution
du
bon
responsabilité
au
bon
classe
être
l
un
du
problème
le
plus
délicat
de
le
conception
orienter
objet
le
programmation
diriger
par
le
responsabilité
être
un
processus
de
conception
de
classe
par
attribution
de
responsabilité
bien
définir
à
chaque
classe
ce
approche
pouvoir
être
utiliser
pour
déterminer
quel
classer
devoir
implémenter
tel
fonctionnalité
un
conception
diriger
par
le
responsabilité
contribuer
à
réduire
le
couplage
EVITER
le
duplication
de
code
Eviter
qu
un
même
segment
de
code
ne
se
retrouver
plus
d
un
fois
dans
un
application
utiliser
L
HERITAGE
à
bon
escient
L
héritage
être
un
relation
être
un
pas
un
relation
avoir
un
dans
un
hiérarchie
d
héritage
le
objet
devoir
avoir
un
relation
être
un
avec
leur
classe
de
base
afin
que
l
héritage
de
tout
le
attribut
propriété
et
méthode
de
le
classe
de
base
garder
sens
même
si
le
sous
classe
en
spécialiser
ou
la
compléter
le
objet
ne
relever
pas
strictement
d
un
relation
être
un
devoir
se
traduire
par
du
classe
ou
interface
sans
relation
d
héritage
entre
elle
limiter
le
taille
et
COMPLEXITE
ne
pas
mettre
trop
de
chose
dans
un
méthode
un
méthode
être
trop
longue
si
elle
faire
plus
d
un
tâche
logique
ne
pas
tout
mettre
dans
un
seul
classe
un
classe
être
trop
complexe
si
elle
représenter
plus
d
un
entité
logique
chercher
à
faciliter
du
changement
localiser
réaliser
du
changement
dans
un
classe
ne
devoir
avoir
qu
un
minimum
d
impact
sur
le
autre
classe
le
localisation
du
changement
être
l
un
du
but
recherché
d
un
bon
conception
de
classe
elle
être
le
produit
d
un
couplage
faible
et
d
un
cohésion
fort
architecturer
d
un
application
interactif
le
modèle
MVC
L
architecture
modeler
voir
contrôleur
Model
View
Controller
MVC
être
un
modèle
d
architecture
logicielle
recommander
et
largement
utiliser
pour
le
conception
d
application
interactif
ce
modèle
viser
à
minimiser
le
degré
de
couplage
entre
le
objet
de
l
application
en
découpler
structurellement
entrer
traitement
et
sortir
le
point
essentiel
consister
à
séparer
le
objet
relever
de
l
interface
utilisateur
du
objet
métier
afin
de
pouvoir
la
faire
évoluer
indépendamment
et
la
réutiliser
MVC
organiser
un
application
interactif
en
trois
grand
composante
le
modèle
le
vue
et
le
contrôleur
et
découpler
leur
responsabilité
respectif
le
MODELE
encapsuler
le
fonctionnalité
et
le
donné
cœur
de
l
application
il
être
indépendant
de
représentation
de
sortie
spécifique
ou
d
un
comportement
d
entrer
il
avoir
à
charge
le
représentation
interne
du
donnée
de
l
application
et
le
logique
de
gestion
de
ce
donnée
il
notifier
à
le
composant
vue
le
changement
de
donnée
et
lui
permettre
de
l
interroger
sur
son
état
il
fournir
au
contrôleur
le
possibilité
d
accéder
à
certain
fonctionnalité
applicatives
encapsuler
dans
le
modèle
le
vue
afficher
le
information
à
l
utilisateur
elle
récupérer
du
modèle
le
donnée
à
présenter
à
l
utilisateur
spécifier
leur
présentation
externe
et
mettre
à
jour
l
information
afficher
elle
relayer
aussi
au
contrôleur
le
entrée
utilisateur
et
l
autoriser
à
sélectionner
le
vue
le
séparation
du
modèle
d
un
part
et
de
le
vue
et
du
contrôleur
d
autre
part
permettre
du
vue
multiple
d
un
même
modèle
quand
il
y
avoir
plusieurs
vue
du
modèle
chaque
vue
avoir
alors
un
contrôleur
associer
le
CONTROLEUR
gérer
le
entrée
utilisateur
il
recevoir
le
entrée
généralement
sous
forme
d
événement
encoder
un
mouvement
de
le
souris
l
activation
d
un
bouton
ou
un
entrée
clavier
ou
bien
s
il
s
agir
d
un
application
web
le
requête
HTTP
GET
et
POST
le
événement
être
traduire
en
requête
de
service
pour
le
modèle
ou
le
vue
un
application
avoir
typiquement
un
contrôleur
pour
chaque
ensemble
de
fonctionnalité
apparenter
un
application
pouvoir
avoir
un
contrôleur
séparer
par
type
de
client
si
le
interaction
utilisateur
varier
selon
le
type
de
client
L
utilisateur
interagir
avec
le
système
uniquement
au
travers
du
contrôleur
L
ensemble
vue
contrôleur
composer
l
interface
utilisateur
modèle
interrogation
d
état
notification
de
changement
changement
d
état
voir
requêter
utilisateur
sélection
de
vue
contrôleur
invocation
de
méthode
Evènements
en
pratique
ce
schéma
de
principe
laisser
place
à
un
grand
variété
d
implémentations
possible
un
du
difficulté
pour
un
implémentation
idéal
en
java
résider
notamment
dans
le
fait
que
le
composant
graphique
swing
fusionner
le
partie
voir
et
contrôleur
cf
section
pour
le
petit
programme
tout
particulièrement
le
vue
et
le
contrôleur
être
souvent
combiner
mais
dans
tout
le
cas
le
modèle
devoir
être
séparer
exemple
d
implémentation
d
un
architecture
MVC
import
java
util
observable
import
java
util
observer
import
javax
swing
JApplet
import
javax
swing
JPanel
import
java
awt
event
ActionListener
import
java
awt
event
ActionEvent
public
class
Controller
extends
JApplet
implements
ActionListener
private
View
view
private
Model
model
public
void
init
model
new
Mode
view
new
View
model
this
model
addObserver
view
this
setContentPane
view
public
void
actionPerformed
ActionEvent
e
process
the
event
public
class
View
extends
JPanel
implements
observer
private
Model
model
Declare
here
the
JPanel
components
public
View
Model
m
ActionListener
listener
model
m
makeContentPane
listener
public
void
update
observable
o
Object
arg
Automatically
called
when
observer
is
notified
Update
the
view
public
void
makeContentPane
ActionListener
listener
Create
and
initialize
the
JPanel
components
and
when
need
be
attach
them
the
event
listener
Define
the
layout
public
class
Model
extends
observable
Wherever
the
valoir
of
an
attribute
interesting
the
View
is
changed
insert
these
two
statements
setChanged
notifyObservers
or
notifyObservers
arg
chercher
à
découpler
le
traitement
du
entrée
sortir
être
classique
en
programmation
dans
ce
esprit
on
pouvoir
noter
en
particulier
que
le
modèle
MVC
avoir
un
certain
similitude
avec
le
classique
architecture
trois
tiers
three
tiers
du
système
distribuer
un
architecture
trois
tiers
être
un
architecture
logicielle
client
serveur
dans
lequel
l
interface
utilisateur
le
logique
de
traitement
et
le
donnée
être
trois
module
indépendant
l
interface
utilisateur
être
stocker
dans
le
client
le
gros
de
le
logique
de
l
application
être
stocker
dans
le
ou
le
serveur
d
application
et
le
donnée
être
stocker
dans
un
serveur
de
base
de
donné
exemple
pour
du
application
web
professionnel
reposer
sur
un
solution
java
EE
voir
chapitre
le
modèle
être
assurer
par
du
EJB
et
ou
du
JavaBeans
le
contrôleur
être
assurer
par
du
servlets
et
le
vue
par
du
JSP
glossaire
en
chapitre
test
unitaire
définition
le
test
être
un
activité
qui
consister
à
déterminer
si
un
segment
de
code
méthode
classe
ou
programme
produire
bien
le
résultat
attendre
on
définir
classiquement
trois
niveau
de
test
qui
être
mettre
en
œuvre
successivement
le
test
unitaire
unir
testing
il
s
agir
de
tester
chaque
composante
individuel
méthode
classe
de
l
application
le
test
d
intégration
integration
testing
il
s
agir
de
tester
du
groupe
de
classe
en
interrelation
puis
tout
l
application
dans
son
ensemble
le
test
appliqué
suivre
généralement
un
plan
de
test
i
e
un
approche
systématique
et
méthodique
le
test
système
system
testing
il
s
agir
de
tester
l
application
intégrer
dans
son
environnement
d
utilisation
complet
ce
test
entrer
dans
le
catégorie
du
test
boîte
noir
et
en
tant
que
tel
ne
devoir
pas
nécessiter
de
connaissance
de
le
conception
interne
du
code
ou
de
son
logique
le
considération
suivant
se
limiter
essentiellement
au
test
unitaire
un
cas
de
test
être
un
ensemble
de
condition
ou
variable
à
partir
duquel
un
testeur
déterminer
si
un
exigence
requis
être
complètement
ou
partiellement
satisfaire
un
cas
de
test
être
caractériser
par
un
entrée
connaître
pré
condition
et
un
sortie
attendre
post
condition
de
nombreux
cas
de
test
pouvoir
être
nécessaire
pour
vérifier
un
exigence
donné
on
distinguer
généralement
deux
type
de
cas
de
test
le
cas
de
test
positif
qui
consister
à
tester
du
cas
censé
faire
réussir
le
fonctionnalité
ce
test
devoir
nous
convaincre
que
l
élément
de
code
tester
fonctionner
bien
comme
espérer
le
cas
de
test
négatif
qui
consister
à
tester
du
cas
censé
mettre
en
échec
le
fonctionnalité
ce
être
tout
le
situation
de
valeur
hors
limite
d
erreur
exemple
entrer
un
valeur
hors
plage
lire
un
ensemble
vide
dans
de
tel
cas
nous
devoir
nous
attendre
à
ce
que
le
programme
traite
l
erreur
d
un
façon
contrôler
et
approprier
le
simple
correction
du
erreur
détecter
par
un
test
devoir
systématiquement
améliorer
le
qualité
du
programme
malheureusement
l
expérience
montrer
que
tout
changement
dans
le
programme
pouvoir
introduire
de
façon
inattendu
d
autre
erreur
en
particulier
du
erreur
de
régression
regression
bugs
un
erreur
de
régression
survenir
quand
un
fonctionnalité
qui
fonctionner
précédemment
ne
fonctionner
plus
suite
à
un
modification
du
programme
un
méthode
courant
de
test
de
non
régression
non
regression
testing
consister
à
réexécuter
le
test
réaliser
antérieurement
et
voir
si
du
défaut
apparaître
voire
réapparaître
le
test
devant
donc
être
appliquer
non
pas
un
seul
fois
mais
à
chaque
modification
du
logiciel
il
être
souhaitable
de
disposer
d
un
batterie
de
test
programmer
afin
de
permettre
un
automatisation
du
test
il
s
agir
donc
de
programmer
du
cas
de
test
pour
chaque
méthode
non
trivial
en
veiller
à
ce
que
chaque
cas
de
test
être
bien
séparer
du
autre
JUnit
JUnit
développer
par
le
communauté
open
source
offrir
un
cadre
d
application
framework
pour
le
programmation
de
test
de
régression
il
être
utiliser
pour
implémenter
du
test
unitaire
en
java
le
classe
TestCase
permettre
de
définir
un
cas
de
test
le
classe
Assert
fournir
un
ensemble
de
méthode
faciliter
le
gestion
du
erreur
détecter
le
classe
TestSuite
permettre
d
exécuter
un
suite
de
test
le
classe
TestRunner
être
un
outil
d
exploitation
permettre
de
définir
un
suite
de
test
à
exécuter
et
d
afficher
le
résultat
exemple
de
cas
de
test
à
test
caser
for
the
class
MyClass
import
junit
framework
public
class
TestMyClass
extends
TestCase
The
test
need
to
run
against
the
background
of
à
known
set
of
objects
This
set
of
objects
is
called
à
test
fixture
Define
here
an
instance
variable
for
each
part
of
the
fixture
private
MyClass
myObject
public
TestMyClass
string
name
super
name
set
up
the
test
fixture
setUp
is
called
before
every
test
caser
method
Initialize
the
instance
variable
protected
void
setUp
myObject
new
MyClass
Tears
down
the
test
fixture
tearDown
is
called
after
every
test
caser
method
Releases
any
permanent
resource
allocated
in
setUp
example
clore
file
protected
void
tearDown
once
the
fixture
is
in
place
avoir
many
test
case
avoir
necessary
can
be
written
test
the
method
methodX
public
void
testMethodX
ArgumentType
argument
ResponseType
expectedResponse
string
errorMessage
assertTrue
errorMessage
expectedResponse
equals
MethodX
argument
end
class
TestMyClass
JUnit
déterminer
le
succès
où
l
échec
d
un
test
via
du
instruction
d
assertion
un
assertion
être
simplement
un
procédure
de
comparaison
entre
un
valeur
espérer
et
un
valeur
effectif
et
qui
générer
un
échec
en
cas
de
différence
le
procédure
d
assertion
disponible
être
définir
dans
le
classe
junit
framework
Assert
exemple
d
instruction
d
assertion
assertTrue
errorMessage
booleanCondition
assertFalse
errorMessage
booleanCondition
assertEquals
errorMessage
expectedValue
actualValue
assertEquals
errorMessage
doubleExpected
doubleActual
doubleDelta
pour
exécuter
le
test
créer
un
instance
de
ce
classe
avec
en
paramètre
le
nom
de
le
méthode
de
test
exemple
new
TestMyClass
testMethodX
JUnit
être
intégrer
dans
certain
outil
de
développement
de
tel
outil
offrir
alors
du
fonctionnalité
qui
permettre
de
créer
facilement
du
test
java
Beans
un
java
Bean
grain
java
être
définir
par
Sun
comme
un
composant
réutilisable
java
destiner
à
être
manipuler
par
un
outil
de
développement
graphique
visuel
le
java
Beans
être
du
composant
java
i
e
du
classe
respecter
certain
critère
afin
de
pouvoir
être
facilement
développer
assembler
et
réutiliser
pour
créer
du
application
sophistiquer
par
exemple
le
technologie
java
Beans
être
l
architecture
du
composant
dans
le
plat
forme
java
se
le
obligation
que
devoir
respecter
un
java
Bean
être
nombreux
mais
l
enjeu
être
d
importance
disposer
de
composant
Write
One
run
Anywhere
WORA
réutilisable
le
java
Beans
être
du
classe
publique
concret
qui
avoir
pour
caractéristique
commune
de
supporter
du
propriété
le
propriété
être
le
attribut
discret
nommer
d
un
java
Bean
qui
pouvoir
affecter
son
apparence
ou
son
comportement
le
propriété
être
pour
le
java
Beans
l
équivalent
du
champ
pour
le
objet
par
exemple
un
bouton
graphique
pouvoir
avoir
un
propriété
nommé
label
qui
représenter
le
texte
afficher
dans
le
bouton
le
méthode
d
accès
au
propriété
devoir
respecter
du
convention
de
nommage
particulier
par
exemple
pour
le
propriété
simple
il
en
exister
d
autre
lier
contraindre
indexer
PropertyType
getPropertyName
simple
getter
void
setPropertyName
PropertyType
simple
setter
pour
le
propriété
booléen
on
utiliser
typiquement
is
au
lieu
de
get
communiquer
entre
eux
par
événement
en
pratique
on
utiliser
le
technique
swing
du
listeners
voir
section
supporter
l
introspection
à
l
exécution
et
dans
l
environnement
de
développement
on
devoir
être
capable
de
déterminer
et
d
analyser
le
propriété
le
événement
et
le
méthode
que
supporter
un
java
Bean
à
noter
que
ce
propriété
d
introspection
être
déjà
présent
dans
le
objet
java
puisqu
un
objet
pouvoir
être
analyser
grâce
au
classe
class
Method
Field
supporter
le
personnalisation
customization
le
outil
de
développement
devoir
permettre
de
modifier
l
apparence
et
le
comportement
d
un
java
Bean
en
phase
de
conception
supporter
le
persistance
le
persistance
d
un
objet
être
le
capacité
de
le
sauvegarder
sur
un
support
de
stockage
et
de
le
restaurer
à
l
identique
afin
que
le
programme
pouvoir
se
terminer
sans
que
ce
objet
être
perdre
exemple
de
persistance
qu
un
objet
pouvoir
prétendre
à
être
un
document
Excel
à
l
intérieur
d
un
document
Word
le
mécanisme
qui
rendre
possible
le
persistance
être
appeler
sérialisation
serialization
à
ce
fin
un
java
Bean
devoir
implémenter
l
interface
Serializable
ou
Externalizable
exemple
de
java
Bean
package
sunw
demo
simple
import
java
awt
import
java
io
Serializable
SimpleBean
wi
be
displayed
with
avoir
green
centered
rectangle
but
its
color
may
be
changed
ater
public
class
SimpleBean
extends
Canvas
implements
Serializable
private
Color
color
Color
green
Property
getter
method
public
Color
getColor
return
color
Property
setter
method
set
new
SimpleBean
color
and
repaints
public
void
setColor
Color
newColor
color
newColor
repaint
public
void
paint
Graphics
g
g
setColor
color
g
fillRect
Constructor
set
inherited
properties
public
SimpleBean
setSize
setBackground
Color
red
end
class
SimpleBean
pour
être
reconnaître
par
un
outil
de
développement
un
java
Bean
devoir
être
conditionnné
dans
un
fichier
d
archiver
au
format
jar
bien
que
ce
ne
être
pas
obligatoire
il
être
souhaitable
que
le
java
Beans
être
du
paquetage
éviter
notamment
le
conflit
en
cas
d
homonymie
du
beans
design
pattern
ce
section
n
être
qu
un
tout
premier
introduction
au
modèle
de
conception
design
pattern
le
développement
orienter
objet
d
application
professionnel
conduire
généralement
à
rencontrer
du
problème
de
conception
type
qui
être
familier
à
le
communauté
du
développeur
confirmer
et
pour
lequel
du
solution
éprouver
exister
il
ne
s
agir
pas
ici
de
solution
théorique
algorithme
mais
de
solution
orienter
objet
empirique
dont
le
solidité
et
l
efficacité
avoir
faire
leur
preuve
en
pratique
ce
solution
être
appeler
modèle
de
conception
design
pattern
un
développeur
expérimenté
se
devoir
de
la
connaître
et
de
disposer
d
un
panier
de
modèle
de
conception
qu
il
appliquer
aussi
systématiquement
que
possible
le
modèle
de
conception
être
du
stratégie
de
résolution
de
grand
type
de
problème
de
conception
orienter
objet
il
décrire
du
forme
générique
d
organisation
de
classe
il
être
indépendant
du
langage
de
programmation
objet
mettre
en
œuvre
à
titre
illustratif
l
architecture
MVC
décrire
à
le
section
être
un
exemple
de
modèle
de
conception
d
architecture
logicielle
architectural
design
pattern
le
plus
connaître
du
modèle
de
conception
de
base
être
le
modèle
fondamental
décrire
par
le
quatre
auteur
qui
être
appeler
collectivement
The
gang
of
four
le
bande
du
quatre
ou
tout
simplement
GoF
on
distinguer
habituellement
grand
famille
de
modèle
de
conception
L
expression
design
pattern
être
souvent
traduire
aussi
par
patron
de
conception
le
modèle
de
construction
avoir
pour
but
d
organiser
le
création
d
objet
de
façon
à
gagner
en
abstraction
exemple
présenter
ci
après
le
modèle
singleton
le
modèle
de
structuration
faciliter
l
organisation
de
le
hiérarchie
du
classe
et
de
leur
relation
exemple
présenter
ci
après
le
modèle
Decorator
le
modèle
de
comportement
proposer
du
solution
pour
organiser
le
interaction
et
pour
répartir
le
traitement
entre
le
objet
il
tenter
de
répartir
le
responsabilité
entre
chaque
classe
exemple
le
modèle
Chain
of
Responsibility
permettre
de
créer
un
chaîne
d
objet
tel
que
si
l
un
d
eux
ne
pouvoir
pas
répondre
à
un
requête
il
pouvoir
le
transmettre
à
son
successeur
jusqu
à
ce
que
l
un
d
entre
eux
y
répondre
exemple
le
modèle
singleton
le
modèle
de
conception
singleton
permettre
d
assurer
qu
un
classe
ne
posséder
qu
un
instance
au
plus
et
d
offrir
un
méthode
unique
retourner
ce
instance
exemple
d
implémentation
cas
où
tout
le
information
nécessaire
à
le
création
du
singleton
être
disponible
au
moment
du
chargement
de
le
classe
en
mémoire
public
final
class
MySingleton
Creating
at
the
class
loading
private
static
MySingleton
singleInstance
new
MySingleton
Private
constructor
Can
t
be
used
outside
this
class
private
MySingleton
Get
avoir
singleton
of
this
class
public
static
MySingleton
getInstancer
return
singleInstance
Creation
of
avoir
singleton
MySingleton
singleton
MySingleton
getInstancer
exemple
le
modèle
Decorator
le
modèle
de
conception
Decorator
permettre
d
ajouter
dynamiquement
du
fonctionnalité
à
un
objet
ceci
se
réaliser
en
créer
un
nouveau
classe
Decorator
envelopper
le
classe
original
le
modèle
de
conception
Decorator
être
un
alternative
à
l
approche
par
création
d
un
sous
classe
de
le
classe
original
il
s
imposer
notamment
à
un
approche
par
extension
de
le
classe
original
dans
le
cas
suivant
le
classe
original
ne
pouvoir
pas
être
étendre
par
héritage
le
nombre
de
sous
classe
permettre
de
définir
tout
le
combinaison
possible
de
fonctionnalité
être
trop
important
l
ajout
du
fonctionnalité
ne
pouvoir
pas
être
statique
i
e
réaliser
à
le
compilation
mais
devoir
être
dynamique
e
réaliser
à
l
exécution
exemple
Wikipedia
considérer
du
fenêtre
d
affichage
instance
d
un
classe
Window
et
supposer
que
ce
classe
n
offrir
pas
le
possibilité
d
ajouter
du
barre
de
défilement
créer
un
décorateur
qui
pouvoir
ajouter
dynamiquement
ce
fonctionnalité
à
du
objet
Window
existant
an
interface
common
to
the
decorator
and
the
decorated
public
interface
Window
public
void
draw
The
original
class
the
instance
of
which
can
be
decorated
public
class
SimpleWindow
implements
Window
public
void
draw
The
abstract
decorator
public
abstract
class
WindowDecorator
implements
Window
protected
Window
decoratedWindow
public
WindowDecorator
Window
decoratedWindow
this
decoratedWindow
decoratedWindow
à
first
concrete
decorator
public
class
VerticalScrollBarDecorator
extends
WindowDecorator
public
VerticalScrollBarDecorator
Window
decoratedWindow
super
decoratedWindow
public
void
draw
drawVerticalScrollBar
decoratedWindow
draw
public
void
drawVerticalScrollBar
à
second
concrete
decorator
public
class
HorizontalScrollBarDecorator
extends
WindowDecorator
public
HorizontalScrollBarDecorator
Window
decoratedWindow
super
decoratedWindow
public
void
draw
drawHorizontalScrollBar
decoratedWindow
draw
public
void
drawHorizontalScrollBar
Example
creation
of
avoir
fully
decorated
Window
instance
Window
decoratedWindow
new
HorizontalScrollBarDecorator
new
VerticalScrollBarDecorator
new
SimpleWindow
annexe
machiner
virtuel
java
JVM
le
objectif
premier
de
ce
chapitre
être
comprendre
comment
s
opérer
le
chargement
dynamique
du
classe
en
mémoire
lors
de
l
exécution
d
un
programme
java
comprendre
le
traitement
du
champ
et
bloc
static
au
chargement
de
le
classe
un
machine
virtuel
java
JVM
être
un
interpréteur
de
code
java
compiler
bytecode
permettre
d
exécuter
un
programme
java
sur
un
machine
cibler
L
espace
mémoire
de
le
JVM
comporter
plusieurs
zone
notamment
le
zone
du
méthode
contenir
le
code
du
méthode
et
constructeur
ainsi
que
du
information
sur
le
structure
de
chaque
classe
notamment
son
table
du
symbole
le
pile
espace
propre
à
chaque
thread
mémoriser
dynamiquement
le
contexte
d
exécution
variable
local
notamment
du
méthode
en
cours
d
exécution
le
tas
contenir
le
objet
créer
par
new
instance
de
classe
et
tableau
cf
chapitre
C
être
le
demande
d
exécution
d
un
programme
java
qui
lancer
le
machine
virtuel
java
le
JVM
réaliser
alors
le
grand
étape
suivant
chargement
de
le
classe
principal
spécifier
main
class
et
du
classe
dont
elle
dépendre
immédiatement
au
premier
rang
duquel
tout
son
sur
classe
o
création
du
champ
static
création
de
le
table
du
méthode
o
traitement
du
champ
initialisation
et
bloc
exécution
static
exécution
de
le
méthode
main
de
le
classe
principal
durant
l
exécution
d
un
code
java
le
classe
leur
bytecode
être
charger
dans
le
JVM
au
fur
et
à
mesure
du
besoin
dans
un
hiérarchie
d
héritage
le
chargement
du
classe
être
opérer
par
ordre
hiérarchique
descendre
i
e
de
le
super
classe
raciner
vers
le
classe
courant
exemple
public
class
classer
static
System
out
println
start
loading
classer
public
static
final
int
C
private
static
int
n
static
C
static
System
out
println
C
C
System
out
println
n
n
public
classer
System
out
println
start
classer
n
n
System
out
println
End
classer
public
int
getN
return
n
static
System
out
println
End
loading
classer
end
classer
public
class
ClassB
extends
classer
static
System
out
println
start
loading
ClassB
private
int
x
public
ClassB
System
out
println
start
ClassB
x
x
getN
System
out
println
x
System
out
println
End
ClassB
static
System
out
println
End
loading
ClassB
end
ClassB
public
class
class
static
System
out
println
start
loading
class
private
static
int
y
initY
private
static
int
initY
System
out
println
Init
y
return
public
static
void
main
string
args
System
out
println
start
main
class
ClassB
b
new
ClassB
System
out
println
End
main
class
static
System
out
println
End
loading
class
end
class
après
compilation
de
ce
trois
classe
l
exécution
de
le
commande
java
class
afficher
commentaire
ajouter
en
marge
start
loading
class
Init
y
End
loading
class
start
main
class
start
loading
classer
sur
classe
de
ClassB
d
abord
C
n
End
loading
classer
start
loading
ClassB
puis
enfin
ClassB
End
loading
ClassB
start
classer
car
super
d
abord
End
classer
start
ClassB
classer
ClassB
End
ClassB
End
main
class
annexe
communication
entre
java
et
C
JNI
référence
The
java
natif
interface
programmer
s
guider
and
Specification
java
sun
com
doc
books
jni
tutoriel
java
sun
com
doc
books
jni
html
jniTOC
html
java
natif
interface
Specification
v
java
sun
com
j
se
doc
guider
jni
spec
jniTOC
html
javah
C
Header
and
Stub
filer
Generator
java
sun
com
javase
doc
technoter
tools
windows
javah
html
on
se
poser
le
problème
d
appeler
un
sous
programme
C
depuis
un
méthode
java
dans
un
environnement
Unix
le
solution
mettre
en
œuvre
l
interface
de
programmation
JNI
java
natif
interface
offrir
par
le
plat
forme
java
JNI
être
un
ensemble
de
fonctionnalité
qui
permettre
à
un
programme
java
fonctionner
sur
le
machine
virtuel
java
JVM
d
appeler
ou
d
être
appeler
par
un
programme
écrire
dans
un
autre
langage
typiquement
en
C
C
ou
assembleur
en
permettre
l
interfaçage
avec
du
application
ou
bibliothèque
natif
le
mise
en
œuvre
de
JNI
accroître
l
interopérabilité
du
application
java
mais
évidemment
au
détriment
de
leur
portabilité
un
bon
architecture
de
l
application
devoir
donc
minimiser
le
nombre
de
classe
faire
référence
à
un
méthode
natif
par
le
suite
on
supposer
que
le
fichier
java
appeler
le
sous
programme
C
se
nommer
MyClass
java
et
que
le
fichier
C
implémentant
ce
sous
programme
se
nommer
MyRoutine
c
le
développement
de
l
application
complet
comporter
étape
Ecrire
le
programme
java
et
le
compiler
javac
MyClass
java
produire
le
fichier
d
en
tête
MyClass
heure
pour
le
programme
C
javah
MyClass
Ecrire
le
sous
programme
C
et
le
compiler
gcc
o
MyRoutine
c
MyRoutine
c
pedantic
W
Wal
l
Idir
où
dir
être
le
répertoire
d
installation
par
le
JDK
du
fichier
d
include
du
JNI
par
exemple
ce
fichier
être
répartir
dans
deux
répertoire
gcc
o
MyRoutine
c
MyRoutine
c
pedantic
W
Wall
I
usr
lib
jdk
v
include
I
usr
lib
jdk
v
include
linux
un
application
ou
un
bibliothèque
de
sous
programme
être
dire
en
code
natif
si
elle
être
dépendant
d
un
environnement
hôte
système
d
exploitation
ou
jeu
d
instruction
du
processeur
particulier
par
exemple
un
programme
C
compiler
sur
un
système
d
exploitation
donner
être
en
code
natif
car
il
ne
fonctionner
pas
sur
un
autre
système
d
exploitation
produire
un
bibliothèque
partagé
lib
so
qui
être
chargeable
par
le
programme
java
gcc
Wall
shared
o
libMyRoutines
so
MyRoutine
o
avant
le
tout
premier
exécution
spécifier
à
le
machine
virtuel
java
le
chemin
d
accès
à
ce
bibliothèque
setenv
LD
LIBRARY
PATH
path
où
path
désigner
le
chemin
d
accès
en
supposer
que
celui
ci
soit
le
répertoire
courir
le
commande
être
setenv
LD
LIBRARY
PATH
exécuter
le
programme
java
java
MyClass
le
façon
d
écrire
le
programme
java
et
d
implémenter
le
sous
programme
C
associé
être
illustrer
ci
après
appel
d
un
procédure
C
on
considèrera
de
bout
en
bout
le
même
exemple
déclaration
et
appel
java
exemple
de
classe
java
public
class
MyClass
Declaration
of
an
extern
class
procedure
natif
public
static
void
procedure
Declaration
of
an
extern
instance
procedure
natif
public
void
procedure
test
procedure
public
static
void
main
string
argv
MyClass
procedure
MyClass
o
new
MyClasse
o
procedure
Load
the
library
libMyRoutines
static
System
loadLibrary
MyRoutine
commentaire
le
modificateur
natif
indiquer
qu
il
s
agir
d
un
procédure
externe
non
écrire
en
java
le
nom
de
le
procédure
être
arbitraire
le
méthode
loadLibrary
aller
charger
le
bibliothèque
libMyRoutines
so
le
mot
clé
static
qui
encapsuler
le
bloc
d
instruction
dans
lequel
l
appel
être
réaliser
permettre
d
exécuter
ce
bloc
dès
le
chargement
de
le
classe
MyClass
sans
avoir
besoin
de
passer
par
l
appel
d
un
méthode
intermédiaire
prototyper
C
le
fichier
MyClass
heure
produit
par
javah
cf
étape
précédent
spécifier
le
prototype
que
devoir
respecter
le
sous
programme
C
à
écrire
contenir
expurger
du
fichier
MyClass
heure
produit
par
javah
do
NOT
EDIT
THIS
filer
it
is
machine
generated
Header
for
class
MYClass
JNIEXPORT
void
JNICALL
java
MyClass
procedure
JNIEnv
jclass
JNIEXPORT
void
JNICALL
java
MyClass
procedure
JNIEnv
jobject
commentaire
JNIEXPORT
et
JNICALL
être
deux
macros
prédéfinie
par
JNI
pour
faire
communiquer
java
et
C
void
spécifier
qu
il
s
agir
d
un
procédure
java
MyClass
procedure
être
le
nom
imposé
que
devoir
porter
le
procédure
C
correspondant
à
le
méthode
de
nom
procedure
déclarer
dans
le
programme
java
idem
pour
procedure
deux
paramètre
être
systématiquement
introduire
en
tête
de
le
liste
du
paramètre
o
le
premier
de
type
JNIEnv
être
un
pointeur
vers
l
environnement
JNIEnv
qui
être
lui
même
un
pointeur
vers
un
structure
contenir
du
fonction
d
interface
avec
le
machine
virtuel
java
JVM
o
le
second
de
type
jclass
s
il
s
agir
d
un
méthode
de
classe
ou
jobject
s
il
s
agir
d
un
méthode
d
instance
être
un
pointeur
vers
un
descripteur
de
le
classe
ou
de
l
objet
un
sorte
de
this
d
appel
implémentation
C
exemple
de
fichier
MyRoutine
c
include
stdio
heure
include
MyClass
heure
JNIEXPORT
void
JNICALL
java
MyClass
procedure
JINIEnv
penv
jclass
cla
printf
routine
procedure
n
JNIEXPORT
void
JNICALL
java
MyClass
procedure
JINIEnv
penv
jobject
obj
printf
routiner
procedure
n
Echange
de
donnée
entre
java
et
C
L
échange
de
donnée
entre
l
application
java
et
le
sous
programme
C
par
le
paramètre
ou
le
résultat
de
le
fonction
supposer
un
compatibilité
du
type
correspondant
or
il
n
y
avoir
pas
de
correspondance
systématique
naturel
entre
le
type
du
langage
java
et
le
type
du
langage
C
un
caractère
par
exemple
être
coder
sur
bit
en
java
et
sur
bit
en
C
le
JNI
définir
donc
un
ensemble
de
type
en
C
de
nom
j
qui
correspondre
au
type
de
java
le
JNI
traiter
le
type
primitif
et
le
type
objet
différemment
le
correspondance
du
type
primitif
être
direct
voir
tableau
ci
après
car
elle
reposer
sur
un
représentation
machiner
du
donnée
identique
mais
ce
n
être
pas
le
cas
pour
le
type
objet
le
transmission
d
un
chaîne
de
caractère
d
un
tableau
avoir
fortiori
d
un
instance
quelconque
de
classe
n
être
pas
direct
et
nécessiter
du
conversion
de
type
un
paramètre
java
de
type
objet
être
ainsi
transmettre
au
sous
programme
C
sous
forme
d
un
pointeur
sur
un
structure
de
donnée
interne
à
le
machine
virtuel
java
L
organisation
interne
de
ce
structure
être
masquer
au
programmeur
mais
celui
ci
pouvoir
néanmoins
accéder
au
composante
sous
jacent
via
le
fonction
utilitaire
offrir
par
le
JNI
dans
l
environnement
JNIEnv
typer
primitif
java
typer
primitif
côté
C
description
boolean
jboolean
unsigned
bit
byte
jbyte
signed
bit
char
jchar
unsigned
bit
short
jshort
signed
bit
int
jint
signed
bit
long
jlong
signed
bit
float
jfloat
bit
double
jdouble
bit
par
le
suite
on
considèrera
de
bout
en
bout
le
même
exemple
déclaration
et
appel
java
exemple
de
classe
java
public
class
MyClass
Declaration
of
an
extern
instance
function
natif
public
string
getMessage
int
id
string
prompt
test
procedure
public
static
void
main
string
argv
MyClass
o
new
MyClasse
System
out
println
o
getMessage
Name
Load
the
library
libMyRoutines
static
System
loadLibrary
libMyRoutines
prototyper
C
contenu
expurger
du
fichier
MyClass
heure
produit
par
javah
do
NOT
EDIT
THIS
filer
it
is
machine
generated
Header
for
class
MYClass
JNIEXPORT
jstring
JNICALL
java
MyClass
getMessage
INIEnv
jobject
jint
jstring
implémentation
C
exemple
de
fichier
MyRoutine
c
include
stdio
heure
include
MyClass
heure
JNIEXPORT
jstring
JNICALL
java
MyClass
getMessage
JINIEnv
penv
jobject
obj
jint
jid
jstring
jprompt
const
char
str
char
buf
Get
the
C
string
from
the
java
string
str
penv
GetStringUTFChars
penv
jprompt
NULL
printf
d
s
jid
str
Don
t
forget
this
line
penv
ReleaseStringUTFChars
penv
jprompt
str
assumer
the
user
doesn
t
type
more
than
char
scanf
s
buf
return
penv
NewStringUTF
penv
buf
commentaire
le
représentation
physique
du
chaîne
de
type
jstring
et
de
type
char
ne
être
pas
identique
un
conversion
devoir
être
réaliser
C
être
le
rôle
du
fonction
GetStringUTFChars
et
NewStringUTF
à
noter
que
dans
tout
le
cas
le
conversion
du
caractère
non
codables
en
ASCII
bit
lettre
accentué
poser
problème
le
fonction
GetStringUTFChars
réaliser
un
allocation
mémoire
dynamique
un
désallocation
devoir
être
obligatoirement
réaliser
avant
le
fin
du
sous
programme
c
être
le
rôle
de
le
fonction
ReleaseStringUTFChars
annexe
plat
forme
java
référencer
java
Platform
standard
Edition
api
Specification
java
sun
com
javase
doc
api
New
features
and
Enhancements
J
se
java
sun
com
j
se
doc
relnotes
features
html
java
Platform
standard
Edition
java
sun
com
javase
java
Platform
Enterprise
Edition
java
sun
com
javaee
java
Platform
micro
Edition
java
sun
com
javame
JDK
Tools
and
Utilities
java
sun
com
javase
doc
technoter
tools
Sun
Microsystems
fournir
trois
plat
forme
java
permettre
le
développement
et
l
exécution
de
programme
java
java
se
le
standard
de
base
java
EE
et
java
me
à
noter
que
ce
nom
être
celui
employé
pour
le
version
sortir
depuis
antérieurement
ce
plat
forme
être
nommer
respectivement
J
se
J
EE
et
J
me
java
Platform
standard
Edition
java
se
ce
plat
forme
être
le
framework
java
de
base
permettre
de
développer
ou
et
exécuter
du
programme
java
le
dernier
version
nommer
J
se
être
le
version
et
porter
le
nom
J
se
il
être
à
souligner
que
ce
version
apporter
un
mise
à
jour
majeur
par
rapport
à
le
précédent
le
version
actuel
le
plus
récent
date
de
décembre
c
être
le
version
et
elle
porter
le
nom
java
se
le
version
java
se
être
annoncer
comme
nouveau
mise
à
jour
majeur
mais
à
mi
être
toujours
attendre
le
plat
forme
java
se
délivrer
deux
produit
logiciel
principal
java
se
Runtime
Environment
ou
plus
communément
JRE
qui
fournir
le
librairie
le
machine
java
virtuel
et
d
autre
composante
nécessaire
pour
exécuter
du
programme
java
java
se
Development
kit
ou
plus
communément
JDK
qui
inclure
le
JRE
plus
du
outil
de
développement
tel
que
compilateur
et
débogueur
nécessaire
ou
utile
pour
développer
du
programme
java
à
noter
que
le
terme
JDK
bien
que
très
populaire
être
devenir
imprécis
car
d
autre
plat
forme
java
java
EE
par
exemple
comporter
elle
aussi
leur
propre
kit
de
développement
java
Platform
Enterprise
Edition
java
EE
ce
plat
forme
être
un
framework
java
plus
particulièrement
destiner
au
application
d
entreprendre
elle
offrir
un
cadre
standard
pour
développer
du
application
distribuer
java
Platform
micro
Edition
java
me
ce
plat
forme
être
un
framework
java
spécialiser
dans
le
application
mobile
du
plat
forme
java
compatibles
avec
J
me
être
embarquer
dans
de
nombreux
téléphone
mobile
et
PDA
de
façon
plus
spécifique
on
pouvoir
aussi
citer
le
plateforme
java
Card
qui
fournir
un
environnement
pour
le
développement
d
application
sur
carte
à
puce
et
JavaFX
pour
créer
du
Rich
Internet
application
annexe
glossaire
on
trouver
facilement
sur
le
web
d
excellent
définition
en
anglais
du
terme
sigle
et
même
produire
de
référence
informatique
parmi
le
source
possible
citer
par
exemple
parmi
le
encyclopédie
www
wikipedia
org
le
version
anglais
être
le
plus
complet
parmi
le
moteur
spécialiser
dans
le
recherche
dans
le
encyclopédie
dictionnaire
et
glossaire
www
answers
com
voici
un
glossaire
de
quelque
terme
et
sigle
général
courant
sigler
terme
définition
commentaire
api
application
Programming
bibliothèque
de
fonctionnalité
commun
interface
courant
et
de
bas
niveau
constituer
un
interface
entre
couche
bas
et
couche
applicatives
de
plus
haut
niveau
exemple
java
sun
com
javase
doc
api
spécifier
le
api
standard
de
java
fournir
dans
le
JDK
Framework
cadre
d
application
Ensemble
cohérent
de
classe
généralement
abstrait
et
d
interface
permettre
le
développement
rapide
d
application
fournir
suffisamment
de
brique
logicielles
pour
pouvoir
produire
un
application
aboutir
typiquement
spécialiser
pour
un
type
d
application
gui
Graphical
user
interface
interface
homme
machiner
graphique
par
opposition
à
interface
en
ligne
de
commande
IDE
Integrated
Development
programme
regrouper
un
ensemble
d
utilitaire
Environment
logiciel
pour
le
développement
de
programme
éditeur
de
texte
compilateur
débogueur
gestionnaire
de
version
aider
à
le
production
d
interface
généralement
dédier
à
un
seul
langage
de
programmation
JDK
java
Development
kit
voir
chapitre
JFC
java
Foundation
classe
cadre
d
application
graphique
Ensemble
de
classe
java
permettre
de
construire
du
interface
utilisateur
graphique
portable
contenir
notamment
le
composant
swing
JRE
java
Runtime
Environment
voir
chapitre
J
EE
java
Platform
Enterpriser
voir
chapitre
Edition
java
se
java
Platform
Enterprise
J
me
java
Platform
micro
voir
chapitre
Edition
java
me
java
Platform
micro
Edition
J
se
java
Platform
standard
voir
chapitre
Edition
java
se
java
Platform
standard
Edition
et
plus
spécifiquement
dans
le
cadre
d
application
professionnel
java
distribuer
sigler
terme
définition
commentaire
EJB
Enterprise
JavaBeans
technologie
java
offrir
par
le
plateforme
java
EE
permettre
de
créer
du
composant
distribuer
héberger
dans
un
serveur
d
application
dans
un
architecture
MVC
utiliser
pour
réaliser
le
modèle
java
sun
com
products
ejb
JSP
java
Server
page
technologie
java
offrir
par
le
plateforme
java
EE
permettre
de
créer
du
page
Web
dynamique
dans
un
architecture
MVC
utiliser
pour
réaliser
le
vue
java
sun
com
products
jsp
Servlet
technologie
java
offrir
par
le
plateforme
java
EE
permettre
d
étendre
le
fonctionnalité
d
un
serveur
Web
accès
à
du
base
de
donnée
transaction
d
e
commerce
dans
un
architecture
MVC
utiliser
pour
réaliser
le
contrôleur
java
sun
com
products
servlet
