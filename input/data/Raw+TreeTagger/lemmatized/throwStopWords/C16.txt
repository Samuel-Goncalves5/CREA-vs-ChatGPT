programmation
Web
PHP
le
aimable
autorisation
Jérôme
CUTRONA
PHP
langage
script
Web

être
ce
PHP







langage
script
utiliser
coter
serveur
acronyme
récursif
PHP
Hypertext
Preprocessor
créer
Rasmus
Lerdorf
extension
utiliser
certain
serveur
Web
langage
multi
plate-forme
UNIX
/
Windows
...
open
source
verser
actuel
source
dns-remplacer

PHP4
octobre

PHP5
octobre
:
:
programmation
Web
utilité
utilisation
PHP

création
page
HTML
dynamique
fabriquer
volée
construire
demander

interface
entre
serveur
Web
baser
donner

création
application
Web
:
:
programmation
Web
principal
fonctionnalité
PHP









manipulation
chaîne
tableau
calendrier
/
date
/
heure
fonction
mathématique
accès
système
fichier
manipulation
image
HTTP
/
FTP
/
IMAP
baser
donner
oracle
MySQL
...
XML
...
:
:
programmation
Web
fonctionnement
PHP
requêter
HTTP
client
port
dns-remplacer
rendre
localisation
connexion
exécution
fermeture
graphique
code
coder
connexion
serveur
ressourcer
PHP
PHP
donné
envoi
résultat
client
localisation
rendre
exécution
fermeture
connexion
requêter
graphique
HTTP
coder
code
connexion
serveur
ressourcer
client
PHP
PHP
donné
port
dns-remplacer
dans80
fichier
fichier
envoi
résultat
client
=
=
réponse
réponse
HTTP
HTTP
client
client
GET
navigateur
GET
/
dns-remplacer
/
dns-remplacer
HTTP
/
HTTP
/
réseau
•HTML
réseau
•JavaScript
•CSS
protocole
protocole
HTTP
HTTP
exécution
exécution
programmer
programme
serveur
serveur
construction
réponse
construction
réponse
html
html
head
head
serveur
serveur
title
title
hello
hello
/
/
title
title
/
/
head
head
serveur
Web
.html
body
body
hello
hello
world
world
/
/
body
body
.php
/
/
html
html
.jpg
moduler
PHP
MySQL
:
:
php
php
echo
dns-remplacer
echo
HTML
HTML
dns-remplacé
html
html
head
head
title
title
hello
hello
/
/
title
title
/
/
head
head
body
body
hello
hello
world
world
/
/
body
body
/
/
html
html
HTML
HTML
programmation
Web
fonctionnement
PHP
client

serveur
connexion
TCP
serveur
port
requête
HTTP
client
mon_
dns-remplacer
localisation
ressourcer
exécution
coder
PHP
envoi
résultat
exécution
client
=
réponse
HTTP
fermeture
connexion
rendre
graphique
donner
HTML
image
...
:
:
programmation
Web
programme
PHP
délimitation
coder
PHP
fichier
.php

php
coder
PHP
fermeture
fermeture
optionnel
optionnel

script
language
=
PHP
confusion
confusion
JavaScript
JavaScript


àà
bannir
bannir
code
PHP
/
script


code
PHP
coder
PHP
:
:
dépendre
dépendre
configuration
configuration
short_open_tag
short_open_tag
serveur
serveur
asp_tags
asp_tags


àà
bannir
bannir
programmation
Web
Eléments
syntaxe
PHP

syntaxe
PHP
ressembler
celui
famille
C++
java
...

chaque
instruction
terminer
`
`

commentaire
/
*
jusqu
prochain
*
/
/
/
jusqu
fin
ligner
#
jusqu
fin
ligner
:
:
programmation
Web
variable
type
donner

tout
identificateur
commencer
`
`

affectation
réaliser
grâce
`
`
=

numérique
entier
réel

chaîne
`
`
hello
bonjour

booléen
true
false
PHP

tableau
tab
=

objet
PHP4
PHP5

ressourcer

NULL

type
variable
dynamique
déterminer
valeur
affecter
:
:
programmation
Web
Typage
faible
exemple
/
/
déclaration
variable
test
=
/
/
réel
test
=
/
/
entier
test
=
array
/
/
tableau
test
=
`
`
/
/
chaîne
echo
test
/
/
:
:
programmation
Web
Typage
automatique
exemple
nombre1
nombre2
chaine1
chaine2
=
=
=
=
'
coucou
'
/
/
/
/
/
/
/
/
réel
entier
chaîner
chaîne
total
=
nombre1
+
nombre2
+
chaine1
+
chaine2
echo
total
/
/
réel
:
:
'
coucou
'
'
coucou
'
programmation
Web
chaîne
caractère
substitution
variable
chaîne

guillemet
simple


avoir
=
'
chaîne
'
b
=
'
voici
'

guillemet
double


avoir
=
chaîne
b
=
voici

syntaxe
HereDoc


:
:
avoir
=
chaîne
b
=
MARQUE_DE_FIN
voici
deux
ligne
-
MARQUE_DE_FIN
chaîner
chaîne
voici
voici
chaîne
chaîner
voici
voici
chaîne
chaîner
chaîne
chaîner
voici
voici
chaîner
chaîne
deux
deux
ligne
ligne
-
-
programmation
Web
concaténation
chaîne


permettre
assembler
plusieurs
chaîne
réaliser
grâce
opérateur
point
`
`
bonjour
`
`
`
`
Marcel

valoir
`
`
bonjour
Marcel
nb
=
*
acheter
`
`
nb

valoir
:
:
`
`
œuf
acheter
œuf
programmation
Web
commander
echo

permettre
envoyer
texte
navigateur
client
écrire
page
format
HTML
résulter
interprétation
PHP


echo
`
`
bonjour
nom
=
Marcel
echo
`
`
bonjour
nom

plus
généralement
permettre
envoyer
octet
navigateur
client



:
:
ficher
HTML
XML
CSS
JavaScript
...
donner
de
un
image
contenir
de
un
ficher
PDF
flash
etc
programmation
Web
hello
world
interprétation
interprétation
coder
code
PHP
PHP
serveur
serveur
php
serveur
navigateur
php
transmission
résultat
client
transmission
résultat
client
debut
debut
=
=
HTML
HTML
html
html
head
head
title
title
hello
hello
/
/
title
title
/
/
head
head
body
body
\n
\n
HTML
HTML
corps
corps
=
=
`
`
hello
hello
world
world
\n
\n
fin
=
=
fin
HTML
HTML
/
/
body
body
/
/
html
html
HTML
HTML
/
*
/
*
envoi
envoi
client
client
*
/
*
/
echo
echo
debut
debut
.
corps
corps
.
fin
fin
html
html
head
head
title
title
hello
hello
/
/
title
title
/
/
head
head
body
body
hello
hello
world
world
/
/
body
body
/
/
html
html
impossible
impossible
voir
voir
code
coder
PHP
PHP
depuis
depuis
navigateur
navigateur
:
:
programmation
Web
opérateur
arithmétique
b
Somme
b
différence
b
multiplication
+
*
/
b
division
b
modulo
reste
division
entier
:
:
programmation
Web
opérateur
in-
dé-crémentation
pré-
post-fixé
a++
++
:
:
retourne
valeur
puis
augmenter
valeur
augmenter
valeur
puis
retourner
nouveau
valeur
retourner
valeur
puis
diminuer
valeur
diminuer
valeur
puis
retourner
nouveau
valeur
programmation
Web
opérateur
comparaison
=
=
b
=
b
b
b
=
b
=
b
=
=
=
b
=
=
b
:
:
vrai
égalité
entre
valeur
b
vrai
différence
entre
valeur
b
vrai
inférieur
b
vrai
supérieur
b
vrai
inférieur
égal
b
vrai
supérieur
égal
b
vrai
b
identique
valeur
typer
vrai
b
différent
valeur
typer
programmation
Web
opérateur
logique
and
Expr2
Expr1
&
&
Expr2
Expr1
or
Expr2
Expr1
|
|
Expr2
Expr1
Expr1
:
:
xor
vrai
Expr1
Expr2
vrai
idem
vrai
Expr1
Expr2
vrai
idem
vrai
Expr1
Expr2
vrai
Expr2
deux
Expr1
vrai
Expr1
non
vrai
programmation
Web
opérateur
bit
&
|
^
b
binaire
b
binaire
b
XOR
binaire
~
b
b
:
:
inversion
bit
bit
décaler
gauche
b
rang
décaler
droit
b
rang
programmation
Web
Précédence
opérateur
:
:
programmation
Web
Précédence
opérateur
cas
cas
douter
doute
utiliser
utiliser
parenthèse
parenthèse
-
-
:
:
programmation
Web
structure
contrôler
si
...
alors
...
sinon
...
if
condition
{
/
*
bloc
instruction
exécuter
condition
vrai
*
/
}
else
{
/
*
bloc
instruction
exécuter
condition
faux
*
/
}
:
:
programmation
Web
structure
contrôler
tant
que
...
faire
...
while
condition
{
/
*
bloc
instruction
répéter
tant
condition
vrai
*
/
}
do
{
/
*
bloc
instruction
exécuter
fois
puis
répéter
tant
condition
vrai
*
/
}
while
condition
:
:
programmation
Web
structure
contrôler
tant
que
...
faire
...
for
avant
condition
fin_chaque_itération
{
/
*
bloc
instruction
répéter
tant
condition
vrai
*
/
}
équivaloir
avant
while
condition
{
/
*
bloc
instruction
répéter
tant
condition
vrai
*
/
fin_chaque_itération
}
:
:
programmation
Web
structure
contrôler
switch
...
switch
val
{
caser
v1
instruction
caser
v2
instruction
}
exécuter
val
=
=
v1
exécuter
val
=
=
v@card@
val
=
=
v1
...
default
instruction
tout
cas
:
:
programmation
Web
instruction
break
permettre
sortir
structure
contrôler
switch
val
{
caser
v1
instruction
exécuter
val
=
=
v@card@
break
/
*
sortir
switch
val
=
=
v@card@
*
/
case
v2
instruction
exécuter
val
=
=
v@card@
val
=
=
v@card@
break
/
*
sortir
switch
val
=
=
v@card@
*
/
...
default
instruction
exécuter
tout
cas
val
=
v1
val
=
v@card@
}
:
:
programmation
Web
tableau

création
/
initialisation
tab1
=
array
`
`
fraise
tab2
tab2
tab2
=
=
=
fraise
tab3
=
tab3
=
`
`
fraiser
tab3
=
:
:
programmation
Web
clé
valeur
fraise
tableau
trou

élément
tableau
forcement
indice
consécutif
tab4
tab4
tab4
tab4
=
=
=
=
fraise
el5
clé
valeur
`
`
fraise
el5

comment
parcourir
tel
tableau
:
:
programmation
Web
tableau
trou
suite
parcours
classique
for
i
=
i
sizeof
tab4
i++
{
echo
`
`
tab4
i
`
`
tab4
i
`
`
BR
\n
}
clé
valeur
:
:
programmation
Web
fraise
el5
structure
contrôler
chaque
...
foreach
tableau
element
{
/
*
bloc
instruction
répéter
chaque
élément
tableau
*
/
/
*
chaque
élément
tableau
accessible
grâce
element
*
/
}
:
:
programmation
Web
parcours
tableau
foreach
PHP
...
tab4
=
tab4
=
`
`
fraiser
tab4
=
tab4
=
`
`
el5
foreach
tab4
v
{
echo
`
`
val
v
br
\n
}
...
:
:
HTML
...
val
:
br
\n
val
fraiser
br
\n
val
:
br
\n
val
el5
br
\n
...
programmation
Web
navigateur
tableau
associatif

tableau
accès
élément
plus
réaliser
grâce
index
,
...
grâce
clé
typer
entier
chaîne

exemple
clé
tab
'
un
'
=
tab
=
`
`
bonjour
tab
`
`

création
valeur
tab
=
array
cle1
=
cle2
=
=
val1
val2
...
:
:
programmation
Web
tableau
associatif
-
exemple
tab5
'
un
'
tab5
'
trois
'
tab5
`
`
deux
tab5
=
=
=
=
fraise
el5
clé
:
:
=
=
=
=
trois
fraise
deux
tab6
=
array
'
un
'
'
trois
'
deux
valeur
el5
fraise
el5
programmation
Web
structure
contrôler
chaque
...
foreach
tableau
cle
=
element
{
/
*
bloc
instruction
répéter
chaque
élément
tableau
*
/
/
*
chaque
élément
tableau
accessible
grâce
element
*
/
/
*
clé
accès
chaque
élément
donner
cle
*
/
}
:
:
programmation
Web
parcours
tableau
php
php
html
html
=
=
HTML
HTML
html
html
head
head
title
title
foreach
foreach
clé
clé
/
/
title
title
/
/
head
head
body
body
HTML
HTML
tab6
=
tab6
=
=
array
array
`
`
=
deux
=
deux
=
`
`
fraise
fraiser
trois
trois
=
=
quatre
quatre
=
=
`
`
el5
el5
foreach
foreach
tab6
tab6
cle
cle
=
=
val
val
{
{
html
html
.
=
.
=
`
`
tab
tab
cle
cle
val
val
br
br
\n
\n
}
}
echo
echo
html
html
.
.
`
`
/
/
body
body
\n
/
\n
/
html
html
:
:
programmation
Web
exemple
génération
coder
HTML
php
php
html
html
=
=
HTML
HTML
DOCTYPE
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
meta
meta
http-equiv
http-equiv
=
=
Content-Type
Content-Type
content
content
=
=
text
/
html
text
/
html
charset
=
iso-8859-1
charset
=
iso-8859-1
title
title
boucle
/
boucle
/
title
title
/
/
head
head
body
body
HTML
HTML
for
for
ii
=
=
ii
ii++
++
{
{
html
html
.
=
.
=
`
`
serveur
serveur
compter
compte
`
`
.
.
ii
.
.
`
`
br
br
\n
\n
}
}
html
html
.
=
.
=
HTML
HTML
/
body
/
body
/
/
html
html
HTML
HTML
echo
echo
html
html
:
:
programmation
Web
traitement
donner
formulaire

PHP
permettre
traiter
donner
saisir
grâce
formulaire
HTML
champ
action
formulaire
désigner
page
PHP
serveur

après
récupération
serveur
Web
donnée
contenir
le
un
variable
superglobal
type
tableau
associatif
_GET
_POST
_REQUEST

valeur
pouvoir
être
trouver
grâce
clé
porter
nom
champ
formulaire
page
HTML
saisir
:
:
programmation
Web
traitement
donner
formulaire
réseau
réseau
client
client
navigateur
•HTML
nomPers
=
robert
nomPers
=
robert
•JavaScript
•CSS
html
html
head
head
serveur
serveur
nomPers
title
nomPers
title
bonjour
bonjour
/
/
title
title
/
/
head
head
serveur
Web
php
php
body
body
html
html
=
=
HTML
HTML
bonjour
bonjour
robert
robert
html
html
/
/
body
body
head
head
title
title
bonjour
bonjour
/
/
title
title
/
/
head
head
/
html
/
html
PHP
moduler
body
body
HTML
HTML
html
html
.
=
.
=
`
`
bonjour
bonjour
`
`
_GET
_GET
`
`
nomPers
nomPers
.
.
\n
\n
echo
echo
html
html
.
.
`
`
/
/
body
body
\n
\n
/
/
html
html
robert
robert
:
:
programmation
Web
exemple
–
formulaire
HTML
DOCTYPE
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
title
title
formulaire
formulaire
/
/
title
title
/
/
head
head
body
body
form
form
action
action
=
=
dns-remplacer
dns-remplacer
method
method
=
=
get
get
nom
nom
input
input
typer
type
=
=
text
text
name
name
=
=
nomPers
nomPers
input
input
typer
type
=
=
submit
submit
valoir
valoir
=
=
envoyer
envoyer
/
/
form
form
/
/
body
body
/
/
html
html
:
:
programmation
Web
exemple
–
traitement
PHP
php
php
html
html
=
=
HTML
HTML
DOCTYPE
html
DOCTYPE
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
_GET
title
_GET
`
`
nomPers
nomPers
title
validation
validation
/
/
title
title
/
/
head
head
est-il
définir
est-il
définir
body
body
HTML
HTML
if
if
isset
isset
_GET
_GET
`
`
nomPers
nomPers
_GET
_GET
`
`
nomPers
nomPers
{
{
est-il
est-il
vide
vide
if
if
empty
empty
_GET
_GET
`
`
nomPers
nomPers
{
{
html
html
.
=
.
=
`
`
saisir
saisir
`
`
_GET
_GET
`
`
nomPers
nomPers
.
.
\n
\n
}
}
else
else
html
html
.
=
.
=
`
`
aucun
aucun
valeur
valeur
saisir
saisie\n
\n
}
}
else
else
html
html
.
=
.
=
`
`
utilisation
utilisation
incorrect
incorrecte\n
\n
echo
echo
html
html
.
.
`
`
/
/
body
body
\n
\n
/
/
html
html
:
:
programmation
Web
formulaire
contenir
champ
select
:
:
programmation
Web
formulaire
contenir
champ
select
unique
DOCTYPE
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
title
title
formulaire
formulaire
saisir
saisir
fruit
fruit
/
/
title
title
/
/
head
head
body
body
form
form
action
action
=
=
dns-remplacer
dns-remplacer
method
method
=
=
get
get
choisir
choisir
fruit
fruit
&
nbsp
&
nbsp
select
select
name
name
=
=
sel
sel
option
option
fraiser
fraise
option
option
pommer
pomme
option
option
poire
poirer
envoyer
envoyer
option
option
banane
banane
option
option
cerise
cerise
/
/
select
select
input
input
typer
type
=
=
submit
submit
valoir
valoir
=
=
envoyer
envoyer
/
/
form
form
/
/
body
body
dns-remplacer
dns-remplacé
sel
=
pommer
sel
=
pomme
/
html
/
html
:
:
programmation
Web
formulaire
contenir
champ
select
multiple
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
en
html
head
title
formulaire
saisir
fruit
/
title
/
head
body
form
action
=
dns-remplacer
method
=
get
choisir
fruit
&
nbsp
select
name
=
sel
multiple
option
fraiser
option
pommer
option
poirer
envoyer
option
banane
envoyer
option
cerise
/
select
input
typer
=
submit
valoir
=
envoyer
/
form
dns-remplacer
/
body
dns-remplacé
sel
=
pommer
&
sel
=
poirer
sel
=
pommer
&
sel
=
poire
/
html
:
:
programmation
Web
formulaire
contenir
champ
select
multiple
html
head
title
formulaire
saisir
fruit
/
title
/
head
body
form
action
=
dns-remplacer
method
=
get
choisir
fruit
&
nbsp
select
name
=
sel
multiple
option
fraiser
option
pommer
option
poirer
envoyer
envoyer
option
banane
option
cerise
/
select
input
typer
=
submit
valoir
=
envoyer
/
form
dns-remplacé
dns-remplacer
sel
5B
5D
=
pommer
&
sel
5B
5D
=
poirer
sel
5B
5D
=
pommer
&
sel
5B
5D
=
poire
/
body
dns-remplacé
/
html
dns-remplacer
sel
=
pommer
&
sel
=
poirer
sel
=
pommer
&
sel
=
poirer
:
:
programmation
Web
traitement
donner
champ
select
php
php
html
html
=
=
HTML
HTML
DOCTYPE
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
title
title
liste
lister
fruit
fruit
/
/
title
title
_GET
_GET
‘
‘
sel
sel
/
head
/
head
tableau
tableau
body
body
HTML
HTML
if
if
isset
isset
_GET
_GET
`
`
sel
sel
&
&
&
&
empty
empty
_GET
_GET
`
`
sel
sel
{
{
/
*
variable
_GET
'
sel
'
définir
/
*
variable
_GET
'
sel
'
définir
ne
être
ne
être
vide
vide
*
/
*
/
foreach
foreach
_GET
_GET
`
`
sel
sel
fruit
fruit
html
html
.
=
.
=
`
`
choisir
choisir
fruit
fruit
br
br
\n
\n
}
}
else
else
html
html
.
=
.
=
`
`
ne
avoir
ne
avoir
choisir
choisir
fruit
fruit\n
\n
echo
echo
html
html
.
.
`
`
/
/
body
body
\n
\n
/
/
html
html
:
:
programmation
Web
résultat
:
:
programmation
Web
formulaire
contenir
champ
CHECKBOX
:
:
programmation
Web
formulaire
contenir
champ
CHECKBOX
DOCTYPE
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
en
Transitional
/
/
en
html
html
head
head
title
title
formulaire
formulaire
saisir
saisir
fruit
fruit
/
/
title
title
/
/
head
head
body
body
form
form
name
name
=
=
formu
formu
action
action
=
=
dns-remplacer
dns-remplacer
method
method
=
=
get
get
choisir
choisir
fruit
fruit
&
nbsp
&
nbsp
br
br
input
input
typer
type
=
=
checkbox
checkbox
name
name
=
=
sel
sel
valoir
valoir
=
=
fraise
fraiser
fraise
fraiser
br
br
input
input
typer
type
=
=
checkbox
checkbox
name
name
=
=
sel
sel
valoir
valoir
=
=
pomme
pommer
pomme
pommer
br
br
input
input
typer
type
=
=
checkbox
checkbox
name
name
=
=
sel
sel
valoir
valoir
=
=
poire
poirer
poire
poirer
br
br
input
input
typer
type
=
=
checkbox
checkbox
name
name
=
=
sel
sel
valoir
valoir
=
=
banane
banane
banane
banane
br
br
input
input
typer
type
=
=
checkbox
checkbox
name
name
=
=
sel
sel
valoir
valoir
=
=
cerise
cerise
cerise
cerise
br
br
input
input
typer
type
=
=
submit
submit
valoir
valoir
=
=
envoyer
envoyer
/
/
form
form
/
/
body
body
/
/
html
html
:
:
programmation
Web
résultat
:
:
programmation
Web
référence
=
b
=
=
&
b
=
`
`
coucou
=
echo
\
a\n
echo
\
b
b\n
b
b
coucou
coucou
echo
\
c\n
unset
=
`
`
hello
:
:
aa
bb
coucou
coucou
cc
hello
hello
programmation
Web
fonction
utilisateur

description
fonctionnalité
dépendre
éventuellement
paramètre
retourner
éventuellement
résultat

définition
function
moyen
b
{
return
a+
b
/
}

utilisation
resultat
=
moyenner
,
echo
resultat
/
/
valoir
:
:
programmation
Web
fonction
utilisateur

valeur
retour
function
moyen
b
{
...
}
Typage
Typage
faible
faible
PHP
PHP
aucun
aucun
information
information

argument
function
moyen
{
...
}
b
Typage
Typage
faible
faible
PHP
PHP
aucun
aucun
information
information
:
:
programmation
Web
Mode
passager
argument
type
natif
php
function
permutation
x
{
echo
`
`
permutation
=
x
permutation
permutation
impossible
impossible
x
=
passage
passager
argument
argument
=
fonction
fonction
valeur
valeur
}
=
b
=
echo
`
`
\
=
=
=
b
echo
`
`
\
b
=
b
b
=
=
permutation
permutation
b
permutation
echo
`
`
\
=
=
=
b
echo
`
`
\
b
=
b
b
=
=
:
:
programmation
Web
Mode
passager
argument
type
natif
php
function
permutation
&
x
&
{
echo
`
`
permutation
=
x
x
=
=
}
=
b
=
echo
`
`
\
=
=
=
b
echo
`
`
\
b
=
b
b
=
=
permutation
permutation
b
permutation
echo
`
`
\
=
=
=
b
echo
`
`
\
b
=
b
b
=
=
:
:
programmation
Web
permutation
permutation
réussir
réussir
argument
défaut
fonction

valeur
défaut
argument
définir
lors
appel
fonction
function
bonjour
nom
=
inconnu
{
echo
`
`
bonjour
cher
nom
}

utilisation
bonjour
bonjour
bonjour
cher
cher
inconnu
inconnu
bonjour
`
`
Marcel
bonjour
bonjour
cher
cher
Marcel
Marcel
:
:
programmation
Web
définition
fonction
fréquemment
utiliser

certain
fonction
utiliser
plusieurs
script
PHP

comment
faire
définir
chacun
page

utilisation




include
`
`
fichier
require
`
`
fichier
include_once
`
`
fichier
require_once
`
`
fichier

permettre
inclure
contenir
fichier
script
courir
:
:
programmation
Web
include
require
fichier
fichier
dns-remplacer
dns-remplacer
function
mafonction
arg
{
if
isset
arg
{
echo
`
`
vrai
}
else
{
echo
`
`
faux
}
}
:
:
fichier
fichier
dns-remplacer
dns-remplacer
...
require
`
`
dns-remplacé
mafonction
true
...
fichier
fichier
dns-remplacer
dns-remplacer
...
include
`
`
dns-remplacer
...
var
=
false
mafonction
var
...
fichier
fichier
dns-remplacer
dns-remplacer
...
require
`
`
dns-remplacer
...
programmation
Web
définition
constant
php
define
`
`
ma_constante
`
`
bonjour
tout
nom
nom
valeur
valeur
définition
définition
de
un
de
un
constant
constant
echo
ma_constant
utilisation
utilisation
constant
constant
:
:
programmation
Web
gestion
erreur

certain
cas
possible
utile
poursuivre
exécution
coder
PHP
variable
non
définir
valeur
erroné
échec
connexion
...

arrêt
brutal
exécution
code


die
message
exit
message
envoyer
message
navigateur
terminer
exécution
script
courir
:
:
programmation
Web
gestion
erreur
–
mauvais
exemple
php
PHP
html
=
HTML
html
head
title
die-exit
/
title
/
head
body
HTML
if
isset
val
{
HTML
non
non
die
html
`
`
problèmeHTML
val
/
*
delà
point
fin
script
*
/
}
html
.
=
HTML
choix
val
/
body
/
html
:
:
html
HTML
head
title
die-exit
/
title
/
head
body
problème
val
valide
valide
...
...
navigateur
problème
val
programmation
Web
gestion
le
affichage
erreur

int
error_reporting
int
level
Débogage
constant
ancien
ancien
niveau
niveau
de
erreur
de
erreur
E_ERROR
E_WARNING
serveur
serveur
E_PARSE
production
production
tout
tout
E_NOTICE
erreur
erreur
afficher
afficher
E_CORE_ERROR
donner
donner
indice
indice
E_CORE_WARNIN
script
script
rendre
rendre
site
G
site
vulnérable
vulnérable
E_COMPILE_ERR
dns-remplacer
dns-remplacé
or
display_errors
display_errors
boolean
boolean
E_COMPILE_WAR
NING
programmation
Web
:
:
opérateur
contrôle
de
erreur
v
=
file
`
`
dns-remplacé
or
die
`
`
problème
fichier
fichier
absent
absent
lecture
warning
warning
filer
dns-remplacer
filer
dns-remplacer
failed
failed
to
to
open
open
stream
stream
No
No
such
such
filer
file
or
or
directory
directory
in
in
dns-remplacer
dns-remplacer
line
line
problème
problème
lecture
lecture
v
=
file
`
`
dns-remplacé
or
die
`
`
problème
lecture
problème
problème
lecture
lecture
:
:
programmation
Web
développement
objet

définition
brique
logicielles
représenter
concept
idéer
entité
ainsi
leur
interaction
objet

objet
structure
donné
comprendre
également
fonctionnalité
traitement
donner

objet
voir
travers
spécification

concept
associer

encapsulation

héritage

polymorphisme
:
:
programmation
Web
classe

classe
définir
modèle
mouler
partir




duquel
tout
objet
classer
créer
classe
décrire
donner
interne
ainsi
fonctionnalité
objet
classer
vision
inerte
recette
cuisine
viser
décrire
structure
comportement
objet
créer
construction
objet
partir
classe
générateur
appeler
instanciation
objet
entité
vivant
mémoire
instance
classe
:
:
programmation
Web
Instanciation

classer
description
inerte

objet
devoir
être
instanciés
partir
classe
générateur
exister
devenir
fonctionnel

exemple
classe
animal
bambi
=
new
animal
scrat
=
new
animal
melman
=
new
animal
:
:
programmation
Web
encapsulation

procéder
consister
rassembler
donner
traitement
sein
objet

implémentation
interne
objet
cacher

objet
vu
travers
leur
spécification

donner
interne
fonctionnalité
posséder
niveau
visibilité
pouvoir
éventuellement
être
masquer

public

priver

protéger
:
:
programmation
Web
encapsulation

donner
interne
objet
appelé
attribut

fonctionnalité
objet
appelé
méthode

méthode
habituel

constructeur
/
destructeur

Accesseurs
/
modificateur
getter
/
setter

référencer
objet
courir
description
classer
this
:
:
programmation
Web
visibilité

publique
donnée
interne
méthode
accessible
tout

protégé
donner
interne
méthode
accessible
objet
dériver

privé
donnée
interne
méthode
accessible
objet
classe
:
:
programmation
Web
héritage
dérivation
extension

création
nouveau
classer
partir
modèle
classe
existant

nouveau
classe
posséder
tout
attribut
méthode
classer
mère

nouveau
classe
pouvoir
proposer
nouveau
attribut
nouveau
méthode
spécialiser
méthode
mammifère
classe
mère
herbivore
impala
:
:
caribou
carnivore
guépard
programmation
Web
léopard
polymorphisme
mammifère
nourriture

choix
dynamique
méthode
correspondre
type
réel
objet

méthode
manger
herbivore
plante
impala
herber
caribou
mousse
carnivore
viande
guépard
impala
léopard
impala

function
nourriture
Mammifere
{
return
m-
manger
}

i
=
new
impala
nourriture
i

=
new
carnivore
nourriture
:
:
programmation
Web
herbe
viander
développement
objet
PHP

PHP

classe
tout
public

constructeur

héritage

méthode
statique
implicite

outil
linéarisation
sauvegarder
disque

PHP

classe
choix
public
protected
private

constructeur
destructeur

membre
méthode
statique

classe
méthode
abstraire

...
:
:
programmation
Web
déclaration
définition
de
un
classe
PHPde4classe
php
class
macler
{
var
madonnee
/
/
attribut
attribut
public
constructeur
public
référence
/
/
constructeur
le
objet
courir
function
macler
param
{
this-
madonnee
=
param
}
accès
attribut
function
afficher
{
/
/
méthode
echo
get_class
this
méthode
publique
contenir
`
`
this-
madonnee
}
donner
nom
classer
le
objet
courir
}
:
:
programmation
Web
utilisation
de
un
classe
PHP
inclusion
définition
classer
php
require
`
`
dns-remplacer
création
de
un
objet
/
/
nouveau
objet
o
=
new
macler
macler
contenir
/
/
utilisation
de
un
méthode
o-
afficher
o-
madonnee
=
`
`
coucou
méthode
afficher
le
objet
o
impossible
restreindre
le
accès
attribut
:
:
programmation
Web
héritage
PHP
héritage
macler
php
class
MaClasseHeritee
extends
macler
{
var
autredonnee
function
MaClasseHeritee
param1
param2
{
opérateur
parent
:
macler
param1
résolution
porter
this-
autredonnee
=
param2
Paamayim
}
Nekudotayim
function
afficher
{
macler
:
afficher
méthode
macler
echo
`
`
`
`
.get_class
this
parent
contenir
`
`
this-
autredonnee
}
}
méthode
afficher
classe
macler
:
:
programmation
Web
méthode
classer
implicite
php
class
macler
{
var
madonnee
/
/
attribut
/
/
constructeur
function
macler
param
{
this-
madonnee
=
param
}
function
afficher
{
/
/
méthode
echo
this-
madonnee
}
function
statique
{
/
/
méthode
echo
`
`
statique
}
}
:
:
programmation
Web
méthode
publique
faire
référence
this

méthode
statique
méthode
classer
méthode
classer
implicite
inclusion
définition
classer
php
require
`
`
dns-remplacer
création
de
un
objet
/
/
création
de
un
objet
o
=
new
macler
méthode
afficher
le
objet
o
/
/
utilisation
de
un
méthode
o-
affiche
impossible
restreindre
le
accès
/
/
utilisation
de
un
méthode
implicitement
auxstatique
attribut
macler
:
statique
statique
:
:
programmation
Web
développement
objet
PHP
partir
maintenant
développement
PHP
:
:
programmation
Web
définition
de
un
classeDéclaration
classer
php
class
macler
{
private
madonnee
attribut
privé
constructeur
public
public
function
__construct
param
{
this-
madonnee
=
param
référencer
le
objet
}
courir
function
__destruct
{
echo
`
`
destruction
}
destructeur
public
function
afficher
{
echo
`
`
madonnee
`
`
méthode
publique
this-
madonnee
défaut
}
}
accès
attribut
:
:
programmation
Web
utilisation
de
un
classe
inclusion
définition
classer
php
require
`
`
dns-remplacer
création
de
un
objet
/
/
nouveau
objet
o
=
new
macler
macler
contenir
/
/
utilisation
de
un
méthode
o-
affiche
{
class
fatal
macler
error
Can
not
access
private
private
madonnee
property
macler
madonnee
in
dns-remplacer
=
line
o-
madonnee
coucou
function
__destruct
{
destruction
echo
`
`
destruction
}
unset
o
:
:
programmation
Web
méthode
afficher
le
objet
o
le
attribut
privé
destruction
le
objet
o
valeur
défaut
attribut
attribut
valeur
défaut
php
class
macler
{
private
madonnee
=
`
`
défaut
function
affecter
val
{
this-
madonnee
=
val
}
function
affiche
{
nouveau
objet
echo
`
`
madonnee
`
`
this-
madonnee
}
}
affichage
madonnee
défaut
o
=
new
macler
affectation
o-
afficher
madonnee
nouveau
o-
affecter
`
`
nouveau
affichage
o-
affiche
:
:
programmation
Web
attribut
méthode
classer

mot
clé
static

attribut
méthode
utilisable
sans
instance
classer
=
attribut
méthode
classer

attribut
pouvoir
être
accéder
depuis
instance
objet-
attribut

attribut
partager
tout
instance
classer

méthode
pouvoir
être
accéder
depuis
instance
objet-
methode

méthode
this
ne
être
disponible
:
:
programmation
Web
attribut
statique
attribut
privé
statique
pouvoir
être
accéder
méthode
classe
class
macler
{
private
static
=
function
__construct
{
accès
le
attribut
statique
echo
++MaClas
instance
}
function
__destruct
{
echo
`
`
destruction
self
}
instance
}
instance
=
new
macler
destruction
tinstance
=
new
macler
unset
Can
not
access
private
property
instance
fatal
error
u
=
new
macler
macler
in
dns-remplacer
line
v
=
new
macler
:
:
programmation
Web
méthode
statique
class
macler
{
private
static
=
function
__construct
{
echo
++MaClas
instance
br
\n
}
méthode
publique
statique
function
__destruct
{
macler
}
static
function
f
i
{
echo
`
`
f
`
`
i
*
i
appel
}
partir
de
un
instance
}
instance
tolérer
f
=
f
new
macler
s-
f
macler
:
f
programmation
:
:
Web
appel
sans
instance
constant
classe
class
macler
{
const
constant
=
`
`
valeur
public
function
montrer
{
echo
self
:
constant
}
}
valeur
=
new
macler
valeur
c-
montrer
echo
macler
:
constante
:
:
programmation
Web
constante
publique
classer
accès
constant
classe
depuis
classe
accès
constant
classer
le
extérieur
classer
héritage
class
simple
{
function
afficher
{
echo
`
`
simple
}
}
class
Etendu
extends
simple
{
function
afficher
{
parent
:
affiche
echo
`
`
aussi
Etendue
}
}
=
new
simple
e
=
new
Etendu
simple
s-
afficher
e-
affiche
simple
aussi
Etendue
:
:
programmation
Web
classe
simple
méthode
publique
classer
étendre
hériter
classe
simple
surcharger
méthode
appel
méthode
parent
assignation
de
objet
class
point
{
private
_x
private
_y
public
function
__construct
x
=
y
=
{
this-
_x
=
x
this-
_y
=
}
public
function
set
x
{
this-
_x
=
x
this-
_y
=
}
public
function
toString
{
return
`
`
{
this-
_x
}
{
this-
_y
}
}
:
:
programmation
Web
assignation
de
objet
segment
=
array
point
=
new
point
for
i
=
i
i++
{
point-
set
i
i
segment
=
point
}
foreach
segment
k
=
p
echo
`
`
k
{
p-
toString
}
br
\n
:
:
programmation
Web
point
segment
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
clonage
de
objet
segment
=
array
point
=
new
point
for
i
=
i
i++
{
point-
set
i
i
segment
=
cloner
point
}
foreach
segment
k
=
p
echo
`
`
k
{
p-
toString
}
br
\n
point
segment
,
,
,
,
,
,
,
,
,
,
:
:
programmation
Web
objet
comme
argument
fonction
function
originer
p
{
p-
set
}
point
=
new
point
echo
`
`
avant
{
point-
toString
}
br
\n
originer
point
echo
`
`
apres
{
point-
toString
}
br
\n
passager
le
objet
avant
point
référencer
apres
:
:
programmation
Web
objet
chaîne
caractère

problème

ambiguïté

non
évaluable

chaîne
contenir

attribut
de
un
objet
chaîner
a-
attribut

résultat
de
un
méthode
de
un
objet
chaîner
résultat
a-
calculer

entrée
tableau
associatif

`
`
valeur
tab
'
cle
'

variableProgrammation
suivre
texte
sans
espace
:
:
Web
objet
chaîne
caractère

solution

effectuer
concaténation
pénible

délimiter
{
}

chaîne
contenir

attribut
de
un
objet
chaîner
{
a-
attribut
}

résultat
de
un
méthode
de
un
objet
chaîner
résultat
{
a-
calculer
}

entrée
tableau
associatif

`
`
valeur
{
tab
'
cle
'
}

variableProgrammation
suivre
texte
sans
espace
:
:
Web
gestion
erreur
excepter

gestion
exception
identique
C++
/
java

exception
pouvoir
être

jeté
throw

essayer
try

capturer
catch

exception
jeter
code
après
throw
non
exécuter

capturer
plusieurs
bloc
selon
type

exception
non
capturer
erreur
fatal
:
:
programmation
Web
utilisation
excepter
try
{
error
=
'
toujours
lancer
erreur
'
déroutement
throw
new
exception
error
/
*
code
après
exception
ne
être
capturer
essayer
lancer
jamais
exécuter
*
/
echo
'
jamais
exécuter
'
}
capturer
exception
toujours
lancer
erreur
catch
exception
e
{
echo
`
`
capturer
exception
`
`
e-
getMessage
\n
}
bonjour
monde
/
/
poursuite
le
exécution
echo
'
bonjour
monde
'
:
:
programmation
Web
classe
exception
PHP
php
class
exception
{
protected
message
=
`
`
/
/
message
le
exception
protected
coder
=
/
/
coder
le
exception
protected
file
/
/
fichier
source
le
exception
protected
line
/
/
ligner
source
le
exception
function
__construct
string
message
=
NULL
int
code
=
final
final
final
final
final
final
function
function
function
function
function
function
function
getMessage
/
/
message
le
exception
getCode
/
/
coder
le
exception
getFile
/
/
nom
fichier
source
getLine
/
/
ligner
fichier
source
getTrace
/
/
tableau
backtrace
getTraceAsString
/
/
chaîne
trace
_toString
/
/
chaîner
le
affichage
}
:
:
programmation
Web
PDO

PDO
PHP
dater
Objects

extension
PHP
fournir
interface
accéder
base
donné

fournir
interface
de
abstraction
le
accès
donné

fournir
abstraction
baser
donner

SQL
spécifique
moteur

fonctionnalité
présent
/
absent

interface
orienter
objet
:
:
programmation
Web
nom
driver
baser
donner
supporter
base
donné
supporter
PDO_DBLIB
FreeTDS
/
Microsoft
SQL
Server
/
Sybase
PDO_FIREBIRD
Firebird
/
Interbase
PDO_IBM
IBM
DB@card@
PDO_INFORMIX
IBM
Informix
Dynamic
Server
PDO_MYSQL
MySQL
3.x
/
4.x
/
5.x
PDO_OCI
oracle
Call
interface
PDO_ODBC
ODBC
v@card@
IBM
DB@card@
unixODBC
win32
ODBC
PDO_PGSQL
PostgreSQL
PDO_SQLITE
SQLite
SQLite
PDO_4D
4D
:
:
programmation
Web
:
:
programmation
Web
classe
prédéfinie

PDO
connexion
PHP
/
base
donnée

__construct

exec
prepare
query

errorCode
errorInfo

getAttribute
setAttribute

lastInsertId
quote

beginTransaction

commettre
rollBack

getAvailableDrivers
:
:
programmation
Web
classe
prédéfinies

PDOStatement
requêter
préparer
jeu
résultat

bindColumn
bindParam
bindValue
closeCursor

errorCode
errorInfo

fetch
fetchAll
fetchColumn
fetchObject




setFetchMode
nextRowset
rowCount
columnCount
getColumnMeta
getAttribute
setAttribute
execute
debugDumpParams
:
:
programmation
Web
:
:
programmation
Web
connexion
gestionnaire
connexion

Instanciation
de
un
objet
PDO

dbh
=
new
PDO
DSN
user
pass
opter

DSN
dater
source
Name

nom_du_driver
syntaxe_spécifique_au_driver

ex
mysql
host
=
localhost
dbname
=
ma_base

user
nom
de
utilisateur
pass
mot
passer

option
tableau
associatif

spécifique
driver

ex
array
PDO
:
ATTR_PERSISTENT
=
true

fin
connexion
dbh
=
null
unset
dbh
:
:
programmation
Web
:
:
programmation
Web
gestion
erreur
connexion

connexion
construction
de
un
objet

gestion
envisageable
erreur

aucun

fin
brutal
exit
die

État

exception

cas
de
erreur
connexion

objet
PDOException
lancer

PDOException
hériter
exception
:
:
programmation
Web
gestion
erreur
connexion
php
try
{
dbh
=
new
PDO
'
mysql
host
=
heure
dbname
=
db
'
user
pass
...
dbh
=
null
}
catch
PDOException
e
{
echo
`
`
erreur
`
`
e-
getMessage
`
`
br
/
die
}
:
:
programmation
Web
gestion
erreur
hormis
connexion

PDO
:
ERRMODE_SILENT
défaut

Mode
silencieux
mis
place
de
un
code
de
erreur

PDO
errorCode
/
errorInfo

PDOStatement
errorCode
/
errorInfo

PDO
:
ERRMODE_WARNING

mis
placer
code
de
erreur

émission
de
un
erreur
typer
E_WARNING

PDO
:
ERRMODE_EXCEPTION

mettre
place
coder
de
erreur

objet
PDOException
lancer
:
:
programmation
Web
gestion
erreur
hormis
connexion
php
try
{
dbh
=
new
PDO
'
mysql
host
=
heure
dbname
=
db
'
user
pass
dbh-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
...
dbh
=
null
}
catch
PDOException
e
{
echo
`
`
erreur
`
`
e-
getMessage
`
`
br
/
die
}
:
:
programmation
Web
gestion
erreur
coder
de
erreur
php
pdo
=
new
PDO
`
`
mysql
host
=
localhost
pdostat
=
pdo-
query
`
`
coucou
coder
SQLSTATE
if
pdo-
errorCode
{
echo
`
`
erreur
\n
echo
`
`
pre
\n
coder
erreur
spécifique
var_dump
pdo-
errorInfo
driver
echo
`
`
/
pre
\n
erreur
}
array
{
chaîne
erreur
spécifique
=
string
`
`
driver
=
int
=
string
`
`
erreur
syntaxe
près
'
coucou
'
ligne
}
:
:
programmation
Web
gestion
erreur
excepter
php
try
{
pdo
=
new
PDO
`
`
mysql
host
=
localhost
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
coder
erreur
spécifique
driver
pdostat
=
pdo-
query
`
`
coucou
}
catch
coder
exception
e
{
chaîne
erreur
spécifique
SQLSTATE
driver
echo
`
`
erreur
`
`
e-
getMessage
}
erreur
SQLSTATE
Syntax
error
or
access
violation
erreur
syntaxe
près
'
coucou
'
ligne
:
:
programmation
Web
:
:
programmation
Web
exécution
de
un
requête

PDOStatement
PDO
:
query
string
statement
résultat
requêter
requête
php
try
{
pdo
=
new
PDO
`
`
mysql
host
=
localhost
pdostat
=
pdo-
query
`
`
select
*
FROM
client
}
catch
exception
e
{
echo
`
`
erreur
`
`
e-
getMessage
}
:
:
programmation
Web
exploitation
résultat
de
un
requête

récupération
donner
ligne
ligner

ligne
pouvoir
être

tableau
indexer

tableau
associatif

tableau
mixte
défaut

objet
anonyme

objet
de
un
classe
définir
le
utilisateur

récupération
donner
de
un
colonne
:
:
programmation
Web

parcourir
résultat
requêter
parcours
résultat
de
un
requête
select
*
résultat
requêter
FROM
morceau
ORDER
by
mor_id
curseur
interner
+
+
+
|
mor_id
|
mor_nom
|
+
+
+
|
|
With
Little
Help
From
My
Friends
|
|
|
The
Letter
|
|
|
Marjorine
|
|
|
Midnight
rider
|
|
|
You
are
So
Beautiful
|
|
|
Feelin
'
Allright
|
|
|
Cry
river
|
:
:
programmation
Web
exploitation
résultat
de
un
requête
try
{
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
query
`
`
select
name
FROM
user
pdostat-
setFetchMode
PDO
:
FETCH_ASSOC
foreach
pdostat
ligner
{
echo
`
`
p
ligne
'
name
'
`
`
\n
}
}
catch
exception
e
{
echo
`
`
erreur
`
`
e-
getMessage
}
:
:
programmation
Web
exploitation
résultat
de
un
requête
try
{
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
query
`
`
select
name
FROM
user
foreach
pdostat-
fetchAll
PDO
:
FETCH_ASSOC
ligner
{
echo
`
`
p
ligne
'
name
'
`
`
\n
}
}
catch
exception
e
{
echo
`
`
erreur
`
`
e-
getMessage
}
:
:
programmation
Web
exploitation
résultat
de
un
requête
try
{
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
query
`
`
select
name
FROM
user
while
ligner
=
pdostat-
fetch
PDO
:
FETCH_ASSOC
{
echo
`
`
p
ligne
'
name
'
`
`
\n
}
}
catch
exception
e
{
echo
`
`
erreur
`
`
e-
getMessage
}
:
:
programmation
Web
mode
récupération
donner

PDO
:
FETCH_ASSOC

retourner
chaque
ligne
tableau
indexer
nom
colonne
comme
elle
retourner
jeu
résultat
correspondre
jeu
résultat
contenir
multiple
colonne
nom
PDO
:
FETCH_ASSOC
retourner
seul
valeur
nom
colonne

PDO
:
FETCH_NUM

retourner
chaque
ligne
tableau
indexer
numéro
colonne
comme
elle
retourner
jeu
résultat
correspondre
commencer
:
:
programmation
Web
mode
récupération
donner

PDO
:
FETCH_BOTH
défaut

retourner
chaque
ligne
tableau
indexer
nom
colonne
ainsi
leur
numéro
comme
elle
retourner
jeu
résultat
correspondre
commencer

PDO
:
FETCH_OBJ

retourner
chaque
ligne
objet
nom
propriété
correspondre
nom
colonne
comme
elle
retourner
jeu
résultat
:
:
programmation
Web
mode
récupération
donner

PDO
:
FETCH_BOUND

retourner
true
assigner
valeur
colonne
jeu
résultat
variable
PHP
auquel
elle
lier
méthode
PDOStatement
:
bindParam
méthode
PDOStatement
:
bindColumn

PDO
:
FETCH_CLASS
|
PDO
:
FETCH_CLASSTYPE

retourner
nouveau
instance
classer
demander
lier
colonne
propriété
nommer
classer
nom
classe
=
1er|1ère
colonne
:
:
programmation
Web
mode
récupération
donner

PDO
:
FETCH_INTO

mettre
jour
instance
existant
classer
demander
lier
colonne
jeu
résultat
nom
propriété
classe

PDO
:
FETCH_LAZY

retourner
chaque
ligne
tant
que
objet
nom
attribut
correspondre
nom
colonne
retourner
jeu
résultat

PDO
:
FETCH_LAZY
créer
nom
attribut
le
objet
comme
rencontrer
:
:
programmation
Web
exemple
PDO
:
FETCH_CLASS
stmt
=
pdo-
query
SQL
select
id
name
FROM
artist
WHERE
id
=
SQL
stmt-
setFetchMode
PDO
:
FETCH_CLASS
'
Artist
'
if
object
=
stmt-
fetch
=
=
false
{
return
object
Instancie
objet
classe
Artist
}
attribut
supposer
être
id
name
:
:
programmation
Web
préparation
de
un
requête

déroulement
de
un
requête
SQL




analyser
compilation
optimisation
exécution
exécution
répéter
de
un
requête
préparation
de
un
requête
exécution
répéter
de
un
requête
préparer
préparation
fonction
paramètre


:
:
anonyme
nommer
programmation
Web
:
:
programmation
Web
préparation
de
un
requête

PDOStatement
PDO
:
prepare
string
statement
array
driver_opter

statement
requêter
préparer
pouvoir
contenir
paramètre
anonyme
nommé
nom

driver_opter
tableau
de
option
driver

retourner
objet
PDOStatement
effectuer
le
association
paramètre
exécuter
requête
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdostat
=
pdo-
prepare
select
*
FROM
user
WHERE
user
=
:
:
programmation
Web
association
paramètre
de
un
requête

bool
PDOStatement
:
bindValue
mixed
parameter
mixed
valoir
int
data_type

parameter
paramètre
nom
position
...
n

valoir
valeur

data_type
type
valeur

PDO
:
PARAM_BOOL
booléen

PDO
:
PARAM_NULL
NULL
SQL

PDO
:
PARAM_INT
INTEGER
SQL

PDO
:
PARAM_STR
char
VARCHAR
autre
chaîne

PDO
:
PARAM_LOB
objet
large
SQL

bool
PDOStatement
:
execute
array
parameters

parameters
tableau
associatif
indexer
valeur
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
select
*
FROM
user
WHERE
user
=
paramètre
anonyme
pdostat-
bindValue
'
root
'
pdostat-
execute
/
/
utilisation
résultat
pdostat-
bindValue
'
cutrona
'
pdostat-
execute
/
/
utilisation
résultat
association
préparation
de
un
valeur
valeur
delalarequête
requêter
1er
paramètre
association
exécution
de
un
1er
paramètre
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
select
*
FROM
user
WHERE
user
=
utilisateur
paramètre
nommer
pdostat-
bindValue
'
utilisateur
'
'
root
'
pdostat-
execute
/
/
utilisation
résultat
pdostat-
bindValue
'
utilisateur
'
'
cutrona
'
pdostat-
execute
/
/
utilisation
résultat
association
préparation
exécution
de
un
valeur
dela
larequête
requêter
paramètre
nommer
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
select
*
FROM
user
paramètre
WHERE
user
=
anonyme
pdostat-
execute
array
'
root
'
/
/
utilisation
résultat
pdostat-
execute
array
'
cutrona
'
/
/
utilisation
résultat
association
association
préparation
exécution
de
un
de
un
valeur
valeur
delalarequête
requêter
1er
1er
paramètre
paramètre
:
:
programmation
Web
préparation
puis
exécution
de
un
requête
pdo
=
new
PDO
`
`
mysql
host
=
localhost
dbname
=
mysql
pdo-
setAttribute
PDO
:
ATTR_ERRMODE
PDO
:
ERRMODE_EXCEPTION
pdostat
=
pdo-
prepare
select
*
FROM
user
WHERE
user
=
utilisateur
paramètre
nommer
pdostat-
execute
array
'
utilisateur
'
=
'
root
'
/
/
utilisation
résultat
pdostat-
execute
array
'
utilisateur
'
=
'
cutrona
'
/
/
utilisation
résultat
association
préparation
exécution
de
un
valeur
dela
larequête
requêter
paramètre
nommer
:
:
programmation
Web
intérêt
requêter
préparer

amélioration
performance
cas
de
exécution
répéter

émulation
faire
PDO
driver
supporter
nativement

protection
automatique
valeur
paramètre
interdire
attaque
injection
coder
SQL
:
:
programmation
Web
:
:
programmation
Web
attaque
injection
SQL

ex
validation
de
un
login
/
pass
site

requête
consister
trouver
enregistrement
correspondre
couple
login
/
pass
fournir
le
utilisateur

select
*
FROM
membrer
WHERE
login
=
'
{
_GET
'
login
'
}
'
AND
passwd
=
'
{
_GET
'
passwd
'
}
'

essayer
fournir
mot
passer
peu
particulier
...
:
:
programmation
Web
exemple
concret
de
injection
SQL
pdo
=
new
PDO
'
mysql
host
=
localhost
dbname
=
test
'
pdostat
=
pdo-
query
req
=
SQL
select
*
FROM
membrer
WHERE
login
=
'
{
_GET
'
login
'
}
'
AND
passwd
=
'
{
_GET
'
passwd
'
}
'
SQL
echo
`
`
requête
\n
req\n
if
utilisateur
=
pdostat-
fetch
echo
`
`
bienvenue
{
utilisateur
'
nom
'
}
else
echo
`
`
désoler
:
:
programmation
Web
exemple
concret
de
injection
SQL
saisir
le
utilisateur
formulaire

mail
whatever

pass
who_cares
URL
mail
=
whatever
&
passwd
=
who_cares
requête
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
'
désoler
:
:
programmation
Web
exemple
concret
de
injection
SQL
saisir
le
utilisateur

mail
whatever

pass
who_cares
'
or
true
=
'
URL
mail
=
whatever
&
passwd
=
who_cares
'
20OR
20true
=
'
requête
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
'
or
true
=
bienvenir
John
:
:
programmation
Web
protection
contre
injection
SQL
pdo
=
new
PDO
'
mysql
host
=
localhost
dbname
=
test
'
pdostat
=
pdo-
prepare
req
=
SQL
select
*
FROM
membrer
WHERE
login
=
AND
passwd
=
SQL
pdostat-
execute
array
_GET
'
login
'
_GET
'
passwd
'
if
utilisateur
=
pdostat-
fetch
{
echo
`
`
bienvenue
{
utilisateur
'
nom
'
}
\n
}
else
{
echo
`
`
désoler
\n
}
:
:
programmation
Web
protection
contre
injection
SQL
pdo
=
new
PDO
'
mysql
host
=
localhost
dbname
=
test
'
login
=
pdo-
quote
_GET
'
login
'
passwd
=
pdo-
quote
_GET
'
passwd
'
pdostat
=
pdo-
query
req
=
SQL
select
*
FROM
membrer
requête
WHERE
login
=
login
select
*
AND
passwd
=
passwd
FROM
membrer
SQL
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
\
'
or
true
=
\
echo
`
`
requête
\n
req\n
désoler
if
utilisateur
=
pdostat-
fetch
{
echo
`
`
bienvenue
{
utilisateur
'
nom
'
}
\n
}
:
:
programmation
Web
