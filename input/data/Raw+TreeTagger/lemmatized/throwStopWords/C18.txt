PHP
MYSQL
introduction

HTML
pager
destiner
être
publier
Internet
texte
afficher
+
instruction
mettre
pager

instruction
calcul
traitement
conditionnel


site
plus
plus
riche
information
nécessiter
croissant
améliorer
contenir
site

mettre
jour
manuel
trop
complexe




exemple
modifier
la|le
entêter
plusieurs
page
besoin
réponse
spécifique
lier
BD
exemple
passager
site
statique
site
dynamique
Web
dynamique
–
coter
client

traiter
navigateur

résultat
variable
fonction
navigateur

nécessiter
test
important

indépendant


serveur
rechargement
pager
tout
faire
local
confiance

source
programme
disponible

donnée
envoyé
serveur
fiable

baser
donner
stocker
chez
client
Web
dynamique
–
coter
serveur

le
interprétation
réaliser
serveur

indépendant
machiner
navigateur

`
`
compatible
tout
navigateur



échange
concerner
HTML
Json
autre
source
serveur
invisible
besoin
de
échange
entre
navigateur
serveur

rechargement

ajax
...
pager
chaque
modification
Web
dynamique
–
client
serveur

falloir
deux

script
côté
client
Javascript
calcul
traitement
simple

mettre
jour
pager
web
sans
rechargement
ajax


script
côté
serveur
Php
autre
calcul
traitement
plus
conséquent

requête
vers
base
donner

opération
sécuriser

langage
Php
-
histoire



PHP
Hypertext
PreProcessor
premier
version
PHP
Personal
home
page
sortir
version
actuel
sortie


version
ne
être
plus
maintenir
depuis
août
environ
site
web
dynamique
utiliser
php
langage
Php


langage
création
application
Web
exécution
coter
serveur

indépendant
plate-forme
utiliser

facile
combiner
serveur
Web
BD

logiciel



tout
WampServer
EasyPhp
...
gratuit
code
source
disponible
Ecriture
script
simple
inclusion
direct
Php
HTML
langage
Php

programme
se
exécuter
côté
serveur
Web

extension
.php
page
PHP

fichier
pouvoir
aussi
contenir
HTML

fichier
.php
stocker
serveur

désigner
URL
http
/
/
dns-remplacer
/
dns-remplacer

chargement
le
URL
provoquer
le
exécution
côté
serveur

script
Php
aller
généralement
créer
HTML
exemple

vouloir
créer
page
web
ci-dessous

nombre
quelconque
valeur
venir
de
un
formulaire
exemple
html
body
br
/
br
/
br
/
/
body
/
html
version
Javascript

insertion
javascript
baliser
script
boucler
for
classique

affichage
contenir
via
dns-remplacé

concaténation
chaîne
signer
+


exécuter
navigateur
html
body
script
typer
=
text
/
javascript
for
var
i
=
i
=
i++
dns-remplacer
i+
`
`
+i
*
i+
br
/
/
script
/
body
/
html
version
Php

insertion
Php
baliser
php
boucler
for
classique

affichage
contenir
via
echo

concaténation
chaîne
signer


exécuter
serveur
puis
envoyé
navigateur
html
body
php
for
i
=
i
=
i++
echo
i
`
`
i
*
i
`
`
br
/
/
body
/
html
différence
entre
Javascript
Php

Javascript
navigateur
demander
fichier
html

fichier
html
contenir
javascript
envoyer

navigateur
exécuter
javascript

le
affichage
faire
manière
dynamique


Php
navigateur
demander
fichier
php

serveur
exécuter
code
php
envoyer
résultat

pager
envoyer
navigateur
afficher

code
Php
–
autre
version

seul
partie
purement
dynamique
faire
Php
tout
rester
html
base

forcément
très
lisible

html
body
php
for
i
=
i
=
i++
{
php
echo
i
php
echo
i
*
i
br
/
php
}
/
body
/
html
code
Php
–
autre
version

tout
fichier
html
créer
Php

syntaxe
assez
lourd
php
echo
`
`
html
\n
echo
`
`
body
\n
for
i
=
i
=
i++
{
echo
i
`
`
i
*
i
`
`
br
/
\n
}
echo
`
`
/
body
\n
echo
`
`
/
html
\n
PHP
-
syntaxe
variable
variable

variable
toujours
précéder


type


i
variable
se
appeler
i
entier
réel
chaîne
caractère
objet
déclaration
expliciter
le
affectation
de
un
valeur
suffire


affectation
valeur
i
=
affectation
référence
variable
=
&
i


changement
typer
automatique


modification
i
modifier
comme
pointeur
compteur
=
premier
valeur
défaut
avant
le
affectation

attention
essayer
lire
contenir
variable

variable
local


visible
uniquement
intérieur
contexte
utilisation
variable
global


visible
tout
script
utilisation
instruction
`
`
global
accéder
variable
global
contexte
local
var
=
function
test
{
global
var
echo
var
}
chaîne
caractère

création
/
affectation
entre
guillemet


concaténation
signer


test
=
test
=
bonjour
`
`
revoir
substitution
possible
variable
le
intérieur
de
un
chaîne


x
test
x
similaire
`
`
x
`
`
test
x
substitution
apostrophe


'
x
test
x
'
/
/
`
`
x
test
x
encodage
caractère
spécial
obligatoire

\
\\
\n
\t
\
...
création
variable
dynamique

possibilité
créer
variable
dynamique

création
partir
contenir
de
un
autre
variable
var
=
test
var
=
test2
/
/
similaire
test
=
test2
echo
`
`
var
test
{
var
}
/
/
affiche
`
`
test
test2
test2
/
/
similaire
tableau
nom_variable
=
array
`
`
val0
`
`
val1
{
nom_variable
}
=
`
`
x
opération
chaîne

longueur
de
un
chaîne
strlen

strlen
str

comparaison
=
=

x

=
=
concaténation

x
.

nombreux
fonction
manipulation
disponible
fonction
chaîne

afficher
chaîne
caractère


retourner
morceau
de
un
chaîne
substr
chainer
debut
longueur



debut
pouvoir
être
négatif
partant
fin
longueur
facultatif
tout
fin
chaîner
retourner
couper
chaîne
morceau
délimiteur


echo
chaine
...
tableau
=
explode
delimiteur
chainer
instruction
instruction
conditionnel

if
then
else

définition
spécial
else
if
obligatoire
if
cond
{
}
elseif
cond
{
}
else
{
}
/
/
version
court
condition
instructionSiVrai
instructionSiFaux
instruction
conditionnel

switch
...
{
case
...
...
}
switch
expression
{
caser
`
`
break
caser
`
`
break
caser
`
`
break
default
}
boucle

boucle
for

for

initialisation
condition
increment
{
}
boucle
while

while
condition
{
}

do
{
}
while
condition
instruction
conditionnel

saut
inconditionnel


arrêt
inconditionnel


continu
terminer
le
itération
courant
boucler
break
terminer
boucle
complètement
arrêt
de
exécution
script

exit
terminer
script
for
i
=
i
=
i++
{
if
i
=
=
continuer
echo
i
`
`
br
/
}
for
i
=
i
=
i++
{
if
i
=
=
break
echo
i
`
`
br
/
}
/
/
affiche
valeur
sauf
/
/
affiche
jusqu
'
exclu
tableau
tableau

création
aider
fonction
array

tableau

=
array
`
`
deux
tableau
dimension

élément
pouvoir
être
différent
type

index
tableau
commencer

fonction

count
avoir
nombre
élément
tableau
tableau
simple

association
numéro
-
valeur
/
/
création
tableau
tableau
=
array
valeur0
valeur1
valeurN
/
/
affectation
de
un
élément
tableau
indicer
=
valeur
/
/
récupération
de
un
élément
variable
=
tableau
indice
/
/
parcours
version
for
i
=
i
count
tableau
i++
echo
i
`
`
tableau
i
`
`
br
/
/
/
parcours
version
foreach
tableau
valeur
echo
valeur
`
`
br
/
tableau
associatif

association
clé
de
index
-
valeur
/
/
création
tableau
tableau
=
array
cle0
=
val0
cle1
=
val1
cleN
=
valN
/
/
affectation
de
un
élément
tableau
`
`
cle
=
valeur
/
/
récupération
de
un
élément
variable
=
tableau
`
`
cle
/
/
parcours
version
foreach
tableau
cle
=
valeur
echo
cle
`
`
valeur
`
`
br
/
/
/
parcours
version
reset
tableau
while
list
cle
valeur
=
each
tableau
echo
cle
`
`
valeur
`
`
br
/
tableau
multidimensionnel

méthode
création
natif

imbriquer
tableau
/
/
création
de
un
tableau
deux
dimension
tab1
=
array
Val0
Val1
ValN
tab2
=
array
Val0
Val1
ValN
tableau
=
array
tab1
tab2
/
/
affectation
de
un
élément
tableau
indicer
indice
=
variable
/
/
récupération
de
un
élément
variable
=
tableau
indicer
indice
/
/
parcours
for
i
=
i
count
tableau
i++
for
j
=
count
tableau
i
j++
echo
i
`
`
`
`
tableau
i
`
`
br
/
fonction
tableau

taille
de
un
tableau


compter
nombre
de
occurrence
valeur
de
un
tableau



tab2
=
array_map
`
`
fonction
tab
filtrage
fonction
supprimer
élément
vérifier
critère


sortir
tab
/
/
selon
valeur
ksort
tab
/
/
selon
clef
Mappage
fonction
appliquer
fonction
tout
élément


tab2
=
array_count_values
tab
tri


count
tab2
=
array_filter
tab
`
`
fonction
intervertir
clef
valeur

tab2
=
array_flip
tab
fonction
fonction

typage
argument

valeur
retour


récursivité
possible
php
/
/
définition
fonction
factoriel
function
factoriel
{
if
return
else
return
*
factoriel
n-1
}
/
/
appel
fonction
afficahage
résultat
echo
factoriel
fonction

valeur
défaut
possible
argument




tout
argument
pouvoir
avoir
valeur
défaut
function
raciner
x
racine
=
{
}
appel
raciner
b
raciner
valeur
défaut
uniquement
dernier
argument

raciner
x
=
degre
impossible
/
/
seul
argument
alors
degre
valoir
défaut
function
raciner
x
degre
=
{
return
pow
x
,
/
degre
}
raciner
,
/
/
retourner
racine
cubique
racine
/
/
retourne
raciner
carrer
fonction

nombre
argument
inconnu

func_num_args
nombre
argument

func_get_arg
i
argument
i

numéroter
partir
/
/
fonction
calculer
produire
tout
argument
function
produire
{
prod
=
for
i
=
i
func_num_args
i++
prod
*
=
func_get_arg
i
return
prod
}
echo
produire
fonction

passager
paramètre
valeur


utiliser
copie
paramètre
de
appel
passager
paramètre
référence


utiliser
directement
paramètre
de
appel
modifiable
passager
paramètre
&
function
double
val
{
val
*
=
return
val
}
x
=
=
double
x
/
/
y
=
x
=
=
doubler
&
x
/
/
y
=
x
=
variable
global
statique

Static
permettre
conserver
variable
fonction
v
=
function
test
{
global
v
/
/
variable
global
static
x
=
/
/
variable
statique
x+
=
v
echo
x
`
`
br
/
}
test
/
/
affiche
test
/
/
affiche
appel
dynamique

similaire
variable
dynamique
function
bonjour
{
echo
`
`
bonjour
br
/
}
function
bonsoir
{
echo
`
`
bonsoir
br
/
}
/
/
création
de
un
variable
contenir
nom
de
un
fonction
salut
=
date
`
`
heure
=
`
`
bonjour
bonsoir
salut
fonction
fonction

vérifier
le
existence
de
un
fonction


retourne
lister
fonction
définir


tableau
=
get_defined_functions
enregistrer
fonction
exécuter
fin
script


function_exists
`
`
fonction
register_shutdown_function
`
`
fonction
...
fonction
utile

Header

permettre
modifier
la|le
entêter
protocole
http

utilisation
principal
redirection
vers
autre
page
if
isConnected
user
{
header
`
`
location
dns-remplacer
}
else
{
header
`
`
location
dns-remplacer
}
formulaire
exploitation
formulaire





accès
pager
formulaire
remplissage
/
modification
champ
envoi
formulaire
submit
récupération
formulaire
soumettre
traitement
formulaire
calcul

transformation

accès
BD
...


client
envoi
réponse
client
serveur
récupération
paramètre

paramètre
récupérer
tableau

_POST
`
`
nom
méthode
envoi
POST

_GET
`
`
nom
méthode
envoi
GET

form
method
=
POST
action
=
...

exemple

formulaire
input
name
=
nom

récupérer
contenir
php

_POST
`
`
nom

_GET
`
`
nom
continuer

plus
simple
comprendre

utiliser
méthode
GET
passer
argument

regarder
le
URL
appelé

http
/
/
dns-remplacer
/
dns-remplacer
champ
=
valeur

différent
paramètre
envoyé
valeur
visible

ici
_GET
`
`
champ
valoir
valeur

puis

utiliser
POST
fois
que
on
comprendre
spécificité
selon
type

caser
cocher
envoyer
sous
forme
tableau
exemple
form
method
=
GET
action
=
dns-remplacer
input
type
=
text
name
=
Champ1
valoir
=
texte
/
br
/
textarea
name
=
Champ2
col
=
rows
=
texte
/
textarea
br
/
select
name
=
Champ3
option
valoir
=
Option_1
Option_1
/
option
option
valoir
=
Option_2
selected
=
selected
Option_2
/
option
/
select
br
/
input
type
=
checkbox
name
=
Champ4
value
=
Case_1
checked
=
checked
caser
br
input
typer
=
checkbox
name
=
Champ4
value
=
Case_2
checked
=
checked
caser
br
input
type
=
radio
name
=
Champ5
value
=
Case_1
radio
br
input
type
=
radio
name
=
Champ5
value
=
Case_2
radio
br
input
type
=
radio
name
=
Champ5
value
=
Case_3
radio
br
input
typer
=
submit
name
=
soumission
valoir
=
soumettre
/
form
dns-remplacer
Champ1
=
texte
&
Champ2
=
texte
&
Champ3
=
Option_2
&
Champ4
=
Case_1
&
Champ4
=
Case_2
&
champ
=
Case_2
&
soumission
=
soumettre
exemple

récupération
_GET

vérification
le
existence
de
un
variable


isset
var
attention
contenir
chose
recevoir

nombreux
faille
faire
attention
/
/
affichage
tout
champ
recevoir
via
formulaire
resultat
=
_GET
`
`
Champ1
`
`
br
resultat
.
=
_GET
`
`
Champ2
`
`
br
resultat
.
=
_GET
`
`
Champ3
`
`
br
for
i
=
i
count
_GET
`
`
Champ4
i++
{
resultat
.
=
_GET
`
`
Champ4
i
`
`
br
}
if
isset
_GET
`
`
Champ5
resultat
.
=
_GET
`
`
Champ5
`
`
br
echo
resultat
fonctionnalité
supplémentaire
dater
heure

retourner
date
courant
chaîner
caractère
chainer
=
date
format
nombre

chainer
=
date
`
`
y
/
m
/
d
retourne
/
/


idem
tableau
associatif


tableau
=
getdate
nombre
vérification
validité
de
un
date

checkdate
mois|moi
jour
année
cookies

écrire
cookies

fonction
setcookie
`
`
PremierCookie
`
`
salut
time
*
*




timestamp
seconder
différent
Javascript
exécuter
avant
tout
autre
envoi
vers
serveur
envoyer
la|le
entêter
cookie
non
visible
avant
prochain
chargement
de
un
page
lecture

_COOKIE
`
`
PremierCookie
setcookie
`
`
PremierCookie
`
`
salut
time
*
*
if
isset
_COOKIE
`
`
PremierCookie
{
echo
`
`
cookie
non
défini
br
/
}
else
{
echo
_COOKIE
`
`
PremierCookie
`
`
br
/
}
session

objectif
garder
donner
page
pager

session_start




créer
nouveau
session
raviver
session
déjà
existant
_SESSION
`
`
nom
=
valeur
permettre
créer
variable
session
session_destroy
détruire
session
cours|cour
session_start
_SESSION
`
`
ma_variable
=
session
–
exemple
html
body
form
method
=
post
action
=
dns-remplacé
tabler
border
=
tr
td
nom
/
td
td
input
typer
=
text
name
=
nom
size
=
value
=
x
/
td
/
tr
tr
td
prénom
/
td
td
input
type
=
text
name
=
Prenom
size
=
value
=
/
td
/
tr
tr
td
eMail
/
td
td
input
type
=
text
name
=
Email
size
=
value
=
z
/
td
/
tr
tr
td
colspan
=
input
typer
=
submit
name
=
soumettre
valoir
=
envoyer
/
td
/
tr
/
table
/
form
/
body
/
html
session
–
exemple
`
`
dns-remplacé
php
session_start
_SESSION
`
`
nom
=
_POST
`
`
nom
_SESSION
`
`
prenom
=
_POST
`
`
Prenom
_SESSION
`
`
email
=
_POST
`
`
Email
session
–
exemple
`
`
dns-remplacer
html
body
php
session_start
echo
`
`
identifier
.session_id
`
`
br
/
echo
`
`
nom
session
.session_name
`
`
br
/
echo
`
`
nom
`
`
_SESSION
`
`
nom
`
`
br
echo
`
`
prénom
`
`
_SESSION
`
`
prenom
`
`
br
echo
`
`
mail
`
`
_SESSION
`
`
email
`
`
br
session_destroy
/
body
/
html
envoyer
email

fonction
mail
mail
recipient
subject
message
headers
params

nécessiter
serveur
mail
accessible
serveur

php
dest
=
`
`
dns-remplacer
dns-remplacer
subject
=
`
`
test
content
=
`
`
bonjour
\n
content
.
=
`
`
ceci
message
test\n
content
.
=
`
`
headers
=
`
`
From
dns-remplacer
\n
headers
.
=
`
`
Content-Type
text
/
html
charset
=
iso-8859-1\n
headers
.
=
`
`
Cc
dns-remplacer
\n
mail
dest
subject
content
headers
créer
autre
chose
HTML

Php
pouvoir
créer
autre
chose
HTML

image

grand
choix
format
comme
GIF
PNG
JPEG
WBMP
...
fichier
pdf
librairie
tcpdf
csv
word
excel
...

aucun
limitation
suffire
savoir
comment
modifier
la|le
entêter
header
puis
afficher
contenir
...

php
header
`
`
Content-type
image
/
png
im
=
imagecreatefrompng
`
`
dns-remplacé
im
=
imagerotate
im
imagepng
im
PHP
MYSQL
baser
donner

présentation
HTML
Javascript

navigateur
IE
Firefox
chrome
...


traitement
/
création
page
PHP
ASP
JSP
servlet
CGI
...

serveur
Web
apache
IIS
...


donner
table
SQL

serveur
BD
Access
oracle
MySQL
PostGreSQL
...

baser
donner

PHP
permettre
travailler
nativement
plupart
SGBDR



trois
fonction
essentiel




Mysql
oracle
Sybase
Microsoft
SQL
Server
PostgreSQL
...
autre
cas
pouvoir
utiliser
driver
spécifique
connexion
serveur
exécution
requêter
SQL
gestion
résultat
aller
voir
fonctionnement
`
`
PHP
dater
Objects

indépendant
partiellement
SGBD
utiliser
MySQL
Php
–
connexion

connexion
=
création
de
un
objet
PDO




adresse
baser
nom
tabler
nom
de
utilisateur
mot
passer
déconnexion
destruction
le
objet
try
{
/
/
ouverture
connexion
dbh
=
new
PDO
'
mysql
host
=
ip-remplacée
>
port
=
dbname
=
test
'
'
root
'
`
`
/
/
fermeture
connexion
dbh
=
null
}
catch
exception
e
{
die
'
erreur
'
e-
getMessage
}
MySQL
Php
–
requête

méthode
query
recherche

méthode
exec
modification


libération
ressourcer

closeCursor
dbh
=
new
PDO
'
mysql
host
=
ip-remplacée
>
dbname
=
test
'
'
root
'
`
`
reponse
=
dbh-
query
'
select
*
FROM
`
test
`
'
nb_modifs
=
dbh-
exec
'
UPDATE
`
test
`
set
test_id
=
'
reponse-
closeCursor
dbh
=
null
MySQL
Php
–
traitement

nombre
réponse


rowCount
traitement
réponse
fetch
retourner
résultat

fetchAll
retourner
tableau
tout
résultat

if
reponse-
rowCount
{
while
donnees
=
reponse-
fetch
{
echo
donnees
'
test_id
'
'
'
.
donnees
'
test_val
'
'
br
/
'
}
}
else
{
echo
`
`
aucun
résultat
br
/
}
MySQL
Php
–
exemple
html
body
ul
php
try
{
dbh
=
new
PDO
'
mysql
host
=
ip-remplacée
>
dbname
=
test
'
'
root
'
`
`
id
=
_POST
'
id
'
reponse
=
dbh-
query
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
id
if
reponse-
rowCount
{
while
donnees
=
reponse-
fetch
{
echo
`
`
li
donnees
'
test_id
'
'
'
.
donnees
'
test_val
'
'
/
li
'
}
}
else
{
echo
`
`
li
aucun
résultat
/
li
}
reponse-
closeCursor
dbh
=
null
}
catch
exception
e
{
die
'
erreur
'
e-
getMessage
}
/
ul
/
body
/
html
sécurité

passe-t-il

id
=
`
`

id
=
`
`
or

id
=
`
`
drop
tabler
`
test
`
id
=
_POST
'
id
'
reponse
=
dbh-
query
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
id
select
*
FROM
`
test
`
WHERE
test_id
=
select
*
FROM
`
test
`
WHERE
test_id
=
or
select
*
FROM
`
test
`
WHERE
test_id
=
drop
tabler
`
test
`
requête
avancer

préparation
requête
générique

prepare
query

execute
argument

plus
sécuriser
version
précédent
mettre
cache
plus
portable
...
clair
utiliser
req
=
dbh-
prepare
'
select
test_id
test_val
FROM
`
test
`
WHERE
test_id
=
AND
test_val
=
'
req-
execute
array
x
remarque
final


limiter
maximum
droit
le
utilisateur
donnée
transmettre
client
fiable

SQL
injection

Javascript
injection

tenter


mettre
javascript
alert
`
`
hello
`
`
input
toujours
tester
le
existence
/
validité
de
un
fichier
/
coder
inclure
regarder
régulièrement
logs
MYSQL
MySQL
–
type
donner




INT
FLOAT
TEXT
DATETIME
/
TIMESTAMP


ENUM
'
value1
'
'
value2
'


Ensemble
fixer
valeur
set
'
value1
'
'
value2
'


date
heure
/
horaire
Unix
plusieurs
parmi
beaucoup
de
autre
MySQL
–
opération

création
baser
donner

CREATE

suppression
baser
donner

drop

if

DATABASE
nom_bd
DATABASE
if
EXISTS
nom_bd
EXISTS
éviter
erreur
base
ne
exister
utilisation
baser
donner

user

nom_bd
baser
spécifier
utiliser
défaut
MySQL
–
opération

CREATE
table
permettre
créer
nouveau
table
baser
donner
courant

CREATE
tabler
tbl_name
champ1
...

AUTO_INCREMENT
contenu
incrémenter
automatiquement
après
chaque
insertion

PRIMARY_KEY
clé
index
primaire
unique
CREATE
tabler
`
test
`
`
test_id
`
INT
NOT
NULL
AUTO_INCREMENT
PRIMARY
KEY
`
test_val
`
INT
NOT
NULL
MySQL
–
opération

suppression
tabler

drop

tabler
tbl_name
tbl_name
...
modifier
structure
tabler
existant

ALTER
tabler
tbl_name
alter_spec
alter_spec
...
MySQL
–
opération

insérer
nouveau
enregistrement
insert
INTO
articler
Champ1
Champ2
value
'
'
'
test
'

remplacer
enregistrement
replacer
INTO
articler
Champ1
Champ2
value
'
'
'
test
'
MySQL
–
opération

modification
valeur
UPDATE
table_name
set
column_name
=
expr1
WHERE
section_condition_where

suppression
enregistrement
DELETE
FROM
table_name
WHERE
definition
MySQL
–
opération

sélection
enregistrement
select
distinct
|
ALL
expression_de_selection
FROM
table
WHERE
expression_where
group
by
col_name
...
HAVING
where_definition
ORDER
by
ASC
|
DESC

exemple
select
*
FROM
articler
WHERE
PrixArt

select
NumGrArt
AVG
PrixArt
FROM
articler
group
by
NumArt

exemple
`
`
complet
simple
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
en
`
`
http
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
html
head
title
site
vente
ligne
/
title
/
head
body
div
id
=
container
div
id
=
header
ul
id
=
top_menu
li
href
=
dns-remplacer
index
/
avoir
/
li
li
href
=
dns-remplacer
rechercher
/
avoir
/
li
li
href
=
dns-remplacer
commander
/
avoir
/
li
/
ul
/
div
/
header
div
id
=
main
–
affichage
catalogue
venir
base
donner
/
div
/
main
div
id
=
footer
p
copyright
&
copy
SdVeL
tout
droit
réserver
/
p
/
div
/
footer
/
div
/
container
/
body
/
html
dns-remplacer
php
session_start
user
=
`
`
root
pwd
=
`
`
host
=
`
`
ip-remplacée
>
bdd
=
`
`
test
try
{
dbh
=
new
PDO
'
mysql
host
=
'
.
host
'
dbname
=
'
.
bdd
user
pwd
}
catch
exception
e
{
die
'
erreur
'
e-
getMessage
}
menu
=
array
dns-remplacer
=
`
`
index
dns-remplacer
=
`
`
rechercher
dns-remplacer
=
`
`
commander
dns-remplacer
php
include_once
'
dns-remplacer
'
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
en
`
`
http
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
html
head
title
site
vente
ligne
/
title
/
head
body
div
id
=
container
div
id
=
header
ul
id
=
top_menu
php
foreach
menu
page_url
=
page_title
echo
`
`
li
href
=
\
page_url\
page_title
/
avoir
/
li
\n
/
ul
/
div
/
header
div
id
=
main
dns-remplacer
/
div
/
main
div
id
=
footer
p
copyright
&
copy
DVD
club
tout
droit
réserver
/
p
/
div
/
footer
/
div
/
container
/
body
/
html
tout
autre
page
création
de
autant
page
nécessaire




modification
la|le
entêter
pied
page
via
fichier
dns-remplacer
dns-remplacé
modification
identifiants
connexion
via
fichier
dns-remplacé
...
rester
modifier
fichier
header
/
footer
faire
css

php
include
'
dns-remplacer
'
–
affichage
catalogue
venir
base
donner
php
reponse
=
dbh-
query
'
select
*
FROM
`
test
`
'
if
reponse-
rowCount
{
while
donnees
=
reponse-
fetch
{
echo
}
}
else
{
echo
`
`
li
aucun
résultat
/
li
}
php
include
'
dns-remplacer
'
aller
plus
loin

falloir
ensuite
apprendre

quelque
fonction
base
supplémentaire

jamais
faire
confiance
client

gestion
objet
Php

méthode
programmation
avancer

MVC

gestion

...
template
