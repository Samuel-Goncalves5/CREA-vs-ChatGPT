développement
Web
–
PHP
cours|cour
organisation
•
séance
•
séance
=
1h30
cours|cour
1h30
TD
,
projet
•
projet
en
binôme
en
solo
(
selon
groupe
premier
semestre
)
•
devoir
sur
table
•
Interros
surprendre
minute
•
participation
,
travail
continu
noter
sous
forme
de
point
bonus
•
TD
de
semaine
,
divers
document
information
divers
sur
l
’
EPI
•
fin
cours|cour
avril
•
Evaluation
–
contrôle
continu
(
%
)
•
devoir
maison
•
projet
•
devoir
sur
table
•
interrogation
surprendre
•
bonus
participation
–
examen
partiel
(
%
)
programme
cours|cour
•
introduction
général
web
–
architecture
technique
–
rappel
sur
HTML
différence
statique
/
dynamique
–
explication
sur
l
’
environnement
web
–
premier
pas
en
PHP
–
installation
WAMP
/
MAMP
/
XAMP
•
PHP
•
PHP
MySQL
architecturer
général
d
’
site
web
base
de
donnée
(
information
brut
)
navigateur
serveur
Web
(
utilisateur
)
(
site
visible
)
serveur
d
’
application
(
traitement
interne
)
front
office
Back
office
architecturer
général
d
’
site
web
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
architecturer
général
d
’
site
web
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
architecturer
général
d
’
site
web
navigateur
serveur
Web
&
base
de
donnée
apache
XAMP
front
office
Back
office
rappel
version
technologie
vérifier
version
de
tutoriaux
trouver
sur
Internet
!
§
HTML
de
version
minimal
hormis
...
navigateur
interpréter
qu
’
pouvoir
§
HTML
version
actuel
(
passe
)
§
PHP
obsolète
non-supporté
(
+
faille
de
sécurité
)
§
PHP
supporter
§
PHP
version
actuel
§
MySQL
version
actuel
(
de
souci
avec
langage
,
standard
SQL
,
excepté
tutorial
<
=
MySQL
)
rappel
version
technologie
vérifier
version
de
tutoriaux
trouver
sur
Internet
!
§
documentation
PHP
:
http
:
/
/
dns-remplacer
/
manual
/
fr
/
§
exemple
concret
avec
fonction
de
chaîne
:
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
rappel
HTML
•
Header
/
body
•
lister
•
tableau
•
image
lien
HTML
balise
ouvert
html
devoir
être
fermer
<
html
>
<
balise
>
...
<
/
balise
>
head
body
<
head
>
<
title
>
exemple
HTML
<
/
title
>
title
h1
p
p
<
/
head
>
<
body
>
i
b
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
être
<
i
>
really
<
/
i
>
<
b
>
importer
<
/
b
>
.
<
/
p
>
<
p
>
informatique
pouvoir
aider
!
<
/
p
>
<
/
body
>
<
/
html
>
HTML
•
structure
d
’
document
HTML
<
!
DOCTYPE
html
>
indication
«
idiome
»
HTML
<
html
>
<
head
>
<
meta
name
=
'
'
author
'
'
content
=
entêter
(
head
)
'
'
Manuele
kirsch
Pinheiro
'
'
/
>
information
général
<
title
>
exemple
HTML
<
/
title
>
sur
document
<
/
head
>
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
être
<
i
>
really
<
/
i
>
corps
(
body
)
<
b
>
importer
<
/
b
>
.
<
/
p
>
contenir
document
<
p
>
informatique
pouvoir
aider
!
<
/
p
>
<
/
body
>
<
/
html
>
HTML
•
Elément
DOCTYPE
–
indiquer
navigateur
version
de
HTML
avoir
être
utiliser
–
HTML
•
comprendre
par
navigateur
<
!
DOCTYPE
html
public
'
'
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
'
'
http
:
/
/
dns-remplacer
/
TR
/
html4
/
dns-remplacer
>
–
HTML
<
!
DOCTYPE
html
>
•
en
cours|cour
de
définition
•
reconnaître
par
navigateur
récent
(
Google
chromer
,
Firefox
,
Internet
explorer
...
)
HTML
•
Eléments
de
l
’
entêter
(
head
)
<
head
>
<
meta
name
=
'
'
author
'
'
–
information
complémentaire
content
=
'
'
Manuele
'
'
/
>
sur
document
<
title
>
exemple
HTML
<
/
title
>
<
/
head
>
–
n
’
être
contenu
document
,
information
être
afficher
dans
page
–
,
information
pour
moteur
de
recherche
•
balise
–
<
titre
>
...
<
/
titre
>
:
titre
document
–
<
meta
...
/
>
:
métadonner
(
description
)
sur
document
–
<
link
...
/
>
,
<
styler
>
...
<
/
style
>
:
style
HTML
•
Eléments
de
l
’
entêter
(
head
)
<
title
>
exemple
HTML
<
/
title
>
ouverture
fermeture
de
balise
<
meta
name
=
'
'
author
'
'
content
=
'
'
auteur
'
'
/
>
attribut
associer
à
balise
élément
de
précision
sur
balise
l
’
entêter
être
balise
posséder
ensemble
visible
dans
corps
d
’
attribut
document
<
baliser
attribut
=
'
'
valeur
'
'
...
>
<
meta
name
=
'
'
description
'
'
value
=
'
'
...
'
'
/
>
<
meta
charset
=
'
'
ISO-8859-1
'
'
>
HTML
•
Eléments
corps
(
body
)
<
body
>
–
contenir
document
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
être
<
i
>
really
<
/
i
>
–
partie
rendre
visible
par
<
b
>
importer
<
/
b
>
.
<
/
p
>
navigateur
<
p
>
informatique
pouvoir
•
balise
:
avoir
plein
...
aider
!
<
/
p
>
<
/
body
>
–
titre
:
<
h@card@
>
,
<
h@card@
>
...
<
h@card@
>
–
paragraphe
saut
de
ligne
:
<
p
>
<
br
/
>
–
citation
mettre
en
valeur
:
<
b
>
,
<
i
>
,
<
blockquote
>
...
–
image
lien
:
<
img
>
,
<
avoir
...
>
...
–
liste
:
<
ol
>
,
<
ul
>
,
<
li
>
–
tableau
:
<
table
>
,
<
tr
>
,
<
td
>
...
–
organisation
document
:
<
div
>
,
<
section
>
...
HTML
•
Eléments
corps
(
body
)
•
titre
:
h1
,
h2
,
h3
,
h4
,
h5
,
h@card@
–
élément
heure
x
permettre
de
définir
titre
de
différent
niveau
•
h1
correspondre
titre
principal
–
devoir
apparaître
dans
l
’
ordre
(
h1
avant
h2
)
avec
seul
titre
principal
(
h1
)
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
h1
...
<
/
body
>
HTML
•
Eléments
corps
(
body
)
•
paragraphe
,
saut
de
ligne
citation
...
–
balise
<
p
>
...
<
/
p
>
indiquer
paragraphe
–
balise
<
br
/
>
faire
simple
saut
de
ligne
–
balise
<
b
>
...
<
/
b
>
<
i
>
...
<
/
i
>
mettre
texte
en
relief
(
en
gras
en
italique
)
–
balise
<
blockquote
>
...
<
/
blockquote
>
permettre
de
citer
autre
page
Web
<
blockquote
citer
=
'
'
http
:
/
/
source
/
'
'
>
citation
<
/
blockquote
>
–
balise
<
hr
/
>
permettre
d
’
établir
séparation
(
ligne
horizontal
)
dans
document
HTML
•
Eléments
body
<
html
>
h@card@
<
head
>
...
<
/
head
>
<
body
>
h2
i
<
h@card@
>
exemple
h1
<
/
h@card@
>
br
<
h@card@
>
exemple
h2
<
/
h@card@
>
p
<
p
>
être
paragraphe
avec
<
i
>
terme
technique
<
/
i
>
b
<
br
/
>
<
b
>
mot-clé
<
/
b
>
.
<
/
p
>
<
blockquote
citer
=
'
'
http
:
/
/
dns-remplacer
/
wiki
/
Hypertext_markup_language
'
'
>
HTML
n
’
être
concevoir
pour
spécifier
l
’
apparence
visuel
exact
document
.
<
/
blockquote
>
hr
<
hr
/
>
<
p
>
informatique
pouvoir
aider
!
<
/
p
>
blockquote
<
/
body
>
<
/
html
>
HTML
•
HTML
–
langage
de
balise
,
permettre
structuration
page
Web
–
organisation
en
balise
<
baliser
attr
=
'
'
valeur
'
'
>
...
<
/
balise
>
–
organisation
document
•
entêter
:
head
•
corps
document
:
body
–
différent
type
de
balise
possible
•
liste
,
tableau
,
image
,
lien
...
HTML
:
liste
•
type
de
liste
être
possible
–
liste
numéroter
:
<
ol
>
...
<
/
ol
>
–
liste
non-numérotés
:
<
ul
>
...
<
/
ul
>
–
importer
liste
,
seul
moyen
d
’
indiquer
élément
:
<
li
>
...
<
/
li
>
<
ol
>
<
li
>
<
/
li
>
<
li
>
<
/
li
>
<
/
ol
>
<
ul
>
<
li
>
Premier
<
/
li
>
<
li
>
second
item
<
/
li
>
<
/
ul
>
HTML
:
tableau
•
pour
créer
tableau
en
HTML
,
aller
combiner
balise
:
–
table
,
tr
,
td
,
caption
,
th
,
thead
,
tbody
<
tabler
border
=
'
'
'
'
>
tableau
<
tr
>
<
table
>
ligner
<
td
>
HTML
<
/
td
>
<
tr
>
<
td
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
cellule
<
/
tr
>
<
td
>
<
/
table
>
HTML
:
tableau
<
tabler
border
=
'
'
'
'
>
caption
:
légende
<
caption
>
historique
HTML
<
/
caption
>
<
thead
>
thead
:
entêter
tableau
<
tr
>
<
th
>
version
<
/
th
>
th
:
cellule
de
l
’
entêter
<
th
>
année
<
/
th
>
<
/
tr
>
<
/
thead
>
tbody
:
corps
<
tbody
>
tableau
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
HTML
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
/
tbody
>
<
/
table
>
HTML
:
image
•
insertion
d
’
image
dans
texte
:
balise
img
<
img
src
=
'
'
dns-remplacer
'
'
width
=
'
'
'
'
alt
=
'
'
texte
'
'
/
>
texte
alternatif
tailler
optionnel
infobulle
width
=
'
'
'
'
height
=
'
'
'
'
src
:
trouver
l
’
image
dns-remplacer
être
avec
page
Web
img
(
répertoire
)
src
=
'
'
.\img\Paris_
dns-remplacer
'
'
Paris_
dns-remplacer
(
fichier
)
être
sur
serveur
:
src
=
'
'
http
:
/
/
dns-remplacer
/
image
/
dns-remplacer
'
'
HTML
:
image
•
balise
HTML
:
image
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
h@card@
>
exemple
<
/
h@card@
>
<
p
>
image
distant
:
<
img
src
=
'
'
http
:
/
/
dns-remplacer
/
image
/
dns-remplacer
'
'
width
=
'
'
'
'
alt
=
'
'
cochonnet
petanques
'
'
/
>
<
/
p
>
<
p
>
image
local
:
<
img
src
=
'
'
.\img\Paris_
dns-remplacer
'
'
height
=
'
'
'
'
alt
=
'
'
vue
de
Paris
'
'
/
>
<
/
p
>
<
/
body
>
<
/
html
>
HTML
:
lien
•
L
’
usage
lien
permettre
de
relier
page
Web
à
d
’
autre
page
,
à
d
’
autre
point
dans
page
<
avoir
href
=
'
'
ref
'
'
>
lien
visible
<
/
avoir
>
•
L
’
attribut
href
indiquer
vers
aller
lorsqu
’
cliquer
sur
lien
–
lien
local
:
<
avoir
href
=
'
'
dns-remplacer
'
'
>
vers
autre
page
<
/
avoir
>
–
lien
distant
:
<
avoir
href
=
'
'
http
:
/
/
serveur
/
dns-remplacer
'
'
>
<
/
avoir
>
–
envoyer
mail
:
<
avoir
href
=
'
'
mailto
:
monemail
@
dns-remplacer
'
'
>
envoyer
mail
<
/
avoir
>
HTML
:
lien
attribuer
identificateur
<
baliser
id
=
'
'
identificateur
'
'
>
<
h@card@
id
=
'
'
debut
'
'
>
lien
<
/
h@card@
>
<
p
>
lien
vers
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
'
'
>
EPI
<
/
avoir
>
<
/
p
>
<
p
>
lien
vers
<
avoir
href
=
'
'
dns-remplacer
'
'
>
exemple
tableau
<
/
avoir
>
<
/
p
>
<
p
>
envoyer
mail
à
<
avoir
href
=
'
'
mailto
:
@
dns-remplacer
'
'
>
<
/
avoir
>
<
/
p
>
<
p
>
...
.
<
/
p
>
lien
vers
l
’
identificateur
<
avoir
href
=
'
'
#
identificateur
'
'
>
<
p
>
<
avoir
href
=
'
'
dns-remplacer
#
debut
'
'
>
retourner
début
<
/
avoir
>
<
/
p
>
statique
vs
dynamique
•
statique
:
partie
«
fixe
»
page
–
HTML
renvoyer
client
:
–
CSS
parti
changer
–
JavaScript
(
JS
)
qu
’
arriver
•
dynamique
:
–
CGI
partie
«
variable
»
page
–
PHP
renvoyer
client
:
–
java
parti
changer
selon
–
JavaScript
(
JS
)
requête
–
...
information
disponible
statique
vs
dynamique
•
site
web
statique
:
changement
dans
page
l
’
«
rafraichit
»
/
refaire
même
requête
•
dynamique
:
page
évoluer
selon
information
externe
(
à
requête
,
en
général
)
statique
vs
dynamique
•
site
web
statique
body
{
<
html
>
background-color
:
<
head
>
lightblue
;
<
link
rel
=
'
'
stylesheet
'
'
}
type
=
'
'
text
/
css
'
'
href
=
'
'
dns-remplacer
'
'
>
h@card@
{
<
/
head
>
color
:
navy
;
<
body
>
margin-left
:
20px
;
<
/
body
>
}
<
/
html
>
CSS
HTML
statique
vs
dynamique
•
site
web
dynamique
body
{
<
html
>
<
?
php
background-color
:
<
head
>
include
(
`
`
dns-remplacer
'
'
)
;
lightblue
;
<
link
rel
=
'
'
stylesheet
'
'
echo
'
'
<
body
>
'
'
;
}
type
=
'
'
text
/
css
'
'
Var
=
;
href
=
'
'
dns-remplacer
'
'
>
echo
'
'
valeur
:
$
Var
'
'
;
h1
{
<
/
head
>
color
:
navy
;
echo
'
'
<
/
body
>
'
'
;
margin-left
:
20px
;
include
(
`
`
dns-remplacer
'
'
)
;
}
?
>
CSS
HTML
PHP
apache
,
URI
/
URL
,
DNS
,
PHP
•
serveur
Web
:
apache
(
traiter
connexion
transmettre
requête
)
•
S
’
appuyer
sur
HTTP
,
URI
/
URL
,
DNS
(
pour
communiquer
comprendre
ressourcer
site
être
viser
)
•
extension
serveur
web
:
PHP
(
lire
requête
qu
’
apache
transmettre
,
faire
traitement
demander
)
apache
&
PHP
•
apache
aller
traiter
connexion
requête
•
PHP
aller
construire
réponse
en
exécuter
logique
métier
(
code
)
navigateur
serveur
Web
apache
apache
•
apache
:
serveur
web
libre
gratuit
disposer
d
’
extension
pour
lier
à
PHP
à
d
’
autre
outil
pour
traiter
requête
navigateur
serveur
Web
apache
apache
•
apache
:
usage
classique
associer
fichier
à
requête
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
dns-remplacer
navigateur
serveur
Web
apache
apache
.
client
envoyer
requête
avec
ressource
viser
.
apache
lire
requête
,
chercher
fichier
.
apache
répondre
à
requête
en
envoyer
fichier
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
<
html
>
navigateur
coucou
serveur
Web
<
/
html
>
dns-remplacer
apache
apache
•
requête
réponse
transmettre
avec
:
–
HTTP
HTTP
HTTP
/
–
(
HyperText
Transfer
Protocol
)
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
protocole
pour
transmettre
apache
information
:
HTTP
apache
apache
•
serveur
web
s
’
appuyer
,
sur
:
–
protocole
HTTP
(
utiliser
port
)
–
protocole
HTTPS
(
utiliser
port
)
[
S
pour
«
secure
»
,
en
utiliser
certificat
pour
chiffrer
connexion
pour
s
’
assurer
l
’
hôte
/
host
être
l
’
chercher
]
•
pour
pouvoir
communiquer
avec
navigateur
apache
&
URI
/
URL
•
identification
ressource
avec
URI
URL
–
URI
:
Uniform
Resource
identifier
adresse
unique
vers
–
URL
:
Uniform
Resource
Locator
ressource
«
dns-remplacer
»
GET
dns-remplacé
http
:
/
/
dns-remplacer
/
dns-remplacer
(
GET
dns-remplacer
)
coucou
<
html
>
<
html
>
coucou
navigateur
coucou
serveur
Web
<
/
html
>
<
/
html
>
dns-remplacer
dns-remplacé
apache
apache
&
URI
/
URL
•
identification
ressource
avec
URI
URL
•
http
:
/
/
dns-remplacer
/
dns-remplacer
–
ressource
:
«
dns-remplacer
»
–
dans
dossier
:
«
/
»
(
racine
)
–
sur
site
web
:
«
http
:
/
/
dns-remplacer
»
•
ftp
:
/
/
dns-remplacer
/
image
/
dns-remplacer
–
ressource
:
«
dns-remplacer
»
–
dans
dossier
:
«
/
image
/
»
–
sur
machine
«
dns-remplacer
»
accessible
en
«
ftp
:
/
/
»
apache
&
URI
/
URL
apache
&
DNS
•
machine
sur
Internet
être
identifier
par
IP
•
exemple
IPV4
:
ip-remplacée
>
ip-remplacée
>
•
exemple
IPV6
:
:
0db8
:
85a3
:
:
:
8a2e
:
:
•
pratique
pour
visiter
site
web
...
...
parfait
pour
rendre
unique
machine
apache
&
DNS
•
DNS
:
Domain
Name
System
•
gérer
«
nom
de
domaine
»
(
exemple
:
dns-remplacer
)
•
permettre
de
lier
nom
de
domaine
à
un
IP
•
permettre
de
gérer
«
sous-domaine
»
•
exemple
:
dns-remplacer
dns-remplacer
dns-remplacer
•
«
www
»
«
ent
»
être
sous-domaine
apache
&
DNS
apache
&
DNS
.
client
envoyer
requête
avec
ressource
viser
.
apache
lire
requête
,
chercher
fichier
.
apache
répondre
à
requête
en
envoyer
fichier
GET
dns-remplacé
host
dns-remplacer
<
html
>
GET
dns-remplacé
GET
dns-remplacer
coucou
host
dns-remplacer
host
dns-remplacer
<
/
html
>
coucou
Pouet
dns-remplacer
<
html
>
<
html
>
navigateur
coucou
Pouet
serveur
Web
<
html
>
<
/
html
>
<
/
html
>
Pouet
<
/
html
>
dns-remplacer
dns-remplacé
apache
dns-remplacé
apache
&
DNS
•
nom
de
domaine
pouvoir
renvoyer
vers
même
IP
•
serveur
web
pouvoir
afficher
site
différent
selon
l
’
hôte
demander
dans
requête
–
chez
apache
,
appeler
«
virtual
host
»
(
vhost
)
–
pour
gérer
,
devoir
avoir
accès
à
configuration
serveur
web
.
n
’
être
cas
souscrire
à
service
«
d
’
hébergement
web
»
.
•
pour
avoir
«
bon
»
site
,
être
utile
de
choisir
nom
de
domaine
pertinent
–
certificat
pour
mettre
HTTPS
baser
sur
nom
de
domaine
,
sur
IP
apache
&
PHP
•
PHP
être
extension
à
côté
de
apache
<
html
>
–
apache
configurer
pour
appeler
PHP
lorsqu
’
<
?
php
voir
passer
requête
terminer
par
«
.php
»
echo
'
'
B
'
'
;
?
>
–
PHP
traiter
fichier
en
question
,
produire
<
/
html
>
réponse
renvoyer
par
apache
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
B
<
html
>
navigateur
serveur
Web
<
html
>
B
B
<
/
html
>
<
/
html
>
apache
dns-remplacé
dns-remplacé
apache
&
CGI
•
CGI
:
Common
Gateway
interface
–
outil
autre
PHP
pouvoir
être
appeler
par
<
html
>
serveur
web
...
–
<
/
html
>
CGI
être
standard
pour
envoyer
requête
autre
outil
,
lire
réponse
dns-remplacé
GET
dns-remplacer
GET
dns-remplacer
hello
CGI
<
html
>
navigateur
serveur
Web
<
html
>
B
hello
<
/
html
>
<
/
html
>
CGI
apache
dns-remplacé
dns-remplacer
objectif
cours|cour
:
création
d
’
site
Web
dynamique
PHP
PHP
•
PHP
être
langage
de
programmation
utiliser
pour
construction
de
site
Web
dynamique
–
page
PHP
:
page
Web
contenir
de
PHP
•
aller
mélanger
PHP
code
HTML
/
CSS
•
code
PHP
aller
être
analyser
par
serveur
•
résultat
aller
être
nouveau
page
Web
mettre
à
jour
par
code
PHP
dns-remplacer
<
html
>
...
code
PHP
être
à
<
?
php
l
’
intérieur
de
balise
date_default_timezone_set
(
`
`
Europe
/
Paris
'
'
)
;
<
?
php
...
?
>
entourer
par
balise
echo
'
'
<
p
styler
=
'
font-style
:
italic
;
'
>
Paris
,
'
'
<
script
language
=
'
'
php
'
'
>
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
...
<
/
script
>
?
>
...
<
/
html
>
PHP
PHP
:
Php
Hypertext
Preprocessor
.
Ø
langage
interpréter
pour
créer
site
dynamique
Ø
langage
de
script
côté
serveur
Ø
langage
typer
Ø
langage
«
Embedded
HTML
»
Ø
open
source
:
PHP
avoir
permettre
de
créer
grand
nombre
de
site
web
célèbre
,
Facebook
,
Wikipédia
,
etc
.
commande
PHP
de
base
•
variable
•
type
•
opérateur
•
fonction
•
echo
,
gettype
,
unset
installation
configuration
de
PHP
suffire
de
télécharger
suite
logiciele
:
•
WAMP
:
http
:
/
/
dns-remplacer
/
•
MAMP
:
http
:
/
/
dns-remplacer
/
•
XAMPP
:
https
:
/
/
dns-remplacer
/
fr
/
éditeur
de
texte
:
•
Sublim
Text
(
macOs
)
:
http
:
/
/
dns-remplacer
/
•
Notepad++
(
Windows
)
:
https
:
/
/
dns-remplacer
/
fr
/
•
autre
(
Linux
/
BSD
/
UNIX
)
:
emacs
,
vim
,
nano
,
gedit
,
...
introduction
PHP
syntaxe
de
base
:
<
!
DOCTYPE
HTML
public
'
'
-
/
/
W3C
/
/
<
!
doctype
html
>
DTD
HTML
/
/
'
'
'
'
http
:
/
/
<
html
>
dns-remplacer
/
TR
/
html4
/
dns-remplacer
'
'
>
<
head
>
<
title
>
titre
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
'
hello
World
!
`
`
;
?
>
<
/
body
>
<
/
html
>
commentaire
PHP
commentaire
:
commentaire
hériter
langage
C
Perl
/
/
être
commentaire
sur
seul
ligne
/
*
être
commentaire
sur
ligne
*
/
commentaire
styler
shell
#
être
commentaire
sur
seul
ligne
variable
PHP
•
notion
de
variable
–
variable
être
conteneur
de
valeur
–
pouvoir
affecter
valeur
,
qu
’
aller
utiliser
$
variable
=
`
`
PHP5
'
'
;
«
$
»
indiquer
variable
«
=
»
être
affectation
attribut
valeur
à
nom
de
variable
variable
commencer
par
lettre
«
_
»
,
sans
echo
'
'
...
$
variable
...
'
'
;
espace
récupérer
valeur
garder
dans
variable
par
nom
variable
PHP
•
notion
de
variable
:
type
donnée
–
variable
pouvoir
garder
de
valeur
de
différent
type
•
nombre
entier
(
integer
)
:
•
nombre
décimal
(
double
float
)
:
•
chaîne
de
caractère
(
string
)
:
«
super
chaîne
!
»
•
logique
(
boolean
)
:
«
true
»
(
)
«
false
»
–
fonction
gettype
(
$
variable
)
permettre
de
savoir
typer
de
valeur
contenir
variable
•
$
entier
=
;
gettype
(
$
entier
)
-
>
integer
•
$
decimal
=
;
gettype
(
$
decimal
)
-
>
doubler
•
$
chaine
=
'
'
super
chaîne
!
`
`
;
gettype
(
$
chaine
)
-
>
string
•
$
bool
=
true
;
gettype
(
$
bool
)
-
>
boolean
variable
PHP
•
exemple
:
<
?
php
définition
d
’
$
entier
=
;
variable
$
decimal
=
;
$
chainer
=
'
'
super
chaîne
!
`
`
;
$
boolean
=
true
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
entier
)
.
`
`
:
$
entier
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
decimal
)
.
`
`
:
$
decimal
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
chaine
)
.
`
`
:
$
chainer
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
gettype
(
$
boolean
)
.
`
`
:
$
boolean
<
/
li
>
'
'
;
?
>
valeur
de
récupérer
gettype
(
)
variable
valeur
de
variable
informer
type
$
boolean
de
variable
type
de
donnée
PHP
opérateur
sur
chaîne
de
caractère
:
–
concaténation
:
chaine1
.
Chaine2
opérateur
logique
:
•
AND
&
&
(
vrai
$
avoir
$
b
vrai
)
•
or
|
|
(
vrai
$
avoir
$
b
être
vrai
)
opérateur
arithmétique
:
•
addition
:
$
avoir
$
b
,
•
soustraction
:
$
avoir
-
$
b
,
•
multiplication
:
$
avoir
*
$
b
,
•
division
:
$
avoir
/
$
b
,
•
modulo
(
rester
de
division
entier
)
:
$
avoir
%
$
b
.
type
de
donnée
PHP
opérateur
arithmétique
:
•
attention
:
lorsqu
’
chaine
de
caractère
être
évaluer
valeur
numérique
,
règle
suivant
s
’
appliquer
:
•
$
toto
=
'
'
'
'
;
#
$
toto
valoir
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
chaine
valoir
c
’
être
texte
,
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
chaine
valoir
(
commencer
par
valeur
numérique
)
.
type
de
donnée
PHP
opérateur
de
comparaison
:
•
égal
à
:
$
avoir
=
=
$
b
•
différent
de
:
$
avoir
!
=
$
b
•
supérieur
à
:
$
avoir
>
$
b
•
inférieur
à
:
$
avoir
<
$
b
•
supérieur
égal
à
:
$
avoir
>
=
$
b
•
inférieur
égal
à
:
$
avoir
<
=
$
b
exemple
:
echo
$
toto
=
=
?
`
`
vrai
'
'
:
'
'
faux
'
'
;
opérateur
PHP
•
opérateur
–
différent
opérateur
permettre
de
manipuler
valeur
,
qu
’
être
dans
variable
opérateur
opérateur
opérateur
de
opérateur
logique
mathématique
string
comparaison
+
-
*
/
%
.
=
=
!
=
|
|
(
or
)
(
concaténation
)
<
=
<
>
=
>
&
&
(
AND
)
!
(
not
)
<
?
php
$
avoir
=
;
$
b
=
-
$
avoir
;
$
nom
=
'
'
toto
”
;
echo
'
'
salut
'
'
.
$
nom
;
echo
'
'
<
p
>
-
$
avoir
valoir
$
b
<
/
p
>
'
'
;
?
>
fonction
PHP
dater
déclaration
:
•
DATETIME
$
date
=
new
DateTime
(
'
'
)
;
•
DATE_CREATE
:
de
DateTime
:
:
__construct
(
)
$
date2
=
date_create
(
'
'
)
;
extraction
mois|moi
,
année
,
...
...
:
avec
style
procédural
en
utiliser
DATE_FORMAT
echo
date_format
(
$
date
,
'
'
m
'
'
)
;
avec
style
orienter
objet
(
OO
)
:
echo
$
date-
>
format
(
'
'
)
;
fonction
PHP
dater
exemple
:
•
$
date
=
date
(
'
'
d-m
'
'
)
;
echo
'
'
être
date
jour
'
'
.
$
date
;
•
$
heure
=
date
(
`
`
heure
:
i
:
s
'
'
)
;
echo
'
'
être
l
’
heure
jour
'
'
.
$
heure
;
tableau
PHP
•
tableau
–
variable
capable
d
’
enregistrer
valeur
d
’
type
•
tableau
à
indice
:
attention
avoir
définir
–
position
être
identifier
par
position
avant
de
un
numéro
(
commencer
par
)
utiliser
avoir
•
message
d
’
erreur
.
$
tableau
[
]
=
'
'
à
'
'
;
•
$
tableau
[
]
=
'
'
B
'
'
;
•
$
tableau
[
]
=
'
'
fin
'
'
;
•
à
B
fin
suite
$
tableau
[
]
=
'
'
suite
'
'
;
•
tableau
associatif
:
–
position
recevoir
identifier
(
label
)
Jean
Dupont
•
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
•
Prenom
nom
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
tableau
PHP
tableau
de
PHP
ressembler
tableau
associatif
(
hash-
table
)
.
•
L
’
index
être
appeler
clé
•
valeur
associer
à
clé
être
appeler
valeur
déclarer
tableau
de
deux
façon
:
•
utiliser
fonction
array
(
)
pour
créer
tableau
•
affecter
valeur
tableau
PHP
message
d
’
erreur
<
head
>
...
contenir
de
position
<
style
>
...
<
/
style
>
(
$
tableau
[
]
)
n
’
avoir
<
/
head
>
être
définir
.
<
body
>
...
<
h@card@
>
tableau
à
indice
<
/
h2
>
<
table
>
<
?
php
$
tableau
[
]
=
'
'
à
'
'
;
$
tableau
[
]
=
'
'
B
'
'
;
$
tableau
[
]
=
'
'
fin
'
'
;
contenir
de
$
tableau
[
]
=
'
'
suite
'
'
;
position
(
$
tableau
[
]
)
echo
'
'
<
tr
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
/
tr
>
`
`
;
?
>
<
/
table
>
...
tableau
PHP
...
<
h@card@
>
tableau
associatif
<
/
h@card@
>
<
table
>
<
tr
>
<
th
>
nom
<
/
th
>
<
th
>
prénom
<
/
th
>
<
/
tr
>
<
?
php
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
echo
'
'
<
tr
>
<
td
>
'
'
.
$
tableauAssoc
[
`
`
nom
'
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
tableauAssoc
[
`
`
Prenom
'
'
]
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
?
>
<
/
table
>
<
/
body
>
tableau
PHP
fonction
sur
tableau
:
•
sizeof
(
)
:
retourner
nombre
d
’
élément
d
’
tableau
,
•
count
(
)
:
retourner
nombre
d
’
élément
d
’
tableau
s
’
exister
,
variable
n
’
être
tableau
variable
n
’
exister
.
tableau
PHP
exemple
:
•
$
suite
=
array
(
,
,
,
)
;
•
$
tab
[
]
=
;
•
$
tab
[
]
=
'
'
toto
'
'
;
#
pouvoir
mélanger
contenu
•
$
tab
[
`
`
chaine
'
'
]
=
'
'
valeur
'
'
;
#
pouvoir
mélanger
clé
.
•
$
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
'
'
Smith
'
'
)
;
tableau
PHP
parcourir
tableau
:
<
?
php
/
/
créer
array
$
prenom
$
prenom
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
/
/
faire
boucle
pour
afficher
:
for
(
$
numero
=
;
$
numero
<
;
$
numero++
)
{
echo
$
prenom
[
$
numero
]
.
'
<
br
/
>
'
;
}
?
>
tableau
PHP
parcourir
tableau
:
<
?
php
$
prenom
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
foreach
(
$
prenom
avoir
$
id
=
>
$
valeur
)
{
echo
'
'
case
(
$
id
)
=
$
valeur
'
'
;
}
?
>
tableau
PHP
parcourir
tableau
associatif
:
<
?
php
$
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
'
'
Smith
'
'
)
;
foreach
(
$
personne
avoir
$
cle
=
>
$
valeur
)
{
echo
'
'
cle
=
'
'
.
$
cle
.
“
valeur
=
'
'
.
$
valeur
;
}
?
>
développement
Web
–
PHP
cours|cour
rappel
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
rappel
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
rappel
•
WAMP
/
MAMP
/
LAMP
/
XAMP
:
–
Windows
/
mac
/
Linux
/
Unix
–
apache
=
serveur
Web
–
MySQL
=
base
de
donnée
–
PHP
=
Préprocesseur
page
web
rappel
•
communication
entre
«
navigateur
web
»
«
serveur
web
»
faire
avec
protocole
HTTP
GET
dns-remplacer
<
html
>
http
:
/
/
dns-remplacer
/
dns-remplacer
coucou
(
GET
dns-remplacé
)
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
protocole
pour
transmettre
apache
information
:
HTTP
rappel
•
PHP
être
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
PHP
lorsqu
’
voir
passer
requête
terminer
par
«
.php
»
–
PHP
traiter
fichier
en
question
,
produire
réponse
renvoyer
par
apache
<
html
>
<
?
php
echo
'
'
B
'
'
;
?
>
<
/
html
>
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
B
<
html
>
navigateur
serveur
Web
<
html
>
B
B
<
/
html
>
<
/
html
>
apache
dns-remplacer
dns-remplacer
caractéristique
PHP
•
langage
typer
–
flexible
...
–
...
possibilité
de
faire
n
’
importer
•
langage
interpréter
/
/
sur
terminal
de
Linux
–
CLI
disponible
pour
script
/
/
command
Line
interface
•
usage
dans
cours|cour
:
extension
apache
rappel
:
formulaire
HTML
•
communication
entre
client
(
navigateur
)
serveur
(
php
)
–
formulaire
en
HTML
permettre
de
recueillir
donnée
de
l
’
utilisateur
•
donnée
être
communiquer
à
programme
–
navigateur
envoyer
donnée
récolter
par
formulaire
serveur
•
programme
(
page
PHP
)
récupérer
donné
grâce
à
variable
page
PHP
rappel
:
formulaire
HTML
•
formulaire
HTML
être
définir
par
balise
<
form
...
>
...
<
/
form
>
–
élément
être
à
l
’
intérieur
de
balise
<
form
name
=
'
'
nomFormulaire
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
|
post
'
'
>
...
.
<
/
form
>
action
:
à
envoyer
donnée
method
:
envoyer
donnée
–
champ
formulaire
être
introduire
par
différent
balise
:
•
<
input
type
=
'
'
...
'
'
name
=
'
'
...
'
'
value
=
'
'
...
'
'
id
=
'
'
...
'
'
/
>
•
<
textarea
name
=
'
'
...
'
'
id
=
'
'
...
'
'
col
=
'
'
...
'
'
rows
=
'
'
...
'
'
>
...
<
/
textarea
>
•
<
select
name
=
'
'
...
'
'
id
=
'
'
...
'
'
size
=
'
'
...
'
'
>
<
option
valoir
=
'
'
...
'
'
>
...
<
/
option
>
<
/
select
>
rappel
:
formulaire
HTML
<
input
type
=
'
'
text
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
option
>
...
<
/
select
>
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
opinion
sur
produit
<
/
textarea
>
<
input
type
=
'
'
reset
'
'
value
=
'
'
nettoyer
'
'
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
input
type
=
'
'
submit
'
'
charger
d
’
envoyer
donnée
formulaire
rappel
:
formulaire
HTML
à
donnée
être
envoyer
input
type
=
'
'
text
'
'
zone
de
saisie
select
...
option
liste
de
sélection
d
’
option
textarea
zone
de
texte
input
type
=
'
'
submit
'
'
input
type
=
'
'
reset
'
'
bouton
d
’
envoi
de
reset
formulaire
<
form
name
=
'
'
formClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
label
>
produire
<
/
label
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
option
>
<
option
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
option
>
<
option
valoir
=
'
'
BabyFun
'
'
>
baby
Fun
<
/
option
>
<
/
select
>
<
br
/
>
<
label
>
opinion
<
/
label
>
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
opinion
sur
produit
<
/
textarea
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
=
'
'
bouton
'
'
/
>
<
input
type
=
'
'
reset
'
'
value
=
'
'
nettoyer
'
'
=
'
'
bouton
'
'
/
>
<
/
form
>
communication
client
-
serveur
•
méthode
générique
d
’
envoi
de
donnée
:
–
GET
:
(
Query
string
)
valeur
passer
via
l
’
URL
par
navigateur
[
valeur
lisible
dans
l
’
en-tête
dans
logs
d
’
accès
]
•
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
truc
&
nom
=
–
POST
:
remplir
formulaire
,
navigateur
envoyer
formulaire
dans
«
body
»
de
requête
HTTP
[
valeur
lisible
«
body
»
de
requête
être
accessible
]
•
http
:
/
/
dns-remplacer
/
dns-remplacer
communication
client
-
serveur
•
donnée
recueillir
dans
formulaire
être
transmettre
programme
indiquer
dans
action
=
...
•
dans
PHP
,
récupérer
donné
grâce
à
deux
tableau
associatif
spécial
–
$
_GET
-
>
<
form
action
=
'
'
...
'
'
method
=
'
'
get
'
'
>
•
$
_GET
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
–
$
_POST
-
>
<
form
action
=
'
'
...
'
'
method
=
'
'
post
'
'
>
•
$
_POST
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
communication
C
/
S
:
GET
.
client
envoyer
donnée
clique
sur
lien
prévoir
.
apache
récupérer
analyser
requête
.
apache
créer
tableau
contenir
valeur
envoyer
à
PHP
GET
dns-remplacé
GET
var
=
GET
:
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
var
=
GET
/
dns-remplacer
?
var
=
<
html
>
coucou
<
/
html
>
navigateur
serveur
Web
dns-remplacer
apache
communication
C
/
S
:
GET
•
URL
de
requête
contenir
valeur
–
formulaire
passer
par
l
’
URL
–
construction
de
propre
URL
:
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
/
dns-remplacer
?
var
=
bla
&
x
=
&
=
'
'
>
lien
<
/
avoir
>
dns-remplacer
page
traiter
requête
var
contenir
«
bla
»
x
contenir
contenir
«
?
»
séparer
l
’
adresse
de
ressource
donnée
«
&
»
séparer
donnée
(
champ
/
valeur
)
communication
C
/
S
:
GET
•
méthode
GET
–
donnée
être
envoyer
dans
l
’
URL
programme
–
limiter
à
octet
<
form
name
=
'
'
formGet
'
'
–
déconseiller
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
label
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
<
?
php
echo
'
'
<
p
>
bienvenu
,
<
i
>
'
'
.
$
_GET
[
`
`
client
'
'
]
.
`
`
<
/
i
>
!
<
/
p
>
'
'
;
?
>
communication
C
/
S
:
GET
-
lancer
programme
écouter
requête
envoyer
sur
propre
machine
(
localhost
)
,
sur
port
-
créer
formulaire
envoyer
donnée
avec
méthode
GET
,
vers
page
de
machine
sur
port
communication
C
/
S
:
GET
–
remplir
formulaire
avec
valeur
,
cliquer
sur
«
envoyer
»
–
navigateur
envoyer
requête
GET
serveur
(
localhost
)
avec
l
’
ensemble
variable
dans
l
’
URL
communication
C
/
S
:
GET
–
depuis
programme
«
serveur
»
écrire
réponse
–
navigateur
récupérer
réponse
,
considérer
qu
’
s
’
agir
de
ressource
viser
par
URL
avec
variable
valeur
–
navigateur
commencer
à
récupérer
réponse
communication
C
/
S
:
GET
–
depuis
programme
«
serveur
»
,
terminer
réponse
(
Ctrl
D
)
/
connexion
–
navigateur
voir
connexion
fermer
,
considérer
donnée
qu
’
avoir
récupérer
constituer
réponse
entier
,
l
’
affiche
communication
C
/
S
:
GET
(
logs
)
–
aller
regarder
«
logs
»
de
apache
(
journal
enregistrer
transaction
serveur
web
avoir
traiter
)
–
navigateur
demander
page
contenir
formulaire
serveur
–
navigateur
envoyer
formulaire
par
l
’
URL
...
voir
valeur
dans
requête
GET
enregistrer
communication
C
/
S
:
POST
.
client
remplir
formulaire
déclencher
requête
.
apache
récupérer
analyser
requête
.
apache
créer
tableau
contenir
valeur
envoyer
à
PHP
GET
dns-remplacer
POST
Name
=
Flo
POST
:
http
:
/
/
dns-remplacer
/
dns-remplacer
Name
=
Flo
POST
Name
=
Flo
Name
:
Flo
<
html
>
coucou
<
/
html
>
navigateur
serveur
Web
dns-remplacer
apache
communication
C
/
S
:
POST
<
form
name
=
'
'
formClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
...
<
?
php
$
nom
=
$
_POST
[
`
`
nomClient
'
'
]
;
$
op
=
$
_POST
[
`
`
opinionClient
'
'
]
;
$
prod
=
$
_POST
[
`
`
produit
'
'
]
;
echo
'
'
<
p
>
merci
de
participation
,
$
nom
!
<
/
p
>
'
'
;
echo
'
'
<
p
>
produit
être
:
<
i
>
$
prod
<
/
i
>
<
/
p
>
'
'
;
echo
'
'
<
p
>
opinion
être
:
<
i
>
$
op
<
/
i
>
<
/
p
>
'
'
;
?
>
communication
C
/
S
:
POST
-
HTML
•
exemple
<
form
name
=
'
'
...
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
fieldset
>
<
legend
>
donnée
<
/
legend
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
...
/
>
<
br
/
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
email
'
'
name
=
'
'
email
'
'
...
/
>
<
br
/
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
Homme
'
'
/
>
Homme
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
femme
'
'
/
>
femme
<
br
/
>
<
/
fieldset
>
<
fieldset
>
<
legend
>
produit
<
/
legend
>
<
label
>
...
<
/
label
>
<
select
name
=
'
'
produit
'
'
>
<
option
valoir
=
'
'
SuperKdo
'
'
>
...
<
/
option
>
<
option
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
option
>
<
option
valoir
=
'
'
BabyFun
'
'
>
...
<
/
option
>
<
/
select
>
<
br
/
>
<
label
>
...
<
/
label
>
<
textarea
name
=
'
'
opinion
'
'
...
>
...
<
/
textarea
>
<
/
fieldset
>
communication
C
/
S
:
POST
-
PHP
•
exemple
<
body
>
<
h@card@
>
récapitulatif
<
/
h@card@
>
<
ul
>
<
?
php
echo
'
'
<
li
>
nom
:
'
'
.
$
_POST
[
`
`
nom
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
Email
:
'
'
.
$
_POST
[
`
`
email
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
sexe
:
'
'
.
$
_POST
[
`
`
sexe
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
produire
préférer
:
'
'
.
$
_POST
[
`
`
produit
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
suggestion
:
'
'
.
$
_POST
[
`
`
opinion
'
'
]
.
`
`
<
/
li
>
'
'
;
?
>
<
/
ul
>
<
/
body
>
communication
C
/
S
:
POST
-
lancer
programme
écouter
requête
envoyer
sur
propre
machine
(
localhost
)
,
sur
port
-
créer
formulaire
envoyer
donnée
avec
méthode
POST
,
vers
page
de
machine
sur
port
communication
C
/
S
:
POST
–
remplir
formulaire
avec
valeur
,
cliquer
sur
«
envoyer
»
–
navigateur
envoyer
requête
POST
serveur
(
localhost
)
en
viser
ressource
/
dns-remplacer
,
inclure
l
’
ensemble
variable
dans
corps
(
body
)
de
requête
HTTP
communication
C
/
S
:
POST
–
depuis
programme
«
serveur
»
écrire
réponse
–
navigateur
récupérer
réponse
,
considérer
qu
’
s
’
agir
–
navigateur
d
’
réponse
possible
accessible
à
commencer
à
récupérer
URL
l
’
envoyer
réponse
donner
en
POST
communication
C
/
S
:
POST
–
navigateur
voir
connexion
fermer
,
considérer
donnée
qu
’
avoir
récupérer
constituer
réponse
entier
,
l
’
affiche
–
depuis
programme
«
serveur
»
,
terminer
réponse
(
Ctrl
D
)
/
connexion
communication
C
/
S
:
POST
(
logs
)
–
aller
regarder
«
logs
»
de
apache
(
journal
enregistrer
transaction
serveur
web
avoir
traiter
)
–
navigateur
demander
page
contenir
formulaire
serveur
–
navigateur
envoyer
formulaire
en
POST
,
voir
nom
de
variable
valeur
dans
logs
d
’
apache
!
statut
HTTP
•
requête
envoyer
=
réponse
reçu
•
réponse
HTTP
de
type
(
officiel
)
:
–
1xx
:
informationnel
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
/
/
:
url
n
’
exister
–
5xx
:
erreur
côté
serveur
–
[
autre
erreur
être
lier
serveur
web
utiliser
]
statut
HTTP
:
classique
OK
requête
avoir
être
recevoir
,
comprendre
,
exécuter
permanent
Redirect
ressource
avoir
être
déplacer
à
autre
URL
Temporary
Redirect
ressource
être
déplacer
à
autre
URL
Forbidden
requête
être
correct
,
client
n
’
avoir
droit
de
demander
serveur
de
faire
action
Not
Found
ressource
viser
par
l
’
URL
n
’
avoir
être
trouver
Internal
Server
Error
erreur
générique
/
spécifique
...
serveur
web
avoir
échouer
chose
à
moment
Bad
Gateway
serveur
web
viser
n
’
arriver
à
contacter
serveur
traiter
requête
envoyer
statut
HTTP
:
statut
HTTP
–
envoyer
requête
serveur
«
localhost
»
sur
port
,
en
demander
ressource
‘
/
’
–
apache
répondre
dans
l
’
en-tête
de
réponse
HTTP
aller
(
OK
)
:
code
–
apache
envoyer
page
web
demander
dans
corps
(
body
)
de
réponse
statut
HTTP
:
statut
HTTP
–
envoyer
requête
serveur
«
localhost
»
sur
port
,
en
demander
ressource
n
’
exister
–
apache
répondre
dans
l
’
en-tête
de
réponse
HTTP
ressource
n
’
avoir
être
trouver
:
code
–
apache
envoyer
dans
corps
de
réponse
HTTP
page
web
détailler
l
’
erreur
client
(
format
HTML
client
pouvoir
lire
)
statut
HTTP
:
statut
HTTP
–
envoyer
requête
incorrect
(
protocole
inexistant
)
serveur
«
localhost
»
sur
port
–
apache
répondre
dans
l
’
en-tête
de
réponse
HTTP
requête
être
incorrect
(
respecter
standard
qu
’
connaître
)
–
apache
envoyer
dans
corps
de
réponse
HTTP
page
web
détailler
l
’
erreur
client
(
format
HTML
client
pouvoir
lire
)
PHP
:
contrôle
de
flot
•
instruction
de
contrôle
–
instruction
pour
gérer
flot
d
’
exécution
–
instruction
conditionnel
•
conditionner
l
’
exécution
•
semblable
à
nœud
de
décision
(
diagramme
activité
)
•
if
...
else
...
,
switch
...
case
...
–
instruction
de
boucle
•
permettre
répétition
d
’
bloc
d
’
instruction
•
for
...
,
foreach
...
,
while
...
,
do
...
while
PHP
:
if
...
else
...
•
instruction
conditionnel
if
...
else
...
if
(
condition
)
{
bloc
d
’
instruction
vrai
;
}
else
{
bloc
d
’
instruction
faux
;
}
[
condition
vrai
]
bloc
d
’
instruction
vrai
optionnel
[
]
bloc
d
’
instruction
faux
if
(
$
qte
>
=
)
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
echo
'
'
<
p
>
avoir
remise
de
%
!
<
/
p
>
'
'
;
}
else
{
...
$
remise
=
;
echo
'
'
<
p
>
avoir
remise
de
%
<
/
p
>
'
'
;
PHP
:
if
...
else
...
•
instruction
conditionnel
if
...
else
...
–
donnée
pour
condition
pouvoir
venir
d
’
formulaire
dns-remplacer
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
...
<
select
name
=
'
'
prix
'
'
>
<
option
valoir
=
'
'
'
'
>
super
Kdo
-
€
<
/
option
>
...
<
/
select
>
...
<
input
type
=
'
'
number
'
'
size
=
'
'
'
'
name
=
'
'
qte
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
dns-remplacer
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
$
remise
=
;
if
(
$
qte
>
=
)
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
echo
'
'
<
p
>
avoir
remise
de
%
!
<
/
p
>
'
'
;
}
$
prix
=
$
prixunit
*
$
qte
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
echo
'
'
<
p
>
pour
prix
de
<
i
>
$
prixunit
<
/
i
>
unité
<
i
>
$
qte
<
/
i
>
unité
,
avoir
à
régler
<
i
>
$
prix
<
/
i
>
<
/
p
>
'
'
;
?
>
PHP
:
if
...
else
...
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
<
label
>
produire
:
<
/
label
>
<
select
name
=
'
'
prix
'
'
>
<
option
valoir
=
'
'
'
'
>
super
...
<
/
option
>
...
<
/
select
>
<
br
/
>
<
label
>
quantité
:
<
/
label
>
<
input
name
=
'
'
qte
'
'
type
=
'
'
number
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
$
remise
=
;
...
.
if
(
$
qte
>
=
)
{
$
remise
=
;
echo
'
'
<
p
>
avoir
...
.
<
/
p
>
'
'
;
}
...
?
>
PHP
:
if
...
elseif
...
else
...
•
instruction
conditionnel
if
...
else
...
–
bloc
if
...
else
...
pouvoir
contenir
n
’
importer
instruction
,
comprendre
d
’
autre
bloc
if
...
else
...
if
(
condition1
)
{
bloc
d
’
instruction
condition1
vrai
;
}
elseif
(
condition2
)
{
bloc
d
’
instruction
condition2
vrai
;
}
else
{
bloc
d
’
instruction
condition
être
faux
;
}
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
...
<
select
name
=
'
'
prix
'
'
>
...
<
/
select
>
...
<
input
type
=
'
'
number
'
'
...
name
=
'
'
qte
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
<
/
form
>
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
if
(
$
qte
>
=
)
{
$
remise
=
;
}
elseif
(
$
qte
>
=
)
{
$
remise
=
;
}
else
{
$
remise
=
;
}
$
prix
=
$
prixunit
*
$
qte
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
echo
'
'
<
p
>
prix
unitaire
:
<
i
>
$
prixunit
<
/
i
>
,
quantité
:
<
i
>
$
qte
<
/
i
>
,
remettre
:
<
i
>
'
'
.
$
remise
*
.
`
`
<
/
i
>
%
<
/
p
>
'
'
;
echo
`
`
<
p
>
<
i
>
total
à
régler
:
<
/
i
>
<
b
>
$
prix
<
/
b
>
<
/
p
>
'
'
;
?
>
PHP
:
for
...
•
instruction
de
boucle
:
for
–
boucle
for
permettre
de
répéter
(
nombre
de
fois
)
l
’
exécution
d
’
bloc
d
’
instruction
for
(
initialisation
;
condition
;
incrémentation
)
{
bloc
d
’
instruction
à
répéter
;
}
$
i
=
[
i
<
=
]
echo
...
i++
[
else
]
suite
...
$
i++
-
>
$
i
=
$
i
+
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
}
PHP
:
for
...
•
instruction
de
boucle
:
for
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
}
?
>
PHP
:
while
...
•
instruction
de
boucle
:
while
–
boucle
while
permettre
de
continuer
à
réaliser
bloc
d
’
opération
qu
’
condition
être
vrai
$
i
=
[
i
<
=
]
echo
...
$
i
=
$
i
+
;
[
else
]
suite
...
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
+
;
}
PHP
:
while
...
•
instruction
de
boucle
:
while
donner
valeur
initial
à
variable
$
i
$
i
dépasser
valeur
mettre
à
jour
valeur
de
variable
$
i
<
?
php
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
+
;
}
?
>
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
–
boucle
foreach
permettre
de
répéter
bloc
d
’
instruction
pour
valeur
dans
tableau
$
tableau
[
reste-t-il
valeur
?
]
$
titre
recevoir
prochain
valeur
echo
...
[
de
valeur
dans
tableau
]
suite
...
foreach
(
$
tableau
avoir
$
titre
)
{
echo
'
'
<
$
titre
>
titre
$
titre
<
/
$
titre
>
'
'
;
}
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
définir
tableau
pour
valeur
dans
tableau
<
?
php
$
tableau
=
array
(
`
`
h1
'
'
,
'
'
h2
'
'
,
'
'
h3
'
'
,
'
'
h4
'
'
,
'
'
h5
'
'
,
'
'
h6
'
'
)
;
foreach
(
$
tableau
avoir
$
titre
)
{
echo
'
'
<
$
titre
>
titre
$
titre
<
/
$
titre
>
'
'
;
}
?
>
PHP
:
foreach
...
•
instruction
de
boucle
:
foreach
–
fonctionner
pour
tableau
associatif
définir
tableau
associatif
:
clé
=
>
valeur
pour
pair
$
clé
=
>
$
valeur
dans
$
tableau
<
?
php
$
tableau
=
array
(
`
`
nom
'
'
=
>
'
'
Dupont
'
'
,
'
'
prenom
'
'
=
>
'
'
Jean
'
'
,
'
'
adresse
'
'
=
>
'
'
qq
part
à
Paris
'
'
)
;
foreach
(
$
tableau
avoir
$
cle
=
>
$
valeur
)
{
echo
'
'
<
li
>
$
cle
:
$
valeur
<
/
li
>
'
'
;
}
?
>
PHP
:
boucle
•
instruction
de
boucle
:
boucle
imbriqué
–
être
possible
d
’
imbriquer
boucle
un
dans
autre
<
table
>
<
?
php
for
(
$
lin
=
;
$
lin
<
=
;
$
lin++
)
{
echo
'
'
<
tr
>
'
'
;
for
(
$
col
=
;
$
col
<
=
;
$
col++
)
{
echo
'
'
<
td
>
'
'
.
(
$
col
*
$
lin
)
.
'
'
<
/
td
>
'
'
;
}
echo
'
'
<
/
tr
>
'
'
;
}
?
>
<
/
table
>
Evaluation
Etudiants
date
typer
description
binôme
S05
(
/
)
[
DM
]
devoir
maison
mini
projet
à
rendre
par
mail
(
/
–
23h42
)
oui
S10
(
/
)
[
DST
]
devoir
sur
table
examen
écrire
sans
document
machiner
%
S12
(
/
)
[
PROJ
]
projet
présentation
projet
oui
mai
partiel
examen
écrire
sans
document
machiner
%
PHP
:
fonction
•
fonction
–
PHP
offrir
large
panoplie
de
fonction
•
exemple
:
isset
(
$
var
)
à
TRUE
$
var
avoir
être
déclarer
•
exemple
:
empty
(
$
var
)
à
TRUE
$
var
être
vide
(
valoir
)
–
pouvoir
écrire
(
en
dehors
classe
)
•
function
nomFonction
(
$
paramètre
,
...
)
{
instruction
}
function
salutation
(
$
nom
)
{
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
echo
'
'
<
p
=
droit|droite
>
,
être|sommer
'
'
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
}
PHP
...
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
<
label
>
nom
:
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
size
=
'
'
'
'
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
<
?
php
function
salutation
(
$
nom
)
{
date_default_timezone_set
(
`
`
Europe
/
Paris
'
'
)
;
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
echo
'
'
<
p
=
droit|droite
>
...
'
'
.
date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
}
if
(
isset
(
$
_POST
[
`
`
client
'
'
]
)
AND
!
empty
(
$
_POST
[
`
`
client
'
'
]
)
)
{
salutation
(
$
_POST
[
`
`
client
'
'
]
)
;
}
else
{
salutation
(
`
`
cher
client
'
'
)
;
}
?
>
visibilité
variable
en
PHP
exister
niveau
de
visibilité
d
’
variable
selon
contexte
:
•
variable
superglobale
:
être
disponible
importer
dans
programme
.
•
variable
global
:
être
variable
,
tableau
,
objet
constant
créer
même
dans
programme
principal
.
être
visible
dans
programme
principal
.
•
variable
local
:
être
variable
de
fonction
(
paramètre
comprendre
)
.
visibilité
être
local
,
programme
principal
pouvoir
agir
sur
variable
.
porter
variable
global
•
en
PHP
,
variable
global
pouvoir
être
utiliser
à
l
’
intérieur
d
’
fonction
sans
passer
en
paramètre
–
usage
mot
clé
«
global
»
–
variable
devoir
être
déclarer
avec
«
global
»
dans
fonction
être
nécessaire
porter
variable
global
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
global
$
avoir
,
$
b
;
$
b
=
$
avoir
$
b
;
echo
«
»
.
$
b
;
}
somme
(
)
;
somme
(
)
;
?
>
avoir
déclarer
$
avoir
$
b
avec
mot
clé
«
global
»
à
l
’
intérieur
de
somme
pour
qu
’
être
manipuler
par
.
porter
variable
global
•
autre
méthode
pour
accéder
variable
global
être
de
utiliser
superglobal
$
GLOBALS
:
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
$
GLOBALS
[
'
b
'
]
=
$
GLOBALS
[
'
avoir
'
]
$
GLOBALS
[
'
b
'
]
;
echo
$
GLOBALS
[
'
b
'
]
;
}
?
>
variable
superglobale
•
variable
superglobale
être
générer
par
PHP
:
–
être
disponible
être
contexte
script
(
à
l
’
intérieur
d
’
fonction
sans
être
passer
en
paramètre
de
)
–
être
écrire
en
majuscule
commencer
,
par
underscore
«
_
»
–
être
tableau
associatif
variable
superglobale
•
$
GLOBALS
:
rassembler
variable
global
.
•
$
_ENV
:
être
variable
de
environnement
donner
par
serveur
.
•
$
_SESSION
:
être
variable
de
session
.
variable
rester
stocker
sur
serveur
temps
de
présence
de
visiteur
.
•
$
_COOKIE
:
contenir
valeur
cookies
enregistrer
sur
ordinateur
visiteur
.
•
$
_GET
:
contenir
donnée
envoyer
en
paramètre
dans
URL
.
•
$
_POST
:
contenir
information
venir
de
être
envoyer
par
formulaire
.
variable
superglobale
<
html
>
<
head
>
<
title
>
variable
$
_SERVER
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
nom
fichier
en
cours|cour
d\'execution
'
.
'
avoir
partir
de
racine
:
'
.
$
_SERVER
[
'
PHP_SELF
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
de
racine
script
:
'
.
$
_SERVER
[
'
DOCUMENT_ROOT
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
client
HTML
:
'
.
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
.
'
<
br
>
'
;
echo
'
nom
serveur
execute
script
:
'
.
$
_SERVER
[
'
SERVER_NAME
'
]
;
echo
'
<
br
/
>
<
br
/
>
'
;
echo
'
adresse
IP
être
:
'
.
$
_SERVER
[
'
REMOTE_ADDR
'
]
;
?
>
<
/
body
>
<
/
html
>
fonction
avancer
•
fonction
avancer
PHP
(
serveur
)
–
=
=
=
,
isset
,
empty
,
is_nul
–
include
,
require
,
include_once
,
require_once
–
...
•
fonction
avancer
HTTP
(
client
)
–
header
(
)
PHP
:
fonction
avancée
<
?
php
$
var1
=
;
$
var2
=
'
'
'
'
;
$
var3
=
'
'
`
`
;
$
var4
=
'
'
'
'
;
echo
(
(
$
var1
=
=
$
var2
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
$
var3
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
$
var4
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
=
$
var2
)
.
`
`
#
'
'
)
;
echo
(
(
$
var1
=
=
=
$
var3
)
.
`
`
#
'
'
)
;
echo
(
(
$
var2
=
=
$
var3
)
.
`
`
#
'
'
)
;
?
>
PHP
typer
:
=
=
comparer
valeur
=
=
=
comparer
valeur
type
TRUE
=
=
FALSE
=
=
#
#
#
#
#
#
PHP
:
fonction
avancer
•
importation
fichier
•
incorporer
contenu
d
’
fichier
dans
page
PHP
•
but
:
réutilisation
fichier
,
uniformisation
site
–
include
'
'
fichier
'
'
include_once
'
'
fichier
'
'
•
include
remplacer
ligne
par
contenu
fichier
•
include_once
faire
seul
fois
(
dans
boucle
)
–
require
'
'
fichier
'
'
require_once
'
'
fichier
'
'
•
include
,
fichier
n
’
exister
,
avoir
erreur
PHP
:
fonction
avancée
<
meta
charset
=
'
'
UTF-8
'
'
/
>
...
<
title
>
site
<
/
title
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
header
>
<
h@card@
>
site
<
/
h1
>
<
/
header
>
<
nav
>
<
h@card@
>
exemple
<
/
h@card@
>
<
ul
>
<
li
>
...
<
/
li
>
...
<
/
ul
>
<
/
nav
>
<
head
>
<
?
php
include_once
'
'
dns-remplacer
'
'
;
require
'
'
dns-remplacer
'
'
;
?
>
<
/
head
>
<
body
>
<
?
php
include_once
'
'
dns-remplacer
'
'
;
?
>
...
<
?
php
salutation
(
`
`
cher
client
'
'
)
;
?
>
<
article
>
<
h@card@
>
News
<
/
h@card@
>
<
p
>
...
<
/
p
>
<
/
article
>
...
<
?
php
function
salutation
(
$
nom
)
{
echo
'
'
<
p
=
droit|droite
>
<
b
>
bienvenu
,
$
nom
!
<
/
b
>
<
/
p
>
'
'
;
echo
'
'
<
p
=
droit|droite
>
,
être|sommer
'
'
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
}
?
>
PHP
include_once
'
'
dns-remplacer
'
'
include_once
'
'
dns-remplacer
'
'
;
require
'
'
dns-remplacer
'
'
;
salutation
(
`
`
cher
client
'
'
)
;
<
head
>
...
<
title
>
site
<
/
title
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
header
>
<
h@card@
>
site
<
/
h1
>
<
/
header
>
<
nav
>
<
h@card@
>
exemple
<
/
h@card@
>
<
ul
>
<
li
>
...
<
/
li
>
...
<
/
ul
>
<
/
nav
>
<
section
>
<
p
=
droit|droite
>
<
b
>
bienvenir
,
client
!
<
/
b
>
<
/
p
>
<
p
=
droit|droite
>
,
être|sommer
/
/
<
/
p
>
...
PHP
:
fonction
avancer
•
gettype
(
$
var
)
:
retourner
type
de
variable
•
addslashes
(
)
:
ajouter
antislashs
devant
caractère
spécial
$
res
=
addslashes
(
`
`
L
'
avoir
'
'
)
;
/
/
retourne
L\
’
avoir
.
•
strstr
(
texte
,
chaineAchercher
)
:
trouver
premier
occurrence
dans
chaîne
$
email
=
'
name
@
dns-remplacer
'
;
$
domain
=
strstr
(
$
email
,
'
@
'
)
;
echo
$
domain
;
/
/
affiche
:
@
dns-remplacer
PHP
:
fonction
avancer
•
htmlspecialchar
(
chaine
,
flag
)
:
conversion
caractère
spécial
en
entité
HTML
.
remplacer
par
exemple
&
(
commercial
)
en
&
amp
;
exemple
de
flag
être
ENT_QUOTES
convertir
guillemet
double
guillemet
simple
.
$
str
=
'
'
This
is
some
<
b
>
bold
<
/
b
>
text
.
`
`
;
echo
htmlspecialchars
(
$
str
)
;
/
/
afficher
:
This
is
some
&
lt
;
b
&
gt
;
bold
&
lt
;
/
b
&
gt
;
text
.
PHP
:
fonction
avancer
•
strip_tags
(
chaine
,
allowableTags
)
:
supprimer
balise
HTML
PHP
de
chaîne
.
commentaire
HTML
PHP
être
supprimer
comportement
pouvoir
être
modifier
avec
paramètre
allowableTags
$
text
=
‘
<
p
>
Paragraph
.
<
/
p
>
<
!
--
--
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
'
;
/
/
autoriser
<
p
>
<
avoir
>
echo
strip_tags
(
$
text
,
'
<
p
>
<
avoir
>
'
)
;
/
/
afficher
:
/
/
<
p
>
Paragraph
.
<
/
p
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
PHP
:
fonction
avancer
•
strlen
(
)
:
retourner
longueur
de
chaîne
•
strtolower
(
)
:
passer
caractère
en
minuscule
•
strtoupper
(
)
:
passer
caractère
en
majuscule
•
strpos
(
texte
,
chaine
)
:
rechercher
position
de
premier
«
chaine
»
trouver
PHP
:
fonction
avancer
•
trim
(
)
:
effacer
espace
blanc
début
à
fin
d
’
chaine
•
ereg
(
chaine
,
texte
)
:
recherche
dans
texte
,
séquence
caractère
«
chaine
»
.
retourner
longueur
de
occurrence
trouver
occurrence
avoir
être
trouver
dans
chaîne
string
,
FALSE
dans
cas
contraire
erreur
être
survenir
.
if
(
ereg
(
`
`
BCD
'
'
,
'
'
ABCDEF
'
'
)
)
{
echo
'
'
oui
'
'
;
}
else
{
echo
'
'
'
'
;
}
PHP
:
fonction
avancer
•
isset
(
$
var1
,
$
var2
,
...
)
:
déterminer
variable
être
définir
être
différent
de
NULL
•
unset
(
$
var1
,
$
var2
,
...
)
:
détruire
variable
•
empty
(
$
var
)
:
déterminer
variable
être
vide
PHP
:
fonction
avancer
•
variable
déclarer
variable
vide
être
pareil
...
FALSE
=
TRUE
=
<
?
php
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
$
var
=
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
$
var
=
'
'
'
'
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
unset
(
$
var
)
;
echo
(
isset
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
<
br
>
'
'
)
;
?
>
PHP
:
fonction
avancée
$
Var
isset
empty
(
$
var
déclarer
)
(
)
faux
(
)
vrai
(
)
vrai
(
)
faux
«
»
(
)
vrai
(
)
vrai
(
unset
$
var
)
(
)
faux
(
)
vrai
PHP
:
fonction
avancer
•
valeur
«
null
»
disponible
,
signifier
variable
exister
•
Null
!
=
Empty
<
?
php
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
'
'
'
'
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
$
var
=
null
;
echo
(
is_null
(
$
var
)
.
`
`
-
'
'
.
empty
(
$
var
)
.
`
`
;
;
'
'
)
;
?
>
PHP
notice
:
Undefined
variable
:
var
in
standard
input
coder
line
;
;
;
;
;
;
PHP
:
fonction
avancée
$
Var
is_null
empty
(
$
var
déclarer
)
(
)
vrai
*
(
)
vrai
(
)
faux
(
)
vrai
«
»
(
)
faux
(
)
vrai
null
(
)
vrai
(
)
vrai
*
:
is_null
(
)
déclencher
alerte
(
PHP
notice
)
variable
n
’
avoir
être
allouer
PHP
:
fonction
avancer
•
array_value
(
array
)
:
retourner
valeur
de
tableau
–
même
dans
tableau
(
utile
pour
vider
case
vide
)
•
array_keys
(
array
,
valeur
)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n
’
être
spécifier
retourner
clé
tableau
(
utile
pour
connaître
clé
possible
)
PHP
:
fonction
avancer
•
array_value
(
array
)
:
retourner
valeur
de
tableau
–
même
dans
tableau
-
;
;
-
;
;
-
;
;
-
;
;
-
-
;
;
-
;
;
-
;
;
-
;
;
-
<
?
php
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
;
$
var1
=
array_values
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancée
Prenom
-
Jean
;
;
nom
-
Martin
;
;
Prenom2
-
Olivier
;
;
Prenom3
-
Jean
-
Jean
;
;
-
Martin
;
;
-
Olivier
;
;
-
Jean
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_values
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
array_keys
(
array
,
valeur
)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n
’
être
spécifier
retourner
clé
tableau
-
Prenom
;
;
-
Prenom3
;
;
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_keys
(
$
tab
,
'
'
Jean
'
'
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
array_keys
(
array
,
valeur
)
:
retourner
clé
associer
à
«
valeur
»
–
valeur
n
’
être
spécifier
retourner
clé
tableau
-
Prenom
;
;
-
nom
;
;
-
Prenom2
;
;
-
Prenom3
;
;
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
array_keys
(
$
tab
)
;
foreach
(
$
tab
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
echo
'
'
<
br
>
'
'
;
foreach
(
$
var1
avoir
$
id
=
>
$
val
)
{
echo
'
'
$
id
-
$
val
;
;
'
'
;
}
?
>
PHP
:
fonction
avancer
•
in_array
(
valeur
,
array
)
:
vérifier
valeur
appartenir
à
tableau
•
array_key_exists
(
key
,
array
)
:
vérifier
clé
exister
dans
tableau
PHP
:
fonction
avancée
TRUE
=
FALSE
=
-
-
-
<
?
php
$
tab
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
$
tab
[
`
`
Prenom2
'
'
]
=
'
'
Olivier
'
'
;
$
tab
[
`
`
Prenom3
'
'
]
=
'
'
Jean
'
'
;
$
tab
[
`
`
nom
'
'
]
=
'
'
Martin
'
'
;
$
var1
=
in_array
(
`
`
Jean
'
'
,
$
tab
)
;
$
var2
=
array_key_exists
(
`
`
nom
'
'
,
$
tab
)
;
$
var3
=
in_array
(
`
`
à
'
'
,
$
tab
)
;
$
var4
=
array_key_exists
(
`
`
à
'
'
,
$
tab
)
;
echo
'
'
$
var1
-
$
var2
-
$
var3
-
$
var4
'
'
;
?
>
PHP
:
fonction
avancée
HTTP
•
en
PHP
,
fonction
header
(
)
charger
de
envoyer
client
en-tête
passer
en
paramètre
•
règle
important
:
appel
à
‘
header
(
)
’
devoir
faire
avant
envoi
navigateur
–
attention
includes
écrire
chose
...
–
écrire
de
<
html
>
voir
l
’
être
dans
en-tête
HTTP
HTML
!
PHP
:
fonction
avancée
HTTP
•
pouvoir
utiliser
fonction
«
header
(
)
»
pour
envoyer
code
HTTP
:
<
?
php
header
(
`
`
HTTP
/
Not
Found
'
'
)
;
?
>
<
?
php
header
(
`
`
status
:
Moved
Permanently
'
'
,
false
,
)
;
header
(
'
location
:
http
:
/
/
dns-remplacer
/
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
Header
HTTP
renvoyer
par
apache
...
...
pouvoir
modifier
avec
fonction
«
header
(
)
»
PHP
:
fonction
avancée
HTTP
•
pour
créer
redirection
avec
PHP
,
utiliser
header
pour
envoyer
en-tête
de
type
location
(
adresse
)
•
script
de
redirection
(
HTTP
)
:
<
?
php
header
(
'
location
:
http
:
/
/
dns-remplacer
/
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
•
pouvoir
envoyer
fichier
jouer
avec
d
’
autre
champ
HTTP
«
Content-
type
»
–
«
Content-Type
»
indiquer
type
de
donnée
,
navigateur
essayer
d
’
utiliser
l
’
outil
préférer
de
l
’
utilisateur
pour
lire
fichier
•
readfile
(
)
permettre
d
’
envoyer
fichier
PHP
:
fonction
avancée
HTTP
serveur
web
déclarer
en
header
qu
’
s
’
agir
de
«
text
/
html
»
,
texte
interprétable
par
navigateur
lisible
par
l
’
utilisateur
.
navigateur
l
’
affiche
.
PHP
:
fonction
avancée
HTTP
serveur
web
déclarer
en
header
qu
’
s
’
agir
de
«
image
/
jpeg
»
,
d
’
image
format
JPEG
.
texte
n
’
en
être
,
être
impossible
d
’
afficher
image
,
navigateur
essayer
de
même
PHP
:
fonction
avancée
HTTP
serveur
web
déclarer
en
header
qu
’
s
’
agir
de
«
video
/
mp4
»
,
d
’
vidéo
format
MP4
.
texte
n
’
en
être
,
être
impossible
d
’
afficher
vidéo
,
navigateur
essayer
de
de
lire
avec
lecteur
de
vidéo
PHP
:
fonction
avancée
HTTP
serveur
web
déclarer
en
header
qu
’
s
’
agir
de
«
application
/
octet-
stream
»
,
d
’
flux
d
’
octet
.
par
défaut
,
navigateur
proposer
de
télécharger
fichier
associer
de
l
’
afficher
PHP
:
fonction
avancée
HTTP
<
?
php
/
/
declare
PDF
header
(
'
Content-Type
:
application
/
pdf
'
)
;
/
/
client
voir
fichier
'
'
dns-remplacer
'
'
header
(
'
Content-
disposition
:
attachment
;
filename
=
'
'
dns-remplacer
'
'
'
)
;
/
/
fichier
serveur
web
être
transmettre
readfile
(
'
dns-remplacer
'
)
;
?
>
PHP
:
fonction
avancée
HTTP
<
?
php
$
file
=
'
dns-remplacer
'
;
if
(
file_exists
(
$
file
)
)
{
header
(
'
Content-Description
:
file
Transfer
'
)
;
header
(
'
Content-Type
:
application
/
octet-stream
'
)
;
header
(
'
Content-
disposition
:
attachment
;
filename
=
'
'
'
.basename
(
$
file
)
.
'
'
'
'
)
;
header
(
'
expirer
:
'
)
;
header
(
'
Cache-Control
:
must-revalidate
'
)
;
header
(
'
Pragma
:
public
'
)
;
header
(
'
Content-Length
:
'
.
filesize
(
$
file
)
)
;
readfile
(
$
file
)
;
exit
;
}
?
>
développement
Web
–
PHP
cours|cour
rappel
:
architecturer
général
base
de
donné
navigateur
serveur
Web
serveur
d
’
application
front
office
Back
office
rappel
:
architecturer
général
navigateur
serveur
Web
&
base
de
donnée
apache
front
office
Back
office
rappel
:
serveur
Web
•
communication
entre
«
navigateur
web
»
«
serveur
web
»
faire
avec
protocole
HTTP
http
:
/
/
dns-remplacer
/
dns-remplacer
(
GET
dns-remplacer
)
GET
dns-remplacer
<
html
>
coucou
<
/
html
>
coucou
dns-remplacer
navigateur
serveur
Web
apache
protocole
pour
transmettre
information
:
HTTP
rappel
:
serveur
Web
•
communication
entre
client
serveur
faire
avec
méthode
GET
POST
•
GET
:
passage
d
’
information
par
l
’
URL
,
par
requête
même
•
POST
:
passage
d
’
information
par
contenu
de
requête
rappel
:
serveur
Web
•
requête
envoyer
=
réponse
reçu
•
réponse
HTTP
de
type
(
officiel
)
:
–
1xx
:
informationnel
–
2xx
:
succès
–
3xx
:
redirection
–
4xx
:
erreur
côté
client
–
5xx
:
erreur
côté
serveur
–
[
autre
erreur
être
lier
serveur
web
utiliser
]
rappel
:
serveur
Web
•
Header
HTTP
permettre
de
déclarer
type
de
donnée
transmettre
–
Content-Type
:
text
/
html
–
Content-Type
:
application
/
pdf
–
Content-Type
:
application
/
octet-stream
–
Content-Type
:
video
/
mp4
•
navigateur
web
avoir
paramètre
personnalisables
pour
choisir
programme
externe
(
)
selon
type
de
donné
rappel
:
PHP
•
PHP
être
extension
à
côté
de
apache
–
apache
configurer
pour
appeler
PHP
lorsqu
’
voir
passer
requête
terminer
par
«
.php
»
–
PHP
traiter
fichier
en
question
,
produire
réponse
renvoyer
par
apache
<
html
>
<
?
php
echo
'
'
B
'
'
;
?
>
<
/
html
>
dns-remplacer
GET
dns-remplacé
GET
dns-remplacer
navigateur
serveur
Web
apache
<
html
>
B
<
html
>
dns-remplacer
<
html
>
B
<
/
html
>
dns-remplacer
rappel
:
PHP
•
langage
typer
–
flexible
...
–
...
possibilité
de
faire
n
’
importer
•
langage
interpréter
–
CLI
disponible
pour
script
•
usage
dans
cours|cour
:
extension
apache
SGBD
&
BDD
•
SGBD
:
système
de
gestion
de
base
de
donnée
[
DBMS
:
DataBase
management
System
]
•
BDD
:
base
de
donnée
[
DB
:
DataBase
]
SGBD
&
BDD
cours|cour
ID
nom
Prenom
Jaffal
Ali
Boissier
Fabrice
•
BDD
:
donnée
organiser
dans
conteneur
table
:
personne
•
SGBD
:
système
select
*
FROM
logiciel
gérer
base
de
donnée
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
SGBD
&
BDD
•
Qu
’
être
qu
’
SGBD
?
«
C
’
être
logiciel
système
destiner
à
stocker
à
partager
information
dans
base
de
donnée
,
en
garantir
qualité
,
pérennité
confidentialité
information
,
en
cacher
complexité
opération
.
»
WIKIPEDIA
parmi
logiciel
connu
,
trouver
:
MySQL
,
PostgreSQL
,
SQLite
,
oracle
MariaDB
.
pour
liste
détailler
SGBD
,
consulter
lien
http
:
/
/
dns-remplacer
/
sgbdcmp
/
#
LI
SGBD
&
BDD
•
«
avant
»
:
organiser
même
disque
fichier
,
coder
bout
de
programme
spécifique
pour
naviguer
(
effectuer
lecture
/
écriture
)
BDD
(
Search
for
«
handle
»
description
)
Get
/
car
/
door
/
handle
/
description
[
Seek
Disc
,
Track
,
block
&
Extract
block
]
application
SGBD
&
BDD
•
Aujourd
’
hui
:
usage
d
’
pilote
logiciel
effectuer
transaction
avec
SGBD
–
api
,
bibliothèque
,
...
extension
permettre
de
mettre
SQL
dans
langage
de
programmation
,
de
récupérer
tableau
réponse
select
*
FROM
connecteur
(
api
,
extension
,
...
)
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
serveur
Web
SGBD
PHP
&
SGBD
:
connecteur
$
sql
=
'
'
select
*
FROM
personne
'
'
;
$
res
=
mysqli-
>
query
(
$
sql
)
;
$
line
=
$
res-
>
fetch_object
(
)
;
echo
$
line-
>
nom
;
dns-remplacer
select
*
FROM
GET
dns-remplacer
MySQLi
Jaffal
:
Jaffal
:
Ali
;
:
Boissier
:
Fabrice
;
navigateur
base
de
donnée
serveur
Web
PHP
&
SGBD
:
connecteur
•
extension
à
PHP
exister
pour
interroger
SGBD
:
–
MySQL
:
obsolète
–
l
’
utiliser
!
(
attention
:
ancien
tutos
l
’
utiliser
)
–
MySQLi
:
MySQL
«
improved
»
mise
à
jour
de
l
’
extension
MySQL
–
PDO
:
PHP
dater
Object
piloter
générique
multi-SGBD
•
(
hors
PHP
:
ODBC
(
middleware
)
,
connecteur
quasi-universel
)
–
open
DataBase
Connectivity
MySQL
avec
PHP
manipulation
base
de
donnée
MySQL
faire
via
interface
graphique
‘
PhpMyAdmin
’
en
exécuter
script
PHP
.
.
PhpMyAdmin
•
programme
permettre
de
avoir
vue
rapide
de
l
’
ensemble
donnée
.
•
C
’
être
outil
connaître
permettre
de
manipuler
base
de
donnée
MySQL
.
•
PhpMyAdmin
être
livrer
avec
WAMP
,
hébergeur
permettre
de
utiliser
phpMyAdmin
.
(
chemin
d
’
accès
:
http
:
/
/
localhost
:
/
phpMyAdmin
)
MySQL
avec
PHP
.
script
PHP
•
Etapes
pour
utiliser
base
donnée
)
connexion
serveur
MySQL
)
envoi
requête
SQL
(
select
,
insert
into
...
)
)
récupération
résultat
)
fermeture
de
connexion
MySQLi
•
connexion
à
serveur
MySQL
à
travers
mysqli
–
communication
avec
BdD
passer
par
objet
de
classe
«
mysqli
»
–
connexion
s
’
effectuer
à
création
de
objet
(
new
)
$
idcon
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
objet
identifier
de
connexion
nom
serveur
utilisateur
autoriser
à
accéder
à
base
mot
de
passe
base
de
donnée
•
connexion
ouvert
devoir
être
fermer
$
bool
=
$
idcon-
>
clore
(
)
;
demander
à
l
’
objet
mysqli
de
fermer
connexion
MySQLi
astuce
:
placer
information
dans
fichier
faire
require
(
include
)
'
'
fichier
'
'
création
de
l
’
objet
connexion
L
’
attribut
connect_errno
de
indique
connexion
avoir
être
établir
en
cas
de
problème
,
arrêter
avec
fonction
die
.
fermeture
de
connexion
<
?
php
$
host
=
'
'
localhost
'
'
;
$
user
=
'
'
root
'
'
;
$
mdp
=
'
'
root
'
'
;
$
bdd
=
'
'
clientsBD
'
'
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
if
(
$
mysqli-
>
connect_errno
)
{
die
(
`
`
<
p
>
impossible
de
connecter
à
$
bdd
:
'
'
.
$
mysqli-
>
connect_error
.
'
'
<
/
p
>
'
'
)
;
}
else
{
echo
'
'
<
p
>
connecter
serveur
$
host
,
à
base
$
bdd
<
/
p
>
'
'
;
$
mysqli-
>
clore
(
)
;
}
?
>
MySQLi
•
envoyer
de
requête
à
base
de
donnée
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
résultat
de
requête
exécution
de
requête
sur
l
’
objet
connexion
requêter
SQL
à
exécuter
–
requêter
SQL
:
•
S
’
s
’
agir
d
’
select
,
résultat
correspondre
donnée
fournir
par
requête
(
objet
mysqli_result
)
•
(
insert
,
UPDATE
,
DELETE
...
)
,
résultat
être
TRUE
requête
être
exécuter
,
FALSE
<
form
name
=
'
'
formNouveauClient
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
...
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
...
/
>
...
<
input
type
=
'
'
text
'
'
name
=
'
'
email
'
'
...
/
>
...
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
PHP
dns-remplacer
<
?
php
function
connexion
(
)
{
$
host
=
'
'
localhost
'
'
;
$
user
=
'
'
uml
'
'
;
$
mdp
=
'
'
uml
'
'
;
$
bdd
=
'
'
clientsBD
'
'
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
if
(
$
mysqli-
>
connect_errno
)
{
die
(
`
`
<
p
>
impossible
...
'
'
.
$
mysqli-
>
connect_error
.
`
`
<
/
p
>
'
'
)
;
}
return
$
mysqli
;
}
?
>
dns-remplacé
<
?
php
if
(
!
empty
(
$
_POST
[
`
`
nom
'
'
]
)
AND
!
empty
(
$
_POST
[
`
`
e
mail
'
'
]
)
)
{
require
'
'
dns-remplacer
'
'
;
$
mysqli
=
connexion
(
)
;
$
nom
=
$
_POST
[
`
`
nom
'
'
]
;
$
email
=
$
_POST
[
`
`
email
'
'
]
;
$
adr
=
$
_POST
[
`
`
adresse
'
'
]
;
$
id
=
'
\N
'
;
/
*
auto-increment
*
/
$
sql
=
'
'
insert
INTO
client
(
id
,
nom
,
email
,
adresse
)
valoir
(
'
$
id
'
,
'
$
nom
'
,
'
$
email
'
,
'
$
adr
'
)
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
if
(
!
$
result
)
{
echo
'
'
<
p
>
désoler
,
...
<
/
p
>
'
'
;
}
else
{
echo
'
'
<
p
>
être
client
numéro
<
i
>
'
'
.
$
mysqli-
>
insert_id
.
`
`
<
/
i
>
<
/
p
>
'
'
;
}
$
mysqli-
>
clore
(
)
;
}
...
?
>
MySQLi
•
récupération
donnée
$
result
=
$
mysqli-
>
query
(
`
`
select
*
FROM
table
'
'
)
;
–
requête
select
fournir
donnée
–
récupérer
résultat
(
ligne
à
ligne
)
à
l
’
aide
opération
fetch_
*
–
appel
à
fetch_
*
retourner
prochain
ligne
•
ligner
dans
tableau
à
indice
:
$
result-
>
fetch_row
(
)
;
•
ligner
dans
tableau
associatif
:
$
result-
>
fetch_assoc
(
)
;
•
ligner
dans
objet
:
$
result-
>
fetch_object
(
)
;
dns-remplacer
<
?
php
function
connexion
(
)
{
...
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
...
return
$
mysqli
;
}
?
>
exécuter
requête
avec
l
’
opération
$
mysqli-
>
query
L
’
opération
$
result-
>
fetch_object
récupérer
prochain
ligne
,
faux
s
’
n
’
rester
de
ligne
.
attribut
de
requête
devenir
attribut
de
l
’
objet
$
ligner
dns-remplacer
<
?
php
require
'
'
dns-remplacer
'
'
;
$
mysqli
=
connexion
(
)
;
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
if
(
!
$
result
)
{
echo
'
'
<
p
>
Desolée
...
<
/
p
>
'
'
;
}
else
{
...
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne-
>
id
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
nom
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
email
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
adresse
.
`
`
<
/
td
>
'
'
;
...
}
...
}
?
>
MySQLi
même
requête
avec
récupération
information
•
...
par
tableau
à
indice
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
while
(
$
ligne
=
$
result-
>
fetch_row
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
...
}
...
commencer
par
•
...
par
tableau
associatif
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
while
(
$
ligne
=
$
result-
>
fetch_assoc
(
)
)
{
...
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
id
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
nom
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
email
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
adresse
'
]
.
`
`
<
td
>
'
'
;
...
}
...
attribut
être
accessible
par
nom
MySQLi
•
autre
information
pouvoir
être
récupérer
d
’
objet
mysqli_result
(
$
result
=
$
mysqli-
>
query
(
...
)
)
–
de
ligne
colonne
pouvoir
récupérer
•
$
nbligne
=
$
result-
>
num_rows
;
•
$
nbcol
=
$
result-
>
field_count
;
–
nom
colonne
(
attribut
)
dans
résultat
•
$
colonne
=
$
result-
>
fetch_fields
(
)
;
MySQLi
à
partir
de
l
’
objet
$
result
,
pouvoir
récupérer
nombre
de
ligne
(
attribut
num_rows
)
de
colonne
par
ligne
(
attribut
field_count
)
.
...
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
...
echo
'
'
<
p
>
avoir
'
'
.
$
result-
>
num_rows
.
`
`
client
.
<
/
p
>
'
'
;
echo
'
'
<
p
>
avoir
'
'
.
$
result-
>
field_count
.
'
'
attribut
par
client
.
<
/
p
>
'
'
;
...
pouvoir
récupérer
colonne
.
colonne
être
objet
l
’
attribut
name
donner
nom
.
ligne
être
objet
attribut
correspondre
colonne
.
pouvoir
utiliser
foreach
pour
accéder
à
valeur
attribut
.
...
$
titre
=
$
result-
>
fetch_fields
(
)
;
foreach
(
$
titre
avoir
$
colonne
)
{
echo
'
'
<
th
>
'
'
.
$
colonne-
>
name
.
'
'
<
/
th
>
'
'
;
}
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
echo
'
'
<
tr
>
'
'
;
foreach
(
$
ligne
avoir
$
colonne
=
>
$
val
)
{
echo
'
'
<
td
>
'
'
.
$
val
.
`
`
<
/
td
>
'
'
;
}
}
echo
'
'
<
/
tr
>
'
'
;
}
...
MySQLi
$
mysql
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
$
mysql-
>
connect_errno
(
)
;
$
sql
=
'
'
insert
INTO
client
(
id
,
nom
,
email
,
adresse
)
valoir
(
'
$
id
'
,
'
$
nom
'
,
'
$
email
'
,
'
$
adr
'
)
'
'
;
$
result
=
$
mysql-
>
query
(
$
sql
)
;
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
$
ligne-
>
id
;
$
ligne-
>
nom
;
}
$
mysql-
>
clore
(
)
;
MySQLi
•
pour
debugger
:
(
sauf
en
production
)
/
*
test
d
’
erreur
avoir
connexion
*
/
$
mysqli
=
new
mysqli
(
`
`
localhost
'
'
,
'
'
nobody
'
'
,
'
'
'
'
)
;
if
(
mysqli_connect_errno
(
)
)
{
printf
(
`
`
connexion
avoir
échouer
:
%
s\n
'
'
,
mysqli_connect_error
(
)
)
;
exit
(
)
;
}
/
*
test
d
’
erreur
de
requête
*
/
if
(
!
$
mysqli-
>
query
(
`
`
set
avoir
=
'
'
)
)
{
print_r
(
$
mysqli-
>
error_list
)
;
}
PDO
•
PDO
:
PHP
dater
Object
•
piloter
générique
multi-SGBD
–
MySQL
,
PostGreSQL
,
oracle
,
DB2
,
SQL
Server
,
...
•
similaire
à
MySQLi
–
variation
dans
syntaxe
...
–
...
dans
comportement
PDO
:
connexion
•
connexion
faire
avec
«
connection
string
»
contenir
information
de
BDD
:
–
host
:
Localhost
(
ip-remplacée
>
)
–
port
:
$
connexion
=
new
PDO
(
'
'
mysql
:
host
=
mon_serveur
;
port
=
mon_port
;
dbname
=
ma_bdd
'
'
,
'
'
mon_login
'
'
,
'
'
mon_pass
'
'
)
;
PDO
:
Ecriture
/
EXEC
•
requêter
d
’
écriture
:
insert
,
UPDATE
,
DELETE
–
faire
avec
méthode
PDO
:
:
exec
(
)
–
avec
QUERY
!
–
renvoyer
nombre
de
modification
effectuer
(
integer
)
$
requete
=
'
'
DELETE
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
compteur
=
$
connexion-
>
exec
(
$
requete
)
;
PDO
:
lecture
/
QUERY
•
requêter
de
lecture
:
select
–
faire
avec
méthode
PDO
:
:
query
(
)
–
avec
EXEC
!
–
renvoyer
résultat
(
PDOStatement
)
$
requete
=
'
'
select
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
PDO
:
résultat
/
fetch
•
lecture
de
réponse
d
’
requête
de
lecture
:
fetch
•
fetch
(
)
:
renvoyer
ligne
suivant
résultat
•
fetchObject
(
)
:
renvoyer
ligne
suivant
en
qu
’
objet
•
fetchAll
(
)
:
renvoyer
tableau
de
réponse
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
;
<
-
tableau
associatif
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_NUM
)
;
<
-
tableau
simple
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_BOTH
)
;
<
-
(
par
défaut
)
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
<
-
objet
PDO
:
fermeture
connexion
•
avant
de
refaire
requête
,
falloir
libérer
curseur
en
place
$
resultats-
>
closeCursor
(
)
;
PDO
$
connexion
=
new
PDO
(
'
'
mysql
:
host
=
mon_serveur
;
port
=
mon_port
;
dbname
=
ma_bdd
'
'
,
'
'
mon_login
'
'
,
'
'
mon_pass
'
'
)
;
$
requete
=
'
'
select
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
'
'
;
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
while
(
$
ligne
=
$
resultats-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
)
{
$
ligne-
>
id
;
$
ligne-
>
nom
;
}
$
resultats-
>
closeCursor
(
)
;
PDO
:
...
or
die
(
)
•
pour
débugger
requête
,
oublier
de
demander
à
PHP
d
’
afficher
l
’
erreur
s
’
avoir
!
–
sauf
en
production
!
fois
site
en
ligne
,
falloir
afficher
erreur
...
–
risquer
qu
’
pirate
récupérer
information
de
debug
$
resultats
=
$
connexion-
>
query
(
$
requete
)
;
if
(
!
$
resultats
)
{
print_r
(
$
connexion-
>
errorInfo
(
)
)
;
}
programmation
orienter
objet
(
POO
)
«
classe
objet
»
•
classe
permettre
définition
d
’
nouveau
type
de
variable
rassembler
attribut
.
–
permettre
définition
de
fonction
manipuler
attribut
,
en
POO
,
fonction
s
’
appeler
‘
méthode
’
.
•
objet
être
instance
d
’
classe
.
objet
être
assimiler
à
variable
classe
type
de
objet
.
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
POO
avoir
deux
but
:
•
faciliter
réutilisation
code
écrire
grâce
à
héritage
•
encapsulation
donnée
traitement
correspondant
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
•
faciliter
réutilisation
code
écrire
grâce
à
héritage
:
–
L
’
héritage
permettre
,
à
partir
de
classe
existant
,
de
créer
nouveau
reprendre
caractéristique
de
adapter
besoin
sans
modifier
classe
de
base
.
–
être
possible
de
redéfinir
méthode
dans
classe
hériter
de
classe
de
base
sauf
méthode
avoir
être
définir
final
.
L
’
appel
de
méthode
de
objet
être
possible
sans
soucier
de
type
intrinsèque
:
agir
polymorphisme
.
•
polymorphisme
traire
de
capacité
de
objet
à
posséder
forme
.
:
ma_fonction
(
int
i
)
ma_fonction
(
string
str
)
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
•
encapsulation
donnée
traitement
correspondant
.
–
L
’
encapsulation
permettre
de
regrouper
ensemble
d
’
attribut
avec
ensemble
de
méthode
en
classe
permettre
de
manipuler
.
PHP
orienter
objet
•
PHP
être
langage
«
orienter
objet
»
–
manipulation
de
classe
d
’
objet
définition
de
classe
visibilité
:
private
$
nom
définition
d
’
attribut
opération
:
public
function
...
accès
à
attribut
$
this-
>
attribut
retourner
valeur
return
valeur
;
<
?
php
{
private
$
nom
;
public
function
setNom
(
$
nouvNom
)
{
$
this-
>
nom
=
$
nouvNom
;
}
public
function
getNom
(
)
{
return
$
this-
>
nom
;
}
}
POO
en
PHP
«
visibilité
de
attribut
de
méthode
»
•
«
public
»
:
attribut
méthode
être
public
,
pouvoir
avoir
accès
depuis
importer
.
•
«
private
»
:
imposer
restriction
.
L
’
accès
attribut
méthode
être
possible
depuis
intérieur
de
classe
.
–
mettre
constructeur
avec
type
de
visibilité
private
,
pouvoir
être
appeler
,
pouvoir
instancier
classe
•
«
protected
»
avoir
même
effet
private
,
à
l
’
exception
classe
fille
avoir
accès
attribut
protéger
.
PHP
orienter
objet
•
classer
&
objet
–
création
d
’
objet
:
$
obj
=
new
classe
(
)
;
création
d
’
objet
$
toto
=
new
personne
(
)
accès
opération
publique
$
toto-
>
setNom
(
`
`
toto
'
'
)
$
toto
-
>
getNom
(
)
impossible
d
’
accéder
attribut
privé
...
<
?
php
$
toto
=
new
personne
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
echo
'
'
<
p
>
...
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
$
toto-
>
nom
=
'
'
blablabla
'
'
;
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
?
>
PHP
orienter
objet
erreur
l
’
attribut
«
nom
»
être
priver
!
!
<
html
>
<
head
>
...
<
?
php
{
private
$
nom
;
...
}
/
/
fin
classe
personne
?
>
<
/
head
>
<
body
>
...
<
?
php
$
toto
=
new
personne
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
echo
'
'
<
p
>
objet
<
i
>
personne
<
/
i
>
:
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
...
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
?
>
<
/
body
>
<
/
htlml
>
PHP
orienter
objet
•
classer
&
objet
:
–
héritage
:
SousClasse
extends
superclasse
classe
Employe
hériter
de
classe
class
Employe
extends
rajouter
nouveau
attribut
private
$
salaire
nouveau
opération
public
function
augmentation
public
function
getSalaire
class
Employe
extends
{
private
$
salaire
=
;
public
function
augmentation
(
$
perc
)
{
if
(
$
perc
>
)
{
$
this-
>
salaire
=
$
this-
>
salaire
$
this-
>
salaire
*
$
perc
;
}
}
public
function
getSalaire
(
)
{
return
$
this-
>
salaire
;
}
}
fichier
dns-remplacé
PHP
orienter
objet
•
classer
&
objet
importer
définition
classe
Employe
toto
être
employé
,
être
personne
toto
posséder
salaire
(
Employe
)
,
nom
(
personne
)
classe
Employe
hériter
attribut
opération
de
personne
<
?
php
include
'
'
dns-remplacer
'
'
;
$
toto
=
new
Employe
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
;
echo
'
'
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
`
`
€
<
/
p
>
'
'
;
?
>
PHP
orienter
objet
•
classer
&
objet
<
html
>
<
head
>
.
.
.
<
/
head
>
<
body
>
<
h@card@
>
objet
en
PHP
<
/
h1
>
<
?
php
include
'
'
dns-remplacer
'
'
;
$
toto
=
new
Employe
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
p
>
objet
Employe
:
<
/
p
>
<
ul
>
'
'
;
echo
'
'
<
li
>
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
<
/
li
>
'
'
;
echo
'
'
<
/
ul
>
'
'
;
?
>
<
/
body
>
<
/
html
>
PHP
orienter
objet
•
classer
&
objet
–
méthode
constructeur
:
__construct
–
redéfinition
d
’
opération
constructeur
être
appeler
fois
qu
’
objet
être
créer
(
new
)
redéfinition
de
l
’
opération
getSalaire
parent
:
:
getSalaire
correspondre
à
l
’
opération
getSalaire
définir
par
super-classe
(
Employe
)
manager
extends
Employe
{
private
$
bonus
;
function
__construct
(
$
bon
)
{
$
this-
>
bonus
=
$
bon
;
}
public
function
getSalaire
(
)
{
return
parent
:
:
getSalaire
(
)
$
this-
>
bonus
;
}
public
function
setBonus
(
$
nouvBon
)
{
...
}
public
function
getBonus
(
)
{
...
}
}
PHP
orienter
objet
•
classer
&
objet
appel
constructeur
:
function
__construct
(
$
bon
)
{
$
this-
>
bonus
=
$
bon
;
}
appel
à
l
’
opération
getSalaire
de
classe
manager
<
?
php
require
'
'
dns-remplacer
'
'
;
$
toto
=
new
manager
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmentation
(
)
;
echo
'
'
<
p
>
<
i
>
manager
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
,
salaire
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
'
'
.
`
`
,
bonus
'
'
.
$
toto-
>
getBonus
(
)
.
`
`
<
/
p
>
'
'
;
?
>
POO
en
PHP
«
l
’
opérateur
:
:
»
opérateur
de
résolution
de
portée
«
:
:
»
(
doubler
deux
point
)
fournir
moyen
de
accéder
membre
statique
constant
,
attribut
méthode
surcharger
de
classe
.
•
mot
clé
«
self
:
:
»
être
utiliser
pour
accéder
méthode
attribut
statique
depuis
classe
•
mot
clé
«
parent
:
:
»
être
utiliser
pour
accéder
propriété
méthode
surchargé
constant
d
’
classe
depuis
classe
fille
•
pour
référencer
élément
en
dehors
de
classe
,
utiliser
nom
de
classe
«
nomClasse
:
:
»
PHP
:
session
•
mécanisme
de
session
–
visite
à
site
/
page
être
indépendant
–
session
permettre
de
conserver
information
visiteur
entre
page
–
information
sur
session
être
stocker
sur
serveur
•
fonctionnement
général
)
ouverture
de
session
:
session_start
(
)
•
utilisateur
recevoir
identifier
transmettre
entre
page
)
définition
variable
de
session
(
donner
)
•
variable
de
session
être
transmettre
de
page
à
page
•
$
_SESSION
[
`
`
variable
'
'
]
=
valeur
;
)
fermeture
de
session
:
session_destroy
(
)
PHP
:
session
Login
&
mdp
différent
de
uml
Login
&
mdp
correct
(
uml
/
uml
)
<
form
name
=
'
'
...
'
'
action
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
>
Login
:
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
:
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
PHP
:
session
ouverture
d
’
session
(
début
de
page
)
définition
variable
de
session
$
_SESSION
[
`
`
var
'
'
]
variable
de
session
contenir
information
passer
de
page
en
page
.
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
...
$
login
=
$
_POST
[
`
`
login
'
'
]
;
$
mdp
=
$
_POST
[
`
`
mdp
'
'
]
;
if
(
$
login
=
=
'
'
uml
'
'
AND
$
mdp
=
=
'
'
uml
'
'
)
{
$
_SESSION
[
`
`
login
'
'
]
=
$
login
;
...
echo
'
'
<
h@card@
>
bienvenu
,
$
login
<
/
h1
>
'
'
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
page
accessible
membre
.
<
/
p
>
'
'
;
}
?
>
<
/
body
>
<
/
html
>
PHP
:
session
usage
variable
de
session
$
_SESSION
[
`
`
var
'
'
]
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
$
login
=
$
_SESSION
[
`
`
login
'
'
]
;
...
echo
'
'
<
p
>
client
<
b
>
$
login
<
/
b
>
:
être
page
pour
abonné
<
/
p
>
'
'
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
agir
de
page
priver
!
!
falloir
être
membre
.
<
/
p
>
'
'
;
}
?
>
...
PHP
:
session
fermeture
de
session
session_destroy
(
)
oublier
de
vider
variable
de
session
unset
(
$
_SESSION
[
'
'
var
'
'
]
)
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
...
unset
(
$
_SESSION
[
`
`
login
'
'
]
)
;
session_destroy
(
)
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
de
connexion
actif
.
<
/
p
>
'
'
;
}
?
>
...
PHP
:
fonction
avancer
(
rappel
)
•
isset
(
$
var1
,
$
var2
,
...
)
:
déterminer
variable
être
définir
être
différent
de
NULL
•
unset
(
$
var1
,
$
var2
,
...
)
:
détruire
variable
•
empty
(
$
var
)
:
déterminer
variable
être
vide
PHP
:
session
sans
session
,
demander
page
web
,
obtenir
réponse
classique
:
déclaration
habituel
serveur
web
,
page
demander
–
demander
page
web
classique
sans
session
serveur
web
sur
«
localhost
»
port
«
»
–
serveur
web
répondre
avec
code
HTTP
,
avec
divers
valeur
indiquer
plugins
disposer
–
serveur
web
envoyer
page
web
<
?
php
?
>
<
html
>
<
body
>
PageWeb
<
/
body
>
<
/
html
>
statut
HTTP
:
classique
(
rappel
)
OK
requête
avoir
être
recevoir
,
comprendre
,
exécuter
permanent
Redirect
ressource
avoir
être
déplacer
à
autre
URL
Temporary
Redirect
ressource
être
déplacer
à
autre
URL
Forbidden
requête
être
correct
,
client
n
’
avoir
droit
de
demander
serveur
de
faire
action
Not
Found
ressource
viser
par
l
’
URL
n
’
avoir
être
trouver
Internal
Server
Error
erreur
générique
/
spécifique
...
serveur
web
avoir
échouer
chose
à
moment
Bad
Gateway
serveur
web
viser
n
’
arriver
à
contacter
serveur
traiter
requête
envoyer
PHP
:
session
–
demander
page
web
contenir
session
serveur
web
sur
«
localhost
»
port
«
»
–
serveur
web
répondre
avec
code
HTTP
,
envoyer
numéro
de
session
PHP
(
ID
unique
)
.
ID
être
renvoyer
par
navigateur
avec
requête
pour
identifier
–
serveur
web
envoyer
client
côté
serveur
page
web
PHP
demander
à
créer
session
,
ID
être
transmettre
par
serveur
web
navigateur
.
côté
serveur
web
&
PHP
:
liste
session
actif
être
stocker
dans
fichier
(
avec
l
’
ensemble
variable
l
’
souhaiter
conserver
entre
page
web
)
côté
client
:
l
’
ID
de
session
être
renvoyer
pour
pouvoir
«
s
’
identifier
»
...
attention
!
L
’
ID
être
visible
sur
réseau
!
Quelqu
’
un
de
intentionner
pouvoir
copier
ID
s
’
identifier
avec
à
place
navigateur
légitime
...
pour
faire
session
«
à
»
sécuriser
,
être
nécessaire
de
s
’
assurer
l
’
parler
même
navigateur
(
en
vérifier
l
’
IP
client
,
par
exemple
)
.
voir
l
’
ensemble
bon
pratique
dans
cours|cour
.
<
?
php
session_start
(
)
;
?
>
<
html
>
<
body
>
PageWeb
<
/
body
>
<
/
html
>
PHP
:
session
•
mécanisme
de
session
–
base
pour
gestion
de
panier
dans
site
de
e-commerce
–
produit
choisir
par
client
être
enregistrer
en
variable
de
session
–
pouvoir
garder
objet
simple
contenir
panier
être
garder
dans
variable
de
session
.
tableau
contenir
objet
LigneProduit
.
$
_SESSION
[
$
produire
]
contenir
objet
.
LigneProduit
{
public
$
nom
;
public
$
qte
;
/
*
constructeur
*
/
function
__construct
(
$
nom
)
{
$
this-
>
nom
=
$
nom
;
$
this-
>
qte
=
;
}
}
PHP
:
session
produit
choisir
être
identifier
par
«
id
»
(
nom
)
.
$
_SESSION
[
$
produire
]
aller
contenir
objet
LigneProduit
S
’
n
’
avoir
$
_SESSION
[
$
produit
]
,
aller
créer
nouveau
objet
LigneProduit
S
’
avoir
$
_SESSION
[
$
produit
]
,
aller
juste
augmenter
valeur
de
l
’
attribut
«
qte
»
dans
l
’
objet
LigneProduit
function
ajouterProduit
(
$
produit
)
{
$
qte
=
;
if
(
!
isset
(
$
_SESSION
[
$
produit
]
)
)
{
$
_SESSION
[
$
produit
]
=
new
LigneProduit
(
$
produit
)
;
$
qte
=
$
_SESSION
[
$
produit
]
-
>
qte
}
else
{
/
/
produire
,
augmenter
quantité
$
objet
=
$
_SESSION
[
$
produit
]
;
$
objet-
>
qte
=
$
objet-
>
qte
;
$
qte
=
$
objet-
>
qte
;
}
return
$
qte
;
}
PHP
:
session
Lorsqu
’
vouloir
supprimer
produit
,
aller
réduire
quantité
dans
l
’
objet
LigneProduit
récupérer
l
’
objet
LigneProduit
garder
dans
$
_SESSION
[
$
produit
]
réduire
quantité
d
’
unité
S
’
n
’
rester
(
quantité
avoir
atteindre
unité
)
,
supprimer
produit
de
session
function
supprimerProduit
(
$
produit
)
{
$
qte
=
;
if
(
isset
(
$
_SESSION
[
$
produit
]
)
)
{
$
objet
=
$
_SESSION
[
$
produit
]
;
$
objet-
>
qte
=
$
objet-
>
qte
-
;
$
qte
=
$
objet-
>
qte
;
if
(
$
qte
<
=
)
{
/
/
supprimer
produit
unset
(
$
_SESSION
[
$
produit
]
)
;
}
}
return
$
qte
;
}
PHP
:
session
pouvoir
récupérer
contenu
panier
en
récupérer
contenu
de
variable
de
session
$
_SESSION
pour
objet
LigneProduit
garder
dans
$
_SESSION
function
afficherPanier
(
)
{
echo
'
'
<
table
>
'
'
;
foreach
(
$
_SESSION
avoir
$
objet
)
{
echo
'
'
<
tr
>
<
td
>
'
'
.
$
objet-
>
nom
.
`
`
<
/
td
>
<
td
>
'
'
.
$
objet-
>
qte
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
}
echo
'
'
<
/
table
>
'
'
;
}
PHP
:
session
Cookies
•
cookie
être
mécanisme
pour
stocker
information
sur
visiteur
de
identifier
•
variable
de
session
,
cookies
être
petit
fichier
stocker
sur
l
’
ordinateur
de
l
’
utilisateur
pour
durée
de
vie
pouvoir
définir
PHP
:
Cookies
•
cookies
être
accessible
via
superglobal
$
_COOKIE
•
fonction
setcookie
(
)
permettre
de
définir
cookie
être
envoyer
avec
reste
en-tête
HTTP
–
cookies
faire
partie
en-tête
HTTP
,
imposer
setcookie
(
)
appeler
avant
affichage
de
texte
avant
même
<
!
doctype
>
–
fonction
setcookie
(
)
pouvoir
prendre
jusqu
'
à
paramètre
:
•
premier
être
obligatoire
définir
nom
cookie
•
deuxième
définir
valeur
cookie
•
troisième
définir
durée
de
vie
cookie
en
second
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
echo
$
_COOKIE
[
'
nom
’
]
;
/
/
affichage
cookie
PHP
:
Cookies
–
demander
page
web
contenir
session
cookie
avec
variable
–
serveur
web
répondre
avec
code
HTTP
,
envoyer
numéro
de
session
PHP
,
variable
«
nom
»
contenir
valeur
«
nomUtilisateur
»
...
dans
cookie
PHP
demander
à
créer
cookies
,
valeur
être
envoyer
par
serveur
web
navigateur
,
stocker
valeur
.
cookies
être
stocker
sur
disque
dur
!
...
être
renvoyer
à
demande
de
page
web
.
attention
à
mettre
de
donnée
:
-
mettre
de
fichier
-
mettre
d
’
objet
conteneur
gros
!
(
tableau
,
etc
...
)
<
?
php
session_start
(
)
;
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
?
>
PHP
:
Cookies
•
fonction
setrawcookie
(
)
être
même
setcookie
(
)
excepter
valeur
cookie
être
encoder
dans
l
’
URL
de
envoi
navigateur
•
pour
détruire
cookie
:
appeler
setcookie
(
)
avec
date
d
’
expiration
dans
passé
:
setcookie
(
`
`
Nomcookie
'
'
,
'
'
valeurCookie
'
'
,
time
(
)
)
;
PHP
:
Cookies
•
exemple
de
cookie
sous
forme
de
tableau
:
<
?
php
setcookie
(
`
`
cookie
[
three
]
'
'
,
'
'
cookiethree
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
two
]
'
'
,
'
'
cookietwo
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
one
]
'
'
,
'
'
cookieone
'
'
,
time
(
)
*
)
;
?
>
<
?
php
/
/
affichage
de
cookies
if
(
isset
(
$
_COOKIE
[
'
cookie
'
]
)
)
{
/
/
exemple
de
appel
cookie
:
echo
'
cookie
two
être
:
'
.
$
_COOKIE
[
'
cookie
'
]
[
'
two
'
]
.
'
parcours
avec
foreach
suivre
:
<
br
/
>
'
;
foreach
(
$
_COOKIE
[
'
cookie
'
]
avoir
$
name
=
>
$
value
)
{
$
name
=
htmlspecialchar
(
$
name
)
;
$
value
=
htmlspecialchar
(
$
value
)
;
echo
'
'
$
name
:
$
value
<
br
/
>
'
'
;
}
}
?
>
PHP
:
Cookies
<
?
php
session_start
(
)
;
setcookie
(
`
`
cookie
[
three
]
'
'
,
'
'
cookiethree
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
two
]
'
'
,
'
'
cookietwo
'
'
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
one
]
'
'
,
'
'
cookieone
'
'
,
time
(
)
*
)
;
?
>
–
demander
page
web
contenir
session
trois
cookies
–
serveur
web
répondre
avec
code
HTTP
,
envoyer
cookies
contenir
variable
numéro
de
session
PHP
cookie
être
envoyer
navigateur
avec
valeur
date
d
’
expiration
...
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
PHP
:
Cookies
[
navigateur
faire
requête
]
client
avoir
cliquer
sur
lien
vers
dns-remplacé
page
n
’
avoir
besoin
d
’
valeur
de
cookie
(
hormis
session
)
,
navigateur
renvoyer
temps
valeur
stocker
dans
cookies
!
(
évident
:
navigateur
connaître
code
PHP
contenir
dans
page
web
,
renvoyer
valeur
qu
’
être
censé
conserver
)
PHP
:
Cookies
[
serveur
Web
répondre
]
serveur
web
«
détruire
»
session
...
pratiquer
signifier
variable
de
session
être
détruire
...
cookies
!
PHP
:
Cookies
[
navigateur
faire
requête
]
navigateur
demander
dns-remplacer
session
être
détruire
côté
serveur
,
navigateur
continu
d
’
envoyer
l
’
ID
disposer
,
cookies
qu
’
avoir
stocker
PHP
:
Cookies
[
serveur
Web
répondre
]
forcer
serveur
web
avoir
écrire
valeur
de
session
de
cookies
...
seul
valeur
stocker
dans
cookies
être
affichables
...
être
donner
session
être
détruire
!
PHP
:
Cookies
en
effet
:
variable
stocker
dans
cookies
s
’
afficher
,
autre
-
nom
rester
vide
,
session
être
détruire
,
contenu
être
vide
-
Prenom
MonRawCookie
s
’
afficher
être
renvoyer
par
navigateur
avec
requête
«
»
durée
de
vie
être
valable
PHP
:
Cookies
[
navigateur
faire
requête
]
navigateur
demander
page
dns-remplacé
continuer
d
’
envoyer
variable
«
valable
»
contenir
dans
cookies
PHP
:
Cookies
[
serveur
Web
répondre
]
serveur
web
répondre
,
renvoyer
ID
de
session
(
usage
de
valeur
précédent
possible
)
PHP
:
Cookies
donnée
navigateur
être
stocker
dans
fichier
Cookie
«
prenom
»
,
contenir
«
Fab
»
,
pour
serveur
web
dns-remplacer
dans
dossier
«
test_cookie
»
avec
divers
timestamps
exemple
de
fichier
contenir
cookies
navigateur
client
.
valeur
être
lisible
!
stocker
de
mot
de
passe
dans
cookie
!
(
contenu
de
variable
chiffrer
:
mot
de
passe
être
accessible
sur
l
’
ordinateur
client
!
)
Cookie
«
MonRawCookie
»
,
contenir
«
valeurCookie
»
,
pour
serveur
web
dns-remplacer
dans
dossier
«
test_cookie
»
avec
divers
timestamps
PHP
:
session
&
Cookies
•
session
:
variable
conserver
côté
serveur
–
session_start
(
)
;
/
/
sur
page
PHP
–
$
_SESSION
[
`
`
ma_variable
'
'
]
=
;
/
/
variable
–
unset
(
$
_SESSION
[
`
`
ma_variable
'
'
]
)
;
/
/
variable
–
session_destroy
(
)
;
/
/
en
fin
de
session
•
Cookies
:
variable
conserver
côté
client
–
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
*
)
;
–
echo
$
_COOKIE
[
'
nom
'
]
;
–
setcookie
(
'
nom
'
,
'
nomUtilisateur
'
,
time
(
)
)
;
transaction
&
BDD
•
site
de
vente
en
ligne
avoir
vider
stock
...
rester
qu
’
seul
objet
en
vente
en
seul
exemplaire
•
passe-t-il
utilisateur
essayer
d
’
acheter
en
même
temps
objet
?
–
impossible
à
déterminer
...
en
général
,
deux
utilisateur
arriver
à
passer
commande
,
vendeur
voir
commande
sur
même
objet
,
stock
passer
en
négatif
transaction
&
BDD
•
transaction
être
ensemble
de
requête
viser
à
changer
l
’
état
d
’
base
de
donnée
•
exemple
:
.
sélectionner
produit
dans
BDD
choix
produit
.
créer
nouveau
ligne
dans
table
création
d
’
nouveau
réservation
de
produit
.
réduire
valeur
dans
autre
table
réduction
de
quantité
de
produit
requête
être
exécuter
en
seul
transaction
transaction
&
BDD
•
transaction
pouvoir
être
vue
requête
«
métier
»
/
haut
niveau
:
-
«
réserver
produit
dans
magasin
»
être
transaction
qu
’
client
pouvoir
demander
-
en
pratique
falloir
client
choisir
produit
disponible
,
l
’
préparer
note
lier
client
produit
,
isoler
produit
pour
mettre
de
côté
requête
«
technique
»
/
bas
niveau
seul
n
’
avoir
de
signification
,
servir
but
commun
(
cf
process
mining
...
)
transaction
&
BDD
•
transaction
terminer
par
«
commettre
»
–
validation
de
transaction
–
écriture
modification
•
pouvoir
vouloir
annuler
transaction
en
cours|cour
de
route
après
un
commettre
.
effectuer
dans
cas
«
rollback
»
–
transaction
être
annuler
,
modification
n
’
être
apporter
donnée
dans
BDD
–
ancien
valeur
être
remettre
dans
BDD
transaction
&
BDD
«
commettre
»
être
dernier
étape
d
’
transaction
:
c
’
être
à
moment
SGBD
enregistrer
changement
.
,
transaction
être
effectuer
en
mémoire
ram
,
qu
’
un
commettre
être
effectuer
,
changement
être
inscrire
sur
disque
dur
.
SGBD
crasher
,
devoir
pouvoir
retrouver
dernier
état
cohérent
...
...
devoir
pouvoir
proposer
de
“
rejouer
”
l
’
ensemble
transaction
effectuer
pour
retrouver
base
de
donnée
cohérent
à
jour
.
transaction
(
requête
grouper
)
être
enregistrer
dans
logs
SGBD
,
permettre
de
rejouer
l
’
ensemble
transaction
effectuer
.
transaction
&
BDD
•
propriété
ACID
:
–
atomicité
–
cohérence
–
isolation
–
durabilité
«
ensemble
de
propriété
garantir
transaction
informatique
être
exécuter
de
façon
fiable
.
»
Wikipédia
–
propriété
ACID
propriété
ACID
permettre
d
’
assurer
qu
’
SGBD
supporter
«
transaction
»
transaction
&
BDD
•
atomicité
:
transaction
être
«
atomique
»
s
’
effectuer
tout
(
transaction
non-atomique
créer
réservation
avec
produit
,
réduire
quantité
dans
stock
(
par
exemple
)
.
stock
réel
être
représenter
,
entraîner
problème
)
transaction
&
BDD
•
cohérence
:
cohérence
assurer
contrainte
de
base
de
donnée
être
respecter
avant
après
transaction
(
l
’
état
de
base
de
donnée
être
valide
selon
règle
)
(
transaction
incohérent
permettre
par
exemple
de
faire
référence
à
objet
n
’
exister
,
bloquer
jointure
)
transaction
&
BDD
•
isolation
:
capacité
de
protéger
donnée
contre
modification
simultané
.
transaction
devoir
dépendre
donnée
d
’
autre
transaction
.
(
transaction
non-isolé
permettre
de
faire
modification
sur
valeur
n
’
exister
avoir
être
modifier
entre
temps
)
transaction
&
BDD
•
exemple
problème
isolation
:
produit
être
en
quantité
transaction
à
réduit
de
,
devoir
retrouver
à
,
transaction
B
réduire
de
entre
temps
.
•
valeur
correct
devoir
être
=
=
>
–
=
l
’
ordre
écriture
être
important
:
)
à
lit
valeur
select
qte
FROM
produit
WHERE
nom
=
«
pomme
»
)
B
lire
valeur
select
qte
FROM
produit
WHERE
nom
=
«
pomme
»
)
B
réduire
de
quantité
:
–
=
(
UPDATE
qte
)
)
à
réduit
de
quantité
:
–
=
(
UPDATE
qte
)
)
valeur
final
être
,
B
être
exécuter
en
dernier
transaction
&
BDD
•
durabilité
:
en
cas
de
panne
(
de
l
’
ordinateur
,
système
d
’
exploitation
,
SGBD
,
...
)
,
transaction
exécuter
être
enregistrer
.
(
à
panne
concerner
l
’
ensemble
disque
contenir
BDD
,
transaction
effectuer
devoir
être
enregistrer
dès
qu
’
être
effectuer
)
transaction
avec
MySQL
MySQL
avoir
particularité
de
gérer
moteur
de
stockage
dans
même
BDD
,
appeler
moteur
de
table
.
•
moteur
de
stockage
être
ensemble
d
’
algorithme
permettre
de
stocker
d
’
accéder
donnée
dans
SGBD
.
en
général
,
seul
moteur
être
utiliser
par
BDD
.
•
pour
lister
moteur
,
utiliser
requête
:
show
ENGINES
;
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
MyISAM
:
moteur
par
défaut
jusque
MySQL
•
simple
d
’
utilisation
•
performant
sur
table
ouvrir
(
rapide
pour
opération
count
(
)
lecture
)
•
offrir
index
FULL-TEXT
permettre
de
faire
recherche
précis
sur
texte
×
supporter
clé
étranger
,
transaction
×
gérer
verrouillage
niveau
de
table
(
bloquer
table
entier
opération
d
’
insertion
,
suppression
MAJ
)
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
InnoDB
:
moteur
par
défaut
depuis
MySQL
•
gestion
clé
étranger
support
transaction
(
par
défaut
:
requête
SQL
être
considérer
transaction
)
–
véritable
gestion
modèle
relationnel
&
transactionnel
–
respecter
ACID
•
gérer
verrouillage
niveau
de
ligne
×
proposer
d
’
index
FULL-TEXT
,
lent
dans
opération
transaction
avec
MySQL
principal
moteur
de
stockage
MySQL
:
Memory
:
stocker
donnée
de
table
en
mémoire
(
ram
)
.
•
accès
rapide
×
en
cas
de
panne
,
donnée
stocker
être
perdre
transaction
avec
MySQL
.
début
de
transaction
:
start
transaction
.
requête
:
select
,
UPDATE
,
...
.
validation
de
transaction
:
commettre
annulation
de
transaction
en
cas
d
’
erreur
:
ROLLBACK
•
S
’
avoir
erreur
d
’
intégrité
dans
donnée
,
rollback
faire
transaction
avec
MySQL
oublier
d
’
utiliser
moteur
de
BDD
compatible
avec
transaction
propriété
ACID
...
...
utiliser
requête
fonction
de
transaction
nécessaire
...
...
:
requête
=
transaction
“
ACID
”
transaction
avec
MySQL
exemple
de
gestion
de
transaction
:
achat
en
ligne
•
spécification
moteur
InnoDB
de
création
de
table
,
pour
supporter
transaction
CREATE
tabler
compte
(
ID
int
,
solder
int
not
nul
)
ENGINE
=
InnoDB
;
set
autocommettre
=
;
/
/
désactiver
validation
automatique
requête
start
transaction
;
UPDATE
compter
set
solder
=
solde+100
where
id
=
IDVendeur
;
UPDATE
compter
set
solder
=
solde-100
where
id
=
IDAcheteur
;
commettre
;
transaction
avec
PDO
.
début
de
transaction
:
$
bdd-
>
beginTransaction
(
)
;
.
requête
de
transaction
:
$
bdd-
>
query
(
)
;
$
bdd-
>
query
(
)
;
.
validation
/
annulation
de
transaction
:
$
bdd-
>
commettre
(
)
;
$
bdd-
>
rollback
(
)
;
