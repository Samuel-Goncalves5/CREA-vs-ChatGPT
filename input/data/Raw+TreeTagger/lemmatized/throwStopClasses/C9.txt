base
de
donnée
:
PHP
and
Mysql
créer
par
:
Lamiae
DOUNAS
dns-remplacer
@
dns-remplacé
plan
cours|cour
rappel
SQL
introduction
web
PHP
variable
constant
opérateur
tableau
structure
de
contrôle
fonction
gestion
formulaire
programmation
orienter
objet
(
POO
)
accès
base
de
donnée
(
Mysql
)
cinq
mini
projet
à
réaliser
rappel
SQL
•
travail
pratique
:
révision
opération
:
CREATE
table
,
insert
,
UPDATE
,
ALTER
table
,
ADD
CONSTRAINTS
dans
TP1
.
introduction
Web
Qu
’
être
web
?
Ø
terme
créer
par
par
Tim
Berners-Lee
(
désigner
toile
d
’
araignée
(
en
anglais
)
)
.
Ø
Enorme
réseau
d
’
ordinateur
connecter
héberger
site
web
.
rapport
entre
web
Internet
?
Ø
Web
être
application
d
’
Internet
juste
messagerie
instantané
!
!
introduction
Web
Qu
’
être
qu
’
site
web
?
Ø
Ecrit
en
langage
:
html
pour
marquer
contenu
site
.
Css
pour
gérer
style
javascript
pour
rendre
interactif
.
Ø
accessible
depuis
dresser
unique
:
URL
(
Uniform
Resource
Locator
)
protocole
mot
de
passe
nom
port
(
facultatif
chemin
(
facultatif
)
serveur
)
http
:
/
/
user
:
password
@
dns-remplacer
glossair
/
dns-remplacé
introduction
PHP
Php
:
php
hypertext
preprocessor
.
–
langage
interpréter
pour
créer
site
dynamique
.
–
langage
de
script
côté
serveur
.
–
langage
«
Embedded
HTML
»
.
–
open
source
:
PHP
avoir
permettre
de
créer
grand
nombre
de
site
web
célèbre
,
Facebook
,
Wikipédia
,
etc
.
introduction
PHP
site
statique
vs
site
dynamique
-
site
statique
:
écrire
en
HTML
(
éventuel
ement
JavaScript
)
,
contenir
pour
utilisateur
.
-
site
dynamique
:
contenir
adapter
besoin
utilisateur
(
nécessiter
temps
de
traitement
)
.
introduction
PHP
relation
client
/
serveur
.
installation
configuration
de
PHP
suffire
de
télécharger
serveur
web
:
•
WAMP
:
http
:
/
/
dns-remplacer
/
•
MAMP
:
http
:
/
/
dns-remplacer
/
•
XAMPP
:
https
:
/
/
dns-remplacer
/
fr
/
Editeur
de
texte
:
•
Sublim
Text
:
http
:
/
/
dns-remplacer
/
introduction
PHP
syntaxe
de
base
:
<
<
!
DOCTYPE
HTML
public
'
'
-
/
/
W3C
/
/
!
doctype
html
>
DTD
HTML
/
/
'
'
'
'
http
:
/
/
<
html
>
dns-remplacer
/
TR
/
html4
/
dns-remplacer
'
'
>
<
head
>
<
title
>
titre
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
`
`
hello
World
!
`
`
;
?
>
<
/
body
>
<
/
html
>
introduction
PHP
commentaire
:
Ø
commentaire
hériter
langage
C
Perl
/
/
être
commentaire
sur
seul
ligne
/
*
être
commentaire
sur
ligne
*
/
Ø
commentaire
styler
shell
#
être
commentaire
sur
seul
ligne
type
de
donnée
PHP
supporter
type
de
donnée
suivant
:
•
nombre
entier
,
•
nombre
à
virgule
flottant
,
•
chaîne
de
caractère
,
•
tableau
,
•
objet
(
développer
dans
section
programmation
orienter
objet
)
.
fonction
«
gettype
»
permettre
de
connaître
type
de
variable
.
variable
être
définir
,
el
e
renvoyer
'
'
string
'
'
.
:
$
avoir
=
;
echo
gettype
(
$
avoir
)
;
/
/
=
>
'
'
integer
»
type
de
donnée
nom
de
variable
être
précéder
d
’
$
:
pour
spécifier
variable
de
type
entier
:
•
$
toto
=
;
#
être
entier
en
base
,
•
$
toto
=
;
#
être
entier
négatif
.
pour
spécifier
variable
de
type
chaîne
de
caractère
:
•
$
personne
=
’
$
toto
Smith
’
;
#
être
chaîne
de
caractère
pour
afficher
caractère
spécial
.
•
$
personne
=
'
'
M
.
Smith
'
'
;
#
être
chaîne
de
caractère
.
•
$
chaine
=
«
chaine1
»
.
«
chaine2
»
;
/
/
affiche
chaine1chaine2
•
$
chaine
=
«
chaine1
»
.
$
toto
;
/
/
afficher
chaine1
type
de
donné
opérateur
sur
chaîne
de
caractère
:
–
concaténation
:
chaine1
.
Chaine2
opérateur
logique
:
•
AND
&
&
(
vrai
$
avoir
$
b
vrai
)
•
or
|
|
(
vrai
$
avoir
$
b
être
vrai
)
opérateur
arithmétique
:
•
addition
:
$
avoir
$
b
,
•
soustraction
:
$
avoir
-
$
b
,
•
multiplication
:
$
avoir
*
$
b
,
•
division
:
$
avoir
/
$
b
,
•
modulo
(
rester
de
division
entier
)
:
$
avoir
%
$
b
.
type
de
donné
opérateur
arithmétique
:
•
attention
:
lorsqu
’
chaine
de
caractère
être
évaluer
valeur
numérique
,
règle
suivant
s
’
appliquer
:
•
$
toto
=
'
'
'
'
;
#
$
toto
valoir
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
chaine
valoir
c
’
être
texte
,
•
$
toto
=
'
'
titi
'
'
;
#
$
toto
valoir
chaine
valoir
(
commencer
par
valeur
numérique
)
.
type
de
donné
opérateur
de
comparaison
:
•
égal
à
:
$
avoir
=
=
$
b
,
•
différent
de
:
$
avoir
!
=
$
b
,
•
supérieur
à
:
$
avoir
>
$
b
,
•
inférieur
à
:
$
avoir
<
$
b
,
•
supérieur
égal
à
:
$
avoir
>
=
$
b
,
•
inférieur
égal
à
:
$
avoir
<
=
$
b
.
exemple
:
echo
$
toto
=
=
?
'
'
vrai
'
'
:
'
'
faux
'
'
;
type
de
donné
date
déclaration
:
•
DATETIME
$
date
=
new
DateTime
(
'
'
)
;
•
DATE_CREATE
:
de
DateTime
:
:
__construct
(
)
$
date2
=
date_create
(
'
'
)
;
extraction
mois|moi
,
année
,
...
...
:
Ø
avec
style
procédural
en
utiliser
DATE_FORMAT
echo
date_format
(
$
date
,
'
'
m
'
'
)
;
Ø
avec
style
orienter
objet
(
OO
)
:
echo
$
date-
>
format
(
'
'
)
;
type
de
donné
date
exemple
:
•
$
date
=
date
(
'
'
d-m
'
'
)
;
echo
«
être
date
jour
»
.
$
date
;
•
$
heure
=
date
(
`
`
heure
:
i
:
s
'
'
)
;
echo
'
'
être
l
’
heure
jour
'
'
.
$
heure
;
constant
•
constant
être
variable
valeur
pouvoir
changer
durant
durée
de
vie
d
’
script
.
•
constant
être
utiliser
pour
définir
paramètre
application
web
tq
:
racine
site
,
nom
de
base
de
donnée
...
.
•
nom
de
constante
valide
commencer
par
lettre
souligner
(
_
)
,
suivre
de
nombre
quelconque
de
lettre
,
chiffre
souligner
•
définir
constante
en
utiliser
fonction
define
(
)
;
exemple
:
define
(
`
`
MA_CONSTANTE
'
'
,
'
'
Hel
o
'
'
)
;
•
pour
afficher
constant
:
echo
MA_CONSTANTE
echo
const
(
`
`
MA_CONSTANTE
'
'
)
;
exemple
:
PHP
définir
constant
PHP_OS
indiquer
système
d
’
exploitation
utiliser
par
machine
faire
tourner
PHP
(
:
Linux
)
.
tableau
tableau
de
PHP
ressembler
tableau
associatif
(
hash-tables
)
.
•
L
’
index
être
appeler
clé
•
valeur
associer
à
clé
être
appeler
valeur
.
déclarer
tableau
avec
deux
façon
:
•
utiliser
fonction
array
(
)
pour
créer
tableau
;
•
affecter
valeur
tableau
;
tableau
fonction
sur
tableau
:
•
sizeof
(
)
:
retourner
nombre
d
’
élément
d
’
tableau
,
•
count
(
)
:
retourner
nombre
d
’
élément
d
’
tableau
s
’
exister
,
variable
n
’
être
tableau
variable
n
’
exister
.
tableau
exemple
:
•
$
suite
=
array
(
,
,
,
)
;
•
$
tab
[
]
=
;
•
$
tab
[
]
=
'
'
toto
'
'
;
#
pouvoir
mélanger
contenu
•
$
tab
[
`
`
chaine
'
'
]
=
'
'
valeur
'
'
;
#
pouvoir
mélanger
clé
.
•
$
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
•
`
`
Smith
'
'
)
;
tableau
parcourir
tableau
:
<
?
php
/
/
créer
array
$
prenom
$
prenom
=
array
(
'
François
'
,
'
Michel
'
,
'
Nicole
'
,
'
Véronique
'
,
'
Benoît
'
)
;
/
/
faire
boucle
pour
afficher
:
for
(
$
numero
=
;
$
numero
<
;
$
numero++
)
{
echo
$
prenom
[
$
numero
]
.
'
<
br
/
>
'
;
}
?
>
tableau
parcourir
tableau
associatif
:
<
?
php
$
=
array
(
`
`
type
'
'
=
>
'
'
M
.
`
`
,
'
'
nom
'
'
=
>
'
'
Smith
'
'
)
;
foreach
(
$
personne
avoir
$
cle
=
>
$
valeur
)
{
echo
'
'
cle
=
'
'
.
$
cle
.
“
valeur
=
'
'
.
$
valeur
;
}
condition
:
«
if
...
else
»
prototype
:
if
(
condition1
)
{
#
instruction
à
exécuter
condition1
être
vrai
...
}
elseif
(
condition2
)
{
#
instruction
à
exécuter
condition2
être
vrai
...
...
}
else
{
#
instruction
à
exécuter
condition
n
’
être
vrai
...
}
Ø
fonctionnalité
de
l
’
instruction
if
être
même
en
PHP
qu
’
en
C
;
condition
:
«
if
...
else
»
exemple
:
if
(
$
type
=
=
'
'
femme
'
'
)
{
echo
'
'
bonjour
Madame
'
'
;
}
elseif
(
$
type
=
=
'
'
Homme
'
'
)
{
echo
'
'
bonjour
Monsieur
'
'
;
}
else
{
echo
'
'
bonjour
,
être
bizarre
!
'
'
;
}
condition
:
«
switch
»
prototype
:
switch
(
$
var
)
{
case
val1
:
#
instruction
à
exécuter
val1
...
break
;
case
val2
:
#
instruction
à
exécuter
val2
...
break
;
default
:
#
cas
être
utiliser
autre
cas
avoir
échouer
.
break
;
}
boucle
:
while
boucle
while
être
moyen
simple
d
’
implémenter
boucle
en
PHP
;
Ø
prototype
:
while
(
condition
)
{
#
instruction
à
exécuter
condition
être
vrai
...
}
prototyper
simplifier
:
while
(
condition
)
:
#
instruction
à
exécuter
condition
être
vrai
...
endwhile
;
boucle
:
while
exemple
:
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
$
i
'
'
;
$
i++
;
}
•
affiche
.
boucle
:
for
boucle
«
for
»
fonctionner
boucle
for
langage
C
;
prototype
:
for
(
expression1
;
condition
;
expression2
)
{
#
instruction
à
exécuter
condition
être
vrai
...
}
prototyper
simplifier
:
for
(
expression1
;
condition
;
expression2
)
:
#
instruction
à
exécuter
condition
être
vrai
...
endfor
;
boucle
:
for
exemple
:
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
$
i
'
'
;
}
•
afficher
.
exercice
:
écrire
script
PHP
pour
afficher
version
PHP
d
’
autre
information
sur
configuration
.
exercice
:
solution
:
<
?
php
phpinfo
(
)
;
?
>
solution
:
<
?
php
echo
'
'
<
pre
>
'
'
;
print_r
(
$
GLOBALS
)
;
/
/
afficher
nom
super
global
.
echo
'
'
<
/
pre
>
'
'
;
?
>
exercice
:
$
var
=
'
PHP
Tutorial
'
.
1-Mettre
variable
var
dans
section
h3
tag
,
centrer
l
’
afficher
avec
couleur
rouge
dans
document
HTML
.
2-Souligner
titre
ajouter
paragraphe
suivre
:
“
être
paragraphe
”
.
exercice
:
solution
:
<
?
php
$
var
=
'
PHP
Tutorial
'
;
?
>
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
title
>
<
?
php
echo
$
var
;
?
>
<
/
title
>
<
/
head
>
<
body
>
<
u
>
<
h@card@
>
<
faire
color
=
'
'
red
'
'
>
<
?
php
echo
$
var
;
?
>
<
/
h3
>
<
/
u
>
<
/
faire
>
<
p
>
être
paragraphe
.
<
/
p
>
<
/
body
>
<
/
html
>
exercice
:
compter
de
jusqu
’
à
exercice
:
solution
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
$
i
'
'
;
}
fonction
fonction
pouvoir
être
définir
par
mot
clé
«
function
»
en
utiliser
syntaxe
suivant
:
function
nomd-DelaFonction
(
$
arg_1
,
$
arg_2
,
/
*
...
,
*
/
$
arg_n
)
{
#
instruction
...
return
$
valeur_de_retour
;
/
/
optionnel
}
n
'
avoir
de
distinction
fonction
/
procédure
en
PHP
.
fonction
fonction
avoir
besoin
de
être
définir
avant
de
être
utiliser
,
sauf
fonction
être
définir
conditionnel
ement
à
l
’
intérieur
d
’
autre
fonction
:
.
fonction
conditionnel
e
:
/
/
imposible
d
’
appeler
foo
(
)
fonction
n
’
exister
if
(
condition
)
{
function
foo
(
)
{
echo
'
'
exister
programme
être
passer
ici.\n
'
'
;
}
}
fonction
.
fonction
dans
autre
fonction
function
foo
(
)
{
function
bar
(
)
{
echo
'
'
exister
foo
(
)
être
appelé.\n
'
'
;
}
}
/
*
impossible
de
appeler
bar
(
)
,
exister
.
*
/
foo
(
)
;
/
*
,
pouvoir
appeler
bar
(
)
,
utilisation
de
foo
(
)
l
'
avoir
rendre
accessible
.
*
/
bar
(
)
;
fonction
PHP
supporter
passage
de
argument
:
•
par
valeur
:
comportement
par
défaut
•
par
référence
:
fonction
pouvoir
changer
valeur
argument
.
:
$
toto
=
;
function
mafonctionRef
(
&
$
titi
)
{
$
titi
=
$
titi+1
;
echo
$
titi
;
}
MafonctionRef
(
$
toto
)
;
/
/
affiche
echo
(
$
toto
)
;
/
/
affiche
;
fonction
•
liste
variable
de
argument
:
mot
clé
...
indique
fonction
accepter
nombre
variable
argument
.
:
Function
sum
(
...
$
var
)
{
$
somme
=
;
foreach
(
$
var
avoir
$
i
)
{
$
somme
=
$
i
;
}
return
$
somme
;
}
echo
sum
(
,
,
,
)
;
/
/
affiche
résultat
.
Echo
sum
(
,
)
;
/
/
affcihe
;
s
fonction
•
valeur
par
défaut
argument
.
function
servir_cafe
(
$
type
=
'
'
cappuccino
'
'
)
{
return
'
'
servir
$
type.\n
'
'
;
}
echo
servir_cafe
(
)
;
/
/
affiche
«
servir
cappuccino
àLes
argument
sans
valeur
par
défaut
devoir
être
en
premier
,
erreur
function
melangeDargument
(
$
type
=
'
'
parDefault
'
'
,
$
varSansDefault
)
{
return
`
`
message
$
type
$
varSansDefault.\n
'
'
;
}
echo
melangeDargument
(
'
'
test
'
'
)
;
/
/
afficher
erreur
fonction
•
à
partir
de
version
,
php
supporter
définition
type
de
retour
.
:
function
maFonction
(
$
var
)
:
string
{
return
$
var
;
}
•
return
être
omettre
,
valeur
NULL
être
retourner
.
•
pour
renvoyer
valeur
en
même
temps
,
suffire
de
retourner
tableau
;
:
function
couleur
(
)
{
return
array
(
'
'
res1
'
'
,
'
'
res2
'
'
,
'
'
res3
'
'
)
;
}
}
list
(
$
var1
,
$
var2
,
$
var3
)
=
couleur
(
)
;
fonction
•
pour
retourner
référence
de
fonction
,
utiliser
opérateur
&
dans
déclaration
de
fonction
dans
assignation
de
valeur
de
retour
.
:
?
php
>
function
&
mafonction
(
&
$
var
)
{
$
var
=
$
var+2
;
return
$
var
;
}
$
toto
=
&
mafonction
(
$
var2
)
;
?
>
à
propriété
de
l
’
objet
retourner
par
fonction
mafonction
(
)
être
lier
à
$
toto
.
s
’
agir
d
’
copie
de
$
var
.
fonction
•
PHP
supporter
surcharge
,
destruction
redéfinition
de
fonction
déclarer
.
•
être
possible
de
appeler
fonction
récursif
en
PHP
.
à
noter
appel
récursif
infini
être
considérer
erreur
de
programmation
.
fonction
utile
en
PHP
•
gettype
(
$
var
)
:
retourner
type
de
variable
.
•
Addslashes
(
)
:
ajouter
antislash
devant
caractère
spécial
.
:
$
res
=
addslashes
(
`
`
L
'
avoir
'
'
)
;
/
/
retourn
L\
’
avoir
.
•
Strstr
(
texte
,
chaineAchercher
)
:
trouver
premier
occurrence
dans
chaîne
.
:
$
email
=
'
name
@
dns-remplacer
'
;
$
domain
=
strstr
(
$
email
,
'
@
'
)
;
echo
$
domain
;
/
/
affiche
:
@
dns-remplacé
fonction
utile
en
PHP
•
Htmlspecialchars
(
chaine
,
flag
)
:
convertir
caractère
spécial
en
entité
HTML
.
El
e
remplacer
par
exemple
&
(
commercial
)
en
&
amp
;
example
de
flag
être
ENT_QUOTES
convertir
guil
emets
double
guil
emets
simple
.
:
$
str
=
'
'
This
is
some
<
b
>
bold
<
/
b
>
text
.
`
`
;
echo
htmlspecialchars
(
$
str
)
;
/
/
affiche
:
This
is
some
&
lt
;
b
&
gt
;
bold
&
lt
;
/
`
b
&
gt
;
text
.
•
strip_tags
(
chaine
,
allowableTags
)
:
supprimer
balise
HTML
PHP
de
chaîne
.
commentaire
HTML
PHP
être
supprimer
.
comportement
pouvoir
être
modifier
avec
paramètre
allowableTags
.
:
$
text
=
'
<
p
>
test
paragraph
.
<
/
p
>
<
!
--
--
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
'
;
/
/
autoriser
<
p
>
<
avoir
>
echo
strip_tags
(
$
text
,
'
<
p
>
<
avoir
>
'
)
;
/
/
affiche
:
<
p
>
test
paragraph
.
<
/
p
>
<
avoir
href
=
'
'
#
fragment
'
'
>
Other
text
<
/
avoir
>
fonction
utile
en
PHP
•
strlen
(
)
:
retourner
longueur
de
chaîne
•
Trim
(
)
:
effacer
espace
blanc
début
à
fin
d
’
chaine
.
•
Strtolower
(
)
:
passer
caractère
en
miniscules
.
•
Strtoupper
(
)
:
passer
caractère
en
majuscule
.
•
Strpos
(
texte
,
chaine
)
:
rechercher
position
de
premier
«
chaine
»
trouver
.
•
Ereg
(
chaine
,
texte
)
:
recherche
dans
texte
,
séquence
caractère
«
chaine
»
,
retourner
longueur
de
occurrence
trouver
occurrence
avoir
être
trouver
dans
chaîne
string
FALSE
dans
cas
contraire
erreur
être
survenir
.
:
if
(
ereg
(
`
`
BCD
'
'
,
'
'
ABCDEF
'
'
)
)
{
echo
'
'
oui
'
'
;
}
else
{
echo
'
'
'
'
;
}
fonction
utile
en
PHP
•
isset
(
$
var1
,
$
var2
,
...
)
:
déterminer
variable
être
définir
être
différent
de
NULL
.
:
if
(
isset
(
$
var
)
)
{
echo
'
variable
exister
,
pouvoir
l\'afficher
.
'
;
•
unset
(
$
var1
,
$
var2
,
...
)
:
détruire
variable
.
•
empty
(
$
var1
)
:
déterminer
variable
être
vide
.
•
array_key_exists
(
key
,
array
)
:
vérifier
clé
exister
dans
tableau
.
fonction
utile
en
PHP
•
in_array
(
valeur
,
array
)
:
indique
valeur
appartenir
à
tableau
.
•
array_keys
(
array
,
valeur
)
:
retourner
clé
ensemble
clé
contenir
«
valeur
»
,
valeur
n
’
être
spécifier
retourner
clé
tableau
.
•
array_values
(
array
)
:
retourner
valeur
de
tableau
.
exercice
•
Ecrire
script
permettre
d
’
afficher
nombre
premier
parmi
.
utiliser
méthode
différent
(
While
,
for
)
.
exercice
solution
<
?
php
$
i
=
;
while
(
$
i
<
=
)
{
$
z
=
;
for
(
$
j
=
;
$
j
<
$
i
;
$
j++
)
{
if
(
(
$
i
%
$
j
)
=
=
&
&
(
$
i
!
=
$
j
)
)
$
z++
;
}
if
(
$
z
=
=
)
echo
$
i
.
'
'
;
$
i++
;
}
?
>
exercice
•
Ecrire
script
permettre
de
créer
tableau
contenir
coordonné
d
’
personne
d
’
afficher
élément
.
utiliser
tableau
numéroté́
tableau
associatif
.
exercice
solution
•
<
?
php
$
coordonnees
=
array
(
‘
Camil
e
'
,
’
Dupont
'
,
,
’
Paris
'
)
;
for
(
$
i
=
;
$
i
<
count
(
$
coordonnees
)
;
$
i++
)
echo
$
coordonnees
[
$
i
]
.
'
'
;
?
>
•
tableau
associatif
:
<
?
php
$
coordonnees
=
array
(
'
'
prenom
'
'
=
>
`
`
Camille
'
'
,
'
'
nom
'
'
=
>
`
`
Dupont
'
'
,
'
'
age
'
'
=
>
,
'
'
ville
'
'
=
>
`
`
Paris
'
'
)
;
foreach
(
$
coordonnees
avoir
$
cle
=
>
$
value
)
{
echo
$
cle
.
`
`
=
`
`
.
$
valoir
.
`
`
<
br
/
>
'
'
;
}
?
>
exercice
•
Ecrire
fonction
'
moisfr
'
permettre
d
’
afficher
mois|moi
en
lettre
en
français
en
utiliser
instruction
de
Switch
caser
afficher
mois|moi
en
faire
appel
à
fonction
.
exercice
solution
<
?
php
function
moisfr
(
$
date
)
{
switch
(
$
date
)
{
case
:
return
'
janvier
'
;
break
;
case
:
return
'
Fevrier
'
;
break
;
case
:
return
'
Mars
'
;
break
;
case
:
return
'
avril
'
;
break
;
case
:
return
'
mai
'
;
break
;
case
:
return
'
juin
'
;
break
;
case
:
return
'
Juil
'
;
break
;
case
:
return
'
Aout
'
;
break
;
case
:
return
'
septembre
'
;
break
;
case
:
return
'
octobre
'
;
break
;
case
:
return
'
novembre
'
;
break
;
case
:
return
'
décembre
'
;
break
;
default
:
return
'
mois|moi
valide
'
;
}
}
echo
moisfr
(
)
;
?
>
exercice
Ecrire
script
php
permettre
d
’
afficher
résulat
suivre
:
astuce
:
utiliser
tableau
associatif
foncion
gettype
(
)
;
test
sur
variable
variable
toto
être
de
type
entier
,
valeur
être
@ord@
variable
titi
être
de
type
string
,
valeur
être
«
chaine
»
.
exercice
solution
:
<
html
>
<
body
>
<
center
>
<
h@card@
>
test
sur
variable
<
/
h1
>
<
/
center
>
<
?
php
$
variable
=
array
(
'
'
toto
'
'
=
>
,
'
'
titi
'
'
=
>
`
`
chaine
'
'
)
;
foreach
(
$
variable
avoir
$
cle
=
>
$
value
)
{
echo
`
`
variable
`
`
.
$
cle
.
`
`
être
de
type
`
`
.
gettype
(
$
valoir
)
.
`
`
,
valeur
être
`
`
.
$
valoir
.
`
`
<
br
/
>
'
'
;
}
?
>
<
/
body
>
<
/
html
>
formulaire
définition
formulaire
faire
avec
balise
<
FORM
>
utiliser
deux
attribut
suivre
:
•
METHOD
:
pour
définir
méthode
de
transfert
donnée
vers
serveur
;
deux
valeur
possible
«
POST
»
«
GET
»
(
donnée
formulaire
être
encoder
dans
l
’
URL
)
.
•
action
:
pour
préciser
l
’
action
à
exécuter
l
’
envoyer
donnée
.
exemple
d
’
utilisation
:
<
FORM
METHOD
=
'
'
POST
'
'
action
=
'
'
dns-remplacer
'
'
>
...
.
<
/
FORM
>
formulaire
élément
d
’
formulaire
:
I
.
input
:
champ
de
saisie
de
texte
différent
type
de
bouton
.
II
.
TEXTAREA
:
zone
de
texte
multi-lignes
.
III
.
select
:
liste
déroulant
.
IV
.
FIELDSET
:
regrouper
élément
formulaire
formulaire
I
.
input
:
champ
de
saisie
de
texte
différent
type
de
bouton
à
définir
avec
l
’
attribut
type
:
.
Text
:
zone
de
texte
à
seul
ligne
<
input
type
=
'
'
text
'
'
id
=
'
'
toto
'
'
name
=
'
'
titi
'
'
{
autofocus
/
required
}
/
>
•
ID
:
être
attribut
lire
par
navigateur
(
en
HTML
,
CSS
Javascript
)
;
•
NAME
:
servir
à
PHP
de
validation
de
formulaire
.
coter
PHP
à
valeur
de
zone
texte
être
récupérer
en
PHP
par
variable
_
$
POST
[
‘
titi
’
]
,
par
contre
variable
utiliser
en
css
pour
donner
style
à
zone
être
#
toto
{
...
}
.
•
value
:
permettre
de
pré-remplir
champ
avec
valeur
par
défaut
.
•
Placeholder
:
permettre
de
donner
indication
sur
contenu
champ
.
indication
disparaître
dès
visiteur
avoir
cliquer
à
intérieur
champ
.
formulaire
.
Password
:
zone
de
mot
de
passe
(
caratère
saisir
s
’
afficher
à
l
’
écran
)
<
input
type
=
'
'
password
'
'
name
=
'
'
pass
'
'
id
=
'
'
pass
'
'
/
>
.
Checkbox
:
case
à
cocher
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
choix
'
'
id
=
'
'
choix
'
'
value
=
'
'
choix1
'
'
checked
/
>
.
radio
:
zone
d
’
option
<
input
type
=
`
`
radio
'
'
name
=
'
'
choix
'
'
id
=
'
'
choix
'
'
value
=
'
'
choix1
'
'
/
>
formulaire
.
bouton
•
Reset
:
remettre
à
zéro
formulaire
<
input
type
=
'
'
reset
'
'
value
=
'
'
effacer
'
'
>
•
Submit
:
validation
formulaire
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
formulaire
II
.
TEXTAREA
:
créer
zone
de
texte
multi-lignes
.
<
textarea
name
=
'
'
ameliorer
'
'
id
=
'
'
ameliorer
'
'
>
<
/
textarea
>
avoir
deux
façon
de
modifier
tail
e
de
zone
:
•
en
CSS
:
en
utiliser
propriété
CSS
«
width
»
«
height
»
.
•
avec
attribut
:
«
rows
»
«
col
»
de
balise
<
textarea
>
.
premier
indiquer
nombre
de
ligne
de
texte
pouvoir
être
afficher
,
second
nombre
de
colonne
.
formulaire
III
.
select
:
faire
choix
parmi
possibilité
sous
forme
de
liste
.
•
L
’
attribut
«
multiple
»
:
indique
pouvoir
sélectionner
option
parmi
cel
être
offrir
dans
contrôle
.
par
défaut
,
attribut
être
utiliser
,
seul
option
pouvoir
être
sélectionner
.
•
à
l
’
intérieur
de
<
select
>
<
/
select
>
,
placer
balise
<
option
>
<
/
option
>
/
grouper
option
avec
balise
<
optgroup
>
<
/
optgroup
>
.
formulaire
•
exemple
avec
select
:
<
select
id
=
'
'
GID
'
'
multiple
>
<
optgroup
label
=
'
'
groupe
'
'
>
<
option
>
option
<
/
option
>
<
/
optgroup
>
<
optgroup
label
=
'
'
groupe
'
'
>
<
option
>
option
<
/
option
>
<
option
>
option
<
/
option
>
<
/
optgroup
>
<
optgroup
label
=
'
'
groupe
'
'
disabled
>
<
option
>
option
<
/
option
>
<
option
>
option
<
/
option
>
<
option
>
option
<
/
option
>
<
/
optgroup
>
<
/
select
>
formulaire
IV
.
FIELDSET
:
regrouper
élément
formulaire
avoir
rapport
entre
.
•
L
’
attribut
«
Legend
»
permettre
de
donner
titre
à
groupement
.
<
fieldset
>
<
legend
>
coordonnées
<
/
legend
>
<
label
for
=
'
'
nom
'
'
>
être
nom
?
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
id
=
'
'
nom
'
'
/
>
<
label
for
=
'
'
prenom
'
'
>
être
prénom
?
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
prenom
'
'
id
=
'
'
prenom
'
'
/
>
<
/
fieldset
>
traitement
formulaire
traitement
formulaire
selon
méthode
utiliser
dans
formulaire
(
spécifier
dans
l
’
attribut
«
method
»
)
:
•
$
_GET
être
variable
super-globale
pour
récupérer
donnée
formulaire
avec
méthode
GET
.
•
$
_POST
être
variable
super-globale
pour
récupérer
donnée
formulaire
avec
méthode
POST
.
•
élément
d
’
formulaire
être
identifier
en
php
par
attribut
«
name
»
.
traitement
formulaire
:
<
form
method
=
'
'
post
'
'
action
=
'
'
dns-remplacer
'
'
>
<
input
type
=
'
'
text
'
'
id
=
'
'
toto
'
'
name
=
'
'
titi
'
'
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
en
php
,
pour
récupérer
valeur
saisir
dans
zone
texte
:
<
p
>
savoir
appel
être
,
hé
hé
.
appel
être
<
?
php
echo
$
_POST
[
’
titi
'
]
;
?
>
!
<
/
p
>
traitement
formulaire
:
<
form
method
=
‘
GET
’
action
=
'
'
dns-remplacer
'
'
>
être
aimer
?
<
br
/
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
loisir
[
]
'
'
value
=
'
'
shopping
'
'
/
>
faire
shopping
<
br
/
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
loisir
[
]
'
'
value
=
'
'
sport
'
'
/
>
faire
sport
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
réponse
'
'
/
>
<
/
form
>
en
php
,
pour
récupérer
valeur
cocher
:
$
loisir
=
$
_GET
[
`
`
loisir
'
'
]
;
echo
'
'
<
b
>
aimer
<
/
b
>
<
br
/
>
'
'
;
for
(
$
i
=
;
$
i
<
count
(
$
loisir
)
;
$
i++
)
{
echo
$
loisir
[
$
i
]
.
`
`
<
br
/
>
'
'
;
}
exercice
•
exercice
:
transmettre
valeur
saisir
variable
nom
,
prénom
age
d
’
formulaire
d
’
fichier
(
dns-remplacer
)
à
autre
page
(
dns-remplacer
)
permettre
de
afficher
.
exercice
exercice
:
solution
dns-remplacer
<
form
method
=
“
post
”
action
=
”
dns-remplacer
”
>
Prenom
:
<
input
type
=
”
text
”
name
=
“
prenom
”
>
<
br
/
>
nom
:
<
input
type
=
”
text
”
name
=
“
nom
”
>
<
br
/
>
age
:
<
input
type
=
”
text
”
name
=
“
age
”
>
<
input
type
=
”
submit
”
valoir
=
“
envoyer
”
>
dns-remplacé
<
?
php
$
prenom
=
$
_POST
[
“
prenom
”
]
;
$
nom
=
$
_POST
[
“
nom
”
]
;
$
age
=
$
_POST
[
“
age
”
]
;
echo
“
bonjour
<
b
>
$
prenom
$
nom
<
/
b
>
,
age
être
:
$
age
<
br
>
”
;
?
>
exercice
exercice
:
transmettre
à
travers
lien
,
valeur
variable
nom
age
d
’
fichier
(
dns-remplacer
)
à
autre
page
(
dns-remplacer
)
permettre
de
afficher
.
(
sans
utiliser
formulaire
utiliser
lien
hypertexte
(
<
avoir
href
=
‘
nomLien
’
>
<
/
avoir
>
)
exercice
exercice
:
solution
dns-remplacé
:
<
html
>
<
body
>
<
?
php
$
nom
=
'
'
george
'
'
;
$
age
=
;
?
>
<
avoir
href
=
'
dns-remplacer
?
nom
=
<
?
php
echo
$
nom
?
>
&
age
=
<
?
php
echo
$
age
?
>
'
>
lien
vers
cible
<
/
avoir
>
<
/
body
>
<
/
html
>
dns-remplacé
:
<
html
>
<
body
>
<
?
php
nom
=
$
_GET
[
'
nom
'
]
;
$
age
=
$
_GET
[
'
age
'
]
;
echo
'
bonjour
'
.
$
nom
.
'
,
age
être
:
'
.
$
age
.
'
<
br
>
'
;
?
>
<
/
body
>
<
/
html
>
exercice
exercice
:
Ecrire
script
permettre
de
protéger
contenu
d
’
page
secret
avec
login
mot
de
passe
en
utiliser
formulaire
.
script
devoir
être
écrire
dans
même
page
.
exercice
exercice
:
solution
<
?
php
$
log
=
'
'
login
'
'
;
$
pass
=
'
'
motDepass
'
'
;
if
(
isset
(
$
_POST
[
'
login
'
]
)
and
isset
(
$
_POST
[
'
passw
'
]
)
)
:
$
login
=
$
_POST
[
'
login
'
]
;
$
passw
=
$
_POST
[
'
passw
'
]
;
Endif
;
if
(
$
login
=
=
$
log
&
&
$
passw
=
=
$
pass
)
:
?
>
<
html
>
<
body
>
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
contenu
confidentiel
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
<
br
/
>
<
b
>
code
secret
:
XXXXXYYEYEYEYE
<
/
b
>
<
/
body
>
<
/
html
>
<
?
php
else
:
?
>
<
html
>
<
body
>
<
form
method
=
'
'
post
'
'
>
Login
:
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
/
>
<
br
>
mot
de
passe
:
<
input
type
=
'
'
password
'
'
name
=
'
'
passw
'
'
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
body
>
<
/
html
>
<
?
php
endif
;
?
>
visibilité
variable
•
en
PHP
exister
niveau
de
visibilité
d
’
variable
selon
contexte
:
•
variable
superglobale
:
être
disponible
importer
dans
programme
.
•
variable
global
:
être
variable
,
tableau
,
objet
constant
créer
même
dans
programme
principal
.
être
visible
dans
programme
principal
•
variable
local
:
être
variable
de
fonction
(
paramètre
comprendre
)
.
visibilité
être
local
,
programme
principal
pouvoir
agir
sur
variable
.
porter
variable
global
•
en
PHP
,
variable
global
pouvoir
être
utiliser
à
l
’
intérieur
d
’
fonction
sans
passer
en
paramètre
de
.
être
possible
en
utiliser
mot
clé
«
global
»
.
variable
devoir
être
déclarer
à
intérieur
de
fonction
de
pouvoir
être
utiliser
dans
.
exemple
:
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
global
$
avoir
,
$
b
;
$
b
=
$
avoir
+
$
b
;
echo
$
b
;
/
/
dans
exemple
,
avoir
déclarer
$
avoir
$
b
avec
mot
clé
«
global
»
à
l
’
intérieur
de
somme
pour
qu
’
être
manipuler
par
.
}
•
deuxième
méthode
pour
accéder
variable
global
être
de
utiliser
variable
superglobale
$
GLOBALS
:
exemple
:
<
?
php
$
avoir
=
;
$
b
=
;
function
somme
(
)
{
$
GLOBALS
[
'
b
'
]
=
$
GLOBALS
[
'
avoir
'
]
+
$
GLOBALS
[
'
b
'
]
;
}
echo
$
b
;
}
?
>
variable
superglobale
•
variable
superglobale
être
générer
par
PHP
:
–
el
être
être
disponible
être
contexte
script
même
à
l
’
intérieur
d
’
fonction
sans
être
passer
en
paramètre
de
cel
e
.
–
el
être
être
écrire
en
majuscule
commencer
,
par
underscore
(
_
)
.
–
El
être
être
tableau
associatif
.
variable
superglobale
noter
:
•
$
GLOBALS
:
rassembler
variable
global
.
•
$
_ENV
:
être
variable
de
environnement
donner
par
serveur
.
•
$
_SESSION
:
être
variable
de
session
.
variable
rester
stocker
sur
serveur
temps
de
présence
de
visiteur
.
•
$
_COOKIE
:
contenir
valeur
cookies
enregistrer
sur
ordinateur
visiteur
.
•
$
_GET
:
contenir
donnée
envoyer
en
paramètre
dans
URL
.
•
$
_POST
:
contenir
information
venir
de
être
envoyer
par
formulaire
.
variable
superglobal
exemple
:
<
html
>
<
head
>
<
title
>
variable
$
_SERVER
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
nom
fichier
en
cours|cour
d
’
exécution
à
partir
de
racine
:
'
.
$
_SERVER
[
'
PHP_SELF
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
de
racine
script
:
'
.
$
_SERVER
[
'
DOCUMENT_ROOT
'
]
;
echo
'
<
br
/
>
'
;
echo
'
nom
client
HTML
:
'
.
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
.
'
<
br
>
'
;
echo
'
nom
serveur
exécuter
script
:
'
.
$
_SERVER
[
'
SERVER_NAME
'
]
;
echo
'
<
br
/
>
<
br
/
>
'
;
echo
‘
adresse
IP
être
:
‘
.
$
_SERVER
[
'
REMOTE_ADDR
'
]
;
?
>
<
/
body
>
<
/
html
>
inclusion
fichier
L
’
inclusion
fichier
PHP
servir
à
réutiliser
partie
de
code
identique
dans
endroit
dans
même
page
dans
page
différent
.
L
’
inclusion
fichier
faire
avec
include
(
)
require
(
)
:
@ord@
include
(
)
:
fonction
renvoyer
erreur
de
type
warning
,
de
fait
el
e
n
’
arriver
à
ouvrir
fichier
,
code
suivre
être
exécuter
.
require
(
)
fonction
être
identique
à
include
sauf
erreur
survenir
,
erreur
de
type
fatal
stopper
l
’
exécution
script
.
inclusion
fichier
Lorsqu
’
fichier
être
importer
,
code
trouver
à
l
’
intérieur
être
exécuter
.
,
variable
,
constante
fichier
importer
pouvoir
être
réutiliser
dans
suite
programme
.
exemple
:
fichier1
.php
:
<
?
php
/
/
définition
variable
$
avoir
=
;
$
b
=
;
/
/
affichage
de
texte
echo
'
de
mathématique
...
'
;
?
>
fichier2
réutiliser
code
fichier1
:
?
php
/
/
importation
exécution
fichier1
require
(
’
dns-remplacer
'
)
;
/
/
calcul
produit
$
produire
=
$
avoir
*
$
b
;
/
/
affichage
de
somme
echo
’
produit
de
$
avoir
$
b
=
'
,
$
produit
;
/
/
afficher
?
>
Redirection
vers
page
•
en
PHP
,
fonction
header
(
)
charger
de
envoyer
serveur
entêter
passer
en
paramètre
.
•
pour
créer
redirection
avec
PHP
,
utiliser
fonction
pour
envoyer
entêter
de
type
location
(
adresse
)
.
•
règle
important
:
appel
de
‘
header
(
)
’
devoir
faire
avant
envoi
navigateur
Redirection
vers
page
script
de
redirection
:
<
?
php
header
(
'
location
:
http
:
/
/
dns-remplacer
/
dns-remplacer
'
)
;
?
>
variable
de
session
•
variable
de
session
servir
à
stocker
information
sur
l
’
utilisateur
dans
serveur
.
•
El
être
être
présent
dans
page
de
site
pendant
présence
d
’
visiteur
.
•
El
être
être
accessible
via
superglobal
$
_SESSION
variable
de
session
gestion
session
•
visiteur
arriver
sur
site
.
session
être
créer
pour
.
PHP
générer
identifier
unique
pour
,
appeler
‘
session
ID
’
.
•
fois
session
être
démarrer
avec
session_start
(
)
,
infinité
de
variable
de
session
pouvoir
être
créer
selon
besoin
.
•
session
être
fermer
par
session_destroy
(
)
visiteur
charger
de
page
dans
site
pendant
minute
visiteur
souhaiter
déconnecter
.
variable
de
session
variable
de
session
être
accessible
dans
page
d
’
site
web
,
falloir
appeler
session_start
(
)
sur
de
page
avant
décrire
moindre
code
HTML
(
avant
même
<
!
doctype
>
.
variable
de
session
•
exemple
:
<
?
php
/
/
démarer
session
session_start
(
)
;
echo
'
bienvenir
à
page
numéro
’
;
/
/
amuser
à
créer
variable
de
session
dans
$
_SESSION
$
_SESSION
[
'
prenom
'
]
=
'
Jean
'
;
$
_SESSION
[
'
motPass
'
]
=
'
MotDePasse
’
;
?
>
<
html
>
<
head
>
<
title
>
session
<
/
title
>
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
'
prenom
'
]
)
)
{
echo
'
'
<
p
>
salut
savoir
être
,
appel
être
'
'
.
$
_SESSION
[
'
prenom
'
]
.
`
`
<
/
p
>
'
'
;
echo
'
'
<
p
>
<
avoir
href
=
\
'
'
dns-remplacer
\
'
'
>
cliquer
SVP
<
/
avoir
>
<
/
p
>
»
;
}
else
{
echo
'
'
variable
de
session
être
déclarer
<
br
/
>
'
'
;
}
?
>
<
/
body
>
<
/
html
>
Cookies
•
cookie
être
mécanisme
pour
stocker
information
sur
visiteur
de
l
’
identifier
.
•
variable
de
session
,
cookies
être
petit
fichier
stocker
sur
l
’
ordinateur
de
l
’
utilisateur
pour
durée
de
vie
pouvoir
définir
.
•
cookies
être
accessible
via
superglobal
$
_COOKIE
.
Cookies
•
fonction
setcookie
(
)
permettre
de
définir
cookie
être
envoyer
avec
reste
en-tête
HTTP
.
àLes
cookies
faire
partie
en-tête
HTTP
,
imposer
setcookie
(
)
appeler
avant
affichage
de
texte
avant
même
<
!
doctype
>
.
fonction
setcookie
(
)
pouvoir
prendre
jusqu
'
à
paramètre
.
seul
premier
être
obligatoire
définir
nom
cookie
,
deuxième
définir
valeur
cookie
troisième
définir
durée
de
vie
cookie
en
second
.
exemple
:
setcookie
(
’
nom
'
,
‘
nomUtilisateur
’
,
time
(
)
*
)
;
echo
$
_COOKIE
[
‘
nom
’
]
;
/
/
affichage
cookie
.
•
fonction
setrawcookie
(
)
être
même
setcookie
(
)
excepté
valeur
cookie
être
encoder
URL
de
envoi
navigateur
.
•
pour
détruire
cookie
:
appeler
setCookie
(
)
avec
date
d
’
expiration
dans
passé
:
•
:
setcookie
(
'
'
Nomcookie
'
'
,
'
'
valeurCookie
'
'
,
time
(
)
)
;
Cookies
•
exemple
de
cookie
sous
forme
de
tableau
:
<
?
php
setcookie
(
`
`
cookie
[
three
]
'
'
,
'
'
cookiethree
»
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
two
]
'
'
,
'
'
cookietwo
»
,
time
(
)
*
)
;
setcookie
(
`
`
cookie
[
one
]
'
'
,
'
'
cookieone
»
,
time
(
)
*
)
;
/
/
l
’
affichage
de
cookies
:
<
?
php
if
(
isset
(
$
_COOKIE
[
'
cookie
'
]
)
)
{
/
/
exemple
de
appel
cookie
:
echo
'
cokie
two
être
:
'
.
$
_COOKIE
[
'
cookie
'
]
[
'
two
'
]
.
'
pouvoir
parcourir
avec
foreach
suivre
:
<
br
/
>
'
;
foreach
(
$
_COOKIE
[
'
cookie
'
]
avoir
$
name
=
>
$
value
)
{
$
name
=
htmlspecialchar
(
$
name
)
;
$
value
=
htmlspecialchar
(
$
value
)
;
echo
'
'
$
name
:
$
value
<
br
/
>
'
'
;
}
}
?
>
exercice
Ecrire
script
permettre
de
protéger
contenu
d
’
page
secret
avec
login
mot
de
passe
en
utiliser
formulaire
.
note
:
1-écrire
page
dns-remplacé
contenir
formulaire
login
/
mot
de
passe
.
lien
hypertexte
permettre
d
’
afficher
page
secret
variable
de
session
‘
login
’
avoir
être
créer
.
manipuler
sur
même
page
donnée
formulaire
suivre
:
2-Diriger
l
’
utilisateur
vers
dns-remplacer
contenir
code
secret
:
ZZZZZZZZZZ
login
=
=
‘
login1
’
pass
=
=
‘
pass1
’
.
début
falloir
vérifier
login
=
=
login1
afficher
«
bonjour
M
/
madame
valeurdelogin
»
afficher
code
secret
créer
par
suite
lien
vers
page
précédent
lien
de
déconnexion
permettre
de
rester
sur
même
page
en
créer
variable
deconnecter
=
«
yes
»
.
3-Diriger
l
’
utilisateur
vers
dns-remplacer
contenir
code
secret
:
ZZZZZZZZZZ
login
=
=
‘
login2
’
pass
=
=
‘
pass2
’
.
début
falloir
vérifier
login
=
=
login2
afficher
«
bonjour
M
/
madame
valeurdelogin
»
afficher
code
secret
créer
par
suite
lien
vers
page
précédent
lien
de
déconnexion
permettre
de
rester
sur
même
page
en
créer
variable
deconnecter
=
«
yes
»
.
4-Sinon
afficher
sur
même
page
message
«
Veuil
ez
entrer
login
mot
de
passe
valide
»
en
laisser
formulaire
visible
de
permettre
à
l
’
utilisateur
de
s
’
authentifier
.
programmation
orienter
objet
(
POO
)
«
classe
objet
»
•
classe
permettre
définition
d
’
nouveau
type
de
variable
rassembler
attribut
.
•
El
e
permettre
définition
de
fonction
manipuler
attribut
,
en
POO
,
fonction
s
’
appel
ent
‘
méthode
’
.
•
objet
être
instance
d
’
classe
.
objet
être
assimiler
à
variable
classe
type
de
objet
.
programmation
orienter
objet
(
POO
)
«
concept
de
base
»
POO
avoir
deux
but
:
•
faciliter
réutilisation
code
avoir
écrire
grâce
à
héritage
.
–
L
’
héritage
permettre
,
à
partir
de
classe
existant
,
de
créer
nouveau
e
reprendre
caractéristique
de
adapter
besoin
sans
modifier
classe
de
base
.
–
être
possible
de
redéfinir
méthode
dans
classe
hériter
de
classe
de
base
sauf
méthode
avoir
être
définir
final
.
L
’
appel
de
méthode
de
objet
être
possible
sans
soucier
de
type
intrinsèque
:
agir
polymorphisme
.
Ø
polymorphisme
traire
de
capacité
de
objet
à
posséder
forme
.
•
encapsulation
donnée
traitement
correspondant
.
–
L
’
encapsulation
permettre
de
regrouper
ensemble
d
’
attribut
avec
ensemble
de
méthode
en
classe
permettre
de
manipuler
.
POO
en
PHP
«
syntaxe
de
base
»
définition
de
classe
commencer
par
mot-clé
«
class
»
,
suivre
nom
de
classe
.
à
création
(
instanciation
)
de
l
’
objet
,
méthode
porter
même
nom
classe
être
appeler
:
c
’
être
constructeur
.
dernier
être
définir
par
mot
clé
«
__construct
»
.
de
définition
méthode
de
classe
,
attribut
statique
être
appeler
par
l
’
operateur
d
’
objet
$
this-
>
nomDePropriêtre
.
exemple
:
{
/
/
déclaration
attribut
public
$
nom
,
$
age
;
/
/
déclaration
constructeur
public
function
__construct
(
$
nom
,
$
age
)
{
$
this-
>
nom
=
$
nom
;
/
/
$
this
représenter
l
’
objet
être|sommer
entrain
de
définir
.
$
this-
>
age
=
$
age
;
}
/
/
déclaration
méthode
public
function
affiche
(
)
{
echo
$
this-
>
nom
;
echo
$
this-
>
age
;
}
}
POO
en
PHP
«
visibilité
de
attribut
de
méthode
»
•
«
public
»
:
attribut
méthode
être
public
,
pouvoir
avoir
accès
depuis
importer
.
•
«
private
»
:
imposer
restriction
.
L
’
accès
attribut
méthode
être
possible
depuis
intérieur
de
classe
.
Ø
mettre
constructeur
avec
type
de
visibilité
private
,
el
e
pouvoir
être
appeler
,
pouvoir
instancier
classe
•
«
protected
»
avoir
même
effet
private
,
à
l
’
exception
classe
fil
être
avoir
accès
attribut
protéger
.
POO
en
PHP
«
mot
clé
static
»
mot
clé
«
static
»
être
utiliser
après
type
de
visibilité
pour
déclarer
méthode
attribut
statique
.
attribut
méthode
statique
pouvoir
être
utiliser
sans
avoir
besoin
de
instancier
classe
,
pouvoir
accéder
en
utiliser
nom
de
classe
.
attribut
statique
être
dire
‘
attribut
de
classe
’
.
,
objet
avoir
accès
à
attribut
avoir
même
valeur
pour
objet
.
méthode
statique
d
’
classe
servir
à
manipuler
attribut
statique
.
,
méthode
statique
pouvoir
manipuler
attribut
statique
de
classe
.
POO
en
PHP
«
l
’
opérateur
:
:
»
opérateur
de
résolution
de
portée
«
:
:
»
(
doubler
deux
point
)
fournir
moyen
de
accéder
membre
statique
constant
,
attribut
méthode
surcharger
de
classe
.
àLe
mot
clé
«
self
:
:
»
être
utiliser
pour
accéder
méthode
attribut
statique
depuis
classe
.
àLe
mot
clé
«
parent
:
:
»
être
utiliser
pour
accéder
propriété
méthode
surchargé
constant
d
’
classe
depuis
classe
fil
e
.
àPour
référencer
élément
en
dehors
de
classe
,
utiliser
nom
de
classe
«
nomClasse
:
:
»
.
POO
en
PHP
«
héritage
»
classe
pouvoir
hériter
de
autre
classe
en
utiliser
mot-clé
«
extends
»
dans
déclaration
.
pour
accéder
méthode
propriété
statique
de
classe
mère
,
opérateur
«
parent
:
:
»
être
utiliser
.
exemple
:
class
ExtendClass
extends
SimpleClass
{
/
/
redéfinition
de
méthode
parent
/
l
’
ajout
attribut
function
afficher
(
)
{
echo
'
'
classe
étendre
'
'
;
parent
:
:
afficher
(
)
;
}
}
$
extended
=
new
ExtendClass
;
/
/
instanciation
$
extended-
>
afficher
(
)
;
/
/
polymorphisme
.
POO
en
PHP
«
abstraction
»
classe
abstrait
:
être
classe
qu
’
pouvoir
instancier
.
Ø
El
e
être
définir
par
mot
clé
«
abstract
»
dans
déclaration
.
Ø
pour
exploiter
classe
abstrait
,
falloir
créer
classe
hériter
de
classe
abstrait
.
classe
abstrait
permettre
de
définir
comportement
(
méthode
)
implémentation
(
code
dans
méthode
)
faire
dans
classe
fil
être
:
Ø
rendre
méthode
abstraire
en
utiliser
mot
clé
«
abstract
»
avant
visibilité
de
méthode
,
classe
fil
être
être
forcer
à
écrire
méthode
.
POO
en
PHP
«
abstraction
»
exemple
:
classe
abstrait
abstract
class
NomAbstractClass
{
/
/
force
classe
fil
être
à
définir
deux
méthode
suivant
abstract
protected
function
getValue
(
)
;
abstract
protected
function
prefixValue
(
$
prefix
)
;
/
/
méthode
commun
public
function
printOut
(
)
{
print
$
this-
>
getValue
(
)
.
`
`
\n
'
'
;
}
}
POO
en
PHP
«
constante
de
classe
»
être
possible
de
définir
valeur
constant
à
l
’
intérieur
d
’
classe
,
être
modifiable
.
visibilité
par
défaut
constante
de
classe
être
public
.
exemple
:
MyClass
{
const
constant
=
'
valeur
constant
'
;
function
showConstant
(
)
{
echo
self
:
:
constant
.
`
`
\n
'
'
;
/
/
self
:
:
constant
=
‘
nouveau
e
valeur
’
entrainer
erreur
}
}
echo
MyClasse
:
constant
;
POO
en
PHP
«
constante
de
classe
»
attention
à
confondre
attribut
statique
constant
de
classe
:
àun
attribut
statique
pouvoir
à
faire
changer
de
valeur
cours|cour
temps
,
à
différence
d
’
constante
valeur
être
fixer
.
POO
en
PHP
«
constante
de
classe
»
,
être
possible
de
déclarer
constante
dans
classe
de
base
,
de
changer
valeur
dans
classe
fil
e
en
utiliser
méthode
«
get_called_class
»
retourner
nom
de
de
classe
depuis
laquel
e
constant
être
appeler
.
à
,
nouveau
e
valeur
de
constant
être
propre
à
classe
fil
e
classe
mère
garder
valeur
initial
de
constant
.
POO
en
PHP
«
constante
de
classe
»
exemple
:
<
?
php
{
/
/
déclaration
de
constant
const
nomClasse
=
'
'
personne
'
'
;
public
function
__construct
(
)
{
echo
‘
être
constructeur
’
;
/
*
pouvoir
changer
valeur
de
constant
par
:
self
:
:
nomClasse
=
‘
test
’
*
/
}
public
function
affiche
(
)
{
$
c
=
get_called_class
(
)
;
echo
’
valeur
de
constant
nomClasse
être
:
'
.
$
c
:
:
nomClasse
.
'
<
br
/
>
'
;
}
}
HPErsonne
extends
personne
{
const
nomClasse
=
'
'
HPErsonne
'
'
;
public
function
__construct
(
)
{
parent
:
:
__construct
(
)
;
/
/
parent
:
:
nomClasse
=
‘
test2
’
’
retourner
erreur
}
}
$
p
=
new
personne
(
)
;
$
p-
>
affiche
(
)
;
$
hp
=
new
HPErsonne
(
)
;
$
hp-
>
affiche
(
)
;
?
>
POO
en
PHP
«
mot
clé
final
»
mot-clé
«
final
»
indique
élément
pouvoir
être
changer
dans
suite
programme
.
Ø
appliquer
méthode
de
classe
classe
el
e
même
.
Ø
attribut
pouvoir
être
déclarer
final
.
méthode
indiqué
final
pouvoir
être
redéfinir
dans
classe
dérivé
.
Ø
pouvoir
en
servir
pour
forcer
comportement
de
méthode
dans
sous-classe
.
•
classe
final
pouvoir
être
dériver
(
possibilité
d
’
héritage
)
.
POO
en
PHP
«
mot
clé
final
»
exemple
:
classe
final
final
BaseClass
{
public
function
test
(
)
{
echo
'
'
BaseClass
:
:
test
(
)
appeler
'
'
;
}
/
/
méthode
suivant
être
finale
final
public
function
moreTesting
(
)
{
echo
'
'
BaseClass
:
:
moreTesting
(
)
appeler
'
'
;
}
}
ChildClass
extends
BaseClass
{
}
/
/
résultat
:
fatal
error
:
ChildClass
may
not
inherit
from
final
class
(
BaseClass
)
SGBS
avec
PHP
•
Qu
’
être
qu
’
SGBD
?
?
à
«
être
logiciel
système
destiner
à
stocker
à
partager
information
dans
base
de
donnée
,
en
garantir
qualité
,
pérennité
confidentialité
information
,
en
cacher
complexité
opération
.
»
WIKIPEDIA
à
parmi
logiciel
connu
,
trouver
:
MySQL
,
PostgreSQL
,
SQLite
,
oracle
MAriaDB
.
pour
liste
détail
ée
SGBD
,
consulter
lien
http
:
/
/
dns-remplacer
/
sgbdcmp
/
#
LI
SGBS
avec
PHP
système
pouvoir
être
catégoriser
suivre
:
SGDB
relationnel
système
baser
sur
modèle
relationnel
:
donner
stocker
dans
table
structuré
(
en
colonne
,
ligne
)
relation
lier
table
entre
el
être
.
–
système
libre
:
MySQL
,
PostgreSQL
,
MariaDB
,
Firebird
,
Ingres
,
HSQLDB
,
derby
.
–
système
propriétaire
:
oracle
Database
,
Microsoft
SQL
Server
,
DB2
,
MaxDB
,
4D
,
dBase
,
Informix
,
Sybase
.
SGBD
orienter
objet
:
ZODB
,
db4o
embarquer
:
SQLite
,
Berkeley
DB
.
SGBD
NoSQL
:
Cassandra
,
redire
,
MongoDB
,
SimpleDB
,
BigTable
,
CouchDB
,
HBase
,
LevelDB
,
RethinkDB
,
Memcached
.
SGBS
avec
PHP
manipulation
base
de
donnée
mysql
faire
via
interface
graphique
‘
PhpMyAdmin
’
en
exécuter
script
php
.
.
PhpMyadmin
•
programme
permettre
de
avoir
vue
rapide
de
l
’
ensemble
donnée
.
•
C
’
être
outil
connaître
permettre
de
manipuler
base
de
donnée
MySQL
.
•
PhpMyAdmin
être
livrer
avec
WAMP
,
hébergeur
permettre
de
utiliser
phpMyAdmin
.
(
chemin
d
’
accès
:
http
:
/
/
localhost
:
/
phpMyAdmin
)
SGBS
avec
PHP
.
utilisation
d
’
SGBD
via
script
PHP
manipulation
d
’
base
de
donnée
effectuer
en
temps
:
§
connexion
serveur
de
donnée
§
sélection
de
base
de
donnée
§
requêter
§
exploitation
requête
§
fermeture
de
connexion
MYSQL
avec
PHP
exemple
d
’
SGBD
MYSQL
:
PHP
offrir
api
pour
connecter
à
MySQL
:
1.Mysqli
/
/
connexion
à
base
de
donnée
$
link
=
mysqli_connect
(
`
`
localhost
'
'
,
'
'
root
'
'
,
'
'
passwords
'
'
,
'
'
dbName
'
'
)
;
if
(
mysqli_connect_errno
(
)
)
{
/
*
vérification
de
connexion
*
/
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
mysqli_connect_error
(
)
)
;
exit
(
)
;
}
$
query
=
'
'
select
Name
FROM
tablename
ORDER
by
ID
DESC
'
'
;
if
(
$
result
=
mysqli_query
(
$
link
,
$
query
)
)
{
/
*
exécution
de
requête
*
/
while
(
$
row
=
mysqli_fetch_assoc
(
$
result
)
)
{
/
*
récupérer
tableau
associatif
*
/
printf
(
`
`
%
s
<
br
/
>
'
'
,
$
row
[
'
Name
’
]
)
;
}
mysqli_free_result
(
$
result
)
;
/
*
libérer
jeu
de
résultat
*
/
}
/
mysqli_close
(
$
link
)
;
/
*
fermeture
de
connexion
*
?
>
MYSQL
avec
PHP
.
Mysql
(
obsolète
supprimer
depuis
version
PHP.7
)
$
c
=
mysql_connect
(
`
`
dns-remplacer
'
'
,
'
'
user
'
'
,
'
'
password
'
'
)
;
mysql_select_db
(
`
`
database
'
'
)
;
$
result
=
mysql_query
(
`
`
select
nom
from
tableName
'
'
)
;
$
row
=
mysql_fetch_assoc
(
$
result
)
;
echo
htmlentities
(
$
row
[
’
nom
'
]
)
;
?
>
MYSQL
avec
PHP
.
PDO
(
OO
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
dns-remplacer
;
dbname
=
database
'
,
'
user
'
,
'
password
’
)
$
statement
=
$
pdo-
>
query
(
`
`
select
nom
from
tableName
'
'
)
;
$
row
=
$
statement-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
;
echo
htmlentities
(
$
row
[
‘
nom
'
]
)
;
RQ
:
PHP
offrir
possibilité
d
’
exploiter
l
’
api
mysqli
façon
orienter
objet
(
OO
)
:
$
mysqli
=
new
mysqli
(
`
`
localhost
'
'
,
'
'
root
'
'
,
'
'
password
'
'
,
'
'
world
'
'
)
;
$
result
=
$
mysqli-
>
query
(
`
`
select
Name
from
tablename
'
'
)
;
while
(
$
row
=
$
result-
>
fetch_assoc
(
)
)
{
echo
htmlentities
(
$
row
[
'
Name
'
]
)
.
`
`
<
br
/
>
'
'
;
}
MYSQL
avec
PHP
POO
manipulation
résultat
d
’
requête
sous
forme
d
’
objet
:
exemple
:
<
?
php
$
mysqli
=
new
mysqli
(
`
`
localhost
'
'
,
«
root
'
'
,
«
root
'
'
,
'
'
world
'
'
)
;
/
*
vérification
de
connexion
*
/
if
(
mysqli_connect_errno
(
)
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
mysqli_connect_error
(
)
)
;
exit
(
)
;
}
$
query
=
'
'
select
ID
,
Name
,
CountryCode
FROM
citoyen
ORDER
by
ID
DESC
LIMIT
,
'
'
;
if
(
$
result
=
$
mysqli-
>
query
(
$
query
)
)
{
/
*
récupérer
tableau
de
objet
*
/
while
(
$
obj
=
$
result-
>
fetch_object
(
)
)
{
printf
(
`
`
%
s
(
%
s
)
\n
'
'
,
$
obj-
>
Name
,
$
obj-
>
CountryCode
)
;
}
/
*
free
result
set
*
/
$
result-
>
clore
(
)
;
}
/
*
fermeture
de
connexion
*
/
$
mysqli-
>
clore
(
)
;
?
>
noter
fetch_object
(
)
affecter
attribut
de
objet
avant
de
appeler
constructeur
.
falloir
vérifier
valeur
être
assigner
attribut
avant
de
affecter
nouveau
valeur
dans
déclaration
constructeur
.
MYSQL
avec
PHP
POO
manipulation
résultat
d
’
requête
sous
forme
d
’
objet
:
avec
déclaration
de
class
exemple
:
/
/
définition
de
classe
:
{
/
/
déclaration
attribut
Private
$
id
,
$
nom
,
$
age
;
/
/
déclaration
constructeur
public
function
__construct
(
$
id
=
)
{
if
(
!
$
this-
>
id
)
$
this-
>
id
=
$
id
;
}
public
function
__ToString
(
)
{
Return
‘
nom
:
’
.
$
this-
>
nom
.
‘
age
:
‘
.
$
this-
>
age
.
‘
<
br
/
>
;
}
}
/
/
connexion
à
base
de
donnée
...
.
/
/
affichage
résultat
:
while
(
$
obj
=
$
result-
>
fetch_object
(
‘
personne
’
)
)
{
echo
$
obj
;
}
traquer
erreur
avec
PDO
try-catch
(
PDOException
)
pour
identifier
source
erreur
de
l
’
exécution
script
PHP
,
ajouter
6ème
paramètre
dans
PDO
suivre
:
<
?
php
$
bdd
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
world
;
charset
=
utf8
'
,
'
root
'
,
'
'
,
array
(
PDO
:
:
ATTR_ERRMODE
=
>
PDO
:
:
ERRMODE_EXCEPTION
)
)
;
?
>
àDésormais
,
requête
SQL
comporter
erreur
aller
avoir
message
clair
.
exercice
PHP
/
MYSQL
exercice
:
Ecrire
script
PHP
pour
afficher
ligne
de
table
citoyen
en
afficher
date
format
jj-mm-yyyy
.
exercice
:
refaire
l
’
exercice
code
secret
en
utiliser
base
de
donnée
.
-login1
/
pass1
aller
devoir
lire
page
dns-remplacer
-login2
.
/
pass2
aller
devoir
lire
page
dns-remplacé
.
transaction
:
modèle
ACID
transaction
être
ensemble
de
traitement
(
requête
)
exécuter
en
rien
.
ACID
=
atomicité
,
cohérence
,
isolation
durabilité
.
.
atomicité
assurer
transaction
faire
complet
tout
.
àCette
règle
devoir
être
respecter
dans
situation
,
d
’
panne
de
électricité
,
défaillance
de
ordinateur
début
de
transaction
:
start
transaction
requête
:
select
,
UPDATE
.
.
validation
de
transaction
:
commettre
annulation
de
transaction
en
cas
d
’
erreur
:
ROLLBACK
.
RQ
:
S
’
avoir
erreur
d
’
intégrité
de
donnée
,
roolback
faire
transaction
:
modèle
ACID
.
cohérence
assurer
transaction
amener
système
de
état
valide
(
t
)
à
autre
état
valide
t+1
(
t
:
avant
l
’
exécution
t+1
après
l
’
exécution
)
.
transaction
:
modèle
ACID
.
isolation
:
dépendance
entre
transaction
.
exemple
:
utilisation
de
notion
de
‘
verrou
’
pour
bloquer
en
lecture
/
en
écriture
l
’
accès
à
base
de
donnée
.
.
durabilité
:
assurer
transaction
avoir
être
confirmer
,
el
e
demeurer
enregistrer
à
suite
de
panne
de
électricité
,
de
panne
de
ordinateur
de
autre
problème
...
transaction
avec
MYSQL
MYSQL
avoir
particularité
de
gérer
moteur
de
stockage
dans
même
BD
,
appeler
moteur
de
table
.
•
moteur
de
stockage
être
ensemble
d
’
algorithme
permettre
de
stocker
d
’
accéder
donnée
dans
SGBD
.
en
principe
,
seul
moteur
être
utiliser
par
SGBD
.
•
pour
lister
moteur
,
utiliser
requête
:
show
ENGINES
;
transaction
avec
MYSQL
•
principal
moteur
de
stockage
MYSQL
:
MyISAM
:
populaire
ü
simple
d
’
utilisation
.
ü
performant
sur
table
ouvrir
(
rapide
pour
opération
count
(
)
en
lecture
)
ü
offrir
index
FULL-TEXT
permettre
de
faire
recherche
précis
sur
texte
.
×
supporter
clé
étranger
,
transaction
×
gérer
verrouil
age
niveau
de
table
(
bloquer
table
entier
opération
d
’
insertion
,
suppression
MAJ
)
.
transaction
avec
MYSQL
•
principal
moteur
de
stockage
MYSQL
:
Memory
:
stocker
donnée
de
table
en
mémoire
(
ram
)
.
ü
rapidité
d
’
accès
×
en
cas
de
panne
,
donnée
stocker
être
supprimer
.
InnoDB
:
utiliser
dans
secteur
sensible
.
ü
gestion
clé
étranger
support
transaction
(
requête
être
considérer
transaction
)
.
ü
gérer
verrouil
age
niveau
de
ligne
.
×
proposer
d
’
index
FULL-TEXT
,
lent
dans
opération
.
transaction
avec
MYSQL
•
exemple
de
gestion
de
transaction
avec
Mysql
(
achat
en
ligne
)
.
pour
supporter
transaction
,
falloir
spécifier
moteur
InnoDB
de
création
de
table
CREATE
tabler
compte
(
ID
int
,
solder
int
not
null
)
ENGINE
=
InnoDB
;
set
autocommettre
=
;
/
/
désactiver
validation
automatique
requête
.
start
transaction
;
UPDATE
compter
set
solder
=
solde+100
where
id
=
IDVendeur
;
UPDATE
compter
set
solder
=
solde-100
where
id
=
IDAcheteur
;
commettre
;
transaction
avec
PDO
exemple
:
•
début
de
transaction
:
$
bdd-
>
beginTransaction
(
)
;
•
Specification
de
transaction
:
$
bdd-
>
query
(
)
;
$
bdd-
>
query
(
)
;
.
.
validation
/
annulation
de
transaction
:
$
bdd-
>
commettre
(
)
;
$
bdd-
>
rol
back
(
)
;
exercice
écrire
script
php
aller
compter
nombre
de
visiteur
sur
site
.
remarque
:
.
avant
d
’
écrire
script
,
penser
à
choisir
moteur
de
stockage
adéquat
.
.
utiliser
driver
PDO
.
référence
Manuel
PHP
:
•
http
:
/
/
dns-remplacer
cours|cour
en
ligne
:
•
https
:
/
/
dns-remplacer
/
course
/
programmez-en-oriente-objet-en-php
•
http
:
/
/
dns-remplacer
/
dater
/
livre
/
PHP_
dns-remplacé
