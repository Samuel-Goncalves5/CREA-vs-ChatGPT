développement
web
devoir
Info
,
Thomas
FRESSIN
dns-remplacé
@
dns-remplacer
développement
web
plan
de
présentation

Dév
.
front-end
/
back-end

modèle
d
’
exécution
web

HTML

CSS

PHP

MySQL
Thomas
FRESSIN
développement
web
bibliographier

cours|cour
de
Pierre-Nicolas
Clauss
(
LORIA
)

cours|cour
de
Romain
Lebreton
,
Sébastien
gagner
,
Auréline
Quatrehomme

Wikipédia

http
:
/
/
dns-remplacer
/
content
/
html
/

http
:
/
/
dns-remplacer

http
:
/
/
dns-remplacer
/
manual
/
fr
Thomas
FRESSIN
développement
web
DEVELOPPEMENT
FRONT-END
/
BACK-END
Thomas
FRESSIN
FRONT-END
«
développement
web
frontal
»
(
front-end
en
anglais
)
correspondre
production
HTML
,
CSS
JavaScript
d
’
page
internet
d
’
application
qu
’
utilisateur
pouvoir
voir
avec
pouvoir
interagir
.
principal
défi
développement
web
frontal
être
de
adapter
dernier
évolution
;
outil
technique
de
développement
être
en
évolution
constant
.
conception
site
internet
devoir
être
capable
d
’
offrir
bon
ergonomie
de
lecture
en
faciliter
navigation
l
’
obtention
d
’
information
.
objectif
être
d
’
compliquer
lecteur
utiliser
différent
plateforme
de
format
de
taille
varié
.
développeur
devoir
s
’
assurer
site
internet
apparaître
sur
l
’
ensemble
navigateur
Web
plateforme
/
appareil
disponible
.
Hypertext
:
page
devoir
être
relier
à
d
’
autre
page
→
comprendre
l
’
architecture
de
l
’
information
relation
page
Markup
:
contenu
être
intégrer
à
structure
de
page
baliser
règle
pour
traduire
dom
dans
forme
visuel
contrôler
donnée
saisir
dans
formulaire
HTML
règle
de
style
en
cascade
.
être
ensemble
de
règle
décrire
priorité
avec
style
être
rendre
sur
page
interagir
avec
document
HTML
via
dom
BACK-END
en
informatique
,
back-end
(
appeler
arrière-plan
)
être
terme
désigner
étage
de
sortie
de
logiciel
devant
produire
résultat
.
opposer
front-end
(
appeler
frontal
)
être
partie
visible
de
iceberg
.
illustration
concept
:
dans
magasin
,
trouver
arrière-boutique
être
stocker
article
,
bureau
assurer
bon
fonctionnement
magasin
.
agir
back-end
,
de
passer
en
arrière-plan
sans
client
rendre
compte
.
dans
même
magasin
,
retrouver
service
à
clientèle
étalage
.
agir
front-end
,
de
client
voir
.
développement
web
modèle
D
’
exécution
WEB
Thomas
FRESSIN
développement
web
modèle
D
’
exécution
WEB
Internet
requêter
HTTP
(
protocole
de
transfert
hypertexte
)
code
«
web
»
serveur
client
Thomas
FRESSIN
développement
web
modèle
D
’
exécution
WEB
Thomas
FRESSIN
développement
web
modèle
D
’
exécution
WEB
image
pager
flux
vidéo
Thomas
FRESSIN
développement
web
requêter
HTTP
Thomas
FRESSIN
développement
web
requêter
HTTP
Thomas
FRESSIN
développement
web
modèle
D
’
exécution
WEB
ressource
:
●
code
html
(
page
)
●
coder
css
(
style
)
●
coder
js
(
interaction
)
●
image
●
flux
vidéo
●
Cookie
●
Redirection
●
...
principal
code
HTTP
:
●
:
succès
●
:
redirection
perm
.
/
temp
.
●
:
utilisateur
authentifier
●
:
accès
refuser
●
:
page
trouver
●
:
erreur
serveur
●
:
serveur
n
'
avoir
répondre
Thomas
FRESSIN
requête
HTTP
coder
«
web
»
écouter
réseau
(
F12
menu
outil
/
outil
de
développement
onglet
réseau
)
développement
web
modèle
D
’
exécution
WEB
client
serveur
pouvoir
exister
machine
intermédiaire
servir
de
relais
requêter
HTTP
coder
«
web
»
●
●
●
●
proxy
(
serveur
mandataire
)
pouvoir
modifier
réponse
requête
recevoir
pouvoir
gérer
cache
ressource
demander
.
passerelle
(
gateway
)
être
intermédiaire
modifier
protocole
utiliser
.
tunnel
transmettre
requête
réponse
sans
modification
,
mettre
en
cache
.
utilisation
de
protocole
:
SSL
/
TLS
/
...
HTTPS
Thomas
FRESSIN
développement
web
HTML
Hypertext
Markup
Language
/
langage
de
balisage
d
’
hypertexte
Thomas
FRESSIN
développement
web
HTML
:
historique
HTML
HTML
CSS
+
JavaScript
HTML
CSS
XHTML
Tableless
Web
design
ajax
HTML
Thomas
FRESSIN
développement
web
HTML
:
généralité

langage
standardiser
•
date
de
premier
version
:
•
date
de
dernier
version
:
•
N
°
de
version
actuel
:
•
paradigme
•
auteur
•
Développeur
•
version
en
dév
.
•
influencer
par
•
à
influencer
•
écrire
en
•
site
web
•
extension
de
fichier
octobre
décembre
langage
de
balisage
WHATWG
WHATWG
W3C
SGML
Wikicode
,
BBCode
SGML
https
:
/
/
dns-remplacer
/
TR
/
html52
/
HTML
:
.html
,
.htm
XHTML
:
.xhtml
,
.xht
,
.xml
Thomas
FRESSIN
développement
web
HTML
:
généralité

Language
descriptif

de
séquence
de
contrôle

description
de
sémantique
document

balise

balise
ouvrant
:
<
tag
>

balise
fermant
:
<
/
tag
>

deux
en
un
:
<
tag
/
>

attribut
:
<
tag
attribut
=
'
'
valeur
'
'
>

standardiser

W3C
:
http
:
/
/
dns-remplacé

dernier
version
:
HTML
Strict
Transitional
Frameset

validation
automatique
:
http
:
/
/
dns-remplacer

baliser
DOCTYPE
,
sur
premier
ligne
fichier
<
!
DOCTYPE
HTML
public
`
`
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
'
'
'
'
http
:
/
/
dns-remplacer
/
TR
/
html4
/
dns-remplacer
'
'
>
Thomas
FRESSIN
développement
web
HTML
,
XHTML
,
HTML5
...

XHTML

XHTML
être
langage
normer
(
+
contraignant
pour
développeur
)
permettre
(
en
théorie
)
standardisation
de
façon
de
coder
pour
affiche
(
censé
être
)
compatible
sur
navigateur
/
os

exister
version
:
strict
,
Transitional

être
possible
de
vérifier
respect
de
code
sur
validateur
(
de
W3C
par
exemple
)

avis
professionnel
:
falloir
tendre
vers
XHTML
sans
perdre
de
temps
(
compatibilité
os
/
navigateur
être
+
important
)
HTML5

HTML5
être
nouveau
version
HTML5
.

être
nouveau
standard
participer
web
sémantique
(
donner
sens|sen
balise
pour
faciliter
interprétation
informatique
,
interconnexion
donnée
web
,
.
.
)

permettre
en
:
+
de
dynamisme
,
géolocalisation
,
portabilité
mobile
,
...
Thomas
FRESSIN
développement
web
HTML
:
généralité
Encapsulation
de
type
«
pile
»

correct

incorrect
<
avoir
>
<
b
>
<
/
b
>
<
/
avoir
>
<
avoir
>
<
b
>
<
/
avoir
>
<
/
b
>
Structure
arborescent
arbre
minimal
:
<
html
>
<
head
>
<
title
>
...
<
/
title
>
<
/
head
>
<
body
>
...
<
/
body
>
métadonner
donner
page
HTML
<
/
html
>
Thomas
FRESSIN
développement
web
HTML
:
généralité

commentaire
<
!
–
commentaire
--
>
HTML
+
XML
=
>
XHTML
Baliser
fermer
Transformation
en
de
autre
format
HTML
donner
découpage
selon
sémantique
document
Mise
en
forme
visuel
en
HTML
:
lisible
,
de
code
en
CSS
:
lisible
,
regroupement
généralisation
Thomas
FRESSIN
développement
web
HTML
:
espacement

coder
:
,

résultat
:
texte
,
comme\t
j
’
\n
aimer
.
texte
,
.
,
j
’
aimer
...
.
.
.

conclusion
:

suite
de
caractère
de
espacement
équivaloir
à
seul
caractère
de
espacement

expression
\t
\n
être
ignorer

falloir
utiliser
balise
pour
mettre
en
forme
texte
Thomas
FRESSIN
développement
web
HTML
:
mise
en
forme
texte

mettre
en
forme
niveau
paragraphe
<
br
/
>
&
nbsp
;
<
p
>
...
<
/
p
>
<
div
>
...
<
/
div
>
<
pre
>
...
<
/
pre
>
aller
à
ligne
insérer
espace
paragraphe
cadre
être
reproduire

mise
en
forme
niveau
phraser
<
em
>
...
<
/
em
>
<
strong
>
...
<
/
strong
>
<
citer
>
...
<
/
citer
>
<
q
>
...
<
/
q
>
<
blockquote
>
...
<
/
blockquote
>
<
code
>
...
<
/
code
>
<
abbr
>
...
<
/
abbr
>
<
acronym
>
...
<
/
acronym
>
<
sup
>
...
<
/
sup
>
<
sub
>
...
<
/
sub
>
<
big
>
...
<
/
big
>
<
small
>
...
<
/
small
>
mettre
en
valeur
(
italique
)
mettre
en
valeur
fort
(
gras
)
citation
court
(
gras
italique
)
citation
court
(
entre
guillements
)
citation
longue
(
gras
)
extraire
de
code
source
(
gras
italique
petit
)
abréviation
(
gras
italique
)
acronyme
(
gras
italique
)
mettre
en
exposer
mettre
en
indice
petit
de
autre
:
<
dfn
>
,
<
samp
>
,
<
kbd
>
,
<
var
>
,
<
ins
>
,
<
del
>
,
...
développement
web
HTML
:
lien
hypertextes

balise
lien
hypertextes
<
avoir
>
...
<
/
avoir
>
lien
<
avoir
href
=
'
'
lien
'
'
>
texte
<
/
avoir
>
lien
externe
<
avoir
href
=
'
'
mailto
:
address
@
dns-remplacer
'
'
>
mail
<
/
avoir
>
lien
courriel
<
avoir
href
=
'
'
javascript
:
fonction
(
)
'
'
>
texte
<
/
avoir
>
lien
javascript
<
avoir
name
=
'
'
ancre
'
'
/
>
<
avoir
href
=
'
'
lien
#
ancre
'
'
>
texte
<
/
avoir
>
lien
interne
(
ancre
)
<
avoir
...
target
=
'
'
_blank
'
'
>
texte
<
/
avoir
>
nouveau
onglet

balise
lien
hypertextes

possibilité
de
lien
sur
image

choisir
(
s
)
bon
(
s
)
mot
(
s
)
pour
servir
de
lien

lier
page
de
manière
cohérent
Thomas
FRESSIN
développement
web
HTML
:
lien
hypertextes

adresse
absolu
d
’
lien
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
/
'
'
>
T
.
FRESSIN
<
/
avoir
>
<
avoir
href
=
'
'
dns-remplacer
/
fr
/
dns-remplacer
'
'
>
T
.
FRESSIN
<
/
avoir
>

adresse
relatif
d
’
lien
page
‘
dns-remplacer
’
être
dans
dossier
avoir
.
J
’
avoir
page
‘
dns-remplacer
’
dans
dossier
a2
.
pour
créer
lien
index
vers
toto
:
<
avoir
href
=
'
'
a2
/
dns-remplacer
'
'
>
lien
<
/
avoir
>
page
‘
dns-remplacer
’
être
dans
dossier
a2
.
J
’
avoir
page
‘
dns-remplacer
’
dans
dossier
b
.
pour
créer
lien
toto
vers
tata
:
<
avoir
href
=
«
.
.
/
b
/
dns-remplacer
'
'
>
lien
<
/
avoir
>
Thomas
FRESSIN
développement
web
HTML
:
liste

lister
ordonner
<
ol
>
<
li
>
articler
<
/
li
>
<
li
>
articler
<
/
li
>
<
li
>
articler
<
/
li
>
<
/
ol
>

liste
non-ordonné
<
ul
>
<
li
>
articler
<
/
li
>
<
li
>
articler
<
/
li
>
<
li
>
articler
<
/
li
>
<
/
ul
>

liste
de
définition
<
dl
>
<
dt
>
articler
<
/
dt
>
<
dd
>
définition
<
/
dd
>
<
dt
>
articler
<
/
dt
>
<
dd
>
définition
<
/
dd
>
<
/
dl
>
Thomas
FRESSIN
développement
web
HTML
:
tableau

tableau
<
tabler
border
=
'
'
'
'
>
<
caption
>
titre
tableau
<
/
caption
>
<
tr
>
<
th
>
titre
A1
<
/
th
>
<
th
>
titre
A2
<
/
th
>
<
th
>
titre
A3
<
/
th
>
<
th
>
titre
A4
<
/
th
>
<
/
tr
>
<
tr
>
<
th
>
titre
B1
<
/
th
>
<
td
>
valeur
B2
<
/
td
>
<
td
>
valeur
B3
<
/
td
>
<
td
>
valeur
B4
<
/
td
>
<
/
tr
>
<
/
table
>

attribut
utile
rowspan
=
'
'
x
'
'
colspan
=
'
'
x
'
'
align
valign
fusionner
x
ligner
fusionner
x
colonne
alignement
horizontal
dans
th
,
tr
,
td
alignement
vertical
dans
th
,
tr
,
td
Thomas
FRESSIN
développement
web
HTML
:
image

imager
<
img
src
=
'
'
path_
dns-remplacé
'
'
alt
=
'
'
texte
de
remplacement
'
'
title
=
'
'
texte
à
afficher
'
'
/
>

spécification

format
accepter
image
:
jpeg
,
jpg
,
png
,
gif
,
svg
<
img
src
=
'
'
dns-remplacer
'
'
srcset
=
'
'
dns-remplacer
'
'
/
>

principal
attribut
:






src
align
alt
title
width
height
Thomas
FRESSIN
développement
web
HTML
:
caractère
spécial

codage
de
page

travailler
format
ISO-8859-1
(
Latin-1
Europe
occidental
)
Caractères
spécial

accentuation
symbole
être
caractère
spécial
.

coder
(
en
ISO
en
HTML
)
,
caractère
être
afficher
en
sortie
.
code
HTML
&
eacute
;
&
egrave
;
&
acirc
;
&
Auml
;
&
ccdeil
;
&
amp
;
&
euro
;
&
quot
;
...
code
ISO
&
#
;
&
#
;
&
#
;
&
#
;
&
#
;
&
#
;
&
#
;
&
#
;
&
#
;
...
Thomas
FRESSIN
rendre
é
è
â
Ä
ç
&
€
«
‰
...
développement
web
HTML
:
métadonner
<
head
>
<
title
>
titre
<
/
title
>
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
<
meta
name
=
'
'
description
'
'
lang
=
'
'
fr
'
'
content
=
'
'
description
'
'
/
>
name
=
'
'
keywords
'
'
lang
=
'
'
fr
'
'
content
=
'
'
keywords
FR
'
'
/
>
name
=
'
'
publisher
'
'
content
=
'
'
nom
prenom
'
'
/
>
name
=
'
'
revisit-after
'
'
content
=
'
'
days
'
'
/
>
name
=
'
'
reply-to
'
'
content
=
'
'
courriel
'
'
/
>
name
=
'
'
author
'
'
lang
=
'
'
fr
'
'
content
=
'
'
nom
prenom
'
'
/
>
name
=
'
'
robot
'
'
content
=
'
'
all
'
'
/
>
name
=
'
'
distribution
'
'
content
=
'
'
global
'
'
/
>
name
=
'
'
identifier-url
'
'
content
=
'
'
url
'
'
/
>
name
=
'
'
date-creation-yyyymmdd
'
'
content
=
'
'
'
'
/
>
name
=
'
'
date-revision-yyyymmdd
'
'
content
=
'
'
'
'
/
>
name
=
'
'
verify-v1
'
'
content
=
'
'
code
'
'
/
>
<
link
rel
=
'
'
shortcut
icon
'
'
href
=
'
'
http
:
/
/
url_absoudre
/
dns-remplacer
'
'
/
>
<
script
type
=
'
'
text
/
javascript
'
'
>
...
<
/
script
>
<
styler
type
=
'
'
text
/
css
'
'
>
...
<
/
style
>
<
/
head
>
Thomas
FRESSIN
développement
web
HTML5
~
=
HTML
+
CSS
+
JS
Thomas
FRESSIN
développement
web
HTML
:
nouveau
possibilité










sémantique
&
balisage
CSS
Graphics
/
Multimedia
vidéo
,
canvas
Offline
/
storage
BDD
,
stockage
offline
,
objet
,
...
Realtime
/
communication
Evénements
,
notification
,
...
file
/
hardware
Access
drag
&
drop
,
géoloc
Thomas
FRESSIN
développement
web
sémantique
&
balisage
Thomas
FRESSIN
développement
web
balise
simple
explicite
<
!
DOCTYPE
html
>
<
html
lang
=
'
'
fr
'
'
>
<
header
>
...
<
/
header
>
<
nav
>
...
<
/
nav
>
<
head
>
<
meta
charset
=
'
'
UTF-8
'
'
>
...
<
/
head
>
<
section
>
<
article
>
...
<
/
article
>
<
article
>
...
<
/
article
>
<
/
section
>
<
aside
>
...
<
/
aside
>
<
figurer
>
...
<
/
figure
>
<
footer
>
...
<
/
footer
>
Thomas
FRESSIN
développement
web
Thomas
FRESSIN
développement
web
de
meilleur
tags
sémantique
<
!
DOCTYPE
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
<
meta
charset
=
'
'
UTF-8
'
'
>
...
<
/
head
>
<
body
>
<
header
>
<
hgroup
>
<
h@card@
>
page
title
<
/
h1
>
<
h@card@
>
page
subtitle
<
/
h2
>
<
/
hgroup
>
<
/
header
>
<
nav
>
<
ul
>
navigation
...
<
/
ul
>
<
/
nav
>
<
section
>
<
article
>
<
header
>
<
h@card@
>
Title
<
/
h1
>
<
/
header
>
<
section
>
content
...
<
/
section
>
<
/
article
>
<
article
>
<
header
>
<
h@card@
>
Title
<
/
h1
>
<
/
header
>
<
section
>
content
...
<
/
section
>
<
/
article
>
<
/
section
>
Thomas
FRESSIN
<
aside
>
top
links
...
<
/
aside
>
<
figurer
>
<
img
src
=
'
'
...
'
'
/
>
<
figcaption
>
Chart
<
/
figcaption
>
<
/
figure
>
<
footer
>
copyright
©
<
time
datetime
=
'
'
'
'
>
<
/
time
>
.
<
/
footer
>
<
/
body
>
développement
web
lister
autocompléter
<
input
list
=
'
'
car
'
'
/
>
<
datalist
id
=
'
'
car
'
'
>
<
option
valoir
=
'
'
BMW
'
'
/
>
<
option
valoir
=
'
'
Ford
'
'
/
>
<
option
valoir
=
'
'
Volvo
'
'
/
>
<
/
datalist
>
Thomas
FRESSIN
développement
web
balise
sémantique
Thomas
FRESSIN
développement
web
relation
lien
décrire
Thomas
FRESSIN
développement
web
Microdata
Thomas
FRESSIN
développement
web
nouveau
type
de
formulaire
Thomas
FRESSIN
développement
web
formulaire
pour
mobile
Thomas
FRESSIN
développement
web
validation
code
https
:
/
/
dns-remplacer
/
Thomas
FRESSIN
développement
web
CSS
Cascading
styler
Sheets
/
feuille
de
style
en
cascade
Thomas
FRESSIN
développement
web
CSS
:
utilité

utilité

séparer
forme
fond

HTML
décrire
fond

CSS
décrire
forme

centralisation
de
l
’
aspect
visuel

optimiser
modification

suffire
de
modifier
style
à
endroit
pour
l
’
appliquer

factoriser
/
rendre
lisible
code
Thomas
FRESSIN
développement
web
CSS
:
décrire
classe
?

description
interne
à
page
:

dans
métadonnée
:
<
head
>
<
style
type
=
'
'
text
/
css
'
'
>
<
!
-tous_les_styles_ici
--
>
<
/
style
>
<
/
head
>

dans
corps
de
page
:
<
body
>
<
span
style
=
'
'
un_style
'
'
>
...
<
/
style
>
<
/
body
>

description
externe
(
dans
fichier
css
)
:
<
head
>
<
link
rel
=
'
'
stylesheet
'
'
type
=
'
'
text
/
css
'
'
href
=
'
'
dns-remplacer
'
'
>
<
/
head
>
Thomas
FRESSIN
développement
web
CSS
:
format
d
’
classe

format
:
classe
{
attribut
:
valeur
;
[
attribut
:
valeur
;
...
]
}
/
/
classe
pouvoir
correspondre
à
balise
html
(
style
s
’
appliquer
à
balise
)
/
/
classe
s
’
appliquer
à
balise
html
spécifique
,
précéder
nom
de
classe
d
’
point

exemple
classique
de
classe
:
body
{
font-family
:
Arial
,
Helvetica
,
sans-serif
;
font-size
:
12px
;
margin
:
0px
;
}
.td_menu
{
height
:
25px
;
width
:
380px
;
vertical-align
:
middle
;
text-align
:
left
;
}
a.menu
:
link
,
a.menu
:
visited
,
a.menu
:
actif
,
a.menu
:
hover
{
color
:
#
6A0055
;
letter-spacing
:
3px
;
text-decoration
:
none
;
}
Thomas
FRESSIN
développement
web
CSS
:
utilité
concret

code
sans
CSS
(
)
<
html
>
<
head
/
>
<
body
>
<
div
style
=
'
'
color
:
#
6A0055
;
font-family
:
Arial
;
'
'
>
<
strong
>
text
<
/
strong
>
<
/
div
>
<
div
style
=
'
'
color
:
#
6A0055
;
font-family
:
Arial
;
'
'
>
<
strong
>
text
<
/
strong
>
<
/
div
>
<
div
style
=
'
'
color
:
#
6A0055
;
font-family
:
Arial
;
'
'
>
<
strong
>
text
<
/
strong
>
<
/
div
>
<
div
style
=
'
'
font-family
:
Arial
;
'
'
>
text
<
/
div
>
<
/
body
>
<
/
html
>

code
avec
CSS
(
)
<
html
>
<
head
>
<
style
type
=
'
'
text
/
css
'
'
>
<
!
-.style1
{
color
:
#
6A0055
;
font-family
:
Arial
;
font-weight
:
bold
;
}
.style2
{
font-family
:
Arial
;
}
--
>
<
/
style
>
<
/
head
>
<
body
>
<
div
=
'
'
style1
'
'
>
text
<
/
div
>
<
div
=
'
'
style1
'
'
>
text
<
/
div
>
<
div
=
'
'
style1
'
'
>
text
<
/
div
>
<
div
=
'
'
style2
'
'
>
text
<
/
div
>
<
/
body
>
<
/
html
>
Thomas
FRESSIN
développement
web
CSS
Thomas
FRESSIN
développement
web
sélecteur
CSS
Thomas
FRESSIN
développement
web
Webfonts
Thomas
FRESSIN
développement
web
Multi-colonnes
Thomas
FRESSIN
développement
web
opacité
Thomas
FRESSIN
développement
web
teindre
,
luminosité
,
saturation
(
TLS
)
Thomas
FRESSIN
développement
web
angle
arrondir
Thomas
FRESSIN
développement
web
dégrader
Thomas
FRESSIN
développement
web
ombrage
Thomas
FRESSIN
développement
web
fondre
multiple
Thomas
FRESSIN
développement
web
PHP
Hypertext
Preprocessor
Thomas
FRESSIN
développement
web
PHP
:
généralité

langage
créer
en

version
actuel
:
(
septembre
)

langage
de
script

langage
interpréter

présence
de
interpréteur
côté
serveur

intégrer
code
HTML

syntaxe
proche
C
java

interface
simple
avec
de
SGBD
Thomas
FRESSIN
développement
web
concurrent
de
PHP
Thomas
FRESSIN
développement
web
PHP
:
modèle
d
’
exécution
.
client
demander
page
PHP
.
serveur
web
exécuter
code
de
page
2a
.
lancement
de
interpréteur
2b
.
exécution
code
.
serveur
web
renvoyer
résultat
de
exécution
.
client
afficher
résultat
pour
client
,
être
impossible
de
voir
code
PHP
.
seul
résultat
de
exécution
être
récupérer
par
client
Thomas
FRESSIN
développement
web
PHP
:
statique
dynamique
page
statique
(
côté
serveur
)
:
affichage
(
côté
client
)
:
<
html
>
<
head
>
<
title
>
page
statique
<
/
title
>
<
/
head
>
<
body
>
être|sommer
.
<
/
body
>
<
/
html
>
être|sommer
.
page
dynamique
(
côté
serveur
)
:
<
html
>
<
head
>
<
title
>
page
statique
<
/
title
>
<
/
head
>
<
body
>
être|sommer
<
?
php
echo
date
(
'
d-m
-Y
'
)
;
?
>
.
<
/
body
>
<
/
html
>
Thomas
FRESSIN
être|sommer
.
/
/
date
jour
afficher
développement
web
PHP
:
élément
langage

code
PHP
intégrer
dans
HTML
de
façon
:
html
<
?
php
...
?
>
html

instruction
PHP
finir
par
point
virguler
instruction_php
;

commentaire
pouvoir
s
’
écrire
de
façon
:
/
*
commentaire
*
/
/
/
commentaire
(
commentaire
bout-en-bout
)
(
commentaire
jusqu
’
en
fin
de
ligne
)
Thomas
FRESSIN
développement
web
PHP
:
variable

variable
être
préfixer
par
signe
dollar
$
$
nom_variable

nom
suivre
règle
classique
(
d
’
espace
,
sensible
à
casse
)

type
variable
n
’
avoir
besoin
d
’
être
déclarer
(
typage
implicite
)
$
my_var_03
=
;
/
/
entier
$
my_var_03
=
`
`
pif
'
'
;
/
/
,
chaine

attention
faute
de
frappe
dans
nom
de
variable

fonction
sur
variable
:
isset
(
$
var
)
:
renvoyer
true
$
var
exister
empty
(
$
var
)
:
renvoyer
true
$
var
être
vide
unset
(
$
var
)
:
détruire
$
var
Thomas
FRESSIN
développement
web
PHP
:
type
variable

entier
:

flottant
:

chaîne
:
$
var
=
;
$
var
=
;
$
var
=
'
'
'
'
;
$
var
=
'
'
;

booléen
:
$
var
=
false
;
$
var
=
true
;

fonction
de
test
:
is_integer
(
$
var
)
,
is_string
(
$
var
)
,
...
:
renvoyer
true
$
var
être
entier
,
chaîne
,
.
.
.

définir
constante
à
aide
de
commande
define
define
(
`
`
pi
'
'
,
)
;
utiliser
(
sans
$
)
:
echo
(
pi
)
;
Thomas
FRESSIN
développement
web
PHP
:
chaîne
de
caractère

délimiter
par
`
`
(
contenu
interpréter
)

délimiter
par
'
(
contenir
interpréter
)

un
pouvoir
contenir
autre

backslash
$
var
=
'
'
e
'
'
;
echo
$
var
=
'
e
'
;
echo
$
var
=
'
'
citation
$
var
=
'
'
citation

concaténation
:
echo
$
v1
.
$
v@card@
;
echo
$
v1
.
'
'
`
`
.
$
v2
;
$
v@card@
=
'
'
'
'
;
$
v@card@
=
'
'
'
'
;

accès
à
caractère
:
$
date
=
'
'
'
'
;

longueur
de
chaîne

Sous-chaîne
avec
substr
(
$
str
,
start
[
,
len
]
)

effacer
espace
début
/
fin
:
$
var
=
'
'
abc
`
`
;
Thomas
FRESSIN
echo
echo
echo
echo
echo
'
'
pal
$
var
'
'
;
'
pal
$
var
'
;
:
'
ok
'
'
'
;
:
\
'
'
ok\
'
'
'
'
;
$
date
{
}
.
$
date
{
}
;
strlen
(
$
date
)
;
substr
(
$
date
,
)
;
substr
(
$
date
,
,
)
;
trim
(
$
var
)
;
développement
web
PHP
:
tableau

tableau
:
$
tab
=
array
(
`
`
foo
'
'
=
>
'
'
bar
'
'
,
=
>
true
)
;
$
tab
[
`
`
foo
'
'
]
=
'
'
bar
'
'
;
$
tab
[
]
=
true
;
<
?
php
/
/
création
de
tableau
simple
.
$
array
=
array
(
,
,
,
,
)
;
print_r
(
$
array
)
;
/
/
effacer
élément
,
concerner
tableau
:
foreach
(
$
array
avoir
$
i
=
>
$
value
)
{
unset
(
$
array
[
$
i
]
)
;
}
print_r
(
$
array
)
;
/
/
ajout
de
élément
(
noter
nouveau
clé
être
,
)
.
$
array
[
]
=
;
print_r
(
$
array
)
;
/
/
Ré-indexation
:
$
array
=
array_values
(
$
array
)
;
$
array
[
]
=
;
print_r
(
$
array
)
;
?
>
Thomas
FRESSIN
/
/
ligne
identique
Array
(
[
]
[
]
[
]
[
]
[
]
)
Array
(
)
Array
(
[
]
)
Array
(
[
]
[
]
)
=
>
=
>
=
>
=
>
=
>
=
>
=
>
=
>
développement
web
PHP
:
opérateur
arithmétique
:
affectation
:
Affectaison
:
echo
(
(
)
*
)
/
;
echo
%
;
$
var
=
;
echo
$
var++
;
$
var
=
;
echo
$
var
--
;
/
/
affiche
echo
$
var
=
;
$
var
=
'
aa
'
;
echo
$
var
.
=
'
b
'
;
$
var
=
;
echo
$
var+
=
;
$
var
=
;
echo
$
var-
=
;
$
var
=
;
echo
$
var
*
=
;
$
var
=
;
echo
$
var
/
=
;
$
var
=
;
echo
$
var
%
=
;
=
=
,
=
=
=
/
/
égal
,
identique
!
=
,
<
>
,
!
=
=
/
/
diff
,
diff
,
diff
même
type
<
,
>
,
>
=
,
<
=

logique
:
and
,
&
&
or
,
|
|
xor
!

conditionnel
:
...
?
...
:
...
Thomas
FRESSIN
développement
web
PHP
:
conditionnel
boucle
$
var
=
if
(
$
var
<
)
{
echo
`
`
h1
'
'
;
}
elseif
(
$
var
<
)
{
echo
`
`
h2
'
'
;
}
else
{
echo
`
`
h3
'
'
;
}
$
tab
[
]
=
;
$
tab
[
]
=
;
$
tab
[
]
=
'
'
coucou
'
'
;
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
echo
$
tab
[
$
i
]
;
}
$
var
=
'
'
coucou
'
'
;
switch
(
$
var
)
{
case
`
`
maman
'
'
:
echo
`
`
h1
'
'
;
break
;
case
`
`
papa
'
'
:
echo
`
`
h2
'
'
;
break
;
default
:
echo
`
`
h3
'
'
;
break
;
}
$
i
=
;
while
(
$
i
<
)
{
$
i++
;
echo
$
i
;
}
Thomas
FRESSIN
développement
web
PHP
:
fonction
Thomas
FRESSIN
développement
web
PHP
:
exemple
de
fonction
function
math
(
$
nb
)
{
$
nb++
;
$
nb++
;
return
$
nb
--
;
}
echo
math
(
)
;
echo
math
(
)
;
function
test
(
$
var
)
{
switch
(
$
var
)
{
case
'
maman
'
:
echo
'
mère
'
;
break
;
caser
‘
papa
'
:
echo
'
père
'
;
break
;
default
:
echo
'
définir
'
;
break
;
}
}
echo
test
(
'
maman
'
)
;
function
fonc
(
)
{
global
$
var
;
$
var
=
;
}
$
var
=
;
fonc
(
)
;
echo
$
var
;
Thomas
FRESSIN
développement
web
HTML
&
PHP
:
utilisation
formulaire
OK
formulaire
envoyer
.
page
de
résultat
page
de
formulaire
Thomas
FRESSIN
développement
web
transmettre
donnée
entre
page
Web
développement
web
HTML
&
PHP
:
utilisation
formulaire
OK
formulaire
envoyer
.
page
de
résultat
page
de
formulaire

méthode
de
dialogue
possible
:

GET
:
donnée
encoder
dans
URL
(
persistant
)
http
:
/
/
dns-remplacer
/
search
/
dns-remplacer
?
q
=
fnac

POST
:
donnée
persistant
cacher
(
de
navigation
avec
précédent
/
suivre
)

L
’
objectif
dans
cas
être
de
récupérer
donnée
envoyé
:

echo
$
_GET
[
'
q
'
]
;

echo
$
_POST
[
'
q
'
]
;

echo
$
_REQUEST
[
'
q
'
]
;
/
/
affiche
GET
POST
Thomas
FRESSIN
développement
web
avantager
&
inconvénient
méthode
méthode
GET
:
●
prêter
à
site
en
développement
pouvoir
contrôler
valeur
nom
de
variable
formulaire
.
●
être
facile
de
créer
lien
<
avoir
>
vers
page
traiter
formulaire
en
méthode
GET
d
’
envoyer
donnée
via
query
string
.
méthode
POST
:
●
●
être
propre
valeur
être
afficher
dans
barre
d
’
adresse
navigateur
attention
:
information
être
cacher
pour
Thomas
FRESSIN
développement
web
HTML
&
PHP
:
utilisation
formulaire

exemple
de
formulaire
:
<
form
action
=
'
'
page_
dns-remplacé
'
'
method
=
'
'
POST
'
'
>
Prenom
:
<
input
type
=
'
'
text
'
'
name
=
'
'
prenom
'
'
/
>
<
br
/
>
nom
:
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>

différent
type
balise
input
:

text

password
file

checkbox

button

hidden

radio

reset

submit
zone
de
texte
sur
seul
ligne
,
avec
achage
de
étoile
sélection
de
fichier
caser
à
cocher
bouton
simple
(
de
action
sans
javascript
)
champ
`
`
texte
'
'
cacher
bouton
de
option
bouton
de
remise
à
zéro
bouton
de
soumission
Thomas
FRESSIN
développement
web
PHP
:
structure
de
contrôle
Thomas
FRESSIN
développement
web
PHP
:
session

vouloir
garder
de
information
entre
page
:

Login
/
Password

préférence
de
navigation

sélection
de
produit
à
acheter
(
panier
,
...
)
utiliser
session
PHP
.

session
permettre
de
stocker
information
côté
serveur

être
identifier
par
numéro
rester
valide
visiteur
rester
connecter

numéro
être
transmettre
serveur
dans
URL
,
dans
cookie

donnée
placer
récupérer
dans
$
_SESSION
,
pour
formulaire
echo
$
_SESSION
[
'
login
'
]
=
$
_POST
[
'
login
'
]
;

session
utiliser
cookies
:
falloir
ouvrir
session
avant
de
afficher
être
.
session
exister
dès
être
créer
jusqu
'
à
être
détruire
.
création
(
réouverture
)
:
session_start
(
)
destruction
:
session_destroy
(
)
note
:
session
autodétruire
après
temps
(
glmt
min
)
Thomas
FRESSIN
développement
web
PHP
orienter
objet
exemple
Thomas
FRESSIN
développement
web
PHP
orienter
objet
exemple
(
/
)
Thomas
FRESSIN
développement
web
PHP
orienter
objet
exemple
(
/
)
Thomas
FRESSIN
développement
web
MySQL
Thomas
FRESSIN
développement
web
SQL
:
définition

SQL
être
langage
puissant
de
requête

permettre
de
faire
demande
complexe
à
BDD
dans
langage
proche
de
anglais

utiliser
pour
récupérer
,
ajouter
,
supprimer
créer
donnée
dans
BDD
Les
BDD
utiliser
table
:

ligne
être
enregistrement
de
champ
avec
valeur

requête
faire
sur
champ

MySQL
être
SGBDD
puissant

être
utiliser
dans
cadre
BDD
sur
Internet
(
site
,
blogs
,
etc
.
)

C
’
être
application
libre
de
droit
,
populaire

phpmyadmin
être
outil
de
gestion
de
BDD
embarquer
SBGDD
MySQL
Thomas
FRESSIN
développement
web
SQL
:
requête
basique

requête
interrogatif
select
*
FROM
PersosXVI
;

requête
sélectif
select
nom
,
Prenom
FROM
PersosXVI
;
Id

requête
restrictif
select
*
FROM
PersosXVI
WHERE
Prenom
=
'
Jean
'
;

décompter
select
count
(
*
)
FROM
PersosXVI
;

Somme
select
SUM
(
age
)
FROM
PersosXVI
;
pouvoir
mélanger
type
de
requête
Thomas
FRESSIN
développement
web
SQL
:
requête
complexe
Id

requêter
croiser
select
p.Nom
,
p.Activite
FROM
PersosXVI
p
,
RoiXVI
r
WHERE
p.Roi
=
r.Id
AND
r.Nom
=
'
Francois
Ier
'
ORDER
by
p.Nom
DESC
;
pouvoir
mélanger
type
de
requête
Thomas
FRESSIN
développement
web
SQL
:
manipulation
donnée
Id

requête
de
insertion
insert
INTO
PersosXVI
(
nom
,
Prenom
,
age
,
Activite
)
valoir
(
'
parer
'
,
'
Ambroise
'
,
,
'
chirurgien
'
)
;
Requête
de
mise
à
jour
UPDATE
PersosXVI
set
age
=
WHERE
nom
=
'
cartier
'
;
Requête
de
suppression
DELETE
FROM
PersosXVI
WHERE
Prenom
=
'
Jean
'
;
Thomas
FRESSIN
développement
web
MySQL
&
PHP
:
manipulation
donnée

connexion
$
mysqli
=
new
mysqli
(
`
`
localhost
'
'
,
`
`
user
'
'
,
`
`
password
'
'
,
`
`
base
'
'
)
;
/
/
$
cnx
être
false
en
cas
de
erreur
de
connexion

choix
de
base
mysqli_select_db
(
$
mysqli
,
`
`
base
'
'
)
;

exécution
$
result
=
$
mysqli-
>
query
(
`
`
select
Name
FROM
City
LIMIT
'
'
)
/
/
$
resultat
avoir
pour
valeur
false
en
cas
de
erreur

récupération
résultat
$
row
=
$
result-
>
fetch_object
(
)
;
echo
$
row-
>
prenom
;
/
/
seul
résultat
à
afficher
while
(
$
row
=
$
result-
>
fetch_object
(
)
)
{
$
results
[
]
=
$
row
;
}
/
/
ligne
à
afficher
Thomas
FRESSIN
développement
web
SQL
:
fonction
annexe

nombre
de
résultat
d
’
select
echo
$
mysqli-
>
num_rows
;

nombre
de
ligne
affecter
par
insert
,
UPDATE
DELETE
echo
$
mysqli-
>
affected_rows
;

dernier
incrément
d
’
champ
echo
$
mysqli→insert_id
;
protection
chaîne
de
caractère
:
$
city
=
$
mysqli-
>
real_escape_string
(
$
city
)
;
fermeture
de
connexion
:
mysqli_close
(
$
mysqli
)
;
Thomas
FRESSIN
