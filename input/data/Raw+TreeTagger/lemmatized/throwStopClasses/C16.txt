programmation
Web
:
PHP
avec
aimable
autorisation
de
Jérôme
CUTRONA
PHP
:
langage
de
script
pour
Web

Qu
’
être
PHP
?







langage
de
script
.
utiliser
coter
serveur
acronyme
récursif
:
PHP
:
Hypertext
Preprocessor
créer
en
par
Rasmus
Lerdorf
extension
utiliser
sur
serveur
Web
(
%
)
langage
multi
plate-forme
(
UNIX
/
Windows
...
)
open
source
verser
actuel
(
source
dns-remplacé
)
:

PHP4
(
%
en
octobre
)

PHP5
(
%
en
octobre
)
:
:
programmation
Web
utilité
utilisation
de
PHP

création
de
page
HTML
«
dynamique
»
,
fabriquer
à
volée
,
construire
à
demande

interface
entre
serveur
Web
base
de
donnée

création
d
’
application
Web
:
:
programmation
Web
principal
fonctionnalité
de
PHP









manipulation
de
chaîne
tableau
calendrier
/
date
/
heure
fonction
mathématique
accès
système
de
fichier
manipulation
d
’
image
HTTP
/
FTP
/
IMAP
base
de
donnée
(
oracle
,
MySQL
,
...
)
XML
...
:
:
programmation
Web
fonctionnement
de
PHP
requêter
HTTP
client
(
(
(
port
dns-remplacé
)
)
rendre
localisation
connexion
exécution
fermeture
graphique
de
sur
de
code
code
connexion
serveur
ressource
PHP
PHP
donner
dans
envoi
résultat
client
localisation
rendre
exécution
fermeture
connexion
requêter
graphique
HTTP
de
sur
de
code
code
connexion
serveur
ressource
client
PHP
PHP
donnée
(
port
dns-remplacé
dans80
)
)
fichier
fichier
envoi
résultat
client
=
=
réponse
réponse
HTTP
HTTP
client
client
GET
navigateur
GET
/
dns-remplacer
/
dns-remplacer
HTTP
/
HTTP
/
réseau
•HTML
réseau
•JavaScript
•CSS
protocole
protocole
HTTP
HTTP
exécution
exécution
d
’
d
’
programme
programmer
sur
sur
serveur
serveur
construction
de
réponse
construction
de
réponse
<
<
html
>
html
>
<
<
head
head
>
>
serveur
serveur
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
serveur
Web
.html
<
<
body
body
>
>
hello
hello
world
world
<
/
<
/
body
body
>
>
.php
<
/
<
/
html
html
>
>
.jpg
moduler
PHP
MySQL
:
:
<
?
php
<
?
php
echo
dns-remplacer
echo
<
<
<
<
<
<
HTML
HTML
dns-remplacer
<
<
html
>
html
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
hello
hello
world
world
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
HTML
;
HTML
;
programmation
Web
fonctionnement
de
PHP
client

serveur
.
.
.
.
.
connexion
TCP
sur
serveur
(
port
)
requête
HTTP
client
(
mon_
dns-remplacer
)
localisation
de
ressource
exécution
code
PHP
envoi
résultat
de
l
’
exécution
client
=
réponse
HTTP
.
fermeture
de
connexion
.
rendre
graphique
donnée
(
HTML
,
image
,
...
)
:
:
programmation
Web
programme
en
PHP
délimitation
code
PHP
dans
fichier
.php
:

<
?
php
code
PHP
?
>
fermeture
fermeture
optionnel
optionnel

<
script
language
=
'
'
PHP
'
'
>
confusion
confusion
avec
avec
JavaScript
JavaScript


àà
bannir
bannir
!
!
!
!
code
PHP
<
/
script
>


<
?
code
PHP
?
>
<
%
code
PHP
%
>
:
:
dépendre
dépendre
de
de
configuration
configuration
short_open_tag
short_open_tag
serveur
serveur
asp_tags
asp_tags


àà
bannir
bannir
!
!
!
!
programmation
Web
Eléments
de
syntaxe
PHP

syntaxe
de
PHP
ressembler
à
de
famille
'
'
C
'
'
(
C
,
C++
,
java
,
...
)

instruction
terminer
par
`
`
;
'
'

commentaire
:
/
*
jusqu
’
prochain
*
/
/
/
jusqu
’
à
fin
de
ligne
#
jusqu
’
à
fin
de
ligne
:
:
programmation
Web
variable
type
de
donnée

identificateur
commencer
par
`
`
$
'
'

affectation
être
réaliser
grâce
à
`
`
=
'
'

numérique
entier
:
réel
:

chaîne
:
`
`
hello
'
'
’
bonjour
’

booléen
:
true
,
false
(
PHP
)

tableau
:
$
tab
[
]
=

objet
(
PHP4
,
PHP5
)

ressource

NULL

type
d
’
variable
être
dynamique
être
déterminer
par
valeur
être
affecter
:
:
programmation
Web
Typage
faible
.
exemple
/
/
de
déclaration
de
variable
$
test
=
;
/
/
réel
$
test
=
;
/
/
entier
$
test
=
array
(
)
;
/
/
tableau
$
test
=
`
`
'
'
;
/
/
chaîne
echo
$
test
;
/
/
:
:
programmation
Web
Typage
automatique
.
exemple
$
nombre1
$
nombre2
$
chaine1
$
chaine2
=
=
=
=
;
;
'
'
'
'
;
'
coucou
'
;
/
/
/
/
/
/
/
/
réel
entier
chaîner
chaîne
$
total
=
$
nombre1
+
$
nombre2
+
$
chaine1
+
$
chaine2
;
'
'
'
'
'
'
'
'
echo
$
total
;
/
/
réel
:
:
'
coucou
'
'
coucou
'
programmation
Web
chaîne
de
caractère
substitution
de
variable
dans
chaîne

guillemet
simple


$
avoir
=
'
chaîne
'
;
$
b
=
'
$
avoir
'
;

guillemet
double


$
avoir
=
'
'
chaîne
'
'
;
$
b
=
'
'
$
avoir
'
'
;

syntaxe
HereDoc


:
:
$
avoir
=
'
'
chaîne
'
'
;
$
b
=
<
<
<
MARQUE_DE_FIN
$
avoir
sur
deux
ligne
;
-
)
MARQUE_DE_FIN
;
chaîne
chaîne
un
$
avoir
$
avoir
chaîne
chaîner
un
chaîne
chaîner
chaîne
chaîner
un
chaîne
chaîner
sur
sur
deux
deux
ligne
ligne
;
-
)
;
-
)
programmation
Web
concaténation
de
chaîne


permettre
d
’
assembler
chaîne
réaliser
grâce
à
l
’
opérateur
:
.
`
`
bonjour
`
`
.
`
`
Marcel
'
'

valoir
`
`
bonjour
Marcel
'
'
$
nb
=
*
;
'
'
acheter
`
`
.
$
nb

valoir
:
:
.
`
`
œuf
'
'
'
'
acheter
œuf
'
'
programmation
Web
commande
echo

permettre
d
’
envoyer
texte
navigateur
client
(
«
écrire
»
page
format
HTML
résulter
de
l
’
interprétation
de
PHP
)


echo
`
`
bonjour
'
'
;
$
nom
=
'
'
Marcel
'
'
;
echo
`
`
bonjour
$
nom
'
'
;

,
permettre
d
’
envoyer
octet
navigateur
client



:
:
ficher
HTML
,
XML
,
CSS
,
JavaScript
,
...
donner
de
image
contenir
de
ficher
PDF
,
flash
,
etc
.
programmation
Web
hello
world
!
interprétation
interprétation
code
coder
PHP
PHP
sur
sur
serveur
serveur
<
?
php
serveur
navigateur
<
?
php
transmission
résultat
client
transmission
résultat
client
$
$
debut
debut
=
=
<
<
<
<
<
<
HTML
HTML
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
\n
\n
HTML
HTML
;
;
$
$
corps
corps
=
=
`
`
'
'
hello
hello
world
!
world
!
\n
\n
'
'
;
'
'
;
$
$
fin
=
=
<
<
<
fin
<
<
<
HTML
HTML
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
HTML
HTML
;
;
/
*
/
*
envoi
envoi
client
client
*
/
*
/
echo
echo
$
$
debut
debut
.
$
.
$
corps
corps
.
$
.
$
fin
fin
;
;
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
hello
hello
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
hello
hello
world
!
world
!
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
impossible
impossible
de
de
voir
voir
code
coder
PHP
PHP
depuis
depuis
navigateur
navigateur
!
!
!
!
:
:
programmation
Web
opérateur
arithmétique
$
b
Somme
$
b
différence
$
b
multiplication
$
avoir
+
*
/
$
b
division
$
avoir
%
$
b
modulo
(
rester
de
division
entier
)
$
avoir
$
avoir
$
avoir
:
:
programmation
Web
opérateur
d
’
in-
de
dé-crémentation
pré-
post-fixé
$
a++
++
$
avoir
$
avoir
--
--
$
avoir
:
:
retourne
valeur
de
$
avoir
augmenter
valeur
de
$
avoir
de
augmenter
valeur
de
$
avoir
de
retourner
nouveau
valeur
de
$
avoir
retourne
valeur
de
$
avoir
diminuer
valeur
de
$
avoir
de
diminuer
valeur
de
$
avoir
de
retourner
nouveau
valeur
de
$
avoir
programmation
Web
opérateur
de
comparaison
=
=
$
b
$
avoir
!
=
$
b
$
avoir
<
$
b
$
avoir
>
$
b
$
avoir
<
=
$
b
$
avoir
>
=
$
b
$
avoir
=
=
=
$
b
$
avoir
!
=
=
$
b
$
avoir
:
:
vrai
égalité
entre
valeur
de
$
avoir
$
b
vrai
différence
entre
valeur
de
$
avoir
$
b
vrai
$
avoir
inférieur
à
$
b
vrai
$
avoir
supérieur
à
$
b
vrai
$
avoir
inférieur
égal
à
$
b
vrai
$
avoir
supérieur
égal
à
$
b
vrai
$
avoir
$
b
identique
(
valeur
type
)
vrai
$
avoir
$
b
différent
(
valeur
type
)
programmation
Web
opérateur
logique
and
[
Expr2
]
[
Expr1
]
&
&
[
Expr2
]
[
Expr1
]
or
[
Expr2
]
[
Expr1
]
|
|
[
Expr2
]
[
Expr1
]
[
Expr1
]
!
:
:
xor
vrai
[
Expr1
]
[
Expr2
]
être
vrai
vrai
[
Expr1
]
[
Expr2
]
être
vrai
vrai
[
Expr1
]
[
Expr2
]
être
vrai
[
Expr2
]
deux
[
Expr1
]
vrai
[
Expr1
]
être
vrai
programmation
Web
opérateur
sur
bit
$
avoir
$
avoir
$
avoir
&
|
^
$
b
binaire
$
b
binaire
$
b
XOR
binaire
~
$
avoir
$
avoir
<
<
$
b
$
avoir
>
>
$
b
:
:
inversion
bit
à
bit
$
avoir
décaler
à
gauche
de
$
b
rang
$
avoir
décaler
à
droit
de
$
b
rang
programmation
Web
Précédence
opérateur
:
:
programmation
Web
Précédence
opérateur
en
en
cas
cas
de
de
doute
,
doute
,
utiliser
utiliser
parenthèse
parenthèse
;
-
)
;
-
)
:
:
programmation
Web
structure
de
contrôle
...
...
...
if
(
condition
)
{
/
*
bloc
d
’
instruction
exécuter
condition
être
vrai
*
/
}
[
else
{
/
*
bloc
d
’
instruction
exécuter
condition
être
faux
*
/
}
]
:
:
programmation
Web
structure
de
contrôle
...
faire
...
while
(
condition
)
{
/
*
bloc
d
’
instruction
répéter
condition
être
vrai
*
/
}
do
{
/
*
bloc
d
’
instruction
exécuter
fois
répéter
condition
être
vrai
*
/
}
while
(
condition
)
;
:
:
programmation
Web
structure
de
contrôle
...
faire
...
for
(
avant
;
condition
;
fin_chaque_itération
)
{
/
*
bloc
d
’
instruction
répéter
condition
être
vrai
*
/
}
équivaloir
à
:
avant
;
while
(
condition
)
{
/
*
bloc
d
’
instruction
répéter
condition
être
vrai
*
/
fin_chaque_itération
;
}
:
:
programmation
Web
structure
de
contrôle
switch
...
switch
(
val
)
{
case
v1
:
instruction
caser
v2
:
instruction
}
exécuter
val
=
=
v1
exécuter
val
=
=
v2
val
=
=
v1
...
default
:
instruction
dans
cas
:
:
programmation
Web
L
’
instruction
break
permettre
de
sortir
d
’
structure
de
contrôle
switch
(
val
)
{
case
v1
:
instruction
exécuter
val
=
=
v@card@
break
;
/
*
sortir
switch
val
=
=
v@card@
*
/
case
v2
:
instruction
exécuter
val
=
=
v2
val
=
=
v@card@
break
;
/
*
sortir
switch
val
=
=
v@card@
*
/
...
default
:
instruction
exécuter
dans
cas
val
!
=
v1
val
!
=
v@card@
}
:
:
programmation
Web
tableau

création
/
initialisation
:
$
tab1
=
array
(
,
`
`
fraise
'
'
,
)
;
$
tab2
[
]
$
tab2
[
]
$
tab2
[
]
=
=
=
;
'
'
fraise
'
'
;
;
$
tab3
[
]
=
;
$
tab3
[
]
=
`
`
fraise
'
'
;
$
tab3
[
]
=
;
:
:
programmation
Web
clé
valeur
'
'
fraise
'
'
tableau
«
à
trou
»

élément
tableau
être
forcement
d
’
indice
consécutif
:
$
tab4
[
]
$
tab4
[
]
$
tab4
[
]
$
tab4
[
]
=
=
=
=
;
'
'
fraise
'
'
;
;
'
'
el5
'
'
;
clé
valeur
`
`
fraise
'
'
'
'
el5
'
'

parcourir
de
tableau
?
:
:
programmation
Web
tableau
«
à
trou
»
(
suite
)
parcours
classique
:
for
(
$
i
=
;
$
i
<
sizeof
(
$
tab4
)
;
$
i++
)
{
echo
`
`
tab4
[
$
i
]
:
`
`
.
$
tab4
[
$
i
]
.
`
`
<
BR
>
\n
'
'
;
}
clé
valeur
?
:
:
programmation
Web
'
'
fraise
'
'
'
'
el5
'
'
structure
de
contrôle
pour
...
foreach
(
$
tableau
avoir
$
element
)
{
/
*
bloc
d
’
instruction
répéter
pour
élément
de
$
tableau
*
/
/
*
élément
de
$
tableau
être
accessible
grâce
à
$
element
*
/
}
:
:
programmation
Web
parcours
de
tableau
:
foreach
PHP
...
$
tab4
[
]
=
;
$
tab4
[
]
=
`
`
fraise
'
'
;
$
tab4
[
]
=
;
$
tab4
[
]
=
`
`
el5
'
'
;
foreach
(
$
tab4
avoir
$
v
)
{
echo
`
`
val
:
$
v
<
br
>
\n
'
'
;
}
...
:
:
HTML
...
val
:
<
br
>
\n
val
:
fraiser
<
br
>
\n
val
:
<
br
>
\n
val
:
el5
<
br
>
\n
...
programmation
Web
navigateur
tableau
associatif

tableau
l
’
accès
élément
n
’
être
réaliser
grâce
à
index
(
,
,
...
)
grâce
à
clé
de
type
entier
chaîne
.

exemple
de
clé
:
$
tab
[
'
un
'
]
=
;
$
tab
[
]
=
`
`
bonjour
'
'
;
$
tab
[
`
`

création
valeur
'
'
]
$
tab
=
array
(
cle1
=
>
cle2
=
>
=
;
val1
,
val2
,
...
)
;
:
:
programmation
Web
tableau
associatif
-
exemple
$
tab5
[
'
un
'
]
$
tab5
[
'
trois
'
]
$
tab5
[
`
`
deux
'
'
]
$
tab5
[
]
=
=
=
=
;
'
'
fraise
'
'
;
;
'
'
el5
'
'
;
clé
'
'
un
'
'
:
:
=
>
=
>
=
>
=
>
'
'
trois
'
'
'
'
fraise
'
'
'
'
deux
'
'
$
tab6
=
array
(
'
un
'
'
trois
'
'
'
deux
'
'
valeur
'
'
el5
'
'
,
'
'
fraise
'
'
,
,
'
'
el5
'
'
)
;
programmation
Web
structure
de
contrôle
pour
...
foreach
(
$
tableau
avoir
$
cle
=
>
$
element
)
{
/
*
bloc
d
’
instruction
répéter
pour
élément
de
$
tableau
*
/
/
*
élément
de
$
tableau
être
accessible
grâce
à
$
element
*
/
/
*
clé
d
’
accès
à
élément
être
donner
par
$
cle
*
/
}
:
:
programmation
Web
parcours
de
tableau
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
<
html
html
>
>
<
<
head
head
>
<
>
<
title
title
>
>
foreach
foreach
clé
clé
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
HTML
HTML
;
;
$
$
tab6
=
>
tab6
=
=
array
array
(
(
`
`
un
'
'
=
>
,
,
'
'
deux
=
>
deux
'
'
=
>
`
`
'
'
fraiser
fraise
'
'
,
'
'
,
'
'
'
'
trois
trois
'
'
'
'
=
>
=
>
,
,
'
'
'
'
quatre
quatre
'
'
'
'
=
>
=
>
`
`
'
'
el5
el5
'
'
'
'
)
)
;
;
foreach
foreach
(
(
$
$
tab6
tab6
avoir
avoir
$
$
cle
cle
=
>
=
>
$
$
val
val
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
tab
[
tab
[
$
$
cle
cle
]
:
]
:
$
$
val
val
<
br
>
<
br
>
\n
\n
'
'
'
'
;
;
}
}
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
\n
<
/
>
\n
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
exemple
de
génération
de
code
HTML
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
meta
meta
http-equiv
http-equiv
=
=
'
'
Content-Type
'
'
'
'
Content-Type
'
'
content
content
=
=
'
'
text
/
html
;
'
'
text
/
html
;
charset
=
iso-8859-1
'
'
charset
=
iso-8859-1
'
'
>
>
<
<
title
title
>
boucle
<
/
>
boucle
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
HTML
;
HTML
;
for
for
(
(
$
$
ii
=
=
;
;
$
$
ii
<
<
;
;
$
$
ii++
++
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
serveur
serveur
compte
...
compte
...
`
`
'
'
.
.
$
$
ii
.
.
`
`
'
'
<
br
>
<
br
>
\n
'
'
\n
'
'
;
;
}
}
$
$
html
html
.
=
.
=
<
<
<
<
<
<
HTML
HTML
<
/
body
>
<
/
body
>
<
/
<
/
html
html
>
>
HTML
;
HTML
;
echo
echo
$
$
html
html
;
;
:
:
programmation
Web
traitement
donnée
de
formulaire

PHP
permettre
de
traiter
donnée
saisi
grâce
à
formulaire
HTML
champ
action
formulaire
désigner
page
PHP
serveur
.

après
récupération
par
serveur
Web
,
donnée
être
contenir
dans
un
variable
superglobale
de
type
tableau
associatif
$
_GET
$
_POST
(
$
_REQUEST
)
.

valeur
pouvoir
être
trouver
grâce
à
clé
porter
même
nom
champ
formulaire
de
page
HTML
de
saisie
.
:
:
programmation
Web
traitement
donnée
de
formulaire
réseau
réseau
client
client
navigateur
•HTML
nomPers
=
robert
nomPers
=
robert
•JavaScript
•CSS
<
<
html
html
>
>
<
<
head
head
>
>
serveur
serveur
nomPers
<
<
title
nomPers
title
>
>
bonjour
bonjour
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
serveur
Web
<
?
php
<
?
php
<
<
body
body
>
>
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
bonjour
bonjour
robert
robert
!
!
<
html
>
<
html
>
<
/
<
/
body
body
>
>
<
<
head
head
>
<
>
<
title
title
>
>
bonjour
bonjour
<
/
<
/
title
title
>
<
/
>
<
/
head
head
>
>
<
/
html
<
/
html
>
>
PHP
moduler
<
<
body
body
>
>
HTML
HTML
;
;
$
$
html
html
.
=
.
=
`
`
'
'
bonjour
bonjour
`
`
'
'
.
$
.
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
.
.
'
'
'
'
!
!
\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
robert
robert
:
:
programmation
Web
exemple
–
formulaire
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
nom
:
nom
:
<
<
input
input
typer
type
=
=
'
'
'
'
text
text
'
'
'
'
name
name
=
=
'
'
'
'
nomPers
nomPers
'
'
'
'
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
:
:
programmation
Web
exemple
–
traitement
en
PHP
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
html
<
!
DOCTYPE
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
>
html
>
<
<
head
head
>
>
$
$
_GET
<
<
title
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
title
>
>
validation
validation
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
est-il
défini
?
?
est-il
définir
<
<
body
>
body
>
HTML
HTML
;
;
if
if
(
(
isset
isset
(
(
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
)
)
)
)
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
{
{
est-il
est-il
vide
vide
?
?
if
if
(
(
!
!
empty
empty
(
(
$
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
)
)
)
)
{
{
$
$
html
html
.
=
.
=
`
`
'
'
avoir
avoir
saisir
saisir
`
`
'
'
'
'
.
$
.
$
_GET
_GET
[
[
`
`
nomPers
nomPers
'
'
]
]
.
.
'
'
'
'
'
'
\n
\n
'
'
'
'
;
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
valeur
valeur
saisir
saisie\n
\n
'
'
;
'
'
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
utilisation
utilisation
incorrect
incorrecte\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
formulaire
contenir
champ
«
select
»
:
:
programmation
Web
formulaire
contenir
champ
«
select
unique
»
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
de
de
saisie
saisir
fruit
fruit
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
choisir
choisir
fruit
:
fruit
:
&
nbsp
;
&
nbsp
;
<
<
select
select
name
name
=
=
'
'
'
'
sel
sel
'
'
'
'
>
>
<
<
option
option
>
>
fraise
fraiser
<
<
option
option
>
>
pomme
pommer
<
<
option
option
>
>
poire
poirer
envoyer
envoyer
<
<
option
option
>
>
banane
banane
<
<
option
option
>
>
cerise
cerise
<
/
<
/
select
select
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
dns-remplacer
?
dns-remplacer
?
sel
=
pomme
sel
=
pommer
<
/
html
>
<
/
html
>
:
:
programmation
Web
formulaire
contenir
champ
«
select
multiple
»
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
HTML
Transitional
/
/
'
'
>
<
html
>
<
head
>
<
title
>
formulaire
de
saisie
fruit
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
'
'
>
choisir
fruit
:
&
nbsp
;
<
select
name
=
'
'
sel
'
'
multiple
>
<
option
>
fraiser
<
option
>
pommer
<
option
>
poirer
envoyer
<
option
>
banane
envoyer
<
option
>
cerise
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
>
<
/
form
>
dns-remplacer
?
<
/
body
>
dns-remplacer
?
sel
=
pomme
&
sel
=
poirer
sel
=
pommer
&
sel
=
poirer
<
/
html
>
:
:
programmation
Web
?
?
?
?
?
?
formulaire
contenir
champ
«
select
multiple
»
<
html
>
<
head
>
<
title
>
formulaire
de
saisie
fruit
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
get
'
'
>
choisir
fruit
:
&
nbsp
;
<
select
name
=
'
'
sel
[
]
'
'
multiple
>
<
option
>
fraiser
<
option
>
pommer
<
option
>
poirer
envoyer
envoyer
<
option
>
banane
<
option
>
cerise
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
>
<
/
form
>
dns-remplacer
?
dns-remplacer
?
sel
%
5B
%
5D
=
pommer
&
sel
%
5B
%
5D
=
poirer
sel
%
5B
%
5D
=
pommer
&
sel
%
5B
%
5D
=
poire
<
/
body
>
dns-remplacer
?
<
/
html
>
dns-remplacer
?
sel
[
]
=
pommer
&
sel
[
]
=
poirer
sel
[
]
=
pommer
&
sel
[
]
=
poirer
:
:
programmation
Web
traitement
donnée
champ
«
select
»
<
?
php
<
?
php
$
$
html
html
=
=
<
<
<
<
<
<
HTML
HTML
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
liste
lister
de
de
fruit
fruit
<
/
<
/
title
title
>
>
$
$
_GET
_GET
[
[
‘
‘
sel
sel
'
'
]
]
<
/
head
>
<
/
head
>
être
être
un
tableau
tableau
<
<
body
body
>
>
HTML
HTML
;
;
if
if
(
(
isset
isset
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
)
]
)
&
&
&
&
!
!
empty
empty
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
)
)
]
)
)
{
{
/
*
variable
$
_GET
[
'
sel
'
]
être
définir
/
*
variable
$
_GET
[
'
sel
'
]
être
définir
être
être
vide
vide
*
/
*
/
foreach
foreach
(
(
$
$
_GET
_GET
[
[
`
`
sel
sel
'
'
]
]
avoir
avoir
$
$
fruit
fruit
)
)
$
$
html
html
.
=
.
=
`
`
'
'
avoir
avoir
choisir
choisir
$
$
fruit
fruit
<
br
>
<
br
>
\n
\n
'
'
'
'
;
;
}
}
else
else
$
$
html
html
.
=
.
=
`
`
'
'
avoir
avoir
choisir
choisir
de
de
fruit
fruit\n
\n
'
'
'
'
;
;
echo
echo
$
$
html
html
.
.
`
`
'
'
<
/
<
/
body
body
>
>
\n
\n
<
/
<
/
html
html
>
>
'
'
'
'
;
;
:
:
programmation
Web
résultat
:
:
programmation
Web
formulaire
contenir
champ
«
CHECKBOX
»
:
:
programmation
Web
formulaire
contenir
champ
«
CHECKBOX
»
<
!
DOCTYPE
<
!
DOCTYPE
html
html
public
public
`
`
-
/
/
W3C
/
/
DTD
'
'
-
/
/
W3C
/
/
DTD
HTML
HTML
Transitional
/
/
'
'
>
Transitional
/
/
'
'
>
<
<
html
html
>
>
<
<
head
head
>
>
<
<
title
title
>
>
formulaire
formulaire
de
de
saisie
saisir
fruit
fruit
<
/
<
/
title
title
>
>
<
/
<
/
head
head
>
>
<
<
body
body
>
>
<
<
form
form
name
name
=
=
'
'
'
'
formu
formu
'
'
'
'
action
action
=
=
'
'
'
'
dns-remplacer
dns-remplacer
'
'
'
'
method
method
=
=
'
'
'
'
get
get
'
'
'
'
>
>
choisir
choisir
fruit
fruit
&
nbsp
;
&
nbsp
;
:
<
:
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
fraiser
fraise
'
'
'
'
>
fraise
<
>
fraise
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
pomme
pomme
'
'
'
'
>
pomme
>
pomme
<
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
poirer
poire
'
'
'
'
>
poirer
>
poire
<
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
banane
banane
'
'
'
'
>
banane
<
>
banane
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
checkbox
checkbox
'
'
'
'
name
name
=
=
'
'
'
'
sel
[
]
sel
[
]
'
'
'
'
valoir
valoir
=
=
'
'
'
'
cerise
cerise
'
'
'
'
>
cerise
<
>
cerise
<
br
br
>
>
<
<
input
input
typer
type
=
=
'
'
'
'
submit
submit
'
'
'
'
valoir
valoir
=
=
'
'
'
'
envoyer
envoyer
'
'
'
'
>
>
<
/
<
/
form
form
>
>
<
/
<
/
body
body
>
>
<
/
<
/
html
html
>
>
:
:
programmation
Web
résultat
:
:
programmation
Web
référence
$
avoir
=
;
$
b
=
$
avoir
;
$
c
=
&
$
avoir
;
$
b
=
`
`
coucou
'
'
;
$
c
=
;
echo
'
'
\
$
avoir
:
$
a\n
'
'
$
avoir
$
avoir
:
:
echo
'
'
\
$
b
:
$
b\n
'
'
$
b
$
b
:
:
coucou
coucou
echo
'
'
\
$
c
:
$
c\n
'
'
$
c
$
c
:
:
unset
(
$
c
)
;
$
c
=
`
`
hello
'
'
;
:
:
$
$
aa
$
$
bb
'
'
'
'
coucou
coucou
'
'
'
'
$
$
cc
'
'
'
'
hello
hello
'
'
'
'
;
;
;
programmation
Web
fonction
utilisateur

description
d
’
fonctionnalité
dépendre
de
paramètre
retourner
résultat

définition
function
moyen
(
$
avoir
,
$
b
)
{
return
(
$
a+
$
b
)
/
.
;
}

utilisation
$
resultat
=
moyen
(
,
)
;
echo
$
resultat
;
/
/
valoir
:
:
programmation
Web
fonction
utilisateur

valeur
de
retour
function
moyen
(
$
avoir
,
$
b
)
{
...
}
Typage
Typage
faible
faible
de
de
PHP
PHP
:
:
information
information

argument
function
moyen
(
{
...
}
$
avoir
,
$
b
)
Typage
Typage
faible
faible
de
de
PHP
PHP
:
:
information
information
:
:
programmation
Web
Mode
de
passage
argument
(
type
natif
)
<
?
php
function
permutation
(
$
x
,
$
)
{
echo
`
`
permutation
...
'
'
;
$
t
=
$
x
;
permutation
permutation
impossible
impossible
:
:
$
x
=
$
;
passage
passage
argument
argument
$
=
$
t
;
fonction
fonction
par
par
valeur
valeur
}
$
avoir
=
;
$
b
=
;
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
permutation
...
permutation
(
$
avoir
,
$
b
)
;
permutation
...
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
?
>
:
:
programmation
Web
Mode
de
passage
argument
(
type
natif
)
<
?
php
function
permutation
(
&
$
x
,
&
$
)
{
echo
`
`
permutation
...
'
'
;
$
t
=
$
x
;
$
x
=
$
;
$
=
$
t
;
}
$
avoir
=
;
$
b
=
;
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
permutation
...
permutation
(
$
avoir
,
$
b
)
;
permutation
...
$
avoir
echo
`
`
\
$
avoir
=
$
avoir
'
'
;
$
avoir
=
=
$
b
echo
`
`
\
$
b
=
$
b
'
'
;
$
b
=
=
?
>
:
:
programmation
Web
permutation
permutation
réussir
réussir
argument
par
défaut
fonction

valeur
par
défaut
d
’
argument
s
’
n
’
avoir
être
définir
de
l
’
appel
de
fonction
function
bonjour
(
$
nom
=
'
'
inconnu
'
'
)
{
echo
`
`
bonjour
$
nom
'
'
;
}

utilisation
bonjour
(
)
;
bonjour
bonjour
inconnu
inconnu
bonjour
(
`
`
Marcel
'
'
)
;
bonjour
bonjour
Marcel
Marcel
:
:
programmation
Web
définition
de
fonction
utiliser

fonction
être
utiliser
dans
script
PHP

faire
pour
définir
dans
page
?

utilisation
de
:




include
(
`
`
fichier
'
'
)
;
require
(
`
`
fichier
'
'
)
;
include_once
(
`
`
fichier
'
'
)
;
require_once
(
`
`
fichier
'
'
)
;

permettre
d
’
inclure
contenu
de
fichier
dans
script
courir
:
:
programmation
Web
include
require
fichier
fichier
dns-remplacé
dns-remplacer
<
?
function
mafonction
(
$
arg
)
{
if
(
isset
(
$
arg
)
)
{
echo
(
`
`
vrai
'
'
)
;
}
else
{
echo
(
`
`
faux
'
'
)
;
}
}
?
>
:
:
fichier
fichier
dns-remplacer
dns-remplacer
...
require
(
`
`
dns-remplacer
'
'
)
mafonction
(
true
)
;
...
fichier
fichier
dns-remplacer
dns-remplacé
...
include
(
`
`
dns-remplacer
'
'
)
...
$
var
=
false
;
mafonction
(
$
var
)
;
...
fichier
fichier
dns-remplacer
dns-remplacer
...
require
(
`
`
dns-remplacer
'
'
)
...
programmation
Web
définition
de
constant
<
?
php
define
(
`
`
ma_constant
'
'
,
`
`
bonjour
à
'
'
)
;
nom
nom
valeur
valeur
définition
définition
de
un
de
constant
constant
echo
ma_constant
;
?
>
utilisation
utilisation
de
de
constant
constante
:
:
programmation
Web
gestion
erreur

dans
cas
,
n
’
être
possible
utile
de
poursuivre
l
’
exécution
code
PHP
(
variable
définir
,
valeur
erroné
,
échec
de
connexion
,
...
)

arrêt
brutal
de
l
’
exécution
code
:


die
(
message
)
exit
(
message
)
envoyer
message
navigateur
terminer
l
’
exécution
script
courir
:
:
programmation
Web
gestion
erreur
–
(
mauvais
)
exemple
<
?
php
PHP
$
html
=
<
<
<
HTML
<
html
>
<
head
>
<
title
>
die-exit
<
/
title
>
<
/
head
>
<
body
>
HTML
;
if
(
!
isset
(
$
val
)
)
{
HTML
die
(
$
html
.
`
`
problèmeHTML
val
'
'
)
;
/
*
de
point
,
fin
script
*
/
}
$
html
.
=
<
<
<
HTML
choix
:
$
val
<
/
body
>
<
/
html
>
:
:
<
html
>
HTML
<
head
>
<
title
>
die-exit
<
/
title
>
<
/
head
>
<
body
>
problème
val
valide
valide
...
...
navigateur
problème
val
programmation
Web
gestion
de
affichage
erreur

int
error_reporting
(
[
int
level
]
)
Débogage
constant
ancien
ancien
niveau
niveau
de
erreur
de
erreur
E_ERROR
E_WARNING
sur
sur
un
serveur
serveur
en
en
E_PARSE
production
,
production
,
E_NOTICE
erreur
erreur
afficher
afficher
E_CORE_ERROR
donner
donner
indice
indice
sur
sur
E_CORE_WARNIN
script
script
rendre
rendre
site
G
site
vulnérable
vulnérable
E_COMPILE_ERR
dns-remplacer
dns-remplacé
display_errors
display_errors
boolean
boolean
E_COMPILE_WAR
NING
programmation
Web
:
:
opérateur
de
contrôle
de
erreur
$
v
=
file
(
`
`
dns-remplacer
'
'
)
or
die
(
`
`
problème
de
fichier
fichier
absent
absent
lecture
'
'
)
;
warning
warning
:
:
file
(
dns-remplacer
)
:
file
(
dns-remplacer
)
:
failed
failed
to
to
open
open
stream
:
stream
:
No
No
such
such
filer
file
or
directory
directory
in
in
dns-remplacer
dns-remplacer
line
line
problème
problème
de
de
lecture
lecture
$
v
=
@
file
(
`
`
dns-remplacer
'
'
)
or
die
(
`
`
problème
de
lecture
'
'
)
;
problème
problème
de
de
lecture
lecture
:
:
programmation
Web
développement
objet

définition
de
brique
logicielles
représenter
concept
,
idée
entité
interaction
:
objet

objet
être
structure
de
donner
comprendre
fonctionnalité
de
traitement
donnée

L
’
objet
être
voir
travers
de
spécification

concept
associer
être
:

encapsulation

héritage

polymorphisme
:
:
programmation
Web
classe

classe
définir
modèle
,
moule
,
à
partir




objet
de
classe
être
créer
classe
décrire
donnée
interne
fonctionnalité
objet
classe
être
vision
«
inerte
»
,
recette
de
cuisine
,
viser
à
décrire
structure
comportement
objet
être
créer
construction
d
’
objet
à
partir
de
classe
générateur
s
’
appeler
instanciation
objet
,
entité
«
vivant
»
en
mémoire
,
être
instance
de
classe
:
:
programmation
Web
Instanciation

classe
être
description
«
inerte
»

objet
devoir
être
instanciés
à
partir
de
classe
générateur
pour
exister
devenir
fonctionnel

exemple
:
classe
animal
$
bambi
=
new
animal
(
)
;
$
scrat
=
new
animal
(
)
;
$
melman
=
new
animal
(
)
;
:
:
programmation
Web
encapsulation

procédé
consister
à
rassembler
donnée
traitement
sein
objet

L
’
implémentation
interne
objet
être
cacher

objet
être
voir
à
travers
spécification

donnée
interne
fonctionnalité
posséder
niveau
de
visibilité
pouvoir
être
masquer
:

public

priver

protéger
:
:
programmation
Web
encapsulation

donnée
interne
objet
être
appeler
attribut

fonctionnalité
objet
être
appeler
méthode

méthode
habituel
:

constructeur
/
destructeur

Accesseurs
/
modificateur
(
getter
/
setter
)

référence
à
l
’
objet
courir
dans
description
de
classe
:
$
this
:
:
programmation
Web
visibilité

publique
:
donnée
interne
méthode
être
accessible
par

protégé
:
donnée
interne
méthode
être
accessible
objet
dérivé

priver
:
donnée
interne
méthode
être
accessible
qu
’
objet
de
classe
:
:
programmation
Web
héritage
dérivation
extension

création
de
nouveau
classe
à
partir
modèle
d
’
classe
existant

nouveau
classe
posséder
attribut
méthode
de
classe
mère

nouveau
classe
pouvoir
proposer
de
nouveau
attribut
de
nouveau
méthode
spécialiser
méthode
mammifère
de
classe
mère
herbivore
impala
:
:
caribou
carnivore
guépard
programmation
Web
léopard
polymorphisme
mammifère
nourriture

choix
dynamique
de
méthode
correspondre
type
réel
de
l
’
objet

méthode
manger
(
)
herbivore
plante
impala
herber
caribou
mousse
carnivore
viande
guépard
impala
léopard
impala

function
nourriture
(
Mammifere
$
m
)
{
return
$
m-
>
manger
(
)
;
}

$
i
=
new
impala
(
)
;
nourriture
(
$
i
)
;

$
c
=
new
carnivore
(
)
;
nourriture
(
$
c
)
;
:
:
programmation
Web
herbe
viander
développement
objet
en
PHP

PHP

classe
(
être
public
)

constructeur

héritage

méthode
statique
implicite

outil
pour
linéarisation
(
sauvegarde
sur
disque
)

PHP

classe
(
choix
public
,
protected
,
private
)

constructeur
destructeur

membre
méthode
statique

classe
méthode
abstraire

...
:
:
programmation
Web
déclaration
définition
de
classe
en
PHPde4classe
<
?
php
macler
{
var
$
madonnee
;
/
/
attribut
attribut
public
constructeur
public
référencer
à
/
/
constructeur
objet
courir
function
macler
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
}
accès
à
attribut
function
affiche
(
)
{
/
/
méthode
echo
get_class
(
$
this
)
méthode
publique
.
'
'
contenir
`
`
.
$
this-
>
madonnee
;
}
donner
nom
de
classe
de
objet
courir
}
?
>
:
:
programmation
Web
utilisation
de
classe
en
PHP
inclusion
de
définition
de
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
objet
/
/
nouveau
objet
$
o
=
new
macler
(
)
macler
contenir
;
/
/
utilisation
de
méthode
$
o-
>
affiche
(
)
;
$
o-
>
madonnee
=
`
`
coucou
'
'
;
méthode
affiche
de
objet
$
o
impossible
de
restreindre
accès
attribut
?
>
:
:
programmation
Web
héritage
en
PHP
héritage
de
macler
<
?
php
class
MaClasseHeritee
extends
macler
{
var
$
autredonnee
;
function
MaClasseHeritee
(
$
param1
,
$
param2
)
{
opérateur
de
parent
:
:
macler
(
$
param1
)
;
résolution
de
portée
$
this-
>
autredonnee
=
$
param2
;
(
Paamayim
}
Nekudotayim
)
function
affiche
(
)
{
macler
:
:
affiche
(
)
;
méthode
macler
echo
`
`
`
`
.get_class
(
$
this
)
parent
.
'
'
contenir
`
`
.
$
this-
>
autredonnee
;
}
}
méthode
affiche
de
?
>
classe
macler
:
:
programmation
Web
méthode
de
classe
implicite
<
?
php
macler
{
var
$
madonnee
;
/
/
attribut
/
/
constructeur
function
macler
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
}
function
affiche
(
)
{
/
/
méthode
echo
$
this-
>
madonnee
;
}
function
statique
(
)
{
/
/
méthode
echo
`
`
statique
!
!
!
'
'
;
}
}
?
>
:
:
programmation
Web
méthode
publique
faire
référence
à
$
this

méthode
statique
(
méthode
de
classe
)
méthode
de
classe
implicite
inclusion
de
définition
de
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
objet
/
/
création
de
objet
$
o
=
new
macler
(
)
;
méthode
affiche
de
objet
$
o
/
/
utilisation
de
méthode
$
o-
>
affiche
(
)
;
impossible
de
restreindre
accès
/
/
utilisation
de
méthode
auxstatique
attribut
macler
:
:
statique
(
)
;
statique
!
!
!
?
>
:
:
programmation
Web
développement
objet
en
PHP
à
partir
de
,
développement
en
PHP
:
:
programmation
Web
définition
de
classeDéclaration
de
classe
<
?
php
macler
{
private
$
madonnee
;
attribut
privé
constructeur
public
public
function
__construct
(
$
param
)
{
$
this-
>
madonnee
=
$
param
;
référence
à
objet
}
courir
function
__destruct
(
)
{
echo
`
`
destruction
...
'
'
;
}
destructeur
public
function
affiche
(
)
{
echo
`
`
madonnee
:
`
`
méthode
publique
.
$
this-
>
madonnee
;
par
défaut
}
}
?
>
accès
à
attribut
:
:
programmation
Web
utilisation
de
classe
inclusion
de
définition
de
classe
<
?
php
require
`
`
dns-remplacer
'
'
;
création
de
objet
/
/
nouveau
objet
$
o
=
new
macler
(
)
macler
contenir
;
/
/
utilisation
de
méthode
$
o-
>
affiche
(
)
;
{
fatal
macler
error
:
Can
not
access
private
private
$
madonnee
;
property
macler
:
:
$
madonnee
in
...
dns-remplacer
=
line
$
o-
>
madonnee
'
'
coucou
'
'
;
function
__destruct
(
)
{
destruction
...
echo
`
`
destruction
...
'
'
;
}
unset
(
$
o
)
;
?
>
:
:
programmation
Web
méthode
afficher
de
objet
$
o
attribut
être
priver
destruction
de
objet
$
o
valeur
par
défaut
attribut
attribut
avec
valeur
par
défaut
<
?
php
macler
{
private
$
madonnee
=
`
`
défaut
'
'
;
function
affecter
(
$
val
)
{
$
this-
>
madonnee
=
$
val
;
}
function
affiche
(
)
{
nouveau
objet
echo
`
`
madonnee
:
`
`
.
$
this-
>
madonnee
;
}
}
affichage
madonnee
:
défaut
$
o
=
new
macler
(
)
;
affectation
$
o-
>
affiche
(
)
;
madonnee
:
nouveau
$
o-
>
affecter
(
`
`
nouveau
'
'
)
;
affichage
$
o-
>
affiche
(
)
;
?
>
:
:
programmation
Web
attribut
méthode
de
classe

mot
clé
static

attribut
méthode
utilisable
sans
instance
de
classe
(
=
attribut
méthode
de
classe
)

attribut
pouvoir
être
accéder
depuis
instance
(
$
objet-
>
attribut
)

attribut
partager
par
instance
de
classe

méthode
pouvoir
être
accéder
depuis
instance
(
$
objet-
>
methode
(
)
)

dans
méthode
,
$
this
être
disponible
:
:
programmation
Web
attribut
statique
attribut
privé
statique
:
pouvoir
être
accéder
par
méthode
de
classe
macler
{
private
static
$
n
=
;
function
__construct
(
)
{
accès
à
attribut
statique
echo
++MaClas
:
:
$
n
.
'
'
instance
(
s
)
'
'
;
}
function
__destruct
(
)
{
echo
`
`
destruction
'
'
;
self
:
:
$
n
--
;
}
instance
(
s
)
}
instance
(
s
)
$
s
=
new
macler
(
)
;
destruction
$
tinstance
(
s
)
=
new
macler
(
)
;
unset
(
$
t
)
;
Can
not
access
private
property
instance
(
s
)
fatal
error
:
$
u
=
new
macler
(
)
;
macler
:
:
$
n
in
dns-remplacer
line
$
v
=
new
macler
(
)
;
:
:
programmation
Web
méthode
statique
macler
{
private
static
$
n
=
;
function
__construct
(
)
{
echo
++MaClasse
:
:
$
n
.
'
'
instance
(
s
)
<
br
>
\n
'
'
;
}
méthode
publique
statique
function
__destruct
(
)
{
macler
:
:
$
n
--
;
}
static
function
f
(
$
i
)
{
echo
`
`
dans
f
(
)
:
`
`
.
(
$
i
*
$
i
)
appel
;
}
à
partir
de
instance
}
instance
(
s
)
tolérer
dans
f
(
)
:
$
s
=
f
(
)
new
:
macler
(
)
;
dans
$
s-
>
f
(
)
;
macler
:
:
f
(
)
programmation
;
:
:
Web
appel
sans
instance
constante
de
classe
macler
{
const
constant
=
`
`
valeur
'
'
;
public
function
montrer
(
)
{
echo
self
:
:
constant
;
}
}
valeur
$
c
=
new
macler
(
)
;
valeur
$
c-
>
montrer
(
)
;
echo
macler
:
:
constant
;
:
:
programmation
Web
constante
publique
de
classe
accès
à
constante
de
classe
depuis
classe
accès
à
constante
de
classe
à
extérieur
de
classe
héritage
simple
{
function
affiche
(
)
{
echo
`
`
être|suivre
simple
'
'
;
}
}
class
Etendue
extends
simple
{
function
affiche
(
)
{
parent
:
:
affiche
(
)
;
echo
`
`
Etendue
'
'
;
}
}
$
s
=
new
simple
(
)
;
$
e
=
new
Etendue
(
)
;
être|suivre
simple
;
$
s-
>
affiche
(
)
$
e-
>
affiche
(
)
être|suivre
simple
;
Etendue
:
:
programmation
Web
classe
simple
méthode
publique
classer
étendre
hériter
de
classe
simple
surcharger
de
méthode
appel
de
méthode
parent
assignation
de
objet
{
private
$
_x
;
private
$
_y
;
public
function
__construct
(
$
x
=
,
$
=
)
{
$
this-
>
_x
=
$
x
;
$
this-
>
_y
=
$
;
}
public
function
set
(
$
x
,
$
)
{
$
this-
>
_x
=
$
x
;
$
this-
>
_y
=
$
;
}
public
function
toString
(
)
{
return
`
`
(
{
$
this-
>
_x
}
,
{
$
this-
>
_y
}
)
'
'
;
}
:
:
programmation
Web
assignation
de
objet
$
segment
=
array
(
)
;
$
=
new
(
)
;
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
$
point-
>
set
(
$
i
,
$
i
)
;
$
segment
[
]
=
$
point
;
}
foreach
(
$
segment
avoir
$
k
=
>
$
p
)
echo
`
`
$
k
:
{
$
p-
>
toString
(
)
}
<
br
>
\n
'
'
;
:
:
programmation
Web
$
$
segment
:
(
,
)
:
(
,
)
)
:
(
,
)
:
(
,
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
)
:
(
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
clonage
de
objet
$
segment
=
array
(
)
;
$
=
new
(
)
;
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
$
point-
>
set
(
$
i
,
$
i
)
;
$
segment
[
]
=
cloner
$
point
;
}
foreach
(
$
segment
avoir
$
k
=
>
$
p
)
echo
`
`
$
k
:
{
$
p-
>
toString
(
)
}
<
br
>
\n
'
'
;
$
$
segment
:
(
,
)
:
(
,
)
)
:
(
,
)
:
(
,
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
:
(
,
)
)
:
(
,
,
,
,
,
,
,
,
,
,
,
:
:
programmation
Web
objet
argument
de
fonction
function
origine
(
$
p
)
{
$
p-
>
set
(
,
)
;
}
$
=
new
(
,
)
;
echo
`
`
:
{
$
point-
>
toString
(
)
}
<
br
>
\n
'
'
;
origine
(
$
point
)
;
echo
`
`
apres
:
{
$
point-
>
toString
(
)
}
<
br
>
\n
'
'
;
passage
de
objet
:
(
,
)
point
par
référence
apres
:
(
,
)
:
:
programmation
Web
objet
dans
chaîne
de
caractère

problème
:

ambiguïté

évaluable

chaîne
contenir
:

attribut
de
objet
dans
chaîne
'
'
avoir
:
$
a-
>
attribut
'
'

résultat
de
méthode
de
objet
dans
chaîne
'
'
résultat
:
$
a-
>
calculer
(
)
'
'

entrée
de
tableau
associatif

`
`
valeur
:
$
tab
[
'
cle
'
]
'
'

variableProgrammation
suivre
de
texte
(
sans
espace
)
:
:
Web
objet
dans
chaîne
de
caractère

solution
:

effectuer
concaténation
(
pénible
)

délimiter
par
{
}

chaîne
contenir
:

attribut
de
objet
dans
chaîne
'
'
avoir
:
{
$
a-
>
attribut
}
'
'

résultat
de
méthode
de
objet
dans
chaîne
'
'
résultat
:
{
$
a-
>
calculer
(
)
}
'
'

entrée
de
tableau
associatif

`
`
valeur
:
{
$
tab
[
'
cle
'
]
}
'
'

variableProgrammation
suivre
de
texte
(
sans
espace
)
:
:
Web
gestion
erreur
:
excepter

gestion
exception
identique
à
C++
/
java

exception
pouvoir
être
:

jeter
:
throw

essayer
:
try

capturer
:
catch

exception
jeter
:
code
après
throw
exécuter

capture
:
bloc
(
selon
type
)

exception
capturer
:
erreur
fatal
:
:
programmation
Web
utilisation
exception
try
{
$
error
=
'
lancer
erreur
'
;
déroutement
throw
new
exception
(
$
error
)
;
/
*
code
après
exception
être
capturer
essayer
lancer
exécuter
.
*
/
echo
'
exécuter
'
;
}
capturer
exception
:
lancer
erreur
catch
(
exception
$
e
)
{
echo
`
`
capturer
exception
:
`
`
.
$
e-
>
getMessage
(
)
.
'
'
\n
'
'
;
}
bonjour
monde
/
/
poursuite
de
exécution
echo
'
bonjour
monde
'
;
:
:
programmation
Web
classe
exception
PHP
<
?
php
class
exception
{
protected
$
message
=
`
`
;
/
/
message
de
exception
protected
$
code
=
;
/
/
code
de
exception
protected
$
file
;
/
/
fichier
source
de
exception
protected
$
line
;
/
/
ligne
de
source
de
exception
function
__construct
(
string
$
message
=
NULL
,
int
code
=
)
;
final
final
final
final
final
final
function
function
function
function
function
function
function
getMessage
(
)
;
/
/
message
de
exception
getCode
(
)
;
/
/
code
de
exception
getFile
(
)
;
/
/
nom
fichier
source
getLine
(
)
;
/
/
ligne
fichier
source
getTrace
(
)
;
/
/
tableau
de
backtrace
(
)
getTraceAsString
(
)
;
/
/
chaîne
de
trace
_toString
(
)
;
/
/
chaîne
pour
affichage
}
?
>
:
:
programmation
Web
PDO

PDO
:
PHP
dater
Objects

extension
PHP
fournir
interface
pour
accéder
à
base
de
donnée

fournir
interface
de
abstraction
pour
accès
donnée

fournir
abstraction
de
base
de
donnée

SQL
spécifique
moteur

fonctionnalité
présent
/
absent

interface
orienter
objet
:
:
programmation
Web
nom
driver
base
de
donnée
supporter
base
de
donnée
supporter
PDO_DBLIB
FreeTDS
/
Microsoft
SQL
Server
/
Sybase
PDO_FIREBIRD
Firebird
/
Interbase
PDO_IBM
IBM
DB@card@
PDO_INFORMIX
IBM
Informix
Dynamic
Server
PDO_MYSQL
MySQL
3.x
/
4.x
/
5.x
PDO_OCI
oracle
Call
interface
PDO_ODBC
ODBC
v3
(
IBM
DB@card@
,
unixODBC
win32
ODBC
)
PDO_PGSQL
PostgreSQL
PDO_SQLITE
SQLite
SQLite
PDO_4D
4D
:
:
programmation
Web
:
:
programmation
Web
classe
prédéfinie

PDO
:
connexion
PHP
/
base
de
donnée

__construct
(
)

exec
(
)
,
prepare
(
)
,
query
(
)

errorCode
(
)
,
errorInfo
(
)

getAttribute
(
)
,
setAttribute
(
)

lastInsertId
(
)
,
quote
(
)

beginTransaction
(
)

commettre
(
)
,
rollBack
(
)

getAvailableDrivers
(
)
:
:
programmation
Web
classe
prédéfinies

PDOStatement
:
requêter
préparer
,
jeu
de
résultat

bindColumn
(
)
,
bindParam
(
)
,
bindValue
(
)
,
closeCursor
(
)

errorCode
(
)
,
errorInfo
(
)

fetch
(
)
,
fetchAll
(
)
,
fetchColumn
(
)
,
fetchObject
(
)
,




setFetchMode
(
)
,
nextRowset
(
)
rowCount
(
)
,
columnCount
(
)
,
getColumnMeta
(
)
getAttribute
(
)
,
setAttribute
(
)
execute
(
)
debugDumpParams
(
)
:
:
programmation
Web
:
:
programmation
Web
connexion
gestionnaire
de
connexion

Instanciation
de
objet
PDO

$
dbh
=
new
PDO
(
DSN
[
,
user
[
,
pass
[
,
option
]
]
]
)
;

DSN
:
dater
source
Name

nom_du_driver
:
syntaxe_spécifique_au_driver

:
mysql
:
host
=
localhost
;
dbname
=
ma_base

user
:
nom
de
utilisateur
,
pass
:
mot
de
passe

option
:
tableau
associatif

spécifique
driver

:
array
(
PDO
:
:
ATTR_PERSISTENT
=
>
true
)
)
;

fin
de
connexion
:
$
dbh
=
null
;
unset
(
$
dbh
)
;
:
:
programmation
Web
:
:
programmation
Web
gestion
erreur
de
connexion

connexion
par
construction
de
objet

gestion
envisageable
erreur


fin
brutal
(
exit
,
die
)

État

exception

en
cas
de
erreur
de
connexion

objet
PDOException
lancer

PDOException
hériter
de
exception
:
:
programmation
Web
gestion
erreur
de
connexion
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
heure
;
dbname
=
db
'
,
$
user
,
$
pass
)
;
...
$
dbh
=
null
;
}
catch
(
PDOException
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
.
`
`
<
br
/
>
'
'
;
die
(
)
;
}
?
>
:
:
programmation
Web
gestion
erreur
(
hormis
connexion
)

PDO
:
:
ERRMODE_SILENT
(
par
défaut
)

Mode
silencieux
,
mettre
en
place
de
code
de
erreur

PDO
:
errorCode
(
)
/
errorInfo
(
)

PDOStatement
:
errorCode
(
)
/
errorInfo
(
)

PDO
:
:
ERRMODE_WARNING

mettre
en
place
code
de
erreur

émission
de
erreur
de
type
E_WARNING

PDO
:
:
ERRMODE_EXCEPTION

mettre
en
place
code
de
erreur

objet
PDOException
lancer
:
:
programmation
Web
gestion
erreur
(
hormis
connexion
)
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
heure
;
dbname
=
db
'
,
$
user
,
$
pass
)
;
$
dbh-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
...
$
dbh
=
null
;
}
catch
(
PDOException
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
.
`
`
<
br
/
>
'
'
;
die
(
)
;
}
:
:
programmation
Web
gestion
erreur
:
code
de
erreur
<
?
php
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
coucou
'
'
)
;
code
SQLSTATE
if
(
$
pdo-
>
errorCode
(
)
)
{
echo
`
`
erreur
!
!
\n
'
'
;
echo
`
`
<
pre
>
\n
'
'
;
coder
erreur
spécifique
var_dump
(
$
pdo-
>
errorInfo
(
)
)
;
driver
echo
`
`
<
/
pre
>
\n
'
'
;
erreur
!
!
}
array
(
)
{
chaîner
erreur
spécifique
[
]
=
>
string
(
)
`
`
'
'
driver
[
]
=
>
int
(
)
[
]
=
>
string
(
)
`
`
erreur
de
syntaxe
de
'
coucou
'
à
ligne
'
'
}
:
:
programmation
Web
gestion
erreur
:
exception
<
?
php
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
coder
erreur
;
spécifique
driver
$
pdostat
=
$
pdo-
>
query
(
`
`
coucou
'
'
)
;
}
catch
code
(
exception
$
e
)
{
chaîner
erreur
spécifique
SQLSTATE
driver
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
erreur
:
SQLSTATE
[
]
:
Syntax
error
access
violation
:
erreur
de
syntaxe
de
'
coucou
'
à
ligne
:
:
programmation
Web
:
:
programmation
Web
exécution
de
requête

PDOStatement
PDO
:
:
query
(
string
statement
)
résultat
de
requête
requêter
<
?
php
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
'
'
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
*
FROM
client
'
'
)
;
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
résultat
de
requête

récupération
donné
ligne
à
ligne

ligne
pouvoir
être
:

tableau
indexer

tableau
associatif

tableau
mixte
(
par
défaut
)

objet
anonyme

objet
de
classe
définir
par
utilisateur

récupération
donnée
de
colonne
:
:
programmation
Web

parcourir
résultat
de
requête
parcourir
résultat
de
requête
select
*
résultat
de
requête
FROM
morceau
ORDER
by
mor_id
curseur
interner
+
--
--
--
--
+
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
+
|
mor_id
|
mor_nom
|
+
--
--
--
--
+
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
--
+
|
|
With
à
Little
Help
From
My
Friends
|
|
|
The
Letter
|
|
|
Marjorine
|
|
|
Midnight
rider
|
|
|
You
are
So
Beautiful
|
|
|
Feelin
'
Allright
|
|
|
Cry
Me
à
river
|
...
:
:
programmation
Web
exploitation
résultat
de
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
$
pdostat-
>
setFetchMode
(
PDO
:
:
FETCH_ASSOC
)
;
foreach
(
$
pdostat
avoir
$
ligne
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
résultat
de
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
foreach
(
$
pdostat-
>
fetchAll
(
PDO
:
:
FETCH_ASSOC
)
avoir
$
ligne
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
exploitation
résultat
de
requête
(
)
try
{
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
query
(
`
`
select
name
FROM
user
'
'
)
;
while
(
$
ligne
=
$
pdostat-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
)
{
echo
`
`
<
p
>
'
'
.
$
ligne
[
'
name
'
]
.
`
`
\n
'
'
;
}
}
catch
(
exception
$
e
)
{
echo
`
`
erreur
:
`
`
.
$
e-
>
getMessage
(
)
;
}
:
:
programmation
Web
mode
de
récupération
donnée
(
)

PDO
:
:
FETCH_ASSOC

retourner
ligne
dans
tableau
indexer
par
nom
colonne
être
retourner
dans
jeu
de
résultat
correspondre
.
jeu
de
résultat
contenir
de
multiple
colonne
avec
même
nom
,
PDO
:
:
FETCH_ASSOC
retourner
seul
valeur
par
nom
de
colonne
.

PDO
:
:
FETCH_NUM

retourner
ligne
dans
tableau
indexer
par
numéro
colonne
être
retourner
dans
jeu
de
résultat
correspondre
,
en
commencer
à
.
:
:
programmation
Web
mode
de
récupération
donnée
(
)

PDO
:
:
FETCH_BOTH
(
par
défaut
)

retourner
ligne
dans
tableau
indexer
par
nom
colonne
numéro
,
être
retourner
dans
jeu
de
résultat
correspondre
,
en
commencer
à
.

PDO
:
:
FETCH_OBJ

retourner
ligne
dans
objet
avec
nom
de
propriété
correspondre
nom
colonne
être
retourner
dans
jeu
de
résultat
.
:
:
programmation
Web
mode
de
récupération
donnée
(
)

PDO
:
:
FETCH_BOUND

retourner
true
assigner
valeur
colonne
jeu
de
résultat
dans
variable
PHP
être
lier
avec
méthode
PDOStatement
:
:
bindParam
(
)
méthode
PDOStatement
:
:
bindColumn
(
)
.

PDO
:
:
FETCH_CLASS
|
PDO
:
:
FETCH_CLASSTYPE

retourner
nouveau
instance
de
classe
demander
,
lier
colonne
propriété
nommer
dans
classe
.
nom
de
classe
=
1er|1ère
colonne
.
:
:
programmation
Web
mode
de
récupération
donnée
(
)

PDO
:
:
FETCH_INTO

mettre
à
jour
instance
existant
de
classe
demander
,
lier
colonne
jeu
de
résultat
nom
propriété
de
classe
.

PDO
:
:
FETCH_LAZY

retourner
ligne
en
objet
avec
nom
attribut
correspondre
nom
colonne
retourner
dans
jeu
de
résultat
.

PDO
:
:
FETCH_LAZY
créer
nom
attribut
de
objet
être
rencontrer
.
:
:
programmation
Web
exemple
avec
PDO
:
:
FETCH_CLASS
$
stmt
=
$
pdo-
>
query
(
<
<
<
SQL
select
id
,
name
FROM
artist
WHERE
id
=
SQL
)
;
$
stmt-
>
setFetchMode
(
PDO
:
:
FETCH_CLASS
,
'
Artist
'
)
;
if
(
(
$
object
=
$
stmt-
>
fetch
(
)
)
!
=
=
false
)
{
return
$
object
;
Instancie
objet
de
classe
Artist
}
attribut
être
supposer
être
id
name
:
:
programmation
Web
préparation
de
requête

déroulement
de
requête
SQL
.
.
.
.




analyser
compilation
optimisation
exécution
exécution
répéter
de
requête
:
préparation
de
requête
:
exécution
répéter
de
requête
préparé
:
préparation
en
fonction
de
paramètre
:


:
:
anonyme
nommer
programmation
Web
:
:
programmation
Web
préparation
de
requête

PDOStatement
PDO
:
:
prepare
(
string
statement
[
,
array
driver_option
]
)

statement
:
requête
à
préparer
.
pouvoir
contenir
paramètre
anonyme
(
?
)
nommer
(
:
nom
)

driver_option
:
tableau
de
option
driver

retourner
objet
PDOStatement
effectuer
association
paramètre
exécuter
requête
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
?
'
'
)
;
:
:
programmation
Web
association
paramètre
de
requête

bool
PDOStatement
:
:
bindValue
(
mixed
parameter
,
mixed
valoir
[
,
int
data_type
]
)

parameter
:
paramètre
(
nom
position
[
...
n
]
)

value
:
valeur

data_type
:
type
de
valeur

PDO
:
:
PARAM_BOOL
booléen
.

PDO
:
:
PARAM_NULL
NULL
SQL
.

PDO
:
:
PARAM_INT
INTEGER
SQL
.

PDO
:
:
PARAM_STR
char
,
VARCHAR
autre
chaîne
.

PDO
:
:
PARAM_LOB
'
'
objet
large
'
'
SQL
.

bool
PDOStatement
:
:
execute
(
[
array
parameters
]
)

parameters
:
tableau
associatif
indexer
valeur
:
:
programmation
Web
préparation
exécution
de
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
?
'
'
)
;
paramètre
anonyme
$
pdostat-
>
bindValue
(
,
'
root
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
résultat
$
pdostat-
>
bindValue
(
,
'
cutrona
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
résultat
association
préparation
de
valeur
valeur
delalarequête
requête
1er
paramètre
association
exécution
de
un
de
1er
paramètre
:
:
programmation
Web
préparation
exécution
de
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
:
utilisateur
'
'
)
;
paramètre
nommer
$
pdostat-
>
bindValue
(
'
:
utilisateur
'
,
'
root
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
résultat
$
pdostat-
>
bindValue
(
'
:
utilisateur
'
,
'
cutrona
'
)
;
$
pdostat-
>
execute
(
)
;
/
/
utilisation
résultat
association
préparation
exécution
de
valeur
de
dela
larequête
requêter
paramètre
nommer
:
:
programmation
Web
préparation
exécution
de
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
paramètre
WHERE
user
=
?
'
'
)
;
anonyme
$
pdostat-
>
execute
(
array
(
'
root
'
)
)
;
/
/
utilisation
résultat
$
pdostat-
>
execute
(
array
(
'
cutrona
'
)
)
;
/
/
utilisation
résultat
association
association
préparation
exécution
de
un
de
valeur
valeur
de
delalarequête
requête
1er
1er
paramètre
paramètre
:
:
programmation
Web
préparation
exécution
de
requête
(
)
$
pdo
=
new
PDO
(
`
`
mysql
:
host
=
localhost
;
dbname
=
mysql
'
'
)
;
$
pdo-
>
setAttribute
(
PDO
:
:
ATTR_ERRMODE
,
PDO
:
:
ERRMODE_EXCEPTION
)
;
$
pdostat
=
$
pdo-
>
prepare
(
'
'
select
*
FROM
user
WHERE
user
=
:
utilisateur
'
'
)
paramètre
nommé
;
$
pdostat-
>
execute
(
array
(
'
:
utilisateur
'
=
>
'
root
'
)
)
;
/
/
utilisation
résultat
$
pdostat-
>
execute
(
array
(
'
:
utilisateur
'
=
>
'
cutrona
'
)
)
;
/
/
utilisation
résultat
association
préparation
exécution
de
valeur
de
dela
larequête
requêter
paramètre
nommer
:
:
programmation
Web
intérêt
requête
préparer

amélioration
performance
en
cas
de
exécution
répéter

émulation
faire
par
PDO
driver
supporter

protection
automatique
valeur
paramètre
pour
interdire
attaque
par
injection
de
code
SQL
:
:
programmation
Web
:
:
programmation
Web
attaque
par
injection
SQL
?

:
validation
de
login
/
pass
sur
site

requête
consister
à
trouver
enregistrement
correspondre
couple
login
/
pass
fournir
par
utilisateur

select
*
FROM
membrer
WHERE
login
=
'
{
$
_GET
[
'
login
'
]
}
'
AND
passwd
=
'
{
$
_GET
[
'
passwd
'
]
}
'

essayer
de
fournir
mot
de
passe
particulier
...
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
pdostat
=
$
pdo-
>
query
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
WHERE
login
=
'
{
$
_GET
[
'
login
'
]
}
'
AND
passwd
=
'
{
$
_GET
[
'
passwd
'
]
}
'
SQL
)
;
echo
`
`
requête
:
\n
$
req\n
'
'
;
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
'
'
;
else
echo
`
`
désoler
...
'
'
;
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
saisir
de
utilisateur
par
formulaire
:

mail
:
whatever

pass
:
who_cares
?
URL
:
?
mail
=
whatever
&
passwd
=
who_cares
?
requête
:
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
?
'
désoler
...
:
:
programmation
Web
exemple
concret
de
injection
SQL
(
)
saisir
de
utilisateur
:

mail
:
whatever

pass
:
who_cares
?
'
or
true
!
=
'
URL
:
?
mail
=
whatever
&
passwd
=
who_cares
?
'
%
20OR
%
20true
!
=
'
requête
:
select
*
FROM
membrer
WHERE
login
=
'
whatever
'
AND
passwd
=
'
who_cares
?
'
or
true
!
=
'
'
bienvenue
John
:
:
programmation
Web
protection
contre
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
pdostat
=
$
pdo-
>
prepare
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
WHERE
login
=
?
AND
passwd
=
?
SQL
)
;
$
pdostat-
>
execute
(
array
(
$
_GET
[
'
login
'
]
,
$
_GET
[
'
passwd
'
]
)
)
;
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
{
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
\n
'
'
;
}
else
{
echo
`
`
désoler
...
\n
'
'
;
}
:
:
programmation
Web
protection
contre
injection
SQL
(
)
$
pdo
=
new
PDO
(
'
mysql
:
host
=
localhost
;
dbname
=
test
'
)
;
$
login
=
$
pdo-
>
quote
(
$
_GET
[
'
login
'
]
)
;
$
passwd
=
$
pdo-
>
quote
(
$
_GET
[
'
passwd
'
]
)
;
$
pdostat
=
$
pdo-
>
query
(
$
req
=
<
<
<
SQL
select
*
FROM
membrer
requête
:
WHERE
login
=
$
login
select
*
AND
passwd
=
$
passwd
FROM
membrer
SQL
WHERE
login
=
'
whatever
'
)
;
AND
passwd
=
'
who_cares
?
\
'
or
true
!
=
\
'
'
echo
`
`
requête
:
\n
$
req\n
'
'
;
désoler
...
if
(
$
utilisateur
=
$
pdostat-
>
fetch
(
)
)
{
echo
`
`
bienvenue
{
$
utilisateur
[
'
nom
'
]
}
\n
'
'
;
}
:
:
programmation
Web
