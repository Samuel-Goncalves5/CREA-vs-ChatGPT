PHP
(
MYSQL
)
introduction

HTML
:
page
destiner
à
être
publier
sur
Internet
texte
à
afficher
+
instruction
de
mise
en
page

d
’
instruction
de
calcul
de
traitement
conditionnel


site
de
en
riche
en
information
nécessiter
croissant
d
’
améliorer
contenu
site

mettre
à
jour
manuel
complexe




exemple
:
modifier
entêter
sur
page
!
besoin
de
réponse
spécifique
lier
à
un
BD
par
exemple
passage
de
site
statique
à
site
dynamique
Web
dynamique
–
coter
client

traiter
par
navigateur
:

résultat
variable
en
fonction
navigateur

nécessiter
de
test
important

indépendant


serveur
de
rechargement
de
page
,
être
faire
en
local
confiance
:

source
programme
disponible

donnée
envoyer
serveur
fiable

base
de
donnée
stocker
chez
client
?
Web
dynamique
–
coter
serveur

interprétation
être
réaliser
par
serveur
:

indépendant
de
machine
navigateur

`
`
compatible
'
'
avec
navigateur



échange
concerner
HTML
(
Json
autre
)
source
être
sur
serveur
invisible
besoin
de
échange
entre
navigateur
serveur

rechargement

ajax
...
de
page
à
modification
Web
dynamique
–
client
serveur

falloir
deux
!

script
côté
client
(
Javascript
)
:
calcul
traitement
simple

mettre
à
jour
de
page
web
sans
rechargement
(
ajax
)


script
côté
serveur
(
Php
autre
)
:
calcul
,
traitement
conséquent

requête
vers
base
de
donnée

opération
sécuriser

langage
Php
-
histoire



PHP
:
Hypertext
PreProcessor
premier
version
de
PHP
(
Personal
home
page
)
sortir
en
version
actuel
être
sortir
en
:


version
être
maintenir
depuis
août
.
environ
%
site
web
dynamique
utiliser
php
.
langage
Php


langage
pour
création
d
’
application
Web
exécution
coter
serveur

indépendant
de
plate-forme
utiliser

facile
à
combiner
avec
serveur
Web
BD

logiciel



en
un
(
WampServer
,
EasyPhp
,
...
)
.
gratuit
,
coder
source
disponible
Ecriture
de
script
simple
inclusion
direct
de
Php
dans
HTML
langage
Php

programme
exécuter
côté
serveur
Web

extension
.php
pour
page
PHP

fichier
pouvoir
contenir
HTML

fichier
.php
être
stocker
sur
serveur

désigner
par
URL
:
http
:
/
/
dns-remplacer
/
dns-remplacer

chargement
de
URL
provoquer
exécution
côté
serveur

script
Php
aller
créer
HTML
exemple

vouloir
créer
page
web

pour
nombre
quelconque
de
valeur
(
venir
de
formulaire
par
exemple
)
.
<
html
>
<
body
>
:
<
br
/
>
:
<
br
/
>
:
<
br
/
>
<
/
body
>
<
/
html
>
version
Javascript

insertion
de
javascript
avec
balise
<
script
>
boucler
for
classique

affichage
contenu
via
dns-remplacé

concaténation
de
chaîne
avec
signe
+


exécuter
par
navigateur
<
html
>
<
body
>
<
script
type
=
'
'
text
/
javascript
'
'
>
for
(
var
i
=
;
i
<
=
;
i++
)
dns-remplacer
(
i+
'
'
:
`
`
+i
*
i+
'
'
<
br
/
>
'
'
)
;
<
/
script
>
<
/
body
>
<
/
html
>
version
Php

insertion
de
Php
avec
balise
<
?
php
boucle
for
classique

affichage
contenu
via
echo

concaténation
de
chaîne
avec
signe


exécuter
par
serveur
envoyer
navigateur
<
html
>
<
body
>
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
echo
$
i
.
'
'
:
`
`
.
(
$
i
*
$
i
)
.
`
`
<
br
/
>
'
'
;
?
>
<
/
body
>
<
/
html
>
différence
entre
Javascript
Php

Javascript
:
navigateur
demander
fichier
html

fichier
html
(
contenir
javascript
)
être
envoyer

navigateur
exécuter
javascript

affichage
être
faire
de
manière
dynamique


Php
:
navigateur
demander
fichier
php

serveur
exécuter
code
php
envoyer
résultat

page
envoyer
navigateur
être
afficher

coder
Php
–
autre
version

seul
partie
dynamique
être
faire
en
Php
reste
être
html
de
base

lisible

<
html
>
<
body
>
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
?
>
<
?
php
echo
$
i
?
>
:
<
?
php
echo
$
i
*
$
i
;
?
>
<
br
/
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
coder
Php
–
autre
version

fichier
html
être
créer
en
Php
:

syntaxe
lourd
<
?
php
echo
`
`
<
html
>
\n
'
'
;
echo
`
`
<
body
>
\n
'
'
;
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
$
i
.
'
'
:
`
`
.
(
$
i
*
$
i
)
.
`
`
<
br
/
>
\n
'
'
;
}
echo
`
`
<
/
body
>
\n
'
'
;
echo
`
`
<
/
html
>
\n
'
'
;
?
>
PHP
-
syntaxe
variable
variable

variable
être
précéder
de
$


type
:


$
i
être
variable
appeler
i
entier
,
réel
,
chaîne
de
caractère
,
objet
de
déclaration
explicite
,
affectation
de
valeur
suffire


affectation
par
valeur
:
$
i
=
affectation
par
(
référence
)
variable
:
$
j
=
&
$
i


changement
de
type
automatique
:


modification
de
$
i
modifier
$
j
(
pointeur
en
C
)
$
compteur
=
'
'
premier
'
'
;
valeur
par
défaut
avant
affectation

attention
essayer
de
lire
contenu
!
variable

variable
local


visible
à
l
’
intérieur
d
’
contexte
d
’
utilisation
variable
global


visible
dans
script
utilisation
de
l
’
instruction
`
`
global
'
'
pour
accéder
à
variable
global
dans
contexte
local
$
var
=
;
function
test
(
)
{
global
$
var
;
echo
$
var
;
}
chaîne
de
caractère

création
/
affectation
entre
guillemet


concaténation
avec
signe
.


$
test
=
'
'
avoir
'
'
;
$
test
=
'
'
bonjour
'
'
.
`
`
revoir
'
'
;
substitution
possible
de
variable
à
intérieur
de
chaîne
:


'
'
x
$
test
x
'
'
être
similaire
à
`
`
x
`
`
.
$
test
.
'
'
x
'
'
de
substitution
avec
apostrophe


'
x
$
test
x
'
;
/
/
`
`
x
$
test
x
'
'
encodage
caractère
spécial
obligatoire
:

\
$
\\
\n
\t
\
'
'
...
création
de
variable
dynamique

possibilité
de
créer
variable
dynamique
:

création
à
partir
contenu
de
autre
variable
.
$
var
=
'
'
test
'
'
;
$
$
var
=
'
'
test2
'
'
;
/
/
similaire
à
$
test
=
'
'
test2
'
'
;
echo
`
`
$
var
$
test
$
{
$
var
}
'
'
;
/
/
affiche
`
`
test
test2
test2
'
'
/
/
similaire
avec
tableau
$
nom_variable
=
array
(
`
`
val0
'
'
,
`
`
val1
'
'
)
;
$
{
$
nom_variable
[
]
}
=
`
`
x
'
'
;
opération
sur
chaîne

longueur
de
chaîne
strlen

strlen
(
$
str
)

comparaison
=
=

$
x

=
=
$
concaténation
.

$
x
.
$

nombreux
fonction
de
manipulation
disponible
fonction
sur
chaîne

afficher
chaîne
de
caractère
:


retourner
morceau
de
chaîne
:
substr
(
$
chaine
,
$
debut
,
$
longueur
)



$
debut
pouvoir
être
négatif
:
partir
de
fin
$
longueur
être
facultatif
:
fin
de
chaîne
être
retourner
couper
chaîne
en
morceau
avec
délimiteur
:


echo
$
chaine
;
...
$
tableau
=
explode
(
$
delimiteur
,
$
chaine
)
;
instruction
instruction
conditionnel

if
then
else

définition
spécial
pour
else
if
(
obligatoire
)
if
(
cond
)
{
...
}
elseif
(
cond
)
{
...
}
else
{
...
}
/
/
version
court
:
(
condition
)
?
instructionSiVrai
:
instructionSiFaux
;
instruction
conditionnel

switch
(
...
)
{
case
...
:
...
;
}
switch
(
expression
)
{
case
`
`
'
'
:
...
;
break
;
case
`
`
'
'
:
...
;
break
;
case
`
`
'
'
:
...
;
break
;
default
:
...
}
boucle

boucle
for
:

for

(
initialisation
;
condition
;
increment
)
{
...
}
boucle
while
:

while
(
condition
)
{
...
}

do
{
...
}
while
(
condition
)
;
instruction
conditionnel

saut
inconditionnel


arrêt
inconditionnel


continuer
:
terminer
itération
courant
de
boucle
break
:
terminer
boucle
arrêt
de
exécution
script

exit
:
terminer
script
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
if
(
$
i
=
=
)
continu
;
echo
$
i
.
`
`
<
br
/
>
'
'
;
}
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
if
(
$
i
=
=
)
break
;
echo
$
i
.
`
`
<
br
/
>
'
'
;
}
/
/
afficher
valeur
sauf
/
/
affiche
jusqu
'
à
(
exclure
)
tableau
tableau

création
à
l
’
aider
de
fonction
array
(
)

$
tableau

=
array
(
,
`
`
deux
'
'
,
)
;
tableau
à
dimension

élément
pouvoir
être
de
différent
type

L
’
index
d
’
tableau
commencer
à

fonction
:

count
(
)
pour
avoir
nombre
d
’
élément
d
’
tableau
tableau
simple

association
numéro
-
valeur
/
/
création
tableau
$
tableau
=
array
(
valeur0
,
valeur1
,
...
,
valeurN
)
;
/
/
affectation
de
élément
$
tableau
[
indice
]
=
valeur
;
/
/
récupération
de
élément
$
variable
=
$
tableau
[
indice
]
;
/
/
parcours
version
for
(
$
i
=
;
$
i
<
count
(
$
tableau
)
;
$
i++
)
echo
$
i
.
'
'
`
`
.
$
tableau
[
$
i
]
.
`
`
<
br
/
>
'
'
;
/
/
parcours
version
foreach
(
$
tableau
avoir
$
valeur
)
echo
$
valeur
.
`
`
<
br
/
>
'
'
;
tableau
associatif

association
clé
de
index
-
valeur
/
/
création
tableau
$
tableau
=
array
(
cle0
=
>
val0
,
cle1
=
>
val1
,
...
,
cleN
=
>
valN
)
;
/
/
affectation
de
élément
$
tableau
[
`
`
cle
'
'
]
=
valeur
;
/
/
récupération
de
élément
$
variable
=
$
tableau
[
`
`
cle
'
'
]
;
/
/
parcours
version
foreach
(
$
tableau
avoir
$
cle
=
>
$
valeur
)
echo
$
cle
.
'
'
`
`
.
$
valeur
.
`
`
<
br
/
>
;
/
/
parcours
version
reset
(
$
tableau
)
;
while
(
list
(
$
cle
,
$
valeur
)
=
each
(
$
tableau
)
)
echo
$
cle
.
'
'
`
`
.
$
valeur
.
`
`
<
br
/
>
;
tableau
multidimensionnel

de
méthode
de
création
natif
:

imbriquer
tableau
.
/
/
création
de
tableau
à
deux
dimension
$
tab1
=
array
(
Val0
,
Val1
,
...
,
ValN
)
;
$
tab2
=
array
(
Val0
,
Val1
,
...
,
ValN
)
;
$
tableau
=
array
(
$
tab1
,
$
tab2
)
;
/
/
affectation
de
élément
$
tableau
[
indice
]
[
indice
]
=
$
variable
;
/
/
récupération
de
élément
$
variable
=
$
tableau
[
indice
]
[
indice
]
;
/
/
parcours
for
(
$
i
=
;
$
i
<
count
(
$
tableau
)
;
$
i++
)
for
(
$
j
=
;
$
j
<
count
(
$
tableau
[
$
i
]
)
;
$
j++
)
echo
$
i
.
'
'
`
`
.
$
j
.
'
'
`
`
.
$
tableau
[
$
i
]
[
$
j
]
.
`
`
<
br
/
>
'
'
;
fonction
sur
tableau

taille
de
tableau
:


compter
nombre
de
occurrence
valeur
de
tableau
:



$
tab2
=
array_map
(
`
`
fonction
'
'
,
$
tab
)
;
filtrage
par
fonction
(
supprimer
élément
vérifier
critère
)
:


sort
(
$
tab
)
;
/
/
selon
valeur
ksort
(
$
tab
)
;
/
/
selon
clef
Mappage
par
fonction
(
appliquer
fonction
à
élément
)
:


$
tab2
=
array_count_values
(
$
tab
)
;
tri
:


count
(
)
$
tab2
=
array_filter
(
$
tab
,
`
`
fonction
'
'
)
intervertir
clef
valeur
:

$
tab2
=
array_flip
(
$
tab
)
;
fonction
fonction

de
typage
argument

valeur
de
retour


récursivité
possible
<
?
php
/
/
définition
de
fonction
factoriel
function
factoriel
(
$
n
)
{
if
(
$
n
<
)
return
;
else
return
$
n
*
factoriel
(
$
n-1
)
;
}
/
/
appel
de
fonction
afficahage
résultat
echo
factoriel
(
)
;
?
>
fonction

valeur
par
défaut
possible
pour
argument




argument
pouvoir
avoir
valeur
par
défaut
function
racine
(
$
x
,
$
racine
=
)
{
}
appel
:
racine
(
$
avoir
,
$
b
)
racine
(
$
avoir
)
valeur
par
défaut
pour
dernier
argument

racine
(
$
x
=
,
$
degre
)
impossible
/
/
seul
argument
$
degre
valoir
par
défaut
function
racine
(
$
x
,
$
degre
=
)
{
return
pow
(
$
x
,
/
$
degre
)
;
}
racine
(
,
)
;
/
/
retourner
racine
cubique
de
racine
(
)
;
/
/
retourner
racine
carrer
de
fonction

nombre
d
’
argument
inconnu
:

func_num_args
(
)
:
nombre
d
’
argument

func_get_arg
(
$
i
)
:
argument
i
.

numéroter
à
partir
de
/
/
fonction
calculer
produit
de
argument
function
produire
(
)
{
$
prod
=
;
for
(
$
i
=
;
$
i
<
func_num_args
(
)
;
$
i++
)
$
prod
*
=
func_get_arg
(
$
i
)
;
return
$
prod
;
}
echo
produire
(
,
,
,
,
,
)
;
fonction

passage
de
paramètre
par
valeur
:


utiliser
copie
paramètre
de
appel
.
passage
de
paramètre
par
référence
:


utiliser
paramètre
de
appel
(
modifiable
)
.
passage
de
paramètre
avec
&
function
double
(
$
val
)
{
$
val
*
=
;
return
$
val
;
}
$
x
=
;
$
=
double
(
$
x
)
;
/
/
=
x
=
$
=
double
(
&
$
x
)
;
/
/
=
x
=
variable
global
statique

Static
permettre
de
conserver
variable
dans
fonction
$
v
=
;
function
test
(
)
{
global
$
v
;
/
/
variable
global
static
$
x
=
;
/
/
variable
statique
$
x+
=
$
v
;
echo
$
x
.
`
`
<
br
/
>
'
'
;
}
test
(
)
;
/
/
affiche
test
(
)
;
/
/
affiche
appel
dynamique

similaire
variable
dynamique
function
bonjour
(
)
{
echo
`
`
bonjour
<
br
/
>
'
'
;
}
function
bonsoir
(
)
{
echo
`
`
bonsoir
<
br
/
>
'
'
;
}
/
/
création
de
variable
contenir
nom
de
fonction
$
salut
=
(
date
(
`
`
heure
'
'
)
<
=
)
?
`
`
bonjour
'
'
:
'
'
bonsoir
'
'
;
$
salut
(
)
;
fonction
de
fonction

vérifier
existence
de
fonction
:


retourner
liste
fonction
défini
:


$
tableau
=
get_defined_functions
(
)
;
enregistrer
fonction
à
exécuter
à
fin
script
:


function_exists
(
`
`
fonction
'
'
)
;
register_shutdown_function
(
`
`
fonction
'
'
)
;
...
fonction
utile

Header
:

permettre
de
modifier
entêter
protocole
http

utilisation
principal
:
redirection
vers
autre
page
if
(
isConnected
(
$
user
)
)
{
header
(
`
`
location
:
dns-remplacer
'
'
)
;
}
else
{
header
(
`
`
location
:
dns-remplacer
'
'
)
;
}
formulaire
exploitation
d
’
formulaire





accès
à
page
formulaire
remplissage
/
modification
champ
envoi
formulaire
(
submit
)
récupération
formulaire
soumettre
traitement
formulaire
calcul

transformation

accès
BD
...


client
envoi
de
réponse
client
serveur
récupération
paramètre

paramètre
être
récupérer
dans
tableau
:

$
_POST
[
`
`
nom
'
'
]
méthode
d
’
envoi
être
POST

$
_GET
[
`
`
nom
'
'
]
méthode
d
’
envoi
être
GET

<
form
method
=
'
'
POST
'
'
action
=
'
'
...
'
'
>

exemple

dans
formulaire
<
input
name
=
'
'
nom
'
'
>

récupérer
contenu
en
php
:

$
_POST
[
`
`
nom
'
'
]

$
_GET
[
`
`
nom
'
'
]
pour
continuer

simple
pour
comprendre
:

utiliser
méthode
GET
pour
passer
argument

regarder
URL
appelé

http
:
/
/
dns-remplacer
/
dns-remplacer
?
champ
=
valeur

différent
paramètre
envoyer
valeur
être
visible

$
_GET
[
`
`
champ
'
'
]
valoir
valeur


utiliser
POST
fois
avoir
comprendre
spécificité
selon
type
:

case
à
cocher
être
envoyer
sous
forme
de
tableau
exemple
<
form
method
=
'
'
GET
'
'
action
=
'
'
dns-remplacer
'
'
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Champ1
'
'
value
=
'
'
texte
'
'
/
>
<
br
/
>
<
textarea
name
=
'
'
Champ2
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
texte
<
/
textarea
>
<
br
/
>
<
select
name
=
'
'
Champ3
'
'
>
<
option
valoir
=
'
'
Option_1
'
'
>
Option_1
<
/
option
>
<
option
valoir
=
'
'
Option_2
'
'
selected
=
'
'
selected
'
'
>
Option_2
<
/
option
>
<
/
select
>
<
br
/
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
Champ4
[
]
'
'
value
=
'
'
Case_1
'
'
checked
=
'
'
checked
'
'
>
caser
<
br
>
<
input
type
=
'
'
checkbox
'
'
name
=
'
'
Champ4
[
]
'
'
value
=
'
'
Case_2
'
'
checked
=
'
'
checked
'
'
>
caser
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_1
'
'
>
radio
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_2
'
'
>
radio
<
br
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
Champ5
'
'
value
=
'
'
Case_3
'
'
>
radio
<
br
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
soumission
'
'
value
=
'
'
soumettre
'
'
>
<
/
form
>
dns-remplacer
?
Champ1
=
texte
&
Champ2
=
texte
&
Champ3
=
Option_2
&
Champ4
[
]
=
Case_1
&
Champ4
[
]
=
Case_2
&
champ
=
Case_2
&
soumission
=
soumettre
exemple

récupération
avec
$
_GET

vérification
de
existence
de
variable
:


isset
(
var
)
attention
contenu
chose
reçu

nombreux
faille
faire
attention
!
/
/
affichage
de
champ
recevoir
via
formulaire
$
resultat
=
$
_GET
[
`
`
Champ1
'
'
]
.
`
`
<
br
>
'
'
;
$
resultat
.
=
$
_GET
[
`
`
Champ2
'
'
]
.
`
`
<
br
>
'
'
;
$
resultat
.
=
$
_GET
[
`
`
Champ3
'
'
]
.
`
`
<
br
>
'
'
;
for
(
$
i
=
;
$
i
<
count
(
$
_GET
[
`
`
Champ4
'
'
]
)
;
$
i++
)
{
$
resultat
.
=
$
_GET
[
`
`
Champ4
'
'
]
[
$
i
]
.
`
`
<
br
>
'
'
;
}
if
(
isset
(
$
_GET
[
`
`
Champ5
'
'
]
)
)
$
resultat
.
=
$
_GET
[
`
`
Champ5
'
'
]
.
`
`
<
br
>
'
'
;
echo
$
resultat
;
fonctionnalité
supplémentaire
date
heure

retourner
date
courant
dans
chaîne
de
caractère
:
$
chainer
=
date
(
format
[
,
nombre
]
)
;

$
chaine
=
date
(
`
`
/
m
/
d
'
'
)
;
retourne
/
/


pour
tableau
associatif
:


$
tableau
=
getdate
(
[
nombre
]
)
;
vérification
de
validité
de
date
:

checkdate
(
mois|moi
,
jour
,
année
)
;
cookies

écrire
cookies
:

fonction
setcookie
(
`
`
PremierCookie
'
'
,
`
`
salut
'
'
,
time
(
)
*
*
)
;




timestamp
en
seconde|second
(
différent
de
Javascript
)
à
exécuter
avant
autre
envoi
vers
serveur
(
envoyer
dans
entêter
)
cookie
visible
avant
prochain
chargement
de
page
lecture
:

(
$
_COOKIE
[
`
`
PremierCookie
'
'
]
setcookie
(
`
`
PremierCookie
'
'
,
`
`
salut
'
'
,
time
(
)
*
*
)
;
if
(
!
isset
(
$
_COOKIE
[
`
`
PremierCookie
'
'
]
)
)
{
echo
`
`
cookie
définir
<
br
/
>
'
'
;
}
else
{
echo
$
_COOKIE
[
`
`
PremierCookie
'
'
]
.
`
`
<
br
/
>
'
'
;
}
session

objectif
:
garder
donnée
de
page
en
page
.

session_start
(
)




créer
nouveau
session
raviver
session
existant
$
_SESSION
[
`
`
nom
'
'
]
=
valeur
permettre
de
créer
variable
de
session
session_destroy
(
)
détruire
session
en
cours|cour
session_start
(
)
;
$
_SESSION
[
`
`
ma_variable
'
'
]
=
;
session
–
exemple
<
html
>
<
body
>
<
form
method
=
'
'
post
'
'
action
=
'
'
dns-remplacer
'
'
>
<
tabler
border
=
'
'
'
'
>
<
tr
>
<
td
>
nom
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
size
=
'
'
'
'
value
=
'
'
x
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
prénom
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Prenom
'
'
size
=
'
'
'
'
value
=
'
'
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
eMail
:
<
/
td
>
<
td
>
<
input
type
=
'
'
text
'
'
name
=
'
'
Email
'
'
size
=
'
'
'
'
value
=
'
'
z
'
'
>
<
/
td
>
<
/
tr
>
<
tr
>
<
td
colspan
=
'
'
'
'
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
soumettre
'
'
value
=
'
'
envoyer
'
'
>
<
/
td
>
<
/
tr
>
<
/
table
>
<
/
form
>
<
/
body
>
<
/
html
>
session
–
exemple
`
`
dns-remplacer
'
'
<
?
php
session_start
(
)
;
$
_SESSION
[
`
`
nom
'
'
]
=
$
_POST
[
`
`
nom
'
'
]
;
$
_SESSION
[
`
`
prenom
'
'
]
=
$
_POST
[
`
`
Prenom
'
'
]
;
$
_SESSION
[
`
`
email
'
'
]
=
$
_POST
[
`
`
Email
'
'
]
;
?
>
session
–
exemple
`
`
dns-remplacer
'
'
<
html
>
<
body
>
<
?
php
session_start
(
)
;
echo
`
`
identifier
:
'
'
.session_id
(
)
.
`
`
<
br
/
>
'
'
;
echo
`
`
nom
de
session
:
'
'
.session_name
(
)
.
`
`
<
br
/
>
'
'
;
echo
`
`
nom
:
`
`
.
$
_SESSION
[
`
`
nom
'
'
]
.
`
`
<
br
>
'
'
;
echo
`
`
prénom
:
`
`
.
$
_SESSION
[
`
`
prenom
'
'
]
.
`
`
<
br
>
'
'
;
echo
`
`
mail
:
`
`
.
$
_SESSION
[
`
`
email
'
'
]
.
`
`
<
br
>
'
'
;
session_destroy
(
)
;
?
>
<
/
body
>
<
/
html
>
envoyer
email

fonction
mail
:
mail
(
$
recipient
,
$
subject
,
$
message
[
,
$
headers
,
$
params
]
)
;

nécessiter
serveur
mail
accessible
sur
serveur

<
?
php
$
dest
=
`
`
<
moi
@
dns-remplacer
>
,
<
@
dns-remplacer
'
'
;
$
subject
=
`
`
test
'
'
;
$
content
=
`
`
bonjour
,
\n
'
'
;
$
content
.
=
`
`
être
message
de
test\n
'
'
;
$
content
.
=
`
`
'
'
;
$
headers
=
`
`
From
:
<
moi
@
dns-remplacer
>
\n
'
'
;
$
headers
.
=
`
`
Content-Type
:
text
/
html
;
charset
=
iso-8859-1\n
'
'
;
$
headers
.
=
`
`
Cc
:
@
dns-remplacer
\n
'
'
;
mail
(
$
dest
,
$
subject
,
$
content
,
$
headers
)
;
?
>
créer
autre
chose
HTML

Php
pouvoir
créer
autre
chose
HTML

image
:

grand
choix
de
format
,
GIF
,
PNG
,
JPEG
,
WBMP
...
fichier
pdf
(
librairie
tcpdf
)
,
csv
,
word
,
excel
,
...

limitation
,
suffire
de
savoir
modifier
entêter
(
header
)
afficher
contenu
...

<
?
php
header
(
`
`
Content-type
:
image
/
png
'
'
)
;
$
im
=
imagecreatefrompng
(
`
`
dns-remplacer
'
'
)
;
$
im
=
imagerotate
(
$
im
,
,
)
;
imagepng
(
$
im
)
;
?
>
PHP
MYSQL
base
de
donnée

présentation
:
HTML
,
Javascript

navigateur
:
IE
,
Firefox
,
chrome
,
...


traitement
/
création
de
page
:
PHP
,
ASP
,
JSP
,
servlet
,
CGI
,
...

serveur
Web
apache
,
IIS
,
...


donnée
:
table
SQL

serveur
BD
Access
,
oracle
,
MySQL
,
PostGreSQL
,
...

base
de
donnée

PHP
permettre
de
travailler
avec
plupart
SGBDR



trois
fonction
être
essentiel
:




Mysql
,
oracle
,
Sybase
,
Microsoft
SQL
Server
,
PostgreSQL
,
...
dans
autre
cas
pouvoir
utiliser
driver
spécifique
connexion
serveur
exécution
de
requête
SQL
gestion
résultat
aller
voir
fonctionnement
avec
`
`
PHP
dater
Objects
'
'
:

indépendant
(
)
SGBD
utiliser
.
MySQL
Php
–
connexion

connexion
=
création
de
objet
PDO
:




adresse
de
base
nom
de
table
nom
de
utilisateur
mot
de
passe
déconnexion
:
destruction
de
objet
try
{
/
/
ouverture
de
connexion
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
port
=
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
...
/
/
fermeture
de
connexion
$
dbh
=
null
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
MySQL
Php
–
requête

avec
:
méthode
query
pour
recherche

méthode
exec
pour
modification


libération
ressource
:

closeCursor
(
)
;
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
'
)
;
$
nb_modifs
=
$
dbh-
>
exec
(
'
UPDATE
`
test
`
set
test_id
=
'
)
;
...
$
reponse-
>
closeCursor
(
)
;
$
dbh
=
null
;
MySQL
Php
–
traitement

nombre
de
réponse
:


rowCount
(
)
traitement
réponse
:
fetch
(
)
:
retourner
résultat
un
par

fetchAll
(
)
:
retourner
tableau
avec
résultat

if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
$
donnees
[
'
test_id
'
]
.
'
'
.
$
donnees
[
'
test_val
'
]
.
'
<
br
/
>
'
;
}
}
else
{
echo
`
`
résultat
<
br
/
>
'
'
;
}
MySQL
Php
–
exemple
<
html
>
<
body
>
<
ul
>
<
?
php
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
ip-remplacée
>
;
dbname
=
test
'
,
'
root
'
,
`
`
)
;
$
id
=
$
_POST
[
'
id
'
]
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
$
id
)
;
if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
`
`
<
li
>
'
'
.
$
donnees
[
'
test_id
'
]
.
'
:
'
.
$
donnees
[
'
test_val
'
]
.
'
<
/
li
>
'
;
}
}
else
{
echo
`
`
<
li
>
résultat
<
/
li
>
'
'
;
}
$
reponse-
>
closeCursor
(
)
;
$
dbh
=
null
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
?
>
<
/
ul
>
<
/
body
>
<
/
html
>
sécurité

passe-t-il
:

$
id
=
`
`
'
'

$
id
=
`
`
or
'
'

$
id
=
`
`
;
drop
table
`
test
`
;
'
'
$
id
=
$
_POST
[
'
id
'
]
;
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
WHERE
test_id
=
'
.
$
id
)
;
select
*
FROM
`
test
`
WHERE
test_id
=
select
*
FROM
`
test
`
WHERE
test_id
=
select
*
FROM
`
test
`
WHERE
test_id
=
;
drop
table
`
test
`
;
requêter
avancer

préparation
de
requête
générique
:

prepare
(
$
query
)
;

execute
avec
argument

sécuriser
version
précédent
,
mettre
en
cache
,
portable
...
en
clair
à
utiliser
$
req
=
$
dbh-
>
prepare
(
'
select
test_id
,
test_val
FROM
`
test
`
WHERE
test_id
=
?
AND
test_val
=
?
'
)
;
$
req-
>
execute
(
array
(
$
x
,
$
)
)
;
remarque
final


limiter
maximum
droit
de
utilisateur
.
donnée
transmettre
par
client
être
fiable
:

SQL
injection

Javascript
injection

tenter


de
mettre
javascript
:
alert
(
`
`
hello
!
`
`
)
;
dans
input
tester
existence
/
validité
de
fichier
/
code
à
inclure
.
regarder
logs
.
MYSQL
MySQL
–
type
de
donnée




INT
FLOAT
TEXT
DATETIME
/
TIMESTAMP


ENUM
(
'
value1
'
,
'
value2
'
,
...
)
:


Ensemble
fixer
de
valeur
set
(
'
value1
'
,
'
value2
'
,
...
)
:


date
heure
/
horaire
Unix
un
parmi
de
autre
MySQL
–
opération

création
de
base
de
donnée

CREATE

suppression
de
base
de
donnée

drop

if

DATABASE
nom_bd
DATABASE
[
if
EXISTS
]
nom_bd
EXISTS
éviter
erreur
base
exister
.
utilisation
d
’
base
de
donnée

user

nom_bd
base
spécifier
être
utiliser
par
défaut
.
MySQL
–
opération

CREATE
table
:
permettre
de
créer
nouveau
table
dans
base
de
donnée
courant

CREATE
tabler
tbl_name
[
(
champ1
,
...
)
]

AUTO_INCREMENT
:
contenu
être
incrémenter
après
insertion

PRIMARY_KEY
:
clé
d
’
index
primaire
unique
CREATE
tabler
`
test
`
(
`
test_id
`
INT
NOT
NULL
AUTO_INCREMENT
PRIMARY
KEY
,
`
test_val
`
INT
NOT
NULL
)
MySQL
–
opération

suppression
d
’
table

drop

table
tbl_name
[
,
tbl_name
,
...
]
modifier
structure
d
’
table
existant

ALTER
tabler
tbl_name
alter_spec
[
,
alter_spec
...
]
MySQL
–
opération

insérer
de
nouveau
enregistrement
insert
INTO
articler
(
Champ1
,
Champ2
)
valoir
(
'
'
,
'
test
'
)
;

remplacer
enregistrement
replacer
INTO
articler
(
Champ1
,
Champ2
)
valoir
(
'
'
,
'
test
'
)
;
MySQL
–
opération

modification
valeur
UPDATE
table_name
set
column_name
=
expr1
[
WHERE
section_condition_where
]

suppression
d
’
enregistrement
DELETE
FROM
table_name
[
WHERE
definition
]
MySQL
–
opération

sélection
d
’
enregistrement
select
[
distinct
|
ALL
]
expression_de_selection
FROM
table
WHERE
expression_where
[
group
by
col_name
,
...
]
[
HAVING
where_definition
]
[
ORDER
by
[
ASC
|
DESC
]
]

exemple
select
*
FROM
articler
WHERE
PrixArt
>

select
NumGrArt
,
AVG
(
PrixArt
)
FROM
articler
group
by
NumArt

exemple
`
`
complet
'
'
simple
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
'
'
`
`
http
:
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
'
'
>
<
html
>
<
head
>
<
title
>
site
de
vente
en
ligne
<
/
title
>
<
/
head
>
<
body
>
<
div
id
=
'
'
container
'
'
>
<
div
id
=
'
'
header
'
'
>
<
ul
id
=
'
'
top_menu
'
'
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
index
<
/
avoir
>
<
/
li
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
rechercher
<
/
avoir
>
<
/
li
>
<
li
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
commander
<
/
avoir
>
<
/
li
>
<
/
ul
>
<
/
div
>
<
!
--
/
header
--
>
<
div
id
=
'
'
main
'
'
>
<
!
–
affichage
catalogue
venir
de
base
de
donnée
--
>
<
/
div
>
<
!
--
/
main
--
>
<
div
id
=
'
'
footer
'
'
>
<
p
>
copyright
&
copy
;
SdVeL
.
droit
réserver
<
/
p
>
<
/
div
>
<
!
--
/
footer
--
>
<
/
div
>
<
!
--
/
container
--
>
<
/
body
>
<
/
html
>
dns-remplacer
<
?
php
session_start
(
)
;
$
user
=
`
`
root
'
'
;
$
pwd
=
`
`
'
'
;
$
host
=
`
`
ip-remplacée
>
'
'
;
$
bdd
=
`
`
test
'
'
;
try
{
$
dbh
=
new
PDO
(
'
mysql
:
host
=
'
.
$
host
.
'
;
dbname
=
'
.
$
bdd
,
$
user
,
$
pwd
)
;
}
catch
(
exception
$
e
)
{
die
(
'
erreur
:
'
.
$
e-
>
getMessage
(
)
)
;
}
$
menu
=
array
(
'
'
dns-remplacer
'
'
=
>
`
`
index
'
'
,
'
'
dns-remplacer
'
'
=
>
`
`
rechercher
'
'
,
'
'
dns-remplacer
'
'
=
>
`
`
commander
'
'
)
;
?
>
dns-remplacé
<
?
php
include_once
(
'
dns-remplacer
'
)
;
?
>
<
!
DOCTYPE
html
public
`
`
-
/
/
W3C
/
/
DTD
XHTML
strict
/
/
'
'
`
`
http
:
/
/
dns-remplacer
/
TR
/
xhtml1
/
DTD
/
dns-remplacer
'
'
>
<
html
>
<
head
>
<
title
>
site
de
vente
en
ligne
<
/
title
>
<
/
head
>
<
body
>
<
div
id
=
'
'
container
'
'
>
<
div
id
=
'
'
header
'
'
>
<
ul
id
=
'
'
top_menu
'
'
>
<
?
php
foreach
(
$
menu
avoir
$
page_url
=
>
$
page_title
)
echo
`
`
<
li
>
<
avoir
href
=
\
'
'
$
page_url\
'
'
>
$
page_title
<
/
avoir
>
<
/
li
>
\n
'
'
;
?
>
<
/
ul
>
<
/
div
>
<
!
--
/
header
--
>
<
div
id
=
'
'
main
'
'
>
dns-remplacer
<
/
div
>
<
!
--
/
main
--
>
<
div
id
=
'
'
footer
'
'
>
<
p
>
copyright
&
copy
;
DVD
club
.
droit
réserver
<
/
p
>
<
/
div
>
<
!
--
/
footer
--
>
<
/
div
>
<
!
--
/
container
--
>
<
/
body
>
<
/
html
>
autre
page
création
de
de
page
nécessaire
:




modification
de
entêter
pied
de
page
via
fichier
dns-remplacé
,
dns-remplacé
modification
identifiants
de
connexion
via
fichier
dns-remplacé
...
rester
à
modifier
fichier
header
/
footer
faire
css
.

<
?
php
include
(
'
dns-remplacer
'
)
;
?
>
<
!
–
affichage
catalogue
venir
de
base
de
donnée
--
>
<
?
php
$
reponse
=
$
dbh-
>
query
(
'
select
*
FROM
`
test
`
'
)
;
if
(
$
reponse-
>
rowCount
(
)
>
)
{
while
(
$
donnees
=
$
reponse-
>
fetch
(
)
)
{
echo
...
}
}
else
{
echo
`
`
<
li
>
résultat
<
/
li
>
'
'
;
}
?
>
<
?
php
include
(
'
dns-remplacer
'
)
;
?
>
pour
aller

falloir
apprendre
:

fonction
de
base
supplémentaire

à
faire
confiance
client

gestion
objet
en
Php

méthode
de
programmation
avancer

MVC

gestion

...
de
template
