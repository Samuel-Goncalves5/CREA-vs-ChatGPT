cours|cour
introductif
PHP
Riad
MOKADEM
être
PHP
?
PHP
être
langage
interpréter
(
langage
de
script
)
exécuter
côté
serveur
(
script
CGI
,
ASP
,
...
)
côté
client
(
script
écrire
en
Javascript
applet
java
exécuter
sur
ordinateur
...
)
.
syntaxe
langage
provenir
de
langage
C
,
Perl
de
java
.
principal
atout
être
:
•
grand
communauté
de
développeur
partager
centaine
de
millier
de
exemple
de
script
PHP
;
•
•
•
gratuité
disponibilité
code
source
(
PHP
être
distribuer
sous
licence
GNU
GPL
)
;
•
simplicité
de
interfaçage
avec
base
de
donnée
(
de
nombreux
SGBD
être
supporter
,
utiliser
avec
langage
être
MySQL
,
SGBD
gratuit
disponible
sur
de
nombreux
plateforme
:
Unix
,
Linux
,
Windows
,
MacOs
X
,
Solaris
,
etc
...
)
;
•
intégration
sein
de
nombreux
serveur
web
(
apache
,
Microsoft
IIS
,
etc
.
)
.
simplicité
de
écriture
de
script
;
possibilité
de
inclure
script
PHP
sein
de
page
HTML
(
script
CGi
,
falloir
écrire
ligne
de
code
pour
afficher
ligne
en
langage
HTML
)
;
origine
de
PHP
langage
PHP
avoir
être
mettre
point
début
de
automne
par
Rasmus
Lerdorf
.
langage
de
script
permettre
de
conserver
trace
utilisateur
venir
consulter
CV
sur
site
,
grâce
à
accès
à
base
de
donnée
par
intermédiaire
de
requête
SQL
.
,
être
donner
de
nombreux
internaute
demander
programme
,
Rasmus
Lerdorf
mettre
en
ligne
en
premier
version
de
programme
baptiser
Personal
sommaire
page
Tools
,
Personal
home
page
v1.0
(
traduire
page
personnel
version
)
.
Etant
donner
succès
de
PHP
,
Rasmus
Lerdorf
décider
de
améliorer
langage
en
intégrer
structure
avancer
boucle
,
structure
conditionnel
,
intégrer
package
permettre
de
interpréter
formulaire
avoir
développer
(
fi
,
Form
Interpreter
)
support
de
mSQL
.
être
de
façon
version
langage
,
baptiser
pour
occasion
PHP
/
fi
version
,
vivre
jour
durant
été
.
être
utiliser
sur
de
nombreux
site
(
fin
,
en
milieu
de
année
)
.
à
partir
de
,
Zeev
Suraski
Andi
Gurmans
rejoindre
Rasmus
pour
former
équipe
de
programmeur
de
mettre
point
PHP
(
Stig
Bakken
,
Shane
Caraveo
Jim
Winstead
rejoindre
par
suite
)
.
être
version
de
PHP
être
disponible
juin
.
à
fin
de
année
version
de
PHP
,
baptiser
PHP4
,
être
apparaître
.
PHP
être
à
cinquième
version
.
SGBD
supporter
par
PHP
PHP
permettre
interfaçage
simple
avec
de
nombreux
système
de
gestion
de
base
de
donnée
(
SGBD
)
,
parmi
:
•
•
•
•
•
•
•
•
•
•
Adabas
D
dBase
Empress
FilePro
Informix
Interbase
mSQL
MySQL
oracle
PostgreSQL
•
•
•
•
Solid
Sybase
Velocis
Unix
dbm
interprétation
code
par
serveur
script
PHP
être
simple
fichier
texte
contenir
instruction
écrire
à
aide
de
caractère
ASCII
bit
(
caractère
accentué
)
inclus
dans
code
HTML
à
aide
de
balise
spécial
stocker
sur
serveur
.
fichier
devoir
avoir
extension
«
.php
»
pour
pouvoir
être
interpréter
par
serveur
.
,
navigateur
(
client
)
désirer
accéder
à
page
dynamique
réaliser
en
PHP
:
•
•
serveur
reconnaître
extension
de
fichier
PHP
transmettre
à
interpréteur
PHP
•
•
interpréteur
exécuter
instruction
envoyer
sortie
éventuel
serveur
dès
interpréteur
rencontrer
balise
indiquer
ligne
suivant
être
code
PHP
,
lire
instruction
:
exécuter
!
à
fin
script
,
serveur
transmettre
résultat
client
(
navigateur
)
.
script
PHP
être
interpréter
par
serveur
,
utilisateur
pouvoir
voir
code
source
!
code
PHP
stocker
sur
serveur
être
visible
par
client
dès
demander
accès
,
serveur
interprète
!
de
façon
modification
être
à
apporter
sur
navigateur
.
implantation
sein
code
HTML
script
être
interpréter
par
serveur
deux
condition
être
nécessaire
:
•
•
fichier
contenir
code
devoir
avoir
extension
.php
.html
code
PHP
contenir
dans
code
HTML
devoir
être
délimiter
par
balise
type
<
?
?
>
script
PHP
devoir
:
•
•
comporter
extension
.php
être
imbriquer
entre
délimiteur
<
?
?
>
pour
raison
de
conformité
avec
norme
(
XML
ASP
par
exemple
)
,
balise
pouvoir
être
utiliser
pour
délimiter
code
PHP
:
.
.
.
.
<
?
?
>
<
?
php
?
>
<
script
language
=
'
'
php
'
'
>
<
/
script
>
<
%
php
%
>
exemple
de
script
simple
exemple
classique
de
script
PHP
:
<
html
>
<
head
>
<
title
>
exemple
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
`
`
hello
world
'
'
;
?
>
<
/
body
>
<
/
html
>
noter
fonction
echo
permettre
de
afficher
sur
navigateur
chaine
délimiter
par
guillemet
.
interprétation
code
code
PHP
(
comprendre
entre
délimiteur
<
?
php
?
>
)
être
ensemble
de
instruction
terminer
par
point-virgule
(
en
langage
C
)
.
code
être
interpréter
,
espace
,
retour
chariot
tabulation
être
prendre
en
compte
par
serveur
.
être
de
conseiller
de
mettre
(
être
être
interpréter
pouvoir
utiliser
)
de
rendre
code
lisible
(
pour
,
utilisateur
pouvoir
lire
code
source
:
être
interpréter
)
.
commentaire
autre
façon
de
rendre
code
compréhensible
consister
à
insérer
commentaire
,
ligne
être
ignorer
par
serveur
de
interprétation
.
pour
faire
,
être
possible
,
en
langage
C
,
de
utiliser
balise
aller
permettre
de
délimiter
explication
interpréteur
ignorer
passer
à
suite
fichier
.
délimiteur
être
/
*
*
/
.
commentaire
être
noter
de
façon
suivant
:
/
*
commentaire
!
*
/
avoir
règle
à
respecter
:
•
commentaire
pouvoir
être
placer
importer
à
intérieur
délimiteur
de
script
PHP
•
•
•
•
commentaire
pouvoir
contenir
délimiteur
de
fin
de
commentaire
(
*
/
)
commentaire
pouvoir
être
imbriquer
commentaire
pouvoir
être
écrire
sur
ligne
commentaire
pouvoir
couper
mot
code
en
deux
être
possible
de
utiliser
type
de
commentaire
permettre
de
mettre
fin
de
ligne
en
commentaire
en
utiliser
double
slash
(
/
/
)
.
situer
à
droit
de
symbole
être
mettre
en
commentaire
.
typologie
manière
de
écrire
chose
en
langage
PHP
avoir
importance
.
langage
PHP
être
par
exemple
sensible
à
casse
(
en
anglais
case
sensitif
)
,
signifier
nom
contenir
majuscule
être
différent
même
nom
écrire
en
minuscule
.
,
règle
appliquer
fonction
,
spécification
langage
PHP
préciser
fonction
print
pouvoir
être
appeler
print
(
)
,
Print
(
)
PRINT
(
)
.
,
instruction
terminer
par
point-virgule
.
introduction
serveur
web
être
logiciel
permettre
de
rendre
accessible
à
de
nombreux
ordinateur
(
client
)
page
web
stocker
sur
disque
.
fiche
pratique
expliquer
installer
serveur
web
apache
sur
système
de
type
UNIX
(
distribution
de
Linux
RedHat
,
Mandrake
importer
autre
)
.
pour
connaissance
sur
Linux
Unix
être
nécessaire
.
but
de
fiche
aller
être
de
être
capable
de
récupérer
source
différent
élément
nécessaire
de
compiler
(
compilateur
C
être
nécessaire
,
être
installer
par
défaut
sur
plupart
distribution
Linux
)
de
avoir
système
opérationnel
.
installation
suivant
comprendre
installation
de
interpréteur
PHP
,
langage
de
programmation
permettre
de
créer
page
créer
,
SGBD
MySQL
,
système
de
gestion
de
base
de
donnée
relationnel
puissant
fonctionner
sous
Linux
(
gratuit
!
)
.
Télécharger
source
•
•
•
source
de
PHP
pouvoir
être
télécharger
sur
site
http
:
/
/
dns-remplacer
source
de
apache
pouvoir
être
télécharger
sur
site
http
:
/
/
dns-remplacer
source
de
MySQL
pouvoir
être
télécharger
sur
site
http
:
/
/
dns-remplacer
installer
apache
PHP
.
décompresser
archives
:
tar
zxvf
apache_1.3.x
.
dns-remplacé
tar
zxvf
php-3.0.x.tar
.
configurer
apache
cd
apache_1.3.x
.
/
configurer
--
prefix
=
/
www
.
configurer
PHP
cd
.
.
/
php-3.0.x
.
/
configurer
--
with-mysql
--
with-apache
=
.
.
/
apache_1.3.x
-enable-track-vars
.
préférer
installer
PHP
dans
autre
répertoire
,
falloir
utiliser
option
de
configuration
-with-config-file-path
=
/
path
compiler
PHP
make
make
install
.
installer
apache
cd
.
.
/
apache_1.3.x
.
.
/
configurer
--
prefix
=
/
www
--
activatemodule
=
src
/
module
/
php3
/
libphp3.a
make
make
install
.
modifier
fichier
de
configuration
de
PHP
cd
.
.
/
php-3.0.x
cp
dns-remplacer
/
usr
/
local
/
lib
/
dns-remplacer
pouvoir
éditer
fichier
de
configuration
/
usr
/
local
/
lib
/
dns-remplacer
.
.
Editez
fichier
de
configuration
serveur
apache
(
dns-remplacer
dns-remplacé
ajouter
ligne
suivant
:
AddType
application
/
x-httpd-php3
.php3
agir
de
choisir
extension
associer
script
PHP
.
par
souci
de
homogénéité
,
être
courir
de
choisir
extension
.php3
.
démarrer
serveur
apache
.
(
être
essentiel
de
arrêter
redémarrer
serveur
,
de
relancer
.
suffire
de
taper
apachectl
stop
,
apachectl
start
)
.
premier
lancement
pour
vérifier
installation
avoir
fonctionner
,
suffire
de
créer
petit
fichier
dans
racine
document
serveur
web
(
appeler
DocumentRoot
dans
fichier
de
configuration
dns-remplacer
)
.
nommer
fichier
dns-remplacer
,
mettre
code
suivre
dans
fichier
:
<
html
>
<
head
>
<
title
>
exemple
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
`
`
PHP
fonctionner
!
`
`
;
?
>
<
/
body
>
<
/
html
>
lancer
navigateur
sur
machine
entrer
URL
suivant
:
http
:
/
/
localhost
/
dns-remplacer
localhost
désigner
machine
sur
trouver
...
devoir
voir
apparaître
phrase
`
`
PHP
fonctionner
!
'
'
sur
navigateur
!
introduction
à
EasyPHP
de
faire
fonctionner
PHP
,
être
nécessaire
à
base
de
télécharger
source
depuis
site
spécialiser
(
par
exemple
dns-remplacer
)
,
de
compiler
(
de
éditer
lien
)
de
créer
fichier
exécutable
.
processus
demander
notion
avancer
en
informatique
,
être
trois
adepte
de
PHP
(
Emmanuel
Faivre
,
Laurent
Abbal
Thierry
Murail
)
avoir
mettre
point
package
(
appeler
EasyPHP
)
contenir
produit
incontournable
de
scène
PHP
:
•
•
•
•
serveur
Web
apache
moteur
de
script
PHP4
base
de
donnée
MySQL
outil
de
gestion
de
base
de
donnée
graphique
,
Phpmyadmin
EasyPHP
être
pack
fonctionner
sous
Windows
permettre
de
installer
en
clin
de
œil
élément
nécessaire
fonctionnement
de
site
web
dynamique
développer
en
PHP
récupérer
EasyPHP
pack
EasyPHP
être
disponible
sur
site
suivant
:
•
•
dns-remplacé
dns-remplacer
suffire
dans
premier
temps
de
télécharger
version
récent
de
EasyPHP
.
pouvoir
télécharger
à
adresse
:
page
de
téléchargement
de
EasyPhP
installer
EasyPHP
installation
de
EasyPHP
être
simple
,
avec
apparition
de
version
comporter
installeur
automatique
.
pour
installer
EasyPHP
,
suffire
dans
premier
temps
de
double-cliquer
sur
fichier
télécharger
:
écran
de
installation
de
EasyPHP
suivre
devoir
apparaître
,
cliquer
sur
Next
(
suivre
<
/
)
:
installeur
aller
demander
de
préciser
répertoire
de
installation
:
aller
demander
création
de
groupe
dans
menu
démarrer
aller
récapituler
élément
de
installation
avant
de
procéder
à
copie
fichier
.
après
copie
fichier
,
EasyPHP
présenter
écran
suivre
indiquer
installation
être
dérouler
pouvoir
de
installation
installeur
indiquer
erreur
suivant
:
erreur
indique
librairie
dns-remplacer
n
'
avoir
pû
être
copier
.
raison
de
erreur
provenir
fait
système
Windows
être
en
train
de
utiliser
libraire
pouvoir
écraser
.
pour
remédier
,
copier
librairie
(
par
exemple
dans
c
:
\
)
sur
disque
dur
(
cliquer
pour
télécharger
librairie
pour
Windows
9x
)
,
redémarrer
en
mode
MS-DOS
,
taper
copy
c
:
\
dns-remplacé
c
:
\windows\system
.
système
aller
demander
de
confirmer
écrasement
répondre
`
`
oui
'
'
(
O
)
,
redémarrer
Windows
EasyPHP
devoir
fonctionner
!
démarrage
de
EasyPHP
pour
démarrer
apache
,
MySQL
PHP
,
suffire
de
lancer
EasyPHP
à
partir
groupe
créer
dans
menu
démarrer
:
pour
vérifier
EasyPHP
fonctionner
,
suffire
de
taper
dans
navigateur
préféré
:
•
•
http
:
/
/
localhost
http
:
/
/
ip-remplacée
>
deux
adresse
représenter
machine
local
.
Editer
site
pour
créer
site
web
dynamique
avec
EasyPHP
,
suffire
de
déposer
création
dans
sousrépertoire
/
www
de
EasyPHP
.
par
exemple
créer
fichier
texte
contenir
texte
suivre
:
<
?
phpinfo
(
)
;
?
>
renommer
fichier
en
dns-remplacé
déposez-le
dans
sous-répertoire
/
www
.
pouvoir
visualiser
résultat
à
adresse
suivant
:
http
:
/
/
localhost
/
dns-remplacer
de
information
de
information
en
cas
de
problème
avec
EasyPHP
,
aller
sur
dns-remplacé
.
en
cas
de
problème
,
commencer
par
consulter
FAQ
,
consulter
Forum
concept
de
variable
avec
PHP
variable
être
objet
repérer
par
nom
,
pouvoir
contenir
donnée
,
pouvoir
être
modifier
de
exécution
programme
.
variable
en
langage
PHP
pouvoir
être
de
trois
type
:
•
•
•
scalaire
tableau
tableau
associatif
type
de
variable
,
nom
devoir
être
précéder
caractère
dollar
(
$
)
.
à
de
nombreux
langage
de
programmation
,
langage
C
,
variable
en
PHP
avoir
besoin
de
être
déclarer
,
pouvoir
commencer
à
utiliser
sans
avoir
avertir
interpréteur
,
variable
exister
,
contenu
être
utiliser
,
interpréteur
affecter
valeur
en
assigner
par
défaut
.
de
façon
ajouter
à
nouveau
variable
(
définir
haut
dans
code
)
,
valeur
être
...
Nommage
variable
avec
PHP
,
nom
de
variable
devoir
répondre
à
critère
:
•
nom
de
variable
devoir
commencer
par
lettre
(
majuscule
minuscule
)
`
`
_
'
'
(
par
chiffre
)
•
nom
de
variable
pouvoir
comporter
lettre
,
chiffre
caractère
_
(
espace
être
autoriser
!
)
nom
de
variable
correct
nom
de
variable
incorrect
raison
$
variable
$
nom
de
variable
comporte
espace
$
Nom_De_Variable
$
123Nom_De_Variable
commencer
par
chiffre
$
nom_de_variable
$
toto
@
dns-remplacer
caractère
spécial
@
$
nom_de_variable_123
$
Nom-de-variable
signe
-
interdire
$
nom_de_variable
nom_de_variable
commencer
par
$
nom
de
variable
être
sensible
à
casse
(
langage
PHP
faire
différence
entre
nom
en
majuscule
nom
en
minuscule
)
,
falloir
veiller
à
utiliser
nom
comporter
même
casse
!
,
nom
de
fonction
faire
exception
à
règle
...
variable
scalaire
langage
PHP
proposer
trois
type
de
variable
scalaire
:
•
•
entier
:
nombre
naturel
sans
décimale
(
sans
virgule
)
réel
:
nombre
décimal
(
parler
de
type
double
,
agir
de
nombre
décimal
à
double
précision
)
•
chaine
de
caractère
:
ensemble
de
caractère
être
nécessaire
en
PHP
de
typer
variable
,
de
définir
type
,
suffire
de
assigner
valeur
en
définir
type
:
•
•
•
entier
:
nombre
sans
virgule
réel
:
nombre
avec
virgule
(
en
réalité
point
)
chaine
de
caractère
:
ensemble
de
caractère
entre
guillemet
simple
double
instruction
type
de
variable
$
variable
=
;
type
entier
$
variable
=
;
type
entier
$
variable
=
;
type
réel
$
variable
=
;
type
réel
$
variable
=
`
`
'
'
;
type
chaîne
$
variable
=
`
`
bonjour
monde
'
'
;
type
chaîne
exister
caractère
repérer
par
code
ASCII
spécial
permettre
de
effectuer
opération
particulier
.
caractère
pouvoir
être
représenter
en
langage
PHP
grâce
caractère
'
\
'
suivre
de
lettre
,
préciser
agir
de
caractère
de
contrôle
:
caractère
description
\
'
'
guillemet
\\
barrer
oblique
inverse
(
antislash
)
\r
retour
chariot
\n
retour
à
ligne
\t
tabulation
en
effet
,
de
caractère
pouvoir
être
représenter
(
retour
à
ligne
pouvoir
être
représenter
à
écran
)
.
de
autre
part
,
caractère
\
`
`
pouvoir
faire
partir
en
de
chaîne
de
caractère
,
pour
raison
évident
de
ambiguité
...
variable
tableau
variable
,
avoir
voir
,
permettre
de
stocker
seul
donner
à
fois
.
or
,
de
nombreux
donnée
,
être
cas
,
variable
distinct
être
lourd
à
gérer
.
,
PHP
proposer
structure
de
donnée
permettre
de
stocker
ensemble
de
donnée
dans
`
`
variable
commune
'
'
.
,
pour
accéder
à
valeur
suffire
de
parcourir
variable
de
type
complexe
composer
de
«
variable
»
de
type
simple
.
tableau
stocker
donnée
sous
forme
de
liste
.
donnée
contenir
dans
liste
être
accessible
grâce
à
index
(
numéro
représenter
élément
de
liste
)
.
à
langage
langage
C
,
être
possible
de
stocker
élément
de
type
différent
dans
même
tableau
.
,
pour
désigner
élément
de
tableau
,
suffire
de
faire
suivre
nom
tableau
indice
de
élément
entre
crochet
:
$
tableau
[
]
=
;
$
tableau
[
]
=
`
`
CCM
'
'
;
avec
PHP
,
être
nécessaire
de
préciser
valeur
de
index
vouloir
remplir
tableau
,
assigner
valeur
premier
élément
(
tableau
être
vide
)
incrémenter
indice
suivant
.
de
façon
,
être
facile
de
remplir
tableau
avec
valeur
.
code
précédent
être
équivalent
à
:
$
tableau
[
]
=
;
$
tableau
[
]
=
`
`
CCM
'
'
;
•
•
indice
de
tableau
commencer
à
zéro
type
de
variable
pouvoir
être
contenir
dans
tableau
tableau
contenir
de
autre
tableau
,
parler
de
tableau
multidimensionnel
.
être
possible
de
créer
tableau
multidimensionnel
en
utiliser
paire
de
crochet
pour
index
(
de
paire
de
crochet
dimension
vouloir
)
.
par
exemple
,
tableau
à
deux
dimension
pouvoir
être
déclarer
suivre
:
$
tableau
[
]
[
]
$
tableau
[
]
[
]
$
tableau
[
]
[
]
$
tableau
[
]
[
]
=
=
=
=
;
'
'
CCM
'
'
;
;
'
'
revoir
'
'
;
variable
tableau
associatif
PHP
permettre
utilisation
de
chaîne
de
caractère
lieu
de
simple
entier
pour
définir
indice
de
tableau
,
parler
de
tableau
associatif
.
façon
de
nommer
indice
pouvoir
être
agréable
à
utiliser
:
$
toto
[
`
`
age
'
'
]
=
;
$
toto
[
`
`
adresse
'
'
]
=
`
`
rue
bois
fleurir
'
'
;
$
toto
[
`
`
nom
'
'
]
=
`
`
ah
,
avoir
aimer
connaître
nom
de
famille
de
toto
...
'
'
;
porter
(
visibilité
)
variable
selon
endroit
déclarer
variable
,
pouvoir
être
accessible
(
visible
)
de
dans
code
dans
portion
confiner
de
(
à
intérieur
de
fonction
par
exemple
)
,
parler
de
portée
(
visibilité
)
de
variable
.
variable
être
déclarer
dans
code
même
,
à
extérieur
de
fonction
de
bloc
de
instruction
,
être
accessible
de
dans
code
(
importer
fonction
programme
pouvoir
faire
appel
à
variable
)
.
parler
de
variable
global
déclarer
variable
à
intérieur
de
bloc
de
instruction
(
entre
accolade
)
,
portée
confiner
à
intérieur
bloc
dans
être
déclarer
.
•
variable
déclarer
début
code
,
avant
bloc
de
donnée
,
être
global
,
pouvoir
utiliser
à
partir
de
importer
bloc
de
instruction
•
variable
déclarer
à
intérieur
de
bloc
de
instruction
(
dans
fonction
boucle
par
exemple
)
avoir
portée
limiter
à
seul
bloc
de
instruction
,
être
inutilisable
,
parler
de
variable
local
de
manière
général
être
préférable
de
donner
nom
différent
variable
local
global
pour
raison
de
lisibilité
de
compréhension
code
.
définition
de
constant
constant
être
variable
valeur
être
inchangeable
de
exécution
de
programme
.
avec
PHP
,
constant
être
définir
grâce
à
fonction
define
(
)
.
syntaxe
de
fonction
define
(
)
être
suivant
:
define
(
`
`
Nom_de_la_variable
'
'
,
valeur
)
;
nom
de
constant
définir
à
aide
de
fonction
define
(
)
devoir
commencer
par
caractère
$
(
de
façon
affectation
être
possible
)
.
être
opérateur
?
opérateur
être
symbole
permettre
de
manipuler
variable
,
effectuer
opération
,
évaluer
,
...
distinguer
type
de
opérateur
:
•
•
•
•
•
•
•
opérateur
de
calcul
opérateur
de
assignation
opérateur
de
incrémentation
opérateur
de
comparaison
opérateur
logique
(
opérateur
bit-à-bit
)
(
opérateur
de
rotation
de
bit
)
opérateur
de
calcul
opérateur
de
calcul
permettre
de
modifier
valeur
de
variable
opérateur
dénomination
effet
résultat
(
pour
x
=
)
exemple
+
opérateur
de
addition
ajouter
deux
valeur
$
x+3
-
opérateur
de
soustraction
soustraire
deux
valeur
$
x-3
*
opérateur
de
multiplication
multiplier
deux
valeur
$
x
*
/
:
opérateur
de
division
diviser
deux
valeur
$
x
/
=
opérateur
de
affectation
affecter
valeur
à
variable
$
x
=
mettre
valeur
dans
variable
$
x
%
opérateur
modulo
$
x
%
donner
reste
de
division
entier
entre
nombre
opérateur
de
assignation
opérateur
permettre
de
simplifier
opération
ajouter
valeur
dans
variable
stocker
résultat
dans
variable
.
opération
écrire
de
façon
suivant
par
exemple
:
$
x
=
$
x+2
avec
opérateur
de
assignation
être
possible
de
écrire
opération
sous
forme
suivant
:
$
x+
=
,
valeur
de
x
être
avant
opération
,
être
de
...
autre
opérateur
même
type
être
suivant
:
opérateur
effet
+
=
addition
deux
valeur
stocker
résultat
dans
variable
(
à
gauche
)
-
=
soustraire
deux
valeur
stocker
résultat
dans
variable
*
=
multiplier
deux
valeur
stocker
résultat
dans
variable
/
=
diviser
deux
valeur
stocker
résultat
dans
variable
%
=
donner
reste
de
division
deux
valeur
stocker
résultat
dans
variable
|
=
effectuer
logique
entre
deux
valeur
stocker
résultat
dans
variable
^
=
effectuer
exclusif
entre
deux
valeur
stocker
résultat
dans
variable
&
=
effectuer
logique
entre
deux
valeur
stocker
résultat
dans
variable
.
=
concaténer
deux
chaîne
stocker
résultat
dans
variable
opérateur
de
incrémentation
type
de
opérateur
permettre
de
augmenter
diminuer
de
unité
variable
.
opérateur
être
utile
pour
structure
boucle
,
avoir
besoin
de
compteur
(
variable
augmenter
de
un
en
un
)
.
opérateur
de
type
$
x++
permettre
de
remplacer
notation
lourd
$
x
=
$
x+1
$
x+
=
opérateur
dénomination
effet
syntaxe
résultat
(
avec
x
valoir
)
++
incrémentation
augmenter
de
unité
variable
$
x++
--
Décrémentation
diminuer
de
unité
variable
$
x
--
opérateur
de
comparaison
opérateur
dénomination
=
=
à
confondre
avec
opérateur
de
égalité
signe
de
affectation
(
=
)
!
!
effet
comparer
deux
valeur
vérifier
égalité
exemple
$
x
=
=
résultat
retourner
$
x
être
égal
à
,
<
opérateur
de
infériorité
strict
vérifier
variable
être
inférieur
à
$
x
<
valeur
retourner
$
x
être
inférieur
à
,
<
=
opérateur
de
infériorité
vérifier
variable
être
inférieur
égal
à
$
x
<
=
valeur
retourner
$
x
être
inférieur
égal
à
,
>
opérateur
de
supériorité
strict
vérifier
variable
être
supérieur
à
$
x
>
valeur
retourner
$
x
être
supérieur
à
,
>
=
opérateur
de
supériorité
vérifier
variable
être
supérieur
égal
à
$
x
>
=
valeur
retourner
$
x
être
supérieur
égal
à
,
!
=
opérateur
de
différence
vérifier
variable
être
$
x
!
=
différent
de
valeur
retourner
$
x
être
différent
de
,
opérateur
logique
(
booléen
)
type
de
opérateur
permettre
de
vérifier
condition
être
vrai
:
opérateur
dénomination
effet
syntaxe
|
|
or
logique
vérifier
condition
être
réaliser
(
(
condition1
)
|
|
(
condition2
)
)
&
&
AND
logique
vérifier
condition
être
réaliser
(
(
condition1
)
&
&
(
condition2
)
)
XOR
exclusif
vérifier
seul
condition
être
réaliser
(
(
condition1
)
XOR
(
condition2
)
)
!
logique
inverse
état
de
variable
booléen
(
retourne
(
!
condition
)
valeur
variable
valoir
,
valoir
)
(
opérateur
bit-à-bit
)
comprendre
opérateur
être
important
,
avoir
utilité
.
pour
vouloir
comprendre
,
rendez-
chapitre
suivant
:
•
•
•
compréhension
binaire
représentation
donné
instruction
arithmétique
logique
en
assembleur
type
de
opérateur
traiter
opérande
donnée
binaire
,
donnée
décimal
,
hexadécimal
octal
.
opérateur
traiter
donnée
selon
représentation
binaire
retourner
valeur
numérique
standard
dans
format
de
origine
.
opérateur
suivant
effectuer
opération
bit-à-bit
,
avec
bit
de
même
poids
.
opérateur
dénomination
&
bit-à-bit
effet
retourner
deux
bit
de
même
poids
être
à
syntaxe
&
(
&
)
résultat
(
)
|
bit-à-bit
retourne
un
autre
deux
bit
de
même
poids
être
à
(
deux
)
|
(
|
)
(
)
^
exclusif
retourne
un
deux
bit
de
même
poids
être
à
(
deux
)
^
(
^
(
)
)
~
complément
(
)
retourne
bit
être
à
(
)
~
(
~
)
(
)
(
opérateur
de
rotation
de
bit
)
comprendre
opérateur
être
important
,
avoir
utilité
.
pour
vouloir
comprendre
,
rendez-
chapitre
suivant
:
•
•
•
compréhension
binaire
représentation
donné
instruction
arithmétique
logique
en
assembleur
type
de
opérateur
traiter
opérande
donnée
binaire
de
longueur
de
bit
,
donnée
décimal
,
hexadécimal
octal
.
opérateur
traiter
donnée
selon
représentation
binaire
retourner
valeur
numérique
standard
dans
format
de
origine
.
opérateur
suivant
effectuer
rotation
sur
bit
,
décaler
bit
de
nombre
de
bit
vers
gauche
vers
droit|droite
.
premier
opérande
désigner
donnée
sur
aller
faire
décalage
,
second
désigner
nombre
de
bit
aller
être
décaler
.
opérateur
dénomination
effet
syntaxe
décaler
bit
vers
gauche
(
multiplier
par
à
décalage
)
.
zéro
sortir
à
gauche
être
perdre
,
zéro
être
insérer
à
droit|droite
<
<
rotation
à
gauche
>
>
décaler
bit
vers
droit|droite
(
diviser
par
à
rotation
à
droit|droite
avec
décalage
)
.
zéro
sortir
à
droit
conservation
signe
être
perdre
,
bit
non-nul
de
poids
fort
être
recopier
à
gauche
résultat
<
<
(
<
<
)
(
)
>
>
(
>
>
)
(
)
autre
opérateur
opérateur
pouvoir
être
classer
dans
catégorie
spécifique
avoir
de
importance
!
opérateur
dénomination
effet
syntaxe
.
concaténation
joindre
deux
chaîne
bout
à
bout
'
'
bonjour
'
'
.
`
`
revoir
'
'
$
référencement
de
variable
permettre
de
définir
variable
$
MaVariable
=
;
-
>
propriété
de
objet
permettre
de
accéder
donné
membre
de
classe
$
MonObjet
>
Propriete
résultat
'
'
BonjourAu
revoir
'
'
priorité
associer
opérateur
,
falloir
interprêteur
PHP
savoir
dans
ordre
traiter
,
dans
ordre
décroître
priorité
de
opérateur
:
priorité
opérateur
+++++++++++++++
(
)
++++++++++++++
--
[
]
++
!
~
+++++++++++++
*
/
++++++++++++
+
-
+++++++++++
<
<
=
>
=
>
++++++++++
=
=
!
=
+++++++++
&
++++++++
^
+++++++
|
%
-
++++++
&
&
+++++
|
|
++++
?
:
+++
=
+
=
-
=
*
=
/
=
%
=
<
<
=
>
>
=
>
>
>
=
&
=
^
=
|
=
++
AND
+
XOR
être
structure
conditionnel
?
appeler
structure
conditionnel
instruction
permettre
de
tester
condition
être
vrai
,
valeur
de
expression
valoir
(
PHP
associer
mot
clé
true
à
false
à
)
.
structure
conditionnel
pouvoir
être
associer
à
structure
répéter
suivre
réalisation
de
condition
,
appeler
structure
structure
de
boucle
notion
de
bloc
expression
suivre
de
point-virgule
être
appeler
instruction
.
par
exemple
a++
;
être
instruction
.
vouloir
regrouper
instruction
,
pouvoir
créer
appeler
bloc
,
ensemble
de
instruction
(
suivre
par
point-virgule
)
comprendre
entre
accolade
{
}
.
instruction
if
,
while
for
pouvoir
par
exemple
être
suivre
de
bloc
de
instruction
à
exécuter
...
instruction
if
instruction
if
être
structure
de
test
basique
,
retrouver
dans
langage
(
avec
syntaxe
différent
...
)
.
permettre
de
exécuter
série
de
instruction
condition
être
réaliser
.
syntaxe
de
expression
être
suivant
:
if
(
condition
réaliser
)
{
liste
de
instruction
}
remarque
:
•
•
condition
devoir
être
entre
parenthèse
être
possible
de
définir
condition
à
remplir
avec
opérateur
(
&
&
|
|
)
par
exemple
instruction
suivant
tester
deux
condition
être
vrai
:
if
(
(
condition1
)
&
&
(
condition2
)
)
instruction
exécuter
instruction
autre
deux
condition
être
vrai
:
if
(
(
condition1
)
|
|
(
condition2
)
)
•
n
'
avoir
instruction
,
accolade
être
nécessaire
...
instruction
if
...
else
instruction
if
dans
forme
basique
permettre
de
tester
condition
,
plupart
temps
aimer
pouvoir
choisir
instruction
à
exécuter
en
cas
de
réalisation
de
condition
...
expression
if
...
else
permettre
de
exécuter
autre
série
de
instruction
en
cas
de
non-réalisation
de
condition
.
syntaxe
de
expression
être
suivant
:
if
(
condition
réaliser
)
{
liste
de
instruction
}
else
{
autre
série
de
instruction
}
instruction
if
...
elseif
...
else
instruction
if
...
else
permettre
de
tester
condition
,
être
nécessaire
de
tester
condition
de
façon
exclusif
,
sur
condition
seul
être
réaliser
...
expression
if
...
elseif
...
else
permettre
de
enchaîner
série
de
instruction
éviter
de
avoir
à
imbriquer
instruction
if
.
syntaxe
de
expression
être
suivant
:
if
(
condition
réaliser
)
{
liste
de
instruction
}
elseif
(
autre
condition
réaliser
)
{
autre
série
de
instruction
}
...
else
(
dernier
condition
réaliser
)
{
série
de
instruction
}
façon
court
de
faire
test
(
opérateur
ternaire
)
être
possible
de
faire
test
avec
structure
lourd
grâce
à
structure
suivant
,
appelé
opérateur
ternaire
:
(
condition
)
?
instruction
vrai
:
instruction
faux
remarque
:
•
•
•
condition
devoir
être
entre
parenthèse
condition
être
vrai
,
instruction
de
gauche
être
exécuter
condition
être
faux
,
instruction
de
droit|droite
être
exécuter
instruction
switch
instruction
switch
permettre
de
faire
test
de
valeur
sur
contenu
de
variable
.
branchement
conditionnel
simplifier
test
de
valeur
de
variable
,
opération
avoir
être
compliquer
(
possible
)
avec
if
imbriqué
.
syntaxe
être
suivant
:
switch
(
variable
)
{
case
Valeur1
:
liste
de
instruction
break
;
case
Valeur2
:
liste
de
instruction
break
;
caser
valeur
...
:
liste
de
instruction
break
;
default
:
liste
de
instruction
break
;
}
parenthèse
suivre
mot
clé
switch
indiquer
expression
valeur
être
tester
par
case
.
expression
tester
être
égal
à
un
valeur
suivre
case
,
liste
de
instruction
suivre
être
exécuter
.
mot
clé
break
indiquer
sortie
de
structure
conditionnel
.
mot
clé
default
précéder
liste
de
instruction
être
exécuter
expression
être
égal
à
un
valeur
.
oublier
de
insérer
instruction
break
entre
test
,
genre
de
oubli
être
difficile
à
détecter
erreur
être
signaler
...
boucle
boucle
être
structure
permettre
de
exécuter
fois
même
série
de
instruction
jusqu
'
à
condition
être
réaliser
...
appeler
structure
instruction
répétitif
bien
itération
.
façon
commun
de
faire
boucle
,
être
de
créer
compteur
(
variable
incrémenter
,
augmenter
de
à
tour
de
boucle
)
de
faire
arrêter
boucle
compteur
dépasser
certain
valeur
.
boucle
for
instruction
for
permettre
de
exécuter
fois
même
série
de
instruction
:
être
boucle
!
dans
syntaxe
,
suffire
de
préciser
nom
de
variable
servir
de
compteur
(
valeur
de
départ
,
condition
sur
variable
boucle
arrêter
(
basiquement
condition
tester
valeur
compteur
dépasser
limite
)
instruction
incrémenter
(
décrémente
)
compteur
.
syntaxe
de
expression
être
suivant
:
for
(
compteur
;
condition
;
modification
compteur
)
{
liste
de
instruction
}
par
exemple
:
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
echo
`
`
$
i
<
br
>
'
'
;
}
boucle
afficher
fois
valeur
de
$
i
,
,
,
,
,
commencer
à
$
i
=
,
vérifier
$
i
être
inférieur
à
,
etc
...
jusqu
'
à
atteindre
valeur
$
i
=
,
condition
être
réaliser
,
boucle
interrompre
programme
continuer
cours|cour
.
de
autre
part
,
langage
PHP
autoriser
déclaration
de
variable
de
boucle
dans
instruction
for
même
!
par
exemple
:
for
(
$
i
=
;
$
i
<
;
$
i++
)
{
echo
`
`
$
i
<
br
>
'
'
;
}
•
falloir
vérifier
boucle
avoir
condition
de
sortie
(
i.e.
compteur
incrémenter
)
•
instruction
echo
dans
boucle
être
bon
moyen
pour
vérifier
valeur
compteur
à
en
afficher
!
•
falloir
compter
nombre
de
fois
vouloir
faire
exécuter
boucle
:
o
for
(
$
i
=
;
$
i
<
;
$
i++
)
exécuter
fois
boucle
(
$
i
de
à
)
o
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
exécuter
fois
boucle
(
$
i
de
à
)
o
for
(
$
i
=
;
$
i
<
;
$
i++
)
exécuter
fois
boucle
(
$
i
de
à
)
o
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
exécuter
fois
boucle
(
$
i
de
à
)
instruction
while
instruction
while
représenter
autre
moyen
de
exécuter
fois
même
série
de
instruction
.
syntaxe
de
expression
être
suivant
:
while
(
condition
réaliser
)
{
liste
de
instruction
}
instruction
exécuter
liste
de
instruction
(
while
être
mot
anglais
signifier
)
condition
être
réaliser
.
condition
de
sortir
pouvoir
être
importer
structurer
conditionnel
,
risque
de
boucle
infini
(
boucle
condition
être
vrai
)
être
grand
,
risquer
de
provoquer
plantage
navigateur
!
saut
inconditionnel
pouvoir
être
nécessaire
de
faire
sauter
à
boucle
un
valeur
sans
pour
mettre
fin
à
.
syntaxe
de
expression
être
`
`
continu
;
'
'
(
instruction
placer
dans
boucle
!
)
,
associer
à
structure
conditionnel
,
ligne
situer
entre
instruction
fin
de
boucle
être
obsolète
.
exemple
:
imaginer
vouloir
imprimer
pour
$
x
aller
de
à
valeur
de
/
(
$
x-7
)
...
être
évident
pour
$
x
=
avoir
erreur
.
,
grâce
à
instruction
continu
être
possible
de
traiter
valeur
à
part
de
continuer
boucle
!
$
x
=
;
while
(
$
x
<
=
)
{
if
(
$
x
=
=
)
{
echo
`
`
division
par
zéro
!
`
`
;
continu
;
}
$
avoir
=
/
(
$
x-7
)
;
echo
`
`
$
avoir
<
br
>
'
'
;
$
x++
;
}
avoir
erreur
dans
programme
...
avoir
voir
:
$
x
être
égal
à
,
compteur
incrémenter
,
rester
à
valeur
,
avoir
falloir
écrire
:
$
x
=
;
while
(
$
x
<
=
)
{
if
(
$
x
=
=
)
{
echo
`
`
division
par
'
'
;
$
x++
;
continu
;
}
$
avoir
=
/
(
$
x-7
)
;
echo
`
`
$
avoir
<
br
>
'
'
;
$
x++
;
}
arrêt
inconditionnel
à
inverse
,
pouvoir
être
vouloir
de
arrêter
boucle
,
pour
autre
condition
préciser
dans
en-tète
de
boucle
.
instruction
break
permettre
de
arrêter
boucle
(
for
while
)
.
agir
,
continu
,
de
associer
à
structure
conditionnel
,
boucle
faire
de
tour
!
dans
exemple
de
à
heure
,
par
exemple
savoir
à
moment
dénominateur
(
$
x-7
)
annuler
(
bon
...
OK
...
pour
équation
compliquer
par
exemple
)
être
possible
de
faire
arrêter
boucle
en
cas
de
annulation
dénominateur
,
pour
éviter
division
par
zéro
!
for
(
$
x
=
;
$
x
<
=
;
$
x++
)
{
$
avoir
=
$
x-7
;
if
(
$
avoir
=
=
)
{
echo
`
`
division
par
'
'
;
break
;
}
echo
`
`
/
$
avoir
<
br
>
'
'
;
}
arrêt
de
exécution
script
PHP
autoriser
utilisation
de
commande
exit
,
permettre
de
interrompre
interprétation
script
,
signifier
serveur
envoyer
de
information
navigateur
:
script
être
figer
dans
état
actuel
.
instruction
être
utile
de
apparition
de
erreur
notion
de
fonction
appeler
fonction
sous-programme
permettre
de
effectuer
ensemble
de
instruction
par
simple
appel
de
fonction
dans
corps
programme
principal
.
fonction
permettre
de
exécuter
dans
partie
programme
série
de
instruction
,
permettre
simplicité
code
taille
de
programme
minimal
.
de
autre
part
,
fonction
pouvoir
faire
appel
à
même
,
parler
de
fonction
récursif
(
falloir
oublier
de
mettre
condition
de
sortie
risque
de
pouvoir
arrêter
programme
...
)
.
déclaration
de
fonction
PHP
receler
de
nombreux
fonction
intégré
permettre
de
effectuer
action
courant
.
,
être
possible
de
définir
fonction
,
dire
fonction
utilisateur
de
simplifier
exécution
de
série
de
instruction
répétitif
.
à
de
nombreux
autre
langage
,
PHP
nécessiter
définir
fonction
avant
pouvoir
être
utiliser
,
pour
appeler
dans
corps
programme
falloir
interpréteur
connaître
,
connaître
nom
,
argument
instruction
contenir
.
définition
de
fonction
appeler
`
`
déclaration
'
'
pouvoir
faire
importer
dans
code
.
déclaration
de
fonction
faire
grâce
mot-clé
function
,
selon
syntaxe
suivant
:
function
Nom_De_La_Fonction
(
argument1
,
argument2
,
...
)
{
liste
de
instruction
}
remarque
:
•
nom
de
fonction
suivre
même
règle
nom
de
variable
:
o
nom
devoir
commencer
par
lettre
o
nom
de
fonction
pouvoir
comporter
lettre
,
chiffre
caractère
_
&
(
espace
être
autoriser
!
)
o
nom
de
fonction
,
variable
être
sensible
à
casse
(
différenciation
entre
minuscule
majuscule
)
•
argument
être
facultatif
,
n
'
avoir
de
argument
,
parenthèse
devoir
rester
présent
•
falloir
oublier
de
refermer
accolade
•
nombre
de
accolade
ouvrir
(
fonction
,
boucle
autre
structure
)
devoir
être
égal
nombre
de
accolade
fermé
!
•
même
chose
appliquer
pour
parenthèse
,
crochet
guillemet
!
fois
étape
franchir
,
fonction
exécuter
faire
appel
à
part
dans
page
!
appel
de
fonction
pour
exécuter
fonction
,
suffire
de
faire
appel
à
en
écrire
nom
(
fois
de
en
respecter
casse
)
suivre
de
parenthèse
ouvert
(
argument
)
de
parenthèse
fermé
:
Nom_De_La_Fonction
(
)
;
remarque
:
•
virgule
signifier
fin
de
instruction
permettre
à
interpréteur
de
distinguer
différent
bloc
de
instruction
•
avoir
définir
argument
dans
déclaration
de
fonction
,
falloir
veiller
à
inclure
de
appel
de
fonction
(
même
nombre
de
argument
séparer
par
virgule
!
)
Nom_De_La_Fonction
(
argument1
,
argument2
)
;
renvoi
de
valeur
par
fonction
fonction
pouvoir
renvoyer
valeur
(
terminer
)
grâce
mot-clé
return
.
instruction
return
être
rencontrer
,
fonction
évaluer
valeur
suivre
,
renvoyer
programme
appelant
(
programme
à
partir
fonction
avoir
être
appeler
)
.
fonction
pouvoir
contenir
instruction
return
,
être
premier
instruction
return
rencontrer
provoquer
fin
de
fonction
renvoi
de
valeur
suivre
.
syntaxe
de
instruction
return
être
simple
:
return
valeur_ou_variable
;
argument
de
fonction
être
possible
de
passer
argument
à
fonction
,
fournir
valeur
nom
de
variable
fonction
pouvoir
effectuer
opération
sur
argument
grâce
à
argument
.
passage
de
argument
à
fonction
faire
moyen
de
liste
de
argument
(
séparer
par
virgule
)
entre
parenthèse
suivre
nom
de
fonction
.
argument
pouvoir
être
de
simple
variable
,
tableau
objet
.
à
noter
être
possible
de
donner
valeur
par
défaut
à
argument
en
faire
suivre
nom
de
variable
par
signe
`
`
=
'
'
valeur
affecter
par
défaut
à
variable
.
vouloir
utiliser
argument
dans
corps
de
fonction
en
variable
,
devoir
être
précéder
par
signe
$
.
<
?
function
dire_texte
(
$
,
$
texte
=
'
bonjour
'
)
{
if
(
empty
(
$
)
)
{
/
/
$
être
vide
,
retourner
faux
return
false
;
}
else
{
echo
`
`
$
texte
$
'
'
;
/
/
afficher
texte
return
true
;
/
/
fonction
exécuter
avec
succès
}
}
?
>
fonction
pouvoir
être
appeler
de
deux
façon
différent
:
<
?
/
/
passage
deux
paramètre
dire_texte
(
`
`
phpeur
'
'
,
`
`
bienvenu
'
'
)
;
/
/
affiche
`
`
bienvenir
phpeur
'
'
/
/
utilisation
de
valeur
par
défaut
deuxième
paramètre
dire_texte
(
`
`
phpeur
'
'
)
;
/
/
affiche
`
`
bonjour
phpeur
'
'
?
>
travailler
sur
variable
dans
fonction
manipuler
variable
dans
fonction
,
arriver
de
constater
avoir
beau
modifier
variable
dans
fonction
retrouver
valeur
de
origine
dès
sortir
de
fonction
...
être
à
portée
variable
,
avoir
être
définir
variable
global
local
.
exister
niveau
de
définition
de
variable
:
•
variable
précéder
mot
clé
global
être
visible
dans
ensemble
code
,
portée
être
limiter
à
fonction
.
,
fonction
pouvoir
utiliser
modifier
variable
•
niveau
static
permettre
de
définir
variable
local
à
fonction
,
persister
durant
temps
de
exécution
script
•
par
défaut
,
variable
posséder
niveau
local
,
variable
être
modifier
qu
'
à
intérieur
de
fonction
retrouver
valeur
avoir
juste
avant
appel
de
fonction
à
sortie
de
<
?
$
chaine
=
`
`
nombre
de
camion
:
`
`
;
function
ajoute_camion
(
$
mode
=
'
'
)
{
global
$
chaine
;
static
$
nb
=
;
$
nb++
;
/
/
incrémenter
nombre
de
camion
if
(
$
mode
=
=
`
`
affiche
'
'
)
{
echo
$
chaine
.
$
nb
;
/
/
afficher
nombre
de
camion
}
}
ajoute_camion
(
)
;
/
/
nb
=
=
ajoute_camion
(
)
;
/
/
nb
=
=
ajoute_camion
(
)
;
/
/
nb
=
=
ajoute_camion
(
`
`
affiche
'
'
)
;
?
>
/
/
affiche
nombre
de
camion
:
passage
de
paramètre
par
référence
autre
méthode
pour
modifier
variable
consister
à
faire
précéder
caractère
&
,
préciser
agir
de
:
valeur
de
variable
être
modifier
à
sortie
de
fonction
.
parler
de
passage
par
référence
.
dans
cas
passer
référence
(
adresse
mémoire
)
de
variable
à
fonction
,
permettre
de
modifier
valeur
.
<
?
function
dire_texte
(
$
,
&
$
texte
)
{
$
texte
=
`
`
bienvenue
$
'
'
;
}
$
chaine
=
`
`
bonjour
`
`
;
dire_texte
(
`
`
phpeur
'
'
,
$
chaine
)
;
echo
$
chaine
;
/
/
affiche
`
`
bienvenir
phpeur
'
'
?
>
retourner
variable
souhaiter
fonction
retourner
valeur
,
simple
être
de
utiliser
tableau
.
<
?
function
nom_fonction
(
)
{
...
.
.
return
array
(
$
variable1
,
$
variable2
,
$
variable3
)
;
/
/
retourner
valeur
vouloir
dans
tableau
}
$
retour
=
nom_fonction
(
)
;
echo
`
`
$
retour
[
]
-
$
retour
[
]
-
$
retour
[
]
'
'
;
?
>
récursivité
fonction
récursif
être
fonction
appeler
même
.
type
de
fonction
révéle
indispensable
pour
parcourir
arborescence
par
exemple
.
exemple
simple
.
<
?
function
fonction_recursif
(
$
n
=
)
{
$
n++
;
echo
`
`
$
n
<
br
>
'
'
;
if
(
$
n
<
)
{
/
/
n
être
inférieur
à
continuer
fonction_recursif
(
$
n
)
;
}
}
fonction_recursif
(
)
;
/
/
afficher
nb
de
à
?
>
notion
de
classe
Php3
intégrer
soupçon
de
caractéristique
emprunter
langage
orienter
objet
,
possibilité
de
utiliser
objet
,
entité
regrouper
donnée
fonction
sein
de
structure
rendre
programmation
simple
en
programmation
habituel
(
appelé
programmation
procédural
par
opposition
à
programmation
orienter
objet
)
.
appeler
classe
structure
de
objet
,
déclaration
de
ensemble
entité
composer
objet
.
objet
être
`
`
issu
'
'
de
classe
,
être
produit
sortir
de
moule
.
en
réalité
dire
objet
être
instanciation
de
classe
,
être
raison
pour
pouvoir
parler
de
objet
de
instance
(
de
occurrence
)
.
classe
être
composer
de
deux
partie
:
•
attribut
(
appeler
donner
membre
)
:
agir
donnée
représenter
état
de
objet
•
méthode
(
appeler
fonction
membre
)
:
agir
opération
applicable
objet
déclaration
de
classe
pour
pouvoir
manipuler
objet
,
être
essentiel
de
définir
classe
,
définir
structure
de
objet
.
avec
Php
,
définition
faire
de
manière
suivant
:
Nom_de_la_classe
{
/
/
déclaration
donné
membre
var
$
Donnee_Membre_1
;
var
$
Donnee_Membre_2
;
var
$
...
/
/
déclaration
méthode
function
Nom_de_la_fonction_membre1
(
parametres
)
{
liste
de
instruction
;
}
}
Nom_de_la_classe
représenter
type
de
objet
désigner
par
classe
nom
attribuer
.
langage
orienter
objet
C++
,
Php
inclure
dans
version
de
niveau
de
visibilité
élément
de
classe
,
n
'
avoir
de
concept
de
encapsulation
,
un
concept
majeur
de
programmation
orienter
objet
.
à
déclaration
de
classe
en
C++
,
déclaration
de
classe
finir
par
point-virgule
!
Instanciation
de
classe
après
avoir
déclarer
classe
,
falloir
instancier
objet
pour
pouvoir
exploiter
.
opération
faire
à
aide
mot
clé
new
permettre
de
faire
objet
découler
de
classe
.
syntaxe
mot
clé
new
être
suivant
:
$
Nom_de_l_objet
=
new
Nom_de_la_classe
;
à
partir
moment
objet
être
instancié
,
posséder
propriété
être
propre
,
signifier
instancer
nouveau
objet
,
modification
propriété
de
un
influer
sur
de
autre
.
exister
méthode
spécial
(
porter
même
nom
classe
)
exécuter
de
instanciation
de
objet
.
méthode
,
appeler
constructeur
être
utile
pour
initialiser
donné
membre
de
instanciation
.
accéder
propriété
de
objet
accès
propriété
de
objet
faire
grâce
nom
de
objet
,
suivre
de
flêche
(
-
>
)
représenter
par
(
-
)
signe
supérieur
(
>
)
,
nom
de
donné
membre
(
sans
signe
$
)
.
par
exemple
:
$
Nom_de_l_objet-
>
Nom_de_la_donnee_membre
=
valeur
;
accéder
méthode
de
objet
accès
méthode
de
objet
faire
pour
accès
propriété
,
par
nom
de
objet
,
suivre
de
flêche
nom
de
méthode
.
méthode
être
suivre
de
parenthèse
,
contenir
paramètre
,
y'en
avoir
.
accès
à
méthode
faire
de
façon
suivant
:
$
Nom_de_l_objet-
>
Nom_de_la_fonction_membre
(
parametre1
,
parametre2
,
...
)
;
variable
courante
$
this
mot
clé
$
this
permettre
de
désigner
objet
dans
trouver
,
désirer
faire
référence
dans
fonction
membrer
à
objet
dans
trouver
,
utiliser
this
.
grâce
à
variable
spécial
,
être
possible
dans
fonction
membrer
de
faire
référence
propriété
situer
dans
même
objet
fonction
membre
.
,
désirer
accéder
à
propriété
de
objet
à
partir
de
méthode
même
objet
,
suffire
de
faire
précéder
nom
de
donné
membre
par
$
this-
>
.
par
exemple
:
class
toto
{
var
$
age
;
var
$
sexe
;
var
$
adresse
;
function
DefineTotoAge
(
$
age
)
{
$
this-
>
age
=
$
age
;
}
}
$
toto_test
=
new
toto
;
$
toto_test-
>
DefineTotoAge
(
)
;
echo
`
`
age
de
toto
:
`
`
.
$
toto_test-
>
age
.
`
`
<
br
/
>
'
'
;
limitation
de
utilisation
de
classe
avec
Php
PHP
,
dans
version
,
rester
limiter
point
de
vue
de
programmation
objet
.
plupart
aspect
marquant
de
programmation
objet
être
présent
dans
langage
:
•
•
•
encapsulation
héritage
polymorphisme
but
de
PHP
être
de
permettre
création
de
page
web
dynamique
,
but
premier
être
de
pouvoir
envoyer
donnée
navigateur
.
trois
fonction
standard
PHP
fournir
fonction
permettre
de
envoyer
texte
navigateur
.
fonction
avoir
particularité
de
pouvoir
insérer
dans
donnée
envoyer
valeur
variable
,
pouvoir
être
fonction
de
valeur
récupérer
par
exemple
,
être
rendre
possible
création
de
page
dynamique
.
fonction
être
suivant
:
•
•
•
echo
print
printf
fonction
echo
fonction
echo
permettre
de
envoyer
navigateur
chaîne
de
caractère
(
délimiter
par
guillemet
)
suivre
.
syntaxe
de
fonction
être
suivant
:
echo
expression
;
expression
pouvoir
être
chaîne
de
caractère
expression
interpréteur
évaluer
echo
`
`
chaine
de
caracteres
'
'
;
echo
(
)
*
;
,
être
donner
chaîne
de
caractère
être
délimiter
par
guillemet
,
insertion
de
guillemet
double
dans
chaîne
provoquer
erreur
.
être
raison
pour
guillemet
double
,
caractère
spécial
,
devoir
être
précéder
de
antislash
.
récapitulatif
caractère
spécial
nécessiter
ajout
de
antislash
:
caractère
description
<
TD\
'
'
<
td
>
<
TDGUILLEMET
<
td
>
<
TD\
$
<
td
>
<
TDCARACT
&
EGRAVE
;
RE
td
$
<
>
<
TD\\
<
td
>
<
inverse
oblique
>
<
TD\R
<
td
>
<
>
<
TD\N
<
td
>
<
à
>
<
TD\T
<
td
>
<
TDTABULATION
<
td
>
caractère
$
avoir
rôle
particulier
dans
mesure
interpréteur
comprendre
variable
,
signifier
caractère
$
être
rencontrer
dans
chaîne
suivre
fonction
echo
,
interpréteur
récupérer
nom
de
variable
suivre
caractère
$
remplacer
par
valeur
.
dans
exemple
suivre
par
exemple
,
assigner
date
actuel
à
variable
appeler
$
MaDate
,
afficher
sur
navigateur
:
<
HTML
>
<
HEAD
>
<
TITLE
>
affichage
de
heure
<
/
TITLE
>
<
/
HEAD
>
<
body
>
<
?
/
/
récupération
de
date
/
/
stockage
dans
variable
$
MaDate
=
date
(
`
`
'
'
)
;
echo
`
`
être|sommer
en
$
MaDate
'
'
;
?
>
<
/
body
>
<
/
HTML
>
fonction
print
fonction
print
être
similaire
à
fonction
echo
à
différence
expression
à
afficher
être
entre
parenthèse
.
syntaxe
de
fonction
print
être
suivant
:
print
(
expression
)
;
expression
pouvoir
,
pour
fonction
echo
être
chaîne
de
caractère
expression
interpréteur
évaluer
:
print
(
`
`
chaine
de
caracteres
'
'
)
;
print
(
(
)
*
)
;
fonction
printf
fonction
printf
(
)
(
emprunter
langage
C
)
être
utiliser
syntaxe
être
lourd
.
,
deux
fonction
précédent
,
permettre
formatage
donnée
,
signifier
pouvoir
choisir
format
dans
variable
être
afficher
à
écran
.
syntaxe
de
printf
(
)
être
suivant
:
printf
(
chaîner
formatter
)
;
chaîne
formattée
être
chaîne
contenir
code
spécial
permettre
de
repérer
emplacement
de
valeur
à
insérer
format
,
représentation
.
à
code
rencontrer
devoir
être
associer
valeur
variable
,
retrouver
en
paramètre
à
fin
de
fonction
printf
.
valeur
à
insérer
dans
chaîne
formattées
être
séparer
par
virgule
devoir
apparaître
dans
ordre
code
apparaître
dans
chaîne
formatter
code
de
formatage
type
de
donnée
être
suivant
:
coder
type
de
format
%
b
entier
en
notation
binaire
%
c
caractère
coder
par
code
ASCII
%
d
entier
en
notation
décimal
%
e
type
double
(
nombre
à
virgule
)
format
scientifique
(
1.76e+3
)
%
f
type
double
(
nombre
à
virgule
)
%
o
entier
en
notation
octal
%
s
chaîne
de
caractère
%
x
entier
en
notation
hexadécimal
(
lettre
en
minuscule
)
%
X
entier
en
notation
hexadécimal
(
lettre
en
majuscule
)
%
%
caractère
%
imaginer
définir
variable
en
virgule
flottant
,
de
obtenir
précision
de
calcul
grand
avec
entier
,
désirer
afficher
en
entier
.
dans
cas
fonction
printf
prendre
importance
:
$
pi
=
;
$
R
=
;
$
Perimetre
=
*
$
pi
*
$
R
;
printf
(
`
`
périmètre
cercle
être
%
d
'
'
,
$
Perimetre
)
;
importance
de
implantation
code
php
sein
code
HTML
code
PHP
pouvoir
être
implanter
sein
code
HTML
.
caractéristique
être
à
négliger
fait
de
écrire
code
PHP
être
nécessaire
rendre
programmation
simple
(
être
simple
de
écrire
code
HTML
fonction
echo
print
,
dans
caractère
spécial
devoir
être
précéder
de
antislash
sous
peine
de
voir
erreur
de
exécution
)
.
exemple
simple
concerner
page
dynamique
en-tête
être
même
:
dans
cas
,
code
PHP
pouvoir
commencer
qu
'
à
partir
de
balise
<
body
>
,
moment
page
pouvoir
afficher
selon
variable
par
exemple
.
,
être
possible
de
écrire
portion
de
script
en
PHP
,
séparer
par
code
HTML
statique
variable
/
fonction
déclarer
dans
portion
de
script
être
accessible
dans
portion
de
script
inférieur
.
notion
de
variable
de
environnement
variable
de
environnement
être
,
nom
indique
,
donnée
stocker
dans
variable
permettre
programme
de
avoir
information
sur
environnement
.
environnement
,
dans
cas
script
PHP
être
:
•
•
serveur
client
variable
être
créer
par
serveur
à
fois
script
PHP
être
appeler
,
serveur
fournir
en
paramètre
cacher
de
exécution
de
interpréteur
.
permettre
de
avoir
information
sur
type
de
serveur
,
administrateur
,
date
à
script
avoir
être
appeler
,
adresse
IP
type
de
navigateur
client
,
...
variable
de
environnement
pouvoir
classer
variable
de
environnement
en
deux
catégorie
:
•
•
variable
de
environnement
dépendre
client
variable
de
environnement
dépendre
serveur
variable
de
environnement
dépendre
client
variable
de
environnement
description
$
AUTH_TYPE
agir
de
méthode
de
authentification
avoir
être
utiliser
par
client
pour
accéder
script
PHP
$
COMSPEC
location
de
interpréteur
de
commande
sur
machine
(
sous
Windows
)
$
CONTENT_TYPE
type
de
donnée
contenir
présent
dans
corps
de
requête
.
agir
type
mimer
donnée
$
DOCUMENT_ROOT
Racine
document
sur
serveur
$
DOCUMENT_URI
adresser
script
PHP
en
relatif
(
à
partir
de
racine
serveur
)
$
HTTP_ACCEPT
type
mimer
reconnaître
par
serveur
(
séparer
par
virgule
)
$
HTTP_ACCEPT_ENCODING
type
de
encodage
serveur
pouvoir
réaliser
(
gzip
,
deflate
)
$
HTTP_ACCEPT_LANGUAGE
langue
utiliser
par
serveur
(
par
défaut
en-us
)
$
HTTP_CONNECTION
type
de
connexion
ouvrir
entre
client
serveur
(
par
exemple
KeepAlive
)
$
HTTP_HOST
nom
de
hôte
de
machine
client
(
associer
à
adresse
IP
)
$
HTTP_REFERER
URL
de
page
avoir
appeler
script
PHP
variable
permettre
de
avoir
information
sur
type
de
navigateur
utiliser
par
client
,
système
de
exploitation
.
exemple
de
User-Agents
:
$
HTTP_USER_AGENT
•
•
•
•
•
•
•
Mozilla
/
(
compatible
;
MSIE
;
Windows
NT
;
TUCOWS
Network
)
Mozilla
/
[
en
]
(
X11
;
I
;
Linux
2.2.14-15mdk
i686
)
$
LAST_MODIFIED
date
heure
de
dernier
modification
fichier
$
PATH
agir
chemin
de
accès
différent
répertoire
sur
serveur
$
PATH_INFO
agir
chemin
de
accès
script
PHP
en
relatif
(
de
racine
serveur
jusque
script
PHP
)
$
PHP_SELF
nom
script
PHP
$
REDIRECT_STATUS
agir
de
état
de
redirection
(
echec
succès
)
$
REDIRECT_URL
agir
de
URL
vers
navigateur
client
avoir
être
rediriger
$
QUERY_STRING
agir
de
partie
de
URL
(
avoir
servir
à
accéder
script
PHP
)
situer
après
point
de
interrogation
.
être
de
manière
être
transmettre
donnée
de
formulaire
dans
cas
de
méthode
GET
$
REMOTE_ADDR
variable
contenir
adresse
IP
client
appeler
script
CGI
$
REMOTE_PORT
variable
permettre
de
savoir
port
sur
requête
HTTP
avoir
être
envoyer
serveur
chemin
de
accès
complet
script
PHP
$
SCRIPT_FILENAME
$
SCRIPT_NAME
•
sous
windows
,
être
de
forme
:
c
:
/
php
/
dns-remplacer
chemin
de
accès
relatif
(
par
rapport
chemin
de
accès
à
racine
web
(
$
DOCUMENT_ROOT
)
)
script
PHP
variable
de
environnement
dépendre
serveur
variable
de
environnement
description
$
DATE_GMT
dater
actuel
format
GMT
$
DATE_LOCAL
dater
actuel
format
local
$
DOCUMENT_ROOT
Racine
document
Web
sur
serveur
$
GATEWAY_INTERFACE
version
spécification
CGI
utiliser
par
serveur
$
HTTP_HOST
nom
de
domaine
serveur
$
SERVER_ADDR
adresser
IP
serveur
$
SERVER_ADMIN
adresser
de
administrateur
serveur
$
SERVER_NAME
nom
donner
serveur
en
local
$
SERVER_PORT
numéro
de
port
associer
protocole
HTTP
sur
serveur
$
SERVER_PROTOCOL
nom
version
protocole
utiliser
pour
envoyer
requête
script
PHP
type
(
logiciel
)
serveur
web
$
SERVER_SOFTWARE
•
pour
serveur
apache
sous
Unix
:
apache
/
(
Unix
)
PHP
/
•
pour
serveur
apache
sous
Windows
:
apache
/
(
Win32
)
PHP
/
affichage
variable
de
environnement
être
possible
de
créer
script
permettre
de
visualiser
ensemble
variable
de
environnement
.
premier
façon
consister
à
utiliser
fonction
phpinfo
(
)
afficher
seul
tableau
récapitulatif
paramètre
serveur
de
intepréteur
PHP
,
tableau
variable
de
environnement
<
?
phpinfo
(
)
;
?
>
PHP
fournir
fonction
getenv
(
)
permettre
de
retourner
valeur
de
variable
de
environnement
passer
en
paramètre
:
<
?
echo
getenv
(
`
`
HTTP_USER_AGENT
'
'
)
;
?
>
être
possible
de
définir
variable
de
environnement
:
<
?
echo
putenv
(
`
`
MA_VARIABLE
=
mavaleur
gestion
fichier
avec
PHP
avec
PHP
,
création
lecture
de
fichier
être
,
fois
de
,
simple
.
exister
multitude
de
fonction
dédier
à
utilisation
fichier
.
communication
entre
script
PHP
fichier
être
repérer
par
variable
,
indiquer
état
fichier
pouvoir
passer
en
paramètre
fonction
spécialiser
pour
manipuler
.
fonction
fopen
(
)
fonction
de
base
être
fonction
fopen
(
)
.
être
permettre
de
ouvrir
fichier
,
être
pour
lire
,
créer
,
écrire
.
syntaxe
:
entier
fopen
(
chainer
nomdufichier
,
chainer
mode
)
;
mode
indiquer
type
de
opération
être
possible
de
effectuer
sur
fichier
après
ouverture
.
agir
de
lettre
(
en
réalité
chaîne
de
caractère
)
indiquer
opération
possible
:
•
•
r
(
read
)
indiquer
ouverture
en
lecture
w
(
write
)
indiquer
ouverture
en
écriture
(
fonction
créer
fichier
exister
)
•
avoir
(
appendre
)
indiquer
ouverture
en
écriture
avec
ajout
contenu
à
fin
fichier
(
fonction
créer
fichier
exister
)
mode
être
suivre
caractère
+
pouvoir
être
lire
écrire
.
,
fait
de
faire
suivre
mode
par
lettre
b
entre
crochet
indique
fichier
être
traiter
de
façon
binaire
.
tableau
récapituler
ensemble
mode
de
fichier
possible
:
mode
description
r
ouverture
en
lecture
w
ouverture
en
écriture
(
fonction
créer
fichier
exister
)
avoir
ouverture
en
écriture
avec
ajout
contenu
à
fin
fichier
(
fonction
créer
fichier
exister
)
r+
ouverture
en
lecture
écriture
w+
ouverture
en
lecture
écriture
(
fonction
créer
fichier
exister
)
a+
ouverture
en
lecture
écriture
avec
ajout
contenu
à
fin
fichier
(
fonction
créer
fichier
exister
)
exemple
de
utilisation
possible
de
fonction
:
$
fp
=
fopen
(
`
`
.
.
/
dns-remplacer
'
'
,
'
'
r
'
'
)
;
/
/
lecture
/
/
écriture
depuis
début
fichier
$
fp
=
fopen
(
`
`
ftp
:
/
/
dns-remplacer
/
pub
/
dns-remplacer
'
'
,
'
'
w
'
'
)
;
/
/
écriture
depuis
fin
fichier
$
fp
=
fopen
(
`
`
http
:
/
/
dns-remplacer
/
dns-remplacer
'
'
,
'
'
avoir
'
'
)
;
de
,
fonction
fopen
permettre
de
ouvrir
fichier
présent
sur
web
grâce
à
URL
.
script
permettre
de
récupérer
contenu
de
page
de
site
web
:
<
?
$
fp
=
fopen
(
`
`
http
:
/
/
dns-remplacer
'
'
,
'
'
r
'
'
)
;
/
/
lecture
fichier
while
(
!
feof
(
$
fp
)
)
{
/
/
parcourir
ligne
$
page
.
=
fgets
(
$
fp
,
)
;
/
/
lecture
contenu
de
ligne
}
?
>
être
utile
de
tester
ouverture
de
fichier
être
dérouler
de
stopper
script
PHP
être
cas
:
<
?
if
(
!
$
fp
=
fopen
(
`
`
http
:
/
/
dns-remplacer
'
'
,
'
'
r
'
'
)
)
{
echo
`
`
Echec
de
ouverture
fichier
'
'
;
exit
;
}
else
{
/
/
code
;
}
?
>
fichier
ouvrir
avec
fonction
fopen
(
)
devoir
être
fermer
,
à
fin
de
utilisation
,
par
fonction
fclose
(
)
en
passer
en
paramètre
entier
retourné
par
fonction
fopen
(
)
lecture
écriture
fois
fichier
avoir
être
ouvrir
avec
mode
désirer
,
être
possible
de
lire
contenu
d
'
écrire
information
grâce
fonction
:
•
fputs
(
)
(
appelé
fwrite
(
)
,
deux
nom
être
équivalent
,
parler
de
)
permettre
de
écrire
chaîne
de
caractère
dans
fichier
entier
fputs
(
entier
Etat_du_fichier
,
chainer
sortir
)
;
fonction
fputs
(
)
renvoyer
nombre
de
caractère
écrire
dans
fichier
•
fgets
(
)
permettre
de
récupérer
ligne
fichier
chaîner
fgets
(
entier
Etat_du_fichier
,
entier
longueur
)
;
paramètre
longueur
désigner
nombre
de
caractère
maximum
fonction
être
sensé
récupérer
sur
ligne
.
fonction
fgets
(
)
renvoyer
en
cas
de
échec
,
chaîne
dans
cas
contraire
Etant
donner
fonction
fgets
(
)
récupérer
à
appel
nouveau
ligne
fichier
,
être
essentiel
,
pour
récupérer
intégralité
contenu
de
fichier
de
insérer
dans
boucle
while
.
,
utiliser
fonction
feof
(
)
,
fonction
tester
fin
fichier
n
'
avoir
être
atteindre
,
en
test
de
boucle
while
.
de
façon
,
fin
fichier
n
'
avoir
être
atteindre
,
lire
ligne
suivant
fichier
...
<
?
if
(
!
$
fp
=
fopen
(
`
`
dns-remplacer
'
'
,
'
'
r
'
'
)
)
{
echo
`
`
Echec
de
ouverture
fichier
'
'
;
exit
;
}
else
{
while
(
!
feof
(
$
fp
)
)
{
/
/
récupérer
ligne
$
ligner
=
fgets
(
$
fp
,
)
;
/
/
afficher
ligne
echo
$
ligne
;
/
/
stocker
ensemble
ligne
dans
variable
$
fichier
.
=
$
ligne
;
}
fclose
(
$
fp
)
;
/
/
fermer
fichier
}
?
>
pour
stocker
infos
dans
fichier
,
falloir
dans
premier
temps
ouvrir
fichier
en
écriture
en
créer
exister
.
avoir
choix
entre
mode
'
w
'
mode
'
avoir
'
.
préférer
second
pointeur
trouver
en
fin
de
fichier
(
dire
écrire
à
suite
de
trouver
dans
fichier
lieu
de
écraser
contenu
exister
)
.
<
?
$
fp
=
fopen
(
`
`
php_8_
dns-remplacé
'
'
,
'
'
avoir
'
'
)
;
/
/
ouverture
fichier
en
écriture
fputs
(
$
fp
,
`
`
\n
'
'
)
;
/
/
aller
avoir
ligne
fputs
(
$
fp
,
`
`
$
nom
|
$
email
'
'
)
;
/
/
écrire
nom
email
dans
fichier
fclose
(
$
fp
)
;
?
>
petit
script
permettre
de
récupérer
titre
de
page
Web
(
texte
comprendre
entre
balise
<
TITLE
>
<
/
TITLE
>
)
.
utiliser
expression
régulier
pour
localiser
texte
.
<
?
$
fp
=
fopen
(
`
`
http
:
/
/
dns-remplacer
'
'
,
'
'
r
'
'
)
;
/
/
lecture
fichier
while
(
!
feof
(
$
fp
)
)
{
/
/
parcourir
ligne
$
page
.
=
fgets
(
$
fp
,
)
;
/
/
lecture
contenu
de
ligne
}
$
titre
=
eregi
(
`
`
<
title
>
(
.
*
)
<
/
title
>
'
'
,
$
page
,
$
reg
)
;
/
/
isoler
titre
echo
$
reg
[
]
;
fclose
(
$
fp
)
;
?
>
test
de
fichier
PHP
fournir
de
nombreux
fonction
permettre
de
faire
test
sur
fichier
pour
connaître
propriété
.
liste
fonction
test
:
•
is_dir
(
)
permettre
de
savoir
fichier
nom
être
passer
en
paramètre
correspondre
à
répertoire
booléen
is_dir
(
chaine
Nom_du_fichier
)
;
fonction
is_dir
(
)
renvoyer
agir
de
répertoire
,
dans
cas
contraire
<
?
if
(
!
is_dir
(
`
`
install
'
'
)
)
{
echo
`
`
agir
de
répertoire
'
'
;
}
else
{
echo
`
`
agir
de
répertoire
'
'
;
}
?
>
•
is_executable
(
)
permettre
de
savoir
fichier
nom
être
passer
en
paramètre
être
exécutable
booléen
is_executable
(
chaine
Nom_du_fichier
)
;
fonction
is_executable
(
)
renvoyer
fichier
être
exécutable
,
dans
cas
contraire
•
is_file
(
)
permettre
de
savoir
fichier
nom
être
passer
en
paramètre
correspondre
à
répertoire
,
à
lien
symbolique
booléen
is_file
(
chaine
Nom_du_fichier
)
;
fonction
is_file
(
)
renvoyer
agir
de
fichier
,
dans
cas
contraire
•
is_link
(
)
permettre
de
savoir
fichier
nom
être
passer
en
paramètre
correpond
à
lien
symbolique
booléen
is_link
(
chaine
Nom_du_fichier
)
;
fonction
is_link
(
)
renvoyer
agir
de
lien
symbolique
,
dans
cas
contraire
de
autre
façon
de
lire
écrire
dans
cas
,
pouvoir
être
rébarbatif
de
devoir
mettre
en
œuvre
fonction
fopen
(
)
fgets
pour
lire
intégralité
contenu
de
fichier
.
pour
raison
PHP
fournir
fonction
supplémentaire
permettre
de
faire
opération
.
fonction
filer
(
)
permettre
de
retourner
dans
tableau
intégralité
de
fichier
en
mettre
de
ligne
dans
élément
tableau
(
rappel
:
premier
élément
de
tableau
être
repérer
par
indice
)
.
syntaxe
:
tableau
file
(
chainer
nomdufichier
)
;
exemple
suivre
montrer
parcourir
ensemble
tableau
de
afficher
fichier
.
<
?
$
fichier
=
`
`
dns-remplacer
'
'
;
if
(
is_file
(
$
fichier
)
)
{
if
(
$
TabFich
=
file
(
$
fichier
)
)
{
for
(
$
i
=
;
$
i
<
count
(
$
TabFich
)
;
$
i++
)
echo
$
TabFich
[
$
i
]
;
}
else
{
echo
`
`
fichier
pouvoir
être
lire
...
<
br
>
'
'
;
}
}
else
{
echo
`
`
désoler
fichier
être
valide
<
br
>
'
'
;
}
?
>
fonction
fpassthru
(
)
permettre
de
envoyer
contenu
fichier
dans
fenêtre
navigateur
.
syntaxe
de
fonction
être
suivant
:
booléen
fpassthru
(
entier
etat
)
;
fonction
permettre
en
réalité
de
envoyer
contenu
fichier
à
partir
de
position
courant
dans
fichier
,
être
possible
par
exemple
de
lire
ligne
avec
fgets
(
)
,
de
envoyer
reste
navigateur
...
script
suivre
permettre
de
parcourir
fichier
HTML
contenir
dans
site
de
afficher
arborescence
:
<
HTML
>
<
HEAD
>
<
TITLE
>
affichage
de
arborescence
<
/
TITLE
>
<
/
HEAD
>
<
body
>
<
?
function
ScanDir
(
$
Directory
)
{
if
(
is_dir
(
$
Directory
)
&
&
is_readable
(
$
Directory
)
)
{
if
(
$
MyDirectory
=
opendir
(
$
Directory
)
)
{
while
(
$
Entry
=
readdir
(
$
MyDirectory
)
)
{
if
(
is_dir
(
$
Directory
.
`
`
/
'
'
.
$
Entry
)
)
{
if
(
(
$
Entry
!
=
`
`
.
'
'
)
&
&
(
$
Entry
!
=
`
`
.
.
'
'
)
)
{
echo
`
`
<
li
>
<
b
>
Repertoire
<
/
b
>
:
$
Directory
/
$
Entry
<
/
li
>
\n
'
'
;
echo
`
`
<
ul
>
'
'
;
ScanDir
(
$
Directory
.
`
`
/
'
'
.
$
Entry
)
;
echo
`
`
<
/
ul
>
'
'
;
}
}
else
{
echo
`
`
<
li
>
<
b
>
fichier
<
/
b
>
:
$
Directory
/
$
Entry
<
/
li
>
\n
'
'
;
if
(
eregi
(
`
`
(
\.html
)
|
(
\.htm
)
'
'
,
$
Entry
)
)
{
$
MetaTags
=
get_meta_tags
(
$
Directory
.
`
`
/
'
'
.
$
Entry
)
;
}
}
}
closedir
(
$
MyDirectory
)
;
}
}
}
$
open_basedir
=
'
'
.
`
`
;
echo
`
`
<
ul
>
'
'
;
ScanDir
(
`
`
.
`
`
)
;
echo
`
`
<
/
ul
>
'
'
;
?
>
<
/
body
>
<
/
HTML
>
