cours|cour
PHP
accélérer
version
Gérard
Rozsavolgyi
septembre
,
table
matière
cours|cour
format
epub
cours|cour
format
pdf
table
matière
:
caractéristique
principal
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
fonctionnement
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
historique
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
installation
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
configuration
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
exemple
simple
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
imbrication
de
code
HTML
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
formulaire
HTML
réponse
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
variable
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
chaîne
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
typage
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
particularité
de
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tableau
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tableau
prédéfinir
de
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
L
’
inclusion
de
fichier
externe
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
objet
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
collection
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
connexion
base
de
donnée
depuis
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
requête
préparer
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
complément
sur
PDO
-
sécurité
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
filtrage
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
gestion
transaction
avec
PDO
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
connexion
persistant
avec
PDO
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
validation
contrôle
d
’
entrée
avec
GUMP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Http
conservation
d
’
information
sur
client
.
.
.
.
.
.
.
.
.
.
.
.
.
.
manipuler
XML
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
architecture
de
type
MVC
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Template
Twig
en
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
i
composer
,
Symfony
Flex
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tester
application
PHP
-
TDD
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
mettre
en
place
Web
service
REST
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
exemple
de
service
REST
avec
PHP
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
tester
api
REST
avec
navigateur
avec
curl
.
.
.
.
.
.
.
.
.
.
.
.
tester
api
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
Lic
pro
Web
mobile
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
2ème
année
IUT
informatique
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
Lic
pro
Web
mobile
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
feuille
de
TD
CVRH
Tours
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
démarrer
avec
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Bob
travailler
avec
Alice
grâce
à
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
mettre
à
jour
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
travailler
sur
branche
git
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Bob
branche
d
’
Alice
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
Alice
récupérer
dernier
version
master
:
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
GIT
référence
index
recherche
index
ii
chapitrer
cours|cour
format
epub
PHP
en
accéléré
format
epub
cours|cour
PHP
accélérer
,
version
chapitre
.
cours|cour
format
epub
chapitre
cours|cour
format
pdf
PHP
en
accéléré
en
pdf
cours|cour
PHP
accélérer
,
version
chapitre
.
cours|cour
format
pdf
chapitrer
table
matière
:
caractéristique
principal
langage
interpréter
—
de
compilation
—
exécuter
instruction
par
instruction
—
Multi-plateformes
—
compilateur
AOT
/
ByteCode
en
PHP7
zend
—
compilateur
JIT
pour
HHVM
Facebook
—
langage
hack
proposer
par
Facebook
spécialiser
dans
génération
de
texte
de
document
—
HTML
—
PDF
—
image
fichier
d
’
extension
.php
—
coder
insérer
dans
page
HTML
—
entre
balise
<
?
php
?
>
cours|cour
PHP
accélérer
,
version
fonctionnement
L
’
interpréteur
lire
fichier
source
.php
générer
flux
de
sortie
avec
règle
suivant
:
—
ligne
situer
à
l
’
extérieur
d
’
bloc
PHP
(
entre
<
?
php
?
>
)
être
recopier
inchangé
dans
flux
de
sortie
—
code
PHP
être
interpréter
générer
résultat
intégré
flux
de
sortie
—
erreur
éventuel
donner
lieu
à
message
d
’
erreur
qu
’
retrouver
dans
flux
de
sortie
(
selon
configuration
serveur
)
—
page
html
pur
sauvegarder
avec
l
’
extension
.php
être
modifier
ren-
voyée
.
.
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
historique
créateur
Rasmus
Lerdorf
,
programmeur
Grœnlandais
avec
nationalité
canadien
,
créer
PHP
en
pour
analyser
connexion
sur
site
Web
.
réaliser
premier
mouture
langage
(
v1
v2
)
.
en
,
deux
étudiant
,
Andi
Gutmans
Zeev
Suraski
,
reprendre
moteur
,
sortir
PHP
outil
zend
.
note
:
langage
PHP
avoir
subir
de
profond
remaniement
avoir
bénéficier
de
d
’
enrichis-sements
depuis
premier
version
.
premier
version
objet
de
PHP
(
version
)
avoir
être
remanier
passage
de
PHP4.0
à
PHP5.0
s
’
inspirer
modèle
de
java
.
version
actuel
de
PHP
être
,
sortir
en
.
version
être
sortir
en
décembre
n
’
avoir
avoir
de
version
!
PHP
(
https
:
/
/
dns-remplacer
/
rfc
/
php7timeline
)
avertissement
:
début
développement
de
version
de
PHP
dater
de
avoir
être
abandonner
en
raison
de
difficulté
d
’
intégration
support
Unicode
.
autre
fonctionnalité
envisager
avoir
depuis
été
intégrer
à
PHP
.
Ca
n
’
avoir
empêcher
nombre
de
livre
intituler
PHP
de
sortir
version
n
’
exister
.
.
.
saga
PHP
:
—
Facebook
avoir
publier
en
HipHop
Virtual
machiner
dire
HHVM
,
machine
virtuel
permettre
de
pré-compiler
code
PHP
en
bytecode
à
manière
de
java
(
JIT
Compi-
ler
)
.
—
en
,
Facebook
sortir
langage
hack
,
s
’
exécuter
grace
à
HHVM
apporter
fonctionnalité
typage
fort
,
classe
paramétrables
,
api
de
collec-
tions
riche
cohérent
,
traitement
asynchrone
de
sécurité
avec
l
’
extension
XHP
.
—
framework
PHP
Phalcon
(
extension
PECL
de
PHP
)
,
proposer
Zephir
(
zend
Engine
PHp
Intermediate
)
(
https
:
/
/
dns-remplacer
/
phalcon
/
zephir
)
permettre
création
d
’
extension
rapide
en
PHP
(
coder
en
C
)
de
manière
simplifier
(
sans
écrire
C
directe-
mentir
)
.
—
société
zend
avoir
réagir
face
à
HHVM
en
accélérer
développement
de
nouveau
mouture
de
PHP
en
améliorer
performance
avec
mécanisme
de
compilation
AOT
(
Ahead
of
Time
)
PHP
signifier
d
’
abord
Personal
home
page
HypertextPreProcessor
.
historique
cours|cour
PHP
accélérer
,
version
syntaxe
structure
—
proche
C
Perl
—
structurer
début
—
possibilité
de
définir
fonction
classe
—
bon
performance
pour
PHP
(
amélioration
de
l
’
ordre
de
%
de
vitesse
d
’
exécution
)
utilisation
—
grand
succès
—
utilisation
par
de
grand
site
—
de
code
libre
disponible
.
—
dizaine
de
million
de
site
Web
l
’
utiliser
à
travers
monde
.
.
.
—
Monde
(
http
:
/
/
dns-remplacer
/
)
,
Facebook
(
http
:
/
/
dns-remplacer
/
)
Yahoo
(
http
:
/
/
dns-remplacer
/
)
CMS
grand
CMS
content
management
System
système
de
gestion
de
contenu
utiliser
PHP
,
:
—
Wordpress
—
Joomla
—
Drupal
CMS
de
ecommerce
:
—
Prestashop
—
Magento
Frameworks
de
grand
Frameworks
de
développement
Web
être
disponible
en
PHP
:
—
Symfony
—
zend
—
Laravel
—
Phalcon
—
CakePHP
—
Yii
—
Slim
noter
:
de
million
de
site
être
réaliser
en
PHP
à
travers
monde
!
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
installation
PHP
indication
:
informaticien
devoir
savoir
LAMP
vouloir
dire
.
.
.
LAMP
:
—
Linux
—
apache
—
MySQL
—
PHP
par
exension
,
logiciel
équivalent
pour
Windows
,
s
’
être
retrouver
nommer
:
WAMP
:
pour
Windows
MAMP
pour
mac
.
.
.
MAMP
:
pour
mac
.
indispensable
apache
PHP
être
installer
sur
mac
os
10.xx
simple
à
configurer
.
falloir
installer
MySQL
dans
paquet
en
utiliser
homebrew
macport
pour
plate-forme
,
pouvoir
installer
XAMPP
(
https
:
/
/
dns-remplacer
/
fr
/
dns-remplacer
)
revenir
à
l
’
os
de
référence
à
présent
.
sous
Linux
:
—
installer
Apache2
—
installer
PHP7
—
Télécharger
documentation
(
paquet
php-doc
)
—
vérifier
fichier
dns-remplacé
—
installer
MySQL
(
client
serveur
)
—
installer
PHPMyAdmin
—
installer
paquet
complémentaire
(
nom
commencer
par
php5-
)
.
installation
PHP
cours|cour
PHP
accélérer
,
version
configuration
PHP
fichier
dns-remplacer
fichier
dns-remplacé
contenir
directive
essentiel
de
réglage
.
—
taille
fichier
téléchargeables
—
Safe-Mode
—
affichage
traitement
erreur
—
communication
avec
MySQL
danger
:
attention
,
directive
de
fichier
être
important
pour
sécurité
d
’
serveur
en
production
.
falloir
veiller
vérifier
dans
cas
.
sous
distribution
de
Linux
,
exister
version
de
fichier
un
de
developpement
autre
pour
serveur
de
production
.
N
’
oublier
d
’
activer
bon
version
selon
contexte
de
vérifier
en
cas
.
directive
principal
dns-remplacer
:
directive
être
nombreux
.
J
’
avoir
retenir
important
dans
fichier
suivre
en
commenter
rôle
.
[
PHP
]
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
about
dns-remplacé
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
fichier
de
configuration
principal
de
PHP
;
permettre
de
préciser
principal
option
;
sous
distribution
Linux
,
exister
version
:
;
un
de
developpement
autre
pour
serveur
de
production
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Language
option
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
pour
activer
PHP
engine
=
;
pouvoir
mettre
à
faux
:
tags
<
?
...
.
?
>
être
reconnaître
.
short_open_tag
=
;
Allow
ASP-style
<
%
%
>
tags
.
;
http
:
/
/
dns-remplacer
/
asp-tags
asp_tags
=
off
;
The
number
of
significant
digit
displayed
in
floating
˓→numbers
.
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
http
:
/
/
dns-remplacer
/
precision
precision
=
;
compatibilité
an
y2k_compliance
=
;
taille
buffers
output_buffering
=
;
pour
servir
page
compresser
dns-remplacer
_compression
=
;
mettre
à
pour
forcer
flush
en
phase
de
debuggage
implicit_flush
=
off
;
Safe
Mode
;
http
:
/
/
dns-remplacer
/
safe-mode
;
pouvoir
laisser
désactiver
;
avoir
être
déclarer
OBSOLETE
depuis
PHP
Safe_mode
=
off
;
pour
désactiver
fonction
PHP
;
indépendant
safe_mode
;
http
:
/
/
dns-remplacer
/
disable-functions
disable_functions
=
;
meme
chose
avec
classe
disable_classes
=
;
Colors
for
Syntax
Highlighting
mode
.
;
à
utiliser
avec
fonction
highlight_file
(
)
=
show_source
(
)
dns-remplacer
=
#
DD0000
dns-remplacer
=
#
FF9900
dns-remplacer
=
#
dns-remplacé
=
#
FFFFFF
dns-remplacer
=
#
0000BB
dns-remplacer
=
#
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Miscellaneous
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
pouvoir
enlever
sur
serveur
de
production
;
être
menace
de
sécurité
expose_php
=
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
(
suite
sur
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
Resource
Limits
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
temps
de
éxécution
max
de
script
;
attention
avoir
code
long
à
éxécuter
!
max_execution_time
=
;
traitement
donnée
reçu
;
laisser
valeur
par
défaut
max_input_time
=
;
taille
mémoire
donner
à
script
PHP
memory_limit
=
128M
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Error
handling
and
logging
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
pour
serveur
de
production
:
E_ALL
&
~
E_DEPRECATED
;
pour
serveur
de
développement
error_reporting
=
E_ALL
|
E_STRICT
;
affichage
erreur
sur
sortie
standard
;
cad
sur
navigateur
;
à
désactiver
sur
serveur
de
production
;
utile
pour
développeur
display_errors
=
;
affichage
erreur
démarrage
de
PHP
;
pour
débugger
erreur
sur
plugins
;
module
complémentaire
de
PHP
display_startup_errors
=
;
logger
erreur
;
à
activer
log_errors
=
;
set
maximum
length
of
log_errors
.
in
error_log
information
about
˓→the
source
is
;
added
.
The
default
is
and
allows
to
not
apply
any
maximum
˓→length
at
all
.
;
http
:
/
/
dns-remplacer
/
log-errors-max-len
log_errors_max_len
=
;
répéter
erreur
identique
ignore_repeated_errors
=
;
...
sauf
provenir
de
fichier
différent
ignore_repeated_source
=
off
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
rapporter
fuite
de
mémoire
;
à
activer
en
phase
de
dévelopement
report_memleaks
=
;
variable
$
php_errormsg
;
contenir
texte
dernier
message
;
de
erreur
;
à
désactiver
sur
serveur
de
production
track_errors
=
;
http
:
/
/
dns-remplacer
/
html-errors
html_errors
=
;
à
faire
pointer
sur
copie
local
de
documentation
;
de
PHP
;
à
désactiver
sur
serveur
de
production
docref_root
=
`
`
/
doc
/
php
/
'
'
;
extension
fichier
de
documentation
docref_ext
=
.html
;
chaine
à
afficher
avant
message
de
erreur
;
pour
afficher
en
rouge
;
réserver
serveur
de
dévelopement
error_prepend_string
=
`
`
<
faire
color
=
#
ff0000
>
'
'
;
fermeture
tag
précédent
error_append_string
=
`
`
<
/
faire
>
'
'
;
pour
changer
fichier
être
logguées
;
erreur
.
laisser
inchangé
sauf
;
cas
particulier
;
error_log
=
syslog
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
dater
Handling
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
The
separator
used
in
PHP
generated
URLs
to
separate
argument
.
;
PHP
'
s
default
setting
is
`
`
&
'
'
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
;
Example
:
;
arg_
dns-remplacer
=
`
`
&
amp
;
'
'
;
List
of
separator
(
s
)
used
by
PHP
to
parse
input
URLs
into
˓→variable
.
;
PHP
'
s
default
setting
is
`
`
&
'
'
.
;
note
:
Every
character
in
this
directif
is
considered
avoir
˓→separator
!
(
suite
sur
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
http
:
/
/
dns-remplacer
/
dns-remplacer
;
Example
:
;
arg_
dns-remplacer
=
`
`
;
&
'
'
;
This
directif
determines
which
super
global
arrays
are
˓→registered
when
PHP
;
start
up
.
If
the
register_globals
directif
is
enabled
,
it
also
˓→determines
;
what
order
variable
are
populated
into
the
global
space
.
G
,
P
,
C
,
E
˓→
&
S
are
;
abbreviations
for
the
following
respectif
super
globals
:
GET
,
˓→POST
,
COOKIE
,
;
ENV
and
SERVER
.
There
is
avoir
performance
penalty
paid
for
the
˓→registration
of
;
these
arrays
and
because
ENV
is
not
avoir
commonly
used
avoir
the
˓→others
,
ENV
is
;
is
not
recommended
production
servers
.
You
can
still
get
˓→access
to
;
the
environment
variable
through
getenv
(
)
should
you
need
to
.
;
Default
value
:
`
`
EGPCS
'
'
;
Development
valoir
:
`
`
GPCS
'
'
;
production
valoir
:
`
`
GPCS
'
'
;
;
http
:
/
/
dns-remplacer
/
variables-order
variables_order
=
`
`
GPCS
'
'
;
laisser
valeur
par
défaut
request_order
=
`
`
GP
'
'
;
Ca
faire
falloir
garder
directive
à
off
register_globals
=
off
;
Determines
whether
the
deprecated
long
$
HTTP_
*
_VARS
type
˓→predefined
variable
;
are
registered
by
PHP
not
.
avoir
they
are
deprecated
,
we
˓→obviously
don't
;
recommend
you
user
them
.
They
are
by
default
for
compatibility
˓→reasons
but
;
they
are
not
recommended
production
servers
.
;
Default
value
:
;
Development
valoir
:
;
production
valoir
:
;
http
:
/
/
dns-remplacer
/
register-long-arrays
register_long_arrays
=
off
;
à
activer
vouloir
utiliser
PHP
;
en
ligne
de
commande
passer
argument
register_argc_argv
=
off
;
meilleur
performance
:
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
auto_globals_jit
=
;
taille
maximal
donnée
accepter
en
POST
;
http
:
/
/
dns-remplacer
/
post-max-size
post_max_size
=
8M
;
à
éviter
magic_quotes_gpc
=
off
;
magic_quotes_runtime
=
off
;
mimetype
par
défaut
:
text
/
html
default_mimetype
=
`
`
text
/
html
'
'
;
jeu
de
caractère
par
défaut
;
laisser
à
vide
choisir
jeu
de
caractère
;
default_charset
=
`
`
iso-8859-1
'
'
default_charset
=
`
`
utf-8
'
'
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
file
Uploads
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
autoriser
`
`
uploads
'
'
de
fichier
file_uploads
=
;
spécifier
répertoire
temporaire
por
fichier
;
uploadés
:
;
upload_tmp_dir
=
/
tmp
/
upload-dir
;
taille
maxi
pour
fichies
uploadés
upload_max_filesize
=
4M
;
Nbre
de
fichier
pouvoir
être
uploadés
en
seul
requête
max_file_uploads
=
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Fopen
wrappers
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Whether
to
allow
the
treatment
of
URLs
(
like
http
:
/
/
or
ftp
:
/
/
)
˓→as
file
.
;
http
:
/
/
dns-remplacer
/
allow-url-fopen
allow_url_fopen
=
;
Whether
to
allow
include
/
require
to
open
URLs
(
like
http
:
/
/
or
˓→ftp
:
/
/
)
avoir
file
.
(
suite
sur
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
http
:
/
/
dns-remplacer
/
allow-url-include
allow_url_include
=
off
;
Define
the
anonymous
ftp
password
(
your
email
address
)
.
PHP's
˓→default
setting
;
for
this
is
empty
.
;
http
:
/
/
dns-remplacer
/
from
;
from
=
'
'
john
@
dns-remplacer
'
'
;
Define
the
User-Agent
string
.
PHP
'
s
default
setting
for
this
is
˓→empty
.
;
http
:
/
/
dns-remplacer
/
user-agent
;
user_agent
=
'
'
PHP
'
'
;
Timeout
pour
flux
baser
sur
socket
default_socket_timeout
=
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Dynamic
extension
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
sous
Windows
:
;
extension
=
dns-remplacer
;
...
sous
UNIX
:
;
;
extension
=
dns-remplacer
;
;
...
avec
chemin
:
;
;
extension
=
/
path
/
to
/
extension
/
dns-remplacer
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
module
Settings
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
[
date
]
;
fuseau
horaire
utiliser
dns-remplacer
=
'
'
Europe
/
Paris
'
'
[
iconv
]
;
conversion
de
système
de
encodage
à
autre
;
dns-remplacer
_encoding
=
ISO-8859-1
;
dns-remplacer
_encoding
=
ISO-8859-1
;
dns-remplacer
_encoding
=
ISO-8859-1
[
Pdo_mysql
]
;
en
cas
de
utilisation
nouveau
moteur
mysqlnd
pdo_
dns-remplacer
_size
=
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
socket
par
défaut
pour
connexion
à
MySQL
;
valeur
par
défaut
fonctionner
pdo_
dns-remplacer
_socket
=
/
var
/
mysql
/
dns-remplacer
[
mail
function
]
;
for
Win32
only
.
;
http
:
/
/
dns-remplacer
/
smtp
SMTP
=
localhost
;
http
:
/
/
dns-remplacer
/
smtp-port
smtp_port
=
;
emplacement
pour
logger
appel
à
fonction
mail
(
)
;
dns-remplacer
=
[
MySQL
]
;
autoriser
connexion
persistant
;
apporter
fonctionnalité
supplémentaire
;
pouvoir
améliorer
performance
dns-remplacer
_persistent
=
;
If
mysqlnd
is
used
:
Number
of
cacher
slots
for
the
internal
result
˓→set
cache
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_size
dns-remplacer
_size
=
;
Nbre
maxi
de
lien
persistant
dns-remplacer
_persistent
=
;
nombre
maxi
de
lien
permanent
:
;
vouloir
dire
sans
limitation
dns-remplacer
_links
=
;
port
par
défaut
de
MySQL
dns-remplacer
_port
=
;
laisser
valeur
par
défaut
dns-remplacer
_socket
=
;
hôte
par
défaut
pour
mysql_connect
(
)
dns-remplacer
_host
=
;
utilisateur
par
défaut
pour
mysql_connect
(
)
dns-remplacer
_user
=
;
Passwd
par
défaut
pour
mysql_connect
(
)
;
être
bon
chose
de
garder
;
passwd
!
!
obsolete
dns-remplacer
_password
=
(
suite
sur
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
Timeout
de
connexion
à
MySQL
dns-remplacer
_timeout
=
;
Mode
de
débuggage
MySQL
dns-remplacer
_mode
=
[
MySQLi
]
;
Nbre
maxi
de
lien
persistant
dns-remplacer
_persistent
=
;
autoriser
connexion
persistant
;
apporter
fonctionnalité
supplémentaire
;
pouvoir
améliorer
performance
dns-remplacer
_persistent
=
;
maximum
number
of
links
.
means
no
limit
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
dns-remplacer
_links
=
;
If
mysqlnd
is
used
:
Number
of
cacher
slots
for
the
internal
result
˓→set
cache
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_size
dns-remplacer
_size
=
;
Por
pour
mysqli
dns-remplacer
_port
=
;
socket
par
défaut
pour
MySQLi
dns-remplacer
_socket
=
/
tmp
/
dns-remplacer
;
autoriser
interdire
reconnexion
dns-remplacé
=
off
[
mysqlnd
]
;
activation
statistique
de
mysqlnd
;
avoir
fin
de
réglage
serveur
de
BD
dns-remplacer
_statistics
=
;
chose
avec
opération
sur
mémoire
dns-remplacer
_memory_statistics
=
off
;
Size
of
avoir
pre-allocated
buffer
used
when
sending
command
to
˓→MySQL
in
bytes
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_cmd_buffer_size
;
dns-remplacer
_cmd_buffer_size
=
;
Size
of
avoir
pre-allocated
buffer
used
for
reading
dater
sentir
by
the
˓→server
in
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
bytes
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
_read_buffer_size
;
dns-remplacer
_read_buffer_size
=
[
bcmath
]
;
Number
of
decimal
digit
for
all
bcmath
functions
.
;
http
:
/
/
dns-remplacer
/
dns-remplacer
dns-remplacer
=
[
session
]
;
...
/
...
;
session
devoir
utiliser
cookies
?
dns-remplacé
_cookies
=
;
envoyer
cookies
à
travers
;
connexion
sécuriser
;
défaut
être
;
dns-remplacer
_secure
=
;
PHP
maintenir
cookie
avec
identifier
de
session
;
être
précaution
viser
à
éviter
;
vol
de
session
;
être
parade
absolu
dns-remplacer
_only_cookies
=
;
nom
de
session
dns-remplacer
=
PHPSESSID
;
démarrage
automatique
de
session
;
désactiver
par
défaut
dns-remplacer
_start
=
;
durée
de
vie
cookie
;
placer
à
,
temps
navigateur
;
être
redémarrer
dns-remplacer
_lifetime
=
;
domaine
de
validité
cookie
dns-remplacer
_domain
=
;
pour
interdire
à
javascript
de
accéder
à
cookie
dns-remplacer
_httponly
=
;
;
HTTP_REFERER
devoir
contenir
sous-chaine
;
pour
être
considérer
valide
dns-remplacer
_check
=
(
suite
sur
page
suivant
)
.
configuration
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
;
durée
de
expiration
document
en
minute
dns-remplacer
_expire
=
;
choix
de
fonction
de
hachage
pour
session
;
:
;
(
MD5
bit
)
;
(
SHA-1
bit
)
dns-remplacer
_function
=
[
assertion
]
;
assertion
actif
(
défaut
)
dns-remplacer
=
;
Emettre
warning
en
cas
de
assertion
vérifier
dns-remplacer
=
;
arrêter
en
cas
de
assertion
satisfaire
;
désactiver
par
défaut
;
dns-remplacer
=
off
;
fonction
utilisateur
à
appeller
en
cas
de
assertion
satisfaire
;
dns-remplacer
=
exemple
simple
bonjour
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
bonjour
depuis
PHP
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
'
bonjour
générer
en
PHP
!
'
;
?
>
<
/
body
>
<
/
html
>
résultat
brut
html
<
!
doctype
html
>
<
html
>
<
head
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
bonjour
depuis
PHP
<
/
title
>
<
/
head
>
<
body
>
bonjour
générer
en
PHP
!
<
/
body
>
<
/
html
>
exécution
bonjour
Infos
PHP
<
?
php
phpinfo
(
)
;
?
>
exécution
infos
php
user
agent
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
navigateur
<
/
title
>
<
body
>
information
sur
navigateur
être
:
<
?
php
echo
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
?
>
<
/
body
>
<
/
html
>
exemple
de
résultat
.
exemple
simple
cours|cour
PHP
accélérer
,
version
information
sur
navigateur
être
:
Mozilla
/
(
Macintosh
;
U
;
Intel
mac
os
X
10_6_4
;
fr-fr
)
AppleWebKit
/
˓→533.18.1
(
KHTML
,
like
gecko
)
version
/
safari
/
exécution
User-Agent
pouvoir
consulter
documentation
de
PHP
sur
:
doc
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
)
imbrication
de
code
HTML
PHP
pouvoir
par
exemple
:
—
commencer
page
HTML
—
écrire
de
PHP
—
reprendre
en
HTML
—
etc
.
exemple
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
navigateur
<
/
title
>
<
body
>
information
sur
navigateur
être
:
<
?
php
$
agent
=
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
echo
$
agent
;
echo
(
`
`
\n
<
P
>
'
'
)
;
if
(
stristr
(
$
agent
,
'
'
MSIE
'
'
)
)
{
?
>
<
b
>
sembler
utiliser
Internet
explorer
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
Firefox
/
i
'
'
,
$
agent
)
)
{
?
>
<
b
>
sembler
utiliser
Firefox
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
chrome
/
i
'
'
,
$
agent
)
)
{
?
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
b
>
sembler
utiliser
chrome
!
<
/
b
>
<
?
php
}
elseif
(
preg_match
(
`
`
/
safari
/
'
'
,
$
agent
)
)
{
?
>
<
b
>
sembler
utiliser
safari
!
<
/
b
>
<
?
php
}
else
echo
`
`
navigateur
inconnu
!
`
`
;
?
>
<
/
body
>
<
/
html
>
attention
:
pouvoir
devenir
illisible
exécution
user-agent
php
remède
:
écrire
genre
de
code
,
solution
courant
:
—
utiliser
fonction
PHP
—
utiliser
classe
objet
PHP
—
séparer
modèle
vue
—
séparer
modèle
,
vue
contrôleur
(
modèle
MVC
)
—
utiliser
système
de
template
Twig
formulaire
HTML
réponse
en
PHP
coder
:
—
petit
formulaire
HTML
—
réponse
en
PHP
formulaire
HTML
:
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
html
<
/
title
>
<
/
head
>
<
body
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
(
suite
sur
page
suivant
)
.
formulaire
HTML
réponse
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
nom
:
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
>
âge
:
<
input
type
=
'
'
text
'
'
name
=
'
'
age
'
'
>
<
p
>
<
input
type
=
submit
valoir
=
'
'
envoyer
'
'
>
<
/
form
>
<
/
body
>
<
/
html
>
réponse
:
<
!
doctype
html
>
<
html
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
test
formulaire
PHP
<
/
title
>
<
/
head
>
<
body
>
<
h@card@
>
bonjour
,
<
?
php
echo
$
_GET
[
'
nom
'
]
?
>
<
/
h1
>
<
h@card@
>
sembler
avoir
<
?
php
echo
$
_GET
[
'
age
'
]
?
>
<
/
h2
>
<
?
php
$
n
=
$
_GET
[
'
nom
'
]
;
$
avoir
=
$
_GET
[
'
age
'
]
;
?
>
nom
être
stocker
dans
variable
$
n
type
être
<
?
php
echo
gettype
(
$
n
)
?
>
âge
être
stocker
dans
variable
<
b
>
$
avoir
<
/
b
>
<
br
/
>
type
être
<
i
>
<
?
php
echo
gettype
(
$
avoir
)
;
?
>
<
/
i
>
<
br
/
>
pouvoir
transformer
en
<
i
>
integer
<
/
i
>
en
faire
:
<
?
php
settype
(
$
avoir
,
'
'
integer
'
'
)
;
?
>
<
br
/
>
type
de
$
avoir
:
<
?
php
echo
gettype
(
$
avoir
)
;
?
>
<
/
body
>
<
/
html
>
exécution
:
formulaire
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
variable
en
PHP
déclaration
simple
:
<
?
php
$
variable
=
`
`
variable
en
PHP
'
'
;
/
/
autre
variable
:
$
variable
=
;
?
>
existence
de
variable
,
fonction
isset
(
)
:
<
?
php
$
avoir
=
`
`
variable
en
PHP
'
'
;
if
(
isset
(
$
avoir
)
)
echo
`
`
variable
avoir
exister
'
'
;
unset
(
$
avoir
)
;
echo
`
`
variable
avoir
avoir
être
supprimer
...
'
'
;
?
>
test
de
variable
,
fonction
empty
(
)
:
<
?
php
$
avoir
=
`
`
variable
en
PHP
'
'
;
if
(
!
empty
(
$
avoir
)
)
echo
`
`
variable
exister
n\'est
˓→pas
vide
!
`
`
;
?
>
avertissement
:
fonction
empty
(
)
répondre
vrai
variable
n
’
exister
sans
faire
warning
!
en
,
avant
PHP
,
pouvoir
l
’
utiliser
sur
autre
chose
variable
(
impossible
d
’
appeller
fonction
dans
l
’
argument
qu
’
passer
)
test
de
variable
en
PHP
avec
l
’
opérateur
coalescent
:
L
’
opérateur
Null
coalescent
?
?
permettre
de
simplifier
test
d
’
existence
de
variable
d
’
alternatif
,
par
exemple
:
<
?
php
/
/
$
avoir
initialiser
$
b
=
;
(
suite
sur
page
suivant
)
.
variable
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
echo
$
avoir
?
?
;
/
/
affiche
echo
PHP_EOL
;
echo
$
avoir
?
?
$
b
?
?
;
/
/
affiche
echo
PHP_EOL
;
permettre
de
limiter
recours
à
isset
dans
de
nombreux
situation
:
<
?
php
/
/
récupérer
valeur
de
$
_GET
[
'
email
'
]
retourne
'
nobody
˓→
'
/
/
exister
.
$
mail
=
$
_GET
[
'
email
'
]
?
?
'
nobody
@
null
'
;
/
/
Equivaloir
à
:
$
mail
=
isset
(
$
_GET
[
'
email
'
]
)
?
$
_GET
[
'
email
'
]
:
˓→'nobody
@
null
'
;
/
/
Coalescing
?
?
pouvoir
être
chainer
:
/
/
renvoyer
premier
valeur
définir
parmi
/
/
$
_GET
[
'
email
'
]
,
$
_POST
[
'
email
'
]
,
'
nobody
@
dns-remplacer
'
.
$
mail
=
$
_GET
[
'
email
'
]
?
?
$
_POST
[
'
email
'
]
?
?
'
nobody
@
null
'
;
echo
`
`
$
mail\n
'
'
;
porter
variable
:
—
par
défaut
,
variable
être
local
—
portée
réduire
à
fonction
bloc
de
déclaration
—
pour
déclarer
variable
global
,
pouvoir
utiliser
tableau
$
_GLOBALS
[
]
<
?
php
$
_GLOBALS
[
'
MaVar
'
]
=
'
'
bonjour
'
'
;
?
>
constante
:
<
?
php
define
(
`
`
user
'
'
,
'
'
toto
'
'
)
;
echo
user
;
/
/
noter
absence
de
$
?
>
chaîne
en
PHP
base
:
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
guillemet
cote
:
<
?
php
$
var
=
'
'
hello
PHP
'
'
;
$
machaine
=
'
'
contenu
de
\
$
var
être
$
var
<
br
>
'
'
;
echo
$
machaine
;
/
/
avec
'
'
:
$
mystring
=
'
contenu
de
$
var
être
'
.
$
var
;
echo
$
mystring
;
?
>
résultat
être
:
contenu
de
$
var
être
hello
PHP
concaténation
:
avoir
l
’
aide
de
.
longueur
d
’
chaine
:
<
?
php
int
lg
=
strlen
(
$
chaine
)
;
?
>
accéder
caractère
i
d
’
chaine
:
<
?
php
echo
$
chaine
[
i
]
;
?
>
chaine
être
traiter
tableau
indéxé
par
*
entier
*
plupart
tableau
de
PHP
être
indéxés
par
chaine
...
mettre
en
majuscule
/
minuscule
:
—
avec
strtoupper
(
)
pour
obtenir
majuscule
—
avec
strtolower
(
)
pour
mettre
en
minuscule
—
avec
ucfirst
(
)
pour
mettre
en
majuscule
premier
lettre
d
’
chaine
—
avec
ucwords
(
)
pour
mettre
en
majuscule
premier
lettre
de
mot
dans
chaine
recherche
de
sous-chaine
de
motif
dans
chaine
:
—
avec
strstr
(
)
—
avec
stristr
(
)
—
avec
ereg
(
)
eregi
(
)
.
chaîne
en
PHP
cours|cour
PHP
accélérer
,
version
par
exemple
:
<
?
php
$
agent
=
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
;
echo
$
agent
;
echo
(
`
`
\n
<
P
>
'
'
)
;
if
(
stristr
(
$
agent
,
'
'
MSIE
'
'
)
)
echo
`
`
sembler
utiliser
Internet
explorer
!
<
/
b
>
'
'
;
elseif
(
ereg
(
`
`
Firefox
'
'
,
$
agent
)
)
echo
`
`
sembler
utiliser
Firefox
!
<
/
b
>
'
'
;
elseif
(
eregi
(
`
`
chrome
'
'
,
$
agent
)
)
echo
`
`
sembler
utiliser
chrome
!
<
/
b
>
'
'
;
?
>
indication
:
variante
de
fonction
comporter
i
indiquer
insensibilité
à
casse
c
’
être
à
dire
majuscule
minuscule
être
considérer
identique
.
exemple
:
test
complet
UserAgent
:
<
?
php
function
getBrowser
(
$
userAgent
)
{
if
(
preg_match
(
`
`
/
MSIE
(
.
{
}
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
Firefox
(
.
*
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
chrome
(
.
{
}
)
/
i
'
'
,
$
userAgent
,
$
num
)
)
return
$
num
[
]
;
elseif
(
preg_match
(
`
`
/
safari
/
i
'
'
,
$
userAgent
,
$
num
)
)
{
preg_match
(
`
`
/
version
(
.
{
}
)
/
'
'
,
$
userAgent
,
$
num
)
;
return
`
`
safari
`
`
.
$
num
[
]
;
}
else
return
`
`
navigateur
inconnu
'
'
;
}
if
(
!
empty
(
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
)
)
{
echo
`
`
navigateur
sembler
etre
:
\n
'
'
;
echo
getBrowser
(
$
_SERVER
[
'
HTTP_USER_AGENT
'
]
)
;
}
/
/
test
avec
UserAgent
connu
:
$
FF
=
'
'
Mozilla
/
(
Macintosh
;
Intel
mac
os
X
;
rv
:
)
gecko
/
˓→20100101
Firefox
/
'
'
;
$
msie
=
'
'
Mozilla
/
(
compatible
;
MSIE
;
Windows
NT
;
trident
/
˓→5.0
;
InfoPath.2
;
SLCC1
;
.NET
CLR
;
.NET
CLR
.
˓→30729
;
.NET
CLR
)
3gpp-gba
UNTRUSTED
/
'
'
;
$
chromer
=
'
'
Mozilla
/
(
Windows
NT
;
Win64
;
x64
)
AppleWebKit
/
.
˓→36
(
KHTML
,
like
gecko
)
chrome
/
safari
/
'
'
;
$
safari
=
'
'
Mozilla
/
(
iPad
;
CPU
os
6_0
like
mac
os
X
)
AppleWebKit
/
˓→536.26
(
KHTML
,
like
gecko
)
version
/
mobile
/
10A5355d
safari
/
(
suite
sur
page
suivant
)
˓→8536.25
'
'
;
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
echo
`
`
<
br
/
>
test
Firefox
:
<
br
/
>
\n
'
'
;
echo
getBrowser
(
$
FF
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
MSIE
:
\n
'
'
;
echo
getBrowser
(
$
msie
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
chromer
:
\n
'
'
;
echo
getBrowser
(
$
chrome
)
.
`
`
<
br
/
>
\n
'
'
;
echo
`
`
<
br
/
>
test
safari
:
\n
'
'
;
echo
getBrowser
(
$
safari
)
;
?
>
résultat
:
<
br
/
>
test
Firefox
:
<
br
/
>
Firefox
/
<
br
/
>
<
br
/
>
test
MSIE
:
MSIE
<
br
/
>
<
br
/
>
test
chrome
:
chrome
/
@ord@
<
br
/
>
<
br
/
>
test
safari
:
safari
version
/
typage
en
PHP
fonction
gettype
(
)
settype
(
)
:
gettype
(
)
renvoyer
l
’
un
résultat
suivant
:
—
integer
—
doubler
—
string
—
array
—
object
—
—
«
unknown
type
»
settype
(
)
changer
type
d
’
élément
:
<
?
php
$
avoir
=
;
settype
(
$
avoir
,
'
'
integer
'
'
)
;
(
suite
sur
page
suivant
)
.
typage
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
echo
`
`
contenu
de
variable
avoir
être
`
`
.
$
avoir
;
?
>
résultat
être
:
contenu
de
variable
avoir
être
fonction
de
test
:
—
is_int
(
)
—
is_long
(
)
—
is_double
(
)
—
is_array
(
)
—
is_object
(
)
—
is_string
(
)
attention
:
N
’
oublier
en
JavaScript
différence
entre
l
’
opérateur
=
=
=
=
=
premier
vérifier
l
’
égalité
contenu
en
tenir
compte
d
’
éventuel
diffé-
rence
de
typage
(
int
string
par
exemple
)
second
vérifier
égalité
strict
.
en
d
’
autre
terme
:
=
=
«
»
être
vrai
=
=
=
«
»
être
faux
particularité
de
PHP
valeur
variable
:
<
?
php
$
toto
=
`
`
bonjour
<
br
/
>
\n
'
'
;
$
var
=
`
`
toto
'
'
;
echo
$
$
var
;
?
>
résultat
être
:
résultat
brut
bonjour
<
br
/
>
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
fonction
eval
(
)
:
permettre
l
’
évaluation
d
’
expression
arithmetiques
en
PHP
.
exister
en
JavaScript
.
délicat
à
manipuler
,
problématique
en
terme
de
sécurité
.
tableau
en
PHP
tableau
associatif
-
parcours
avec
boucle
foreach
:
<
?
php
$
jour
=
array
(
`
`
lire
'
'
=
>
'
'
lundi
'
'
,
'
'
'
'
=
>
'
'
mardi
'
'
,
'
'
Me
'
'
=
>
'
'
mercredi
'
'
,
'
'
'
'
=
>
'
'
jeudi
'
'
,
'
'
Ve
'
'
=
>
'
'
vendredi
'
'
,
'
'
'
'
=
>
'
'
samedi
'
'
,
'
'
Di
'
'
=
>
'
'
dimanche
'
'
)
;
foreach
(
$
jour
avoir
$
key
=
>
$
val
)
echo
$
key
.
'
'
`
`
.
$
val
.
`
`
<
br
>
\n
'
'
;
?
>
donner
:
lu
lundi
mardi
Me
mercredi
jeudi
Ve
vendredi
samedi
Di
dimanche
affichage
avec
print_r
(
)
:
<
?
php
print_r
(
$
jour
)
;
?
>
résultat
brut
html
:
Array
(
[
lire
]
=
>
lundi
[
]
=
>
mardi
[
Me
]
=
>
mercredi
[
]
=
>
jeudi
[
Ve
]
=
>
vendredi
(
suite
sur
page
suivant
)
.
tableau
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
[
]
=
>
samedi
[
Di
]
=
>
dimanche
)
essayer
même
tab
utilisation
de
fonction
array_walk
:
<
?
php
array_walk
(
$
jour
,
'
aff_tab
'
)
;
?
>
avoir
définir
préalable
:
<
?
php
function
aff_tab
(
$
val
,
$
key
)
{
echo
`
`
$
key-
$
val
<
br
/
>
\n
'
'
;
}
?
>
obtenir
même
résultat
qu
’
avec
boucle
foreach
tri
simple
d
’
tableau
:
<
?
php
sort
(
$
jour
)
;
array_walk
(
$
jour
,
'
aff_tab
'
)
;
?
>
obtenir
:
0-Dimanche
1-Jeudi
2-Lundi
3-Mardi
4-Mercredi
5-Samedi
6-Vendredi
C
’
être
à
dire
:
—
tableau
être
trier
selon
l
’
ordre
de
valeur
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
—
clef
être
effacer
réaffecter
avec
entier
.
vouloir
préserver
clef
tableau
associatif
,
falloir
utiliser
méthode
suivant
:
tri
selon
l
’
ordre
naturel
avec
natsort
<
?
php
$
jour
=
array
(
`
`
lire
'
'
=
>
'
'
lundi
'
'
,
'
'
'
'
=
>
'
'
mardi
'
'
,
'
'
Me
'
'
=
>
'
'
mercredi
'
'
,
'
'
'
'
=
>
'
'
jeudi
'
'
,
'
'
Ve
'
'
=
>
'
'
vendredi
'
'
,
'
'
'
'
=
>
'
'
samedi
'
'
,
'
'
Di
'
'
=
>
'
'
dimanche
'
'
)
;
var_dump
(
$
jour
)
;
natsort
(
$
jour
)
;
var_dump
(
$
jour
)
;
?
>
résultat
brut
html
array
(
)
{
[
`
`
lire
'
'
]
=
>
string
(
)
`
`
lundi
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
mardi
'
'
[
`
`
Me
'
'
]
=
>
string
(
)
`
`
mercredi
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
jeudi
'
'
[
`
`
Ve
'
'
]
=
>
string
(
)
`
`
vendredi
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
samedi
'
'
[
`
`
Di
'
'
]
=
>
string
(
)
`
`
dimanche
'
'
}
array
(
)
{
[
`
`
Di
'
'
]
=
>
string
(
)
`
`
dimanche
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
jeudi
'
'
[
`
`
lire
'
'
]
=
>
string
(
)
`
`
lundi
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
mardi
'
'
[
`
`
Me
'
'
]
=
>
string
(
)
`
`
mercredi
'
'
[
`
`
'
'
]
=
>
string
(
)
`
`
samedi
'
'
(
suite
sur
page
suivant
)
.
tableau
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
[
`
`
Ve
'
'
]
=
>
string
(
)
`
`
vendredi
'
'
}
exécution
tritabnat
pouvoir
utiliser
fonction
natcasesort
(
)
vouloir
préoccuper
de
casse
chaine
présent
dans
tableau
,
à
l
’
ordre
dictionnaire
.
.
.
tableau
prédéfinir
de
PHP
tableau
concerner
protocole
HTTP
:
—
$
_GET
[
]
,
$
_POST
[
]
$
_REQUEST
[
]
englober
—
$
_SERVER
[
]
:
variable
décrire
client
page
courant
—
$
_GLOBALS
[
]
variable
global
—
$
_COOKIE
[
]
pour
cookies
—
$
_SESSION
[
]
pour
session
exemple
récupération
de
$
_SERVER
[
]
grâce
à
fonction
getenv
(
)
:
<
?
php
function
infos
(
)
{
$
env
=
array
(
'
remote_addr
'
,
'
http_accept_language
'
,
'
http_
˓→host
'
,
'
http_user_agent
'
,
'
script_filename
'
,
'
server_addr
'
,
'
server_name
'
,
'
server_signature
'
,
'
server_software
'
,
'
request_method
'
,
'
query_string
'
,
'
request_uri
'
,
'
script_name
˓→
'
)
;
/
/
construction
de
tableau
associatif
/
/
avec
valeur
lire
dans
environnement
$
retour
=
array
(
)
;
foreach
(
$
env
avoir
$
clef
)
$
retour
[
$
clef
]
=
getenv
(
$
clef
)
;
return
$
retour
;
}
echo
(
`
`
infos
disponible
:
<
BR
>
'
'
)
;
$
tab
=
infos
(
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
foreach
(
$
tab
avoir
$
clef
=
>
$
val
)
echo
$
clef
.
'
'
:
'
'
.
$
val
.
`
`
<
br
>
\n
'
'
;
?
>
résultat
infos
disponible
:
remote_addr
:
:
:
http_accept_language
:
fr-fr
http_host
:
localhost
http_user_agent
:
Mozilla
/
(
Macintosh
;
U
;
Intel
mac
os
X
˓→10_6_4
;
fr-fr
)
AppleWebKit
/
(
KHTML
,
like
gecko
)
version
/
˓→Safari
/
script_filename
:
/
user
/
roza
/
site
/
php
/
exemple
/
dns-remplacer
server_addr
:
:
:
server_name
:
localhost
server_signature
:
server_software
:
apache
/
(
Unix
)
mod_ssl
/
OpenSSL
/
0.9.8l
DAV
/
PHP
/
request_method
:
GET
query_string
:
request_uri
:
/
~
roza
/
php
/
exemple
/
dns-remplacer
script_name
:
/
~
roza
/
php
/
exemple
/
dns-remplacer
Ùser-Agent
<
http
:
/
/
localhost
/
~
roza
/
php
/
exemple
/
infospy
.
˓→php
>
`
_
exécution
infospy
L
’
inclusion
de
fichier
externe
include
:
—
semblable
include
C
/
C++
—
réaliser
inclusion
physique
fichier
demander
include_once
:
—
identique
include
—
protéger
contre
d
’
éventuel
inclusion
multiple
.
L
’
inclusion
de
fichier
externe
cours|cour
PHP
accélérer
,
version
—
pouvoir
mener
à
erreur
(
redéclaration
,
etc
.
)
<
?
php
include_once
(
`
`
dns-remplacer
'
'
)
;
?
>
require
require_once
:
—
fonctionner
include
include_once
—
programme
s
’
arrêter
fichier
inclure
n
’
exister
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
require_once
(
`
`
dns-remplacer
'
'
)
;
?
>
dirname
(
)
pour
savoir
dans
répertoire
trouver
pouvoir
utiliser
fonction
PHP
dirname
(
)
<
?
php
include_once
(
dirname
(
__FILE__
)
.
'
/
config
/
dns-remplacer
'
)
;
?
>
indication
:
Lorsqu
’
inclure
désigner
fichier
,
valoir
utiliser
chemin
relatif
pour
repérer
fichier
(
)
de
donner
chemin
absoudre
par
rapport
à
racine
serveur
style
/
home
/
user
/
www
/
config
/
dns-remplacer
être
portable
d
’
serveur
à
l
’
autre
éviter
déboire
!
avertissement
:
L
’
utilisation
systématique
de
version
avec
once
(
include_once
re-
quire_once
)
n
’
être
recommander
pouvoir
causer
ralentissement
à
l
’
exécution
programme
.
objet
en
PHP
Evolutions
grand
principe
:
—
objet
exister
en
PHP
à
partir
de
version
—
changement
important
en
PHP
:
convergence
vers
modèle
objet
de
java
—
introduction
en
java
d
’
interface
de
classe
abstraire
—
emploi
modifieurs
private
public
en
java
—
retrouver
__toString
(
)
,
__clone
(
)
mécanisme
de
traitement
exception
semblable
à
de
java
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
—
constructeur
s
’
appeler
:
__construct
(
)
—
destructeur
__destruct
(
)
—
méthode
porter
mot
clef
function
signaler
type
de
retour
—
commentaire
de
documentation
faire
à
manière
de
java
indication
:
objet
s
’
instancient
avec
mot
clef
new
en
java
C++
utiliser
-
>
signifier
l
’
appel
d
’
méthode
.
.
être
prendre
pour
concaténation
chaîne
.
.
.
objet
simple
Etudiant
en
PHP
fabriquer
objet
simple
en
PHP
.
Ecriver
objet
représenter
étudiant
avec
donnée
:
—
identifier
—
nom
—
date
de
naissance
méthode
pour
opérer
sur
donnée
:
—
constructeur
—
getter
setter
—
equals
(
)
—
toString
(
)
pour
affichage
donner
code
suivre
:
<
?
php
/
*
*
classe
Etudiant
en
PHP
*
/
Etudiant
{
/
*
*
identification
unique
de
etudiant
*
/
protected
$
etudiant_id
;
/
*
*
nom
de
etudiant
*
/
protected
$
nom
;
/
*
*
date
de
naissance
de
etudiant
*
/
protected
$
naissance
;
public
function
__construct
(
$
id
,
$
nom
,
$
naissance
)
{
$
this-
>
etudiant_id
=
(
int
)
$
id
;
/
/
cast
vers
integer
$
this-
>
nom
=
(
string
)
$
nom
;
/
/
cast
vers
string
$
this-
>
naissance
=
(
int
)
$
naissance
;
/
/
cast
vers
date
(
timestamp
)
}
/
*
*
*
fonction
de
comparaison
simplifiee
entre
etudiants
*
=
=
comparer
id
,
nom
naissance
*
/
(
suite
sur
page
suivant
)
.
objet
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
public
function
equals
(
etudiant
$
etudiant
)
{
return
(
$
this-
>
getId
(
)
=
=
$
etudiant-
>
getId
(
)
)
;
}
public
function
getId
(
)
{
return
$
this-
>
etudiant_id
;
}
public
function
getNom
(
)
{
return
$
this-
>
nom
;
}
public
function
getNaissance
(
)
{
return
$
this-
>
naissance
;
}
public
function
__toString
(
)
{
setlocal
(
LC_TIME
,
`
`
fr_FR
'
'
)
;
$
=
strftime
(
'
%
à
%
d
%
B
%
'
,
$
this-
>
naissance
)
;
return
'
etudiant
:
id
=
'
.
$
this-
>
getId
(
)
.
'
,
nom
=
'
.
$
this-
>
˓→getNom
(
)
.
'
'
$
'
'
;
}
}
/
*
test
:
*
/
date_default_timezone_set
(
'
Europe
/
Paris
'
)
;
$
etu
=
new
Etudiant
(
,
'
'
talon
'
'
,
time
(
)
)
;
var_dump
(
$
etu
)
;
echo
`
`
<
br
/
>
'
'
;
echo
$
etu
;
?
>
Resultat
:
object
(
Etudiant
)
#
(
)
{
[
`
`
etudiant_id
'
'
:
protected
]
=
>
int
(
)
[
`
`
nom
'
'
:
protected
]
=
>
string
(
)
`
`
talon
'
'
[
`
`
naissance
'
'
:
protected
]
=
>
int
(
)
}
<
br
/
>
etudiant
:
id
=
,
nom
=
talon
mercredi
septembre
Execution
etudiant
php
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
indication
:
Lorsqu
’
utiliser
l
’
opérateur
de
comparaison
=
=
sur
objet
,
être
comparer
en
utiliser
règle
suivant
:
deux
objet
être
égal
s
’
être
instance
de
même
classe
avoir
même
attribut
valeur
,
valeur
être
comparer
avec
l
’
opérateur
=
=
.
de
l
’
utilisation
de
l
’
opérateur
d
’
identité
=
=
=
,
objet
être
identique
s
’
faire
référence
à
même
instance
de
même
classe
.
avertissement
:
de
programmeur
débutant
contenter
d
’
utiliser
PHP
langage
procédural
sans
utiliser
côté
objet
.
bloquer
dans
l
’
apprentissage
langage
grand
frameworks
PHP
.
être
à
l
’
aise
avec
objet
,
suivre
d
’
abord
cours|cour
d
’
introduction
à
programmation
objet
,
en
java
,
python
C++
par
exemple
.
collection
en
PHP
en
PHP
standard
,
collection
=
Arrays
:
—
contenter
de
qu
’
offrir
PHP
en
standard
,
collection
résumer
à
l
’
utilisation
tableau
associatif
en
PHP
—
framework
collection
en
java
être
riche
DataStructures
ds
:
falloir
installer
librairie
supplémentaire
ds
(
DataStructures
)
pour
avoir
accès
à
Framework
similaire
en
PHP
.
voir
documentation
collecter
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
)
aller
pour
utiliser
commande
pecl
pour
installer
ds
extension
:
pecl
install
ds
charger
l
’
extension
en
ajouter
fichier
.ini
de
PHP
:
extension
=
dns-remplacer
extension
donner
accès
à
classe
similaire
à
framework
collection
en
java
.
classe
proposer
être
par
exemple
:
—
Sequence
—
Vector
—
Deque
—
Vector
.
collection
en
PHP
cours|cour
PHP
accélérer
,
version
—
pair
—
set
—
Stack
—
queue
—
PriorityQueue
utilisation
de
Ds
:
classe
interface
de
ds
s
’
utiliser
dans
espace
de
nommage
Ds
:
<
?
php
$
vector
=
new
\Ds\Vector
(
)
;
$
vector-
>
push
(
`
`
un
'
'
)
;
$
vector-
>
push
(
`
`
deux
'
'
)
;
$
vector-
>
push
(
`
`
trois
'
'
,
`
`
quatre
'
'
)
;
/
/
...
[
,
]
=
unpacking
$
vector-
>
push
(
...
[
`
`
cinq
'
'
,
`
`
six
'
'
]
)
;
print_r
(
$
vector
)
;
?
>
exemple
d
’
utilisation
de
classe
set
utiliser
classe
set
.
question
HTML
dans
select
multiple
:
prendre
petit
formulaire
en
HTML
proposer
choix
de
couleur
dans
select
:
<
p
>
être
couleur
maillot
panthère
Fleury
˓→Loiret
Handball
?
<
select
name
=
'
'
coul
[
]
'
'
multiple
size
=
>
<
option
valoir
=
'
'
jaune
'
'
>
jaune
<
option
valoir
=
'
'
rose
'
'
>
Rose
<
option
valoir
=
'
'
bleu
'
'
>
bleu
<
option
valoir
=
'
'
noir
'
'
>
noir
<
option
valoir
=
'
'
blanc
'
'
>
Blanc
<
option
valoir
=
'
'
vert
'
'
>
vert
<
/
select
>
<
/
p
>
réponse
PHP
avec
collection
<
?
php
if
(
!
empty
(
$
_GET
[
'
coul
'
]
)
)
{
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
couleursReponse
=
new
\Ds\Set
(
$
_GET
[
'
coul
'
]
)
;
$
couleursCorrectes
=
new
\Ds\Set
(
[
'
rose
'
,
'
noir
'
,
'
blanc
˓→
'
]
)
;
/
/
calculer
différence
ensemble
voir
˓→elle
être
vide
if
(
(
$
couleursReponse-
>
diff
(
$
couleursCorrectes
)
)
-
>
isEmpty
(
)
)
echo
`
`
bravo
couleur
de
Fleury
Hand
Ball
être
˓→bien
Rose
noir
Blanc
!
`
`
;
else
echo
`
`
mauvais
réponse
:
couleur
de
Fleury
˓→Hand
Ball
être
:
rose
noir
Blanc
!
`
`
;
}
sans
collection
,
utiliser
tableau
.
.
.
sans
Ds
,
avoir
être
obliger
de
contenter
de
tableau
PHP
d
’
utiliser
par
exemple
méthode
array_diff
:
voir
:
array_diff
php
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
dns-remplacer
)
avec
Arrays
:
pouvoir
s
’
en
sortir
avec
de
simple
tableau
PHP
en
vérifier
taille
tableau
réponse
donner
être
même
tableau
bon
réponse
,
contenu
de
tableau
être
identique
.
<
?
php
if
(
!
empty
(
$
_GET
[
'
coul
'
]
)
)
{
$
couleursReponse
=
$
_GET
[
'
coul
'
]
;
$
couleursCorrectes
=
array
(
[
'
rose
'
,
'
noir
'
,
'
blanc
'
]
)
;
if
(
count
(
$
couleursReponse
)
=
=
count
(
$
couleursCorrectes
)
&
&
!
˓→array_diff
(
$
couleursReponse
,
$
couleursCorrectes
)
)
echo
`
`
bravo
couleur
de
Fleury
Hand
Ball
être
Rose
˓→Noir
Blanc
!
`
`
;
else
echo
`
`
mauvais
réponse
:
couleur
de
Fleury
Hand
Ball
˓→sont
:
rose
noir
Blanc
!
`
`
;
}
connexion
base
de
donnée
depuis
PHP
table
simple
en
SQL
:
.
connexion
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
CREATE
tabler
`
carnet
`
(
ÌDìnt
(
)
NOT
NULL
AUTO_INCREMENT
,
`
nom
`
varchar
(
)
DEFAULT
NULL
,
`
PRENOM
`
varchar
(
)
DEFAULT
NULL
,
`
NAISSANCÈ
date
DEFAULT
NULL
,
`
VILLÈ
varchar
(
)
DEFAULT
NULL
,
PRIMARY
KEY
(
ÌD
`
)
)
ENGINE
=
InnoDB
AUTO_INCREMENT
=
DEFAULT
CHARSET
=
utf8
;
insert
INTO
`
carnet
`
valoir
(
,
'
Smith
'
,
'
John
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
Durand
'
,
'
jean
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
GUDULE
'
,
'
Jeanne
'
,
'
'
,
'
tour
'
)
,
(
,
'
ZAPATA
'
,
'
EMILIO
'
,
'
'
,
'
ORLEANS
'
)
,
(
,
'
Jourdain
'
,
'
Nicolas
'
,
'
'
,
'
tour
'
)
,
(
,
'
DUPUY
'
,
'
marier
'
,
'
'
,
'
Blois
'
)
,
(
,
'
ANDREAS
'
,
'
LOU
'
,
'
'
,
'
ST
Petersbourg
'
)
,
(
,
'
Kafka
'
,
'
Franz
'
,
'
'
,
'
Prague
'
)
,
(
,
'
dalton
'
,
'
Joe
'
,
'
'
,
'
daller
'
)
;
insérer
table
dans
MySQL
en
ligne
de
commande
à
l
’
aide
de
PHPMyAdmin
.
,
pour
consulter
table
depuis
PHP
,
utiliser
connecteur
PDO
offrir
interface
de
connexion
utilisable
pour
SGBD
(
Systemes
de
gestion
de
base
de
Donnees
)
habituel
MySQL
,
PostgreSQL
,
oracle
Microsoft
SQL
Server
.
connexion
simple
en
PHP
avec
PDO
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
/
/
pour
oracle
:
$
dsn
=
'
'
oci
:
dbname
=
/
/
serveur
:
/
base
/
/
pour
sqlite
:
$
dsn
=
'
'
sqlite
:
/
tmp
/
dns-remplacer
'
'
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
carnet
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
naître
(
e
)
`
`
.
$
row
[
'
naissance
'
]
.
`
`
<
br
/
>
\n
'
'
;
}
?
>
<
/
body
>
<
/
html
>
avec
fichier
dns-remplacé
contenir
information
de
connexion
serveur
MySQL
:
<
?
php
define
(
'
user
'
,
'
'
scott
'
'
)
;
define
(
'
PASSWD
'
,
'
'
tiger
'
'
)
;
define
(
'
SERVER
'
,
'
'
localhost
'
'
)
;
define
(
'
base
'
,
'
'
dbscott
'
'
)
;
?
>
Resultat
brut
html
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h1
>
John
SMITHné
(
e
)
<
br
/
>
jean
DURANDné
(
e
)
<
br
/
>
Jeanne
GUDULEné
(
e
)
<
br
/
>
EMILIO
ZAPATAné
(
e
)
<
br
/
>
Nicolas
JOURDAINné
(
e
)
<
br
/
>
marier
DUPUYné
(
e
)
<
br
/
>
(
suite
sur
page
suivant
)
.
connexion
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
LOU
ANDREASné
(
e
)
<
br
/
>
Franz
Kafkané
(
e
)
<
br
/
>
Joe
Daltonné
(
e
)
<
br
/
>
<
/
body
>
<
/
html
>
Execution
carnet
php
fabrication
d
’
table
HTML
avec
résultat
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
carnet
'
'
;
else
{
?
>
<
table
>
<
tr
>
<
td
>
nom
<
/
td
>
<
td
>
prénom
<
/
td
>
<
/
tr
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
`
`
<
tr
>
<
td
>
'
'
.
$
row
[
'
nom
'
]
.
'
'
<
/
td
>
<
td
>
'
'
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
td
>
<
/
tr
>
\n
'
'
;
?
>
<
/
table
>
<
?
php
}
?
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
/
body
>
<
/
html
>
résultat
brut
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h@card@
>
<
table
>
<
tr
>
<
td
>
nom
<
/
td
>
<
td
>
prénom
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Smith
<
/
td
>
<
td
>
John
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Durand
<
/
td
>
<
td
>
jean
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
GUDULE
<
/
td
>
<
td
>
Jeanne
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
ZAPATA
<
/
td
>
<
td
>
EMILIO
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Jourdain
<
/
td
>
<
td
>
Nicolas
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
DUPUY
<
/
td
>
<
td
>
marier
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
ANDREAS
<
/
td
>
<
td
>
LOU
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
Kafka
<
/
td
>
<
td
>
Franz
<
/
td
>
<
/
tr
>
<
tr
>
<
td
>
dalton
<
/
td
>
<
td
>
Joe
<
/
td
>
<
/
tr
>
<
/
table
>
<
/
body
>
<
/
html
>
Execution
carnet
tabler
pouvoir
faire
petit
refactoring
avec
fonction
établir
connexion
à
base
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
function
connect_bd
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
(
suite
sur
page
suivant
)
.
connexion
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
$
e-
>
˓→getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
?
>
améliorer
l
’
affichage
résultat
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
carnet
'
'
;
else
{
?
>
<
table
=
'
'
centre
'
'
id
=
'
'
joli
'
'
>
<
tr
>
<
td
>
ID
<
/
td
>
<
td
>
prénom
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
naissance
<
/
˓→td
>
<
/
tr
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
`
`
<
tr
>
<
td
>
'
'
.
$
row
[
'
ID
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
nom
'
]
.
`
`
<
/
td
>
<
td
>
'
'
.
$
row
[
'
naissance
'
]
.
`
`
<
/
td
>
<
/
tr
>
<
br
/
>
\n
'
'
;
?
>
<
/
table
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
avec
fichier
CSS
:
/
*
bordurer
simple
tableau
*
/
table
,
th
,
td
{
border
:
1px
solid
grey
;
}
table
{
border-collapse
:
collapse
;
}
/
*
centrage
tableau
*
/
dns-remplacer
{
margin
:
auto
;
}
/
*
centrage
texte
dans
cellule
tableau
*
/
dns-remplacé
td
{
text-align
:
center
;
}
table
#
joli
tr
:
first-child
{
background
:
LightPink
;
}
table
#
joli
tr
:
nth-child
(
2n
)
{
background
:
#
EFD3C9
;
}
table
#
joli
tr
:
nth-child
(
2n+3
)
{
background
:
#
BCBCD0
;
}
/
*
tableau
avoir
seul
ligne
afficher
en
rouge
*
/
table
tr
:
only-child
{
background
:
red
;
}
résultat
brut
:
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h@card@
>
<
table
=
'
'
centre
'
'
id
=
'
'
joli
'
'
>
<
tr
>
<
td
>
ID
<
/
td
>
<
td
>
prénom
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
naissance
<
/
˓→td
>
<
/
tr
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
John
<
/
td
>
<
td
>
Smith
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
(
suite
sur
page
suivant
)
.
connexion
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
td
>
jean
<
/
td
>
<
td
>
Durand
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Jeanne
<
/
td
>
<
td
>
GUDULE
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
EMILIO
<
/
td
>
<
td
>
ZAPATA
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Nicolas
<
/
td
>
<
td
>
Jourdain
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
marier
<
/
td
>
<
td
>
DUPUY
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
LOU
<
/
td
>
<
td
>
ANDREAS
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Franz
<
/
td
>
<
td
>
Kafka
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
tr
>
<
td
>
<
/
td
>
<
td
>
Joe
<
/
td
>
<
td
>
dalton
<
/
td
>
<
td
>
<
/
td
>
<
/
tr
>
<
br
/
>
<
/
table
>
<
/
body
>
<
/
html
>
Execution
carnet
table
Version2
pouvoir
générer
page
différent
avec
liste
déroulant
liste
de
lien
,
liste
à
puce
etc
.
création
d
’
liste
déroulant
:
<
!
doctype
html
>
<
html
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h1
>
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
accès
carnet
'
'
;
else
{
?
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
select
name
=
'
'
ID
'
'
>
<
?
php
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
if
(
!
empty
(
$
row
[
'
nom
'
]
)
)
echo
`
`
<
option
valoir
=
'
'
'
.
$
row
[
'
ID
'
]
.
`
`
'
>
'
'
.
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
<
/
option
>
\n
'
'
;
?
>
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
rechercher
'
'
>
<
/
form
>
<
?
php
}
?
>
<
/
body
>
<
/
html
>
remarquer
l
’
usage
de
clef
primaire
de
table
valoir
option
,
assurer
l
’
unicité
valeur
éviter
amiguité
.
résultat
brut
:
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
connexion
à
MySQL
avec
PDO
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
(
suite
sur
page
suivant
)
.
connexion
base
de
donnée
depuis
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
h@card@
>
interrogation
de
table
carnet
avec
PDO
<
/
h@card@
>
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
select
name
=
'
'
ID
'
'
>
<
option
valoir
=
'
'
>
John
Smith
<
/
option
>
<
option
valoir
=
'
'
>
jean
Durand
<
/
option
>
<
option
valoir
=
'
'
>
Jeanne
GUDULE
<
/
option
>
<
option
valoir
=
'
'
>
EMILIO
ZAPATA
<
/
option
>
<
option
valoir
=
'
'
>
Nicolas
Jourdain
<
/
option
>
<
option
valoir
=
'
'
>
marier
DUPUY
<
/
option
>
<
option
valoir
=
'
'
>
LOU
ANDREAS
<
/
option
>
<
option
valoir
=
'
'
>
Franz
Kafka
<
/
option
>
<
option
valoir
=
'
'
>
Joe
dalton
<
/
option
>
<
/
select
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
rechercher
'
'
>
<
/
form
>
<
/
body
>
<
/
html
>
Execution
carnet
select
requête
préparer
en
PHP
recherche
simple
en
PHP
avec
PDO
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
recherche
de
personne
par
ID
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
?
php
$
wanted
=
$
_GET
[
'
ID
'
]
;
if
(
!
empty
(
$
wanted
)
)
{
echo
`
`
<
h@card@
>
recherche
de
$
wanted
<
/
h1
>
'
'
;
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
'
'
'
.
$
wanted
.
`
`
'
'
'
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
de
requete
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
echo
$
row
[
'
nom
'
]
.
'
'
`
`
.
$
row
[
'
PRENOM
'
]
.
`
`
<
/
br
>
\n
'
'
;
}
}
?
>
<
/
body
>
<
/
html
>
appel
avec
paramètre
ID
passer
sur
l
’
URL
:
php
exemple
/
pdo
/
dns-remplacer
?
ID
=
Execution
rechercher
php
lorsqu
’
avoir
de
nombreux
paramètre
,
retrouver
avec
de
nombreux
concaténation
de
chaine
entourer
de
“
cote
”
être
grand
source
d
’
erreur
de
lenteur
d
’
écriture
.
pour
remédier
à
,
pouvoir
utiliser
requête
préparé
permettre
de
dissocier
requête
paramètre
aller
être
fournir
avant
exécution
.
PreparedStatement
être
préférable
en
terme
de
sécurité
à
utiliser
.
recherche
avec
PreparedStatement
<
!
doctype
html
>
<
html
>
<
head
>
<
title
>
recherche
de
personne
par
ID
<
/
title
>
<
meta
charset
=
'
'
utf-8
'
'
>
<
/
head
>
<
body
>
<
?
php
$
wanted
=
$
_GET
[
'
ID
'
]
;
if
(
!
empty
(
$
wanted
)
)
{
echo
`
`
<
h@card@
>
recherche
de
$
wanted
<
/
h1
>
'
'
;
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
_GET
[
'
ID
'
]
)
;
$
stmt-
>
execute
(
)
;
if
(
!
$
stmt
)
echo
`
`
Pb
de
accès
carnet
'
'
;
else
{
(
suite
sur
page
suivant
)
.
requête
préparer
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
if
(
$
stmt-
>
rowCount
(
)
=
=
)
echo
`
`
inconnu
!
<
br
/
>
'
'
;
else
foreach
(
$
stmt
avoir
$
row
)
echo
$
row
[
'
PRENOM
'
]
.
'
'
`
`
.
$
row
[
'
nom
'
]
.
`
`
naître
(
e
)
`
`
.
$
row
[
'
naissance
'
]
.
`
`
<
br
/
>
'
'
;
}
}
?
>
<
/
body
>
<
/
html
>
requête
préparé
limiter
possibilité
d
”
injection
SQL
ver-ront
.
complément
sur
PDO
-
sécurité
filtrage
d
’
entrée
pouvoir
vouloir
nourrir
requête
avec
donnée
provenir
d
’
formulaire
:
<
?
php
$
sql
=
sprintf
(
'
select
id
FROM
carnet
WHERE
email
=
`
`
%
s
'
'
'
,
$
_GET
[
'
email
'
]
)
)
;
?
>
voir
valeur
de
l
’
entrer
email
dans
tableau
_GET
n
’
être
vérfifier
avant
utilisation
!
pouvoir
essayer
dans
cas
d
’
utiliser
filtre
PHP
pour
contrôler
chose
:
<
?
php
$
sql
=
sprintf
(
'
select
id
FROM
carnet
WHERE
email
=
`
`
%
s
'
'
'
,
filter_input
(
INPUT_GET
,
'
email
'
)
)
;
?
>
constituer
manière
sûr
de
procéder
malgré
l
’
utilisation
filtre
PHP
.
laisser
en
effet
possiblilité
d
’
insertion
de
code
malveillant
contrôler
.
L
’
exemple
classique
être
requête
SQL
construire
dans
chaine
suivant
:
<
?
php
$
sql
=
`
`
select
nom
FROM
user
WHERE
login
=
'
'
'
.
$
_REQUEST
[
'
login
'
]
.
'
'
'
AND
PASSWD
=
'
'
'
.
$
_REQUEST
[
'
pass
'
]
.
`
`
'
'
'
;
?
>
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
donner
de
exécution
avec
$
_REQUEST
[
“
login
”
]
=
»
toto
”
–
»
:
select
nom
FROM
user
WHERE
login
=
'
toto
'
--
'
AND
PASSWD
=
'
'
'
.
$
_
˓→REQUEST
[
'
pass
'
]
.
'
'
'
`
`
;
avertissement
:
-
-
constituer
début
de
commentaire
SQL
,
constituer
in-
jection
SQL
être
l
’
un
principal
faille
de
sécurité
exploiter
par
Hackers
.
pour
s
’
en
prémunir
,
falloir
utiliser
à
fois
filtrage
entrée
requête
préparé
.
<
?
php
$
sql
=
'
select
id
FROM
carnet
WHERE
email
=
:
email
'
;
$
statement
=
$
pdo-
>
prepare
(
$
sql
)
;
$
email
=
filter_input
(
INPUT_GET
,
'
email
'
)
;
$
statement-
>
bindValue
(
'
:
email
'
,
$
email
)
;
?
>
falloir
préciser
dans
troisième
argument
type
paramètre
attendre
:
<
?
php
$
sql
=
'
select
email
FROM
carnet
WHERE
id
=
:
id
'
;
$
statement
=
$
pdo-
>
prepare
(
$
sql
)
;
$
userId
=
filter_input
(
INPUT_GET
,
'
id
'
)
;
$
statement-
>
bindValue
(
'
:
id
'
,
$
userId
,
PDO
:
:
PARAM_INT
)
;
?
>
filtrage
en
PHP
vérification
dans
formulaire
HTML5
en
JavaScript
être
valable
côté
client
.
pour
raison
de
sécurité
,
falloir
réeffectuer
vérification
côté
serveur
.
PHP
mettre
pour
à
disposition
programmeur
ensemble
de
filtre
.
premier
vérification
consister
à
prendre
en
compte
caractère
spécial
.
gestion
caractère
spécial
:
«
magic
quotes
»
:
avant
PHP
,
directive
concerner
magic
quotes
exister
.
dans
fichier
de
configuration
de
PHP
,
directif
magic_quotes_gpc
etait
activer
,
PHP
modifier
entrée
de
formulaire
en
procéder
à
protection
de
caractère
spécial
par
insertion
de
«
backslashes
»
.
par
exemple
—
caractère
accentuer
—
apostrophe
—
backslashes
.
filtrage
en
PHP
cours|cour
PHP
accélérer
,
version
un
à
manière
de
fonction
addslashes
(
)
.
protection
être
destiner
à
préparer
donnée
avant
requête
SQL
pour
empêcher
éventuel
injection
SQL
.
comportement
automatique
être
gênant
vouloir
réafficher
chaine
saisir
utiliser
dans
requête
SQL
.
en
,
vouloir
protéger
chaine
de
même
façon
selon
l
’
usage
qu
’
vouloir
en
faire
par
suite
.
pouvoir
vouloir
dans
cas
,
protéger
chaine
par
exemple
:
—
htmlspecialchar
(
)
pour
éviter
injection
de
code
HTML
—
PDO
:
:
quote
(
)
pour
protéger
d
’
injecter
SQL
<
?
php
$
pdo
=
new
PDO
(
'
sqlite
:
.
/
tmp
/
dns-remplacer
'
)
;
$
string
=
'
Orléans
'
;
print
`
`
chaîne
sans
quotes
:
$
string\n
'
'
;
print
`
`
chaîne
avec
quotes
:
`
`
.
$
pdo-
>
quote
(
$
string
)
.
`
`
\n
'
'
;
dispenser
d
’
utiliser
PreparedStatement
voir
.
filtre
PHP
:
direct
à
utiliser
sur
formulaire
être
baser
sur
fonction
filter_input
(
)
avec
en
paramètre
INPUT_GET
INPUT_POST
exemple
typique
:
<
?
php
$
entier
=
filter_input
(
INPUT_POST
,
'
var1
'
,
FILTER_SANITIZE_
˓→NUMBER_INT
)
;
$
url
=
filter_input
(
INPUT_POST
,
'
var2
'
,
FILTER_VALIDATE_URL
)
;
if
(
!
filter_input
(
INPUT_GET
,
`
`
email
'
'
,
FILTER_VALIDATE_EMAIL
)
)
echo
(
`
`
Email
valide
'
'
)
;
else
echo
(
`
`
Email
valide
'
'
)
;
?
>
pouvoir
filtrer
carctère
spécial
:
<
?
php
$
search_html
=
filter_input
(
INPUT_GET
,
'
search
'
,
FILTER_SANITIZE_
˓→SPECIAL_CHARS
)
;
$
search_url
=
filter_input
(
INPUT_GET
,
'
search
'
,
FILTER_SANITIZE_
˓→ENCODED
)
;
echo
`
`
avoir
rechercher
$
search_html
.
\n
'
'
;
echo
`
`
<
avoir
href
=
'
?
search
=
$
search_url
'
>
nouveau
recherche
.
<
/
avoir
>
'
'
;
?
>
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
gestion
transaction
avec
PDO
problème
série
de
requête
SQL
être
lier
entre
vouloir
qu
’
être
exécuter
.
en
effet
dans
cas
,
prise
en
compte
d
’
partie
requête
pouvoir
conduire
à
incohérence
dans
système
d
’
information
.
base
de
donnée
pouvoir
être
corrompre
difficile
à
rectifier
par
suite
.
par
exemple
,
avoir
requête
suivre
être
lier
:
<
?
php
require
'
dns-remplacer
'
;
$
connexion
=
connect_bd
(
)
;
$
stmt1
=
$
pdo-
>
prepare
(
'
UPDATE
compter
set
solder
=
solde
-
:
montant
WHERE
nom
=
:
nom
'
)
;
$
stmt2
=
$
pdo-
>
prepare
(
'
UPDATE
compter
set
solder
=
solder
+
:
monter
WHERE
nom
=
:
nom
'
)
;
/
/
retraire
Compte1
$
cpte1
=
'
Compte1
'
;
$
monter
=
;
$
stmt1-
>
bindParam
(
'
:
nom
'
,
$
cpte1
)
;
$
stmt1-
>
bindParam
(
'
:
solde
'
,
$
monter
,
PDO
:
:
PARAM_INT
)
;
$
stmt1-
>
execute
(
)
;
/
/
Credire
Compte2
$
cpte2
=
'
Compte2
'
;
$
depot
=
;
$
stmt2-
>
bindParam
(
'
:
nom
'
,
$
cpte2
)
;
$
stmt-
>
bindParam
(
'
:
montant
'
,
$
depot
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
?
>
pouvoir
conduire
à
problème
en
cas
d
’
interruption
de
séquence
.
en
particulier
Compte1
pouvoir
avoir
être
débiter
sans
Compte2
être
créditer
.
pouvoir
résoudre
fragilité
en
utiliser
transaction
:
<
?
php
require
'
dns-remplacer
'
;
$
connexion
=
connect_bd
(
)
;
(
suite
sur
page
suivant
)
.
gestion
transaction
avec
PDO
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
stmt1
=
$
connexion-
>
prepare
(
'
UPDATE
compter
set
solder
=
solde
-
:
solde
WHERE
nom
=
:
nom
'
)
;
$
stmt2
=
$
connexion-
>
prepare
(
'
UPDATE
compter
set
solder
=
solder
+
:
monter
WHERE
nom
=
:
nom
'
)
;
/
/
commencer
transaction
$
connexion
-
>
beginTransaction
(
)
/
/
retraire
Compte1
$
cpte1
=
'
Compte1
'
;
$
monter
=
;
$
stmt1-
>
bindParam
(
'
:
nom
'
,
$
cpte1
)
;
$
stmt1-
>
bindParam
(
'
:
solde
'
,
$
monter
,
PDO
:
:
PARAM_INT
)
;
$
stmt1-
>
execute
(
)
;
/
/
Credire
Compte2
$
cpte2
=
'
Compte2
'
;
$
depot
=
;
$
stmt2-
>
bindParam
(
'
:
nom
'
,
$
cpte2
)
;
$
stmt-
>
bindParam
(
'
:
montant
'
,
$
depot
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
/
/
terminer
transaction
$
connexion
-
>
commettre
(
)
;
?
>
séquence
échouer
,
PDO
commander
RollBack
automatique
,
c
’
être
à
dire
annulation
de
transaction
.
connexion
persistant
avec
PDO
pour
créer
connexion
persistant
avec
PDO
,
suffire
d
’
utiliser
l
’
attribut
ATTR
persister
à
l
’
instanciation
de
l
’
objet
PDO
.
appel
ultérieur
,
paramètre
de
création
être
identique
,
l
’
objet
créer
être
réutiliser
.
<
?
php
function
connect_db
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
,
array
(
PDO
:
:
ATTR_PERSISTENT
=
>
true
)
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
?
>
validation
contrôle
d
’
entrée
avec
GUMP
pouvoir
utiliser
librairie
aider
à
gérer
validation
:
GUMP
(
https
:
/
/
dns-remplacer
/
Wixel
/
GUMP
)
pour
installer
:
créer
fichier
dns-remplacer
dans
répertoire
de
travail
:
{
'
'
require
'
'
:
{
'
'
wixel
/
gump
'
'
:
`
`
dev-master
'
'
}
}
utiliser
l
’
outil
PHP
composer
pour
installer
composant
demander
:
composer
update
pouvoir
utiliser
Gump
pour
vérifier
entrée
:
<
?
php
require
`
`
vendor
/
wixel
/
gump
/
dns-remplacer
'
'
;
$
is_valid
=
GUMP
:
:
is_valid
(
$
_POST
,
array
(
'
username
'
=
>
'
required
|
alpha_numeric
'
,
'
password
'
=
>
'
required
|
max_len
,
|
min_len
,
'
)
)
;
if
(
$
is_valid
)
{
echo
`
`
valid
username
and
password
`
`
;
}
else
{
print_r
(
$
is_valid
)
;
(
suite
sur
page
suivant
)
.
validation
contrôle
d
’
entrée
avec
GUMP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
}
?
>
de
manière
détailler
:
<
?
php
require
`
`
vendor
/
wixel
/
gump
/
dns-remplacer
'
'
;
if
(
$
_SERVER
[
`
`
REQUEST_METHOD
'
'
]
=
=
`
`
POST
'
'
)
{
$
validator
=
new
GUMP
(
)
;
$
name
=
$
_POST
[
'
name
'
]
;
$
password
=
$
_POST
[
'
password
'
]
;
$
_POST
=
array
(
'
name
'
=
>
$
name
,
'
password
'
=
>
$
password
)
;
/
/
néttoie
donnée
convertir
chaine
en
utf-8
besoin
$
_POST
=
$
validator-
>
sanitize
(
$
_POST
)
;
/
/
définir
règle
filtre
:
$
rules
=
array
(
'
name
'
=
>
'
required
|
alpha_numeric
|
max_len
,
|
min_len
,
'
,
'
password
'
=
>
'
required
|
max_len
,
|
min_len
,
'
)
;
$
filters
=
array
(
'
name
'
=
>
'
trim
|
sanitize_string
'
,
'
password
'
=
>
'
trim
|
base64_encode
'
)
;
/
/
appliquer
filtre
$
_POST
=
$
validator-
>
filter
(
$
_POST
,
$
filters
)
;
/
/
valider
$
is_valid
=
$
validator-
>
validate
(
$
_POST
,
$
rules
)
;
/
/
vérifier
résultat
if
(
$
is_valid
=
=
=
true
)
{
echo
$
name
;
echo
$
password
;
exit
;
}
else
{
echo
`
`
erreur
détecter
dans
entrée
:
\n
'
'
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
/
/
afficher
erreur
en
html
echo
$
validator-
>
get_readable_errors
(
true
)
;
}
}
Http
conservation
d
’
information
sur
client
problème
protocole
HTTP
être
protocole
sans
mémoire
.
requête
d
’
client
information
être
rattacher
être
mémoriser
par
défaut
.
technique
avoir
être
développer
pour
remédier
à
manque
:
—
envoyer
de
l
’
information
sur
l
’
URL
—
utiliser
champ
cacher
HTML
—
utiliser
Cookies
—
utiliser
session
envoi
d
’
information
sur
l
’
URL
:
considérer
premier
page
,
dns-remplacer
:
<
!
doctype
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
<
/
title
>
<
/
head
>
<
body
>
<
?
php
if
(
!
isset
(
$
_GET
[
'
login
'
]
)
)
{
?
>
<
form
method
=
'
GET
'
action
=
<
?
php
echo
$
_SERVER
[
'
PHP_SELF
'
]
?
>
>
<
p
>
Login
:
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
>
<
/
p
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
valider
'
'
>
<
/
form
>
<
?
php
}
else
{
header
(
'
location
:
dns-remplacer
?
login
=
'
.
$
_GET
[
'
login
'
]
)
;
}
?
>
(
suite
sur
page
suivant
)
.
Http
conservation
d
’
information
sur
client
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
/
body
>
<
/
html
>
poursuivre
par
page2
:
<
!
doctype
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
<
meta
charset
=
'
'
utf-8
'
'
/
>
<
title
>
formulaire
<
/
title
>
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_GET
[
'
login
'
]
)
)
{
echo
$
_GET
[
'
login
'
]
;
}
else
{
header
(
'
location
:
dns-remplacer
'
)
;
}
?
>
<
/
body
>
<
/
html
>
exécution
:
passage
d
’
info
sur
l
’
URL
utiliser
cookies
:
L
’
information
être
stocker
dans
petit
fichier
texte
sur
navigateur
client
.
pouvoir
par
exemple
s
’
en
servir
pour
stocker
identifier
de
session
,
login
,
compteur
de
visite
mesurer
temps
de
connexion
.
<
?
php
if
(
isset
(
$
_COOKIE
[
'
compteur
'
]
)
)
{
$
message
=
`
`
etes
deja
venir
`
`
.
$
_COOKIE
[
'
compteur
'
]
.
'
'
fois
˓→
<
br
/
>
\n
'
'
;
$
valeur
=
$
_COOKIE
[
'
compteur
'
]
+
;
}
else
{
$
message
=
`
`
mettre
petit
cookie
<
br
/
>
\n
'
'
;
$
valeur
=
;
}
setCookie
(
`
`
compteur
'
'
,
$
valeur
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
echo
$
message
;
?
>
exécution
:
Cookies
en
PHP
avoir
information
en
grand
nombre
à
stocker
revètent
caractère
sensible
,
préférer
stocker
côté
serveur
utiliser
mécanisme
complet
session
.
consister
à
utiliser
tableau
associatif
_SESSION
[
]
permettre
de
stocker
sorte
d
’
information
associer
à
client
(
donner
de
type
nombre
chaine
,
tableau
objet
PHP
)
.
considérer
premier
page
mettre
en
place
session
:
<
?
php
/
/
dns-remplacer
session_start
(
)
;
if
(
!
isset
(
$
_SESSION
[
'
cpt
'
]
)
)
$
_SESSION
[
'
cpt
'
]
=
;
else
$
_SESSION
[
'
cpt
'
]
++
;
echo
`
`
avoir
voir
page
`
`
.
$
_SESSION
[
'
cpt
'
]
.
'
'
fois
<
br
/
>
\n
'
'
;
echo
`
`
SID
courant
être
`
`
.
session_id
(
)
;
echo
`
`
<
br
/
>
<
avoir
href
=
\
'
'
dns-remplacer
\
'
'
>
aller
à
page
suivant
˓→
dns-remplacer
<
/
avoir
>
'
'
;
?
>
aller
relire
information
stocker
en
variable
de
session
dans
autre
page
:
<
?
php
/
/
dns-remplacer
session_start
(
)
;
if
(
!
isset
(
$
_SESSION
[
'
cpt
'
]
)
)
$
_SESSION
[
'
cpt
'
]
=
;
else
$
_SESSION
[
'
cpt
'
]
++
;
echo
`
`
bonjour
{
$
_SESSION
[
'
login
'
]
}
!
<
br
>
\n
'
'
;
echo
`
`
avoir
voir
page
`
`
.
$
_SESSION
[
'
cpt
'
]
.
`
`
fois
<
br
/
>
\n
'
'
;
echo
`
`
SID
être
`
`
.
session_id
(
)
;
echo
`
`
<
br
/
>
<
avoir
href
=
\
'
'
dns-remplacer
\
'
'
>
retour
avoir
dns-remplacer
<
/
avoir
>
'
'
;
?
>
exécution
:
utilisation
variable
de
session
PHP
.
Http
conservation
d
’
information
sur
client
cours|cour
PHP
accélérer
,
version
Champs
cacher
quatrième
mécanisme
être
employer
pour
conserver
de
l
’
information
dans
page
Web
même
l
’
utilisation
de
champ
cacher
:
input
de
type
hidden
.
champ
pouvoir
par
exemple
servir
à
stocker
dans
formulaire
HTML
champ
spécial
dire
csrf
token
contenir
identifier
unique
temporaire
pour
prémunir
attaque
de
type
CSRF
:
cross
site
Request
Forgery
exemple
être
l
’
envoi
d
’
mail
contenir
image
avoir
quelqu
’
un
image
être
faire
lien
vers
page
d
’
administration
sur
destinataire
mail
avoir
droit
particulier
editer
supprimer
ressource
.
page
pouvoir
déclencher
suppression
modification
de
contenu
souhaiter
.
principal
Frameworks
Web
Symfony
,
Laravel
en
PHP
Django
,
flask
en
python
prendre
en
charge
génération
automatique
de
token
mise
en
variable
de
session
falloir
de
l
’
appeler
dans
formulaire
de
l
’
utilisation
d
’
ajax
.
manipuler
XML
avec
PHP
format
XML
être
utiliser
de
façon
varier
.
trouver
dans
service
Web
,
fichier
de
configuration
,
format
SVG
,
MathML
,
docx
,
odt
,
etc
.
manipulation
dans
langage
PHP
être
important
.
pouvoir
manipuler
XML
de
différent
manière
—
à
main
—
avec
XMLWriter
/
XMLReader
—
avec
dom
—
avec
SimpleXML
combinaison
de
méthode
.
—
dom
document
Object
Model
être
méthode
recréer
l
’
arborescence
d
’
document
XML
sous
forme
d
’
objet
PHP
.
utilisation
être
simple
être
cou-
teuse
en
ressource
,
en
temps
d
’
exécution
verbeux
.
—
XMLWriter
XMLReader
traiter
fichier
XML
avoir
bas
niveau
uti-
lisation
exclusif
rendre
code
délicat
à
implémenter
pour
lecture
de
fichier
complexe
.
—
SimpleXML
représenter
sorte
de
compromis
simplicité
/
performance
.
—
traiter
fichier
xml
«
à
main
»
être
à
éviter
sauf
pour
créer
fichier
simple
.
traitement
de
fichier
XML
à
main
:
observer
d
’
abord
créer
fichier
XML
contenir
liste
de
programme
TV
:
lecture
de
fichier
XML
sans
api
être
recommander
.
<
?
php
header
(
'
Content-Type
:
text
/
xml
'
)
;
print
'
<
?
xml
version
=
'
'
'
'
?
>
'
.
`
`
\n
'
'
;
print
`
`
<
programme
>
\n
'
'
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
programme
=
array
(
array
(
'
nom
'
=
>
'
Simpsons
'
,
'
chaine
'
=
>
'
TF18
'
,
'
debut
'
=
>
'
:
'
,
'
duree
'
=
>
'
'
)
,
array
(
'
nom
'
=
>
'
Blake
Mortimer
'
,
'
chaine
'
=
>
'
M54
'
,
'
debut
'
=
>
'
:
'
,
'
duree
'
=
>
'
'
)
)
;
foreach
(
$
programme
avoir
$
show
)
{
print
`
`
\t
<
show
>
\n
'
'
;
foreach
(
$
show
avoir
$
tag
=
>
$
dater
)
{
print
`
`
\t
<
$
tag
>
'
'
.
htmlspecialchar
(
$
dater
)
.
`
`
\t
<
/
$
tag
>
\n
'
'
;
}
print
`
`
<
/
show
>
\n
'
'
;
}
print
`
`
<
/
programme
>
\n
'
'
;
?
>
exécution
:
Ecriture
XML
à
main
Resultat
brut
html
:
<
?
xml
version
=
'
'
'
'
?
>
<
programme
>
<
show
>
<
nom
>
Simpsons
<
/
nom
>
<
chaine
>
TF18
<
/
chaine
>
<
debut
>
:
<
/
debut
>
<
duree
>
<
/
duree
>
<
/
show
>
<
show
>
<
nom
>
Blake
Mortimer
<
/
nom
>
<
chaine
>
M54
<
/
chaine
>
<
debut
>
:
<
/
debut
>
<
duree
>
<
/
duree
>
<
/
show
>
<
/
programme
>
Ecriture
avec
XMLWriter
:
exemple
simple
pour
démarrer
:
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
<
?
php
$
xml
=
new
XMLWriter
(
)
;
$
xml-
>
openURI
(
'
dns-remplacer
'
)
;
$
xml-
>
startElement
(
'
toto
'
)
;
$
xml-
>
writeElement
(
'
url
'
,
'
http
:
/
/
dns-remplacer
'
)
;
$
xml-
>
endElement
(
)
;
$
xml-
>
flush
(
)
;
?
>
Resultat
brut
:
<
toto
>
<
url
>
http
:
/
/
dns-remplacer
<
/
url
>
<
/
toto
>
récupérer
donnée
de
table
carnet
pour
exporter
en
XML
:
<
?
php
require_once
(
'
dns-remplacer
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
$
xml
=
new
XMLWriter
(
)
;
$
xml-
>
openUri
(
`
`
dns-remplacer
'
'
)
;
$
xml-
>
startDocument
(
'
'
,
'
utf-8
'
)
;
$
xml-
>
startElement
(
'
mescontact
'
)
;
while
(
$
pers
=
$
data-
>
fetch
(
)
)
{
$
xml-
>
startElement
(
'
contact
'
)
;
$
xml-
>
writeAttribute
(
'
id
'
,
$
pers
[
'
ID
'
]
)
;
$
xml-
>
writeElement
(
'
prenom
'
,
$
pers
[
'
PRENOM
'
]
)
;
$
xml-
>
writeElement
(
'
nom
'
,
$
pers
[
'
nom
'
]
)
;
$
xml-
>
writeElement
(
'
naissance
'
,
$
pers
[
'
naissance
'
]
)
;
$
xml-
>
endElement
(
)
;
}
$
xml-
>
endElement
(
)
;
$
xml-
>
endElement
(
)
;
$
xml-
>
flush
(
)
;
?
>
Resultat
:
<
?
xml
version
=
'
'
'
'
encoding
=
'
'
UTF-8
'
'
?
>
<
mescontact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
John
<
/
prenom
>
<
nom
>
Smith
<
/
nom
>
<
naissance
>
<
/
naissance
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
jean
<
/
prenom
>
<
nom
>
Durand
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Jeanne
<
/
prenom
>
<
nom
>
GUDULE
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
EMILIO
<
/
prenom
>
<
nom
>
ZAPATA
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Nicolas
<
/
prenom
>
<
nom
>
Jourdain
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
marier
<
/
prenom
>
<
nom
>
DUPUY
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
LOU
<
/
prenom
>
<
nom
>
ANDREAS
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Franz
<
/
prenom
>
<
nom
>
Kafka
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
contact
id
=
'
'
'
'
>
<
prenom
>
Joe
<
/
prenom
>
<
nom
>
dalton
<
/
nom
>
<
naissance
>
<
/
naissance
>
<
/
contact
>
<
/
mescontact
>
traitement
avec
dom
:
Ecriture
de
fichier
XML
avec
dom
en
utiliser
donnée
provenir
d
’
base
de
donnée
.
partir
de
table
film
suivant
:
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
CREATE
tabler
if
NOT
EXISTS
`
film
`
(
`
code_filmìnt
(
)
NOT
NULL
AUTO_INCREMENT
,
`
titre_original
`
varchar
(
)
DEFAULT
NULL
,
`
titre_francais
`
varchar
(
)
DEFAULT
NULL
,
`
pays
`
varchar
(
)
DEFAULT
NULL
,
`
dateìnt
(
)
DEFAULT
NULL
,
`
dureeìnt
(
)
DEFAULT
NULL
,
`
couleur
`
varchar
(
)
DEFAULT
NULL
,
`
realisateurìnt
(
)
DEFAULT
NULL
,
ìmagè
varchar
(
)
DEFAULT
NULL
,
PRIMARY
KEY
(
`
code_film
`
)
)
créer
fichier
XML
avec
donnée
de
table
en
utiliser
dom
:
<
?
php
/
/
avec
fichier
dns-remplacé
utiliser
auparavant
require
(
`
`
dns-remplacer
'
'
)
;
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
film
limit
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
if
(
$
dater
)
{
$
document
=
new
DomDocument
(
)
;
$
document-
>
preserveWhiteSpace
=
false
;
$
document-
>
formatOutput
=
true
;
/
/
créer
racine
<
lesfilm
>
insérer
dans
document
$
lesfilm
=
$
document-
>
createElement
(
'
lesfilm
'
)
;
$
document-
>
appendChild
(
$
lesfilm
)
;
/
/
boucler
pour
film
trouver
dans
BD
:
while
(
$
unfilm
=
$
data-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
)
{
$
film
=
$
document-
>
createElement
(
'
film
'
)
;
$
film-
>
setAttribute
(
'
idreal
'
,
$
unfilm-
>
realisateur
)
;
$
lesfilms-
>
appendChild
(
$
film
)
;
/
/
créer
élément
title
ajouter
à
$
film
$
title
=
$
document-
>
createElement
(
'
titre
'
)
;
$
film-
>
appendChild
(
$
title
)
;
/
/
définir
texte
pour
$
title
$
text
=
$
document-
>
createTextNode
(
utf8_encode
(
$
unfilm-
>
titre_
˓→original
)
)
;
$
title-
>
appendChild
(
$
text
)
;
/
/
créer
ajouter
realisateur
avoir
$
film
$
realisateur
=
$
document-
>
createElement
(
'
date
'
)
;
$
id
=
$
document-
>
createTextNode
(
$
unfilm-
>
date
)
;
$
realisateur-
>
appendChild
(
$
id
)
;
$
film-
>
appendChild
(
$
realisateur
)
;
}
$
document-
>
save
(
'
dns-remplacer
'
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
echo
`
`
Export
XML
finir
!
`
`
;
}
else
{
echo
`
`
film
dans
base
!
'
'
;
}
?
>
exécution
:
Creation
XML
avec
dom
Resultat
:
<
?
xml
version
=
'
'
'
'
?
>
<
lesfilm
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Pandora
and
the
flying
Dutchman
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Johnny
Guitar
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Woman
under
the
influence
(
à
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Apartment
(
The
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Victor
/
Victoria
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Modern
Times
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
(
suite
sur
page
suivant
)
.
manipuler
XML
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
titre
>
M
&
#
xC3
;
&
#
xA9
;
prendre
(
)
˓→
<
/
titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
jour
de
f
&
#
xC3
;
&
#
xAA
;
˓→
<
/
titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
Olvidados
(
los
)
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
film
idreal
=
'
'
'
'
>
<
titre
>
West
Side
Story
<
/
˓→titre
>
<
date
>
<
/
date
>
<
/
film
>
<
/
lesfilm
>
relecture
avec
SimpleXML
:
<
?
php
$
lesfilm
=
simplexml_load_file
(
'
dns-remplacer
'
)
;
foreach
(
$
lesfilms-
>
film
avoir
$
film
)
{
echo
`
`
titre
:
'
'
.
utf8_decode
(
$
film-
>
titre
)
.
`
`
<
br
/
>
\n
'
'
;
foreach
(
$
film-
>
attribute
(
)
as
$
avoir
=
>
$
b
)
{
echo
$
avoir
,
'
=
'
'
'
,
$
b
,
`
`
\
'
'
\n
'
'
;
}
print
`
`
Annee
:
{
$
film-
>
annee
}
<
br
/
>
\n
'
'
;
}
?
>
exécution
:
lecture
XML
avec
SimpleXML
Resultat
brut
:
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
titre
:
Pandora
and
the
flying
Dutchman
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Johnny
Guitar
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Woman
under
the
influence
(
à
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Apartment
(
The
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Victor
/
Victoria
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Modern
Times
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
méprendre
(
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
jour
de
fête
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
Olvidados
(
los
)
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
titre
:
West
Side
Story
˓→
<
br
/
>
idreal
=
'
'
'
'
Annee
:
<
br
/
>
architecture
de
type
MVC
avec
PHP
problème
Lorsqu
’
projet
augmenter
,
besoin
de
s
’
organiser
de
permettre
de
réutilisabilité
de
lisibilité
demander
certain
méthode
.
MVC
=
modeler
voir
Controleur
pouvoir
être
solution
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
intéressant
.
aller
commencer
à
familiariser
avec
composant
d
’
Framework
MVC
à
voir
l
’
utilité
de
recourir
à
de
outil
.
introduction
général
à
sujet
trouver
(
http
:
/
/
sym-
dns-remplacer
/
doc
/
current
/
book
/
from_flat_php_to_
dns-remplacé
)
PHP
pur
template
PHP
:
considérer
code
suivre
en
interroger
table
carnet
voir
précemment
depuis
PHP
avec
PDO
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
pour
acceder
carnet
'
'
;
else
{
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
echo
$
row
[
'
nom
'
]
<
br
/
>
\n
'
'
;
}
}
?
>
pouvoir
observer
défaut
dans
code
:
—
Réutilisabilté
code
réduire
—
fabriquer
formulaire
avec
entrée
carnet
,
devoir
mettre
code
correspondre
?
template
PHP
:
pouvoir
améliorer
chose
:
<
?
php
require
(
`
`
dns-remplacer
'
'
)
;
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
$
sql
=
'
'
select
*
from
carnet
'
'
;
if
(
!
$
connexion-
>
query
(
$
sql
)
)
echo
`
`
Pb
pour
acceder
carnet
'
'
;
else
{
$
ami
=
Array
(
)
;
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
$
ami
[
]
=
$
row
;
}
require
`
`
template
/
dns-remplacer
'
'
;
}
?
>
avec
template
dns-remplacer
à
placer
dans
template
/
dns-remplacer
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
title
>
liste
de
ami
<
/
title
>
<
/
head
>
<
body
>
<
h@card@
>
List
of
friends
<
/
h@card@
>
<
ul
>
<
?
php
foreach
(
$
ami
avoir
$
ami
)
:
?
>
<
li
>
<
avoir
href
=
'
'
/
recherche
?
nom
=
<
?
php
echo
$
ami
[
'
ID
'
]
?
>
'
'
>
<
/
avoir
>
<
/
li
>
<
?
php
endforeach
;
?
>
<
/
ul
>
<
/
body
>
<
/
html
>
commencer
à
séparer
présentation
codage
«
métier
»
.
isoler
logique
applicative
:
<
?
php
/
/
dns-remplacer
require
(
`
`
dns-remplacer
'
'
)
;
(
suite
sur
page
suivant
)
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
function
connect_db
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
Echec
connexion
:
%
s\n
'
'
,
$
e-
>
getMessage
(
)
)
;
exit
(
)
;
}
return
$
connexion
;
}
/
/
function
get_all_friends
(
)
{
$
connexion
=
connect_db
(
)
;
$
ami
=
Array
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
foreach
(
$
connexion-
>
query
(
$
sql
)
avoir
$
row
)
{
$
ami
[
]
=
$
row
;
}
return
$
ami
;
}
?
>
pouvoir
avoir
controleur
simple
interroger
modèle
passer
donnée
template
pour
affichage
.
<
?
php
/
/
dns-remplacer
require_once
'
dns-remplacer
'
;
$
ami
=
get_all_friends
(
)
;
require
'
template
/
dns-remplacer
'
;
?
>
Layout
:
rester
partie
réutilisable
dans
code
à
savoir
layout
.
essayer
de
remédier
à
:
<
!
--
template
/
dns-remplacer
--
>
<
!
DOCTYPE
html
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
html
>
<
head
>
<
title
>
<
?
php
echo
$
title
?
>
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
$
content
?
>
<
/
body
>
<
/
html
>
héritage
de
template
:
<
?
php
/
/
template
/
dns-remplacer
$
title
=
'
liste
ami
'
;
ob_start
(
)
;
?
>
<
h@card@
>
List
de
ami
<
/
h@card@
>
<
ul
>
<
?
php
foreach
(
$
ami
avoir
$
ami
)
:
?
>
<
li
>
<
avoir
href
=
'
'
/
recherche
?
nom
=
<
?
php
echo
$
ami
[
'
nom
'
]
?
>
'
'
>
<
?
php
echo
$
ami
[
'
ville
'
]
?
>
<
/
avoir
>
<
/
li
>
<
?
php
endforeach
;
?
>
<
/
ul
>
<
?
php
$
content
=
ob_get_clean
(
)
;
include
'
dns-remplacer
'
?
>
observer
l
’
utilisation
de
bufferisation
avec
ob_start
(
)
ob_get_clean
(
)
.
dernier
fonction
récupérer
contenu
bufferiser
nettoyer
buffer
.
affichage
détail
d
’
personne
aller
ajouter
à
modèle
fonction
pour
afficher
détail
d
’
personne
:
<
?
php
function
get_friend_by_id
(
$
id
)
{
$
connexion
=
connect_bd
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
(
suite
sur
page
suivant
)
.
architecture
de
type
MVC
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
return
$
stmt-
>
fetch
(
)
;
}
pouvoir
créer
nouveau
controleur
dns-remplacé
:
<
?
php
/
/
dns-remplacer
require_once
'
dns-remplacer
'
;
$
pers
=
get_friend_by_id
(
$
_GET
[
'
id
'
]
)
;
require
'
template
/
dns-remplacer
'
;
?
>
utiliser
template
:
<
?
php
/
/
template
/
dns-remplacer
$
title
=
$
pers
[
'
nom
'
]
;
ob_start
(
)
;
?
>
<
h@card@
>
details
sur
<
?
php
echo
$
pers
[
'
PRENOM
'
]
.
'
'
.
$
pers
[
'
nom
'
]
?
>
<
/
h1
>
<
p
>
<
?
php
echo
'
'
.
$
pers
[
'
naissance
'
]
;
echo
'
<
br
/
>
ville
:
'
.
$
pers
[
'
ville
'
]
;
$
content
=
ob_get_clean
(
)
;
include
'
dns-remplacer
'
?
>
pouvoir
tester
en
entrer
l
’
URL
de
dns-remplacé
avec
paramètre
id
.
code
être
similaire
à
premier
template
pouvoir
réutiliser
template
de
base
,
subsister
problème
:
—
paramètre
id
n
’
être
fournir
,
application
aller
provoquer
erreur
.
—
n
’
avoir
de
controleur
principal
.
regrouper
d
’
abord
code
contrôleur
(
dns-remplacer
dns-remplacer
)
dans
fichier
unique
dns-remplacer
<
?
php
/
/
dns-remplacer
function
list_action
(
)
{
$
ami
=
get_all_friends
(
)
;
require
'
template
/
dns-remplacer
'
;
}
function
detail_action
(
$
id
)
{
$
pers
=
get_friend_by_id
(
$
id
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
require
'
template
/
dns-remplacer
'
;
}
?
>
pouvoir
proposer
controleur
principal
(
front
Controller
)
dns-remplacer
:
<
?
php
/
/
dns-remplacer
/
/
charger
modeles
controleurs
require_once
'
dns-remplacer
'
;
require_once
'
dns-remplacer
'
;
/
/
gestion
route
$
urire
=
parse_url
(
$
_SERVER
[
'
REQUEST_URI
'
]
,
PHP_URL_PATH
)
;
if
(
'
/
dns-remplacer
'
=
=
$
uri
)
{
list_action
(
)
;
}
elseif
(
'
/
dns-remplacer
/
detail
'
=
=
$
urire
&
&
isset
(
$
_GET
[
'
id
'
]
)
)
{
detail_action
(
$
_GET
[
'
id
'
]
)
;
}
else
{
header
(
'
status
:
Not
Found
'
)
;
echo
'
<
html
>
<
body
>
<
h@card@
>
page
Not
Found
<
/
h1
>
<
/
body
>
<
/
html
>
'
;
}
?
>
avoir
structure
de
type
:
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
dns-remplacer
template
dns-remplacé
dns-remplacer
pouvoir
améliorer
en
intégrer
dans
même
objet
modèle
.
voir
sur
github
/
roza
/
php-basic-mvc
(
https
:
/
/
dns-remplacer
/
roza
/
php-basic-mvc
/
)
pour
code
complet
.
système
de
routage
être
incomplet
aller
utliser
pour
continuer
outil
d
’
framework
Web
de
référence
:
Symfony
.
Template
Twig
en
PHP
L
’
installation
de
Twig
faire
grâce
à
l
’
outil
composer
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
composer
installer
d
’
abord
l
’
outil
composer
servir
à
de
tâche
courant
dans
projet
PHP
.
aller
d
’
abord
créer
répertoire
bin
à
racine
de
home
,
placer
l
’
exécutable
dns-remplacer
renommer
composer
.
cd
mkdir
bin
cd
bin
curl
-s
https
:
/
/
dns-remplacer
/
installer
|
php
mv
dns-remplacer
composer
vérifier
définition
de
variable
d
’
environnement
http_proxy
https_proxy
dans
.bashrc
ajouter
ligne
suivant
à
.bashrc
:
export
PATH
=
$
PATH
:
~
/
bin
de
manière
à
programme
installer
dans
répertoire
bin
de
home
être
accessible
de
n
’
importer
.
installation
installer
Twig
:
.
.
code-block
:
:
none
composer
require
twig
/
twig
:
~
créer
dans
répertoire
courir
dossier
vendor
contenir
librairie
demander
.
définir
d
’
abord
template
de
base
,
dns-remplacer
:
<
!
DOCTYPE
html
>
<
html
lang
=
'
'
fr
'
'
>
<
head
>
{
%
block
head
%
}
<
meta
charset
=
'
'
utf-8
'
'
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
dns-remplacer
'
'
/
>
<
title
>
{
%
block
title
%
}
{
%
endblock
%
}
<
/
title
>
{
%
endblock
%
}
<
/
head
>
<
body
>
<
section
id
=
'
'
content
'
'
>
{
%
block
content
%
}
{
%
endblock
%
}
<
/
section
>
<
footer
id
=
'
'
footer
'
'
>
{
%
block
footer
%
}
&
copy
;
copyright
<
avoir
href
=
'
'
http
:
/
/
dns-remplacer
'
'
>
super
site
<
/
avoir
>
.
{
%
endblock
%
}
<
/
footer
>
<
/
body
>
<
/
html
>
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
template
spécialiser
hériter
,
dns-remplacer
:
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
menu
de
semaine
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
style
type
=
'
'
text
/
css
'
'
>
.important
{
color
:
#
;
}
<
/
style
>
{
%
endblock
%
}
{
%
block
content
%
}
<
h@card@
>
menu
<
/
h@card@
>
<
p
=
'
'
important
'
'
>
menu
de
semaine
:
<
dl
>
<
dt
>
lundi
<
/
dt
>
<
dd
>
{
{
lundi
}
}
<
/
dd
>
<
dt
>
mardi
<
/
dt
>
<
dd
>
{
{
mardi
}
}
<
/
dd
>
<
dt
>
mercredi
<
/
dt
>
<
dd
>
{
{
mercredi
}
}
<
/
dd
>
<
dt
>
jeudi
<
/
dt
>
<
dd
>
{
{
jeudi
}
}
<
/
dd
>
<
/
dl
>
<
/
p
>
{
%
endblock
%
}
,
utiliser
template
dans
fichier
dns-remplacer
en
charger
d
’
abord
l
”
autoloader
:
<
?
php
/
/
inclure
autoloader
include
'
vendor
/
dns-remplacer
'
;
try
{
/
/
définir
dossier
trouver
template
$
loader
=
new
Twig_Loader_Filesystem
(
'
template
'
)
;
/
/
initialiser
environement
Twig
$
twig
=
new
Twig_Environment
(
$
loader
)
;
/
/
charger
template
$
template
=
$
twig-
>
loadTemplate
(
'
dns-remplacer
'
)
;
/
/
affecter
variable
template
appeller
rendre
echo
$
template-
>
render
(
array
(
'
lundi
'
=
>
'
steak
frit
'
,
'
mardi
'
=
>
'
Raviolis
'
,
'
mercredi
'
=
>
'
pot
feu
'
,
'
jeudi
'
=
>
'
couscous
'
,
'
vendredi
'
=
>
'
Poisson
'
)
)
;
}
catch
(
exception
$
e
)
{
die
(
'
ERROR
:
'
.
$
e-
>
getMessage
(
)
)
;
(
suite
sur
page
suivant
)
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
}
affichage
personne
carnet
afficher
à
présent
personne
carnet
à
l
’
aide
d
’
template
Twig
.
réutiliser
fichier
dns-remplacé
voir
:
<
?
php
/
/
dns-remplacer
class
carnet
{
private
static
$
connexion
;
function
__construct
(
)
{
$
dsn
=
'
'
mysql
:
dbname
=
'
'
.BASE
.
`
`
;
host
=
'
'
.SERVER
;
try
{
self
:
:
$
connexion
=
new
PDO
(
$
dsn
,
user
,
PASSWD
)
;
}
catch
(
PDOException
$
e
)
{
printf
(
`
`
échec
de
connexion
:
%
s\n
'
'
,
$
e-
>
˓→getMessage
(
)
)
;
$
this-
>
connexion
=
NULL
;
}
}
/
*
*
Récupére
liste
contact
sous
forme
de
tableau
*
/
function
get_all_friends
(
)
{
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
self
:
:
$
connexion-
>
query
(
$
sql
)
;
return
$
dater
;
}
/
*
*
ajouter
contact
à
table
carnet
*
/
function
add_friend
(
$
dater
)
{
$
sql
=
`
`
insert
INTO
carnet
(
nom
,
PRENOM
,
naissance
,
ville
)
˓→values
(
?
,
?
,
?
,
?
)
'
'
;
$
stmt
=
self
:
:
$
connexion-
>
prepare
(
$
sql
)
;
return
$
stmt-
>
execute
(
array
(
$
dater
[
'
nom
'
]
,
$
dater
[
'
prenom
'
]
,
$
dater
[
'
naissance
'
]
,
$
dater
[
'
ville
'
]
)
)
;
}
/
*
*
Récupére
contact
à
partir
de
ID
*
/
function
get_friend_by_id
(
$
id
)
{
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
self
:
:
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
<
?
php
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
/
/
fichier
dns-remplacé
include
'
vendor
/
dns-remplacer
'
;
/
/
inclure
modele
include
'
dns-remplacer
'
;
/
/
instancie
carnet
$
=
new
carnet
(
)
;
try
{
/
/
indiquer
dossier
trouver
template
$
loader
=
new
Twig_Loader_Filesystem
(
'
template
'
)
;
/
/
initialiser
environement
Twig
$
twig
=
new
Twig_Environment
(
$
loader
)
;
/
/
récupérer
donnée
depuis
base
$
ami
=
$
car-
>
get_all_friends
(
)
;
/
/
charger
template
$
template
=
$
twig-
>
loadTemplate
(
'
dns-remplacer
'
)
;
$
titre
=
'
'
liste
membre
carnet
trier
par
ville
'
'
;
echo
$
template-
>
render
(
array
(
'
titre
'
=
>
$
titre
,
'
ami
'
=
>
$
ami
,
)
)
;
}
catch
(
exception
$
e
)
{
die
(
'
ERROR
:
'
.
$
e-
>
getMessage
(
)
)
;
}
?
>
template
dns-remplacé
:
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
personne
carnet
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
style
type
=
'
'
text
/
css
'
'
>
.important
{
color
:
#
;
}
<
/
style
>
{
%
endblock
%
}
{
%
block
content
%
}
<
p
align
=
'
'
center
'
'
=
'
'
Style1
'
'
>
{
{
titre
}
}
<
/
p
>
<
tabler
border
=
'
'
'
'
align
=
'
'
center
'
'
cellspacing
=
'
'
'
'
cellpadding
=
'
'
'
'
>
<
tr
bgcolor
=
'
'
#
CA9999
'
'
>
<
td
width
=
'
'
'
'
>
<
strong
>
numero
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
nom
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
Prenom
<
/
strong
>
<
/
td
>
<
td
width
=
'
'
'
'
>
<
strong
>
age
<
/
strong
>
<
/
td
>
(
suite
sur
page
suivant
)
.
Templates
Twig
en
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
<
td
width
=
'
'
'
'
>
<
strong
>
ville
<
/
strong
>
<
/
td
>
<
/
tr
>
{
%
set
i
=
%
}
{
%
for
ami
in
ami
%
}
{
%
set
i
=
i@card@
%
}
{
%
if
i
is
odd
%
}
<
tr
bgcolor
=
'
'
#
F0F0F0
'
'
>
{
%
else
%
}
<
tr
bgcolor
=
'
'
#
A6A6A6
'
'
>
{
%
endif
%
}
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
/
tr
>
{
%
endfor
%
}
<
/
table
>
{
%
endblock
%
}
template
être
maladroit
montrer
l
’
expressivité
langage
de
template
Twig
avec
boucle
,
conditionnel
,
calcul
avec
variable
,
etc
.
pouvoir
sûr
en
proposer
simple
avec
CSS
adéquat
.
affichage
personne
avec
template
simple
:
(
dns-remplacer
)
{
%
extends
`
`
dns-remplacer
'
'
%
}
{
%
block
title
%
}
personne
carnet
{
%
endblock
%
}
{
%
block
head
%
}
{
{
parent
(
)
}
}
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
static
/
css
/
dns-remplacer
'
'
/
>
{
%
endblock
%
}
{
%
block
content
%
}
<
h@card@
>
{
{
titre
}
}
<
/
h2
>
<
tabler
id
=
'
'
joli
'
'
=
'
'
centre
'
'
>
<
tr
>
<
td
>
numero
<
/
td
>
<
td
>
nom
<
/
td
>
<
td
>
Prenom
<
/
td
>
<
td
>
age
<
/
td
>
<
td
>
ville
<
/
td
>
<
/
tr
>
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
{
%
for
ami
in
ami
%
}
<
tr
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
td
>
{
{
dns-remplacer
}
}
<
/
td
>
<
/
tr
>
{
%
endfor
%
}
<
/
table
>
{
%
endblock
%
}
avec
style
aller
sur
tableau
.
.
.
pouvoir
compléter
développement
MVC
effectuer
en
utiliser
template
Twig
.
voir
sur
github
/
roza
/
php-basic-mvc
(
https
:
/
/
dns-remplacer
/
roza
/
php-basic-mvc
/
)
pour
code
complet
.
système
de
routage
employer
être
rudimentaire
aller
utliser
outil
d
’
framework
Web
de
référence
:
Symfony
pour
aller
.
composer
,
Symfony
Flex
aller
à
présent
familiariser
avec
outil
composant
d
’
Framework
de
réfé-
rence
:
Symfony
être
modulaire
permettre
d
’
installer
composant
riche
SwiftMailer
pour
envoyer
mail
,
FOSUserBundle
gérer
utilisateur
,
FOSREST-Bundle
APIPlatform
pour
réaliser
api
complet
.
Framework
Symfony
être
baser
sur
Micro-noyau
(
Micro-Kernel
)
%
léger
noyau
de
Symfony
.
introduction
général
à
framework
trouver
(
https
:
/
/
dns-remplacer
/
)
gestion
dépendance
faire
à
présent
grâce
à
l
’
outil
Symfony
Flex
permettre
d
’
établir
recette
recipes
décrire
dépendance
configuration
d
’
projet
.
L
’
outil
de
base
être
composer
indication
:
composer
permettre
d
’
installer
centaine
de
package
disponible
.
trouver
sur
Packagist
(
https
:
/
/
dns-remplacer
/
)
.
permettre
de
gérer
dépendance
d
’
projet
de
créer
squellette
d
’
application
Symfony
.
composer
installer
d
’
abord
l
’
outil
composer
servir
à
de
tâche
courant
dans
projet
PHP
.
aller
d
’
abord
créer
répertoire
bin
à
racine
de
home
,
placer
l
’
exécutable
dns-remplacer
renommer
composer
.
.
composer
,
Symfony
Flex
cours|cour
PHP
accélérer
,
version
cd
mkdir
bin
cd
bin
curl
-s
https
:
/
/
dns-remplacer
/
installer
|
php
mv
dns-remplacer
composer
vérifier
définition
de
variable
d
’
environnement
http_proxy
https_proxy
dans
.bashrc
ajouter
ligne
suivant
à
.bashrc
:
export
PATH
=
$
PATH
:
~
/
bin
de
manière
à
programme
installer
dans
répertoire
bin
de
home
être
accessible
de
n
’
importer
.
vouloir
juste
installer
composant
simple
HTTP
Foundation
»
,
placer
à
racine
dossier
de
travail
fichier
*
dns-remplacer
suivre
:
{
'
'
require
'
'
:
{
'
'
symfony
/
http-foundation
'
'
:
`
`
~
'
'
}
}
indiquer
n
’
installer
pour
l
’
instant
seul
composant
demander
dernier
version
stable
de
branche
pour
http-foundation
.
utiliser
composer
pour
installer
composant
demander
:
composer
update
-o
noter
l
’
utilisation
de
l
’
option
-o
pour
optimize-autoloader
optimiser
«
»
chargement
automatique
classe
.
HttpFoundation
:
principal
composant
de
HttpFoundation
à
savoir
Request
Response
être
prêt
à
l
’
emploi
.
remarquer
l
’
usage
espace
de
nommage
en
PHP
semblable
à
C++
import
de
package
en
java
pour
éviter
conflit
de
nommage
entre
différent
vendor
c
’
être
à
dire
différent
entité
fournir
code
à
projet
:
<
?
php
/
/
chargement
autoloader
require_once
__DIR__
.
'
vendor
/
dns-remplacer
'
;
user
Symfony\Component\HttpFoundation\Request
;
user
Symfony\Component\HttpFoundation\Response
;
/
/
Actual
request
:
/
/
$
request
=
Request
:
:
createFromGlobals
(
)
;
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
/
/
fake
request
$
request
=
Request
:
:
create
(
'
/
dns-remplacer
?
name
=
zozo
'
)
;
/
/
URI
demandee
(
sans
parametres
)
$
path
=
$
request-
>
getPathInfo
(
)
;
/
/
recup
GET
de
variable
$
nom
=
$
request-
>
query-
>
get
(
'
name
'
,
'
World
'
)
;
$
prenom
=
$
request-
>
query-
>
get
(
'
surname
'
,
'
Joe
'
)
;
echo
`
`
bonjour
$
surname
$
name
<
br
/
>
'
'
;
pouvoir
récupérer
d
’
autre
information
sur
client
fabriquer
réponse
:
<
?
php
/
/
recup
variable
SERVER
$
host
=
$
request-
>
server-
>
get
(
'
HTTP_HOST
'
)
;
/
/
get
COOKIES
$
request-
>
cookies-
>
get
(
'
PHPSESSID
'
)
;
/
/
HTTP
headers
$
headers
=
$
request-
>
headers-
>
get
(
'
host
'
)
;
$
content_type
=
$
request-
>
headers-
>
get
(
'
content_type
'
)
;
$
method
=
$
request-
>
getMethod
(
)
;
/
/
GET
,
POST
,
pouvoir
,
DELETE
HEAD
$
langs
=
$
request-
>
getLanguages
(
)
;
$
IP
=
=
$
request-
>
getClientIp
(
)
;
$
response
=
new
Response
(
$
IP
.
'
'
`
`
.
$
host
.
'
'
`
`
.
$
path
.
'
'
`
`
.
$
headers
.
'
'
`
`
.
$
content_type
.
'
'
`
`
.
$
method
.
'
'
`
`
.
$
nom
.
'
'
`
`
.
$
langs
[
]
)
;
$
response-
>
send
(
)
;
?
>
Squellette
d
’
application
Symfony
:
créer
répertoire
de
travail
mvc-sf4
dans
dossier
Web
,
par
exemple
~
/
www
(
~
/
pu-blic_html
)
utiliser
user_dir
d
’
apache
n
’
importer
utiliser
serveur
Web
embar-qué
de
PHP
.
créer
trame
d
’
application
symfony4
à
l
’
aider
de
composer
composer
create-project
symfony
/
skeleton
hello-sf4
veiller
à
avoir
version
à
jour
de
composer
besoin
:
composer
self-update
structure
projet
créer
être
suivant
:
.
composer
,
Symfony
Flex
cours|cour
PHP
accélérer
,
version
hello-sf4
/
bin
consoler
dns-remplacer
dns-remplacer
config
dns-remplacer
package
dns-remplacer
dns-remplacé
public
dns-remplacer
src
Controller
dns-remplacer
dns-remplacer
var
cacher
log
vendor
dns-remplacer
composer
psr
symfony
répertoire
bin
contenir
l
’
outil
console
permettre
d
’
effectuer
tâche
de
routine
pour
créer
gérer
projet
.
répertoire
config
contenir
fichier
de
configuration
.
répertoire
public
contenir
fichier
index
de
l
’
application
dossie
src
controleurs
,
Kernel
entité
etc
.
dossier
var
contenir
cache
logs
dossier
vendor
classe
Bundles
installer
http-foundation
.
pouvoir
consulter
fichier
dns-remplacé
trouver
à
racine
dossier
hello-sf4
pour
voir
liste
dépendance
installer
:
{
'
'
psr
/
cache
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
container
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
log
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
psr
/
simple-cache
'
'
:
{
'
'
version
'
'
:
`
`
'
'
}
,
'
'
symfony
/
cache
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
'
'
symfony
/
config
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
console
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
e3868d2f4a5104f19f844fe551099a00c6562527
'
'
}
}
,
'
'
symfony
/
debug
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
dependency-injection
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
dotenv
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
event-dispatcher
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
filesystem
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
finder
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
flex
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
cc1afd81841db36fbef982fe56b48ade6716fac4
'
'
}
}
,
'
'
symfony
/
framework-bundle
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
c0c0bf94174609d740ca2a61e0201949c5683d50
'
'
}
}
,
'
'
symfony
/
http-foundation
'
'
:
{
(
suite
sur
page
suivant
)
.
composer
,
Symfony
Flex
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
http-kernel
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
,
'
'
symfony
/
lts
'
'
:
{
'
'
version
'
'
:
`
`
4-dev
'
'
}
,
'
'
symfony
/
polyfill-mbstring
'
'
:
{
'
'
version
'
'
:
`
`
v1.8.0
'
'
}
,
'
'
symfony
/
routing
'
'
:
{
'
'
version
'
'
:
`
`
'
'
,
'
'
recipe
'
'
:
{
'
'
repo
'
'
:
`
`
dns-remplacer
/
symfony
/
recipes
'
'
,
'
'
branch
'
'
:
`
`
master
'
'
,
'
'
version
'
'
:
`
`
'
'
,
'
'
ref
'
'
:
`
`
cda8b550123383d25827705d05a42acf6819fe4e
'
'
}
}
,
'
'
symfony
/
yaml
'
'
:
{
'
'
version
'
'
:
`
`
v4.1.0
'
'
}
}
application
simple
Symfony
compléter
à
présent
l
’
application
Symfony
.
tester
application
PHP
-
TDD
aller
à
présent
attaquer
à
problématique
fondamental
dans
application
qu
’
être
Web
,
mobile
autre
:
test
.
TDD
TDD
vouloir
dire
test
Driven
Development
c
’
être
à
dire
développement
diriger
par
test
C
’
être
démarche
mettre
en
en
méthodologie
agile
consister
en
général
en
l
’
application
point
suivant
:
—
écrire
test
—
vérifier
qu
’
échouer
(
code
qu
’
tester
n
’
exister
)
—
écrire
juste
code
suffire
pour
passer
test
—
vérifier
test
passer
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
—
procéder
à
refactoring
code
,
c
’
l
’
améliorer
en
garder
même
fonctionnalité
.
intérêt
de
démarche
:
avantage
principal
de
démarche
être
:
—
préciser
spécification
code
l
’
api
envisager
—
obliger
à
faire
choix
de
conception
rester
dans
flou
début
développement
—
,
disposer
d
’
large
base
de
test
être
riche
pour
application
permettre
de
vérifier
à
moment
test
installer
être
mettre
en
défaut
par
de
nouveau
développement
refactoring
de
code
langage
de
programmation
disposer
de
Frameworks
de
test
.
par
exemple
java
offrir
JUnit
.
PHP
avoir
proposer
PHPUnit
.
pouvoir
l
’
installer
via
composer
:
{
'
'
require
'
'
:
{
'
'
phpunit
/
phpunit
'
'
:
`
`
.
*
'
'
,
}
,
'
'
autoload
'
'
:
{
'
'
psr-0
'
'
:
{
'
'
exemple
'
'
:
`
`
src
'
'
}
}
}
dns-remplacer
install
Ecrivons
à
présent
premier
test
dans
dossier
test
:
<
?
php
user
Exemple\FileLoader
;
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
(
)
{
$
f
=
new
FileLoader
;
}
}
pour
tester
:
placer
fichier
dns-remplacer
à
racine
de
projet
contenir
:
<
?
xml
version
=
'
'
'
'
encoding
=
'
'
UTF-8
'
'
?
>
<
!
--
(
suite
sur
page
suivant
)
.
tester
application
PHP
-
TDD
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
PHPUnit
configuration
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
=
fichier
de
configuration
standard
de
phpunit
--
>
<
phpunir
backupGlobals
=
'
'
false
'
'
backupStaticAttribute
=
'
'
false
'
'
colors
=
'
'
true
'
'
bootstrap
=
'
'
vendor
/
dns-remplacer
'
'
convertErrorsToExceptions
=
'
'
true
'
'
convertNoticesToExceptions
=
'
'
true
'
'
convertWarningsToExceptions
=
'
'
true
'
'
processIsolation
=
'
'
false
'
'
stopOnFailure
=
'
'
false
'
'
syntaxCheck
=
'
'
false
'
'
>
<
testsuite
>
<
testsuite
>
<
directory
>
test
<
/
directory
>
<
/
testsuite
>
<
/
testsuite
>
<
/
phpunit
>
être|sommer
prêt
à
lancer
premier
test
:
phpunir
Ecriver
de
code
pour
permettre
de
passer
premier
test
:
aller
compléter
test
par
vérification
qu
’
fichier
situer
dans
textit
{
fixtures
}
de
test
avoir
être
charger
:
<
?
php
class
FileLoaderTest
extends
PHPUnit_Framework_TestCase
{
public
function
testFileLoaderClassCanBeCreated
(
)
{
$
f
=
new
FileLoader
;
}
/
*
*
*
vouloir
récupérer
contenu
de
fichier
via
*
méthode
get
(
)
*
/
public
function
testFileLoaderCanLoadFileContent
(
)
{
$
f
=
new
FileLoader
;
$
r
=
$
f-
>
get
(
__DIR__
.
'
/
fixtures
/
dns-remplacer
'
)
;
$
this-
>
assertEquals
(
`
`
Foo\n
'
'
,
$
r
)
;
}
}
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
avoir
besoin
de
Mock
Objects
,
installer
librairie
mockery
:
composer
require
--
dev
mockery
/
mockery
mettre
en
place
Web
service
REST
problème
dans
architecture
REST
classique
,
serveur
présenter
donnée
d
’
table
client
riche
(
ria
)
en
JavaScript
client
mobile
permettre
de
récupérer
afficher
.
REST
signifier
Representational
State
Transfer
.
architecture
permettre
de
réaliser
application
de
type
onepage
en
reporter
sur
client
bon
partie
de
logique
métier
en
offrir
point
d
’
entrée
client
pour
lire
donnée
sur
serveur
envoyer
.
donnée
pouvoir
être
envoyer
en
XML
de
en
aujourd
’
hui
en
JSON
:
JavaScript
Object
notation
,
c
’
être
à
dire
objet
utilisable
en
JS
.
poser
définition
suivant
:
—
ria
=
Rich
Internet
application
—
REST
=
Representational
State
Transform
—
logique
métier
déporter
vers
client
—
tâcher
principal
serveur
:
offrir
service
de
récupération
de
stockage
de
donnée
flux
de
news
pouvoir
offrir
par
exemple
ressource
type
:
/
api
/
v1
/
news
/
permettre
client
de
récupérer
news
numéro
en
JSON
en
XML
en
employer
méthode
HTTP
GET
dans
version
de
api
.
dans
exemple
,
news
être
ressource
élément
manipuler
dans
l
’
api
version
.
méthode
GET
être
employer
pour
récupérer
élément
par
collection
.
méthode
POST
être
à
employer
pour
envoyer
vers
serveur
un
élé-
ments
.
D
’
autre
méthode
HTTP
pour
créer
modifier
(
pouvoir
)
(
patch
)
élément
effacer
(
DELETE
)
être
disponible
dans
l
’
api
.
technologie
concurrent
à
REST
être
XML-RPC
SOAP
(
Microsoft
)
REST
être
façon
moderne
de
concevoir
genre
de
service
posséder
avantage
suivant
:
—
bon
monter
en
charge
serveur
—
simplicité
serveur
(
retour
source
protocole
HTTP
)
—
Equilibrage
de
charge
—
serveur
offrir
api
—
service
être
représenter
par
URL
’
s
simplicité
bon
gestion
cache
—
possibilité
de
décomposer
service
complexe
en
de
multiple
service
simple
communiquer
entre
principe
de
REST
avoir
être
théoriser
par
Roy
Fielding
dans
thèse
(
http
:
/
/
dns-remplacer
/
~
fielding
/
pub
/
dissertation
/
rest_arch_
dns-remplacé
)
:
.
séparation
clair
entre
client
serveur
.
mettre
en
place
Web
service
REST
cours|cour
PHP
accélérer
,
version
.
client
contenir
logique
métier
,
serveur
être
sans
Etat
.
réponse
serveur
pouvoir
être
mettre
en
cache
.
L
’
interface
devoir
être
simple
,
définir
,
standardiser
.
système
pouvoir
avoir
couche
proxys
,
système
de
cache
,
etc
.
Eventuellement
,
client
pouvoir
télecharger
code
serveur
s
’
exécuter
dans
contexte
client
pour
mémoire
,
api
REST
pouvoir
offrir
méthode
suivant
:
méthode
HTTP
REST
:
méthode
rôle
coder
retour
HTTP
GET
URL
récupération
Element
GET
URL
récupération
collection
POST
URL
envoi
d
’
Elements
DELETE
URL
effacer
Element
(
s
)
pouvoir
URL
modifier
Element
patch
URL
Modif
.
partiel
d
’
Elt
.
pouvoir
avoir
erreur
:
coder
erreur
description
signification
Bad
Request
requêter
former
Not
Found
Resource
demander
inexistant
Unauthorized
authentification
necessaire
pour
accéder
à
resource
.
Method
Not
Allowed
méthode
interdire
pour
resource
.
Conflict
par
exemple
,
pouvoir
créer
ressource
fois
Internal
Server
Error
autre
erreur
serveur
.
par
,
serveur
REST
maintenir
d
’
état
,
requête
être
indépendant
un
autre
.
C
’
être
retour
fondamental
protocole
HTTP
n
’
être
doter
de
de
capacité
de
mémorisation
.
.
.
logique
l
’
ergonomie
de
l
’
application
être
gérer
côté
client
.
C
’
être
méthode
aujourd
’
hui
plebisciter
pour
faire
dialoguer
client
(
mobile
Web
)
avec
serveur
.
exemple
de
service
REST
avec
PHP
problème
aller
réaliser
en
PHP
l
’
implémentation
d
’
service
REST
exposer
donnée
de
table
de
contact
appeller
carnet
utiliser
dans
autre
exemple
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
contact
être
accessible
à
route
type
:
/
api
/
v1
/
contact
/
permettre
client
de
récupérer
contact
en
JSON
employer
méthode
HTTP
GET
dans
version
de
api
.
dans
exemple
,
contact
constituer
ressource
manipuler
dans
api
.
méthode
GET
être
employer
pour
récupérer
élément
par
collection
.
méthode
action
réaliser
URI
GET
Récup
.
lien
/
api
/
v1
/
GET
Récuperation
Element
/
api
/
v1
/
contact
/
{
id
}
GET
récupération
collection
/
api
/
v1
/
contact
POST
Creation
d
’
Elements
/
api
/
v1
/
contact
DELETE
effacer
Element
/
api
/
v1
/
contact
/
{
id
}
pouvoir
modifier
Element
/
api
/
v1
/
contact
/
{
id
}
patch
Modif
.
partiel
d
’
Elt
.
/
api
/
v1
/
contact
/
{
id
}
route
/
api
/
v1
/
en
GET
renvoyer
liste
URLs
contact
liste
de
contact
avec
détail
.
permettre
d
’
avoir
serveur
REST
auto-documenté
récupération
d
’
premier
URL
permettre
en
suivre
d
’
obtenir
liste
ressource
présent
sur
service
avec
URLs
respectif
.
pouvoir
paginer
réponse
pour
manipuler
de
donnée
simultané-
mentir
.
pour
assurer
routage
aller
continuer
avec
silex
(
http
:
/
/
dns-remplacer
/
)
pouvoir
modifier
fichier
dns-remplacer
mettre
en
place
suivre
:
<
?
php
require_once
__DIR__
.
'
/
vendor
/
dns-remplacer
'
;
require_once
'
dns-remplacer
'
;
$
app
=
new
Silex\Application
(
)
;
$
app
[
'
debug
'
]
=
true
;
$
app-
>
get
(
'
/
contact
'
,
function
(
)
{
$
content
=
'
<
ul
>
'
;
$
ami
=
get_all_friends
(
)
;
foreach
(
$
ami
avoir
$
ami
)
{
$
content
.
=
'
<
li
>
'
.
$
ami
[
'
nom
'
]
.
'
<
/
li
>
'
;
}
$
content
.
=
'
<
/
ul
>
'
;
return
$
content
;
}
)
;
$
app-
>
get
(
'
/
api
/
'
,
function
(
)
{
$
ami
=
get_all_friends_links
(
)
;
return
json_encode
(
$
ami
)
;
}
)
;
$
app-
>
get
(
'
/
api
/
contact
'
,
function
(
)
{
(
suite
sur
page
suivant
)
.
exemple
de
service
REST
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
ami
=
get_all_friends
(
)
;
return
json_encode
(
$
ami
)
;
}
)
;
?
>
avec
nouveau
méthode
dans
dns-remplacé
:
<
?
php
function
get_all_friends_links
(
)
{
$
connexion
=
connect_db
(
)
;
$
ami
=
Array
(
)
;
$
sql
=
'
'
select
*
from
carnet
'
'
;
$
dater
=
$
connexion-
>
query
(
$
sql
)
;
while
(
$
pers
=
$
data-
>
fetch
(
PDO
:
:
FETCH_ASSOC
)
)
{
$
res
=
Array
(
)
;
$
res
[
'
nom
'
]
=
$
pers
[
'
nom
'
]
;
$
res
[
'
URL
'
]
=
$
_SERVER
[
`
`
REQUEST_SCHEME
'
'
]
.
'
:
/
/
'
.
$
_SERVER
[
'
HTTP_HOST
'
]
.
$
_SERVER
[
'
CONTEXT_PREFIX
'
]
.
'
/
silex
/
api
/
contact
/
'
.
$
pers
[
'
ID
'
]
;
$
ami
[
]
=
$
res
;
}
return
$
ami
;
}
?
>
indication
:
vue
de
base
de
api
renvoyer
liste
lien
de
contact
quelqu
’
un
s
’
connecter
pouvoir
décrouvrir
par
d
’
autre
URLs
gérer
par
api
.
bon
api
REST
devoir
d
’
être
autodocumenter
dans
mesure
possible
!
assurer
GET
sur
l
’
URI
/
api
/
contact
/
id
en
ajouter
à
dns-remplacé
:
<
?
php
$
app-
>
get
(
'
/
api
/
contact
/
{
id
}
'
,
function
(
$
id
)
user
(
$
app
)
{
$
ami
=
get_friend_by_id
(
$
id
)
;
if
(
!
$
ami
)
$
app-
>
abort
(
,
`
`
contact
inexistant
'
'
)
;
else
return
json_encode
(
$
ami
,
JSON_PRETTY_PRINT
)
;
}
)
;
?
>
marcher
ajouter
nouveau
méthode
get_friend_by_id
(
)
modèle
:
<
?
php
function
get_friend_by_id
(
$
id
)
{
(
suite
sur
page
suivant
)
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
select
*
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
?
>
continuer
avec
méthode
http
DELETE
sur
même
route
en
ajouter
à
dns-remplacé
:
<
?
php
$
app-
>
delete
(
'
/
api
/
contact
/
{
id
}
'
,
function
(
$
id
)
user
(
$
app
)
{
$
ami
=
get_friend_by_id
(
$
id
)
;
if
(
!
$
ami
)
$
app-
>
abort
(
,
`
`
contact
inexistant
'
'
)
;
else
{
delete_friend_by_id
(
$
id
)
;
return
json_encode
(
$
ami
,
JSON_PRETTY_PRINT
)
;
}
}
)
;
?
>
en
ajouter
modèle
:
<
?
php
function
delete_friend_by_id
(
$
id
)
{
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
Delete
from
carnet
where
ID
=
:
id
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
$
stmt-
>
bindParam
(
'
:
id
'
,
$
id
,
PDO
:
:
PARAM_INT
)
;
$
stmt-
>
execute
(
)
;
return
$
stmt-
>
fetch
(
PDO
:
:
FETCH_OBJ
)
;
}
?
>
POST
devoir
permettre
d
’
envoyer
nouveau
contact
pour
peupler
table
carnet
sur
route
/
api
/
contact
.
assurer
d
’
abord
récupération
contenu
json
sous
forme
d
’
tableau
PHP
avec
méthode
before
de
silex
:
<
?
php
$
app-
>
before
(
function
(
Request
$
request
)
{
if
(
=
=
=
strpos
(
$
request-
>
headers-
>
get
(
'
Content-Type
'
)
,
˓→
'
application
/
json
'
)
)
{
$
dater
=
json_decode
(
$
request-
>
getContent
(
)
,
true
)
;
$
request-
>
request-
>
replacer
(
is_array
(
$
dater
)
?
$
dater
˓→
:
array
(
)
)
;
(
suite
sur
page
suivant
)
.
exemple
de
service
REST
avec
PHP
cours|cour
PHP
accélérer
,
version
(
suite
de
page
précédent
)
}
}
)
;
?
>
méthode
post
dire
:
<
?
php
$
app-
>
post
(
'
/
api
/
contact
'
,
function
(
Request
$
request
)
user
(
˓→
$
app
)
{
$
dater
=
$
request-
>
request-
>
all
(
)
;
add_friends
(
$
dater
)
;
return
new
Response
(
json_encode
(
$
dater
)
,
,
array
(
'
Content-
˓→Type
'
=
>
'
application
/
json
'
)
)
;
}
)
;
?
>
N
’
oublier
de
faire
appel
objet
Request
Response
début
fichier
dns-remplacé
:
<
?
php
user
Symfony\Component\HttpFoundation\Request
;
user
Symfony\Component\HttpFoundation\Response
;
?
>
rester
qu
’
à
ajouter
modèle
:
<
?
php
function
add_friends
(
$
dater
)
{
$
connexion
=
connect_db
(
)
;
$
sql
=
'
'
insert
INTO
carnet
(
nom
,
PRENOM
,
naissance
,
ville
)
valoir
(
?
˓→
,
?
,
?
,
?
)
'
'
;
$
stmt
=
$
connexion-
>
prepare
(
$
sql
)
;
return
$
stmt-
>
execute
(
array
(
$
dater
[
'
nom
'
]
,
$
dater
[
'
PRENOM
'
]
,
˓→
$
dater
[
'
naissance
'
]
,
$
dater
[
'
ville
'
]
)
)
;
}
?
>
n
’
avoir
qu
’
à
implémenter
pouvoir
à
tester
!
!
tester
api
REST
avec
navigateur
avec
curl
pour
tester
api
pouvoir
dans
premier
temps
utiliser
l
’
extension
Postman
de
chrome
l
’
extension
RESTClient
pour
Firefox
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
avertissement
:
attention
à
désactiver
proxys
dans
navigateur
vouloir
utiliser
extension
.
pour
chrome
pouvoir
lancer
en
ligne
de
commande
avec
l
’
option
–
no-proxy-server
vouloir
solution
en
ligne
de
commande
,
curl
permettre
de
manipuler
différent
mé-
thodes
HTTP
.
syntaxe
n
’
être
idéal
pouvoir
tester
méthode
HTTP
.
avertissement
:
avoir
déclarer
variable
d
’
environnement
http_proxy
https_proxy
,
valoir
désactiver
curl
n
’
essayer
de
passer
par
proxy
être
problématique
pour
de
requête
curl
:
unset
http_proxy
unset
https_proxy
pour
tester
GET
:
curl
-i
http
:
/
/
localhost
/
silex
/
api
/
v1
/
contact
/
utiliser
module
user_dir
d
’
apache
.
curl
-i
http
:
/
/
localhost
/
~
login
/
silex
/
api
/
v1
/
contact
/
avertissement
:
attention
dans
cas
utiliser
user_dir
,
réglage
pour
utiliser
methodes
protocole
HTTP
/
pouvoir
s
’
avérer
délicat
.
fichier
/
etc
/
apache2
/
mods-available
/
dns-remplacer
devoir
être
modifier
suivre
(
user_dir
être
dans
www
,
syntaxe
pour
apache
>
)
:
<
IfModule
mod_userdir.c
>
UserDir
www
UserDir
disabled
root
<
Directory
/
home
/
*
/
www
>
AllowOverride
All
opter
MultiViews
indexer
SymLinksIfOwnerMatch
<
Limit
GET
POST
pouvoir
DELETE
opter
>
Require
all
granted
<
/
Limit
>
<
LimitExcept
GET
POST
pouvoir
DELETE
opter
>
Require
all
denied
<
/
LimitExcept
>
<
/
Directory
>
<
/
IfModule
>
.
tester
api
REST
avec
navigateur
avec
curl
cours|cour
PHP
accélérer
,
version
falloir
dans
dossier
sous
voter
user_dir
(
par
exemple
~
/
www
/
silex
)
avoir
.htaccess
suivre
:
<
Limit
GET
POST
DELETE
pouvoir
option
>
allow
from
all
<
/
Limit
>
FallbackResource
/
~
roza
/
silex
/
dns-remplacer
RewriteBase
/
~
roza
/
silex
dans
cas
,
préciser
besoin
dans
dns-remplacé
fichier
équivalent
:
always_populate_raw_post_data
=
tester
POST
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
POST
-d
'
{
`
`
nom
'
'
:
'
'
dalton
'
'
,
`
`
PRENOM
'
'
:
'
'
joe
'
'
,
`
`
naissance
'
'
:
'
'
'
'
,
˓→
'
'
ville
'
'
:
'
'
Orleans
'
'
}
'
http
:
/
/
localhost
/
silex
/
api
/
contact
test
un
pouvoir
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
pouvoir
-d
'
{
`
`
done
'
'
:
true
}
˓→
'
http
:
/
/
localhost
/
silex
/
api
/
contact
/
test
de
DELETE
:
curl
-i
-H
`
`
Content-Type
:
application
/
json
'
'
-X
`
`
DELETE
'
'
http
:
/
/
localhost
/
silex
/
api
/
contact
/
tester
api
tester
api
avec
Postman
C
’
être
moyen
simple
pour
tester
api
.
l
’
installer
en
téléchargeant
l
’
App
de
Postman
(
https
:
/
/
dns-remplacer
/
apps
)
pour
os
.
pouvoir
constituer
collection
de
requête
HTTP
pour
tester
api
REST
spécifique
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
tester
api
REST
avec
Guzzle
test
de
api
REST
avec
curl
être
lisible
.
préférer
disposer
d
’
batterie
de
test
en
PHP
,
pouvoir
utiliser
librairie
spécialiser
Guzzle
.
pouvoir
installer
dernier
avec
composer
:
composer
require
guzzlehttp
/
guzzle
feuille
de
TD
Lic
pro
Web
mobile
année
—
TD1
—
TD2
—
TD3
feuille
de
TD
2ème
année
IUT
informatique
année
—
TD1
—
TP1
—
TD2
—
TP2
—
TP3
—
TD3
—
Git
init
feuille
de
TD
Lic
pro
Web
mobile
année
—
TD1
—
TD2
—
TD3
—
TD4
—
TD5
—
TD6
—
TD7
.
feuille
de
TD
Lic
pro
Web
mobile
cours|cour
PHP
accélérer
,
version
feuille
de
TD
CVRH
Tours
formation
de
juin
—
TD1
—
TD2
—
TD3
Alice
démarrer
avec
git
:
Paramétrage
initialisation
:
configurer
d
’
abord
paramètre
git
config
--
global
dns-remplacer
`
`
Alice
Torvalds
'
'
git
config
--
global
dns-remplacer
`
`
alice
@
dns-remplacer
'
'
création
d
’
dossier
local
versionné
mkdir
monprojet
cd
monprojet
git
init
avoir
déja
contenu
:
git
add
.
création
d
’
dépot
«
monprojet
»
sur
gitlab
—
priver
—
public
—
interne
à
gitlab
Bitbucket
(
https
:
/
/
dns-remplacer
/
)
offrir
possibilité
d
’
avoir
dépôt
priver
de
taille
limiter
.
Github
(
https
:
/
/
dns-remplacer
/
)
offrir
dépôt
public
faire
payer
dépôt
priver
.
connexion
entre
local
gitlab
:
Eventuellement
:
git
config
dns-remplacé
simple
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
git
remote
add
origin
https
:
/
/
dns-remplacer
/
alice
/
dns-remplacé
git
push
-u
origin
master
:
git
push
par
suite
réalisation
d
’
fonctionnalité
par
Alice
:
—
Alice
prendre
chose
à
réaliser
implémentir
code
nécessaire
—
Alice
faire
test
vérifier
marche
—
git
commettre
-am
«
message
de
commettre
»
Alice
pousser
master
sur
remote
:
git
push
-u
origin
master
Bob
travailler
avec
Alice
grâce
à
git
:
Bob
faire
d
’
abord
Alice
pour
paramétrer
initialiser
dépôt
local
.
Bob
vérifier
qu
’
avoir
remotes
:
—
,
origin
qu
’
créer
besoin
en
faire
:
git
remote
add
origin
https
:
/
/
dns-remplacer
/
bob
/
dns-remplacer
—
d
’
Alice
qu
’
ajouter
:
git
remote
add
alice
https
:
/
/
dns-remplacer
/
alice
/
dns-remplacer
—
taper
git
remote
-v
pour
vérifier
remotes
—
tromper
:
git
remote
remove
alice
Bob
récupérer
master
d
’
Alice
:
git
fetch
Alice
master
.
Bob
travailler
avec
Alice
grâce
à
git
:
cours|cour
PHP
accélérer
,
version
Bob
consulter
branche
local
correspondre
master
d
’
Alice
:
git
branch
-av
git
checkout
Alice
/
master
vérifier
code
d
’
Alice
être
correct
Bob
revenir
dans
master
:
git
checkout
master
Bob
merge
travail
d
’
Alice
pousser
modifs
dans
dépôt
distant
:
git
merge
Alice
/
master
git
push
detruit
branche
local
d
’
Alice
:
git
branch
-d
Alice
/
master
Alice
mettre
à
jour
:
—
ajouter
remote
de
Bob
—
fetche
master
de
Bob
pour
mettre
à
jour
:
git
fetch
Bob
master
—
fusionner
:
git
merge
Bob
/
master
Alice
travailler
sur
branche
git
:
Alice
devoir
par
exemple
intégrer
feature
de
connexion
à
base
de
donnée
.
aller
pour
créer
branche
bd
dédier
à
réalisation
de
feature
placer
.
chapitre
.
table
matière
:
cours|cour
PHP
accélérer
,
version
création
choix
de
branche
:
git
checkout
-b
bd
faire
travail
,
tester
:
git
commettre
-am
`
`
intégration
BD
'
'
Alice
pousser
branche
sur
remote
:
git
push
origin
bd
Bob
branche
d
’
Alice
:
Bob
récupérer
branche
d
’
Alice
:
git
fetch
Alice
bd
Bob
consulter
branche
d
’
Alice
:
S
’
souhaiter
,
Bob
consulter
liste
branche
disponible
placer
dans
branche
d
’
Alice
pour
faire
petit
revue
code
de
collaborateur
.
.
.
git
branch
-av
git
checkout
Alice
/
bd
Bob
revenir
dans
branche
master
:
git
checkout
master
Bob
merge
branche
d
’
Alice
pousser
modifs
:
git
merge
Alice
/
bd
git
push
.
Bob
branche
d
’
Alice
:
cours|cour
PHP
accélérer
,
version
Alice
récupérer
dernier
version
master
:
Alice
fetche
master
de
Bob
pour
mettre
à
jour
:
git
fetch
Bob
master
git
merge
Bob
/
master
Alice
effacer
branche
bd
:
git
branch
-d
bd
chapitre
.
table
matière
:
chapitre
GIT
bon
développeur
devoir
aujourd
’
hui
savoir
utiliser
système
de
gestion
de
version
pour
code
pour
collaborer
.
Git
être
aujourd
’
hui
répandre
.
trouver
à
fin
de
cours|cour
rappel
principal
commande
git
pour
démarrer
:
GIT
start
commande
pour
travailler
à
sur
projet
avec
branche
git
:
GIT
branche
cours|cour
PHP
accélérer
,
version
chapitre
.
GIT
chapitrer
référence
—
Manuel
PHP
(
http
:
/
/
dns-remplacer
/
manual
/
fr
/
)
—
intro
JS
(
https
:
/
/
dns-remplacer
/
iut-orleans
/
informatique
/
intra
/
tuto
/
js-
initiation
/
dns-remplacer
#
/
le-langage-javascript
)
—
complément
JS
(
https
:
/
/
dns-remplacer
/
iut-orleans
/
informatique
/
intra
/
tuto
/
js-initiation
/
dns-remplacer
#
/
versions-de-javascript
)
cours|cour
PHP
accélérer
,
version
chapitre
.
référence
chapitre
index
recherche
—
genindex
—
search
cours|cour
PHP
accélérer
,
version
chapitre
.
index
recherche
index
Symbols
csrf
,
=
=
,
CURL
,
,
=
=
=
,
cvrh
,
$
_GET
[
]
,
,
D
$
_GLOBALS
[
]
,
,
$
_POST
[
]
,
,
DataBase
,
$
_SERVER
[
]
,
DB
,
,
define
,
,
DELETE
,
,
,
,
2eme
année
,
directive
,
dirname
,
Numbers
dom
,
,
E
,
echo
,
à
ensemble
,
array_walk
,
equals
,
associatif
,
ereg
(
)
,
autoload
,
eregi
(
)
,
autoloader
,
eval
,
B
F
base
,
filtrage
,
BD
,
,
filtrage
,
,
bundles
,
foreach
,
formulaire
,
C
G
cacher
,
chaine
,
génération
,
clef
,
GET
,
,
,
,
collection
,
gettype
,
composer
,
GUMP
,
concaténation
,
GUZZLE
,
constructeur
,
heure
controleur
,
Cookies
,
hidden
,
cours|cour
PHP
accélérer
,
version
HTTP
,
,
,
,
,
PHPUnit
,
Http
,
pile
,
HttpFoundation
,
portée
,
POST
,
,
,
,
I
PreparedStatement
,
imbrication
,
print
,
include
,
print_r
,
include_once
,
pouvoir
,
,
,
,
injection
SQL
,
Q
installation
,
,
interpréteur
,
queue
,
is_array
,
R
is_double
,
is_int
,
recherche
,
is_long
,
request
,
is_string
,
require
,
IUT
,
require_once
,
response
,
L
REST
,
,
,
,
Lamp
,
route
,
Lerdorf
,
route
,
licence
professionnel
,
S
M
sécurité
,
,
méthode
,
sax
,
magic
quotes
,
session
,
Mamp
,
set
,
modele
,
settype
,
mvc
,
,
,
SimpleXML
,
MySQL
,
sort
,
SQL
,
N
Stack
,
Namespace
,
string
,
stristr
(
)
,
O
strlen
(
)
,
objet
,
strstr
(
)
,
option
,
suppression
,
Orleans
,
symfony
,
P
T
pair
,
tableau
,
,
patch
,
td
,
PDO
,
,
,
TDD
,
persistant
,
template
,
,
PHP
,
,
,
,
test
,
dns-remplacé
,
test
,
,
,
PHP5
,
test
,
PHP7
,
time
,
phpinfo
,
timestamp
,
index
courir
PHP
accélérer
,
version
toString
,
Tours
,
transaction
,
twig
,
type
,
U
URL
,
user-agent
,
useragent
,
V
valeur
,
validation
,
,
variable
,
,
variable
PHP
,
vue
,
,
W
Wamp
,
Web
,
X
Xampp
,
XML
,
XMLReader
,
XMLWriter
,
z
zend
,
index
document
Outline
cours|cour
format
epub
cours|cour
format
pdf
table
matière
:
caractéristique
principal
fonctionnement
historique
installation
PHP
configuration
PHP
exemple
simple
imbrication
de
code
HTML
PHP
formulaire
HTML
réponse
en
PHP
variable
en
PHP
chaîne
en
PHP
typage
en
PHP
particularité
de
PHP
tableau
en
PHP
tableau
prédéfinir
de
PHP
L
’
inclusion
de
fichier
externe
objet
en
PHP
collection
en
PHP
connexion
base
de
donnée
depuis
PHP
requêter
préparer
en
PHP
complément
sur
PDO
-
sécurité
filtrage
en
PHP
gestion
transaction
avec
PDO
connexion
persistant
avec
PDO
validation
contrôle
d
’
entrée
avec
GUMP
Http
conservation
d
’
information
sur
client
manipuler
XML
avec
PHP
architecturer
de
type
MVC
avec
PHP
Templates
Twig
en
PHP
composer
,
Symfony
Flex
tester
application
PHP
-
TDD
mettre
en
place
Web
service
REST
exemple
de
service
REST
avec
PHP
tester
api
REST
avec
navigateur
avec
curl
tester
api
feuille
de
TD
Lic
pro
Web
mobile
feuille
de
TD
2ème
année
IUT
informatique
feuille
de
TD
Lic
pro
Web
mobile
feuille
de
TD
CVRH
Tours
Alice
démarrer
avec
git
:
Bob
travailler
avec
Alice
grâce
à
git
:
Alice
mettre
à
jour
:
Alice
travailler
sur
branche
git
:
Bob
branche
d
’
Alice
:
Alice
récupérer
dernier
version
master
:
GIT
référence
index
recherche
index
