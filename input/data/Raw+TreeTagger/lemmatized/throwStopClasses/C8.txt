informer
=
modéliser
=
UML
Objec-fs
de
séance
:
créer
d
’
site
Web
dynamique
PHP
PHP
•
PHP
être
langage
de
programmer
u
=
liser
pour
construc
=
de
site
Web
dynamique
–
page
PHP
:
page
Web
con
=
ennent
de
PHP
•
aller
mélanger
PHP
code
HTML
/
CSS
•
code
PHP
aller
être
analyser
par
serveur
•
résultat
aller
être
nouveau
page
Web
mettre
à
jour
automa
=
quement
par
code
PHP
dns-remplacer
<
html
>
...
code
PHP
être
à
<
?
php
l
’
intérieur
de
balise
date_default_-mezone_set
(
`
`
Europe
/
Paris
'
'
)
;
<
?
php
...
?
>
entourer
par
balise
echo
'
'
<
p
styler
=
'
font-style
:
italic
;
'
>
Paris
,
'
'
<
script
language
=
'
'
php
'
'
>
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
...
<
/
script
>
?
>
...
<
/
html
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
cycler
de
vie
d
’
page
PHP
)
client
envoyer
requête
serveur
)
page
PHP
être
analyser
par
serveur
,
code
PHP
être
interpréter
)
contenu
de
page
être
mettre
à
jour
automa-quement
envoyer
client
(
)
requête
fichier
sta
=
ques
hUp
:
/
/
serveur
/
dns-remplacer
HTML
/
CSS
(
)
envoyer
par
serveur
(
contenir
contenu
mettre
à
jour
HTML
calculer
)
interpréteur
PHP
page
PHP
(
)
interpréter
par
serveur
code
PHP
/
/
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
...
<
h@card@
>
bienvenir
sur
site
PHP
<
/
h@card@
>
<
p
styler
=
'
font-style
:
italic
;
'
>
Paris
,
/
/
<
/
p
>
hUp
:
/
/
serveur
/
dns-remplacer
<
p
>
être
:
:
.
<
/
p
>
...
contenu
HTML
/
CSS
dns-remplacé
calculer
...
<
h@card@
>
bienvenir
sur
site
PHP
<
/
h1
>
<
?
php
date_default_-mezone_set
(
`
`
Europe
/
Paris
'
'
)
;
interpréteur
PHP
echo
'
'
<
p
styler
=
'
font-style
:
italic
;
'
>
Paris
,
'
'
.
date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
page
PHP
originel
?
>
(
PHP
&
HTML
/
CSS
)
<
script
language
=
'
'
php
'
'
>
echo
'
'
<
p
>
être
'
'
.date
(
`
`
heure
:
i
:
s
'
'
)
.
`
`
.
<
/
p
>
'
'
;
<
/
script
>
...
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
exemple
coder
PHP
dns-remplacer
instruc
=
PHP
<
!
DOCTYPE
html
>
terminer
par
«
;
»
<
?
php
date_default_
=
mezone_set
(
`
`
Europe
/
Paris
'
'
)
;
Por
=
de
code
PHP
$
today
=
date
(
`
`
d-m
-Y
heure
:
i
:
s
'
'
)
;
<
?
php
...
.
?
>
$
variable
=
'
'
PHP5
'
'
;
?
>
<
html
>
<
head
>
...
<
/
head
>
séquence
/
*
...
*
/
<
body
>
délimiter
commentaire
,
<
h@card@
>
exemple
PHP
<
/
h1
>
visible
pour
l
’
auteur
,
<
p
>
contenir
staBque
:
changer
<
/
p
>
invisible
pour
client
<
?
php
/
*
contenu
aller
être
interpréter
par
serveur
*
/
Por
=
de
code
P
HP
echo
'
'
<
p
>
contenir
en
$
variable
<
/
p
>
'
'
;
echo
'
'
<
p
>
être
$
today
<
/
p
>
'
'
;
?
>
L
’
instruc
=
«
echo
»
permettre
<
/
body
>
<
/
html
>
d
’
écrire
dans
document
final
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
coder
fois
interpréter
par
serveur
...
<
!
DOCTYPE
html
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
h@card@
>
exemple
PHP
<
/
h@card@
>
<
p
>
contenu
sta
=
:
changer
<
/
p
>
<
p
>
contenir
en
PHP5
<
/
p
>
<
p
>
être
:
:
<
/
p
>
<
/
body
>
<
/
html
>
résultat
instruc-ons
«
echo
»
client
voir
...
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
no
de
variable
–
variable
être
conteneur
de
valeur
–
pouvoir
affecter
valeur
,
qu
’
aller
u
=
liser
$
variable
=
`
`
PHP5
'
'
;
«
$
»
indiquer
variable
«
=
»
être
affecter
asribut
valeur
à
nom
de
variable
variable
commencer
par
leere
«
_
»
,
sans
echo
'
'
...
$
variable
...
'
'
;
espace
récupérer
valeur
garder
dans
variable
par
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
nom
UFR06
Ges
=
PHP
•
no
de
variable
:
type
donnée
–
variable
pouvoir
garder
de
valeur
de
différent
type
•
nombre
en-ers
(
integer
)
:
•
nombre
décimal
(
double
float
)
:
•
chaîne
de
caractère
(
string
)
:
«
super
chaîne
!
»
•
logique
(
boolean
)
:
«
true
»
(
)
«
false
»
–
fonc
=
geeype
(
$
variable
)
permettre
de
savoir
e
type
de
valeur
con
=
ent
variable
•
$
en
=
er
=
;
gesype
(
$
en
=
er
)
è
integer
•
$
decimal
=
;
gesype
(
$
decimal
)
è
double
•
$
chaine
=
'
'
super
chaîne
!
`
`
;
gesype
(
$
chaine
)
è
string
•
$
bool
=
true
;
gesype
(
$
bool
)
è
boolean
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
exemple
:
<
?
php
défini
d
’
$
enGer
=
;
variable
$
decimal
=
;
$
chainer
=
'
'
super
chaîne
!
`
`
;
$
boolean
=
true
;
echo
'
'
<
li
>
'
'
.
geeype
(
$
en-er
)
.
`
`
:
$
en-er
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
geeype
(
$
decimal
)
.
`
`
:
$
decimal
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
geeype
(
$
chaine
)
.
`
`
:
$
chainer
<
/
li
>
'
'
;
echo
'
'
<
li
>
'
'
.
geeype
(
$
boolean
)
.
`
`
:
$
boolean
<
/
li
>
'
'
;
?
>
valeur
de
récupérer
geeype
(
)
variable
valeur
de
variable
informer
type
$
boolean
de
variable
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
opérateur
–
différent
opérateur
permesent
de
manipuler
valeur
,
qu
’
être
dans
variable
opérateur
opérateur
opérateur
de
opérateur
logique
mathéma-ques
string
comparaison
+
-
*
/
%
.
=
=
!
=
|
|
(
or
)
(
concaténaBon
)
<
=
<
>
=
>
&
&
(
AND
)
!
(
not
)
<
?
php
$
avoir
=
;
$
b
=
-
$
avoir
;
$
nom
=
'
'
toto
”
;
echo
'
'
salut
'
'
.
$
nom
;
echo
'
'
<
p
>
-
$
avoir
valoir
$
b
<
/
p
>
'
'
;
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
tableau
–
variable
capable
d
’
enregistrer
valeur
d
’
type
•
tableau
à
indice
:
Aeen
avoir
définir
–
posi
=
être
iden
=
fier
par
posi
=
ons
avant
de
un
numéro
(
commencer
par
)
u
=
liser
avoir
•
message
d
’
erreur
.
$
tableau
[
]
=
'
'
à
'
'
;
•
$
tableau
[
]
=
'
'
B
'
'
;
•
$
tableau
[
]
=
'
'
fin
'
'
;
•
à
B
fin
suite
$
tableau
[
]
=
'
'
suite
'
'
;
•
tableau
associa-fs
:
–
posi
=
recevoir
iden
=
fier
(
label
)
Jean
Dupont
•
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
•
Prenom
nom
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
message
d
’
erreur
<
head
>
...
contenir
de
posi
=
<
style
>
...
<
/
style
>
(
$
tableau
[
]
)
n
’
avoir
<
/
head
>
être
définir
.
<
body
>
...
<
h@card@
>
tableau
à
indice
<
/
h2
>
<
table
>
<
?
php
$
tableau
[
]
=
'
'
à
'
'
;
$
tableau
[
]
=
'
'
B
'
'
;
$
tableau
[
]
=
'
'
fin
'
'
;
contenir
de
$
tableau
[
]
=
'
'
suite
'
'
;
posi
=
(
$
tableau
[
]
)
echo
'
'
<
tr
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
td
>
`
`
.
$
tableau
[
]
.
'
'
<
/
td
>
<
/
tr
>
`
`
;
?
>
<
/
table
>
...
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
...
<
h@card@
>
tableau
associer
=
f
<
/
h@card@
>
<
table
>
<
tr
>
<
th
>
nom
<
/
th
>
<
th
>
prénom
<
/
th
>
<
/
tr
>
<
?
php
$
tableauAssoc
[
`
`
Prenom
'
'
]
=
'
'
Jean
'
'
;
$
tableauAssoc
[
`
`
nom
'
'
]
=
'
'
Dupont
'
'
;
echo
'
'
<
tr
>
<
td
>
'
'
.
$
tableauAssoc
[
`
`
nom
'
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
tableauAssoc
[
`
`
Prenom
'
'
]
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
?
>
<
/
table
>
<
/
body
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
informer
=
modéliser
=
UML
Objec-fs
de
séance
:
classe
&
objet
PHP
orienter
objet
•
PHP
être
langage
«
orienter
objet
»
–
manipuler
=
de
classe
d
’
objet
définir
=
de
classe
visibilité
:
<
?
php
class
personne
private
$
nom
{
private
$
nom
;
défini
=
d
’
asribut
public
func
setNom
(
$
nouvNom
)
opéra
=
:
{
$
this-
>
nom
=
$
nouvNom
;
}
public
func
...
accès
à
asribut
public
func
getNom
(
)
{
$
this-
>
aeribut
return
$
this-
>
nom
;
}
}
retourner
valeur
return
valeur
;
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
–
créer
=
d
’
objet
:
$
obj
=
new
classe
(
)
;
...
créer
=
d
’
objet
<
?
php
$
toto
=
new
personne
(
)
$
toto
=
new
personne
(
)
;
accès
opéra
=
ons
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
publique
echo
'
'
<
p
>
...
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
$
toto
-
>
getNom
(
)
$
toto-
>
nom
=
'
'
blablabla
'
'
;
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
?
>
impossible
d
’
accéder
asributs
priver
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
<
html
>
<
head
>
...
<
?
php
{
private
$
nom
;
.
.
.
}
/
/
fin
classe
personne
?
>
<
/
head
>
<
body
>
...
<
?
php
$
toto
=
new
personne
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
echo
'
'
<
p
>
objet
<
i
>
personne
<
/
i
>
:
`
`
.
$
toto-
>
getNom
(
)
.
`
`
<
/
p
>
'
'
;
.
.
.
echo
'
'
<
p
>
'
'
.
$
toto-
>
nom
.
'
'
<
/
p
>
'
'
;
erreur
l
’
asribut
?
>
«
nom
»
être
priver
!
!
<
/
body
>
<
/
htlml
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
:
–
héritage
:
SousClasse
extends
superclasse
class
Employe
extends
{
private
$
salaire
=
;
classe
Employe
hériter
de
classe
public
func
augmentaGon
(
$
perc
)
{
class
Employe
extends
personne
if
(
$
perc
>
)
{
$
this-
>
salaire
=
$
this-
>
salaire
$
this-
>
salaire
*
$
perc
;
rajouter
nouveau
asribut
}
private
$
salaire
}
nouveau
être
opéra
=
ons
public
func
getSalaire
(
)
public
func
augmentaGon
{
return
$
this-
>
salaire
;
}
public
func
getSalaire
}
fichier
dns-remplacer
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
importer
défini
=
classe
<
?
php
Employe
include
'
'
dns-remplacer
'
'
;
toto
être
employé
,
être
$
toto
=
new
Employe
(
)
;
personne
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
toto
posséder
salaire
(
Employe
)
,
$
toto-
>
augmenter
(
)
;
nom
(
personne
)
echo
'
'
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
;
echo
'
'
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
`
`
€
<
/
p
>
'
'
;
?
>
classe
Employe
hériter
aeributs
opéra-ons
de
personne
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
<
html
>
<
head
>
.
.
.
<
/
head
>
<
body
>
<
h@card@
>
objet
en
PHP
<
/
h1
>
<
?
php
include
'
'
dns-remplacer
'
'
;
$
toto
=
new
Employe
(
)
;
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
$
toto-
>
augmenter
=
(
)
;
echo
'
'
<
p
>
objet
Employe
:
<
/
p
>
<
ul
>
'
'
;
echo
'
'
<
li
>
<
i
>
nom
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
<
i
>
salaire
<
/
i
>
:
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
<
/
li
>
'
'
;
echo
'
'
<
/
ul
>
'
'
;
?
>
<
/
body
>
<
/
html
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
–
méthode
constructeur
:
__construct
–
redéfinir
d
’
opéra
=
manager
extends
Employe
{
private
$
bonus
;
func
__construct
(
$
bon
)
constructeur
être
appeler
{
$
this-
>
bonus
=
$
bon
;
}
fois
qu
’
objet
être
créer
(
new
)
public
func
getSalaire
(
)
{
return
parent
:
:
getSalaire
(
)
$
this-
>
bonus
;
}
public
func
=
setBonus
(
$
nouvBon
)
{
...
}
redéfinir
=
de
l
’
opérer
=
getSalaire
public
func
=
getBonus
(
)
{
...
}
parent
:
:
getSalaire
correspondre
à
}
l
’
opérer
=
getSalaire
définir
par
super-classe
(
Employe
)
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
orienter
objet
•
classer
&
objet
appel
constructeur
:
<
?
php
funcBon
__construct
(
$
bon
)
require
'
'
dns-remplacer
'
'
;
{
$
this-
>
bonus
=
$
bon
;
}
$
toto
=
new
manager
(
)
;
appel
à
l
’
opérer
=
getSalaire
$
toto-
>
setNom
(
`
`
toto
'
'
)
;
de
classe
manager
$
toto-
>
augmenter
=
(
)
;
echo
'
'
<
p
>
<
i
>
manager
<
/
i
>
:
'
'
.
$
toto-
>
getNom
(
)
.
`
`
,
salaire
'
'
.
$
toto-
>
getSalaire
(
)
.
'
'
€
'
'
.
`
`
,
bonus
'
'
.
$
toto-
>
getBonus
(
)
.
`
`
<
/
p
>
'
'
;
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
informer
=
modéliser
=
UML
Objec-fs
de
séance
:
formulaire
HTML
&
PHP
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
être
langage
pour
Web
•
Communica
entre
client
(
navigateur
)
serveur
(
php
)
–
formulaire
en
HTML
permesent
de
recueil
ir
donnée
de
l
’
u
=
lisateur
•
donnée
être
communiquer
à
programme
–
navigateur
envoyer
donnée
récolter
par
formulaire
serveur
•
programme
(
page
PHP
)
récupérer
donné
grâce
à
variable
page
PHP
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
formulaire
HTML
•
formulaire
HTML
être
définir
par
balise
<
form
...
>
...
<
/
form
>
–
élément
être
à
l
’
intérieur
de
balise
<
form
name
=
'
'
nomFormulaire
'
'
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
get
|
post
'
'
>
...
.
<
/
form
>
ac
:
à
envoyer
donnée
method
:
envoyer
donnée
–
champ
formulaire
être
introduire
par
différent
balise
:
•
<
input
type
=
'
'
...
'
'
name
=
'
'
...
'
'
value
=
'
'
...
'
'
id
=
'
'
...
'
'
/
>
•
<
textarea
name
=
'
'
...
'
'
id
=
'
'
...
'
'
col
=
'
'
...
'
'
rows
=
'
'
...
'
'
>
...
<
/
textarea
>
•
<
select
name
=
'
'
...
'
'
id
=
'
'
...
'
'
size
=
'
'
...
'
'
>
<
op
valoir
=
'
'
...
'
'
>
...
<
/
op
>
<
/
select
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
formulaire
HTML
<
input
type
=
'
'
text
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
select
name
=
'
'
produit
'
'
>
<
op
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
op
>
...
<
/
select
>
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
opinion
sur
produit
<
input
type
=
'
'
reset
'
'
value
=
'
'
Neeoyer
'
'
/
>
<
/
textarea
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
input
type
=
'
'
submit
'
'
charger
d
’
envoyer
donnée
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
formulaire
UFR06
Ges
=
formulaire
HTML
<
form
name
=
'
'
formClient
'
'
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
à
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
donnée
être
valoir
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
envoyer
<
label
>
produire
<
/
label
>
input
type
=
'
'
text
'
'
<
select
name
=
'
'
produit
'
'
>
zone
de
saisie
<
op
valoir
=
'
'
SuperKdo
'
'
>
super
Kdo
<
/
op
>
<
op
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
op
>
select
...
op
<
op
valoir
=
'
'
BabyFun
'
'
>
baby
Fun
<
/
op
>
liste
de
sélec
=
<
/
select
>
<
br
/
>
d
’
op
=
ons
<
label
>
opinion
<
/
label
>
textarea
<
textarea
name
=
'
'
opinionClient
'
'
col
=
'
'
'
'
rows
=
'
'
'
'
>
opinion
sur
produit
<
/
textarea
>
zone
de
texte
<
br
/
>
input
type
=
'
'
submit
'
'
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
=
'
'
bouton
'
'
/
>
input
type
=
'
'
reset
'
'
<
input
type
=
'
'
reset
'
'
value
=
'
'
Neeoyer
'
'
=
'
'
bouton
'
'
/
>
bouter
d
’
envoi
de
<
/
form
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
reset
formulaire
UFR06
Ges
=
formulaire
HTML
&
PHP
•
donnée
recueil
ies
dans
formulaire
être
transmettre
programme
indiquer
dans
ac
=
...
•
dans
PHP
,
récupérer
donné
grâce
à
deux
tableau
associa-fs
spécial
–
$
_GET
è
<
form
acBon
=
'
'
...
'
'
method
=
'
'
get
'
'
>
•
$
_GET
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
–
$
_POST
è
<
form
acBon
=
'
'
...
'
'
method
=
'
'
post
'
'
>
•
$
_POST
[
`
`
nom
'
'
]
<
input
...
name
=
'
'
nom
'
'
/
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
formulaire
HTML
&
PHP
<
form
name
=
'
'
formClient
'
'
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
for
=
'
'
nom
'
'
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
id
=
'
'
nom
'
'
name
=
'
'
nomClient
'
'
value
=
'
'
nom
'
'
size
=
'
'
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
...
<
?
php
$
nom
=
$
_POST
[
`
`
nomClient
'
'
]
;
$
op
=
$
_POST
[
`
`
opinionClient
'
'
]
;
$
prod
=
$
_POST
[
`
`
produit
'
'
]
;
echo
'
'
<
p
>
merci
de
parBcipaBon
,
$
nom
!
<
/
p
>
'
'
;
echo
'
'
<
p
>
produit
être
:
<
i
>
$
prod
<
/
i
>
<
/
p
>
'
'
;
echo
'
'
<
p
>
opinion
être
:
<
i
>
$
op
<
/
i
>
<
/
p
>
'
'
;
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
formulaire
HTML
&
PHP
•
méthode
GET
–
donnée
être
envoyer
dans
l
’
URL
programme
–
limiter
à
octet
<
form
name
=
'
'
formGet
'
'
–
déconseiller
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
GET
'
'
>
<
label
>
nom
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
size
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
<
?
php
echo
'
'
<
p
>
bienvenu
,
<
i
>
'
'
.
$
_GET
[
`
`
client
'
'
]
.
`
`
<
/
i
>
!
<
/
p
>
'
'
;
Man
?
>
uele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
formulaire
HTML
&
PHP
<
form
name
=
'
'
...
'
'
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
fieldset
>
•
exemple
<
legend
>
donnée
<
/
legend
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
...
/
>
<
br
/
>
<
label
>
...
<
/
label
>
<
input
type
=
'
'
email
'
'
name
=
'
'
email
'
'
...
/
>
<
br
/
>
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
Homme
'
'
/
>
Homme
<
input
type
=
'
'
radio
'
'
name
=
'
'
sexe
'
'
value
=
'
'
femme
'
'
/
>
femme
<
br
/
>
<
/
fieldset
>
<
fieldset
>
<
legend
>
produit
<
/
legend
>
<
label
>
...
<
/
label
>
<
select
name
=
'
'
produit
'
'
>
<
op
valoir
=
'
'
SuperKdo
'
'
>
...
<
/
op
>
<
op
valoir
=
'
'
MegaTruc
'
'
>
Mega
truc
<
/
op
>
<
op
valoir
=
'
'
BabyFun
'
'
>
...
<
/
op
>
<
/
select
>
<
br
/
>
<
label
>
...
<
/
label
>
<
textarea
name
=
'
'
opinion
'
'
...
>
...
<
/
textarea
>
Manuele
kirsch
P
<
/
inhe
fieliro
d
-
UP
set
>
/
cri
/
UFR06
Ges
=
formulaire
HTML
&
PHP
<
body
>
•
exemple
<
h@card@
>
récapituler
=
f
<
/
h@card@
>
<
ul
>
<
?
php
echo
'
'
<
li
>
nom
:
'
'
.
$
_POST
[
`
`
nom
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
Email
:
'
'
.
$
_POST
[
`
`
email
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
sexe
:
'
'
.
$
_POST
[
`
`
sexe
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
produire
préférer
:
'
'
.
$
_POST
[
`
`
produit
'
'
]
.
`
`
<
/
li
>
'
'
;
echo
'
'
<
li
>
Sugges
:
'
'
.
$
_POST
[
`
`
opinion
'
'
]
.
`
`
<
/
li
>
'
'
;
?
>
<
/
ul
>
<
/
body
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
informer
=
modéliser
=
UML
Objec-fs
de
séance
:
Instruc-ons
de
contrôle
en
PHP
Fonc-ons
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
contrôle
–
Instruc
=
ons
pour
gérer
flot
d
’
exécu
=
–
Instruc-ons
condi-onnelles
•
El
être
condi
=
onnent
l
’
exécu
=
•
semblable
à
nœud
de
décision
(
diagramme
ac
=
vités
)
•
if
...
else
...
,
switch
...
case
...
–
Instruc-ons
de
boucle
•
El
être
permesent
répé
--
d
’
bloc
d
’
instruc
=
ons
•
for
...
,
foreach
...
,
while
...
,
do
...
while
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
condi-onnelles
if
...
else
...
if
(
condiGon
)
[
condi
=
vrai
]
{
bloc
d
’
instrucGons
vrai
;
}
bloc
else
d
’
instruc-ons
opGonnel
vrai
{
bloc
d
’
instrucGons
faux
;
}
[
]
bloc
if
(
$
qte
>
=
)
d
’
instruc-ons
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
faux
echo
'
'
<
p
>
avoir
remise
de
%
!
<
/
p
>
'
'
;
}
else
{
...
$
remise
=
;
echo
'
'
<
p
>
avoir
remise
de
%
<
/
p
>
'
'
;
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
}
UFR06
Ges
=
PHP
•
Instruc-ons
condi-onnelles
if
...
else
...
–
donnée
pour
condi
=
pouvoir
venir
d
’
formulaire
dns-remplacer
<
?
php
dns-remplacer
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
ac
=
'
'
dns-remplacer
'
'
>
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
...
$
remise
=
;
<
select
name
=
'
'
prix
'
'
>
<
op
valoir
=
'
'
'
'
>
if
(
$
qte
>
=
)
super
Kdo
-
€
<
/
op
>
{
$
remise
=
;
/
*
remettre
de
%
offrir
*
/
...
echo
'
'
<
p
>
avoir
remise
de
%
!
<
/
p
>
'
'
;
<
/
select
>
}
...
<
input
type
=
'
'
number
'
'
size
=
'
'
'
'
$
prix
=
$
prixunit
*
$
qte
name
=
'
'
qte
'
'
/
>
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
...
echo
'
'
<
p
>
pour
prix
de
<
i
>
$
prixunit
<
/
i
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
unité
<
i
>
$
qte
<
/
i
>
unité
,
avoir
à
<
/
form
>
régler
<
i
>
$
prix
<
/
i
>
<
/
p
>
'
'
;
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
ac
=
'
'
dns-remplacer
'
'
>
<
label
>
produire
:
<
/
label
>
<
?
php
<
select
name
=
'
'
prix
'
'
>
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
<
op
valoir
=
'
'
'
'
>
super
...
<
/
op
>
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
...
<
/
select
>
<
br
/
>
$
remise
=
;
<
label
>
Quan
=
té
:
<
/
label
>
...
.
<
input
name
=
'
'
qte
'
'
type
=
'
'
number
'
'
if
(
$
qte
>
=
)
size
=
'
'
'
'
/
>
<
br
/
>
{
$
remise
=
;
echo
'
'
<
p
>
avoir
...
.
<
/
p
>
'
'
;
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
}
<
/
form
>
...
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
condi-onnelles
if
...
else
...
–
bloc
if
...
else
...
pouvoir
contenir
n
’
importer
e
instruc
=
,
comprendre
d
’
autre
bloc
if
...
else
...
if
(
condiGon1
)
{
bloc
d
’
instrucGons
condiGon1
vrai
;
}
elseif
(
condi-on2
)
{
bloc
d
’
instrucGons
condiGon2
vrai
;
}
else
{
bloc
d
’
instrucGons
condiGons
être
faux
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
<
?
php
$
qte
=
$
_POST
[
`
`
qte
'
'
]
;
$
prixunit
=
$
_POST
[
`
`
prix
'
'
]
;
if
(
$
qte
>
=
)
{
$
remise
=
;
}
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
elseif
(
$
qte
>
=
)
ac
=
'
'
dns-remplacer
'
'
>
{
$
remise
=
;
}
...
<
select
name
=
'
'
prix
'
'
>
...
<
/
select
>
else
...
{
$
remise
=
;
}
<
input
type
=
'
'
number
'
'
...
name
=
'
'
qte
'
'
/
>
...
$
prix
=
$
prixunit
*
$
qte
<
input
type
=
'
'
submit
'
'
value
=
'
'
devis
'
'
/
>
-
(
$
prixunit
*
$
qte
*
$
remise
)
;
<
/
form
>
echo
'
'
<
p
>
prix
unitaire
:
<
i
>
$
prixunit
<
/
i
>
,
QuanBté
:
<
i
>
$
qte
<
/
i
>
,
remettre
:
<
i
>
'
'
.
$
remise
*
.
`
`
<
/
i
>
%
<
/
p
>
'
'
;
echo
`
`
<
p
>
<
i
>
total
à
régler
:
<
/
i
>
<
b
>
$
prix
<
/
b
>
<
/
p
>
'
'
;
Manuele
kirsch
?
pi
>
n
heiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
for
–
boucle
for
permettre
de
répéter
(
nombre
de
fois
)
l
’
exécu
=
d
’
bloc
d
’
instruc
=
ons
for
(
iniGalisaGon
;
condiGon
;
incrémentaGon
)
{
bloc
d
’
instrucGons
à
répéter
;
}
[
i
<
=
]
$
i
=
echo
...
i++
[
else
]
suite
...
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i++
è
$
i
=
$
i
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
for
<
?
php
for
(
$
i
=
;
$
i
<
=
;
$
i++
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
while
–
boucle
while
permettre
de
con
=
nuer
à
réaliser
bloc
d
’
opérer
=
ons
qu
’
condi
être
vrai
[
i
<
=
]
$
i
=
echo
...
$
i
=
$
i
;
[
else
]
suite
...
$
i
=
;
while
(
$
i
<
=
)
{
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
while
donner
valeur
ini-ale
à
variable
$
i
<
?
php
$
i
=
;
$
i
dépasser
while
(
$
i
<
=
)
{
valeur
echo
'
'
<
heure
$
i
>
titre
niveau
$
i
<
/
heure
$
i
>
'
'
;
$
i
=
$
i
;
}
?
>
mettre
à
jour
valeur
de
variable
$
i
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
foreach
–
boucle
foreach
permettre
de
répéter
bloc
d
’
instruc
=
ons
pour
valeur
dans
tableau
[
reste-t-il
$
-tre
recevoir
$
tableau
valeur
?
]
prochain
valeur
echo
...
[
de
valeur
dans
tableau
]
suite
...
foreach
(
$
tableau
avoir
$
-tre
)
{
echo
'
'
<
$
-tre
>
titre
$
-tre
<
/
$
-tre
>
'
'
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
foreach
<
?
php
définir
tableau
$
tableau
=
array
(
`
`
h1
'
'
,
'
'
h2
'
'
,
'
'
h3
'
'
,
'
'
h4
'
'
,
'
'
h5
'
'
,
'
'
h6
'
'
)
;
foreach
(
$
tableau
avoir
$
-tre
)
{
echo
'
'
<
$
-tre
>
titre
$
-tre
pour
valeur
<
/
$
-tre
>
'
'
;
dans
tableau
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
foreach
–
fonc
=
onne
pour
tableau
associer
=
fs
définir
tableau
associer
=
f
:
clé
=
>
valeur
<
?
php
$
tableau
=
array
(
`
`
nom
'
'
=
>
'
'
Dupont
'
'
,
'
'
prenom
'
'
=
>
'
'
Jean
'
'
,
'
'
adresse
'
'
=
>
'
'
qq
part
à
Paris
'
'
)
;
pour
pair
foreach
(
$
tableau
avoir
$
cle
=
>
$
valeur
)
{
$
clé
=
>
$
valeur
echo
'
'
<
li
>
$
cle
:
$
valeur
<
/
li
>
'
'
;
dans
$
tableau
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Instruc-ons
de
boucle
:
boucle
imbriqué
–
être
possible
d
’
imbriquer
boucle
un
dans
autre
<
table
>
<
?
php
for
(
$
lin
=
;
$
lin
<
=
;
$
lin++
)
{
echo
'
'
<
tr
>
”
;
for
(
$
col
=
;
$
col
<
=
;
$
col++
)
{
echo
'
'
<
td
>
'
'
.
(
$
col
*
$
lin
)
.
'
'
<
/
td
>
'
'
;
}
echo
'
'
<
/
tr
>
'
'
;
}
?
>
<
/
table
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
Fonc-ons
–
PHP
offrir
large
panoplie
de
fonc
=
ons
•
exemple
:
isset
(
$
var
)
à
TRUE
$
var
être
connaître
•
exemple
:
empty
(
$
var
)
à
TRUE
$
var
être
vide
(
valoir
)
–
pouvoir
écrire
(
en
dehors
classe
)
•
func
nomFonc
(
$
paramètre
,
...
)
{
instruc-ons
}
func
saluta
(
$
nom
)
{
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
echo
'
'
<
p
=
droit|droite
>
,
être|sommer
'
'
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
<
?
php
PHP
...
func
saluta
(
$
nom
)
{
<
form
name
=
'
'
...
'
'
method
=
'
'
POST
'
'
date_default_-mezone_set
(
`
`
Europe
/
Paris
'
'
)
;
ac
=
'
'
dns-remplacer
'
'
>
<
label
>
nom
:
<
/
label
>
echo
'
'
<
h@card@
>
bienvenu
,
$
nom
!
<
/
h1
>
'
'
;
<
input
type
=
'
'
text
'
'
name
=
'
'
client
'
'
echo
'
'
<
p
=
droit|droite
>
...
'
'
size
=
'
'
'
'
/
>
.
date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
...
}
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
if
(
isset
(
$
_POST
[
`
`
client
'
'
]
)
AND
!
empty
(
$
_POST
[
`
`
client
'
'
]
)
)
{
saluta
(
$
_POST
[
`
`
client
'
'
]
)
;
}
else
{
saluta
(
`
`
cher
client
'
'
)
;
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
importer
fichier
•
incorporer
contenu
d
’
fichier
dans
page
PHP
•
but
:
réu
=
liser
=
fichier
,
uniformiser
=
site
–
include
'
'
fichier
'
'
include_once
'
'
fichier
'
'
•
include
remplacer
ligne
par
contenu
fichier
•
include_once
faire
seul
fois
(
dans
boucle
)
–
require
'
'
fichier
'
'
require_once
'
'
fichier
'
'
•
include
,
fichier
n
’
exister
,
avoir
erreur
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
<
meta
charset
=
'
'
UTF-8
'
'
/
>
<
head
>
<
?
php
...
include_once
'
'
dns-remplacer
'
'
;
<
=
tle
>
site
<
/
=
tle
>
require
'
'
dns-remplacer
'
'
;
?
>
<
link
rel
=
'
'
stylesheet
'
'
<
/
head
>
<
body
>
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
?
php
include_once
'
'
dns-remplacer
'
'
;
?
>
...
<
header
>
<
h@card@
>
site
<
/
h1
>
<
?
php
<
/
header
>
<
nav
>
saluta
(
`
`
cher
client
'
'
)
;
<
h@card@
>
exemple
<
/
h2
>
?
>
<
ul
>
<
ar
=
cle
>
<
?
php
<
li
>
...
<
/
li
>
<
h@card@
>
News
<
/
h@card@
>
func
saluta
(
$
nom
)
{
...
<
p
>
...
<
/
p
>
echo
'
'
<
p
=
droit|droite
>
<
b
>
bienvenu
,
<
/
ul
>
<
/
ar
=
cle
>
$
nom
!
<
/
b
>
<
/
p
>
'
'
;
<
/
nav
>
...
echo
'
'
<
p
=
droit|droite
>
,
être|sommer
'
'
.date
(
'
d
/
m
/
'
)
.
`
`
<
/
p
>
'
'
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
?
>
UFR06
Ges
=
PHP
include_once
'
'
dns-remplacer
'
'
<
head
>
...
<
-tle
>
site
<
/
-tle
>
<
link
rel
=
'
'
stylesheet
'
'
href
=
'
'
css
/
dns-remplacer
'
'
/
>
<
/
head
>
<
body
>
<
header
>
<
h@card@
>
site
<
/
h1
>
<
/
header
>
<
nav
>
<
h@card@
>
exemple
<
/
h@card@
>
include_once
'
'
dns-remplacer
'
'
;
<
ul
>
<
li
>
...
<
/
li
>
...
<
/
ul
>
require
'
'
dns-remplacer
'
'
;
<
/
nav
>
saluta
(
`
`
cher
client
'
'
)
;
<
sec
=
>
<
p
=
droit|droite
>
<
b
>
bienvenir
,
client
!
<
/
b
>
<
/
p
>
<
p
=
droit|droite
>
,
être|sommer
/
/
<
/
p
>
...
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
informer
=
modéliser
=
UML
Objec-fs
de
séance
:
PHP
&
base
de
donnée
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
accès
base
de
donnée
à
par-r
de
PHP
–
PHP-MySQL
être
u
=
liser
pour
site
Web
–
différent
«
bibliothèque
»
disponible
•
mysqli
PDO
•
Etape
pour
l
’
u-liser
base
donnée
)
connexion
serveur
MySQL
)
envoi
requête
SQL
(
select
,
insert
into
...
)
)
récupérer
=
résultat
)
fermeture
de
connexion
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
connexion
à
serveur
MySQL
à
travers
mysqli
–
communica
=
avec
BdD
passer
par
objet
de
classe
«
mysqli
»
–
connexion
s
’
effectuer
à
créer
de
objet
(
new
)
$
idcon
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
obj
nom
serveur
base
de
donnée
idenBfier
de
connexion
mot
de
passe
uBlisateur
autoriser
à
accéder
à
base
•
connexion
ouvert
devoir
être
fermer
$
bool
=
$
idcon-
>
clore
(
)
;
demander
à
l
’
objet
mysqli
de
fermer
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
connexion
UFR06
Ges
=
PHP
<
?
php
$
host
=
'
'
localhost
'
'
;
$
user
=
'
'
root
'
'
;
astuce
:
placer
informer
=
ons
dans
fichier
$
mdp
=
'
'
root
'
'
;
faire
require
(
include
)
'
'
fichier
'
'
$
bdd
=
'
'
clientsBD
'
'
;
créer
=
de
l
’
objet
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
connexion
if
(
$
mysqli-
>
connect_errno
)
{
L
’
asribut
connect_errno
die
(
`
`
<
p
>
impossible
de
connecter
à
$
bdd
:
'
'
de
indique
connexion
.
$
mysqli-
>
connect_error
.
'
'
<
/
p
>
'
'
)
;
avoir
être
établir
}
else
{
en
cas
de
problème
,
echo
'
'
<
p
>
connecter
serveur
$
host
,
arrêter
avec
à
base
$
bdd
<
/
p
>
'
'
;
fonc
=
die
.
$
mysqli-
>
clore
(
)
;
}
fermeture
de
connexion
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
envoyer
de
requête
à
base
de
donnée
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
résultat
de
requête
exécuBon
de
requête
requêter
SQL
à
sur
l
’
objet
connexion
exécuter
–
requêter
SQL
:
•
S
’
s
’
agir
d
’
select
,
résultat
correspondre
donnée
fournir
par
requête
(
objet
mysqli_result
)
•
(
insert
,
UPDATE
,
DELETE
...
)
,
résultat
être
TRUE
requête
être
exécuter
,
FALSE
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
<
form
name
=
'
'
formNouveauClient
'
'
PHP
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
.
.
.
<
input
type
=
'
'
text
'
'
name
=
'
'
nom
'
'
.
.
.
/
>
.
.
.
<
input
type
=
'
'
text
'
'
name
=
'
'
email
'
'
.
.
.
/
>
.
.
.
<
input
type
=
'
'
submit
'
'
value
=
'
'
envoyer
'
'
/
>
<
/
form
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
dns-remplacé
<
?
php
if
(
!
empty
(
$
_POST
[
`
`
nom
'
'
]
)
AND
!
empty
(
$
_POST
[
P
'
'
e
HP
mail
'
'
]
)
)
{
require
'
'
dns-remplacer
'
'
;
$
mysqli
=
connexion
(
)
;
dns-remplacer
<
?
php
$
nom
=
$
_POST
[
`
`
nom
'
'
]
;
func
connexion
(
)
{
$
email
=
$
_POST
[
`
`
email
'
'
]
;
$
host
=
'
'
localhost
'
'
;
$
adr
=
$
_POST
[
`
`
adresse
'
'
]
;
$
user
=
'
'
uml
'
'
;
$
id
=
'
\N
'
;
/
*
auto-increment
*
/
$
mdp
=
'
'
uml
'
'
;
$
bdd
=
'
'
clientsBD
'
'
;
$
sql
=
'
'
insert
INTO
client
(
id
,
nom
,
email
,
adresse
)
valoir
(
'
$
id
'
,
'
$
nom
'
,
'
$
email
'
,
'
$
adr
'
)
'
'
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
if
(
$
mysqli-
>
connect_errno
)
{
if
(
!
$
result
)
{
echo
'
'
<
p
>
désoler
,
...
<
/
p
>
'
'
;
}
die
(
`
`
<
p
>
impossible
...
'
'
else
{
.
$
mysqli-
>
connect_error
.
`
`
<
/
p
>
'
'
)
;
echo
'
'
<
p
>
être
client
numéro
<
i
>
'
'
}
.
$
mysqli-
>
insert_id
.
`
`
<
/
i
>
<
/
p
>
'
'
;
return
$
mysqli
;
}
}
?
>
$
mysqli-
>
clore
(
)
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
...
?
>
UFR06
Ges
=
PHP
•
récupérer
donnée
$
result
=
$
mysqli-
>
query
(
`
`
select
*
FROM
table
'
'
)
;
–
requête
select
fournir
donnée
–
récupérer
résultat
(
ligne
à
ligne
)
à
l
’
aide
opéra
=
ons
fetch_
*
–
appel
à
fetch_
*
retourner
prochain
ligne
•
ligner
dans
tableau
à
indice
:
$
result-
>
fetch_row
(
)
;
•
ligner
dans
tableau
associer
=
f
:
$
result-
>
fetch_assoc
(
)
;
•
ligner
dans
objet
:
$
result-
>
fetch_object
(
)
;
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
dns-remplacé
<
?
php
dns-remplacer
PHP
<
?
php
func
connexion
(
)
{
require
'
'
dns-remplacer
'
'
;
.
.
.
$
mysqli
=
connexion
(
)
;
$
mysqli
=
new
mysqli
(
$
host
,
$
user
,
$
mdp
,
$
bdd
)
;
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
.
.
.
return
$
mysqli
;
FROM
client
ORDER
by
nom
'
'
;
}
?
>
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
exécuter
requête
avec
if
(
!
$
result
)
{
echo
'
'
<
p
>
Desolée
...
<
/
p
>
'
'
;
}
l
’
opérer
=
$
mysqli-
>
query
else
{
.
.
.
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
L
’
opéra
=
$
result-
>
fetch_object
.
.
.
récupérer
prochain
ligne
,
echo
'
'
<
td
>
'
'
.
$
ligne-
>
id
.
`
`
<
/
td
>
'
'
;
faux
s
’
n
’
rester
de
ligne
.
echo
'
'
<
td
>
'
'
.
$
ligne-
>
nom
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne-
>
email
.
`
`
<
/
td
>
'
'
;
aeribut
de
requête
echo
'
'
<
td
>
'
'
.
$
ligne-
>
adresse
.
`
`
<
/
td
>
'
'
;
devenir
aeribut
de
l
’
objet
.
.
.
$
ligne
}
.
.
.
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
même
requête
récupérer
informa-ons
•
...
par
tableau
à
indice
•
...
par
tableau
associer
=
f
.
.
.
.
.
.
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
$
sql
=
'
'
select
id
,
nom
,
email
,
adresse
FROM
client
ORDER
by
nom
'
'
;
FROM
client
ORDER
by
nom
'
'
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
.
.
.
.
.
.
while
(
$
ligne
=
$
result-
>
fetch_row
(
)
)
{
while
(
$
ligne
=
$
result-
>
fetch_assoc
(
)
)
{
.
.
.
.
.
.
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
id
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
nom
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
email
'
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
]
.
`
`
<
/
td
>
'
'
;
echo
'
'
<
td
>
'
'
.
$
ligne
[
'
adresse
'
]
.
`
`
<
td
>
'
'
;
.
.
.
.
.
.
}
.
.
.
}
.
.
.
commencer
par
asribut
être
accessible
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
par
nom
UFR06
Ges
=
PHP
•
autre
informer
=
ons
pouvoir
être
récupérer
d
’
objet
mysqli_result
(
$
result
=
$
mysqli-
>
query
(
...
)
)
–
de
ligne
colonne
pouvoir
récupérer
•
$
nbligne
=
$
result-
>
num_rows
;
•
$
nbcol
=
$
result-
>
field_count
;
–
nom
colonne
(
aeributs
)
dans
résultat
•
$
colonne
=
$
result-
>
fetch_fields
(
)
;
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
.
.
.
avoir
par
=
r
de
l
’
objet
$
result
,
pouvoir
$
sql
=
'
'
select
id
,
nom
,
email
,
adresser
récupérer
nombre
de
ligne
FROM
client
ORDER
by
nom
'
'
;
(
asribut
num_rows
)
de
colonne
$
result
=
$
mysqli-
>
query
(
$
sql
)
;
par
ligne
(
asribut
field_count
)
.
.
.
.
echo
'
'
<
p
>
avoir
'
'
.
$
result-
>
num_rows
.
`
`
client
.
<
/
p
>
'
'
;
echo
'
'
<
p
>
avoir
'
'
.
$
result-
>
field_count
.
'
'
asributs
par
client
.
<
/
p
>
'
'
;
.
.
.
.
.
.
pouvoir
récupérer
$
-tres
=
$
result-
>
fetch_fields
(
)
;
colonne
.
colonne
être
foreach
(
$
-tres
avoir
$
colonne
)
{
objet
l
’
asribut
name
donner
echo
'
'
<
th
>
'
'
.
$
colonne-
>
name
.
'
'
<
/
th
>
'
'
;
nom
.
}
while
(
$
ligne
=
$
result-
>
fetch_object
(
)
)
{
ligne
être
objet
echo
'
'
<
tr
>
'
'
;
aeributs
correspondre
foreach
(
$
ligne
avoir
$
colonne
=
>
$
val
)
{
colonne
.
pouvoir
u
=
liser
echo
'
'
<
td
>
'
'
.
$
val
.
`
`
<
/
td
>
'
'
;
foreach
pour
accéder
à
valeur
}
echo
'
'
<
/
tr
>
'
'
;
aeributs
.
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR0
}
.
.
.
Ges
=
informer
=
modéliser
=
UML
Objec-fs
de
séance
:
mécanisme
de
session
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
mécanisme
de
session
–
visite
à
site
/
page
être
indépendant
–
session
permesent
de
conserver
informer
=
ons
visiteur
entre
page
–
informer
=
ons
sur
session
être
stocker
sur
serveur
•
Fonc
=
onnement
général
)
ouverture
de
session
:
session_start
(
)
•
u
=
lisateur
recevoir
iden
=
fier
transmettre
entre
page
)
défini
=
variable
de
session
(
donner
)
•
variable
de
session
être
transmettre
de
page
à
page
•
$
_SESSION
[
`
`
variable
'
'
]
=
valeur
;
)
fermeture
de
session
:
session_destroy
(
)
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
Login
&
mdp
différent
de
uml
Login
&
mdp
correct
(
uml
/
uml
)
<
form
name
=
'
'
...
'
'
ac
=
'
'
dns-remplacer
'
'
method
=
'
'
POST
'
'
>
<
label
>
Login
:
<
/
label
>
<
input
type
=
'
'
text
'
'
name
=
'
'
login
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
label
>
mot
de
passe
:
<
/
label
>
<
input
type
=
'
'
password
'
'
name
=
'
'
mdp
'
'
maxlength
=
'
'
'
'
/
>
<
br
/
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
OK
'
'
/
>
<
/
form
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
<
?
php
session_start
(
)
;
?
>
ouverture
d
’
session
<
html
>
(
début
de
page
)
<
head
>
...
<
/
head
>
<
body
>
<
?
php
.
.
.
$
login
=
$
_POST
[
`
`
login
'
'
]
;
défini
=
variable
de
session
$
mdp
=
$
_POST
[
`
`
mdp
'
'
]
;
$
_SESSION
[
`
`
var
'
'
]
if
(
$
login
=
=
'
'
uml
'
'
AND
$
mdp
=
=
'
'
uml
'
'
)
{
$
_SESSION
[
`
`
login
'
'
]
=
$
login
;
...
echo
'
'
<
h@card@
>
bienvenu
,
$
login
<
/
h1
>
'
'
;
variable
de
}
session
con
=
ennent
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
informer
=
ons
echo
'
'
<
p
>
page
accessible
membre
.
<
/
p
>
'
'
;
passer
de
page
en
}
page
.
?
>
<
/
body
>
<
/
html
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
$
login
=
$
_SESSION
[
`
`
login
'
'
]
;
...
usage
variable
de
session
echo
'
'
<
p
>
client
<
b
>
$
login
<
/
b
>
:
être
page
pour
$
_Ss
Eab
SSoIn
Oné
N
[
s
'
'
<
/
v
p
ar
>
'
'
'
'
]
;
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
agir
de
page
priver
!
!
falloir
être
membre
.
<
/
p
>
'
'
;
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
...
UFR06
Ges
=
PHP
<
?
php
session_start
(
)
;
?
>
<
html
>
<
head
>
...
<
/
head
>
<
body
>
<
?
php
if
(
isset
(
$
_SESSION
[
`
`
login
'
'
]
)
AND
!
empty
(
$
_SESSION
[
`
`
login
'
'
]
)
)
{
...
unset
(
$
_SESSION
[
`
`
login
'
'
]
)
;
fermeture
de
session
session_destroy
(
)
;
session_destroy
(
)
}
else
{
echo
'
'
<
h@card@
>
Desolé
!
<
/
h1
>
'
'
;
echo
'
'
<
p
>
de
connexion
ac
=
ve
.
<
/
p
>
'
'
;
oublier
de
vider
}
?
>
variable
de
session
...
unset
(
$
_SESSION
[
'
'
var
'
'
]
)
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
•
mécanisme
de
session
–
base
pour
ges
=
de
panier
dans
site
de
e-commerce
–
produit
choisir
par
client
être
enregistrer
en
variable
de
session
–
pouvoir
garder
objet
simple
class
LigneProduit
{
public
$
nom
;
public
$
qte
;
contenir
panier
être
garder
dans
variable
de
session
.
/
*
constructeur
*
/
tableau
contenir
objet
func
__construct
(
$
nom
)
{
LigneProduit
.
$
this-
>
nom
=
$
nom
;
$
_SESSION
[
$
produit
]
$
this-
>
qte
=
;
con
=
ent
objet
.
}
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
produit
choisir
être
iden
=
fier
func
ajouterProduit
(
$
produit
)
{
par
«
id
»
(
nom
)
.
$
qte
=
;
$
_SESSION
[
$
produire
]
aller
contenir
objet
LigneProduit
if
(
!
isset
(
$
_SESSION
[
$
produit
]
)
)
{
$
_SESSION
[
$
produit
]
=
new
LigneProduit
(
$
produit
)
;
$
qte
=
$
_SESSION
[
$
produit
]
-
>
qte
}
S
’
n
’
avoir
$
_SESSION
[
$
produit
]
,
else
{
/
/
produire
,
augmenter
quan
=
té
aller
créer
nouveau
objet
$
objet
=
$
_SESSION
[
$
produit
]
;
LigneProduit
$
objet-
>
qte
=
$
objet-
>
qte
;
$
qte
=
$
objet-
>
qte
;
S
’
avoir
}
$
_SESSION
[
$
produit
]
,
return
$
qte
;
aller
juste
augmenter
valeur
de
}
l
’
asribut
«
qte
»
dans
l
’
objet
LigneProduit
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
Lorsqu
’
vouloir
supprimer
func
supprimerProduit
(
$
produit
)
{
produit
,
aller
réduire
quan
=
té
$
qte
=
;
dans
l
’
objet
LigneProduit
if
(
isset
(
$
_SESSION
[
$
produit
]
)
)
{
récupérer
l
’
objet
$
objet
=
$
_SESSION
[
$
produit
]
;
LigneProduit
garder
dans
$
objet-
>
qte
=
$
objet-
>
qte
-
;
$
_SESSION
[
$
produit
]
$
qte
=
$
objet-
>
qte
;
réduire
quan
=
té
d
’
unité
if
(
$
qte
<
=
)
{
/
/
supprimer
produit
unset
(
$
_SESSION
[
$
produit
]
)
;
}
}
S
’
n
’
rester
(
quan-té
avoir
aseint
unité
)
,
supprimer
return
$
qte
;
produire
de
session
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
pouvoir
récupérer
contenu
panier
en
récupérer
contenu
de
variable
de
session
$
_SESSION
pour
objet
LigneProduit
garder
dans
func
afficherPanier
(
)
{
$
_SESSION
echo
'
'
<
table
>
'
'
;
foreach
(
$
_SESSION
avoir
$
objet
)
{
echo
'
'
<
tr
>
<
td
>
'
'
.
$
objet-
>
nom
.
`
`
<
/
td
>
<
td
>
'
'
.
$
objet-
>
qte
.
'
'
<
/
td
>
<
/
tr
>
'
'
;
}
echo
'
'
<
/
table
>
'
'
;
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
:
panier
avancer
•
exemple
avancer
de
panier
u
=
liser
classe
en
PHP
no
=
de
session
•
panier
être
modéliser
par
classe
panier
panier
+
nbProduire
:
int
produire
ligne
+
ajouterProduit
(
code
,
nom
,
prix
)
+
code
:
string
+
supprimerProduit
(
code
)
*
+
nom
:
string
+
calculerTotal
(
)
:
float
+
prix
:
float
+
getNbProduire
(
)
:
int
LignePanier
<
?
php
<
?
php
+
qte
:
int
produire
{
LignePanier
{
public
$
code
;
public
$
prod
;
public
$
nom
;
public
$
qte
;
public
$
prix
;
.
.
.
.
.
.
}
?
>
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
}
?
>
UFR06
Ges
=
PHP
:
panier
avancer
class
panier
{
ligne
de
panier
être
garder
dans
public
$
ligne
;
tableau
associer
=
f
public
$
nbProduit
;
$
this-
>
ligne
[
$
code
]
=
>
$
LignePanier
func
=
__construct
(
)
{
commencer
avec
zéro
produire
$
this-
>
nbProduire
=
;
dans
panier
}
aller
créer
tableau
func
ajouterProduit
(
$
code
,
$
nom
,
$
prix
)
{
de
l
’
ajout
...
if
(
$
this-
>
nbProduit
=
=
)
{
premier
produit
$
prod
=
new
produire
(
$
code
,
$
nom
,
$
prix
)
;
panier
$
lp
=
new
LignePanier
(
$
prod
)
;
$
this-
>
ligne
[
$
code
]
=
$
lp
;
$
this-
>
nbProduit
=
;
}
.
.
.
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
:
panier
avancer
func
ajouterProduit
(
$
code
,
$
nom
,
$
prix
)
{
if
(
$
this-
>
nbProduit
=
=
)
{
.
.
.
}
pour
ajouter
,
vérifier
else
{
produit
être
dans
panier
if
(
isset
(
$
this-
>
ligne
[
$
code
]
)
)
{
$
lp
=
$
this-
>
ligne
[
$
code
]
;
$
qte
=
$
lp-
>
qte
;
S
’
être
,
récupérer
$
lp-
>
qte
=
$
qte
;
mettre
à
jour
quan-té
}
else
{
$
prod
=
new
produire
(
$
code
,
$
nom
,
$
prix
)
;
$
lp
=
new
LignePanier
(
$
prod
)
;
S
’
n
’
être
,
aller
ajouter
nouveau
ligne
de
panier
$
this-
>
ligne
[
$
code
]
=
$
lp
;
$
this-
>
nbProduit
=
$
this-
>
nbProduire
;
}
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
:
panier
avancer
func
ajouterProduit
(
$
code
,
$
nom
,
$
prix
)
{
supprimer
if
(
isset
(
$
this-
>
ligne
[
$
code
]
)
)
{
produit
être
dans
panier
$
lp
=
$
this-
>
ligne
[
$
code
]
;
S
’
être
,
mettre
à
jour
quan
=
té
,
$
lp-
>
qte
=
$
lp-
>
qte
-
;
supprimer
unité
if
(
$
lp-
>
qte
<
)
{
par
contre
,
s
’
rester
unset
(
$
this-
>
ligne
[
$
code
]
)
;
(
qte
<
)
,
supprimer
ligne
$
this-
>
nbProduit
=
$
this-
>
nbProduit
-
;
de
panier
tableau
}
}
}
Manuele
kirsch
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
:
panier
avancer
•
C
’
être
objet
panier
site
aller
manipuler
•
page
«
dns-remplacer
»
aller
gérer
panier
•
pour
,
el
e
aller
devoir
garder
objet
panier
dans
$
_SESSION
ctlPanier
panier
+
$
_SESSION
+
nbProduire
:
int
+
ajouterProduit
(
code
,
nom
,
prix
)
:
int
+
ajouterProduit
(
code
,
nom
,
prix
)
+
supprimerProduit
(
code
)
:
int
+
supprimerProduit
(
code
)
+
afficherPanier
(
)
+
calculerTotal
(
)
:
float
+
terminerSession
(
)
+
getNbProduire
(
)
:
int
<
?
php
session_start
(
)
;
include
'
'
dns-remplacer
'
'
;
.
.
.
?
>
<
html
>
.
.
Man
.
u
<
/
ele
kir
htmslch
>
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
PHP
:
panier
avancer
•
objet
panier
être
objet
complexe
•
pour
garder
dans
$
_SESSION
,
aller
falloir
«
compacter
»
:
c
’
être
sérialiser
–
$
_SESSION
[
`
`
panier
'
'
]
=
serialize
(
$
panier
)
–
unserialize
(
$
_SESSION
[
`
`
panier
'
'
]
)
func
ajouterProduit
(
$
produit
,
$
nom
,
$
prix
)
{
pour
ajouter
supprimer
un
.
.
.
produit
panier
,
aller
$
panier
=
unserialize
(
$
_SESSION
[
`
`
panier
'
'
]
)
;
récupérer
,
modifier
$
panier-
>
ajouterProduit
(
$
produit
,
$
nom
,
$
prix
)
;
remeere
dans
session
$
_SESSION
[
`
`
panier
'
'
]
=
serialize
(
$
panier
)
;
.
.
.
func
supprimerProduit
(
$
produit
)
{
.
.
.
$
panier
=
unserialize
(
$
_SESSION
[
`
`
panier
'
'
]
)
;
$
panier-
>
supprimerProduit
(
$
produit
)
;
$
_SESSION
[
`
`
panier
'
'
]
=
serialize
(
$
panier
)
;
Manuele
kirsch
.
.
.
Pinheiro
-
UP1
/
cri
/
UFR06
Ges
=
