cours|cour
PHP
verser
4.x
5.x
Sébastien
ROHAUT
tabler
matière
introduction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
définition
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
historique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
utilisation
pratique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
page
statique
vs
page
dynamique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
script
CGI
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
page
dynamique
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
préférer
PHP
à
autre
langage
ASP
?
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
devoir
connaître
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
nécessaire
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
nécessaire
client
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
respect
standard
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
base
:
présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
syntaxe
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
intégration
à
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
séparateur
de
instruction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
bloc
de
instruction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
commentaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
travailler
avec
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
déclarer
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
porter
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
variable
prédéfinie
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
variable
dynamique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
type
de
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
booléen
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
entier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
virgule
flottant
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
chaîne
de
caractère
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
variable
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
constant
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
obtenir
type
de
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
définir
supprimer
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
précédence
opérateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
arithmétique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
opérateur
de
assignation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
opérateur
sur
bit
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
de
comparaison
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
opérateur
de
erreur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
de
exécution
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
de
incrémentation
/
décrémentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
opérateur
logique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
de
chaîne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
opérateur
de
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
notion
de
expression
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
structure
de
contrôle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
if
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
while
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
while
classique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
do
...
while
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
for
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
foreach
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
break
continu
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
switch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
return
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
require
include
(
_once
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
fonction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
syntaxe
porter
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
argument
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
valeur
de
retour
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
fonction
interne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
gestion
formulaire
en
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
GET
POST
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
récupération
par
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
récupération
direct
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
utiliser
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
date
heure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
localisation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
récupérer
date
heure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
date
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
date
local
strftime
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
retour
par
tableau
getdate
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
heure
localtime
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
récupérer
importer
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
outil
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
PhpMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
MysqlCC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
créer
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
utilisateur
droit
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
créer
modifier
table
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
type
numérique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
type
entier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
type
réel
(
flottant
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
type
booléen
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
type
caractère
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
type
char
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
type
TEXT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
type
ENUM
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
typer
set
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
type
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
format
supporter
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
type
DATETIME
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
typer
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
type
TIMESTAMP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
type
TIME
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
type
YEAR
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
création
:
syntaxe
SQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
type
de
table
(
MyISAM
InnoDB
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
index
FULLTEXT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
recherche
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
recherche
booléen
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
MySQL
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
connexion
à
base
de
donnée
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
connexion
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
choix
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
fermeture
de
connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
séquence
complet
pour
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
requête
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
exécuter
requête
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
nombre
de
ligne
affecter
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
nombre
de
ligne
retourner
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
récupérer
résultat
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
insertion
avec
auto-incrément
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
récupération
erreur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
système
de
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
travail
sur
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ouverture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
lecture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
fgets
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
fread
(
)
;
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
fscanf
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
fgetc
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
fgetss
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
fgetcsv
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
renvoyer
fichier
par
sortie
standard
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
Ecriture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
déplacement
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
fseek
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
ftell
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
rewind
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
fin
de
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
fermeture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
travail
sur
répertoire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
répertoire
actuel
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
déplacer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ouvrir
,
lister
,
fermer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
récupérer
entrée
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
travail
sur
système
de
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
information
sur
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
action
sur
fichier
répertoire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
Upload
de
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
travail
sur
chaîne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
fonction
pour
code
HTML
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
gestion
caractère
verrouiller
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
balise
caractère
spécial
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
fonction
texte
général
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
découper
chaîne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
S
.
ROHAUT
courir
programmation
PHP
pager
/
rechercher
comparer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
session
cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
accès
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
suppression
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
identification
HTTP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
déconnexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
session
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
principe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
utilisation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
ouverture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
variable
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
expiration
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
changer
accès
par
défaut
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
Pré-requis
important
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
créer
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
type
possible
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
nouveau
image
dynamique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
récupération
de
image
existant
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
publication
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
chargement
via
autre
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
travailler
sur
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
récupérer
information
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
couleur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
dessin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
remplissage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
point
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
ligne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
rectangle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
cercle
,
ellipse
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
polygone
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
ip-remplacée
>
texte
simple
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
programmation
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
structure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
création
de
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
accès
membre
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
opérateur
:
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
variable
,
protection
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
PHP
4.x
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
PHP
5.x
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
protection
variable
fonction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
ip-remplacée
>
attribut
méthode
statique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
ip-remplacée
>
constant
de
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
héritage
polymorphisme
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
mots-clé
parent
self
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
constructeur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
constructeur
classe
dériver
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
destructeur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
affectation
de
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
code
commun
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
comparaison
de
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
nouveauté
en
PHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
fonction
__autoload
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
classe
abstrait
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
classe
,
méthode
variable
finale
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
interface
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
gestion
dynamique
méthode
attribut
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
itération
de
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
type
hinting
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
exception
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
try
...
catch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
déclenchement
avec
throw
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
classe
exception
classe
personnaliser
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
PHP
:
erreur
exception
?
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
exception
par
défaut
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
sauvegarder
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
cas
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
autre
cas
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
introduction
définition
PHP
être
langage
de
script
HTML
exécuter
côté
serveur
.
vouloir
dire
«
PHP
:
Hypertext
Preprocessor
»
.
syntaxe
être
inspirer
langage
C
,
de
java
de
Perl
,
avec
amélioration
spécifique
.
but
langage
être
de
écrire
page
HTML
dynamique
.
historique
origine
de
PHP
remonter
à
Rasmus
Lerdorf
avoir
créer
PHP
/
fi
,
librairie
de
script
Perl
utiliser
pour
publication
de
CV
sur
site
personnel
.
fur
à
mesure
évolution
,
librairie
avoir
être
porter
en
C
agrémenter
de
nouveau
fonctionnalité
pour
créer
page
dynamique
simple
pour
web
accéder
à
source
de
donnée
.
PHP
/
fi
signifier
Personal
home
page
/
Forms
Interpreter
.
PHP
/
fi
sortir
en
,
développer
par
seul
personne
.
être
succès
:
site
(
%
nom
de
domaine
)
dire
utiliser
supporter
.
contributeur
affluent
.
PHP
sort
en
juin
,
être
premier
version
développer
par
Rasmus
Lerdorf
,
Andi
Gutmans
Zeev
Suraski
réécrire
(
version
précédent
être
lent
pour
application
commercial
)
.
performance
,
PHP
être
modulaire
extensible
,
permettre
de
greffer
api
supplémentaire
,
n
'
avoir
manquer
avec
support
de
nombreux
base
de
donnée
,
de
format
de
protocole
,
syntaxe
cohérent
support
basique
de
objet
.
avoir
être
installer
sur
%
parc
mondial
serveur
web
avec
dizaine
de
millier
de
développeur
centaine
de
millier
de
site
.
moteur
de
PHP
avoir
être
repenser
de
améliorer
performance
application
complexe
de
augmenter
modularité
.
nouveau
moteur
avoir
voir
jour
,
appeler
zend
Engine
(
contraction
de
Zeev
Andi
)
.
PHP
sortir
en
mai
apporter
performance
accroître|accroire
,
support
de
serveur
web
,
session
,
sécurité
accroître|accroire
.
être
dernier
version
stable
(
compter
,
)
.
PHP
?
en
version
beta
,
cycle
pouvoir
durer
mois|moi
,
but
de
PHP
être
amélioration
performance
moteur
zend
(
zend
Engine
)
,
modèle
objet
étendre
proche
C++
,
compatibilité
accroître|accroire
avec
de
nouveau
standard
ancien
(
RPC
,
XML
,
.NET
,
...
)
utilisation
pratique
–
forum
messagerie
–
commerce
électronique
–
banque
/
compte
en
ligne
–
publication
en
ligne
–
moteur
de
recherche
–
vouloir
,
(
sauf
jeu
)
résumer
sigle
aller
utiliser
par
suite
.
•
HTML
:
Hypertext
Markup
Language
•
PHP
:
People
Hate
Perl
...
:
PHP
,
Hypertext
PreProcessor
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
SQL
:
Structured
Query
Language
•
MySQL
:
serveur
de
base
de
donnée
outil
pour
accéder
•
LAMP
:
Linux
–
apache
–
MySQL
–
PHP
,
quatuor
gagner
serveur
web
.
apache
PHP
MySQL
Linux
page
statique
vs
page
dynamique
page
statique
page
écrire
en
HTML
.
pouvoir
incorporer
code
Javascript
donner
semblant
de
'
dynamisme
'
côté
navigateur
donnée
local
.
pour
traitement
lourd
nécessiter
accès
à
base
de
donnée
,
formatage
de
tableau
en
fonction
de
résultat
,
recherche
poussé
,
graphisme
,
falloir
passer
par
page
dynamique
par
langage
être
exécuter
côté
serveur
:
ASP
sur
serveur
Microsoft
/
IIS
,
Perl
,
PHP
...
script
CGI
PHP
pouvoir
être
utiliser
langage
CGI
.
pour
rappel
,
script
programme
CGI
être
programme
autre
sortie
être
dédier
à
navigateur
,
par
exemple
programme
shell
,
C
Perl
sortir
HTML
.
PHP
être
langage
script
autre
pouvoir
utiliser
dans
cas
,
être
.
page
dynamique
PHP
PHP
être
langage
Server
Side
côté
serveur
.
chargement
de
page
PHP
,
être
serveur
aller
lire
,
interpréter
exécuter
code
.
renvoyer
résultat
,
sous
forme
de
code
HTML
navigateur
.
navigateur
utilisateur
voir
véritable
code
PHP
exécuter
.
de
résultat
être
page
web
classique
en
HTML
,
besoin
de
installer
sur
client
composant
spécifique
(
java
,
...
)
.
n
'
avoir
de
notion
de
vitesse
de
exécution
côté
client
,
serveur
être
prépondérant
.
préférer
PHP
à
autre
langage
ASP
?
ASP
être
langage
ASP
vouloir
dire
actif
Server
page
.
ASP
disposer
entendre
de
propre
api
pouvoir
être
accessible
via
autre
langage
.
agir
de
utiliser
langage
(
quelconque
)
pour
créer
page
dynamique
.
disponible
avec
IIS
sous
Windows
,
être
par
défaut
avec
autre
système
serveur
web
apache
.
exister
module
de
compatibilité
ASP
apache
apache
:
:
ASP
reprendre
api
ASP
en
étendre
en
programmation
PERL
.
sous
Windows
,
code
ASP
faire
en
VBScript
en
Jscript
.
être
possible
sous
Unix
/
Linux
apache
,
falloir
tourner
vers
solution
commercial
(
Sun
One
ASP
,
instant
ASP
,
...
)
.
sous
S
.
ROHAUT
courir
programmation
PHP
pager
/
Windows
ASP
VBScript
être
utiliser
pour
accès
ActiveX
,
composant
pratique
véritable
gruyère
pour
sécurité
.
exister
à
jour
de
portage
de
ActiveX
sur
de
autre
système
Windows
.
PHP
être
disponible
pour
plate-forme
permettre
de
faire
même
chose
,
,
ASP
VBScript
.
oublier
PHP
disposer
de
de
api|apis
!
devoir
connaître
devoir
connaître
HTML
langage
de
programmation
procédural
(
C
par
exemple
)
.
connaissance
basique
SQL
pouvoir
être
nécessaire
être
aborder
.
nécessaire
serveur
PHP
servir
à
faire
page
dynamique
.
être
langage
interpréter
même
titre
Perl
,
python
TCL
être
capable
de
lancer
script
intéractif
.
pouvoir
utiliser
PHP
pour
créer
interface
graphique
(
extension
GTK
)
.
minimum
nécessaire
vital
pour
apprendre
PHP
être
interpréteur
PHP
même
sur
environnement
supporter
(
Unix
,
Windows
,
mac
,
...
)
.
parler
de
LAMP
,
voir
référence
.
système
Linux
,
serveur
Web
apache
,
serveur
de
base
de
donnée
MySQL
interpréteur
PHP
.
version
de
PHP
permettre
de
fonctionner
avec
IIS
,
MySQL
exister
pour
Windows
.
pouvoir
utiliser
architecture
WIMP
(
Windows
,
IIS
,
MySQL
,
PHP
)
WAMP
(
Windows
,
apache
,
MySQL
,
PHP
)
.
ajouter
PHP
à
IIS
,
être
laisser
porte
ouvert
à
vent
,
préférer
second
solution
.
distribution
Linux
disposer
nécessaire
pour
architecture
LAMP
paramétrage
être
simple
.
de
mode
«
user_mod
»
de
apache
permettre
à
utilisateur
de
créer
site
web
dans
répertoire
spécifique
de
répertoire
personnel
.
sous
Windows
,
être
complexe
à
mettre
en
œuvre
.
employer
distribution
faire
,
meilleur
nommer
EasyPHP
.
version
être
meilleur
pour
développer
.
pouvoir
développer
site
sous
Windows
porter
sur
serveur
Unix
.
nécessaire
client
pour
développer
suffire
de
simple
éditeur
valoir
préférer
éditeur
évoluer
supporter
coloration
syntaxique
fonction
évoluer
.
éditeur
HAPEdit
être
parfaire
pour
développer
en
PHP
.
accès
base
MySQL
pouvoir
faire
depuis
navigateur
(
phpMyAdmin
)
depuis
interface
MySQLCC
DBDesigner
pour
conception
.
pour
test
:
simple
navigateur
respecter
standard
web
.
respect
standard
W3C
être
organisme
international
faire
loi
dans
monde
standard
web
.
avoir
définir
série
de
norme
HTML
,
XML
,
XHTML
,
CSS
,
etc
.
respecter
standard
?
être
garantie
de
bon
fonctionnement
bon
affichage
de
manière
identique
de
page
sur
S
.
ROHAUT
courir
programmation
PHP
pager
/
navigateur
supporter
standard
.
avec
bon
déclaration
(
entêter
HTML
)
navigateur
IE6
,
Mozilla
,
Opera
,
Galeon
,
Konqueror
,
etc
,
être
compatibles
avec
standard
.
utilisation
de
balise
propriétaire
à
navigateur
(
blink
par
exemple
)
de
vbscript
(
sous
IE
)
être
à
proscrire
.
dernier
norme
HTML
valide
être
HTML
strict
.
XHTML
à
terme
remplacer
HTML
être
supporter
.
dernier
norme
CSS
.
dans
cas
préférer
CSS-1
seul
Opera
supporter
CSS-2
.
prendre
habitude
être
possible
de
tester
site
sur
deux
trois
navigateur
:
IE6
être
répandre
,
Opera
être
respectueux
standard
Mozilla
être
challenger
remplacer
à
terme
de
IE
(
avoir
de
évolution
de
version
avant
LongHorn
)
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
base
:
présentation
PHP
être
langage
souple
prendre
source
dans
divers
langage
C
,
Perl
,
C++
.
être
possible
de
avoir
style
de
script
(
programmation
classique
dire
procédural
programmation
objet
,
programmation
bordélique
)
.
souplesse
permettre
grand
liberté
,
en
Perl
.
inconvénient
être
pouvoir
obtenir
code
illisible
(
bordélique
)
,
marche
.
prendre
habitude
de
commenter
code
,
de
indenter
de
placer
instruction
par
ligne
.
syntaxe
de
base
intégration
à
HTML
page
php
porter
extension
«
.php
»
.
page
PHP
pouvoir
être
programmer
en
PHP
mélanger
avec
code
html
.
PHP
être
langage
«
Embedded
HTML
»
,
être
à
dire
apparaître
à
importer
endroit
de
page
HTML
.
pour
placer
dans
balise
particulier
:
<
?
php
?
>
.
pouvoir
utiliser
balise
<
script
language
=
'
'
php
'
'
>
<
/
script
>
.
premier
forme
être
préférable
de
simplicité
compatibilité
XHTML
.
écrire
page
HTML
dans
intégrer
code
PHP
.
<
html
>
<
head
>
<
title
>
titre
<
/
title
>
<
/
head
>
<
body
>
<
?
php
echo
`
`
hello
World
!
`
`
;
?
>
<
/
body
>
<
/
html
>
code
HTML
générer
être
suivre
<
html
>
<
head
>
<
title
>
titre
<
/
title
>
<
/
head
>
<
body
>
hello
World
!
<
/
body
>
<
/
html
>
utilisation
de
balise
pour
intégration
de
code
dans
page
web
être
souple
permettre
de
jongler
avec
code
PHP
code
HTML
:
<
?
php
if
(
expression
)
{
?
>
<
strong
>
être
vrai
.
<
/
strong
>
<
?
php
}
else
{
?
>
<
strong
>
être
faux
.
<
/
strong
>
<
?
php
}
?
>
S
.
ROHAUT
courir
programmation
PHP
pager
/
séparateur
de
instruction
en
C
instruction
terminer
par
point-virgule
«
;
»
.
noter
balise
fermant
?
>
impliquer
fin
de
instruction
.
<
?
php
echo
`
`
être
test
'
'
;
?
>
<
?
php
echo
`
`
être
test
'
'
?
>
bloc
de
instruction
bloc
de
instruction
placer
entre
accolade
{
}
.
bloc
de
instruction
pouvoir
contenir
code
de
importer
longueur
être
considérer
dans
reste
code
instruction
unique
.
être
expression
(
avoir
valeur
)
pouvoir
assigner
bloc
,
faire
calcul
,
...
commentaire
commentaire
utiliser
en
C
en
C++
/
*
.
.
*
/
/
/
.
noter
balise
fermant
commentaire
en
cours|cour
.
<
?
php
/
*
echo
`
`
salut
!
'
'
*
/
/
/
commentaire
sur
ligne
?
>
S
.
ROHAUT
courir
programmation
PHP
pager
/
travailler
avec
variable
déclarer
variable
variable
commencer
par
dollar
«
$
»
suivre
de
nom
de
variable
.
variable
être
typer
moment
de
création
.
attention
PHP
être
sensible
à
casse
:
var
Var
être
même
variable
!
règle
à
respecter
:
•
variable
pouvoir
commencer
par
lettre
•
variable
pouvoir
commencer
par
souligner
(
underscore
)
«
_
»
•
variable
devoir
commencer
par
chiffre
.
/
/
déclaration
règle
$
var
=
;
/
/
$
var
être
à
$
Var
=
;
/
/
$
Var
être
à
$
_toto
=
'
salut
'
;
/
/
Ok
$
3petitscochons
=
;
/
/
invalide
:
commencer
par
chiffre
type
dépendre
de
valeur
de
contexte
de
utilisation
.
pouvoir
forcer
(
cast
)
variable
à
type
de
donnée
,
appeler
transtypage
.
de
type
de
variable
pouvoir
changer
en
fonction
de
utilisation
contexte
,
PHP
effectuer
transtypage
,
pouvoir
fournir
résultat
surprenant
.
affecter
valeur
à
variable
avec
signe
égal
«
=
»
avec
sans
espace
avant
.
/
/
déclaration
transtypage
$
var
=
'
'
;
/
/
chaîne
$
var+
=
;
/
/
$
var
être
entier
$
var
=
$
var+0.3
;
/
/
$
var
être
réel
de
type
double
$
var
=
+
`
`
petit
cochon
'
'
;
/
/
$
var
être
entier
valoir
par
défaut
variable
être
assigner
par
valeur
:
valeur
assigner
à
variable
être
recopier
dans
variable
.
PHP
pouvoir
travailler
par
référence
.
variable
pouvoir
référencer
autre
variable
.
dire
variable
devenir
,
pointe
sur
autre
variable
.
assigner
par
référence
en
utiliser
signe
«
&
»
devant
variable
assigner
$
var
=
;
$
ref
=
&
$
var
;
/
/
$
ref
devenir
référence
de
$
var
echo
$
ref
;
/
/
affiche
$
var
=
;
echo
$
ref
;
/
/
affiche
$
ref
=
;
echo
$
var
;
/
/
affiche
attention
à
valeur
constant
NULL
insensible
à
casse
.
affecter
valeur
NULL
à
variable
signifier
affecter
de
valeur
.
portée
variable
portée
de
variable
dépendre
contexte
.
variable
déclarer
dans
script
hors
de
fonction
être
global
par
défaut
portée
être
limiter
script
courir
,
code
inclure
(
include
,
require
)
être
accessible
dans
fonction
de
autre
script
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
avoir
=
;
/
/
global
par
défaut
function
foo
(
)
{
echo
$
avoir
;
/
/
être
variable
local
à
fonction
:
afficher
}
pour
accéder
à
variable
global
dans
fonction
,
falloir
utiliser
mot-clé
global
.
$
avoir
=
;
/
/
global
par
défaut
$
b
=
;
/
/
function
foo
(
)
{
global
$
avoir
,
$
b
;
/
/
récupérer
variable
global
$
b
=
$
a+
$
b
;
}
echo
$
b
;
/
/
affiche
PHP
accepter
variable
statique
.
en
C
variable
statique
perdre
valeur
sortir
de
fonction
.
function
test_static
(
)
{
static
$
avoir
=
;
echo
$
avoir
;
/
/
à
passage
dans
fonction
$
a++
;
}
variable
prédéfinie
PHP
disposer
de
grand
nombre
de
variable
prédéfinie
.
variable
être
de
type
scalaire
tableau
.
être
de
type
superglobal
,
être
à
dire
accessible
depuis
importer
sans
notion
de
portée
.
tableau
prédéfini
(
voir
point
tableau
pour
comprendre
utilisation
)
.
•
$
_GLOBALS
:
tableau
variable
global
.
clé
être
nom
de
variable
.
•
$
_SERVER
:
variable
fournir
par
serveur
web
,
par
exemple
'
SERVER_NAME
'
•
$
_GET
:
variable
fournir
par
HTTP
par
méthode
GET
(
formulaire
)
•
$
_POST
:
pour
méthode
POST
•
$
_COOKIE
:
variable
fournir
par
cookie
•
$
_FILES
:
variable
sur
téléchargement
de
fichier
(
upload
)
•
$
_ENV
:
accès
variable
de
environnement
serveur
•
$
_SESSION
:
variable
de
session
(
voir
cours|cour
sur
session
)
noter
:
avant
version
de
PHP
,
variable
passée
par
méthode
GET
,
POST
(
formulaire
URL
)
de
suite
être
créer
dans
script
de
destination
.
http
:
/
/
dns-remplacer
/
dns-remplacer
?
action
=
enr
créer
variable
$
action
prendre
valeur
'
enr
'
.
<
input
type
=
'
'
hidden
'
'
name
=
'
'
cache
'
'
value
=
'
'
toto
'
'
>
créer
dans
page
cible
(
action
form
)
variable
$
cache
de
valeur
`
`
toto
'
'
.
être
automatique
depuis
PHP
.
falloir
passer
par
tableau
superglobal
.
pouvoir
passer
en
modifier
valeur
register_globals
dans
dns-remplacé
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
variable
dynamique
variable
dynamique
utiliser
valeur
de
variable
nom
de
autre
variable
.
utiliser
variable
dynamique
en
rajouter
«
$
»
devant
nom
de
premier
variable
.
$
avoir
=
'
'
var
'
'
;
$
$
avoir
=
;
/
/
$
$
avoir
=
equivaut
en
fait
à
$
var
=
echo
$
avoir
;
/
/
affiche
var
echo
$
$
avoir
;
/
/
affiche
echo
$
var
;
/
/
affiche
attention
avec
tableau
!
pour
éviter
ambiguïté
,
être
préférable
de
placer
variable
entre
accolade
.
type
de
variable
booléen
booléen
pouvoir
prendre
deux
valeur
TRUE
FALSE
.
deux
constante
TRUE
FALSE
pouvoir
être
utiliser
sans
distinction
de
casse
(
de
différence
entre
majuscule
minuscule
)
.
$
var
=
FALSE
;
/
/
FALSE
,
False
,
false
,
...
$
var2
=
True
;
/
/
TRUE
,
True
,
true
,
...
type
pouvoir
être
convertir
en
booléen
.
cas
variable
retourner
FALSE
en
booléen
suivre
type
:
•
booléen
:
FALSE
•
entier
:
(
zéro
)
•
nombre
flotter
:
(
zéro
)
•
chaîne
:
chaîne
vide
`
`
'
'
`
`
'
'
(
zéro
)
•
tableau
:
tableau
vide
sans
élément
•
objet
:
objet
vide
sans
élément
•
constant
spécial
NULL
dans
autre
cas
,
valeur
retourner
être
TRUE
.
attention
:
être
considérer
vrai
TRUE
.
en
C
,
test
de
condition
dans
structure
de
contrôle
effectuer
convertion
booléen
condition
.
if
(
$
var
=
=
true
)
echo
`
`
ok
'
'
;
if
(
$
var
)
echo
`
`
ok
'
'
;
/
/
identique
entier
entier
être
ensemble
nombre
naturel
,
être
à
dire
dans
virgule
,
positif
négatif
.
entier
être
coder
sur
bit
dépendre
de
architecture
.
affecter
nombre
entier
dépasser
capacité
de
variable
,
être
transformer
en
réel
(
float
)
.
n
'
avoir
de
notion
de
entier
signer
.
de
conversion
de
booléen
en
entier
,
FALSE
devenir
TRUE
devenir
.
de
conversion
de
nombre
à
virgule
flottant
,
nombre
être
arrondir
à
valeur
inférieur
être
S
.
ROHAUT
courir
programmation
PHP
pager
/
positif
,
supérieur
être
négatif
(
conversion
vers
zéro
)
.
pour
conversion
depuis
chaîne
,
voir
à
type
.
virgule
flottant
partir
nombre
réel
,
double
float
,
être
à
dire
nombre
à
virgule
.
virgule
être
spécifier
par
point
«
.
»
.
puissance
de
exprimer
avec
«
e
»
«
E
»
.
$
var
=
;
$
var2
=
1.1e4
;
/
/
*
10^4
:
chaîne
de
caractère
chaîne
être
séquence
de
caractère
.
PHP
travailler
en
ASCII
caractère
,
supporter
format
Unicode
,
prévoir
dans
version
.
n
'
avoir
de
limite
théorique
pour
taille
de
chaîne
.
distinguer
trois
syntaxe
pour
utiliser
chaîne
•
guillemet
simple
'
...
'
(
apostrophe
)
:
en
shell
,
caractère
inclure
dans
chaîne
être
sortir
sans
interprétation
.
devoir
afficher
guillemet
simple
,
falloir
échapper
:
\
'
•
guillemet
double
`
`
...
'
'
:
séquence
de
caractère
être
interpréter
variable
être
substituer
(
remplacer
par
valeur
)
.
•
HereDoc
:
identique
HereScripts
en
Shell
.
texte
saisi
jusqu
'
à
délimiteur
spécifier
être
placer
dans
variable
.
tableau
issu
de
documentation
PHP
séquence
pouvoir
être
utiliser
avec
guillemet
double
.
séquence
valeur
\n
nouveau
ligne
(
linefeed
,
LF
0x0A
(
)
en
ASCII
)
\r
retour
à
ligne
(
carriage
return
,
CR
0x0D
(
)
en
ASCII
)
\t
tabulation
horizontal
(
HT
0x09
(
)
en
ASCII
)
\\
Antislash
\
$
caractère
$
\
'
'
guillemet
double
séquence
de
caractère
permettre
de
rechercher
nombre
en
\
[
]
{
,
}
notation
octal
.
\x
[
0-9A-Fa-
séquence
de
caractère
permettre
de
rechercher
nombre
en
f
]
{
,
}
notation
hexadécimal
.
echo
'
attention
l\'abus
d\'alcool
être
dangereux
'
;
$
var
=
;
echo
`
`
valeur
de
\
$
var
être
$
var\n
'
'
;
$
toto
=
<
<
<
fin
S
.
ROHAUT
courir
programmation
PHP
pager
/
salut
ami
aller
?
fin
;
echo
$
toto
;
importer
variable
pouvoir
être
afficher
dans
chaîne
attention
deux
variable
avoir
nom
proche
!
falloir
utiliser
accolade
{
}
en
shell
.
pouvoir
accéder
à
importer
caractère
dans
chaîne
en
indiquer
position
(
commencer
à
zéro
)
entre
deux
accolade
coller
juste
après
nom
de
variable
.
$
fic
=
'
dns-remplacer
'
;
$
fic
=
'
riri
fifi
loulou
'
;
echo
`
`
$
fic
$
{
fic
}
s
'
'
;
/
/
afficher
riri
fifi
loulou
dns-remplacer
echo
`
`
$
fic
{
}
'
'
;
/
/
affiche
o
pouvoir
concaténer
deux
chaîne
avec
opérateur
point
«
.
»
.
pouvoir
ajouter
texte
à
chaîne
avec
opérateur
égal
«
.
=
»
.
$
str
=
'
'
salut
ami
!
\n
'
'
;
$
str
.
=
'
'
aller
?
`
`
;
/
/
`
`
salut
ami
!
\nComment
aller
?
$
str2
=
$
str
.
`
`
\n
'
'
;
/
/
`
`
salut
ami
!
\nComment
aller
?
\n
devoir
utiliser
chaîne
de
caractère
valeur
numérique
(
dans
addition
par
exemple
,
attention
à
contenu
.
chaîne
être
de
type
double
(
réel
)
contenir
un
'
e
'
un
'
E
'
.
être
entier
.
valeur
numérique
être
définir
par
début
de
chaîne
.
chaîne
commencer
par
valeur
numérique
,
être
utiliser
,
être
égal
à
zéro
.
premier
expression
être
chaîne
,
type
de
variable
dépendre
de
second
expression
.
$
val
=
'
'
'
'
;
/
/
float
,
$
val
=
'
'
toto2
'
'
;
/
/
+
=
$
val
=
'
'
petit
cochon
'
'
;
/
/
+
=
(
être
en
premier
dans
chaîne
)
tableau
tableau
PHP
être
association
ordonner
.
association
faire
correspondre
valeur
à
clé
.
tableau
être
souple
,
pouvoir
avoir
de
multiple
dimension
,
être
indexer
par
clé
numérique
texte
,
être
utiliser
table
de
hachage
,
pile
,
queue
,
...
valeur
de
tableau
pouvoir
être
même
tableau
,
pour
créer
arbre
par
exemple
.
tableau
être
créer
avec
fonction
array
(
)
prendre
argument
pair
«
key
=
>
value
»
séparer
par
virgule
.
clé
pouvoir
être
entier
texte
.
attention
,
être
entier
,
un
chaîne
!
clé
être
absent
être
dernier
clé
entier
être
choisir
.
être
premier
,
être
zéro
.
accéder
élément
de
tableau
à
aide
crochet
«
[
]
»
.
placer
entre
crochet
clé
entier
chaîne
.
$
var
=
array
(
,
,
,
,
)
;
echo
$
var
[
]
;
/
/
echo
$
var
[
]
;
/
/
$
tab
=
array
(
`
`
avoir
'
'
=
>
,
'
'
nom
'
'
=
>
'
'
toto
'
'
,
'
'
pipo
'
'
,
,
=
>
)
;
echo
$
tab
[
]
;
/
/
pipo
echo
$
tab
[
]
;
/
/
echo
$
tab
[
'
avoir
'
]
;
/
/
echo
$
tab
[
'
nom
'
]
;
/
/
toto
S
.
ROHAUT
courir
programmation
PHP
pager
/
utilisation
de
fonction
array
être
obligatoire
pouvoir
déclarer
tableau
à
volée
.
$
tab2
[
]
=
;
$
tab2
[
]
=
;
/
/
equivaut
$
tab2
[
]
=
$
tab2
[
'
test
'
]
=
'
chaîne
'
;
pouvoir
créer
tableau
multidimensionnel
à
aide
deux
méthode
précédent
.
$
tab
=
array
(
`
`
un
'
'
=
>
array
(
`
`
riri
'
'
,
=
>
'
'
fifi
'
'
,
=
>
'
loulou
'
)
,
=
>
array
(
,
,
)
,
array
(
'
un
'
,
'
deux
'
,
'
trois
'
)
)
;
echo
$
tab
[
'
un
'
]
[
]
;
/
/
riri
echo
$
tab
[
]
[
]
;
/
/
echo
$
tab
[
]
[
]
;
/
/
trois
$
tab2
[
'
un
'
]
[
'
deux
'
]
=
'
test
'
;
/
/
créer
tableau
à
deux
dimension
exister
fonction
pratique
pour
lister
contenu
de
tableau
,
pour
modifier
élément
:
foreach
(
)
.
$
tab
=
array
(
=
>
'
un
'
,
=
>
'
deux
'
,
=
>
'
trois
'
)
;
foreach
(
$
tab
avoir
$
valeur
)
{
echo
`
`
$
valeur
\n
'
'
;
/
/
afficher
deux
trois
}
foreach
(
$
tab
avoir
$
cle
=
>
$
valeur
)
{
echo
`
`
$
cle
=
>
$
valeur\n
'
'
;
/
/
affiche
=
>
un
,
=
>
deux
,
=
>
trois
}
variable
objet
objet
créer
avec
instruction
class
.
pour
créer
instace
de
objet
falloir
utiliser
mot
clé
new
.
class
test
{
function
affiche_hello
(
)
{
echo
`
`
hello
!
`
`
;
}
}
$
obj
=
new
test
;
$
obj-
>
affiche_hello
(
)
;
constant
constant
être
nom
prendre
valeur
pouvoir
être
modifier
fois
fixé
.
constante
être
accessible
en
lecture
seul
.
être
sensible
à
casse
devoir
par
convention
être
écrire
en
majuscule
.
définir
constante
avec
fonction
define
(
)
devoir
respecter
règle
:
•
constante
commencer
par
$
•
constant
être
accessible
depuis
importer
endroit
code
•
constante
pouvoir
être
redéfinir
•
constante
pouvoir
contenir
de
scalaire
(
entier
,
booléen
,
chaîne
,
double
)
.
define
(
constant
,
'
'
valeur
'
'
)
;
echo
constant
;
/
/
affiche
`
`
valeur
'
'
S
.
ROHAUT
courir
programmation
PHP
pager
/
obtenir
type
de
variable
pour
obtenir
type
de
variable
,
utiliser
fonction
«
gettype
»
retourner
chaîne
de
texte
indiquer
type
.
attention
garantir
résultat
même
de
version
PHP
à
autre
.
type
retourner
être
`
`
boolean
'
'
,
`
`
integer
'
'
,
`
`
double
'
'
(
pour
raison
historique
,
`
`
double
'
'
être
retourner
valeur
de
type
float
être
fournir
,
lieu
de
chaîne
`
`
float
'
'
)
,
`
`
string
'
'
,
`
`
array
'
'
,
'
'
object
'
'
,
`
`
resource
'
'
(
depuis
PHP
)
,
`
`
NULL
'
'
(
depuis
PHP
)
,
`
`
unknown
type
'
'
souhaiter
tester
type
de
variable
,
être
préférable
de
utiliser
fonction
de
type
«
is_
*
»
:
is_array
,
is_bool
,
is_double
,
is_float
,
is_int
,
is_integer
,
is_long
,
is_null
,
is_numeric
,
is_object
,
is_real
,
is_resource
,
is_string
,
is_callable
(
être
fonction
)
.
définir
supprimer
variable
souhaiter
savoir
variable
être
définir
,
être
à
dire
être
affecter
,
utiliser
«
isset
»
.
souhaiter
supprimer
variable
,
falloir
utiliser
«
unset
»
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
opérateur
précédence
opérateur
être
ordre
dans
valeur
devoir
être
analyser
.
expression
+
*
être
lire
de
gauche
à
droit|droite
retourner
.
tableau
priorité
opérateur
par
ordre
croître
de
priorité
:
associativité
opérateur
gauche
,
gauche
gauche
xor
gauche
and
droit
print
gauche
=
+
=
-
=
*
=
/
=
.
=
%
=
&
=
|
=
^
=
~
=
<
<
=
>
>
=
gauche
?
:
gauche
|
gauche
&
&
gauche
|
gauche
^
gauche
&
non-associatif
=
=
!
=
=
=
=
!
=
=
non-associatif
<
<
=
>
>
=
gauche
<
<
>
>
gauche
+
-
.
gauche
*
/
%
droit
!
~
++
--
(
int
)
(
double
)
(
string
)
(
array
)
(
object
)
@
droit
[
non-associatif
new
opérateur
arithmétique
opérateur
+
,
-
,
*
,
/
%
.
«
%
»
être
modulo
:
reste
de
division
.
opérateur
de
assignation
principal
être
=
avoir
en
C
opérateur
combiner
+
=
,
-
=
,
*
=
,
/
=
,
%
=
,
.
=
...
opérateur
sur
bit
opérateur
être
&
(
AND
)
,
|
(
or
)
,
^
(
XOR
)
,
~
(
NOT
,
~
$
avoir
)
,
>
>
(
$
avoir
>
>
$
b
décalage
de
$
b
bit
S
.
ROHAUT
courir
programmation
PHP
pager
/
sur
gauche
)
<
<
(
$
avoir
<
<
$
b
décalage
de
$
b
bit
sur
droit|droite
)
.
décalage
de
bit
sur
gauche
équivaloir
à
multiplication
par
deux
,
décalage
sur
droit|droite
à
division
par
deux
.
opérateur
de
comparaison
opérateur
être
=
=
(
$
avoir
=
=
$
b
,
même
valeur
)
,
=
=
=
(
$
avoir
=
=
=
$
b
,
même
valeur
même
type
)
,
!
=
<
>
(
différent
)
,
<
,
>
,
<
=
,
>
=
.
avoir
opérateur
ternaire
«
?
:
»
expr1
?
expr2
:
expr3
expr1
être
vrai
expr2
expr3
.
opérateur
de
erreur
disposer
de
opérateur
spécial
@
appliquer
à
expression
empêcher
sortie
de
message
de
erreur
en
cas
de
problème
.
pouvoir
récupérer
message
de
erreur
éventuel
à
aide
de
variable
$
php_errormsg
option
«
track_errors
»
être
à
«
»
dans
dns-remplacé
.
$
retour
=
@
$
tab
[
'
toto
'
]
;
/
/
retourner
de
erreur
index
toto
exister
opérateur
de
exécution
pouvoir
exécuter
commande
externe
PHP
en
Shell
avec
opérateur
«
guillemts
inverse
«
`
»
(
altgr+6
)
.
attention
option
«
safe_mode
»
devoir
être
à
«
»
dans
dns-remplacé
.
pouvoir
utiliser
fonction
«
shell_exec
»
faire
exécuter
commande
par
shell
.
opérateur
de
incrémentation
/
décrémentation
disposer
en
C
opérateur
++
--
,
à
utiliser
avant
après
nom
de
variable
.
$
a++
;
/
/
retourne
$
avoir
incrémenter
de
++
$
avoir
;
/
/
incrémenter
$
avoir
de
retourne
$
avoir
$
avoir
--
;
/
/
retourne
$
avoir
décrémente
de
--
$
avoir
;
/
/
décrémente
$
avoir
de
retourne
$
avoir
attention
!
opérateur
réagir
type
de
variable
.
PHP
réagir
en
PERL
.
:
$
avoir
=
'
z
'
;
$
a++
;
echo
$
avoir
;
/
/
retourner
aa
$
a++
;
echo
$
avoir
;
/
/
retourner
opérateur
logique
opérateur
logique
être
:
«
and
»
«
&
&
»
(
$
avoir
and
$
b
,
$
avoir
&
&
$
b
)
vrai
$
avoir
$
b
être
vrai
«
or
»
«
|
|
»
(
$
avoir
or
$
b
,
$
avoir
|
|
$
b
)
vrai
$
avoir
$
b
être
vrai
«
xor
»
(
$
avoir
xor
$
b
)
vrai
$
avoir
$
b
être
vrai
deux
en
même
temps
«
!
»
(
!
$
avoir
)
vrai
$
avoir
être
faux
.
attention
,
and
or
avoir
même
priorité
(
priorité
faible
)
&
&
|
|
!
S
.
ROHAUT
courir
programmation
PHP
pager
/
opérateur
de
chaîne
avoir
deux
opérateur
de
chaîne
:
«
.
»
concaténer
deux
chaîne
entre
«
.
=
»
voir
être
opérateur
de
assignation
.
$
avoir
=
'
'
bonjour
'
'
;
$
b
=
$
avoir
.
'
'
ami
'
'
;
/
/
$
b
contenir
bonjour
ami
$
b
.
=
'
'
!
salut
.
`
`
;
/
/
$
b
contenir
bonjour
ami
!
salut
.
opérateur
de
tableau
pouvoir
«
additionner
»
deux
tableau
entre
avec
«
+
»
:
tableau
de
droit|droite
être
ajouter
tableau
de
gauche
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
notion
de
expression
en
PHP
,
expression
pouvoir
être
résumer
en
«
avoir
valeur
»
.
dire
,
remarquer
en
PHP
être
expression
.
variable
constante
voir
affecter
valeur
.
valeur
être
expression
de
variable
de
constant
.
pouvoir
résumer
en
dire
expression
représenter
pouvoir
être
évaluer
.
pouvoir
évaluer
valeur
...
fonction
pouvoir
être
expression
retourner
valeur
.
dire
fonction
avoir
retourner
valeur
.
comparaison
être
expression
:
retourner
valeur
booléen
.
calcul
être
expression
,
puisqu'une
valeur
être
retourner
,
affecter
,
calculer
.
PHP
être
orienter
expression
faire
en
PHP
être
expression
.
PHP
chercher
à
décomposer
être
possible
en
expression
à
évaluer
,
pour
optimiser
traitement
.
exemple
.
$
avoir
=
;
distinguer
premier
coup
de
œil
deux
valeur
:
variable
$
avoir
valeur
,
variable
$
avoir
être
mettre
à
jour
avec
valeur
.
or
en
interne
avoir
troisième
valeur
rentrer
en
jeu
:
valeur
de
assignation
,
même
assigner
à
.
ligne
signifier
en
fait
:
«
$
avoir
=
être
expression
valoir
»
.
$
b
=
$
avoir
=
;
assignation
être
analyser
de
droit
à
gauche
.
avoir
expression
$
avoir
=
valoir
.
$
b
valoir
.
être
rapide
à
écrire
à
exécuter
$
avoir
=
;
$
b
=
;
$
avoir
=
$
a+3
;
PHP
évaluer
de
abord
expression
$
a+3
valeur
de
$
avoir
incrémenter
de
,
assigner
nouveau
valeur
à
$
avoir
.
$
a+
=
;
résultat
être
même
,
être
rapide
$
avoir
être
évaluer
seul
fois
.
pouvoir
en
arriver
à
avoir
expression
surprenant
:
$
avoir
=
;
$
b
=
$
a+
=
;
variable
$
avoir
être
incrémenter
de
valoir
.
expression
$
a+
=
valoir
.
$
b
voir
assigner
valeur
.
expression
valoir
.
dernier
chose
:
$
avoir
?
$
b
:
$
c
expression
$
avoir
être
vrai
,
expression
$
b
être
évaluer
,
expression
$
c
être
évaluer
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
avoir
=
TRUE
;
$
b
=
;
$
c
=
;
echo
$
avoir
?
$
b
:
$
c
;
/
/
affiche
S
.
ROHAUT
courir
programmation
PHP
pager
/
structure
de
contrôle
if
if
(
expression
)
commander
{
bloc
de
commande
}
else
commander
{
bloc
de
commande
}
avoir
«
elseif
»
,
combinaison
if
else
.
elseif
en
mot
pouvoir
écrire
en
deux
mot
:
résultat
être
même
.
pouvoir
écrire
elseif
en
chaîne
.
premier
expression
être
vrai
être
exécuter
.
If
(
expression
)
commander
{
bloc
de
commande
}
elsif
(
expression
)
commander
{
bloc
de
commande
}
elsif
(
expression
)
commander
{
bloc
de
commande
}
...
pouvoir
placer
HTML
commander
dans
bloc
de
commande
.
<
?
php
if
(
$
avoir
=
=
)
{
?
>
à
=
<
?
php
}
?
>
pouvoir
utiliser
syntaxe
alternatif
:
ouvrir|ouvrer
bloc
(
juste
après
if
,
else
elseif
)
avec
«
:
»
deux
point
,
fermer
instruction
avec
«
endif
»
.
<
?
php
if
(
$
avoir
=
=
)
:
print
`
`
avoir
=
'
'
;
print
`
`
...
'
'
;
elseif
(
$
avoir
=
=
)
:
print
`
`
avoir
=
'
'
;
print
`
`
!
!
!
`
`
;
else
:
print
`
`
avoir
valoir
'
'
;
endif
;
?
>
while
while
classique
être
boucle
«
»
simple
:
condition
être
vrai
,
continuer
boucle
.
expression
être
placer
en
début
de
boucle
:
expression
être
faux
avant
de
rentrer
dans
boucle
,
boucle
être
exécuter
.
While
(
expression
)
commander
{
bloc
de
commande
}
pouvoir
utiliser
syntaxe
alternatif
:
while
(
expression
)
:
commander
{
bloc
de
commande
}
endwhile
do
...
while
être
second
possibilité
.
dans
cas
commande
bloc
de
commande
être
exécuter
S
.
ROHAUT
courir
programmation
PHP
pager
/
fois
,
expression
conditionnel
être
tester
en
fin
de
boucle
.
do
{
bloc
de
commande
}
while
(
expression
)
for
«
for
»
PHP
être
identique
«
for
»
C
.
for
(
expr1
;
expr2
;
expr3
)
commander
{
bloc
de
commande
}
«
expr1
»
être
exécuter
à
premier
entrée
dans
boucle
.
«
expr2
»
être
exécuter
à
début
de
itération
jusqu
'
à
expression
être
faux
cas
sortir
de
boucle
.
«
expr3
»
être
exécuter
à
fin
de
itération
.
usage
habituel
de
un
boucle
être
de
placer
état
initial
en
expr1
,
condition
de
sortie
en
expr2
calcul
en
expr3
.
effectuer
sorte
de
chose
.
/
/
de
à
for
(
$
i
=
;
$
i
<
=
;
print
$
i
,
$
i++
)
/
/
infini
for
(
;
;
)
/
/
de
à
for
(
$
i
=
;
$
i
<
=
;
print
$
i
,
$
i++
)
;
pouvoir
employer
syntaxe
alternatif
avec
«
:
»
«
endfor
»
.
for
(
expr1
;
expr2
;
expr3
)
:
commander
{
bloc
de
commande
}
endfor
foreach
boucle
«
foreach
»
être
intéressant
pour
manipulation
de
tableau
de
résultat
de
requête
SQL
.
permettre
de
lister
tableau
.
disposer
de
deux
syntaxe
.
foreach
(
array_expression
avoir
$
value
)
commande
foreach
(
array_expression
avoir
$
key
=
>
$
value
)
commande
premier
syntaxe
récupérer
élément
tableau
un
par
un
,
.
valeur
de
élément
courir
tableau
être
placer
dans
$
value
.
second
syntaxe
être
identique
,
sauf
en
clé
(
index
)
de
élément
actuel
être
placer
dans
$
key
.
attention
:
modifier
valeur
de
$
value
(
de
$
key
)
modifier
tableau
boucle
travailler
sur
copie
,
référence
.
par
contre
dans
second
cas
,
disposer
de
clé
,
rien
empêcher
de
assigner
être
à
élément
courant
.
remarque
:
appel
à
foreach
«
rembobiner
»
tableau
à
premier
élément
.
dans
autre
boucle
,
falloir
utiliser
«
reset
»
.
reset
(
$
arr
)
;
while
(
list
(
,
$
value
)
=
each
(
$
arr
)
)
{
echo
`
`
valeur
:
$
value
<
br
>
\n
'
'
;
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
foreach
(
$
arr
avoir
$
value
)
{
echo
`
`
valeur
:
$
value
<
br
>
\n
'
'
;
}
$
avoir
=
array
(
'
'
un
'
'
=
>
,
'
'
deux
'
'
=
>
,
'
'
trois
'
'
=
>
,
'
'
dix-sept
'
'
=
>
)
;
foreach
(
$
avoir
avoir
$
k
=
>
$
v
)
{
print
`
`
\
$
avoir
[
$
k
]
=
>
$
v.\n
'
'
;
}
break
continuer
instruction
«
break
»
permettre
de
sortir
de
for
,
while
,
foreach
switch
.
pouvoir
indiquer
de
de
structure
souhaiter
sortir
être
emboîter
.
instruction
«
continu
»
permettre
de
passer
à
itération
suivant
.
attention
PHP
conside
switch
boucle
,
dans
cas
,
réévaluer
switch
.
pouvoir
indiquer
à
continuer
de
structure
emboîter
relancer
.
switch
«
switch
»
être
équivalent
à
série
de
if
permettre
de
comparer
avec
grand
nombre
de
valeur
.
switch
(
$
i
)
{
case
:
print
`
`
i
egale
'
'
;
break
;
case
:
print
`
`
i
egale
'
'
;
break
;
case
:
print
`
`
i
egale
'
'
;
break
;
default
:
print
`
`
i
être
inférieur
à
supérieur
à
»
;
}
switch
arrêter
à
premier
expression
caser
vrai
exécuter
code
suivre
dans
ordre
indiqué
,
jusqu
'
à
premier
instruction
break
.
n
'
avoir
de
break
,
code
jusqu
'
à
fin
switch
être
exécuter
.
dans
exemple
suivre
,
$
i
valoir
,
print
être
afficher
!
switch
(
$
i
)
{
case
:
print
`
`
i
egale
'
'
;
case
:
print
`
`
i
egale
'
'
;
case
:
print
`
`
i
egale
'
'
;
}
noter
default
devoir
intervenir
en
dernier
,
n
'
avoir
intérêt
.
pouvoir
employer
syntaxe
alternatif
avec
«
:
»
«
endswitch
»
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
switch
(
$
i
)
:
case
:
print
`
`
i
egale
'
'
;
break
;
case
:
print
`
`
i
egale
'
'
;
break
;
endswitch
return
à
de
autre
langage
,
«
return
»
être
fonction
instruction
.
dans
fonction
,
return
servir
à
sortir
de
à
retourner
valeur
.
dans
script
,
sortir
de
.
attention
dans
script
inclure
(
voir
require
include
)
:
return
dans
type
de
code
considérer
sortir
de
fonction
«
require
»
«
include
»
sortir
script
de
fonction
dans
code
avoir
être
inclure
!
return
être
élément
langage
fonction
avoir
besoin
de
utiliser
parenthèse
.
require
include
(
_once
)
«
require
»
«
include
»
inclure
à
endroit
actuel
exécuter
fichier
PHP
.
être
identique
dans
fonctionnement
à
exception
:
traitement
erreur
.
include
produire
«
warning
»
(
code
continuer
en
principe
à
exécuter
)
require
produire
«
erreur
fatal
»
(
exécution
arrêter
)
.
require
include
être
élément
langage
fonction
avoir
besoin
de
utiliser
parenthèse
.
«
require_once
»
«
include_once
»
ressembler
à
homologue
avec
différence
.
arriver
,
fichier
être
inclure
seul
fois
.
second
«
require_once
»
apparaître
avec
même
fichier
,
instruction
être
exécuter
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
fonction
syntaxe
porter
syntaxe
de
fonction
.
function
fonc
(
$
arg1
,
$
arg2
,
$
arg3
,
...
,
$
argn
)
{
bloc
de
commande
return
$
valeur
}
fonction
n
'
avoir
besoin
de
être
déclarer
avant
de
être
utiliser
(
sauf
vouloir
rester
compatible
avec
PHP3
)
,
moment
apparaître
dans
script
.
avoir
deux
exception
:
fonction
être
conditionnel
,
être
à
dire
déclarer
dans
if
,
fonction
être
déclarer
dans
autre
fonction
.
dans
premier
cas
être
inconnu
reste
code
condition
if
être
vrai
.
dans
second
cas
être
connaître
premier
fonction
être
exécuter
.
exemple
tirer
manuel
.
pour
premier
cas
:
$
makefoo
=
true
;
/
*
impossible
de
appeler
foo
(
)
,
fonction
exister
.
pouvoir
utiliser
bar
(
)
*
/
bar
(
)
;
if
(
$
makefoo
)
{
function
foo
(
)
{
echo
`
`
exister
programme
être
passer
ici.\n
'
'
;
}
}
/
*
Maitenant
,
pouvoir
appeler
foo
(
)
$
makefoo
être
vrai
*
/
if
(
$
makefoo
)
foo
(
)
;
function
bar
(
)
{
echo
`
`
exister
dès
début
programme.\n
'
'
;
}
pour
second
cas
:
function
foo
(
)
{
function
bar
(
)
{
echo
`
`
exister
foo
(
)
être
appelé.\n
'
'
;
}
}
/
*
impossible
de
appeler
bar
(
)
exister
.
*
/
foo
(
)
;
/
*
,
pouvoir
appeler
bar
(
)
,
utilisation
de
foo
(
)
l
'
avoir
rendre
accessible
.
*
/
bar
(
)
;
argument
pouvoir
passer
de
argument
souhaiter
à
fonction
PHP
,
de
type
.
argument
S
.
ROHAUT
courir
programmation
PHP
pager
/
être
séparer
par
virgule
.
par
défaut
être
passer
par
copie
.
function
affiche
(
$
msg
)
{
echo
$
msg
;
}
être
possible
de
passer
argument
par
référence
,
pouvoir
en
changer
valeur
à
intérieur
de
fonction
.
pour
rajouter
«
&
»
devant
argument
.
pouvoir
passer
variable
par
référence
en
placer
«
&
»
devant
nom
de
appel
de
fonction
.
function
modif
(
&
$
msg
)
{
$
msg
=
'
'
coucou
'
'
;
}
$
msg
=
'
'
salut
'
'
;
modif
(
$
msg
)
;
echo
$
msg
;
/
/
coucou
pouvoir
définir
valeur
par
défaut
attention
,
dans
liste
paramètre
valeur
par
défaut
devoir
être
en
dernier
.
function
affiche
(
$
nom
,
$
prenom
=
'
'
toto
'
'
)
{
echo
`
`
$
nom
$
prenom
'
'
;
}
pouvoir
utiliser
nombre
variable
de
argument
avec
fonction
func_num_args
,
func_get_arg
func_get_args
.
function
foo
(
)
{
$
numargs
=
func_num_args
(
)
;
echo
`
`
nombre
de
argument
:
$
numargs\n
'
'
;
}
foo
(
,
,
)
;
/
/
affiche
'
nombre
de
argument
:
'
valeur
de
retour
retourner
valeur
avec
instruction
«
return
»
.
pouvoir
retourner
type
de
valeur
,
en
même
temps
.
empêcher
dans
cas
de
retourner
tableau
.
fonction
pouvoir
retourner
référence
.
dans
cas
devoir
être
déclarer
avec
«
&
»
devant
nom
.
function
carre
(
$
num
)
{
return
$
num
*
$
num
;
}
echo
carre
(
)
;
/
/
affiche
'
'
fonction
interne
en
fonction
définir
par
utilisateur
PHP
proposer
grand
nombre
de
fonction
interne
couvrir
multitude
de
domaine
.
pour
accéder
à
fonction
falloir
appeler
par
nom
module
correspondre
être
compiler
avec
PHP
.
voir
dans
chapitre
suivant
en
utiliser
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
gestion
formulaire
en
PHP
GET
POST
but
être
de
récupérer
contenu
champ
de
formulaire
HTML
dans
code
PHP
pour
pouvoir
traiter
.
formulaire
être
envoyer
à
script
PHP
,
variable
être
disponible
dans
script
.
formulaire
pouvoir
être
de
type
GET
POST
.
pour
rappel
,
dans
formulaire
de
type
GET
,
information
être
passer
par
URL
en
clair
,
pouvoir
poser
problème
de
limitation
suivre
serveur
(
de
à
octet
selon
cas
)
.
méthode
POST
n
'
avoir
genre
de
limitation
,
information
être
transmettre
par
conteneur
de
variable
global
(
dans
entêter
)
être
de
cacher
.
PHP
pouvoir
gérer
deux
méthode
de
manière
transparent
.
récupération
par
tableau
champ
de
formulaire
en
PHP
être
définir
par
nom
valeur
.
dans
script
,
PHP
aller
récupérer
nom
valeur
dans
tableau
spécial
dire
superglobal
(
accessible
depuis
)
.
pour
méthode
GET
,
tableau
être
$
_GET
,
pour
méthode
POST
tableau
être
$
_POST
.
souhaiter
soucier
de
méthode
,
pouvoir
utiliser
tableau
$
_REQUEST
.
en
index
avoir
nom
champ
de
formulaire
(
de
variable
passée
en
URL
)
en
valeur
valeur
champ
.
par
exemple
:
<
form
action
=
'
'
dns-remplacer
'
'
method
=
'
'
post
'
'
>
Name
:
<
input
type
=
'
'
text
'
'
name
=
'
'
username
'
'
>
<
br
>
Email
:
<
input
type
=
'
'
text
'
'
name
=
'
'
email
'
'
>
<
br
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
submit
'
'
value
=
'
'
Submit
!
`
`
>
<
/
form
>
dans
page
PHP
dns-remplacer
avoir
:
<
?
php
echo
$
_POST
[
'
username
'
]
;
echo
$
_REQUEST
[
'
email
'
]
;
?
>
imaginer
appel
de
page
dns-remplacer
par
URL
:
http
:
/
/
dns-remplacer
/
dns-remplacer
?
id
=
transmettre
variable
via
URL
méthode
implicite
GET
.
pour
récupérer
«
id
»
dans
code
PHP
pouvoir
faire
:
<
?
php
echo
$
_GET
[
'
id
'
]
;
echo
$
_REQUEST
[
'
id
'
]
;
?
>
$
_GET
contenir
variable
de
type
GET
.
$
_POST
contenir
variable
de
type
POST
.
$
_REQUEST
contenir
variable
de
type
POST
GET
variable
de
cookies
.
être
possible
de
procéder
en
récupérer
nom
champ
en
variable
sans
passer
par
tableau
.
pour
falloir
vérifier
dans
fichier
dns-remplacer
valeur
register_globals
être
à
.
dans
cas
nom
champ
de
formulaire
être
S
.
ROHAUT
courir
programmation
PHP
pager
/
nom
variable
:
<
?
php
echo
$
username
;
echo
$
email
;
?
>
récupération
direct
valeur
être
à
pour
divers
raison
(
sécurité
,
droit
,
etc
)
souhaiter
/
pouvoir
modifier
,
exister
de
méthode
.
fonction
«
import_request_variable
»
permettre
de
effectuer
même
chose
.
fonction
prendre
un
deux
paramètre
,
second
être
optionnel
.
après
exécution
,
récupérer
variable
sans
passer
par
tableau
.
premier
paramètre
être
type
de
variable
souhaiter
récupérer
:
–
P
/
p
:
variable
de
type
POST
–
G
/
g
:
variable
de
type
GET
–
C
/
c
:
variable
de
type
cookie
pouvoir
cumuler
ensemble
attention
à
ordre
!
second
paramètre
être
préfixe
souhaiter
donner
nom
variable
aller
récupérer
.
deux
exemple
:
<
?
php
import_request_variable
(
`
`
p
'
'
)
;
echo
$
username
;
?
>
<
?
php
import_request_variable
(
`
`
P
'
'
,
'
'
Post_
'
'
)
;
echo
$
Post_username
;
?
>
pouvoir
passer
par
fonction
«
extract
»
permettre
de
exporter
tableau
en
variable
.
pour
tableau
$
_POST
:
<
?
php
extract
(
$
_POST
)
;
echo
$
username
;
?
>
utiliser
tableau
formulaire
permettre
de
utiliser
liste
à
choix
multiple
PHP
devoir
récupérer
ensemble
choix
de
utilisateur
.
pour
falloir
utiliser
tableau
.
<
form
action
=
'
'
<
?
php
echo
$
HTTP_SERVER_VARS
[
'
PHP_SELF
'
]
;
?
>
'
'
method
=
'
'
post
'
'
>
Name
:
<
input
type
=
'
'
text
'
'
name
=
'
'
personal
[
name
]
'
'
>
<
br
>
Email
:
<
input
type
=
'
'
text
'
'
name
=
'
'
personal
[
email
]
'
'
>
<
br
>
Beer
:
<
br
>
<
select
multiple
name
=
'
'
vin
[
]
'
'
>
<
option
valoir
=
'
'
bordeaux
'
'
>
bordeaux
<
/
option
>
<
option
valoir
=
'
'
beaujolais
'
'
>
beaujolais
<
/
option
>
<
option
valoir
=
'
'
loire
'
'
>
loire
<
/
option
>
<
/
select
>
<
br
>
S
.
ROHAUT
courir
programmation
PHP
pager
/
<
input
type
=
'
'
hidden
'
'
name
=
'
'
action
'
'
value
=
'
'
submitted
'
'
>
<
input
type
=
'
'
submit
'
'
name
=
'
'
submit
'
'
value
=
'
'
submit
!
`
`
>
<
/
form
>
dans
exemple
précédent
par
exemple
sélectionner
vin
(
:
bordeaux
beaujolais
)
avoir
dans
$
vin
[
]
bordeaux
$
vin
[
]
beaujolais
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
date
heure
localisation
format
de
date
de
heure
(
format
langue
)
être
dépendant
de
environnement
de
exécution
code
PHP
.
plupart
serveur
web
incorporer
PHP
être
configurer
en
langue
anglais
avec
gestion
information
de
localisation
en
anglais
.
pouvoir
être
préférable
de
passer
en
français
pour
site
francophone
simplifier
tâche
.
pouvoir
effectuer
avec
fonction
«
setlocal
»
.
deux
exemple
:
un
sous
NT
/
autre
sous
Linux
.
if
(
substr
(
php_uname
(
)
,
,
)
!
=
`
`
Windows
'
'
)
{
setlocal
(
LC_TIME
,
'
'
fr_FR
@
euro
'
'
)
;
}
else
{
setlocal
(
LC_TIME
,
'
'
fr
'
'
)
;
}
dans
exemple
,
vérifier
de
abord
à
système
avoir
à
faire
(
fonction
php_uname
)
en
fonction
résultat
passer
en
localisation
français
selon
deux
méthode
.
après
changement
,
appel
fonction
retourner
jour
de
semaine
mois|moi
faire
en
français
.
récupérer
date
heure
date
(
)
simple
être
de
utiliser
fonction
«
date
»
retourner
heure
local
sous
forme
de
chaîne
de
caractère
à
préciser
en
premier
paramètre
.
en
second
paramètre
pouvoir
préciser
«
timestamp
»
souhaiter
heure
actuel
.
pour
récupérer
date
jour
:
echo
date
(
`
`
d
/
m
/
'
'
)
;
/
/
/
/
caractère
utilisable
(
documentation
PHP
)
:
•
avoir
-
`
`
am
'
'
(
matin
)
`
`
pm
'
'
(
après-midi
)
•
à
-
`
`
AM
'
'
(
matin
)
`
`
PM
'
'
(
après-midi
)
•
B
-
heure
Internet
Swatch
•
d
-
jour
mois|moi
,
sur
deux
chiffre
(
avec
zéro
)
:
`
`
'
'
à
`
`
'
'
•
D
-
jour
de
semaine
,
en
trois
lettre
(
en
anglais
)
:
par
exemple
`
`
Fri
'
'
(
pour
vendredi
)
•
F
-
mois|moi
,
textuel
,
version
longue
;
en
anglais
,
i.e.
.
`
`
January
'
'
(
pour
janvier
)
•
g
-
heure
,
format
12h
,
sans
zéro
initial
i.e.
.
`
`
'
'
à
`
`
'
'
•
G
-
heure
,
format
24h
,
sans
zéro
initial
i.e.
.
`
`
'
'
à
`
`
'
'
•
heure
-
heure
,
format
12h
,
`
`
'
'
à
`
`
'
'
•
heure
-
heure
,
format
24h
,
`
`
'
'
à
`
`
'
'
•
i
-
minute
;
`
`
'
'
à
`
`
'
'
•
I
(
i
majuscule
)
-
`
`
'
'
heure
de
été
être
activer
,
`
`
'
'
heure
de
hiver
.
•
j
-
jour
mois|moi
sans
zéro
initial
:
`
`
'
'
à
`
`
'
'
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
l
-
(
'
L
'
minuscule
)
-
jour
de
semaine
,
textuel
,
version
longue
;
en
anglais
,
i.e.
.
`
`
Friday
'
'
(
pour
vendredi
)
•
L
-
booléen
pour
savoir
année
être
bissextile
(
`
`
'
'
)
(
`
`
'
'
)
•
m
-
mois|moi
;
i.e.
.
`
`
'
'
à
`
`
'
'
•
M
-
mois|moi
,
en
trois
lettre
(
en
anglais
)
:
par
exemple
`
`
Apr
'
'
(
pour
avril
)
•
n
-
mois|moi
sans
zéro
initial
;
i.e.
.
`
`
'
'
à
`
`
'
'
•
O
-
différence
de
heure
avec
heure
de
Greenwich
,
exprimer
en
heure
;
i.e.
.
`
`
'
'
•
r
-
format
de
date
RFC
;
i.e.
.
`
`
Thu
,
Dec
:
:
'
'
(
ajouter
en
PHP
)
•
s
-
second
;
i.e.
.
`
`
'
'
à
`
`
'
'
•
S
-
suffixe
ordinal
de
nombre
,
en
anglais
,
sur
deux
lettre
:
i.e.
.
`
`
th
'
'
,
`
`
nd
'
'
•
t
-
nombre
de
jour
dans
mois|moi
donner
,
i.e.
.
`
`
'
'
à
`
`
'
'
•
T
-
fuseau
horaire
de
machine
;
i.e.
.
`
`
mettre
'
'
•
U
-
seconde|second
depuis
époque
•
w
-
jour
de
semaine
,
numérique
,
i.e.
.
`
`
'
'
(
dimanche
)
to
`
`
'
'
(
samedi
)
•
W
-
numéro
de
semaine
dans
année
ISO-8601
:
semaine
commencer
lundi
(
ajouter
en
PHP
)
•
-
année
,
chiffre
;
i.e.
.
`
`
'
'
•
-
année
,
chiffre
;
i.e.
.
`
`
'
'
•
z
-
jour
de
année
;
i.e.
.
`
`
'
'
à
`
`
'
'
•
z
-
décalage
horaire
en
second
(
i.e.
.
`
`
'
'
à
`
`
'
'
)
autre
caractère
pouvoir
être
employer
être
interpréter
.
désirer
employer
un
de
caractère
,
falloir
verrouiller
avec
antislash
.
attention
avec
fonction
RESULTAT
être
en
anglais
.
pouvoir
récupérer
timestamp
actuel
avec
fonction
«
time
»
.
commande
suivant
avoir
même
effet
précédent
:
echo
date
(
`
`
d
/
m
/
'
'
,
time
(
)
)
;
/
/
/
/
date
local
strftime
(
)
pour
formater
résultat
en
local
(
pour
tenir
compte
de
localisation
)
falloir
utiliser
fonction
«
strftime
»
tenir
compte
de
langue
.
avoir
résultat
en
français
.
premier
paramètre
être
chaîne
de
formatage
.
second
être
éventuel
timestamp
.
•
%
avoir
-
nom
abréger
jour
de
semaine
(
local
)
.
•
%
à
-
nom
complet
jour
de
semaine
(
local
)
.
•
%
b
-
nom
abréger
mois|moi
(
local
)
.
•
%
B
-
nom
complet
mois|moi
(
local
)
.
•
%
c
-
représentation
préférer
pour
date
heure
,
en
local
.
•
%
C
-
numéro
de
siècle
(
année
,
diviser
par
arrondir
entre
)
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
%
d
-
jour
mois|moi
en
numérique
(
intervalle
à
)
•
%
D
-
identique
à
%
m
/
%
d
/
%
•
%
e
-
numéro
jour
mois|moi
.
chiffre
être
précéder
de
espace
(
de
'
'
à
'
'
)
•
%
heure
-
identique
à
%
b
•
%
heure
-
heure
de
journée
en
numérique
,
sur
24-heures
(
intervalle
de
à
)
•
%
I
-
heure
de
journée
en
numérique
,
sur
heure
(
intervalle
à
)
•
%
j
-
jour
de
année
,
en
numérique
(
intervalle
à
)
•
%
m
-
mois|moi
en
numérique
(
intervalle
à
)
•
%
M
-
minute
en
numérique
•
%
n
-
newline
character
•
%
p
-
àm
'
oùpm
'
en
fonction
de
heure
absolu
,
en
fonction
valeur
enregistrer
en
local
.
•
%
r
-
heure
format
a.m.
.
p.m.
.
•
%
R
-
heure
format
24h
•
%
S
-
seconder
en
numérique
•
%
t
-
tabulation
•
%
T
-
heure
actuel
(
égal
à
%
heure
:
%
M
:
%
S
)
•
%
u
-
numéro
de
jour
dans
semaine
,
de
à
.
(
représenter
lundi
)
•
%
U
-
numéro
de
semaine
dans
année
,
en
considérer
premier
dimanche
de
année
premier
jour
de
premier
semaine
.
•
%
V
-
numéro
de
semaine
définir
dans
ISO
:
,
sous
forme
décimal
,
de
à
.
semaine
être
premier
semaine
avoir
de
jour
dans
année
courant
,
lundi
être
premier
jour
.
•
%
W
-
numéro
de
semaine
dans
année
,
en
considérer
premier
lundi
de
année
premier
jour
de
premier
semaine
•
%
w
-
jour
de
semaine
,
numérique
,
avec
dimanche
=
•
%
x
-
format
préférer
de
représentation
de
date
sans
heure
•
%
X
-
format
préférer
de
représentation
de
heure
sans
date
•
%
-
année
,
numérique
,
sur
deux
chiffre
(
de
à
)
•
%
-
année
,
numérique
,
sur
quatre
chiffre
•
%
z
-
fuseau
horaire
,
nom
abréviation
•
%
%
-
caractèrè
%
'
littéral
retour
par
tableau
getdate
(
)
fonction
«
getdate
»
permettre
de
récupérer
date
heure
actuel
(
avec
timestamp
en
paramètre
)
sous
forme
de
tableau
indexer
selon
valeur
suivant
:
•
`
`
second
'
'
-
second
•
`
`
minute
'
'
-
minute
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
`
`
hours
'
'
-
heure
•
`
`
mday
'
'
-
jour
mois|moi
•
`
`
wday
'
'
-
jour
de
semaine
,
numérique
.
:
dimanche
jusqu
'
à
:
samedi
•
`
`
'
'
-
mois|moi
,
numérique
•
`
`
year
'
'
-
année
,
numérique
•
`
`
yday
'
'
-
jour
de
année
,
numérique
;
i.e.
.
`
`
'
'
•
`
`
weekday
'
'
-
jour
de
semaine
,
texte
complet
(
en
anglais
)
;
i.e.
.
`
`
Friday
'
'
•
`
`
month
'
'
-
mois|moi
,
texte
complet
(
en
anglais
)
;
i.e.
.
`
`
January
'
'
$
aujourdhui
=
getdate
(
)
;
$
mois|moi
=
$
aujourdhui
[
'
month
'
]
;
$
mjour
=
$
aujourdhui
[
'
mday
'
]
;
$
annee
=
$
aujourdhui
[
'
year
'
]
;
echo
`
`
$
mjour
/
$
mois|moi
/
$
annee
'
'
;
heure
localtime
(
)
pour
heure
pouvoir
utiliser
fonction
«
localtime
»
pouvoir
prendre
paramètre
timestamp
retourner
tableau
indexer
selon
valeur
suivant
;
•
`
`
tm_sec
'
'
-
second
•
`
`
tm_min
'
'
-
minute
•
`
`
tm_hour
'
'
-
heure
•
`
`
tm_mday
'
'
-
jour
mois|moi
•
`
`
tm_mon
'
'
-
mois|moi
de
année
•
`
`
tm_year
'
'
-
année
,
incompatible
an
•
`
`
tm_wday
'
'
-
jour
de
semaine
•
`
`
tm_yday
'
'
-
jour
de
année
•
`
`
tm_isdst
'
'
-
Est
heure
de
hiver
avoir
prendre
effet
?
récupérer
importer
dater
pouvoir
récupérer
importer
dater
en
timestamp
en
chaîne
.
pouvoir
pour
utiliser
fonction
«
strtotime
»
.
prendre
paramètre
chaîne
de
texte
en
anglais
essayer
de
convertir
en
timestamp
.
exemple
.
echo
strtotime
(
`
`
now
'
'
)
;
/
/
timestamp
actuel
echo
strtotime
(
`
`
day
'
'
)
;
/
/
hier
echo
strtotime
(
`
`
day
'
'
)
;
/
/
echo
strtotime
(
`
`
september
'
'
)
;
/
/
septembre
echo
strtotime
(
`
`
year
weeks
days
'
'
)
;
/
/
dans
an
semaine
jour
S
.
ROHAUT
courir
programmation
PHP
pager
/
MySQL
présentation
MySQL
être
SGBDR
:
«
système
de
gestion
de
base
de
donnée
relationnel
»
définir
lui-
même
être
«
base
de
donnée
open
source
populaire
monde
»
.
.
être
vrai
!
Edité
par
société
MySQL
,
MySQL
être
produit
open
source
libre
de
utilisation
sous
licence
GPL
pour
projet
libre
.
licence
commercial
être
nécessaire
dans
autre
cas
,
souhaiter
redistribuer
MySQL
avec
produit
libre
souhaiter
support
technique
.
version
de
production
actuel
de
MySQL
être
version
(
à
écriture
de
support
)
,
grand
majorité
serveur
hébergeur
être
dans
dernier
version
de
MySQL
(
)
.
futur
version
en
développement
être
être
à
utiliser
en
production
.
principal
qualité
de
MySQL
être
simplicité
rapidité
.
principal
défaut
être
manque
de
fonctionnalité
dire
avancer
(
dans
version
précédent
)
:
clé
étranger
,
procédure
stocker
,
trigger
selects
imbriquer
.
devoir
occulter
puissance
avec
ajout
de
fonctionnalité
avancer
syntaxe
SQL
étendre
(
replacer
,
limit
,
delete
)
,
index
de
recherche
«
fulltext
»
permettre
de
créer
moteur
de
recherche
,
...
prochain
version
stable
(
)
combler
lacune
précédent
version
avec
support
complet
de
syntaxe
SQL
ANSI-99
.
outil
PhpMyAdmin
rester
entendre
possible
de
utiliser
MySQL
en
ligne
de
commande
,
«
sqlplus
»
de
oracle
,
être
à
aise
avec
environnement
intuitif
.
,
outil
phpMyAdmin
être
interface
web
à
MySQL
permettre
de
effectuer
plupart
tâche
de
maintenance
de
utilisation
.
solution
fonctionner
depuis
importer
navigateur
être
indépendant
de
machine
.
accéder
à
phpMyAdmin
par
URL
http
:
/
/
server_name
/
mysql
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
MysqlCC
MysqlCC
(
MySQL
Control
Center
)
être
front-end
graphique
officiel
de
MySQL
,
développer
par
même
société
.
baser
sur
e
toolkit
Qt
,
être
disponible
sous
Windows
,
Unix
(
linux
)
sur
MacOS
.
permettre
administration
serveur
,
gestion
base
table
,
exécution
de
requête
SQL
interactif
avec
coloration
syntaxique
...
créer
base
à
partir
de
écran
de
accueil
de
phpMyAdmin
,
saisir
nom
de
base
dans
«
créer
base
de
donnée
»
.
falloir
de
préférence
choisir
nom
simple
intuitif
.
cliquer
sur
«
créer
»
.
après
création
nouveau
page
afficher
:
être
page
principal
de
administration
de
base
.
en
être
présent
après
exécution
de
commande
résultat
de
.
écran
permettre
exécution
de
commande
SQL
,
travail
sur
table
.
utilisateur
droit
dans
menu
de
gauche
,
choisir
«
-
»
(
tiret
)
correspondre
à
racine
administration
serveur
MySQL
par
même
.
dans
nouveau
page
,
choisir
«
utilisateur
privilège
»
.
page
suivant
permettre
de
ajouter
utilisateur
.
falloir
faire
attention
à
chose
:
serveur
.
en
effet
,
suivre
configuration
initial
(
sur
Linux
par
exemple
)
droit
dépendre
de
façon
avoir
être
accéder
base
.
localhost
ip-remplacée
>
être
identique
,
base
être
appeler
depuis
autre
IP
autre
nom
,
utilisateur
avoir
droit
.
en
cas
de
doute
,
suffire
de
choisir
«
serveur
»
.
pour
créer
administrateur
,
être
de
donner
privilège
.
pour
utilisateur
«
standard
»
(
requête
de
sélection
,
de
ajout
,
de
mise
à
jour
de
suppression
de
enregistrement
)
choisir
privilège
select
,
insert
,
Update
Delete
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
un
fois
utilisateur
créer
,
base
être
présent
,
pouvoir
affiner
droit
pour
base
.
liste
utilisateur
de
droit
sur
base
être
afficher
en
haut
.
choisir
«
modifier
»
pouvoir
affiner
sélection
en
passer
par
«
autre
privilège
»
:
droit
sur
base
,
table
même
colonne
.
créer
modifier
table
retourner
par
menu
de
gauche
dans
base
existant
.
dans
écran
de
administration
saisir
(
de
page
)
nom
de
table
nombre
de
champ
(
colonne
)
.
être
possible
après
coup
de
rajouter
de
supprimer
.
choisir
«
créer
»
.
étape
suivant
consister
à
définir
table
.
Intéressons-nous
différent
type
de
champ
possible
.
type
numérique
ip-remplacée
>
type
entier
pour
entier
pouvoir
ajouter
mot
clé
«
UNSIGNED
»
:
signer
.
attention
type
BIGINT
avoir
limitation
(
voir
documentation
MySQL
)
.
entre
parenthèse
:
valeur
UNSIGNED
.
être
possible
de
fournir
précision
de
affichage
(
nombre
de
chiffre
)
.
par
exemple
taille
de
pour
TINYINT
équivaloir
à
valeur
de
à
.
•
TINYINT
:
à
(
à
)
•
SMALLINT
:
à
(
à
)
•
MEDIUMINT
:
à
(
à
)
•
INT
INTEGER
:
à
(
à
)
•
BIGINT
:
à
(
à
)
ip-remplacée
>
type
réel
(
flottant
)
•
FLOAT
:
nombre
en
virgule
flottant
•
double
,
double
PRECISION
,
REAL
:
nombre
en
virgule
flottant
double-précision
.
•
DECIMAL
,
DEC
,
NUMERIC
:
spécial
,
valeur
être
«
unpacked
»
:
être
chaîne
texte
ip-remplacée
>
type
booléen
•
bit
,
BOOL
,
BOOLEAN
(
depuis
)
:
bit
,
équivaloir
à
TINYINT
(
)
type
caractère
type
mériter
de
explication
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
ip-remplacée
>
type
char
char
:
chaîne
de
caractère
taille
pouvoir
être
de
à
caractère
.
taille
être
définir
à
création
de
table
.
dans
table
,
champ
prendre
nombre
de
caractère
indiqué
,
même
taille
réel
être
inférieur
.
VARCHAR
:
chaîne
de
caractère
taille
maximal
pouvoir
être
de
à
caractère
longueur
pouvoir
être
variable
.
MySQL
stocker
en
octet
contenir
longueur
de
chaîne
.
être
optimisation
,
chaîne
de
caractère
aller
prendre
octet
en
place
dans
table
.
pouvoir
rajouter
définition
BINARY
.
par
défaut
champ
char
VARCHAR
être
trier
sans
tenir
compte
de
casse
.
attribut
BINARY
permettre
de
trier
en
tenir
compte
de
casse
selon
machine
.
avec
champ
,
espace
final
être
supprimer
.
ip-remplacée
>
type
TEXT
type
TEXT
BLOB
permettre
de
stocker
quantité
variable
de
texte
selon
définition
.
«
L
»
être
longueur
texte
:
•
TINY
(
BLOB
/
TEXT
)
:
L+1
octet
avec
L
<
2^@card@
•
BLOB
/
TEXT
:
L+2
octet
avec
L
<
2^16
•
medium
(
BLOB
/
TEXT
)
:
L+3
octet
avec
L
<
2^24
•
long
(
BLOB
/
TEXT
)
:
L+4
octet
avec
L
<
2^32
TEXT
BLOB
utiliser
de
manière
identique
falloir
respecter
rêgles
suivant
:
•
de
tri
,
champ
BLOB
tenir
compte
de
casse
,
champ
TEXT
.
•
pouvoir
faire
de
recherche
FULLTEXT
sur
champ
de
type
BLOB
.
falloir
utiliser
champ
TEXT
.
•
champ
de
type
TEXT
BLOB
prendre
de
valeur
par
défaut
.
•
espace
final
être
supprimer
.
ip-remplacée
>
type
ENUM
champ
de
type
ENUM
pouvoir
contenir
chaîne
de
texte
par
prédéfinie
à
création
de
table
.
exemple
:
CREATE
tabler
test
(
id
int
NOT
NULL
auto_increment
,
c_enum
enum
(
'
oui
'
,
'
'
)
,
PRIMARY
KEY
(
id
)
)
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
champ
c_enum
pouvoir
prendre
deux
valeur
:
oui
.
tenter
d
'
mettre
autre
chose
:
insert
into
text
(
c_enum
)
valoir
(
'
toto
'
)
;
dans
cas
chaîne
vide
être
insérer
à
place
.
champ
être
déclarer
NOT
NULL
,
valeur
par
défaut
devenir
premier
de
liste
de
énumération
.
ip-remplacée
>
type
set
type
set
ressembler
type
ENUM
sauf
champ
pouvoir
avoir
valeur
parmi
liste
prédéfinir
à
création
de
table
.
dans
type
ENUM
seul
valeur
être
autoriser
dans
champ
.
avec
type
set
,
valeur
séparer
par
espace
être
autoriser
.
CREATE
tabler
test
(
id
int
(
)
NOT
NULL
auto_increment
,
c_set
set
(
'
oui
'
,
'
'
)
,
PRIMARY
KEY
(
id
)
)
;
insert
into
test
(
c_set
)
valoir
(
'
oui
,
'
)
;
insert
into
test
(
c_set
)
valoir
(
'
,
oui
'
)
;
insert
into
test
(
c_set
)
valoir
(
'
oui
)
;
effectuer
recherche
de
élément
set
avec
LIKE
,
avec
fonction
FIND_IN_SET
:
select
*
from
test
where
c_set
LIKE
'
%
oui
%
'
;
select
*
from
test
where
FIND_IN_SET
(
'
oui
'
,
c_set
)
>
;
type
dater
attention
avec
date
:
logique
de
MySQL
être
de
laisser
développeur
soin
de
contrôler
validité
de
date
.
MySQL
autoriser
enregistrement
de
date
de
type
!
seul
test
effectuer
être
validité
mois|moi
(
entre
)
validité
jour
(
entre
)
.
zéro
(
)
être
autoriser
pour
raison
pratique
:
stockage
de
année
,
de
année
/
mois|moi
par
exemple
.
autre
information
:
•
MySQL
,
dans
comparaison
,
essayer
«
de
interpréter
»
format
de
date
passer
.
être
cas
pour
comparaison
entre
champ
de
type
date
champ
texte
.
dans
plupart
cas
résultat
être
attendu
attention
de
formalisme
.
•
date
devoir
être
donner
de
préférence
format
année-mois-jour
.
année
devoir
apparaître
en
premier
.
dans
cas
de
année-jour-mois
attention
:
MySQL
pouvoir
deviner
être
février
mai
...
•
date
être
utiliser
dans
calcul
numérique
,
être
convertir
en
nombre
(
timestamp
)
.
•
valeur
illégal
être
transmettre
,
être
valeur
zéro
(
)
être
retenir
.
valeur
zéro
dépendre
type
de
champ
.
•
gestion
de
an
faire
:
•
dans
cas
de
année
à
chiffre
,
souci
.
valoir
utiliser
S
.
ROHAUT
courir
programmation
PHP
pager
/
année
sur
chiffre
.
•
dans
cas
de
année
à
deux
chiffe
,
être
convertir
en
,
être
convertir
en
.
ip-remplacée
>
format
supporter
•
AAAA-MM-JJ
HH
:
messieurs
:
SS
AA-MM-JJ
HH
:
messieurs
:
SS
.
séparateur
pouvoir
être
importer
:
AAAA
/
messieurs
/
JJ
dns-remplacé
être
valable
•
AAAA-MM-JJ
AA-MM-JJ
,
même
remarque
pour
séparateur
.
•
AAAAMMJJHHMMSS
AAMMJJHHMMSS
chaîne
nombre
avoir
signification
en
date
•
AAAAMMJJ
AAMMJJ
,
même
remarque
ip-remplacée
>
type
DATETIME
type
DATETIME
permettre
de
stocker
date
heure
sous
format
AAAA-MM-JJ
HH
:
messieurs
:
SS
.
zéro
être
:
:
.
ip-remplacée
>
type
date
avec
type
seul
date
être
stocker
format
AAAA-MM-JJ
.
zéro
être
.
ip-remplacée
>
type
TIMESTAMP
type
TIMESTAMP
permettre
de
stocker
timestamp
(
heure
courant
)
de
enregistrement
de
donnée
avec
insert
UPDATE
.
table
disposer
de
champ
TIMESTAMP
,
de
ajout
de
mise
à
jour
de
être
mettre
à
jour
pour
ligne
de
enregistrement
.
colonne
n
'
avoir
besoin
de
être
spécifier
.
spécifier
,
pouvoir
mettre
importer
valeur
.
CREATE
tabler
test
(
id
int
(
)
NOT
NULL
auto_increment
,
c_ts
timestamp
(
)
NOT
NULL
,
c_txt
varchar
(
)
NOT
NULL
default
`
`
,
PRIMARY
KEY
(
id
)
)
insert
into
test
(
c_txt
)
valoir
(
'
toto
'
)
;
select
c_ts
from
test
;
update
test
set
c_txt
=
'
truc
'
;
select
c_ts
from
test
;
remarquer
résultat
retourner
par
MySQL
sur
colonne
TIMESTAMP
être
valeur
timestamp
Unix
(
en
interne
)
valeur
formater
.
par
défaut
TIMESTAMP
S
.
ROHAUT
courir
programmation
PHP
pager
/
retourne
valeur
(
numérique
)
sur
caractère
.
pouvoir
choisir
taille
à
création
de
table
:
•
TIMESTAMP
TIMESTAMP
(
)
:
AAAAMMJJHHMMSS
•
TIMESTAMP
(
)
:
AAMMJJHHMMSS
•
TIMESTAMP
(
)
:
AAMMJJHHMM
•
TIMESTAMP
(
)
:
AAAAMMJJ
•
TIMESTAMP
(
)
:
AAMMJJ
•
TIMESTAMP
(
)
:
AAMM
•
TIMESTAMP
(
)
:
aa
avec
format
,
spécifier
année
mois|moi
jour
même
avec
timestamp
de
de
date
être
invalide
.
ip-remplacée
>
type
TIME
type
TIME
pouvoir
être
utiliser
pour
stocker
information
horaire
.
format
être
HH
:
messieurs
:
SS
HHH
:
messieurs
:
SS
valeur
pouvoir
être
négatif
.
valeur
maximal
possible
aller
de
:
:
à
:
:
.
TIME
servir
qu
'
à
stocker
heure
de
journée
intervalle
durée
expliquer
plage
horaire
.
accéder
:
D
HH
:
messieurs
:
dns-remplacer
:
D
être
jour
.
fraction
être
stocker
.
:
HH
:
messieurs
:
SS
,
HH
:
messieurs
,
D
HH
:
messieurs
:
SS
,
D
HH
:
messieurs
,
D
HH
,
D
SS
,
HHMMSS
,
.SS
,
MMSS
,
...
ip-remplacée
>
typer
YEAR
type
YEAR
stocker
année
,
sur
plage
aller
de
à
.
interprétation
valeur
à
deux
chiffre
soumettre
à
interprétation
de
gestion
de
an
.
création
:
syntaxe
SQL
utiliser
commande
SQL
CREATE
.
CREATE
table
[
if
NOT
EXIST
]
nom_table
(
champ1
type
[
NOT
NULL
|
NULL
]
[
DEFAULT
valeur_defaut
]
[
AUTO_INCREMENT
]
[
PRIMARY
KEY
]
,
...
,
PRIMARY
KEY
(
nom_champ
)
,
KEY
[
nom
]
(
col1
,
col2
,
...
)
,
index
[
nom
]
(
col1
,
col2
,
...
)
,
unique
[
index
]
[
nom
]
(
col1
,
col2
,
...
)
,
FULTEXT
[
index
]
[
nom
]
(
col1
,
col2
,
...
)
)
type
=
type_table
;
noter
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
KEY
index
être
synonyme
.
•
PRIMARY
KEY
être
index
unique
colonne
devoir
être
NOT
NULL
•
PRIMARY
KEY
pouvoir
contenir
colonne
.
dans
cas
,
PRIMARY
KEY
devoir
apparaître
niveau
de
définition
de
colonne
syntaxe
PRIMARY
KEY
(
col
,
...
)
devoir
être
utiliser
•
pouvoir
avoir
seul
index
PRIMARY
KEY
,
index
unique
.
•
application
vouloir
obtenir
PRIMARY
KEY
de
table
exister
,
MySQL
retourner
premier
index
unique
trouver
.
•
donner
de
nom
à
index
,
être
générer
en
prendre
nom
de
premier
colonne
de
index
suivre
de
suffixe
numérique
(
col_1
,
col_2
,
...
)
.
•
être
déconseiller
,
pouvoir
établir
index
sur
colonne
TEXT
BLOB
.
dans
cas
falloir
spécifier
longueur
de
index
.
par
exemple
:
CREATE
tabler
f_message
(
id_message
int
(
)
unsigned
NOT
NULL
auto_increment
,
id_msg_initial
int
(
)
unsigned
NOT
NULL
default
'
'
,
id_msg_prec
int
(
)
unsigned
NOT
NULL
default
'
'
,
id_forum
int
(
)
NOT
NULL
default
'
'
,
login
varchar
(
)
NOT
NULL
default
`
`
,
date
datetime
NOT
NULL
default
'
:
:
'
,
sujet
varchar
(
)
NOT
NULL
default
`
`
,
texte
text
,
PRIMARY
KEY
(
id_message
)
,
KEY
precedent
(
id_msg_prec
)
,
KEY
login
(
login
)
,
KEY
forum
(
id_forum
)
,
KEY
initial
(
id_msg_initial
)
,
FULLTEXT
KEY
ft1
(
sujet
,
texte
)
)
type
=
MyISAM
;
type
de
table
(
MyISAM
InnoDB
)
type
de
table
être
particulier
à
MySQL
.
type
par
défaut
être
«
MyISAM
»
,
gestionnaire
de
table
originel
de
MySQL
,
simple
rapide
,
correspondre
à
majorité
besoin
.
second
type
principal
être
«
InnoDB
»
permettre
gestion
transaction
verrouillage
donnée
.
«
commettre
»
,
«
rollback
»
,
restauration
après
crash
,
contrainte
de
intégrité
avec
clé
étranger
être
possible
.
CREATE
tabler
parent
(
id
INT
NOT
NULL
,
PRIMARY
KEY
(
id
)
)
type
=
INNODB
;
CREATE
tabler
child
(
id
INT
,
parent_id
INT
,
index
par_ind
(
parent_id
)
,
FOREIGN
KEY
(
parent_id
)
REFERENCES
parent
(
id
)
DELETE
set
NULL
)
type
=
INNODB
;
pouvoir
utiliser
clause
«
DELETE
cascade
»
«
DELETE
set
NULL
»
.
règle
être
à
respecter
pour
utilisation
:
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
avec
DELETE
cascade
,
ligne
de
table
parent
être
supprimer
,
ligne
correspondant
à
clé
étranger
être
supprimer
dans
table
fille
.
dans
exemple
,
suppression
de
enregistrement
de
table
«
parent
»
supprimer
enregistrement
de
table
«
child
»
«
parent_id
»
être
égal
«
id
»
de
enregistrement
de
table
«
parent
»
supprimer
.
•
avec
DELETE
set
NULL
,
enregistrement
fils|fil
être
supprimer
,
colonne
de
clé
étranger
(
parent_id
)
prendre
valeur
NULL
.
•
index
devoir
exister
pour
clé
parent
clé
fille
.
index
FULLTEXT
ip-remplacée
>
création
dans
dernier
version
(
supérieur
)
MySQL
permettre
indexation
recherche
sur
un
champ
de
type
TEXT
.
pouvoir
créer
moteur
de
recherche
.
pour
falloir
créer
index
«
FULLTEXT
»
en
texte
entier
,
mot
champ
texte
être
faire
indexer
.
index
FULLTEXT
fonctionner
avec
champ
de
type
TEXT
(
BLOB
)
VARCHAR
sur
table
de
type
MyISAM
.
créer
index
FULLTEXT
.
table
exister
:
CREATE
FULLTEXT
index
ft1
f_message
(
sujet
,
texte
)
;
à
création
de
table
,
rajouter
ligne
de
création
de
index
:
FULLTEXT
KEY
ft1
(
sujet
,
texte
)
pouvoir
préciser
colonne
dans
genre
de
index
.
attention
:
de
recherche
avoir
créer
index
sur
deux
colonne
,
pouvoir
rechercher
sur
seul
deux
colonne
en
même
temps
...
dans
cas
falloir
créer
index
FULLTEXT
.
ip-remplacée
>
recherche
effectuer
recherche
avec
fonction
match
(
)
AGAINST
(
)
.
fonction
match
permettre
de
préciser
sur
colonne
effectuer
recherche
,
fonction
AGAINST
mot
recherché
.
select
id_message
FROM
f_message
WHERE
match
(
sujet
,
texte
)
AGAINST
(
'
linux
nvidia
'
)
;
requête
aller
effectuer
recherche
sur
mot
'
linux
'
'
nvidia
'
dans
colonne
'
sujet
'
'
texte
'
.
aller
retourner
id
message
correspondant
avec
pertinent
en
premier
(
correspondre
à
recherche
)
.
être
devoir
fait
match
être
dans
clause
WHERE
.
pertinence
être
déterminer
par
MySQL
selon
critère
(
opaque
de
)
nombre
de
mot
dans
ligne
,
nombre
de
mot
unique
dans
ligne
,
longueur
de
ligne
.
être
fonction
match
retourner
pertinence
sous
forme
de
flottant
supérieur
égal
à
S
.
ROHAUT
courir
programmation
PHP
pager
/
zéro
.
zéro
signifier
pertinence
nul
(
de
correspondance
)
.
valeur
être
élever
résultat
être
pertinent
.
select
id_message
,
match
(
sujet
,
texte
)
AGAINST
(
'
linux
nvidia
'
)
FROM
f_message
;
requête
récupérer
en
second
colonne
valeur
de
pertinence
.
être
classer
n
'
avoir
de
WHERE
de
ORDER
by
.
dernier
méthode
permettre
de
récupérer
champ
pertinence
trier
par
ordre
de
pertinence
.
select
id_message
,
sujet
match
(
sujet
,
texte
)
AGAINST
(
'
linux
nvidia
'
)
FROM
f_message
WHERE
match
(
sujet
,
texte
)
AGAINST
(
'
linux
nvidia
'
)
;
ip-remplacée
>
rechercher
booléen
version
4.x
de
MySQL
avoir
introduire
notion
de
recherche
booléen
permettre
de
affiner
recherche
.
select
id_message
FROM
f_message
WHERE
match
(
sujet
,
texte
)
AGAINST
(
'
+linux
+nvidia
+ati
'
in
BOOLEAN
mode
)
;
signification
caractère
supplémentaire
•
+
:
mot
devoir
être
présent
dans
enregistrement
retourner
•
-
:
mot
devoir
être
présent
dans
enregistrement
retourner
•
>
<
:
valorisation
mot
.
>
toto
<
titi
valoriser
toto
titi
dans
recherche
•
(
)
:
grouper
série
de
mot
•
~
:
négation
de
mot
.
-
,
mot
être
de
prendre
en
compte
avec
pertinence
négatif
.
•
*
:
tronquage
de
mot
:
bon
*
=
>
bonjour
,
bonsoir
...
•
guillemet
«
`
`
»
:
chaîne
rechercher
.
MySQL
PHP
connexion
à
base
de
donnée
deux
étape
être
nécessaire
de
simplicité
.
seconde|second
être
obligatoire
pratique
dans
cas
travailler
sur
seul
base
de
donnée
dans
page
.
ip-remplacée
>
connexion
serveur
utiliser
fonction
mysql_connect
(
)
.
fonction
prendre
(
minimum
)
trois
paramètre
:
serveur
(
hostname
)
utilisateur
mot
de
passe
.
$
b_host
=
'
'
dns-remplacer
'
'
$
b_user
=
'
'
toto
'
'
;
$
b_pass
=
'
'
CreT1
'
'
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
cnx
=
mysql_connect
(
$
b_host
,
$
b_user
,
$
b_pass
)
;
if
(
!
$
cnx
)
die
(
`
`
erreur
de
connexion
à
MySQL
'
'
)
;
ip-remplacée
>
choix
de
base
choisir
base
de
donnée
par
défaut
avec
fonction
mysql_select_db
(
)
.
prendre
minimum
paramètre
,
nom
de
base
.
second
paramètre
optionnel
être
ressource
retourner
par
mysql_connect
,
en
cas
de
connexion
sur
serveur
MySQL
.
par
défaut
,
fonction
prendre
dernier
connexion
ouvert
(
dernier
mysql_connect
exécuter
)
.
$
b_base
=
'
'
slyunix
'
'
;
$
db
=
msql_select_db
(
$
b_base
)
;
if
(
!
$
db
)
die
(
`
`
erreur
de
connexion
à
base
$
b_base
'
'
)
;
ip-remplacée
>
fermeture
de
connexion
fermer
connexion
à
MySQL
avec
fonction
mysql_close
(
)
.
dans
cas
de
connexion
persistant
(
voir
à
point
)
fonction
être
obligatoire
PHP
connexion
à
fin
de
script
.
mysql_close
(
$
cnx
)
;
ip-remplacée
>
séquencer
complet
pour
base
$
b_host
=
'
'
dns-remplacer
'
'
$
b_user
=
'
'
toto
'
'
;
$
b_pass
=
'
'
CreT1
'
'
;
$
b_base
=
'
'
slyunix
'
'
;
mysql_connect
(
$
b_host
,
$
b_user
,
$
b_pass
)
or
die
(
`
`
erreur
de
connexion
à
MySQL
'
'
)
;
mysql_select_db
(
$
b_base
)
or
die
(
`
`
erreur
à
selection
de
$
b_base
)
;
mysql_close
(
)
;
requête
ip-remplacée
>
exécuter
requête
exécuter
requête
SQL
avec
fonction
mysql_query
(
)
.
fonction
prendre
paramètre
:
requête
SQL
sous
forme
de
chaîne
.
fonction
retourner
FALSE
en
cas
de
échec
(
colonne
table
invalide
,
droit
insuffisant
,
de
connexion
,
etc
)
.
attention
:
être
appel
à
mysql_query
(
)
n
'
avoir
retourner
de
erreur
fonction
retourner
ligne
de
résultat
dans
cas
de
select
par
exemple
.
,
requête
SQL
devoir
finir
par
point-virgule
.
requête
pouvoir
être
de
importer
type
(
selection
,
mettre
à
jour
,
destruction
,
etc
)
.
dans
cas
de
select
,
show
,
EXPLAIN
DESCRIBE
,
mysql_query
(
)
retourner
ressource
être
utiliser
pour
lire
résultat
.
$
result
=
mysql_query
(
`
`
select
id_message
,
sujet
from
f_message
'
'
)
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
ip-remplacée
>
nombre
de
ligne
affecter
dans
cas
de
DELETE
,
insert
,
replacer
UPDATE
,
pouvoir
connaître
nombre
de
ligne
affecter
(
modifier
)
par
requête
à
aide
de
fonction
mysql_affected_rows
(
)
.
$
result
=
mysql_query
(
`
`
delete
from
f_message
where
login
=
'
toto
'
'
'
)
;
if
(
$
result
)
echo
mysql_affected_rows
(
)
.
'
'
enregistrement
supprimer
'
'
;
ip-remplacée
>
nombre
de
ligne
retourner
dans
cas
de
select
,
nombre
de
enregistrement
(
ligne
)
retourner
être
obtenir
avec
fonction
mysql_num_rows
(
)
.
$
result
=
mysql_query
(
`
`
select
*
from
f_message
where
id_message
>
'
'
)
;
if
(
$
result
)
echo
mysql_num_rows
(
)
.
'
enregistrement
retourner
'
)
;
ip-remplacée
>
récupérer
résultat
fonction
sympathique
pour
récupérer
enregistrement
après
exécution
de
sélection
être
mysql_fetch_array
(
)
.
prendre
minimum
paramètre
:
ressource
résultat
(
résultat
de
mysql_query
)
.
retourner
ligne
de
résultat
sous
forme
de
tableau
associatif
,
de
tableau
indexer
deux
.
par
défaut
,
tableau
retourner
être
à
fois
associatif
indexer
.
dans
tableau
associatif
,
index
tableau
être
nom
champ
correspondre
à
colonne
.
dans
tableau
indexer
,
colonne
être
numéroter
à
partir
de
zéro
.
noter
mysql_fetch_array
(
)
retourne
seul
ligne
de
résultat
.
pour
passer
à
suivant
,
falloir
exécuter
fonction
à
nouveau
.
retourner
FALSE
n
'
avoir
de
ligne
à
lire
.
$
result
=
mysql_query
(
`
`
select
sujet
,
texte
from
f_message
where
login
=
'
toto
'
'
'
)
;
$
tab
=
mysql_fetch_array
(
$
result
)
;
/
/
premier
ligne
résultat
echo
$
tab
[
'
sujet
'
]
.
'
,
'
.
$
tab
[
'
texte
'
]
;
/
/
afficher
champ
sujet
texte
echo
$
tab
[
]
.
'
,
'
.
$
tab
[
]
;
/
/
colonne
porter
même
nom
,
dernier
colonne
être
prioritaire
.
dans
requête
afficher
nom
de
colonne
identique
,
être
de
renommer
:
select
dns-remplacé
avoir
col1
,
t2_nom
avoir
col2
FROM
t1
,
t2
...
second
paramètre
de
mysql_fetch_array
(
)
pouvoir
être
:
•
MYSQL_ASSOC
:
résultat
être
tableau
associatif
(
index
=
nom
de
colonne
)
•
MYSQL_NUM
:
résultat
être
tableau
indexer
.
•
MYSQL_BOTH
(
par
défaut
)
:
deux
récupérer
résultat
:
$
result
=
mysql_query
(
`
`
select
sujet
,
texte
from
f_message
where
login
=
'
toto
'
'
'
)
;
while
(
$
result
&
&
$
tab
=
mysql_fetch_array
(
$
result
)
)
{
echo
$
tab
[
'
sujet
'
]
.
'
,
'
.
$
tab
[
'
texte
'
]
;
/
/
afficher
champ
sujet
texte
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
noter
expression
while
.
pour
rentrer
,
falloir
résultat
de
requête
(
$
result
)
FALSE
(
requête
avoir
fonctionner
)
rester
ligne
à
lire
.
dire
requête
retourner
,
rentrer
dans
boucle
.
noter
exister
deux
autre
fonction
possible
:
•
mysql_fetch_row
(
)
:
équivaloir
à
mysql_fetch_array
(
$
var
,
MYSQL_NUM
)
•
mysql_fetch_assoc
(
)
:
équivaloir
à
mysql_fetch_array
(
$
var
,
MYSQL_ASSOC
)
ip-remplacée
>
insertion
auto-incrément
identifier
unique
de
table
être
entier
auto-incrémenté
.
avantage
être
n
'
avoir
besoin
de
gérer
identifier
,
être
MySQL
déterminer
seul
.
dans
cas
,
pouvoir
être
nécessaire
de
récupérer
valeur
de
champ
auto-incrémenter
après
insertion
,
par
exemple
,
mettre
à
jour
autre
enregistrement
(
liste
chaîner
,
jointure
,
etc
)
.
utiliser
pour
fonction
mysql_insert_id
(
)
.
$
result
=
mysql_query
(
`
`
insert
into
f_message
(
sujet
,
texte
)
valoir
(
'
test
'
,
'
test
'
)
'
'
)
;
$
id
=
mysql_insert_id
(
)
;
$
result
=
mysql_query
(
`
`
select
sujet
,
texte
from
f_message
where
id_message
=
$
id
'
'
)
;
$
tab
=
mysql_fetch_array
(
$
result
)
;
echo
$
tab
[
'
sujet
'
]
.
'
,
'
.
$
tab
[
'
texte
'
]
;
/
/
test
,
test
récupération
erreur
en
cas
de
erreur
de
manipulation
sur
MySQL
,
pouvoir
récupérer
numéro
de
erreur
MySQL
par
fonction
mysql_errno
(
)
.
de
pouvoir
récupérer
message
de
erreur
par
fonction
mysql_error
(
)
.
pouvoir
trouver
liste
code
de
erreur
:
http
:
/
/
dns-remplacer
/
doc
/
/
dns-remplacer
S
.
ROHAUT
courir
programmation
PHP
pager
/
système
de
fichier
travail
sur
fichier
ouverture
fonction
fopen
(
)
permettre
de
ouvrir
de
créer
fichier
selon
divers
mode
.
prendre
en
premier
pramètre
nom
fichier
avec
chemin
.
nom
de
fichier
pouvoir
être
URL
(
falloir
pour
directive
allow_url_fopen
être
activer
dans
dns-remplacé
)
.
second
paramètre
être
mode
de
ouverture
:
–
r
:
lecture
seul
,
en
début
de
fichier
–
r+
:
lecture
/
écriture
,
en
début
de
fichier
–
w
:
écriture
seul
,
taille
fichier
à
(
ancien
contenu
effacer
)
,
créer
exister
–
w+
:
lecture
/
écriture
,
taille
fichier
à
,
créer
exister
–
avoir
:
écriture
seul
,
en
fin
de
fichier
,
créer
exister
–
a+
:
lecture
/
écriture
,
en
fin
de
fichier
,
créer
exister
.
pouvoir
sous
Windows
rajouter
lettre
'
b
'
pour
type
binaire
,
inutile
sous
Unix
.
,
fopen
(
)
admettre
troisième
paramètre
:
.
dans
cas
fichier
à
ouvrir
être
rechercher
dans
include_path
(
voir
dns-remplacer
)
.
valeur
retourner
être
ressource
de
fichier
(
identifier
de
fichier
)
valeur
FALSE
en
cas
de
échec
.
$
filer
=
fopen
(
'
dns-remplacer
'
,
'
a+
'
,
)
;
lecture
ip-remplacée
>
fgets
(
)
fonction
fgets
(
)
permettre
de
lire
ligne
de
fichier
en
mode
texte
.
fonction
arrêter
arriver
à
fin
fichier
à
retour
chariot
.
pouvoir
préciser
en
second
paramètre
longueur
de
texte
en
octet
être
par
défaut
paramètre
être
obligatoire
avant
version
.
premier
paramètre
être
identifier
fichier
.
FALSE
être
retourner
en
cas
de
erreur
.
attention
:
fgets
(
)
retourner
FALSE
à
fin
fichier
.
$
ligner
=
fgets
(
$
file
)
;
ip-remplacée
>
fread
(
)
;
fonction
fread
(
)
permettre
de
lire
fichier
en
mode
binaire
.
second
paramètre
être
longueur
souhaiter
.
sous
Windows
falloir
penser
à
placer
'
b
'
dans
fopen
(
)
.
lecture
arrêter
n
octet
(
longueur
)
avoir
être
lire
,
fin
fichier
avoir
être
atteindre
erreur
être
survenir
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
file
=
fopen
(
'
dns-remplacer
'
,
'
rb
'
)
;
$
img
=
fread
(
$
file
,
$
filesize
(
'
dns-remplacer
'
)
)
;
fclose
(
$
file
)
;
ip-remplacée
>
fscanf
(
)
fonction
fscanf
(
)
lit
ligne
de
fichier
en
fonction
de
formatage
particulier
.
$
filer
=
fopen
(
'
dns-remplacer
'
,
'
r
'
)
;
while
(
$
ligne
=
fscanf
(
$
file
,
'
'
%
s\t
%
s\t
%
s\n
'
'
)
)
{
echo
$
ligne
;
}
ip-remplacée
>
fgetc
(
)
fonction
fgetc
(
)
lire
seul
caractère
dans
fichier
.
à
fgets
(
)
,
retourner
FALSE
à
fin
fichier
.
premier
paramètre
être
identifier
fichier
.
ip-remplacée
>
fgetss
(
)
fonction
fgetss
(
)
fonction
être
identique
à
fgets
(
)
ligne
retourner
être
débarrasser
de
éventuel
balise
PHP
HTML
.
pouvoir
préciser
en
troisième
paramètre
liste
de
balise
autoriser
.
ip-remplacée
>
fgetcsv
(
)
fonction
fgetcsv
(
)
être
fonction
puissant
permettre
de
lire
fichier
de
type
CSV
,
être
à
dire
champ
être
délimiter
,
pour
récupérer
champ
dans
tableau
.
Lesond
paramètre
être
longueur
maximal
de
ligne
fichier
,
troisième
paramètre
séparateur
,
être
virgule
par
défaut
.
exemple
permettre
de
lire
fichier
CSV
de
afficher
résultat
sous
forme
de
tableau
HTML
:
$
filename
=
`
`
dns-remplacer
'
'
;
$
id
=
fopen
(
$
filename
,
`
`
r
'
'
)
;
while
(
$
dater
=
fgetcsv
(
$
id
,
filesize
(
$
filename
)
)
)
$
table
[
]
=
$
dater
;
fclose
(
$
id
)
;
echo
`
`
<
table
>
\n
'
'
;
foreach
(
$
table
avoir
$
row
)
{
echo
`
`
<
tr
>
'
'
;
foreach
(
$
row
avoir
$
dater
)
echo
`
`
<
td
>
$
dater
<
/
td
>
'
'
;
echo
`
`
<
/
tr
>
\n
'
'
;
}
echo
`
`
<
/
table
>
\n
'
'
;
ip-remplacée
>
renvoyer
fichier
par
sortie
standard
fonction
readfile
(
)
prendre
paramètre
nom
de
fichier
renvoyer
contenu
par
sortie
standard
.
fonction
readgzfile
(
)
effectuer
même
chose
fichier
être
format
compresser
gzip
(
zlib
)
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
Ecriture
deux
fonction
fwrite
(
)
fputs
(
)
être
identique
%
fputs
(
)
être
de
fwrite
(
)
.
écrire
chaîne
dans
fichier
.
pouvoir
limiter
longueur
de
chaîne
en
troisième
paramètre
par
défaut
chaîne
être
écrire
.
valeur
retourner
être
nombre
de
octet
écrire
,
FALSE
en
cas
de
erreur
.
$
filer
=
fopen
(
'
dns-remplacer
'
,
'
avoir
)
;
$
ret
=
fwrite
(
$
file
,
'
ligne
dans
fichier
'
)
;
fclose
(
$
file
)
;
en
cas
de
travail
sur
fichier
binaire
,
falloir
oublier
sous
Windows
de
rajouter
option
'
b
'
.
déplacement
ip-remplacée
>
fseek
(
)
fonction
fseek
(
)
permettre
de
déplacer
dans
fichier
.
second
paramètre
(
offset
)
être
nombre
de
octet
de
déplacement
.
pouvoir
être
négatif
.
par
défaut
déplacement
être
calculer
à
partir
début
fichier
troisième
paramètre
pouvoir
modifier
état
.
valeur
retourner
être
(
zéro
)
en
cas
de
réussite
,
.
positionnement
après
fin
fichier
être
erreur
.
–
SEEK_SET
:
calcul
à
partir
début
fichier
.
position
final
:
Début+offset
–
SEEK_CUR
:
calcul
à
partir
de
emplacement
actuel
.
position
final
:
Actuelle+offset
–
SEEK_END
:
calcul
à
partir
de
fin
fichier
.
position
final
:
Fin+Offset
.
$
ret
=
fseek
(
$
file
,
,
SEEK_END
)
;
/
/
fin
fichier
ip-remplacée
>
ftell
(
)
fonction
fseek
(
)
renvoyer
position
actuel
pointeur
dans
fichier
.
$
pos
=
ftell
(
$
file
)
;
ip-remplacée
>
rewind
(
)
fonction
rewind
(
)
permettre
de
retourner
début
fichier
.
retourner
TRUE
en
cas
de
réussite
,
FALSE
.
fin
de
fichier
fonction
feof
(
)
indique
être
à
fin
fichier
.
retourner
TRUE
fin
de
fichier
avoir
être
atteindre
,
FALSE
.
$
fd
=
fopen
(
`
`
/
tmp
/
dns-remplacer
'
'
,
`
`
r
'
'
)
;
while
(
!
feof
(
$
fd
)
)
{
$
buffer
=
fgets
(
$
fd
,
)
;
echo
$
buffer
;
}
fclose
(
$
fd
)
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
fermeture
fermer
fichier
avec
fonction
fclose
(
)
.Elle
retourner
TRUE
en
cas
de
réussite
,
FALSE
.
travail
sur
répertoire
répertoire
actuel
fonction
getcwd
(
)
retourner
nom
dossier
de
travail
courant
,
être
à
dire
être
.
attention
sous
Windows
:
fonction
faire
de
distinction
entre
majuscule
minuscule
.
$
chemin
=
getcwd
(
)
;
echo
$
chemin
;
:
:
/
srv
/
www
/
site
déplacer
déplacer
avec
fonction
chdir
(
)
.
argument
pouvoir
être
absoudre
relatif
.
en
cas
de
erreur
,
FALSE
être
retourner
.
if
(
chdir
(
'
.
/
rep
'
)
)
getcwd
(
)
;
else
die
(
'
impossible
de
déplacer
'
)
;
ouvrir
,
lister
,
fermer
ouvrir|ouvrer
répertoire
en
lecture
avec
fonction
opendir
(
)
prendre
unique
paramètre
nom
chemin
de
répertoire
.
en
cas
de
échec
,
fonction
retourner
FALSE
identifier
(
handler
)
de
répertoire
.
lire
entrée
avec
fonction
readdir
(
)
prendre
paramètre
identifier
de
répertoire
.
n
'
avoir
à
lire
,
fonction
retourner
FALSE
retourner
nom
de
entrée
lire
.
attention
,
entrée
«
.
»
«
.
.
»
être
lire
autre
.
fermer
répertoire
en
cours|cour
de
lecture
avec
fonction
closedir
(
)
prendre
paramètre
identifier
de
répertoire
.
$
handle
=
opendir
(
'
.
'
)
;
while
(
$
filer
=
readdir
(
$
handle
)
)
{
if
(
$
file
!
=
`
`
.
'
'
&
&
$
file
!
=
`
`
.
.
'
'
)
{
echo
`
`
$
file\n
'
'
;
}
}
closedir
(
$
handle
)
;
pouvoir
retourner
début
répertoire
avec
fonction
rewinddir
(
)
prendre
paramètre
identifier
de
répertoire
.
prochain
lecture
être
premier
répertoire
.
récupérer
entrée
même
être
possible
de
récupérer
ensemble
entrée
de
répertoire
avec
fonction
S
.
ROHAUT
courir
programmation
PHP
pager
/
précédent
boucle
,
fonction
scandir
(
)
proposer
même
chose
,
en
ligne
en
placer
nom
de
fichier
chemin
indiquer
dans
tableau
.
premier
paramètre
être
chemin
de
répertoire
.
second
être
optionnel
définir
ordre
tri
être
alphabétique
par
défaut
.
«
»
indiquer
tri
alphabétique
décroître
.
$
file
=
scandir
(
'
.
/
rep
'
)
;
print_r
(
$
file
)
;
travail
sur
système
de
fichier
information
sur
fichier
pouvoir
obtenir
divers
information
sur
fichier
à
aide
commande
de
type
is_x
(
)
:
–
is_dir
(
)
:
TRUE
nom
de
fichier
être
répertoire
–
is_file
(
)
:
TRUE
nom
de
fichier
être
véritable
fichier
normal
–
is_executable
(
)
:
TRUE
fichier
être
exécutable
.
sous
Windows
falloir
PHP
5.x
.
–
is_readable
(
)
:
TRUE
sir
fichier
être
lisible
–
is_writeable
(
)
,
is_writable
(
)
:
TRUE
fichier
être
accessible
en
écriture
–
is_link
(
)
:
TRUE
fichier
être
lien
.
de
,
pouvoir
obtenir
détail
sur
fichier
avec
fonction
filexxx
(
)
:
–
file_exists
(
)
:
TRUE
fichier
exister
–
fileatime
(
)
:
retourne
sous
forme
de
TIMESTAMP
dernier
date
de
accès
.
sous
Windows
,
être
dernier
date
de
modification
.
–
filectime
(
)
:
retourner
date
de
création
–
filemtime
(
)
:
retourner
date
de
modification
–
filegroup
(
)
:
retourner
GID
fichier
.
récupérer
nom
réel
groupe
avec
fonction
posix_getgrgid
(
)
.
–
fileowner
(
)
:
retourner
UID
fichier
.
récupérer
nom
réel
de
utilisateur
avec
fonction
posix_getpwuid
(
)
.
–
fileinode
(
)
:
retourner
inode
fichier
–
fileperm
(
)
:
retourner
permission
fichier
.
attention
résultat
être
en
base
.
falloir
convertir
en
base
avec
fonction
base_convert
(
)
.
–
filesize
(
)
:
retourner
taille
fichier
en
octet
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
–
filetype
(
)
:
retourner
type
fichier
.
attention
agir
type
de
fichier
sur
disque
,
de
contenu
(
image
,
etc
)
:
fifo
,
char
,
dir
,
block
,
link
,
file
,
unknown
.
fichier
être
ouvrir
pouvoir
obtenir
information
avec
fonction
fstat
(
)
prendre
paramètre
identifier
de
fichier
retourner
par
fopen
(
)
retourner
tableau
indexer
associatif
.
fonction
stat
(
)
retourner
même
chose
préciser
chemin
nom
de
fichier
.
fonction
lstat
(
)
être
quasi-identique
sauf
dans
cadre
lien
,
être
information
sur
lien
même
(
fichier
pointé
)
être
retourner
.
volume
(
dev
)
inode
(
ino
)
droit
de
accès
fichier
(
mode
de
protection
inode
)
.
à
convertir
en
octal
.
voir
fileperm
(
)
.
(
mode
)
nombre
de
lien
(
nlink
)
id
de
utilisateur
propriétaire
(
uid
)
id
groupe
propriétaire
(
gid
)
type
volume
de
inode
*
(
rdev
)
taille
en
octet
(
size
)
date
dernier
accès
(
atime
)
date
de
dernier
modification
(
mtime
)
10.date
dernier
changement
(
ctime
)
11.taille
de
bloc
système
pour
entrée
/
sortie
*
(
blksize
)
12.nombre
de
bloc
alloué
(
block
)
action
sur
fichier
répertoire
retrouver
fonction
porter
même
nom
équivalent
sous
shell
Unix
:
–
dirname
(
)
,
basemane
(
)
:
isoler
chemin
nom
de
fichier
–
chown
(
)
,
chgrp
(
)
:
changer
propriétaire
groupe
de
fichier
.
premier
paramètre
être
fichier
,
second
groupe
propriétaire
(
UID
,
GID
,
en
lettre
)
–
chmod
(
)
:
modifier
droit
.
premier
paramètre
être
nom
fichier
,
second
droit
en
octal
.
attention
sous
Windows
,
résultat
pouvoir
surprendre
...
S
.
ROHAUT
courir
programmation
PHP
pager
/
–
copy
(
)
:
copie
de
fichier
:
source
destination
–
link
(
)
:
créer
lien
hard
link
:
cible
,
nom
lien
–
symlink
(
)
:
créer
lien
symbolique
:
cible
,
nom
lien
–
mkdir
(
)
:
créer
répertoire
,
second
paramètre
être
mode
(
droit
par
défaut
)
avant
application
masque
.
–
rename
(
)
:
renommer
/
déplacer
fichier
:
orgine
,
destination
.
–
rmdir
(
)
:
supprimer
répertoire
.
devoir
être
vide
.
–
unlink
(
)
:
supprimer
fichier
.
–
umask
(
)
:
modifier
umask
par
défaut
Upload
de
fichier
upload
de
fichier
permettre
de
envoyer
depuis
poste
client
fichier
sur
serveur
.
opération
nécessiter
navigateur
savoir
prendre
en
charge
balise
spécial
appel
de
script
PHP
.
côté
page
HTML
,
falloir
modifier
définition
de
formulaire
,
placer
champ
formulaire
de
type
filer
indiquer
taille
maximal
fichier
télécharger
avec
nom
HIDDEN
de
bom
MAX_FILE_SIZE
.
taille
être
préciser
en
octet
.
champ
devoir
être
placer
avant
apparition
champ
de
type
file
.
formulaire
devoir
être
de
type
POST
(
GET
être
possible
,
voir
documentation
PHP
)
type
de
encodage
ENCTYPE
`
`
/
multipart
/
form-data
'
'
devoir
être
préciser
.
<
form
ENCTYPE
=
'
'
multipart
/
form-data
'
'
action
=
'
'
/
dns-remplacer
'
'
method
=
'
'
post
'
'
>
<
input
type
=
'
'
hidden
'
'
name
=
'
'
MAX_FILE_SIZE
'
'
value
=
'
'
'
'
>
<
input
NAME
=
'
'
avatar
'
'
type
=
'
'
file
'
'
SIZE
=
>
<
input
type
=
'
'
submit
'
'
value
=
'
'
enregistrer
'
'
/
>
<
/
form
>
note
:
navigateur
ficher
poid
(
taille
)
fichier
envoyer
en
réagir
à
variable
MAX_FILE_SIZE
.
dans
cas
vérification
devoir
être
faire
côté
serveur
.
pire
pouvoir
limiter
côté
serveur
taille
maximal
à
aide
paramètre
upload_max_filesize
dans
dns-remplacé
.
choisir
fichier
via
boite
de
dialogue
gestionnaire
de
fichier
cliquer
sur
bouton
parcourir
.
fois
formulaire
valider
,
donnée
formulaire
fichier
être
envoyer
à
page
PHP
.
côté
PHP
,
récupérer
information
sur
fichier
uploadé
via
tableau
$
_FILE
index
être
suivant
$
_FILE
[
nom
]
[
propiete
]
nom
être
nom
champ
formulaire
filer
propriété
:
–
$
_FILES
[
'
userfile
'
]
[
'
name
'
]
:
nom
original
fichier
,
sur
machine
client
web
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
–
$
_FILES
[
'
userfile
'
]
[
'
type
'
]
:
type
mimer
fichier
,
navigateur
avoir
fournir
information
.
par
exemple
,
pouvoir
être
`
`
image
/
gif
'
'
–
$
_FILES
[
'
userfile
'
]
[
'
size
'
]
:
taille
,
en
octet
,
fichier
téléchargé
.
–
$
_FILES
[
'
userfile
'
]
[
'
tmp_name
'
]
:
nom
temporaire
fichier
être
charger
sur
machine
serveur
.
–
$
_FILES
[
'
userfile
'
]
[
'
error
'
]
:
code
de
erreur
associer
téléchargement
de
fichier
(
PHP
)
par
défaut
fichier
téléchargé
en
attente
de
déplacement
être
placer
dans
répertoire
temporaire
système
(
variable
système
TEMP
TMPDIR
)
dans
répertoire
préciser
par
paramètre
de
configuration
upload_tmp_dir
fichier
dns-remplacé
.
être
conseiller
de
initialiser
de
utiliser
paramètre
.
chemin
fichier
temporaire
uploadé
être
:
$
tmp_file
=
ini_get
(
`
`
upload_tmp_dir
'
'
)
.
'
/
'
.
$
_FILE
[
'
userfile
'
]
[
'
tmp_name
'
]
;
pour
savoir
fichier
avoir
être
uploadé
par
méthode
POST
,
pouvoir
utiliser
fonction
is_uploaded_file
(
)
prendre
paramètre
nom
fichier
uploadé
.
if
(
is_uploaded_file
(
$
_FILE
[
'
userfile
'
]
[
'
name
'
]
)
)
{
/
/
tmp_name
echo
$
_FILES
[
'
userfile
'
]
[
'
size
'
]
;
}
savoir
position
fichier
temporaire
uploadé
avoir
être
uploadé
,
pouvoir
utiliser
fonction
copy
.
être
de
utiliser
fonction
move_uploaded_file
(
)
tester
réussite
de
upload
déplacer
fichier
.
premier
paramètre
être
nom
fichier
uploadé
.
pouvoir
être
nom
champ
file
,
nom
réel
fichier
nom
fichier
temporaire
.
if
(
move_uploaded_file
(
$
_FILES
[
'
avatar
'
]
[
'
tmp_name
'
]
,
$
_SERVER
[
'
DOCUMENT_ROOT
'
]
.
`
`
/
forum
/
avatar
/
$
login
'
'
.
$
_FILES
[
'
avatar
'
]
[
'
name
'
]
)
)
{
$
avatar
=
$
login
.
$
_FILES
[
'
avatar
'
]
[
'
name
'
]
;
chmod
(
$
_SERVER
[
'
DOCUMENT_ROOT
'
]
.
`
`
/
forum
/
avatar
/
$
avatar
'
'
,
)
;
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
travail
sur
chaîne
fonction
pour
code
HTML
MySQL
gestion
caractère
verrouiller
fonction
addslashes
(
)
rajouter
slashes
(
backslashes
\
)
devant
caractère
devoir
être
verrouiller
.
caractère
être
«
`
`
»
,
«
'
»
,
«
\
»
caractère
nul
(
NULL
)
.
chaîne
résultant
pouvoir
être
utiliser
pour
être
placer
en
base
de
donnée
via
commande
SQL
.
fonction
stripslashes
(
)
effectuer
opération
inverse
:
supprimer
anti-slash
sauf
dans
cas
double
anti-slash
\\
,
supprimer
un
.
$
chaine
=
'
'
oreille
cassé
'
'
;
$
c1
=
addslashes
(
$
chaine
)
;
echo
$
c1
;
/
/
L\'oreille
cassé
echo
stripslashes
(
$
c1
)
;
/
/
oreille
casser
balise
caractère
spécial
HTML
fonction
strip_tags
(
)
permettre
de
filtrer
chaîne
contenir
balise
(
tags
)
HTML
en
autoriser
certain
interdire
de
autre
.
premier
paramètre
être
chaîne
HTML
.
second
être
liste
tags
autoriser
.
attention
:
fonction
modifier
contenu
balise
autoriser
,
laisser
attribut
class
,
style
appel
JavaScript
.
$
chaine
=
'
'
<
u
>
<
i
>
<
b
>
bonjour
ami
<
/
b
>
<
/
i
>
<
/
u
>
'
'
;
echo
strip_tags
(
$
chaine
,
'
<
u
>
<
i
>
<
b
>
'
)
;
/
/
bonjour
ami
echo
strip_tags
(
$
chaine
,
'
<
b
>
'
)
;
/
/
<
b
>
bonjour
ami
<
/
b
>
en
gras
fonction
htmlspecialchars
(
)
convertir
caractère
spécial
en
entité
HTML
.
caractère
être
:
–
«
&
»
:
&
amp
;
–
«
`
`
»
:
&
quot
;
ENT_NOQUOTES
être
utiliser
–
«
'
»
:
&
#
;
ENT_QUOTES
être
utiliser
–
«
<
»
:
&
lt
;
–
«
>
»
:
&
gt
;
second
paramètre
(
ENT_xxx
)
définir
fonctionnement
par
rapport
quotes
.
fonction
htmlentities
(
)
aller
en
remplacer
caractère
avoir
équivalent
en
HTML
.
pour
décoder
chaîne
,
falloir
utiliser
fonction
html_entity_decode
(
)
.
fonction
nl2br
(
)
remplacer
retour-chariot
de
chaîne
en
retour
à
ligne
HTML
:
<
br
/
>
.
fonction
urlencode
(
)
formater
chaîne
pour
utilisation
dans
URL
.
espace
être
S
.
ROHAUT
courir
programmation
PHP
pager
/
remplacer
par
«
+
»
caractère
non-alphanumérique
(
sauf
«
-
»
,
«
.
»
«
_
»
)
être
remplacer
par
équivalent
hexadécimal
%
XX
.
chaîne
être
décoder
par
fonction
urldecode
(
)
.
fonction
texte
général
découper
chaîne
fonction
explode
(
)
permettre
de
découper
chaîne
selon
séparateur
.
retourner
tableau
contenir
divers
élément
découper
.
premier
paramètre
être
séparateur
,
second
chaîne
.
troisième
paramètre
permettre
de
limiter
nombre
de
valeur
retourner
.
$
chaine
=
'
login
:
pwd
:
uid
:
gid
'
;
$
tab
=
explode
(
'
:
'
,
$
chaine
)
;
foreach
(
$
tab
avoir
$
value
)
echo
$
valoir
;
/
/
login
pwd
uid
gid
fonction
inverse
nommer
implode
(
)
.Le
premier
paramètre
être
«
colle
»
:
caractère
de
séparation
être
placer
entre
divers
élément
de
chaîne
reconstituer
.
second
paramètre
être
tableau
.
/
/
suite
de
exemple
précédent
$
newchaine
=
implode
(
'
,
'
,
$
tab
)
;
echo
$
chaine
;
/
/
login
,
pwd
,
uid
,
gid
fonction
join
(
)
être
de
implode
(
)
.
pouvoir
effectuer
découpage
n
caractère
avec
fonction
chunk_split
(
)
.
découper
premier
paramètre
en
morceau
de
longueur
second
paramètre
(
par
défaut
caractère
)
avec
séparateur
troisième
paramètre
(
\n\r
par
défaut
)
.
$
chaine
=
'
FF5EB649C4
'
;
$
n_chaine
=
chunk_split
(
$
chaine
,
,
'
:
'
)
;
echo
n_chaine
;
/
/
FF
:
5E
:
B6
:
:
C4
fonction
wordwrap
(
)
effectuer
césure
de
chaîne
.
chaîne
résultant
être
texte
découper
en
tenir
compte
mot
.
par
défaut
longueur
(
second
paramètre
)
être
de
caractère
.
pouvoir
préciser
chaîne
de
coupure
de
ligne
en
troisième
paramètre
,
dernier
paramètre
être
à
force
coupure
même
milieu
de
mot
.
pour
affichage
en
HTML
,
falloir
encapsuler
résultat
dans
nl2br
(
)
.
$
chaine
=
'
'
bonjour
ami
bienvenir
dans
merveilleux
monde
langage
PHP
!
`
`
;
echo
nl2br
(
wordwrap
(
$
chaine
,
)
)
;
retourner
bonjour
ami
bienvenir
dans
merveilleux
monde
langage
PHP
!
fonction
str_split
(
)
découper
chaîne
de
caractère
en
tableau
.
par
défaut
longueur
être
de
pouvoir
choisir
en
second
paramètre
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
pouvoir
découper
partie
de
chaîne
avec
fonction
substr
(
)
.
premier
paramètre
être
chaîne
,
second
début
(
depuis
)
dernier
longueur
.
début
de
chaîne
pouvoir
être
valeur
négatif
dans
cas
compter
en
partir
de
fin
de
chaîne
.
$
chaine
=
'
abcdef
'
;
echo
substr
(
$
chaine
,
)
;
/
/
abcdef
echo
substr
(
$
chaine
,
,
)
;
/
/
cde
echo
substr
(
$
chaine
,
)
;
/
/
f
echo
substr
(
$
chaine
,
,
)
;
/
/
de
fonction
trim
(
)
,
rtrim
(
)
ltrim
(
)
supprimer
caractère
invisible
à
droit|droite
(
trim
,
rtrim
)
à
gauche
(
trim
,
ltrim
)
de
chaîne
.
rechercher
comparer
fonction
strcmp
(
)
effectuer
comparaison
de
deux
chaîne
.
retourne
<
chaine1
être
inférieur
à
chaine2
,
égal
,
>
.
fonction
strncmp
(
)
à
même
effetmais
sur
longueur
donner
,
en
troisième
paramètre
.
fonction
strcasecmp
(
)
strncasecmp
(
)
être
version
insensible
à
casse
.
fonction
strstr
(
)
recherche
premier
occurrence
second
paramètre
dans
premier
retourner
chaîne
depuis
position
jusqu
'
à
fin
.
fonction
strchr
(
)
être
de
strstr
(
)
.
fonction
stristr
(
)
être
même
insensible
à
casse
.
fonction
strrchr
(
)
effectuer
même
chose
sauf
retourner
fin
de
chaîne
depuis
dernier
caractère
trouver
.
fonction
strpos
(
)
recherche
dans
chaîne
premier
paramètre
chaîne
en
second
paramètre
retourner
position
.
pouvoir
placer
en
troisième
paramètre
position
de
départ
de
recherche
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
session
cookies
cookies
création
cookie
envoyer
avec
fonction
setcookie
(
)
.
argument
être
suivant
:
•
nom
•
valeur
•
date
de
expiration
(
timestamp
unix
)
•
chemin
(
validité
cookie
suivre
chemin
dans
url
)
•
domaine
(
parer
défaut
,
)
•
secure
:
flag
de
sécurité
:
cookie
être
accessible
via
connexion
sécuriser
.
seul
premier
argument
être
obligatoire
.
spécifier
valeur
,
suffire
de
mettre
.
attention
à
limitation
:
•
cookie
être
envoyer
avec
entêter
HTTP
,
pouvoir
être
envoyer
sortie
avoir
avoir
lieu
(
html
,
texte
,
...
)
•
cookie
être
disponible
dans
page
l
'
avoir
créer
.
falloir
recharger
page
,
pointer
sur
autre
.
•
cookie
pouvoir
être
supprimer
avec
même
paramètre
avoir
servir
à
création
.
être
navigateur
supprimer
cookie
.
setcookie
(
`
`
testcookie
'
'
,
session_id
(
)
,
time
(
)
)
;
if
(
isset
(
$
_COOKIE
[
'
testcookie
'
]
)
)
echo
$
_COOKIE
[
'
testcookie
'
]
;
dans
exemple
précédent
,
premier
chargement
être
afficher
contenu
cookie
être
accessible
.
deuxième
chargement
valeur
être
afficher
,
attention
décalage
entre
mise
à
jour
accès
.
if
(
!
isset
(
$
_COOKIE
[
'
testcookie
'
]
)
)
{
setcookie
(
`
`
testcookie
'
'
,
'
toto
'
,
time
(
)
)
;
header
(
`
`
location
:
http
:
/
/
'
'
.
$
_SERVER
[
'
HTTP_HOST
'
]
.
$
_SERVER
[
'
REQUEST_URI
'
]
)
;
}
dans
exemple
,
regarder
cookie
exister
,
créer
rappeler
page
.
accès
accéder
cookie
grâce
à
variable
global
$
_COOKIE
être
tableau
.
index
tableau
être
nom
cookie
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
valeur
=
$
_COOKIE
[
'
testcookie
'
]
;
echo
$
valeur
;
/
/
par
rapport
à
exemple
précédent
:
toto
note
:
pouvoir
placer
tableau
avec
cookies
.
suffire
de
nommer
cookie
avec
notation
par
crochet
.
setcookie
(
`
`
testcookie
[
]
'
'
,
'
toto
'
,
time
(
)
)
;
setcookie
(
`
`
testcookie
[
]
'
'
,
'
titi
'
,
time
(
)
)
;
setcookie
(
`
`
testcookie
[
]
'
'
,
'
tata
'
,
time
(
)
)
;
...
(
page
suivant
)
foreach
(
$
_COOKIE
avoir
$
tab
)
{
if
(
is_array
(
$
tab
)
)
foreach
(
$
tab
avoir
$
key
=
>
$
value
)
echo
`
`
$
key
=
>
$
value
'
'
;
}
suppression
pour
supprimer
cookie
,
suffire
de
donner
date
antérieur
à
date
actuel
à
.
if
(
!
isset
(
$
_COOKIE
[
'
testcookie
'
]
)
)
{
setcookie
(
`
`
testcookie
'
'
,
'
toto
'
,
time
(
)
)
;
}
else
{
setcookie
(
`
`
testcookie
'
'
,
'
'
,
time
(
)
)
;
}
if
(
isset
(
$
_COOKIE
[
'
testcookie
'
]
)
)
echo
`
`
OK
'
'
;
else
echo
`
`
de
cookie
'
'
;
dans
exemple
précédent
,
appel
script
aller
provoquer
affichage
de
«
de
cookie
»
«
OK
»
.
identification
HTTP
connexion
possibilité
être
disponible
PHP
être
utiliser
module
apache
,
en
script
CGI
.
identification
HTTP
permettre
via
envoi
de
HEADER
HTTP
de
demander
identification
client
.
dans
cas
navigateur
aller
ouvrir
fenêtre
de
connexion
demander
saisie
de
login
de
mot
de
passe
.
PHP
récupérer
entendre
valeur
.
exemple
issu
de
documentation
PHP
if
(
!
isset
(
$
_SERVER
[
'
PHP_AUTH_USER
'
]
)
)
{
header
(
'
WWW-Authenticate
:
basic
realm
=
'
'
Slyunix
'
'
'
)
;
header
(
'
HTTP
/
Unauthorized
'
)
;
echo
'
texte
utiliser
visiteur
utiliser
bouton
d\'annulation
'
;
exit
;
}
else
{
echo
`
`
<
p
>
bonjour
,
{
$
_SERVER
[
'
PHP_AUTH_USER
'
]
}
.
<
/
p
>
'
'
;
echo
`
`
<
p
>
mot
de
passe
être
{
$
_SERVER
[
'
PHP_AUTH_PW
'
]
}
.
<
/
p
>
'
'
;
}
dans
exemple
,
passer
entêter
demande
de
authentification
.
en
cas
de
échec
(
bouton
annuler
)
message
de
annulation
être
afficher
.
pouvoir
récupérer
valeur
via
variable
:
•
$
_SERVER
[
'
PHP_AUTH_USER
'
]
:
login
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
$
_SERVER
[
'
PHP_AUTH_PW
'
]
:
mot
de
passe
déconnexion
déconnexion
être
évident
fois
connecter
,
identifiants
être
placer
dans
session
.
méthode
simple
consister
à
fermer
navigateur
à
relancer
.
session
PHP
principe
session
permettre
de
préserver
donnée
de
visite
de
site
.
personne
voir
attribuer
identifier
unique
appelé
identifier
de
session
,
SID
.
SID
être
stocker
dans
cookie
,
être
passer
par
URL
.
pouvoir
définir
nombre
infini
de
variable
être
accessible
durant
durée
de
session
.
noter
fermer
relancer
navigateur
,
changer
de
identifier
,
précédent
session
être
perdre
,
être
nommer
.
pouvoir
connaître
SID
grâce
à
constante
de
même
nom
,
par
fonction
session_id
(
)
.
utilisation
ip-remplacée
>
ouverture
dans
dns-remplacé
valeur
«
dns-remplacer
_start
»
être
activer
,
session
être
démarrer
de
manière
automatique
de
accès
à
page
.
falloir
utiliser
fonction
session_start
(
)
.
appel
créer
session
restaurer
session
stocker
sur
serveur
.
attention
:
ouverture
de
session
devoir
apparaître
avant
sortie
/
affichage
script
PHP
de
balise
HTML
,
ligne
vide
!
pouvoir
créer
récupérer
session
nommer
en
préciser
session_name
(
)
prendre
paramètre
nom
de
session
devoir
être
créer
(
premier
appel
)
accéder
(
appel
suivant
)
.
session
par
défaut
nommer
«
PHPSESSID
»
être
être
charger
session_name
(
)
être
appeler
.
falloir
appeler
session_name
(
)
avant
session_start
(
)
pour
accéder
à
session
nommé
.
session
pouvoir
être
créer
ouvrir
avec
utilisation
de
fonction
session_register
(
)
.
ip-remplacée
>
variable
de
session
avoir
deux
moyen
de
créer
variable
de
session
,
être
accessible
depuis
importer
pager
visiter
à
partir
moment
session_start
(
)
avoir
être
appeler
.
premier
moyen
fonctionner
fonctionner
register_globals
être
à
dans
dns-remplacé
:
méthode
(
déconseiller
)
:
S
.
ROHAUT
courir
programmation
PHP
pager
/
fonction
session_register
(
)
prendre
paramètre
nom
de
variable
définir
variable
de
session
.
variable
pouvoir
être
accéder
par
nom
.
$
txt
=
'
bonjour
ami
'
;
session_register
(
'
txt
'
)
;
/
/
txt
devenir
variable
de
session
.
pour
savoir
variable
être
enregistrer
dans
session
courant
,
utiliser
session_is_registered
(
)
.
if
(
session_is_registered
(
'
txt
'
)
)
echo
$
txt
;
pour
supprimer
variable
de
session
,
falloir
utiliser
session_unregister
(
)
.
par
contre
falloir
oublier
de
utiliser
unset
(
)
pour
supprimer
variable
global
,
précédent
fonction
supprimer
,
empêcher
sauvegarde
à
fin
script
.
if
(
session_is_registered
(
'
txt
'
)
)
{
session_unregister
(
'
txt
'
)
;
unset
(
$
txt
)
;
}
méthode
(
meilleur
à
utiliser
)
:
utiliser
tableau
global
$
_SESSION
.
:
$
_SESSION
[
'
txt
'
]
=
'
'
bonjour
ami
'
'
;
créer
variable
de
session
txt
,
echo
$
_SESSION
[
'
txt
'
]
affiche
unset
(
$
_SESSION
[
'
txt
'
]
)
;
effacer
.
pour
effacer
variable
de
session
,
suffire
de
faire
$
_SESSION
=
array
(
)
;
expiration
de
session
durée
de
vie
de
session
PHP
dépendre
de
trois
paramètre
de
configuration
fichier
dns-remplacer
:
dns-remplacer
_maxlifetime
,
dns-remplacer
_lifetime
dns-remplacer
_expire
.
premier
concerner
durée
de
vie
donnée
sur
serveur
,
en
nombre
de
seconde|second
.
être
par
défaut
de
seconde|second
,
minute
.
,
donnée
être
supprimer
être
recharger
via
cookie
de
session
prochain
appel
.
second
être
durée
de
vie
cookie
de
session
,
exprimer
en
second
.
par
défaut
valeur
être
zéro
(
)
signifier
:
jusqu
'
à
navigateur
éteind
.
troisième
être
durée
de
vie
donnée
de
session
,
en
minute
.
valeur
par
défaut
être
de
minute
,
trois
heure
.
vouloir
dire
dans
même
session
,
pouvoir
rester
trois
heure
sur
même
page
,
valeur
être
perdre
.
,
falloir
rouvrir
nouveau
session
S
.
ROHAUT
courir
programmation
PHP
pager
/
restaurer
de
nouveau
valeur
.
à
chargement
de
page
(
ouverture
de
session
)
,
recommencer
décompte
.
pouvoir
modifier
délai
de
expiration
de
session
grâce
à
fonction
session_cache_expire
(
)
prendre
valeur
nouveau
durée
en
minute
.
sans
paramètre
retourner
valeur
actuel
.
changer
accès
par
défaut
PHP
savoir
débrouiller
seul
pouvoir
remplacer
prise
en
charge
par
défaut
session
par
propre
fonction
,
dans
but
de
gérer
ouverture
fermeture
sauvegarde
donnée
de
session
dans
fichier
base
de
donnée
.
autre
utilisation
pouvoir
être
traçage
via
PHP
de
ouverture
/
fermeture
session
.
pour
utiliser
fonction
session_set_save_handler
(
)
.
étude
dépasser
cadre
cours|cour
exemple
tirer
de
documentation
PHP
.
if
(
!
mysql_table_exists
(
`
`
session
'
'
,
$
DB
)
)
{
$
query
=
'
CREATE
tabler
session
(
SessionID
char
(
)
not
null
,
LastUpdated
datetime
not
null
,
DataValue
text
,
PRIMARY
KEY
(
SessionID
)
,
index
(
LastUpdated
)
)
'
;
mysql_query
(
$
query
)
;
}
function
sessao_open
(
$
aSavaPath
,
$
aSessionName
)
{
global
$
aTime
;
sessao_gc
(
$
aTime
)
;
return
True
;
}
function
sessao_close
(
)
{
return
True
;
}
function
sessao_read
(
$
aKey
)
{
$
query
=
`
`
select
DataValue
FROM
session
WHERE
SessionID
=
'
$
aKey
'
'
'
;
$
busca
=
mysql_query
(
$
query
)
;
if
(
mysql_num_rows
(
$
busca
)
=
=
)
{
$
r
=
mysql_fetch_array
(
$
busca
)
;
return
$
r
[
'
DataValue
'
]
;
}
ELSE
{
$
query
=
`
`
insert
INTO
session
(
SessionID
,
LastUpdated
,
DataValue
)
valoir
(
'
$
aKey
'
,
NOW
(
)
,
`
`
)
'
'
;
mysql_query
(
$
query
)
;
return
`
`
'
'
;
}
}
function
sessao_write
(
$
aKey
,
$
aVal
)
{
$
aval
=
addslashes
(
$
aVal
)
;
$
query
=
`
`
UPDATE
session
set
DataValue
=
'
$
aVal
'
,
LastUpdated
=
NOW
(
)
WHERE
SessionID
=
'
$
aKey
'
'
'
;
mysql_query
(
$
query
)
;
return
True
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
}
function
sessao_destroy
(
$
aKey
)
{
$
query
=
`
`
DELETE
FROM
session
WHERE
SessionID
=
'
$
aKey
'
'
'
;
mysql_query
(
$
query
)
;
return
True
;
}
function
sessao_gc
(
$
aMaxLifeTime
)
{
$
query
=
`
`
DELETE
FROM
session
WHERE
UNIX_TIMESTAMP
(
NOW
(
)
)
-
UNIX_TIMESTAMP
(
LastUpdated
)
>
$
aMaxLifeTime
'
'
;
mysql_query
(
$
query
)
;
return
True
;
}
session_set_save_handler
(
`
`
sessao_open
'
'
,
`
`
sessao_close
'
'
,
`
`
sessao_read
'
'
,
'
'
sessao_write
'
'
,
`
`
sessao_destroy
'
'
,
`
`
sessao_gc
'
'
)
;
image
Pré-requis
important
concerner
version
de
PHP
avant
EasyPHP
:
fonction
gd_info
(
)
imagecreatetruetype
(
)
être
disponible
PHP
faire
appel
à
bibliothèque
externe
appeler
GD2
.
pour
version
trouver
patches
à
adresse
http
:
/
/
dns-remplacer
/
gd
/
.
avant
version
,
version
GD
linkée
avec
PHP
être
.
concerner
utilisateur
de
PHP
+
EasyPHP
sur
Windows
:
configuration
par
défaut
de
EasyPHP
inclure
support
image
.
pour
falloir
modifier
fichier
dns-remplacer
en
retirer
commentaire
de
:
extension
=
php_
dns-remplacer
créer
image
type
possible
falloir
de
abord
choisir
type
de
image
souhaiter
créer
.
pour
pouvoir
tester
type
PHP
pouvoir
générer
avec
fonction
imagetypes
(
)
constant
associé
:
•
IMG_PNG
:
format
PNG
•
IMG_JPG
:
format
JPEG
•
IMG_GIF
:
format
GIF
•
IMG_WBMP
:
format
Windows
Bitmap
BMP
if
(
imagetype
(
)
&
IMG_PNG
)
{
echo
`
`
type
PNG
être
supporter
'
'
;
début
script
,
envoyer
header
spécifier
type
de
image
:
S
.
ROHAUT
courir
programmation
PHP
pager
/
header
(
`
`
Content-type
:
image
/
png
'
'
)
;
/
/
image
/
gif
image
/
jpeg
création
ip-remplacée
>
nouveau
image
dynamique
créer
image
avec
fonction
imagecreate
(
)
(
baser
sur
table
de
couleur
indexer
)
imagecreatetruecolor
(
)
(
en
truecolor
)
avec
paramètre
largeur
hauteur
.
second
être
conseiller
par
documentation
PHP
.
fonction
retourner
ressource
identifier
image
.
par
défaut
image
être
noir
.
$
img
=
@
createimage
(
,
)
or
die
(
`
`
PHP
supporter
image
'
'
)
;
ip-remplacée
>
récupération
de
image
existant
PHP
pouvoir
charger
image
existant
lieu
de
créer
de
pièce
.
dans
cas
image
être
charger
depuis
fichier
pouvoir
retravailler
souhaiter
.
pouvoir
utiliser
fonction
:
•
imagecreatefromgif
(
)
:
charger
image
GIF
•
imagecreatefromjpeg
(
)
:
charger
image
JPEG
•
imagecreatefrompng
(
)
:
charger
image
PNG
•
imagecreatefromstring
(
)
:
charger
image
depuis
chaîne
de
texte
(
par
exemple
champ
)
publication
,
publier
image
avec
fonction
imagexxx
(
)
.
fonction
être
utiliser
sans
paramètre
,
image
créer
être
rediriger
vers
sortie
standard
.
pouvoir
préciser
paramètre
nom
de
fichier
.
dans
cas
,
image
être
sauver
sur
disque
format
spécifier
.
•
imagepng
(
)
:
créer
image
format
PNG
•
imagegif
(
)
:
créer
image
format
GIF
•
imagejpeg
(
)
:
créer
image
format
JPEG
fois
image
créer
,
pouvoir
supprimer
avec
imagedestroy
(
)
décharge
de
mémoire
.
code
de
page
PHP
dns-remplacé
retourner
image
:
header
(
`
`
Content-type
:
image
/
png
'
'
)
;
$
img
=
@
imagecreatetruecolor
(
,
)
or
die
(
`
`
impossible
de
créer
flux
de
image
GD
'
'
)
;
/
*
placer
commande
de
dessin
manipulation
*
/
imagepng
(
$
img
)
;
imagedestroy
(
$
img
)
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
chargement
via
autre
page
pour
appeler
image
dynamique
depuis
page
HTML
PHP
suffire
de
placer
dans
balise
IMG
:
<
img
src
=
'
'
dns-remplacer
'
'
>
travailler
sur
image
récupérer
information
fonction
getimagesize
(
)
permettre
de
récupérer
information
sur
image
passer
nom
de
fichier
(
de
ressource
image
)
.
retourner
tableau
indexer
.
list
(
$
width
,
$
height
,
$
type
,
$
attr
)
=
getimagesize
(
`
`
dns-remplacer
'
'
)
;
•
width
:
largeur
x
•
height
:
hauteur
•
type
:
=
GIF
,
=
JPG
,
=
PNG
,
=
PSD
,
=
BMP
,
=
TIFF
(
ordre
octet
Intel
)
,
=
TIFF
(
ordre
octet
Motorola
)
,
=
JPC
,
=
JP2
,
=
JPX
,
=
JB2
,
=
SWC
,
=
IFF
•
attr
:
chainer
width
/
height
pour
HTML
travailler
sur
image
avoir
créer
même
:
•
imagesx
(
)
:
largeur
x
de
image
•
imagesy
(
)
:
hauteur
de
image
couleur
être
possible
de
voir
fonction
chose
être
à
retenir
:
notion
de
palette
indexer
(
createimage
(
)
)
notion
de
truetype
.
dans
premier
cas
couleur
être
indexer
via
numéro
.
dans
second
cas
,
couleur
être
composant
RVB
.
fonction
imagecolorallocate
(
)
permettre
de
définir
couleur
être
utiliser
pour
image
.
premier
paramètre
être
ressource
de
image
,
trois
autre
niveau
de
rouge
,
vert
bleu
de
couleur
.
attention
:
avec
image
créer
avec
createimage
(
)
,
palette
être
indexer
premier
index
être
couleur
fond
.
:
premier
appel
à
imagecolorallocate
(
)
dans
cas
modifier
couleur
fond
.
$
white
=
imagecolorallocate
(
$
img
,
,
,
)
;
fonction
imagecolorat
(
)
retourner
valeur
exact
(
index
de
palette
,
entier
RVB
)
point
coordonnées
x
/
de
image
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
color
=
imagecolorextact
(
$
img
,
,
)
;
fonction
imagecolortransparent
(
)
permettre
de
définir
couleur
de
transparence
de
image
palette
être
indexer
.
premier
paramètre
être
ressource
de
image
créer
avec
imagecreate
(
)
,
second
valeur
retourner
par
imagecolorallocate
(
)
.
fonction
imagecolorstotal
(
)
retourner
nombre
total
de
couleur
utiliser
pour
image
donner
.
dessin
ip-remplacée
>
remplissage
utiliser
fonction
imagefill
(
)
:
$
background
=
imagecolorallocate
(
$
img
,
,
,
)
;
ImageFill
(
$
img
,
,
,
$
background
)
;
fonction
imagefilltoborder
(
)
permettre
remplissage
de
zone
délimiter
par
couleur
donner
.
dans
cas
deux
dernier
paramètre
être
couleur
de
bordure
couleur
de
remplissage
.
ip-remplacée
>
point
utiliser
imagesetpixel
(
)
:
$
green
=
imagecolorallocate
(
$
img
,
,
,
)
;
Imagesetpixel
(
$
img
,
,
,
$
green
)
;
ip-remplacée
>
ligner
utiliser
imageline
(
)
:
imageline
(
$
img
,
,
,
,
,
$
blue
)
;
ip-remplacée
>
rectangle
utiliser
imagerectangle
(
)
pour
rectangle
simple
,
imagefilledrectangle
(
)
pour
rectangle
remplir
.
$
blue
=
ImageColorAllocate
(
$
img
,
,
,
)
;
imagerectangle
(
$
img
,
,
,
,
,
$
blue
)
;
imagefilledrectangle
(
$
img
,
,
,
,
,
$
green
)
;
ip-remplacée
>
cercle
,
ellipse
utiliser
imageellipse
(
)
imagefilledellipse
(
)
.
attention
deux
premier
paramètre
être
coordonnées
centre
de
ellipse
,
deux
autre
largeur
hauteur
de
ellipse
.
imageellipse
(
$
img
,
,
,
,
,
$
red
)
;
pouvoir
faire
arc
de
cercle
avec
fonction
imagearc
(
)
imagefilledarc
(
)
:
juste
S
.
ROHAUT
courir
programmation
PHP
pager
/
avant
couleur
préciser
début
fin
de
arc
en
degré
(
de
à
)
.
ip-remplacée
>
polygone
utiliser
fonction
imagepolygone
(
)
imagefilledpolygone
(
)
.
sommet
polygone
être
définir
dans
tableau
:
tab
[
]
=
x0
,
tab
[
]
=
y0
,
tab
[
]
=
x1
,
tab
[
]
=
y1
,
...
devoir
préciser
nombre
de
sommet
.
imagepolygon
(
$
img
,
array
(
,
,
,
,
,
)
,
,
$
blue
)
;
ip-remplacée
>
texte
simple
utiliser
imagestring
(
)
:
imagestring
(
$
img
,
,
,
,
`
`
simple
chaîne
de
texte
'
'
,
$
text_color
)
;
second
paramètre
être
numéro
de
police
par
défaut
de
page
actuel
navigateur
.
programmation
objet
structure
classe
être
collection
de
variable
(
attribut
)
de
fonction
(
méthode
)
fonctionner
avec
variable
.
ensemble
former
membre
propriété
de
objet
.
classe
être
définir
en
utiliser
mot-clé
«
class
»
:
class
panier
{
/
/
Eléments
de
panier
var
$
contenir
;
/
/
ajout
de
$
qte
article
de
type
$
code
panier
function
ajout_article
(
$
code
,
$
qte
)
{
if
(
isset
(
$
this-
>
contenir
[
$
code
]
)
)
$
this-
>
contenir
[
$
code
]
+
=
$
qte
;
else
$
this-
>
contenir
[
$
code
]
=
$
qte
;
}
/
/
suppression
de
$
num
article
type
$
artnr
panier
function
suppr_article
(
$
code
,
$
qte
)
{
if
(
$
this-
>
contenir
[
$
code
]
>
$
qte
)
{
$
this-
>
contenir
[
$
code
]
-
=
$
qte
;
return
TRUE
;
}
else
{
return
FALSE
;
}
}
}
création
de
objet
utiliser
mot-clé
«
new
»
.
$
mon_caddie
=
new
panier
;
constructeur
exister
(
voir
)
pouvoir
entendre
passer
valeur
à
création
:
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
o@card@
=
new
Obj
(
`
`
riri
'
'
)
;
accès
membre
PHP
utiliser
caractère
«
-
>
»
.
accéder
membre
avec
syntaxe
suivant
.
noter
utiliser
$
devant
nom
de
attribut
.
$
mon_caddie-
>
contenu
=
array
(
'
ref01
'
=
>
,
'
ref02
'
=
>
)
;
sein
de
objet
,
accéder
attribut
de
classe
en
préciser
avec
variable
«
$
this
»
.
préciser
,
utiliser
en
fait
variable
localz
à
méthode
.
$
this-
>
contenir
[
'
ref01
'
]
+
=
;
PHP
PHP
étendre
possibilité
de
accès
membre
(
variable
fonction
)
via
variable
dynamique
.
:
class
panier
{
/
/
Eléments
de
panier
public
$
etat
=
false
;
/
/
false
:
vide
...
}
function
bidon
(
)
{
return
'
etat
'
;
}
$
mon_caddie
=
new
panier
;
$
pipo
=
'
etat
'
;
echo
$
mon_caddie-
>
$
pipo
;
/
/
affiche
$
this-
>
etat
$
fonction
=
'
affiche_panier
'
;
$
mon_caddie-
>
$
fonction
(
)
;
echo
$
nom_caddie-
>
{
bidon
(
)
}
;
opérateur
:
:
opérateur
«
:
:
»
permettre
de
faire
référence
membre
de
classe
de
base
(
voir
héritage
)
,
de
utiliser
méthode
classe
n
'
avoir
être
instanciée
.
à
{
function
example
(
)
{
echo
`
`
être|suivre
fonction
original
.
<
br
>
\n
'
'
;
}
}
/
/
n
'
avoir
de
objet
de
classe
à
.
/
/
affichage
être
:
être|suivre
fonction
original
.
avoir
:
:
example
(
)
;
dans
cas
de
appel
à
méthode
:
:
de
classe
instanciée
(
de
objet
)
,
méthode
devoir
appeler
de
attribut
de
classe
,
puisqu'ils
exister
.
de
pour
même
raison
falloir
employer
variable
$
this
dans
méthode
appelé
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
variable
,
protection
PHP
4.x
déclarer
attribut
avec
mot-clé
«
var
»
.
attribut
être
considérer
être
public
.
PHP
posséder
mécanisme
de
protection
variable
.
attribut
être
accessible
depuis
classe
dérivé
depuis
extérieur
de
classe
.
var
$
mavariable
;
être
interdire
de
initialiser
variable
de
déclaration
.
var
$
toto
=
'
'
salut
!
`
`
;
/
/
marche
!
PHP
5.x
ip-remplacée
>
protection
variable
fonction
PHP
rajouter
notion
de
protection
donnée
manquer
à
PHP
.
appeler
trois
«
P
»
:
«
public
»
,
«
protected
»
,
«
private
»
,
avec
mots-clé
correspondant
.
tableau
récapitulatif
de
effet
:
accès
public
Protected
Private
dans
classe
même
ü
ü
ü
depuis
classe
dérivé
ü
ü
û
depuis
extérieur
ü
û
û
note
:
mots-clés
public
,
private
protected
pouvoir
entendre
être
utiliser
pour
méthode
(
fonction
)
cas
protection
étendre
de
même
manière
.
mot-clé
«
var
»
être
utilisable
en
PHP
dans
cas
attribut
être
considérer
public
.
être
possible
de
initialiser
variable
à
création
avec
importer
valeur
.
class
panier
{
/
/
Eléments
de
panier
,
privé
private
$
contenir
=
array
(
)
;
...
}
ip-remplacée
>
attribut
méthode
statique
pouvoir
définir
attribut
méthode
statique
être
accessible
en
dehors
de
classe
,
objet
être
déclarer
.
rajouter
mot-clé
«
static
»
après
définition
de
visibilité
de
attribut
.
«
static
»
avoir
de
portée
définir
être
considérer
public
.
par
exemple
,
compteur
permettre
de
savoir
de
fois
classe
avoir
être
instanciée
.
noter
utilisation
de
«
self
»
à
place
de
«
$
this
»
.
«
$
this
»
pouvoir
être
utiliser
faire
référence
à
objet
attribut
statique
faire
référence
à
classe
même
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
à
{
public
static
$
compteur
=
;
function
à
(
)
{
self
:
:
$
compteur++
;
/
/
incrémenter
}
function
affiche
(
)
{
echo
self
:
:
$
compteur
.
`
`
<
br
/
>
'
'
;
/
/
self
!
}
}
$
o@card@
=
new
à
;
$
o@card@
>
affiche
(
)
;
/
/
$
o@card@
=
new
à
;
$
o@card@
>
affiche
(
)
;
/
/
$
o@card@
=
new
à
;
$
o@card@
>
affiche
(
)
;
/
/
echo
à
:
:
$
compteur
;
/
/
ip-remplacée
>
constant
de
classe
pouvoir
créer
constante
dans
classe
à
aide
mot-clé
«
const
»
.
déclaration
de
constante
devoir
être
précéder
de
indicateur
de
visibilité
.
constant
être
publique
.
pouvoir
assigner
à
constant
valeur
même
dynamique
,
retour
de
fonction
.
pour
variable
statique
,
utiliser
«
self
»
pour
accéder
à
valeur
.
à
{
const
classname
=
'
'
à
'
'
;
function
__construct
(
)
{
echo
self
:
:
classname
;
}
}
$
o@card@
=
new
à
;
/
/
affiche
à
héritage
polymorphisme
héritage
permettre
de
définir
classe
générique
réutilisable
.
pouvoir
faire
extension
à
classe
,
faire
dériver
classe
de
autre
.
classe
dérivé
hériter
de
méthode
variable
de
classe
de
base
pouvoir
redéfinir
propre
fonction
variable
.
classe
pouvoir
hériter
de
seul
autre
classe
.
héritage
multiple
être
supporter
,
par
PHP
,
par
PHP
.
par
contre
rien
empêcher
de
faire
héritage
en
cascade
.
«
polymorphisme
»
permettre
de
redéfinir
méthode
de
même
nom
dans
classe
dérivé
,
par
de
autre
paramètre
éventuel
.
note
:
«
polymorphisme
»
être
surcharge
.
surcharge
consister
à
définir
méthode
de
même
nom
de
prototype
différent
.
PHP
supporter
forme
de
surcharge
.
polymorphisme
remplacer
méthode
par
autre
dans
classe
dérivé
.
pour
créer
héritage
utiliser
mot-clé
«
extends
»
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
class
Panier_nomme
extends
panier
{
var
$
proprietaire
;
function
nom_proprietaire
(
$
nom
)
{
$
this-
>
proprietaire
=
$
nom
;
}
}
créer
classe
«
Panier_nomme
»
hériter
de
«
panier
»
.
posséder
même
propriété
classe
«
panier
»
à
rajouter
nouveau
attribut
nouveau
méthode
.
$
ncart
=
new
Panier_nomme
;
$
ncart-
>
nom_proprietaire
(
`
`
Slyce
'
'
)
;
print
$
ncart-
>
proprietaire
;
$
ncart-
>
ajout_article
(
`
`
ref03
'
'
,
)
;
par
polymorphisme
pouvoir
redéfinir
dans
classe
dériver
méthode
de
classe
hériter
.
à
{
function
affiche
(
)
{
echo
`
`
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
function
affiche
(
)
{
echo
`
`
classe
B
<
br
/
>
'
'
;
}
}
$
test
=
new
B
;
$
test-
>
affiche
(
)
;
/
/
affiche
classe
B
mots-clé
parent
self
mot-clé
«
parent
»
représenter
classe
de
base
(
présenter
après
«
extends
»
)
permettre
de
faire
référence
variable
fonction
de
classe
de
base
.
à
{
function
example
(
)
{
echo
`
`
être|suivre
à
:
:
example
(
)
,
fonctionnalité
de
base
.
<
br
>
\n
'
'
;
}
}
B
extends
à
{
function
example
(
)
{
echo
`
`
être|suivre
B
:
:
example
(
)
,
fonctionnalité
supplémentaire
.
<
br
>
\n
'
'
;
parent
:
:
example
(
)
;
}
}
$
b
=
new
B
;
/
/
appeler
B
:
:
example
(
)
,
,
à
être
tour
,
appeler
à
:
:
example
(
)
.
$
b-
>
example
(
)
;
mot-clé
«
self
»
représenter
classe
même
pouvoir
être
utiliser
pour
préciser
accès
à
membre
précis
,
attribut
statique
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
constructeur
PHP
constructeur
être
méthode
être
appeler
de
création
de
objet
par
«
new
»
.
méthode
devenir
constructeur
porter
même
nom
classe
dans
être
définir
.
class
auto_panier
extends
Panier_nommer
{
function
auto_panier
(
)
{
$
this-
>
proprietaire
=
session_id
(
)
;
}
}
classe
hériter
de
Panier_nomme
.
constructeur
initialiser
nom
propriétaire
être
identifier
de
session
.
constructeur
pouvoir
prendre
importer
méthode
paramètre
optionnel
.
class
auto_panier
extends
Panier_nommer
{
function
auto_panier
(
$
nom
=
'
'
anonyme
'
'
)
{
$
this-
>
proprietaire
=
$
nom
;
}
}
$
panier
=
new
auto_panier
;
/
/
constructeur
être
appeler
avec
valeur
par
défaut
$
panier2
=
new
auto_panier
(
session_id
(
)
)
;
/
/
valeur
passer
PHP
outre
nom
de
classe
même
,
PHP
proposer
méthode
générique
appeler
«
__construct
»
(
avec
deux
underscore
«
_
»
début
)
en
lieu
place
de
premier
méthode
voir
.
:
function
__construct
(
)
{
$
this-
>
proprietaire
=
session_id
(
)
;
}
revenir
même
.
constructeur
classe
dériver
PHP
classe
à
B
suivant
:
class
à
{
function
à
(
)
{
echo
`
`
être|suivre
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
function
B
(
)
{
echo
`
`
être|suivre
classe
B
<
br
/
>
'
'
;
}
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
création
de
nouveau
objet
de
type
B
:
$
b
=
new
B
;
afficher
être|suivre
classe
B
classe
n
'
avoir
de
constructeur
,
être
constructeur
de
classe
de
base
être
appeler
:
à
{
function
à
(
)
{
echo
`
`
être|suivre
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
var
$
var
;
}
$
b
=
new
B
;
/
/
être|suivre
classe
à
remarquer
constructeur
être
appeler
en
cascade
.
dans
cas
classe
B
,
constructeur
de
classe
à
être
appeler
,
être
logique
PHP
pouvoir
savoir
par
défaut
appeler
constructeur
(
paramètre
)
.
devoir
appeler
à
aide
mot-clé
«
parent
»
:
à
{
function
à
(
)
{
echo
`
`
être|suivre
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
var
$
var
;
function
B
(
)
{
echo
`
`
être|suivre
classe
B
<
br
/
>
'
'
;
parent
:
:
avoir
(
)
;
}
}
$
b
=
new
B
;
/
/
affiche
:
être|suivre
classe
B
,
être|suivre
classe
à
PHP
PHP
réagir
de
manière
identique
PHP
,
sauf
être
possible
de
appeler
constructeur
en
cascade
,
avec
mot-clé
«
parent
»
,
sans
connaître
nom
constructeur
de
classe
de
base
,
utiliser
«
__construct
»
:
à
{
function
à
(
)
{
echo
`
`
être|suivre
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
var
$
var
;
function
__construct
(
)
S
.
ROHAUT
courir
programmation
PHP
pager
/
{
echo
`
`
être|suivre
classe
B
<
br
/
>
'
'
;
parent
:
:
__construct
(
)
;
/
/
appeler
constructeur
de
à
:
avoir
(
)
}
}
$
b
=
new
B
;
/
/
affiche
:
être|suivre
classe
B
,
être|suivre
classe
à
destructeur
PHP
n
'
avoir
de
destructeur
en
PHP
.
faire
confiance
dans
cas
à
gestion
de
mémoire
(
ramasse-miettes
)
de
PHP
,
appeler
méthode
particulier
de
classe
à
fin
script
,
charger
de
faire
ménage
,
pouvoir
être
important
par
exemple
avoir
allouer
ressource
pour
image
dynamique
.
pour
détruire
objet
,
suffire
de
réaffecter
variable
,
de
détruire
avec
«
unset
»
.
objet
être
détruire
de
façon
à
fin
de
exécution
script
.
PHP
destructeur
être
présent
en
PHP
.
nommer
«
__destruct
»
être
appeler
de
destruction
de
objet
.
constructeur
,
être
appeler
en
cascade
devoir
être
appeler
de
héritage
.
à
{
function
__destruct
(
)
{
echo
`
`
revoir
classe
à
<
br
/
>
'
'
;
}
}
B
extends
à
{
function
__destruct
(
)
{
echo
`
`
revoir
classe
B
<
br
/
>
'
'
;
parent
:
:
__destruct
(
)
;
}
}
$
b
=
new
B
;
unset
(
$
b
)
;
/
/
destruction
de
objet
,
affiche
revoir
classe
B
à
...
affectation
de
objet
code
commun
fonctionnement
affectation
objet
en
PHP
PHP
être
même
.
,
effet
sur
PHP
,
affectation
faire
par
copie
,
par
référence
en
PHP
pouvoir
induire
de
grand
différence
de
fonctionnement
code
objet
en
PHP
être
utiliser
en
PHP
.
aller
voir
exemple
à
aide
de
classe
simple
.
à
{
var
$
avoir
;
function
à
(
)
{
$
this-
>
avoir
=
'
'
salut
'
'
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
}
function
affiche
(
)
{
echo
`
`
$
this-
>
avoir
<
br
/
>
'
'
;
}
}
function
modif
(
$
objet
)
{
$
objet-
>
avoir
=
'
coucou
'
;
}
PHP
en
PHP
,
objet
être
affecter
par
copie
,
nouveau
objet
être
créer
reprendre
propriété
premier
,
être
indépendant
.
résultat
code
suivre
:
$
obj1
=
new
à
;
$
obj2
=
$
obj1
;
/
/
affectation
par
copie
$
obj1-
>
affiche
(
)
;
/
/
affiche
salut
$
obj2-
>
affiche
(
)
;
/
/
affiche
salut
$
obj1-
>
avoir
=
'
'
bonjour
'
'
;
$
obj1-
>
affiche
(
)
;
/
/
affiche
bonjour
$
obj2-
>
affiche
(
)
;
/
/
affiche
salut
modif
(
$
obj1
)
;
/
/
par
copie
!
$
obj1-
>
affiche
(
)
;
/
/
affiche
bonjour
$
obj2-
>
affiche
(
)
;
/
/
affiche
salut
de
même
créer
fonction
devoir
modifier
objet
,
être
passer
par
défaut
en
copie
,
modifier
en
fait
copie
local
de
objet
.
dans
cas
passer
par
référence
.
function
modif
(
&
$
objet
)
{
$
objet-
>
avoir
=
'
coucou
'
;
}
$
obj2
=
&
$
obj1
;
/
/
par
référence
modif
(
$
obj1
)
;
/
/
par
référence
$
obj1-
>
affiche
(
)
;
/
/
affiche
coucou
avoir
modifier
par
référence
$
obj2-
>
affiche
(
)
;
/
/
affiche
coucou
,
souhaiter
créer
code
objet
en
PHP
(
)
compatible
avec
objet
de
PHP5
,
devoir
effectuer
copie
par
référence
,
passer
objet
fonction
par
référence
.
code
modifier
marche
dans
deux
cas
.
PHP
en
PHP
,
objet
être
affecter
par
référence
par
défaut
de
manière
implicite
.
avoir
$
obj1
=
new
à
;
$
obj2
=
$
obj1
;
/
/
affectation
par
référence
$
obj1-
>
affiche
(
)
;
/
/
affiche
salut
$
obj2-
>
affiche
(
)
;
/
/
affiche
salut
$
obj1-
>
avoir
=
'
'
bonjour
'
'
;
$
obj1-
>
affiche
(
)
;
/
/
affiche
bonjour
S
.
ROHAUT
courir
programmation
PHP
pager
/
$
obj2-
>
affiche
(
)
;
/
/
affiche
bonjour
modif
(
$
obj1
)
;
/
/
par
référence
$
obj1-
>
affiche
(
)
;
/
/
affiche
coucou
$
obj2-
>
affiche
(
)
;
/
/
affiche
coucou
simplifier
tâche
développeur
.
,
pouvoir
demander
copie
de
objet
à
aide
de
méthode
spécial
«
__clone
»
de
instruction
«
clone
»
.
clonage
consister
à
recopier
attribut
de
classe
dans
autre
.
clonage
pouvoir
être
implicite
(
copie
direct
par
mécanisme
interne
de
PHP
)
explicite
(
via
méthode
__clone
)
.
$
obj3
=
clone
$
obj1
;
/
/
copier
$
obj1
dans
$
obj3
$
obj1-
>
avoir
=
'
bonjour
'
;
$
obj3-
>
avoir
=
'
revoir
'
;
$
obj1-
>
affiche
(
)
;
/
/
affiche
bonjour
$
obj3-
>
affiche
(
)
;
/
/
affiche
revoir
méthode
fonctionner
utiliser
information
complexe
ressource
descripteur
de
fichier
.
par
exemple
dans
$
obj1
avoir
ouvrir
connexion
sur
base
de
donnée
,
avoir
copier
ressource
base
de
donnée
,
être
inutilisable
,
ouvert
.
falloir
rouvrir
avec
«
__clone
»
:
class
base
{
private
$
db
;
function
__construct
(
)
{
$
this-
>
db
=
mysql_connect
(
'
localhost
'
)
;
}
function
__clone
(
)
{
$
this-
>
db
=
mysql_connect
(
'
localhost
'
)
;
}
}
$
obj1
=
new
base
;
$
obj2
=
clone
$
obj1
;
/
/
copie
:
__clone
rouvre
connexion
pour
copie
noter
:
méthode
«
__clone
»
être
appeler
mot-clé
«
clone
»
être
utiliser
.
pouvoir
appeler
méthode
.
comparaison
de
objet
PHP
pouvoir
effectuer
comparaison
de
objet
en
PHP4
.
deux
instance
de
objet
être
égal
:
•
provenir
de
même
classe
,
•
être
même
attribut
,
•
attribut
être
de
même
valeur
.
pouvoir
employer
comparaison
avec
«
=
=
»
«
=
=
=
»
.
function
bool2str
(
$
bool
)
{
if
(
$
bool
=
=
=
false
)
{
return
'
FALSE
'
;
}
else
{
S
.
ROHAUT
courir
programmation
PHP
pager
/
return
'
TRUE
'
;
}
}
function
compareObjects
(
&
$
o1
,
&
$
o2
)
{
echo
'
o1
=
=
o2
:
'
.bool2str
(
$
o@card@
=
=
$
o2
)
.
`
`
\n
'
'
;
echo
'
o1
!
=
o2
:
'
.bool2str
(
$
o1
!
=
$
o2
)
.
`
`
\n
'
'
;
echo
'
o1
=
=
=
o2
:
'
.bool2str
(
$
o@card@
=
=
=
$
o2
)
.
`
`
\n
'
'
;
echo
'
o1
!
=
=
o2
:
'
.bool2str
(
$
o1
!
=
=
$
o2
)
.
`
`
\n
'
'
;
}
class
flag
{
var
$
flag
;
function
flag
(
$
flag
=
true
)
{
$
this-
>
flag
=
$
flag
;
}
}
class
SwitchableFlag
extends
flag
{
function
turnOn
(
)
{
$
this-
>
flag
=
true
;
}
function
turnOff
(
)
{
$
this-
>
flag
=
false
;
}
}
$
o
=
new
flag
(
)
;
$
p
=
new
flag
(
false
)
;
$
q
=
new
flag
(
)
;
$
r
=
new
SwitchableFlag
(
)
;
echo
`
`
comparer
instance
créer
avec
même
paramètres\n
'
'
;
compareObjects
(
$
o
,
$
q
)
;
echo
`
`
\nCompare
instance
créer
avec
différent
paramètres\n
'
'
;
compareObjects
(
$
o
,
$
p
)
;
echo
`
`
\nCompare
instance
de
parent
avec
de
sous-classe\n
'
'
;
compareObjects
(
$
o
,
$
r
)
;
exemple
aller
afficher
:
comparer
instance
créer
avec
même
paramètre
o@card@
=
=
o2
:
TRUE
o1
!
=
o@card@
:
FALSE
o@card@
=
=
=
o2
:
TRUE
o1
!
=
=
o2
:
FALSE
comparer
instance
créer
avec
différent
paramètre
o@card@
=
=
o2
:
FALSE
o1
!
=
o@card@
:
TRUE
o@card@
=
=
=
o2
:
FALSE
o1
!
=
=
o2
:
TRUE
comparer
instance
de
parent
avec
de
sous-classe
o@card@
=
=
o2
:
FALSE
o1
!
=
o@card@
:
TRUE
o@card@
=
=
=
o2
:
FALSE
o1
!
=
=
o2
:
TRUE
S
.
ROHAUT
courir
programmation
PHP
pager
/
PHP
PHP
faire
différence
entre
comparaison
simple
«
=
=
»
complet
«
=
=
=
»
.
avec
«
=
=
»
,
PHP
retourner
vrai
deux
objet
avoir
même
attribut
valeur
,
être
instance
de
même
classe
,
pour
PHP
.
avec
«
=
=
=
»
,
PHP
retourner
vrai
deux
objet
faire
référence
même
objet
de
même
classe
.
$
o@card@
=
new
à
;
$
o@card@
=
$
o1
;
/
/
référence
$
o@card@
=
new
à
;
if
(
$
o@card@
=
=
$
o2
)
echo
`
`
o@card@
=
=
o@card@
<
br
/
>
'
'
;
else
echo
`
`
o1
!
=
=
o@card@
<
br
/
>
'
'
;
if
(
$
o@card@
=
=
=
$
o2
)
echo
`
`
o@card@
=
=
=
o@card@
<
br
/
>
'
'
;
else
echo
`
`
o1
!
=
=
=
o@card@
<
br
/
>
'
'
;
if
(
$
o@card@
=
=
$
o3
)
echo
`
`
o@card@
=
=
o@card@
<
br
/
>
'
'
;
else
echo
`
`
o1
!
=
=
o@card@
<
br
/
>
'
'
;
if
(
$
o@card@
=
=
=
$
o3
)
echo
`
`
o@card@
=
=
=
o@card@
<
br
/
>
'
'
;
else
echo
`
`
o1
!
=
=
=
o@card@
<
br
/
>
'
'
;
aller
afficher
o1
=
=
o2
/
/
o1
o2
être
identique
(
même
classe
,
même
attribut
props
.
)
o1
=
=
=
o2
/
/
o1
o2
être
référence
même
objet
o@card@
=
=
o3
/
/
o1
o3
être
identique
(
même
classe
,
même
attribut
props
.
)
o1
!
=
=
=
o3
/
/
o1
o3
être
référence
sur
même
objet
)
S
.
ROHAUT
courir
programmation
PHP
pager
/
nouveauté
en
PHP
objet
fonction
__autoload
fonction
«
__autoload
»
indiquer
à
PHP
réagir
tenter
de
créer
objet
depuis
classe
n
'
avoir
être
définir
.
être
facilité
offert
substituer
require
include
.
pouvoir
être
utile
par
exemple
pour
éviter
de
inclure
ensemble
classe
utiliser
dans
projet
.
préférer
inclure
définition
de
classe
moment
de
création
de
instance
.
fonction
«
__autoload
»
prendre
paramètre
,
nom
de
classe
.
avoir
de
programmer
pour
inclure
code
nécessaire
.
function
__autoload
(
$
)
{
require_once
(
`
`
/
inc
/
{
$
]
}
.php
'
'
)
;
}
classe
abstraire
classe
abstrait
être
nouveauté
de
PHP
.
classe
abstrait
être
classe
sans
implémentation
(
pouvoir
être
instanciée
)
,
représenter
par
fonction
abstrait
(
virtuel
pur
,
sans
code
)
,
implémentation
être
effectuer
dans
classe
dérivé
.
classe
abstrait
servir
à
définir
classe
de
base
normaliser
structure
pouvoir
être
reprendre
pour
développement
de
autre
classe
effectif
.
classe
contenir
méthode
abstrait
devoir
être
définir
abstraire
.
classe
dériver
redéfinir
méthode
abstraire
de
classe
parent
(
de
base
)
,
devoir
être
déclarer
abstraire
à
tour
pouvoir
être
instanciée
.
classe
implémente
méthode
abstrait
devoir
être
définir
avec
même
visibilité
faible
.
méthode
abstrait
être
définir
en
protéger
,
fonction
implémentant
devoir
être
définir
en
protéger
publique
.
instruction
pour
définir
classe
méthode
être
«
abstract
»
.
/
/
classe
abstrait
:
contenir
méthode
abstrait
abstract
class
AbstractClass
{
/
/
méthode
abstrait
devoir
être
redéfinir
dans
classe
dérivé
abstract
protected
function
getValue
(
)
;
public
function
prt
(
)
{
print
$
this-
>
getValue
(
)
;
}
}
ConcreteClass1
extends
AbstractClass
{
/
/
redéfinition
de
méthode
abstraire
de
classe
de
base
protected
function
getValue
(
)
{
return
`
`
ConcreteClass1
'
'
;
}
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
class
ConcreteClass2
extends
AbstractClass
{
/
/
redéfinition
de
méthode
abstraire
de
classe
de
base
protected
function
getValue
(
)
{
return
`
`
ConcreteClass2
'
'
;
}
}
$
class1
=
new
ConcreteClass1
;
$
class1-
>
prt
(
)
;
/
/
affiche
ConcreteClass1
$
class2
=
new
ConcreteClass2
;
$
class2-
>
prt
(
)
;
/
/
affiche
ConcreteClass2
classe
,
méthode
variable
final
PHP
inclure
nouveau
mécanisme
de
protection
interdire
classe
dériver
de
réimplémenter
méthode
variable
,
à
classe
de
être
même
dérivée
.
avec
mot-clé
«
final
»
,
indiquer
classe
,
méthode
variable
être
définitif
pouvoir
être
implémenter
.
cas
de
erreur
:
à
{
protected
$
val
;
function
__construct
(
)
{
$
this-
>
val
=
;
}
final
function
affiche
(
)
{
print
$
this-
>
val
;
}
}
B
extends
à
{
function
__construct
(
)
{
parent
:
:
_construct
(
)
;
}
function
affiche
(
)
{
/
/
erreur
!
pouvoir
REDEFINIR
!
print
$
this-
>
val
;
}
}
$
o@card@
=
new
B
;
$
o@card@
>
affiche
(
)
;
dans
classe
B
avoir
tenter
de
récrire
méthode
afficher
déclarer
en
«
final
»
,
PHP
retourner
erreur
.
interface
objet
interface
permettre
de
créer
code
spécifier
méthode
attribut
classe
pouvoir
implémenter
sans
avoir
à
définir
être
gérer
.
méthode
spécifier
dans
interface
devoir
être
implémenter
dans
classe
définir
.
interface
être
moyen
de
définir
pré-requis
obligatoire
à
construction
de
modèle
de
classe
en
donner
liste
prototype
.
créer
interface
avec
mot-clé
«
interface
»
.
dans
exemple
,
aller
définir
classe
implémentir
interface
devoir
définir
fonction
afficher
incrémenter
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
interface
Template
{
public
function
affiche
(
)
;
public
function
incremente
(
$
cpt
)
;
}
attention
:
déclaration
méthode
(
paramètre
)
devoir
être
identique
dans
classe
à
de
interface
.
indiquer
classe
implémentir
interface
avec
mot-clé
«
implements
»
.
à
implements
Template
{
protected
$
val
;
function
__construct
(
)
{
$
this-
>
val
=
;
}
function
affiche
(
)
{
print
$
this-
>
val
;
}
function
incremente
(
$
cpt
)
{
$
this-
>
val+
=
$
cpt
;
}
}
$
o@card@
=
new
à
;
$
o@card@
>
incremente
(
)
;
$
o@card@
>
affiche
(
)
;
classe
pouvoir
implémenter
interface
en
même
temps
.
dans
cas
liste
interface
devoir
être
préciser
après
mot-clé
«
implements
»
,
interface
séparer
par
virgule
.
interface
Template
{
public
function
affiche
(
)
;
public
function
incremente
(
$
cpt
)
;
}
interface
Template2
{
public
function
decremente
(
$
cpt
)
;
}
à
implements
Template
,
Template2
{
protected
$
val
;
function
__construct
(
)
{
$
this-
>
val
=
;
}
function
affiche
(
)
{
print
$
this-
>
val
;
}
function
incremente
(
$
cpt
)
{
$
this-
>
val+
=
$
cpt
;
}
function
decremente
(
$
cpt
)
{
$
this-
>
val-
=
$
cpt
;
}
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
gestion
dynamique
méthode
attribut
pouvoir
surcharger
méthode
,
attribut
opérateur
en
PHP
en
C++
.
de
nouveau
fonction
permettre
de
intercepter
appel
à
méthode
attribut
prévoir
.
note
:
méthode
pouvoir
être
déclencher
objet
,
hériter
,
contenir
attribut
méthode
tenter
de
accéder
.
dans
cas
contraire
,
méthode
attribut
être
utiliser
.
pour
méthode
,
utiliser
méthode
«
__call
»
prendre
deux
paramètre
.
premier
être
nom
de
méthode
,
second
être
tableau
paramètre
passer
à
méthode
.
imaginer
souhaiter
appeler
méthode
«
test
»
de
objet
,
avoir
prévoir
cas
.
suffire
de
gérer
cas
dans
méthode
«
__call
»
:
à
{
function
__call
(
$
m
,
$
avoir
)
{
/
/
gérer
appel
méthode
défini
if
(
$
m
=
=
'
'
test
'
'
)
{
echo
`
`
fonction
test
appeler
avec
valeur
$
avoir
'
'
;
return
$
avoir
;
}
}
}
$
o@card@
=
new
à
(
)
;
$
avoir
=
$
o@card@
>
test
(
,
`
`
'
'
,
,
true
)
;
/
/
test
exister
...
print_r
(
$
avoir
)
;
/
/
marche
retourner
paramètre
de
test
.
pour
attribut
,
utiliser
méthode
«
__get
»
«
__set
»
.
méthode
«
__get
»
être
appeler
tenter
de
accéder
à
valeur
de
variable
être
définir
dans
classe
.
prendre
unique
paramètre
nom
de
attribut
tenter
de
accéder
.
méthode
«
__set
»
être
appeler
tenter
de
affecter
valeur
à
attribut
être
définir
,
prendre
deux
paramètre
:
nom
de
variable
valeur
affecter
.
à
{
private
$
tab
=
array
(
)
;
function
__get
(
$
v
)
{
if
(
!
isset
(
$
this-
>
tab
[
$
v
]
)
)
return
false
;
else
return
$
this-
>
tab
[
$
v
]
;
}
function
__set
(
$
v
,
$
c
)
{
$
this-
>
tab
[
$
v
]
=
$
c
;
}
}
$
o@card@
=
new
à
(
)
;
$
o@card@
>
var
=
;
/
/
membre
var
exister
...
echo
$
o@card@
>
var
;
/
/
marche
affiche
!
itération
de
objet
PHP
indexer
attribut
de
objet
.
être
possible
de
accéder
à
liste
attribut
(
visibilité
permettre
)
à
aide
simple
boucle
itératif
«
foreach
»
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
à
{
public
$
v1
=
'
'
salut
'
'
;
public
$
v@card@
=
'
'
'
'
;
public
$
v@card@
=
'
'
ami
!
`
`
;
private
$
v@card@
=
'
'
priver
'
'
;
}
$
o@card@
=
new
à
(
)
;
foreach
(
$
o1
avoir
$
cle
=
>
$
valeur
)
{
echo
`
`
$
cle
=
$
valeur
<
br
/
>
\n
'
'
;
}
code
afficher
v1
=
salut
v@card@
=
v3
=
ami
!
attribut
être
visible
être
afficher
.
exister
interface
prédéfini
permettre
de
créer
propre
classe
de
itération
.
classe
«
Iterator
»
implémente
cinq
méthode
suivant
:
•
current
•
next
•
key
•
valid
•
rewind
pouvoir
créer
classe
implémentir
interface
,
par
exemple
,
naviguer
dans
résultat
de
requête
de
base
de
donnée
,
dans
tableau
.
type
hinting
PHP
permettre
de
contrôler
type
de
valeur
passer
en
paramètre
à
fonction
.
prendre
code
suivre
retourner
infos
de
utilisateur
de
classe
«
utilisateur
»
:
function
detail
(
$
user
)
{
return
$
user-
>
infos
(
)
;
}
fonction
attendre
objet
particulier
de
classe
utilisateur
.
fonctionner
à
merveille
code
être
blinder
.
passer
entier
,
marcher
,
être
«
return
$
user-
>
infos
(
)
»
PHP
générer
erreur
.
«
type
hinting
»
indiquer
à
PHP
attendre
fonction
.
function
detail
(
utilisateur
$
user
)
{
return
$
user-
>
infos
(
)
;
}
fois
PHP
retourner
erreur
dès
appel
à
fonction
recevoir
objet
de
classe
utilisateur
.
S
.
ROHAUT
courir
programmation
PHP
pager
/
exception
try
...
catch
PHP
inclure
support
exception
avec
bloc
«
try
...
catch
»
.
pouvoir
placer
code
«
à
risque
»
code
«
exceptionnel
»
pouvoir
produire
erreur
dans
bloc
«
try
»
,
gérer
erreur
,
selon
type
,
dans
bloc
«
catch
»
.
pouvoir
utiliser
bloc
«
catch
»
suivre
type
de
erreur
générer
.
attention
,
être
possible
gérer
erreur
avec
code
normal
.
try
{
...
/
/
code
à
risque
de
erreur
}
catch
(
exception
$
e
)
{
...
/
/
code
régler
situation
exceptionnel
}
sein
bloc
«
try
»
,
exécution
de
instruction
erroné
aller
déclencher
émission
de
signal
:
exception
.
signal
interrompre
exécution
reste
de
bloc
.
en
fonction
signal
,
PHP
exécuter
bloc
«
catch
»
approprié
.
remarquer
dans
bloc
«
catch
»
,
PHP
gérer
exception
à
aide
de
classe
spécial
appeler
«
exception
»
.
exception
être
faire
définir
par
objet
de
classe
de
classe
dérivé
.
pouvoir
créer
propre
gestionnaire
de
exception
.
pouvoir
écrire
bloc
«
catch
»
pour
gérer
exception
suivre
type
de
objet
.
déclenchement
avec
throw
pouvoir
déclencher
exception
à
aide
de
instruction
«
throw
»
.
code
provoquer
exception
:
try
{
$
erreur
=
'
'
message
de
erreur
'
'
;
throw
new
exception
(
$
erreur
)
;
echo
'
exécuter
'
;
}
catch
(
exception
$
e
)
{
echo
'
exception
:
'
.
$
e-
>
getMessage
(
)
.
'
à
ligne
'
.
$
e-
>
getLine
(
)
.
`
`
\n
'
'
;
}
à
aide
de
instruction
«
throw
»
avoir
provoquer
émission
de
exception
être
gérer
par
classe
«
exception
»
.
dans
cas
,
PHP
aller
rechercher
bloc
«
catch
»
correspondre
type
de
objet
créer
pour
gérer
exception
,
«
catch
(
exception
$
e
)
»
.
classe
exception
classe
personnaliser
classe
«
exception
»
être
imposer
par
PHP
classe
de
base
parent
de
classe
utilisable
avec
«
catch
»
.
classe
de
base
dispos
méthode
suivant
:
•
__construct
(
$
erreur
,
$
code
)
:
constructeur
avec
message
de
erreur
code
•
getMessage
(
)
:
retourner
message
de
erreur
générer
S
.
ROHAUT
courir
programmation
PHP
pager
/
•
getCode
(
)
:
coder
erreur
de
exception
•
getLine
(
)
:
numéro
de
ligne
script
avoir
provoquer
exception
•
getFile
(
)
:
nom
script
PHP
avoir
provoquer
exception
•
getTrace
(
)
getTraceAstring
(
)
:
gestion
de
pile
de
appel
,
java
.
•
__toString
(
)
:
chaîne
formater
à
afficher
.
méthode
«
getXXXX
(
)
»
être
final
.
pouvoir
étendre
.
constructeur
méthode
«
__toString
»
pouvoir
être
étendre
.
pouvoir
créer
propre
classe
dériver
.
MonException
extends
exception
{
public
function
__construct
(
$
message
=
'
'
erreur
par
défaut
'
'
,
$
code
=
)
{
parent
:
:
__construct
(
$
message
,
$
code
)
;
}
}
$
avoir
=
;
try
{
switch
(
$
avoir
)
{
caser
:
throw
new
MonException
(
`
`
ouille
!
`
`
,
$
avoir
)
;
break
;
case
:
throw
new
exception
(
`
`
avoir
!
`
`
,
$
avoir
)
;
break
;
}
}
catch
(
MonException
$
e
)
{
echo
$
e-
>
getMessage
(
)
;
}
catch
(
exception
$
e
)
{
echo
'
exception
:
'
.
$
e-
>
getMessage
(
)
.
'
ligne
'
.
$
e-
>
getLine
(
)
.
`
`
\n
'
'
;
}
$
avoir
valoir
,
«
MonException
»
être
envoyer
,
$
avoir
valoir
,
être
«
exception
»
.
PHP
:
erreur
exception
?
pouvoir
dans
cas
,
PHP
déclencher
exception
suivre
exécution
de
fonction
.
dans
cas
,
être
indiquer
dans
documentation
PHP
(
voir
site
PHP
)
en
ligne
.
dans
plupart
cas
,
être
ancien
système
de
gestion
erreur
être
utiliser
.
code
suivant
try
{
$
avoir
=
fopen
(
'
toto
'
,
'
r
'
)
;
}
catch
(
exception
$
e
)
{
echo
'
exception
:
'
.
$
e-
>
getMessage
(
)
;
}
donner
résultat
escompter
.
exécution
de
«
fopen
»
provoquer
émission
de
exception
erreur
PHP
de
type
warning
:
warning
:
fopen
(
toto
)
[
dns-remplacer
]
:
failed
to
open
stream
:
No
such
file
S
.
ROHAUT
courir
programmation
PHP
pager
/
directory
in
C
:
\apachefriends\xampp\htdocs\objet\
dns-remplacer
line
PHP
gérer
niveau
de
erreur
:
warning
,
notice
,
etc
.
par
exemple
,
problème
de
ouverture
de
fichier
émettre
erreur
de
type
warning
,
erreur
de
syntaxe
parse
,
utilisation
de
variable
déclarer
notice
.
pouvoir
régler
modifier
niveau
de
erreur
dans
dns-remplacé
,
via
fonction
.
parmi
fonction
,
deux
pouvoir
intéresser
.
«
set_error_handler
»
permettre
de
modifier
comportement
par
défaut
de
PHP
rencontrer
erreur
dans
script
.
lieu
de
exécuter
propre
gestionnaire
,
exécuter
.
attention
,
gestionnaire
pouvoir
gérer
type
de
erreur
(
syntaxe
,
etc
,
voir
http
:
/
/
dns-remplacer
/
manual
/
/
dns-remplacer
-
dns-remplacer
)
,
dans
cas
de
simple
warning
notice
n
'
avoir
de
problème
.
passer
en
paramètre
nom
de
propre
fonction
devoir
gérer
erreur
.
paramètre
être
parlant
.
dans
fonction
,
aller
déclencher
exception
à
réception
de
importer
erreur
.
function
gest_erreur
(
$
errno
,
$
errstr
,
$
errfile
,
$
errline
)
{
throw
new
exception
(
`
`
$
errstr
line
$
errline
'
'
,
$
errno
)
;
}
set_error_handler
(
`
`
gest_erreur
'
'
)
;
à
exécution
de
bloc
«
try
...
catch
»
,
avoir
fois
exception
:
fopen
(
toto
)
[
dns-remplacer
]
:
failed
to
open
stream
:
No
such
file
directory
line
vouloir
:
avoir
déclencher
exception
.
exception
par
défaut
instruction
PHP
générer
exception
instruction
être
sein
de
bloc
«
try
...
catch
»
,
PHP
générer
exception
par
défaut
avec
propre
gestionnaire
de
exception
.
pouvoir
modifier
état
avec
fonction
«
set_exception_handler
»
.
function
exception_handler
(
$
exception
)
{
echo
`
`
exception
imprévu
:
`
`
,
$
exception-
>
getMessage
(
)
,
`
`
\n
'
'
;
}
set_exception_handler
(
'
exception_handler
'
)
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
sauvegarder
objet
cas
de
session
information
indiqué
fonctionner
en
PHP
en
PHP
.
falloir
distinguer
cas
session
falloir
passer
objet
de
page
à
autre
cas
de
sauvegarde
de
objet
sur
disque
.
dans
premier
cas
,
session
être
utiliser
objet
pouvoir
être
passer
de
page
à
autre
en
respecter
règle
:
•
session
devoir
être
ouvrir
sur
page
par
fonction
«
session_start
(
)
»
avant
utilisation
de
objet
•
classe
devoir
être
définir
avant
ouverture
de
session
par
session_start
(
)
appel
à
objet
,
impliquer
de
répéter
déclaration
dans
page
,
de
placer
dans
fichier
à
inclure
avec
«
require
(
)
»
«
require_once
(
)
»
en
début
de
script
.
•
objet
devoir
être
variable
de
session
stocker
par
fonction
«
session_register
(
)
»
,
à
aide
tableau
global
«
$
_SESSION
[
]
»
.
exemple
:
dns-remplacer
:
<
?
class
panier
{
/
/
Eléments
de
panier
var
$
contenir
;
/
/
ajout
de
$
qte
article
de
type
$
code
panier
function
ajout_article
(
$
code
,
$
qte
)
{
if
(
isset
(
$
this-
>
contenir
[
$
code
]
)
)
$
this-
>
contenir
[
$
code
]
+
=
$
qte
;
else
$
this-
>
contenir
[
$
code
]
=
$
qte
;
}
/
/
suppression
de
$
num
article
type
$
artnr
panier
function
suppr_article
(
$
code
,
$
qte
)
{
if
(
$
this-
>
contenir
[
$
code
]
>
$
qte
)
{
$
this-
>
contenir
[
$
code
]
-
=
$
qte
;
return
TRUE
;
}
else
{
return
FALSE
;
}
}
function
liste_article
(
)
{
foreach
(
$
this-
>
contenir
avoir
$
ref
=
>
$
qte
)
echo
`
`
$
ref
=
$
qte
<
br
/
>
'
'
;
}
}
class
Panier_nomme
extends
panier
{
var
$
proprietaire
;
function
nom_proprietaire
(
$
nom
)
{
$
this-
>
proprietaire
=
$
nom
;
}
}
S
.
ROHAUT
courir
programmation
PHP
pager
/
?
>
dns-remplacé
:
<
?
php
require_once
(
`
`
dns-remplacer
'
'
)
;
session_start
(
)
;
?
>
<
html
>
<
head
>
<
title
>
page
<
/
title
>
<
/
head
>
<
body
>
<
?
$
_SESSION
[
'
objet
'
]
=
new
Panier_nomme
;
$
_SESSION
[
'
objet
'
]
-
>
nom_proprietaire
(
`
`
seb
'
'
)
;
$
_SESSION
[
'
objet
'
]
-
>
ajout_article
(
`
`
ref01
'
'
,
)
;
$
_SESSION
[
'
objet
'
]
-
>
suppr_article
(
`
`
ref01
'
'
,
)
;
$
_SESSION
[
'
objet
'
]
-
>
ajout_article
(
`
`
ref02
'
'
,
)
;
echo
`
`
{
$
_SESSION
[
'
objet
'
]
-
>
proprietaire
}
<
br
/
>
'
'
;
?
>
<
avoir
href
=
'
'
dns-remplacer
'
'
>
page
<
/
avoir
>
<
/
body
>
<
/
html
>
dns-remplacé
:
<
?
php
require_once
(
`
`
dns-remplacer
'
'
)
;
session_start
(
)
;
?
>
<
html
>
<
head
>
<
title
>
page
<
/
title
>
<
/
head
>
<
body
>
<
?
echo
$
_SESSION
[
'
objet
'
]
-
>
proprietaire
.
`
`
<
br
/
>
'
'
;
$
_SESSION
[
'
objet
'
]
-
>
liste_article
(
)
;
?
>
<
/
body
>
<
/
html
>
autre
cas
rien
empêcher
de
conserver
objet
pour
récupérer
,
après
avoir
fermer
session
.
pour
pouvoir
stocker
dans
fichier
en
base
de
donnée
.
pour
récupérer
format
correct
de
donnée
pour
stockage
,
falloir
utiliser
fonction
«
serialize
(
)
»
«
unserialize
(
)
»
.
premier
fonction
retourner
chaîne
de
texte
représenter
variable
(
objet
)
passer
en
paramètre
.
format
de
donnée
pouvoir
être
stocker
dans
manière
convenir|convier
.
second
fonction
prendre
paramètre
chaîne
de
texte
issu
de
serialize
retourner
variable
type
originel
,
dans
cas
objet
.
dns-remplacer
:
<
?
php
class
à
{
var
$
one
=
;
function
show_one
(
)
{
echo
$
this-
>
one
;
S
.
ROHAUT
courir
programmation
PHP
pager
/
}
}
?
>
dns-remplacé
:
<
?
php
include
(
`
`
dns-remplacer
'
'
)
;
$
avoir
=
new
à
;
$
s
=
serialize
(
$
avoir
)
;
/
/
enregistrer
$
s
dns-remplacé
pouvoir
trouver
.
$
fp
=
fopen
(
`
`
store
'
'
,
`
`
w
'
'
)
;
fputs
(
$
fp
,
$
s
)
;
fclose
(
$
fp
)
;
?
>
dns-remplacé
:
<
?
php
/
/
être
nécessaire
unserialize
(
)
fonctionner
include
(
`
`
dns-remplacer
'
'
)
;
$
s
=
implode
(
`
`
'
'
,
@
file
(
`
`
store
'
'
)
)
;
unserialize
(
$
s
)
;
/
/
,
utiliser
méthode
show_one
de
objet
$
avoir
.
$
a-
>
show_one
(
)
;
?
>
S
.
ROHAUT
courir
programmation
PHP
pager
/
document
Outline
1Introduction
1.1Définition
1.2Historique
1.3Utilisation
pratique
1.4Pages
statique
vs
page
dynamique
1.5Scripts
CGI
1.6Pages
dynamique
PHP
1.7Pourquoi
préférer
PHP
à
autre
langage
ASP
?
1.8Ce
devoir
connaître
1.9Le
nécessaire
serveur
1.10Le
nécessaire
client
1.11Le
respect
standard
2Bases
:
présentation
2.0.1Syntaxe
de
base
2.1Intégration
à
HTML
2.2Séparateur
de
instruction
2.3Bloc
de
instruction
2.4Commentaires
3Travailler
avec
variable
3.1Déclarer
variable
3.2Portée
variable
3.3Variables
prédéfinie
3.4Variables
dynamique
3.5Types
de
variable
3.5.1booléen
3.5.2Entiers
3.5.3Virgule
flottant
3.5.4Chaînes
de
caractère
3.5.5Les
tableau
3.5.6La
variable
objet
3.6Les
constant
3.7Obtenir
type
de
variable
3.8Définir
supprimer
variable
4Les
opérateur
4.1La
précédence
opérateur
4.2Opérateurs
arithmétique
4.3Opérateurs
de
assignation
4.4Opérateurs
sur
bit
4.5Opérateurs
de
comparaison
4.6Opérateur
de
erreur
4.7Opérateur
de
exécution
4.8Opérateurs
de
incrémentation
/
décrémentation
4.9Opérateurs
logique
4.10Opérateurs
de
chaîne
4.11Opérateur
de
tableau
5La
notion
de
expression
6Les
structure
de
contrôle
6.1if
6.2while
6.2.1while
classique
6.2.2do
...
while
6.3for
6.4foreach
6.5break
continuer
6.6switch
6.7return
6.8require
include
(
_once
)
7Les
fonction
7.1Syntaxe
porté
7.2Arguments
7.3Valeur
de
retour
7.4Fonctions
interne
8Gestion
formulaire
en
PHP
8.1GET
POST
8.2Récupération
par
tableau
8.3Récupération
direct
8.4Utiliser
tableau
9Date
heure
9.1Localisation
9.2Récupérer
date
heure
9.2.1date
(
)
9.2.2date
local
strftime
(
)
9.2.3Retour
par
tableau
getdate
(
)
9.2.4L'heure
localtime
(
)
9.3Récupérer
importer
dater
10MySQL
10.1Présentation
10.2Outils
10.2.1PhpMyAdmin
10.2.2MysqlCC
10.3Créer
base
10.4Utilisateurs
droit
10.5Créer
modifier
table
10.5.1Types
numérique
ip-remplacée
>
type
entier
ip-remplacée
>
type
réel
(
flottant
)
ip-remplacée
>
type
booléen
10.5.2Types
caractère
ip-remplacée
>
type
char
ip-remplacée
>
type
TEXT
ip-remplacée
>
typer
ENUM
ip-remplacée
>
typer
set
10.5.3Types
dater
ip-remplacer
>
format
supporter
ip-remplacée
>
type
DATETIME
ip-remplacée
>
type
dater
ip-remplacée
>
type
TIMESTAMP
ip-remplacée
>
type
TIME
ip-remplacée
>
type
YEAR
10.5.4Création
:
syntaxe
SQL
10.5.5Types
de
table
(
MyISAM
InnoDB
)
10.5.6Index
FULLTEXT
ip-remplacée
>
création
ip-remplacée
>
rechercher
ip-remplacer
>
recherche
booléen
10.6MySQL
PHP
10.6.1Connexion
à
base
de
donné
ip-remplacée
>
connexion
serveur
ip-remplacer
>
choix
de
base
ip-remplacer
>
fermeture
de
connexion
ip-remplacer
>
séquence
complet
pour
base
10.6.2Les
requête
ip-remplacée
>
exécuter
requête
ip-remplacer
>
nombre
de
ligne
affecter
ip-remplacée
>
nombre
de
ligne
retourner
ip-remplacée
>
récupérer
résultat
ip-remplacer
>
insertion
avec
auto-incrément
10.6.3Récupération
erreur
11Le
système
de
fichier
11.1Travail
sur
fichier
11.1.1Ouverture
11.1.2Lecture
ip-remplacée
>
fgets
(
)
ip-remplacée
>
fread
(
)
;
ip-remplacée
>
fscanf
(
)
ip-remplacée
>
fgetc
(
)
ip-remplacée
>
fgetss
(
)
ip-remplacée
>
fgetcsv
(
)
ip-remplacée
>
renvoyer
fichier
par
sortie
standard
11.1.3Ecriture
11.1.4Déplacement
ip-remplacée
>
fseek
(
)
ip-remplacée
>
ftell
(
)
ip-remplacée
>
rewind
(
)
11.1.5Fin
de
fichier
11.1.6Fermeture
11.2Travail
sur
répertoire
11.2.1Répertoire
actuel
11.2.2Se
déplacer
11.2.3Ouvrir
,
lister
,
fermer
11.2.4Récupérer
entrée
11.3Travail
sur
système
de
fichier
11.3.1Informations
sur
fichier
11.3.2Actions
sur
fichier
répertoire
11.4Upload
de
fichier
12Travail
sur
chaîne
12.1Fonctions
pour
code
HTML
MySQL
12.1.1Gestion
caractère
verrouiller
12.1.2balises
caractère
spécial
HTML
12.2Fonctions
texte
général
12.2.1Découper
chaîne
12.2.2Rechercher
comparer
13Sessions
cookies
13.1Les
cookies
13.1.1Création
13.1.2Accès
13.1.3Suppression
13.2Identification
HTTP
13.2.1Connexion
13.2.2Déconnexion
13.3Sessions
PHP
13.3.1Principe
13.3.2Utilisation
ip-remplacée
>
ouverture
ip-remplacée
>
variable
de
session
13.3.3Expiration
de
session
13.3.4Changer
accès
par
défaut
14Image
14.1Pré-requis
important
14.2Créer
image
14.2.1Types
possible
14.2.2Création
ip-remplacée
>
nouveau
image
dynamique
ip-remplacée
>
récupération
de
image
existant
14.2.3Publication
14.2.4Chargement
via
autre
page
14.3Travailler
sur
image
14.3.1Récupérer
information
14.3.2Les
couleur
14.3.3Dessin
ip-remplacée
>
remplissage
ip-remplacée
>
ip-remplacée
>
ligner
ip-remplacée
>
rectangle
ip-remplacée
>
cercle
,
ellipse
ip-remplacée
>
polygone
ip-remplacée
>
texte
simple
15La
programmation
objet
15.1Structure
15.2Création
de
objet
15.3Accès
membre
15.3.1PHP
15.3.2PHP
15.4L'opérateur
:
:
15.5Les
variable
,
protection
15.5.1PHP
4.x
15.5.2PHP
5.x
ip-remplacée
>
protection
variable
fonction
ip-remplacée
>
attribut
méthode
statique
ip-remplacée
>
constant
de
classe
15.6Héritage
polymorphisme
15.7Les
mots-clés
parent
self
15.8Constructeurs
15.8.1PHP
15.8.2PHP
15.9Constructeurs
classe
dériver
15.9.1PHP
15.9.2PHP
15.10Destructeur
15.10.1PHP
15.10.2PHP
15.11Affectation
de
objet
15.11.1Code
commun
15.11.2PHP
15.11.3PHP
15.12Comparaison
de
objet
15.12.1PHP
15.12.2PHP
16Nouveautés
en
PHP
16.1Les
objet
16.1.1La
fonction
__autoload
16.1.2Les
classe
abstraire
16.1.3Classes
,
méthode
variable
finale
16.1.4Les
interface
objet
16.1.5Gestion
dynamique
méthode
attribut
16.1.6Les
itération
de
objet
16.1.7Type
hinting
16.2Les
excepter
16.2.1try
...
catch
16.2.2Déclenchement
avec
throw
16.2.3clas
exception
classe
personnaliser
16.2.4PHP
:
erreur
exception
?
16.2.5Exception
par
défaut
17Sauvegarder
objet
17.1Cas
de
session
17.2Autres
cas
