Cours	N.C.m.s	cours
introductif	A.qual.m.s	introductif
au	P+D.def.m.s	au
PHP	N.P.m.s	Php
Riad	N.P.m.s	Riad
MOKADEM	N.P.m.s	Mokadem
Qu'	PRO.rel.m.s	que
est	V.P.3.s	être
-ce	CL.suj.3.m.s	ce
que	C.S	que
PHP	N.P.m.s	Php
?	PONCT.S	?

PHP	N.P.m.s	Php
est	V.P.3.s	être
un	D.ind.m.s	un
langage	N.C.m.s	langage
interprété	VK.m.s	interpréter
(	PONCT.W	(
un	D.ind.m.s	un
langage	N.C.m.s	langage
de	P	de
script	N.C.m.s	script
)	PONCT.W	)
exécuté	VK.m.s	exécuter
du	P+D.def.m.s	du
côté	N.C.m.s	côté
serveur	A.qual.m.s	serveur
(	PONCT.W	(
comme	P	comme
les	D.def.m.p	le
scripts	N.C.m.p	script
CGI	N.P.f.s	Cgi
,	PONCT.W	,
ASP	N.P.f.s	Asp
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
et	C.C	et
non	ADV.neg	non
du	P+D.def.m.s	du
côté	N.C.m.s	côté
client	A.qual.m.s	client
(	PONCT.W	(
un	D.ind.m.s	un
script	N.C.m.s	script
écrit	VK.m.s	écrire
en	P	en
Javascript	N.P.f.s	Javascript
ou	C.C	ou
une	D.ind.f.s	un
applet	N.C.f.s	applet
Java	N.P.m.s	Java
s'	CL.refl.3.f.s	se
exécute	V.P.3.s	exécuter
sur	P	sur
votre	D.poss.m.s	votre
ordinateur	N.C.m.s	ordinateur
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
du	P+D.def.m.s	du
langage	N.C.m.s	langage
provient	V.P.3.s	provenir
de	P	de
celles	PRO.dem.f.p	celui
du	P+D.def.m.s	du
langage	N.C.m.s	langage
C	PONCT.W	C
,	PONCT.W	,
du	P+D.def.m.s	du
Perl	N.P.m.s	Perl
et	C.C	et
de	P	de
Java	N.P.m.s	Java
.	PONCT.S	.

Ses	D.poss.m.p	son
principaux	A.qual.m.p	principal
atouts	N.C.m.p	atout
sont	V.P.3.p	être
:	PONCT.W	:
•	P	à
Une	D.ind.f.s	un
grande	A.qual.f.s	grand
communauté	N.C.f.s	communauté
de	P	de
développeurs	N.C.m.p	développeur
partageant	VG	partager
des	D.ind.f.p	du
centaines	N.C.f.p	centaine
de	P	de
milliers	N.C.m.p	millier
d'	P	de
exemples	N.C.m.p	exemple
de	P	de
script	N.C.m.s	script
PHP	N.C.m.s	php
;	PONCT.W	;
•	N.C.m.s	•
•	N.C.m.s	•
•	P	à
La	D.def.f.s	le
gratuité	N.C.f.s	gratuité
et	C.C	et
la	D.def.f.s	le
disponibilité	N.C.f.s	disponibilité
du	P+D.def.m.s	du
code	N.C.m.s	code
source	N.C.f.s	source
(	PONCT.W	(
PHP	N.P.m.s	Php
est	V.P.3.s	être
distribué	VK.m.s	distribuer
sous	P	sous
licence	N.C.f.s	licence
GNU	N.P.f.s	Gnu
GPL	N.P.m.s	Gpl
)	PONCT.W	)
;	PONCT.W	;
•	P	à
La	D.def.f.s	le
simplicité	N.C.f.s	simplicité
d'	P	de
interfaçage	N.C.m.s	interfaçage
avec	P	avec
des	D.ind.f.p	du
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
(	PONCT.W	(
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
SGBD	N.P.m.s	Sgbd
sont	V.P.3.p	être
supportés	VK.m.p	supporter
,	PONCT.W	,
mais	C.C	mais
le	D.def.m.s	le
plus	ADV.-	plus
utilisé	VK.m.s	utiliser
avec	P	avec
ce	D.dem.m.s	ce
langage	N.C.m.s	langage
est	V.P.3.s	être
MySQL	N.P.m.s	Mysql
,	PONCT.W	,
un	D.ind.m.s	un
SGBD	N.C.m.s	<unknown>
gratuit	A.qual.m.s	gratuit
disponible	A.qual.m.s	disponible
sur	P	sur
de	D.ind.f.p	de
nombreuses	A.qual.f.p	nombreux
plateformes	N.C.f.p	plateforme
:	PONCT.W	:
Unix	N.P.m.s	Unix
,	PONCT.W	,
Linux	N.P.m.s	Linux
,	PONCT.W	,
Windows	N.P.m.s	Windows
,	PONCT.W	,
MacOs	N.P.m.s	Macos
X	N.card.m.s	X
,	PONCT.W	,
Solaris	N.P.m.s	Solaris
,	PONCT.W	,
etc	ADV.-	<unknown>
...	PONCT.W	<unknown>
)	PONCT.W	)
;	PONCT.W	;
•	P	à
L'	D.def.f.s	le
intégration	N.C.f.s	intégration
au	P+D.def.m.s	au
sein	N.C.m.s	sein
de	P	de
nombreux	A.qual.m.p	nombreux
serveurs	N.C.m.p	serveur
web	ET	web
(	PONCT.W	(
Apache	N.P.m.s	Apache
,	PONCT.W	,
Microsoft	N.P.m.s	Microsoft
IIS	N.P.x.s	Iis
,	PONCT.W	,
etc	ADV.-	<unknown>
.	PONCT.S	.
)	PONCT.W	)
.	PONCT.S	.

La	D.def.f.s	le
simplicité	N.C.f.s	simplicité
d'	P	de
écriture	N.C.f.s	écriture
de	P	de
scripts	N.C.m.p	script
;	PONCT.W	;
La	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
inclure	VW	inclure
le	D.def.m.s	le
script	N.C.m.s	script
PHP	N.P.m.s	Php
au	P+D.def.m.s	au
sein	N.C.m.s	sein
d'	P	de
une	D.ind.f.s	un
page	N.C.f.s	page
HTML	N.P.m.s	<unknown>
(	PONCT.W	(
contrairement	ADV.-	contrairement
aux	P+D.def.m.p	au
scripts	N.C.m.p	script
CGi	N.P.f.s	Cgi
,	PONCT.W	,
pour	P	pour
lesquels	PRO.int.m.p	lequel
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
écrire	VW	écrire
des	D.ind.f.p	du
lignes	N.C.f.p	ligne
de	P	de
code	N.C.m.s	code
pour	P	pour
afficher	VW	afficher
chaque	D.ind.f.s	chaque
ligne	N.C.f.s	ligne
en	P	en
langage	N.C.m.s	langage
HTML	N.P.f.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Origines	N.C.f.p	origine
de	P	de
PHP	N.P.m.s	Php
Le	D.def.m.s	le
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
a	V.P.3.s	avoir
été	VK.m.s	être
mis	VK.m.s	mettre
au	P+D.def.m.s	au
point	N.C.m.s	point
au	P+D.def.m.s	au
début	N.C.m.s	début
d'	P	de
automne	N.C.m.s	automne
1994	N.card.f.s	@card@
par	P	par
Rasmus	N.P.m.s	Rasmus
Lerdorf	N.P.m.s	Lerdorf
.	PONCT.S	.

Ce	D.dem.m.s	ce
langage	N.C.m.s	langage
de	P	de
script	N.C.m.s	script
lui	CL.obj.3.m.s	lui
permettait	V.I.3.s	permettre
de	P	de
conserver	VW	conserver
la	D.def.f.s	le
trace	N.C.f.s	trace
des	P+D.def.m.p	du
utilisateurs	N.C.m.p	utilisateur
venant	VG	venir
consulter	VW	consulter
son	D.poss.m.s	son
CV	CL.suj.3.m.s	cv
sur	P	sur
son	D.poss.m.s	son
site	N.C.m.s	site
,	PONCT.W	,
grâce	N.C.f.s	grâce
à	P	à
l'	D.def.m.s	le
accès	N.C.m.s	accès
à	P	à
une	D.ind.f.s	un
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
par	P	par
l'	D.def.m.s	le
intermédiaire	N.C.m.s	intermédiaire
de	P	de
requêtes	N.C.f.p	requête
SQL	N.P.m.s	Sql
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
étant	VG	être
donné	VK.m.s	donner
que	C.S	que
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
internautes	N.C.m.p	internaute
lui	CL.obj.3.m.s	lui
demandèrent	V.J.3.p	demander
ce	D.dem.m.s	ce
programme	N.C.m.s	programme
,	PONCT.W	,
Rasmus	N.P.m.s	Rasmus
Lerdorf	N.P.m.s	Lerdorf
mit	V.J.3.s	mettre
en	P	en
ligne	N.C.f.s	ligne
en	P	en
1995	N.card.f.s	@card@
la	D.def.f.s	le
première	A.ord.f.s	premier
version	N.C.f.s	version
de	P	de
ce	D.dem.m.s	ce
programme	N.C.m.s	programme
qu'	PRO.rel.m.s	que
il	CL.suj.3.m.s	il
baptisa	V.J.3.s	baptiser
Personal	N.P.m.s	Personal
Sommaire	N.P.m.s	Sommaire
Page	N.P.m.s	Page
Tools	N.P.m.s	Tools
,	PONCT.W	,
puis	C.C	pui
Personal	N.P.m.s	Personal
Home	ET	home
Page	N.C.f.s	page
v1.0	N.card.f.s	@card@
(	PONCT.W	(
traduisez	V.Y.2.p	traduire
page	N.C.f.s	page
personnelle	A.qual.f.s	personnel
version	N.C.f.s	version
1.0	A.card.f.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Etant	VG	eter
donné	VK.m.s	donner
le	D.def.m.s	le
succès	N.C.m.s	succès
de	P	de
PHP	N.P.m.s	Php
1.0	N.card.f.s	@card@
,	PONCT.W	,
Rasmus	N.P.m.s	Rasmus
Lerdorf	N.P.m.s	Lerdorf
décida	V.J.3.s	décider
d'	P	de
améliorer	VW	améliorer
ce	D.dem.m.s	ce
langage	N.C.m.s	langage
en	P	en
y	CL.obj.3.m.s	y
intégrant	VG	intégrer
des	D.ind.f.p	du
structures	N.C.f.p	structure
plus	ADV.-	plus
avancées	VK.f.p	avancer
telles	A.qual.f.p	tel
que	C.S	que
des	D.ind.f.p	du
boucles	N.C.m.p	boucle
,	PONCT.W	,
des	P+D.def.f.p	du
structures	N.C.f.p	structure
conditionnelles	A.qual.f.p	conditionnel
,	PONCT.W	,
et	C.C	et
y	CL.obj.3.m.s	y
intégra	V.J.3.s	intégrer
un	D.ind.m.s	un
package	N.C.m.s	package
permettant	VG	permettre
d'	P	de
interpréter	VW	interpréter
les	D.def.f.p	le
formulaires	N.C.f.p	formulaire
qu'	PRO.rel.f.p	que
il	CL.suj.3.m.s	il
avait	V.I.3.s	avoir
développé	VK.m.s	développer
(	PONCT.W	(
FI	N.P.m.s	FI
,	PONCT.W	,
Form	N.P.m.s	Form
Interpreter	N.P.m.s	Interpreter
)	PONCT.W	)
ainsi	ADV.-	ainsi
que	C.S	que
le	D.def.m.s	le
support	N.C.m.s	support
de	P	de
mSQL	N.C.m.s	<unknown>
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
de	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
que	C.S	que
la	D.def.f.s	le
version	N.C.f.s	version
2	A.card.f.s	@card@
du	P+D.def.m.s	du
langage	N.C.m.s	langage
,	PONCT.W	,
baptisée	VK.f.s	baptiser
pour	P	pour
l'	D.def.f.s	le
occasion	N.C.f.s	occasion
PHP/FI	N.P.m.s	Phpfifi
version	N.C.f.s	version
2	A.card.f.s	@card@
,	PONCT.W	,
vit	V.J.3.s	voir
le	D.def.m.s	le
jour	N.C.m.s	jour
durant	P	durant
l'	D.def.m.s	le
été	N.C.m.s	été
1995	N.card.f.s	@card@
.	PONCT.S	.

Il	CL.suj.3.m.s	il
fut	V.J.3.s	être
rapidement	ADV.-	rapidement
utilisé	VK.m.s	utiliser
sur	P	sur
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
sites	N.C.m.p	site
(	PONCT.W	(
15000	PRO.card.m.p	@card@
fin	N.C.f.s	fin
1996	N.card.f.s	@card@
,	PONCT.W	,
puis	C.C	pui
50000	PRO.card.m.p	@card@
en	P	en
milieu	N.C.m.s	milieu
d'	P	de
année	N.C.f.s	année
1997	N.card.f.s	@card@
)	PONCT.W	)
.	PONCT.S	.

A	P	à
partir	VW	partir
de	P	de
1997	N.card.f.s	@card@
,	PONCT.W	,
Zeev	N.P.m.s	Zeev
Suraski	N.P.m.s	Suraski
et	C.C	et
Andi	N.P.m.s	Andi
Gurmans	N.P.m.s	Gurmans
rejoignirent	V.J.3.p	rejoindre
Rasmus	N.P.m.s	Rasmus
pour	P	pour
former	VW	former
une	D.ind.f.s	un
équipe	N.C.f.s	équipe
de	P	de
programmeurs	N.C.m.p	programmeur
afin	ADV.-	afin
de	P	de
mettre	VW	mettre
au	P+D.def.m.s	au
point	N.C.m.s	point
PHP	N.P.m.s	Php
3	A.card.m.s	@card@
(	PONCT.W	(
Stig	N.P.m.s	Stig
Bakken	N.P.m.s	Bakken
,	PONCT.W	,
Shane	N.P.m.s	Shane
Caraveo	N.P.m.s	Caraveo
et	C.C	et
Jim	N.P.m.s	Jim
Winstead	N.P.m.s	Winstead
les	CL.obj.3.m.p	le
rejoignirent	V.J.3.p	rejoindre
par	P	par
la	D.def.f.s	le
suite	N.C.f.s	suite
)	PONCT.W	)
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
ainsi	ADV.-	ainsi
que	C.S	que
la	D.def.f.s	le
version	N.C.f.s	version
3.0	N.card.f.s	@card@
de	P	de
PHP	N.P.m.s	Php
fut	V.J.3.s	être
disponible	A.qual.m.s	disponible
le	D.def.m.s	le
6	A.card.m.s	@card@
juin	N.C.m.s	juin
1998	N.card.f.s	@card@
.	PONCT.S	.

A	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
l'	D.def.f.s	le
année	N.C.f.s	année
1999	N.card.f.s	@card@
la	D.def.f.s	le
version	N.C.f.s	version
4.0	N.card.f.s	@card@
de	P	de
PHP	N.P.m.s	Php
,	PONCT.W	,
baptisée	VK.f.s	baptiser
PHP4	N.P.m.s	Php4
,	PONCT.W	,
est	V.P.3.s	être
apparue	VK.f.s	apparaître
.	PONCT.S	.

PHP	N.C.m.s	php
en	CL.obj.3.m.s	en
est	V.P.3.s	être
aujourd'hui	ADV.-	aujourd'hui
à	P	à
sa	D.poss.f.s	son
cinquième	A.ord.f.s	cinquième
version	N.C.f.s	version
.	PONCT.S	.

SGBD	N.P.m.s	Sgbd
supportés	VK.m.p	supporter
par	P	par
PHP	N.P.m.s	Php
PHP	N.P.m.s	Php
permet	V.P.3.s	permettre
un	D.ind.m.s	un
interfaçage	N.C.m.s	interfaçage
simple	A.qual.m.s	simple
avec	P	avec
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
systèmes	N.C.m.p	système
de	P	de
gestion	N.C.f.s	gestion
de	P	de
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
(	PONCT.W	(
SGBD	N.P.m.s	Sgbd
)	PONCT.W	)
,	PONCT.W	,
parmi	P	parmi
lesquels	PRO.rel.m.p	lequel
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
Adabas	N.P.m.s	Adabas
D	P+D.def.m.s	du
dBase	N.P.m.s	<unknown>
Empress	N.P.m.s	Empress
FilePro	N.P.m.s	Filepro
Informix	N.P.m.s	Informix
Interbase	N.P.m.s	Interbase
mSQL	N.P.m.s	<unknown>
MySQL	N.P.m.s	Mysql
Oracle	N.P.m.s	Oracle
PostgreSQL	N.P.x.s	Postgresql
•	P+D.def.m.s	c
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
Solid	N.P.m.s	Solid
Sybase	N.P.m.s	Sybase
Velocis	N.P.m.s	Velocis
Unix	N.P.m.s	Unix
dbm	N.C.m.p	<unknown>
L'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
du	P+D.def.m.s	du
code	N.C.m.s	code
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
Un	D.ind.m.s	un
script	N.C.m.s	script
PHP	N.P.m.s	Php
est	V.P.3.s	être
un	D.ind.m.s	un
simple	A.qual.m.s	simple
fichier	N.C.m.s	fichier
texte	N.C.m.s	texte
contenant	VG	contenir
des	D.ind.f.p	du
instructions	N.C.f.p	instruction
écrites	VK.f.p	écrire
à	P	à
l'	D.def.f.s	le
aide	N.C.f.s	aide
de	P	de
caractères	N.C.m.p	caractère
ASCII	N.P.m.s	Ascii
7	D.card.m.p	@card@
bits	N.C.m.p	bit
(	PONCT.W	(
des	D.ind.m.p	du
caractères	N.C.m.p	caractère
non	ADV.neg	non
accentués	VK.m.p	accentuer
)	PONCT.W	)
incluses	A.qual.m.p	inclus
dans	P	dans
un	D.ind.m.s	un
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
à	P	à
l'	D.def.f.s	le
aide	N.C.f.s	aide
de	P	de
balises	N.C.f.p	balise
spéciales	A.qual.f.p	spécial
et	C.C	et
stocké	VK.m.s	stocker
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
.	PONCT.S	.

Ce	D.dem.m.s	ce
fichier	N.C.m.s	fichier
doit	V.P.3.s	devoir
avoir	VW	avoir
l'	D.def.f.s	le
extension	N.C.f.s	extension
«	P	à
.php	N.C.m.s	<unknown>
»	N.C.m.s	»
pour	P	pour
pouvoir	VW	pouvoir
être	VW	être
interprété	VK.m.s	interpréter
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
lorsqu'	C.S	lorsque
un	D.ind.m.s	un
navigateur	N.C.m.s	navigateur
(	PONCT.W	(
le	D.def.m.s	le
client	N.C.m.s	client
)	PONCT.W	)
désire	V.P.3.s	désirer
accéder	VW	accéder
à	P	à
une	D.ind.f.s	un
page	N.C.f.s	page
dynamique	A.qual.f.s	dynamique
réalisé	VK.m.s	réaliser
en	P	en
PHP	N.P.m.s	Php
:	PONCT.W	:
•	N.C.m.s	•
•	P	à
le	D.def.m.s	le
serveur	N.C.m.s	serveur
reconnait	V.I.3.s	reconner
l'	D.def.f.s	le
extension	N.C.f.s	extension
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
PHP	N.C.m.s	php
et	C.C	et
le	D.def.m.s	le
transmet	N.C.m.s	transmet
à	P	à
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
PHP	N.P.m.s	Php
•	N.C.m.s	•
•	N.C.m.s	•
L'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
exécute	V.P.3.s	exécuter
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
puis	C.C	pui
envoie	V.P.3.s	envoyer
les	D.def.f.p	le
sorties	N.C.f.p	sortie
éventuelles	A.qual.f.p	éventuel
au	P+D.def.m.s	au
serveur	N.C.m.s	serveur
Dès	P	dès
que	C.S	que
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
rencontre	V.P.3.s	rencontrer
une	D.ind.f.s	un
balise	N.C.f.s	balise
indiquant	VG	indiquer
que	C.S	que
les	D.def.f.p	le
lignes	N.C.f.p	ligne
suivantes	A.qual.f.p	suivant
sont	V.P.3.p	être
du	P+D.def.m.s	du
code	N.C.m.s	code
PHP	N.P.m.s	Php
,	PONCT.W	,
il	CL.suj.3.m.s	il
ne	ADV.neg	ne
lit	V.P.3.s	lire
plus	ADV.neg	plus
les	D.def.f.p	le
instructions	N.C.f.p	instruction
:	PONCT.W	:
il	CL.suj.3.m.s	il
les	CL.obj.3.f.p	la
exécute	V.P.3.s	exécuter
!	PONCT.S	!

A	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
script	N.C.m.s	script
,	PONCT.W	,
le	D.def.m.s	le
serveur	N.C.m.s	serveur
transmet	V.P.3.s	transmettre
le	D.def.m.s	le
résultat	N.C.m.s	résultat
au	P+D.def.m.s	au
client	N.C.m.s	client
(	PONCT.W	(
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
)	PONCT.W	)
.	PONCT.S	.

Un	D.ind.m.s	un
script	N.C.m.s	script
PHP	N.P.m.s	Php
est	V.P.3.s	être
interprété	VK.m.s	interpréter
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
,	PONCT.W	,
les	D.def.m.p	le
utilisateurs	N.C.m.p	utilisateur
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
donc	ADV.-	donc
pas	ADV.neg	pas
voir	VW	voir
le	D.def.m.s	le
code	N.C.m.s	code
source	N.C.f.s	source
!	PONCT.S	!

Le	D.def.m.s	le
code	N.C.m.s	code
PHP	N.P.m.s	Php
stocké	VK.m.s	stocker
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
n'	ADV.neg	ne
est	V.P.3.s	être
donc	ADV.-	donc
jamais	ADV.neg	jamais
visible	A.qual.m.s	visible
directement	ADV.-	directement
par	P	par
le	D.def.m.s	le
client	N.C.m.s	client
puisque	C.S	puisque
dès	P	dès
qu'	C.S	que
il	CL.suj.3.m.s	il
en	CL.obj.3.m.s	en
demande	V.P.3.s	demander
l'	D.def.m.s	le
accès	N.C.m.s	accès
,	PONCT.W	,
le	D.def.m.s	le
serveur	N.C.m.s	serveur
l'	D.def.m.s	le
interprète	N.C.m.s	interprète
!	PONCT.S	!

De	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
aucune	D.neg.f.s	aucun
modification	N.C.f.s	modification
n'	ADV.neg	ne
est	V.P.3.s	être
à	P	à
apporter	VW	apporter
sur	P	sur
les	D.def.m.p	le
navigateurs	N.C.m.p	navigateur
.	PONCT.S	.

Implantation	N.C.f.s	implantation
au	P+D.def.m.s	au
sein	N.C.m.s	sein
du	P+D.def.m.s	du
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
Pour	P	pour
que	C.S	que
le	D.def.m.s	le
script	N.C.m.s	script
soit	V.S.3.s	être
interprété	VK.m.s	interpréter
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
deux	D.card.f.p	deux
conditions	N.C.f.p	condition
sont	V.P.3.p	être
nécessaires	A.qual.f.p	nécessaire
:	PONCT.W	:
•	N.C.m.s	•
•	P	à
Le	D.def.m.s	le
fichier	N.C.m.s	fichier
contenant	VG	contenir
le	D.def.m.s	le
code	N.C.m.s	code
doit	V.P.3.s	devoir
avoir	VW	avoir
l'	D.def.f.s	le
extension	N.C.f.s	extension
telle	A.qual.f.s	tel
que	C.S	que
.php	ADV.-	<unknown>
et	C.C	et
non	ADV.neg	non
.html	N.C.m.s	<unknown>
Le	D.def.m.s	le
code	N.C.m.s	code
PHP	N.P.m.s	Php
contenu	VK.m.s	contenir
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
doit	V.P.3.s	devoir
être	VW	être
délimité	VK.m.s	délimiter
par	P	par
des	D.ind.f.p	du
balises	N.C.f.p	balise
du	P+D.def.m.s	du
type	N.C.m.s	type
<	N.C.m.s	<
?	PONCT.S	?

et	C.C	et
?	PONCT.S	?

>	P	à
Un	D.ind.m.s	un
script	N.C.m.s	script
PHP	N.C.m.s	php
doit	V.P.3.s	devoir
:	PONCT.W	:
•	VK.m.s	être
•	P	à
comporter	VW	comporter
l'	D.def.f.s	le
extension	N.C.f.s	extension
.php	ADV.-	<unknown>
être	VW	être
imbriqué	VK.m.s	imbriquer
entre	P	entre
les	D.def.m.p	le
délimiteurs	N.C.m.p	délimiteur
<	N.C.m.p	<
?	PONCT.S	?

et	C.C	et
?	PONCT.S	?

>	N.C.m.s	>
Pour	P	pour
des	D.ind.f.p	du
raisons	N.C.f.p	raison
de	P	de
conformité	N.C.f.s	conformité
avec	P	avec
certaines	D.ind.f.p	certain
normes	N.C.f.p	norme
(	PONCT.W	(
XML	N.P.m.s	Xml
et	C.C	et
ASP	N.P.m.s	Asp
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
,	PONCT.W	,
plusieurs	D.ind.f.p	plusieurs
balises	N.C.f.p	balise
peuvent	V.P.3.p	pouvoir
être	VW	être
utilisées	VK.f.p	utiliser
pour	P	pour
délimiter	VW	délimiter
un	D.ind.m.s	un
code	N.C.m.s	code
PHP	N.C.m.s	php
:	PONCT.W	:
1	N.card.m.s	@card@
.	PONCT.S	.

2	A.card.m.s	@card@
.	PONCT.S	.

3	A.card.m.s	@card@
.	PONCT.S	.

4	A.card.m.s	@card@
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

et	C.C	et
?	PONCT.S	?

>	N.C.m.s	>
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
et	C.C	et
?	PONCT.S	?

>	P	à
<script	N.C.m.s	<unknown>
language="php">	N.C.m.p	languageçphpçë
et	C.C	et
</script>	N.P.x.s	<unknown>
<%php	N.P.x.s	<unknown>
et	C.C	et
%>	N.C.m.p	çù
Un	D.ind.m.s	un
exemple	N.C.m.s	exemple
de	P	de
script	N.C.m.s	script
simple	A.qual.m.s	simple
Voici	V.P.3.s	<unknown>
ci-dessous	ADV.-	ci-dessous
l'	D.def.m.s	le
exemple	N.C.m.s	exemple
classique	A.qual.m.s	classique
de	P	de
script	N.C.m.s	script
PHP	N.P.m.s	Php
:	PONCT.W	:
<html>	N.C.m.p	<unknown>
<head><title>Exemple</title></head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
"	PONCT.W	"
Hello	N.P.m.s	Hello
world	ET	world
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
On	CL.suj.3.m.s	on
notera	V.F.3.s	noter
bien	ADV.-	bien
évidemment	ADV.-	évidemment
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	ET	echo
permet	V.P.3.s	permettre
d'	P	de
afficher	VW	afficher
sur	P	sur
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
la	D.def.f.s	le
chaine	N.C.f.s	chaine
délimitée	VK.f.s	délimiter
par	P	par
les	D.def.m.p	le
guillemets	N.C.m.p	guillemet
.	PONCT.S	.

L'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
du	P+D.def.m.s	du
code	N.C.m.s	code
Un	D.ind.m.s	un
code	N.C.m.s	code
PHP	N.P.m.s	Php
(	PONCT.W	(
celui	PRO.dem.m.s	celui
compris	VK.m.s	comprendre
entre	P	entre
les	D.def.m.p	le
délimiteurs	N.C.m.p	délimiteur
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
et	C.C	et
?	PONCT.S	?

>	N.C.m.s	>
)	PONCT.W	)
est	V.P.3.s	être
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
d'	P	de
instructions	N.C.f.p	instruction
se	CL.refl.3.f.p	se
terminant	VG	terminer
chacune	PRO.ind.f.s	chacun
par	P	par
un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
(	PONCT.W	(
comme	P	comme
en	P	en
langage	N.C.m.s	langage
C	PONCT.W	C
)	PONCT.W	)
.	PONCT.S	.

Lorsque	C.S	lorsque
le	D.def.m.s	le
code	N.C.m.s	code
est	V.P.3.s	être
interprété	VK.m.s	interpréter
,	PONCT.W	,
les	D.def.m.p	le
espaces	N.C.m.p	espace
,	PONCT.W	,
retours	N.C.m.p	retour
chariot	N.C.m.s	chariot
et	C.C	et
tabulation	N.C.f.s	tabulation
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
pris	VK.m.s	prendre
en	P	en
compte	N.C.m.s	compte
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
tout	ADV.-	tout
de	P	de
même	A.qual.m.s	même
conseillé	VK.m.s	conseiller
d'	P	de
en	CL.obj.3.m.s	en
mettre	VW	mettre
(	PONCT.W	(
ce	CL.suj.3.m.s	ce
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
parce	N.C.f.s	parce
qu'	C.S	que
ils	CL.suj.3.m.p	il
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
interprétés	VK.m.p	interpréter
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
les	CL.obj.3.m.p	le
utiliser	VW	utiliser
)	PONCT.W	)
afin	V.P.3.s	<unknown>
de	P	de
rendre	VW	rendre
le	D.def.m.s	le
code	N.C.m.s	code
plus	ADV.-	plus
lisible	A.qual.m.s	lisible
(	PONCT.W	(
pour	P	pour
vous	PPRO.2.m.p	vous
,	PONCT.W	,
puisque	C.S	puisque
les	D.def.m.p	le
utilisateurs	N.C.m.p	utilisateur
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
lire	VW	lire
le	D.def.m.s	le
code	N.C.m.s	code
source	N.C.f.s	source
:	PONCT.W	:
il	CL.suj.3.m.s	il
est	V.P.3.s	être
interprété	VK.m.s	interpréter
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
Une	D.ind.f.s	un
autre	A.qual.f.s	autre
façon	N.C.f.s	façon
de	P	de
rendre	VW	rendre
le	D.def.m.s	le
code	N.C.m.s	code
plus	ADV.-	plus
compréhensible	A.qual.m.s	compréhensible
consiste	V.P.3.s	consister
à	P	à
insérer	VW	insérer
des	D.ind.m.p	du
commentaires	N.C.m.p	commentaire
,	PONCT.W	,
des	D.ind.f.p	du
lignes	N.C.f.p	ligne
qui	PRO.rel.f.p	qui
seront	V.F.3.p	être
tout	ADV.-	tout
simplement	ADV.-	simplement
ignorées	VK.f.p	ignorer
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
lors	A.qual.m.s	lors
de	P	de
l'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
.	PONCT.S	.

Pour	P	pour
ce	CL.obj.3.m.s	ce
faire	VW	faire
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
,	PONCT.W	,
comme	P	comme
en	P	en
langage	N.C.m.s	langage
C	PONCT.W	C
,	PONCT.W	,
d'	P	de
utiliser	VW	utiliser
des	D.ind.f.p	du
balises	N.C.f.p	balise
qui	PRO.rel.f.p	qui
vont	V.P.3.p	aller
permettre	VW	permettre
de	P	de
délimiter	VW	délimiter
les	D.def.f.p	le
explications	N.C.f.p	explication
afin	ADV.-	afin
que	C.S	que
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
les	CL.obj.3.f.p	la
ignore	V.P.3.s	ignorer
et	C.C	et
passe	V.P.3.s	passer
directement	ADV.-	directement
à	P	à
la	D.def.f.s	le
suite	N.C.f.s	suite
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
.	PONCT.S	.

Ces	D.dem.m.p	ce
délimiteurs	N.C.m.p	délimiteur
sont	V.P.3.p	être
/*	A.qual.m.p	<unknown>
et	C.C	et
*/	PONCT.W	<unknown>
.	PONCT.S	.

Un	D.ind.m.s	un
commentaire	N.C.m.s	commentaire
sera	V.F.3.s	être
donc	ADV.-	donc
noté	VK.m.s	noter
de	P	de
la	D.def.f.s	le
façon	N.C.f.s	façon
suivante	A.qual.f.s	suivant
:	PONCT.W	:
/*	N.P.x.s	<unknown>
Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
commentaire	N.C.m.s	commentaire
!	PONCT.S	!

*/	C.C	ce
Il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
toutefois	ADV.-	toutefois
quelques	D.ind.f.p	quelque
règles	N.C.f.p	règle
à	P	à
respecter	VW	respecter
:	PONCT.W	:
•	C.S	•
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
peuvent	V.P.3.p	pouvoir
être	VW	être
placés	VK.m.p	placer
n'	ADV.neg	ne
importe	V.P.3.s	importer
où	ADV.neg	où
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
des	P+D.def.m.p	du
délimiteurs	N.C.m.p	délimiteur
de	P	de
script	N.C.m.s	script
PHP	N.P.m.s	Php
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
contenir	VW	contenir
le	D.def.m.s	le
délimiteur	N.C.m.s	délimiteur
de	P	de
fin	N.C.f.s	fin
de	P	de
commentaire	N.C.m.s	commentaire
(	PONCT.W	(
*/	N.C.m.s	<unknown>
)	PONCT.W	)
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
être	VW	être
imbriqués	VK.m.p	imbriquer
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
peuvent	V.P.3.p	pouvoir
être	VW	être
écrits	VK.m.p	écrire
sur	P	sur
plusieurs	D.ind.f.p	plusieurs
lignes	N.C.f.p	ligne
Les	D.def.m.p	le
commentaires	N.C.m.p	commentaire
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
pas	ADV.neg	pas
couper	VW	couper
un	D.ind.m.s	un
mot	N.C.m.s	mot
du	P+D.def.m.s	du
code	N.C.m.s	code
en	P	en
deux	PRO.card.m.p	deux
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
aussi	ADV.-	aussi
d'	P	de
utiliser	VW	utiliser
un	D.ind.m.s	un
type	N.C.m.s	type
de	P	de
commentaire	N.C.m.s	commentaire
permettant	VG	permettre
de	P	de
mettre	VW	mettre
toute	A.ind.f.s	tout
la	D.def.f.s	le
fin	N.C.f.s	fin
d'	P	de
une	D.ind.f.s	un
ligne	N.C.f.s	ligne
en	P	en
commentaire	N.C.m.s	commentaire
en	P	en
utilisant	VG	utiliser
le	D.def.m.s	le
double	A.qual.m.s	double
slash	N.C.m.s	slash
(	PONCT.W	(
//	PONCT.W	@card@
)	PONCT.W	)
.	PONCT.S	.

Tout	PRO.ind.m.s	tout
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
se	CL.refl.3.m.s	se
situe	V.P.3.s	situer
à	P	à
droite	N.C.f.s	droite
de	P	de
ce	D.dem.m.s	ce
symbole	N.C.m.s	symbole
sera	V.F.3.s	être
mis	VK.m.s	mettre
en	P	en
commentaire	N.C.m.s	commentaire
.	PONCT.S	.

Typologie	N.C.f.s	typologie
La	D.def.f.s	le
manière	N.C.f.s	manière
d'	P	de
écrire	VW	écrire
les	D.def.f.p	le
choses	N.C.f.p	chose
en	P	en
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
a	V.P.3.s	avoir
son	D.poss.f.s	son
importance	N.C.f.s	importance
.	PONCT.S	.

Le	D.def.m.s	le
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
est	V.P.3.s	être
par	P	par
exemple	N.C.m.s	exemple
sensible	A.qual.m.s	sensible
à	P	à
la	D.def.f.s	le
casse	N.C.f.s	casse
(	PONCT.W	(
en	P	en
anglais	N.C.m.s	anglais
case	N.C.f.s	case
sensitive	A.qual.f.s	sensitif
)	PONCT.W	)
,	PONCT.W	,
cela	PRO.dem.m.s	cela
signifie	V.P.3.s	signifier
qu'	C.S	que
un	D.ind.m.s	un
nom	N.C.m.s	nom
contenant	VG	contenir
des	D.ind.m.p	du
majuscules	N.C.m.p	majuscule
est	V.P.3.s	être
différent	A.qual.m.s	différent
du	P+D.def.m.s	du
même	A.ind.m.s	même
nom	N.C.m.s	nom
écrit	VK.m.s	écrire
en	P	en
minuscules	N.C.m.p	minuscule
.	PONCT.S	.

Toutefois	ADV.-	toutefois
,	PONCT.W	,
cette	D.dem.f.s	ce
règle	N.C.f.s	règle
ne	ADV.neg	ne
s'	CL.refl.3.f.s	se
applique	V.P.3.s	appliquer
pas	ADV.neg	pas
aux	P+D.def.f.p	au
fonctions	N.C.f.p	fonction
,	PONCT.W	,
les	D.def.f.p	le
spécifications	N.C.f.p	spécification
du	P+D.def.m.s	du
langage	N.C.m.s	langage
PHP	N.C.m.s	php
précisent	V.P.3.p	préciser
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
print	V.J.3.s	prendre
peut	V.P.3.s	pouvoir
être	VW	être
appelée	VK.f.s	appeler
print()	N.C.m.s	printçë
,	PONCT.W	,
Print()	N.P.x.s	Printçë
ou	C.C	ou
PRINT(	N.P.x.s	Printë
)	PONCT.W	)
.	PONCT.S	.

Enfin	ADV.-	enfin
,	PONCT.W	,
toute	D.ind.f.s	tout
instruction	N.C.f.s	instruction
se	CL.refl.3.f.s	se
termine	V.P.3.s	terminer
par	P	par
un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
.	PONCT.S	.

Introduction	N.C.f.s	introduction
Un	D.ind.m.s	un
serveur	A.qual.m.s	serveur
web	N.C.m.s	web
est	V.P.3.s	être
un	D.ind.m.s	un
logiciel	N.C.m.s	logiciel
permettant	VG	permettre
de	P	de
rendre	VW	rendre
accessibles	A.qual.m.p	accessible
à	P	à
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
ordinateurs	N.C.m.p	ordinateur
(	PONCT.W	(
les	D.def.m.p	le
clients	N.C.m.p	client
)	PONCT.W	)
des	D.ind.f.p	du
pages	N.C.f.p	page
web	N.C.m.s	web
stockées	VK.f.p	stocker
sur	P	sur
le	D.def.m.s	le
disque	N.C.m.s	disque
.	PONCT.S	.

Cette	D.dem.f.s	ce
fiche	N.C.f.s	fiche
pratique	A.qual.f.s	pratique
explique	V.P.3.s	expliquer
comment	ADV.int	comment
installer	VW	installer
le	D.def.m.s	le
serveur	N.C.m.s	serveur
web	N.C.m.s	web
Apache	N.P.m.s	Apache
sur	P	sur
un	D.ind.m.s	un
système	N.C.m.s	système
de	P	de
type	N.C.m.s	type
UNIX	N.P.f.s	Unix
(	PONCT.W	(
typiquement	ADV.-	typiquement
une	D.ind.f.s	un
distribution	N.C.f.s	distribution
de	P	de
Linux	N.P.m.s	Linux
telle	A.qual.f.s	tel
que	C.S	que
RedHat	N.P.f.s	Redhat
,	PONCT.W	,
Mandrake	N.P.f.s	Mandrake
ou	C.C	ou
n'	ADV.neg	ne
importe	V.P.3.s	importer
quelle	D.int.f.s	quel
autre	A.qual.f.s	autre
)	PONCT.W	)
.	PONCT.S	.

Pour	P	pour
cela	PRO.dem.m.s	cela
quelques	D.ind.f.p	quelque
connaissances	N.C.f.p	connaissance
sur	P	sur
Linux	N.P.m.s	Linux
ou	C.C	ou
bien	ADV.-	bien
Unix	N.P.m.s	Unix
sont	V.P.3.p	être
nécessaires	A.qual.f.p	nécessaire
.	PONCT.S	.

Le	D.def.m.s	le
but	N.C.m.s	but
de	P	de
cette	D.dem.f.s	ce
fiche	N.C.f.s	fiche
va	V.P.3.s	aller
être	VW	être
d'	P	de
être	VW	être
capable	A.qual.m.s	capable
de	P	de
récupérer	VW	récupérer
les	D.def.f.p	le
sources	N.C.f.p	source
des	P+D.def.m.p	du
différents	A.qual.m.p	différent
éléments	N.C.m.p	élément
nécessaires	A.qual.m.p	nécessaire
et	C.C	et
de	P	de
les	CL.obj.3.m.p	le
compiler	VW	compiler
(	PONCT.W	(
un	D.ind.m.s	un
compilateur	N.C.m.s	compilateur
C	CL.suj.3.m.s	c
est	V.P.3.s	être
donc	ADV.-	donc
nécessaire	A.qual.m.s	nécessaire
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
généralement	ADV.-	généralement
installé	VK.m.s	installer
par	P	par
défaut	N.C.m.s	défaut
sur	P	sur
la	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.f.p	du
distributions	N.C.f.p	distribution
Linux	N.P.m.s	Linux
)	PONCT.W	)
afin	V.P.3.s	<unknown>
d'	P	de
avoir	VW	avoir
un	D.ind.m.s	un
système	N.C.m.s	système
opérationnel	A.qual.m.s	opérationnel
.	PONCT.S	.

L'	D.def.f.s	le
installation	N.C.f.s	installation
suivante	A.qual.f.s	suivant
comprend	V.P.3.s	comprendre
l'	D.def.f.s	le
installation	N.C.f.s	installation
de	P	de
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
PHP	N.P.m.s	Php
,	PONCT.W	,
un	D.ind.m.s	un
langage	N.C.m.s	langage
de	P	de
programmation	N.C.f.s	programmation
permettant	VG	permettre
de	P	de
créer	VW	créer
des	D.ind.f.p	du
pages	N.C.f.p	page
créées	VK.f.p	créer
dynamiquement	ADV.-	dynamiquement
,	PONCT.W	,
ainsi	ADV.-	ainsi
que	C.S	que
le	D.def.m.s	le
SGBD	N.P.m.s	Sgbd
MySQL	N.P.m.s	Mysql
,	PONCT.W	,
un	D.ind.m.s	un
système	N.C.m.s	système
de	P	de
gestion	N.C.f.s	gestion
de	P	de
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
relationnelles	A.qual.f.p	relationnel
puissant	VG	puisser
fonctionnant	VG	fonctionner
sous	P	sous
Linux	N.P.m.s	Linux
(	PONCT.W	(
et	C.C	et
gratuit	V.P.3.s	gratuire
!	PONCT.S	!

)	PONCT.W	)
.	PONCT.S	.

Télécharger	VW	télécharger
les	D.def.f.p	le
sources	N.C.f.p	source
•	A.qual.f.p	•
•	N.C.m.s	•
•	N.C.m.s	•
Les	D.def.f.p	le
sources	N.C.f.p	source
de	P	de
PHP	N.C.m.s	php
peuvent	V.P.3.p	pouvoir
être	VW	être
téléchargées	VK.f.p	télécharger
sur	P	sur
le	D.def.m.s	le
site	N.C.m.s	site
http://www.php.net	N.C.m.s	<unknown>
Les	D.def.f.p	le
sources	N.C.f.p	source
de	P	de
Apache	N.P.m.s	Apache
peuvent	V.P.3.p	pouvoir
être	VW	être
téléchargées	VK.f.p	télécharger
sur	P	sur
le	D.def.m.s	le
site	N.C.m.s	site
http://www.apache.org	N.C.m.s	<unknown>
Les	D.def.f.p	le
sources	N.C.f.p	source
de	P	de
MySQL	N.P.m.s	Mysql
peuvent	V.P.3.p	pouvoir
être	VW	être
téléchargées	VK.f.p	télécharger
sur	P	sur
le	D.def.m.s	le
site	N.C.m.s	site
http://www.mysql.org	N.C.m.s	<unknown>
installer	VW	installer
Apache	N.P.m.s	Apache
et	C.C	et
PHP	N.P.m.s	Php
1	A.card.m.s	@card@
.	PONCT.S	.

Décompresser	VW	décompresser
les	D.def.f.p	le
archives	N.C.f.p	archives
:	PONCT.W	:
2	N.card.m.s	@card@
.	PONCT.S	.

tar	P	tar
zxvf	ET	<unknown>
apache_1.3.x.tar.gz	ET	<unknown>
tar	P	tar
zxvf	ET	<unknown>
php-3.0.x.tar	N.C.m.p	<unknown>
3	A.card.m.s	@card@
.	PONCT.S	.

Configurer	VW	configurer
Apache	N.P.m.s	Apache
4	A.card.m.s	@card@
.	PONCT.S	.

cd	D.dem.m.s	<unknown>
apache_1.3.x	N.C.m.s	apacheotre
./configure	N.C.m.s	<unknown>
--	PONCT.W	--
prefix=/www	N.C.m.s	prefixçwww
5	A.card.m.s	@card@
.	PONCT.S	.

Configurer	VW	configurer
PHP	N.P.m.s	Php
6	A.card.m.s	@card@
.	PONCT.S	.

cd	D.dem.m.s	<unknown>
../php-3.0.x	N.C.m.s	<unknown>
./configure	N.C.m.s	<unknown>
--	PONCT.W	--
with-mysql	N.C.m.s	with-mysql
--	PONCT.W	--
with-apache=../apache_1.3.x	N.C.m.p	with-apachece
-enable-track-vars	N.P.m.s	Enable-track-vars
7	A.card.f.s	@card@
.	PONCT.S	.

Si	C.S	si
vous	CL.suj.2.m.p	vous
préférez	V.P.2.p	préférer
installer	VW	installer
PHP	N.P.m.s	Php
dans	P	dans
un	D.ind.m.s	un
autre	A.ind.m.s	autre
répertoire	N.C.m.s	répertoire
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
utiliser	VW	utiliser
l'	D.def.f.s	le
option	N.C.f.s	option
de	P	de
configuration	N.C.f.s	configuration
-with-config-file-path=/path	N.P.m.s	With-config-file-Pathiphipath
Compiler	N.P.x.s	Compiler
PHP	N.P.m.s	Php
8	N.card.m.s	@card@
.	PONCT.S	.

make	ET	make
make	ET	make
install	A.qual.m.s	install
9	A.card.f.s	@card@
.	PONCT.S	.

Installer	VW	installer
Apache	N.P.m.s	Apache
10	A.card.m.s	@card@
.	PONCT.S	.

cd	PONCT.S	<unknown>
../apache_1.3.x	N.C.m.s	<unknown>
11	A.card.m.s	@card@
.	PONCT.S	.

./configure	N.C.m.s	<unknown>
--	PONCT.W	--
prefix=/www	N.C.m.s	prefixçwww
--	PONCT.W	--
activatemodule=src/modules/php3/libphp3.a	N.C.m.s	<unknown>
12	A.card.m.s	@card@
.	PONCT.S	.

make	ET	make
make	ET	make
install	A.qual.m.s	install
13	A.card.f.s	@card@
.	PONCT.S	.

Modifier	VW	modifier
le	D.def.m.s	le
fichier	N.C.m.s	fichier
de	P	de
configuration	N.C.f.s	configuration
de	P	de
PHP	N.P.m.s	Php
14	A.card.f.s	@card@
.	PONCT.S	.

cd	D.dem.m.s	<unknown>
../php-3.0.x	N.C.m.s	<unknown>
cp	PONCT.W	<unknown>
php3.ini-dist	N.C.m.s	<unknown>
/usr/local/lib/php3.ini	A.ind.m.s	<unknown>
Vous	CL.suj.2.m.p	vous
pouvez	V.P.2.p	pouvoir
désormais	ADV.-	désormais
éditer	VW	éditer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
de	P	de
configuration	N.C.f.s	configuration
/usr/local/lib/php3.ini	A.ind.m.s	<unknown>
.	PONCT.S	.

15	A.card.f.s	@card@
.	PONCT.S	.

Editez	V.Y.2.p	editer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
de	P	de
configuration	N.C.f.s	configuration
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
apache	A.qual.m.s	apache
(	PONCT.W	(
généralement	ADV.-	généralement
httpd.conf	ET	<unknown>
ou	C.C	ou
srm.conf	N.C.m.s	<unknown>
et	C.C	et
ajoutez	ADV.-	ajoutez
la	D.def.f.s	le
ligne	N.C.f.s	ligne
suivante	A.qual.f.s	suivant
:	PONCT.W	:
AddType	N.P.m.s	Addtype
application/x-httpd-php3	ET	<unknown>
.php3	VK.m.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
choisir	VW	choisir
l'	D.def.f.s	le
extension	N.C.f.s	extension
associée	VK.f.s	associer
aux	P+D.def.m.p	au
scripts	N.C.m.p	script
PHP	N.P.m.s	Php
.	PONCT.S	.

Par	P	par
souci	N.C.m.s	souci
d'	P	de
homogénéité	N.C.f.s	homogénéité
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
courant	A.qual.m.s	courant
de	P	de
choisir	VW	choisir
l'	D.def.f.s	le
extension	N.C.f.s	extension
.php3	N.C.m.s	<unknown>
16	A.card.m.s	@card@
.	PONCT.S	.

Démarrez	V.Y.2.p	démarrer
le	D.def.m.s	le
serveur	N.C.m.s	serveur
Apache	N.P.m.s	Apache
.	PONCT.S	.

(	PONCT.W	(
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
essentiel	A.qual.m.s	essentiel
d'	P	de
arrêter	VW	arrêter
et	C.C	et
redémarrer	VW	redémarrer
le	D.def.m.s	le
serveur	N.C.m.s	serveur
,	PONCT.W	,
et	C.C	et
non	ADV.neg	non
uniquement	ADV.-	uniquement
de	P	de
le	CL.obj.3.m.s	le
relancer	VW	relancer
.	PONCT.S	.

Il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
généralement	ADV.-	généralement
de	P	de
taper	VW	taper
apachectl	N.C.m.s	<unknown>
stop	N.C.m.s	stop
,	PONCT.W	,
puis	C.C	pui
apachectl	N.C.m.s	<unknown>
start	ET	start
)	PONCT.W	)
.	PONCT.S	.

Premier	A.ord.m.s	premier
lancement	N.C.m.s	lancement
Pour	P	pour
vérifier	VW	vérifier
si	C.S	si
l'	D.def.f.s	le
installation	N.C.f.s	installation
a	V.P.3.s	avoir
bien	ADV.-	bien
fonctionnée	VK.f.s	fonctionner
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
de	P	de
créer	VW	créer
un	D.ind.m.s	un
petit	A.qual.m.s	petit
fichier	N.C.m.s	fichier
dans	P	dans
la	D.def.f.s	le
racine	N.C.f.s	racine
des	P+D.def.m.p	du
documents	N.C.m.p	document
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
web	N.C.m.s	web
(	PONCT.W	(
appelée	N.C.f.s	appelée
DocumentRoot	N.P.m.s	Documentroot
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
de	P	de
configuration	N.C.f.s	configuration
httpd.conf	N.C.m.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Nommez	V.Y.2.p	nommer
ce	D.dem.m.s	ce
fichier	N.C.m.s	fichier
toto.php3	A.qual.m.s	<unknown>
,	PONCT.W	,
et	C.C	et
mettez	V.Y.2.p	mettre
le	D.def.m.s	le
code	N.C.m.s	code
suivant	A.qual.m.s	suivant
dans	P	dans
ce	D.dem.m.s	ce
fichier	N.C.m.s	fichier
:	PONCT.W	:
<html>	N.C.m.p	<unknown>
<head><title>Exemple</title></head>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
"	PONCT.W	"
PHP	N.P.m.s	Php
fonctionne	V.P.3.s	fonctionner
!	PONCT.S	!

"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</body>	N.P.m.s	<unknown>
</html>	N.P.m.s	<unknown>
Lancez	N.P.m.s	Lancez
un	D.ind.m.s	un
navigateur	N.C.m.s	navigateur
sur	P	sur
cette	D.dem.f.s	ce
machine	N.C.f.s	machine
et	C.C	et
entrez	V.Y.2.p	entrer
l'	D.def.f.s	le
URL	N.P.f.s	Url
suivante	A.qual.f.s	suivant
:	PONCT.W	:
http://localhost/toto.php3	N.C.m.p	<unknown>
localhost	N.C.m.s	localhost
désigne	V.P.3.s	désigner
la	D.def.f.s	le
machine	N.C.f.s	machine
sur	P	sur
laquelle	PRO.rel.f.s	lequel
vous	CL.suj.2.m.p	vous
vous	CL.suj.2.m.p	vous
trouvez	V.P.2.p	trouver
...	PONCT.W	<unknown>
Vous	CL.suj.2.m.p	vous
devriez	V.C.2.p	devoir
logiquement	ADV.-	logiquement
voir	VW	voir
apparaître	VW	apparaître
la	D.def.f.s	le
phrase	N.C.f.s	phrase
"	PONCT.W	"
PHP	N.P.m.s	Php
fonctionne	V.P.3.s	fonctionner
!	PONCT.S	!

"	PONCT.W	"
sur	P	sur
votre	D.poss.m.s	votre
navigateur	N.C.m.s	navigateur
!	PONCT.S	!

Introduction	N.C.f.s	introduction
à	P	à
EasyPHP	N.P.m.s	<unknown>
Afin	N.P.m.s	Afin
de	P	de
faire	VW	faire
fonctionner	VW	fonctionner
PHP	N.P.m.s	Php
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
à	P	à
la	D.def.f.s	le
base	N.C.f.s	base
d'	P	de
en	CL.obj.3.f.s	en
télécharger	VW	télécharger
les	D.def.f.p	le
sources	N.C.f.p	source
depuis	P	depuis
un	D.ind.m.s	un
site	N.C.m.s	site
spécialisé	A.qual.m.s	spécialisé
(	PONCT.W	(
par	P	par
exemple	N.C.m.s	exemple
PHP.net	N.P.m.s	Phponet
)	PONCT.W	)
,	PONCT.W	,
puis	C.C	pui
de	P	de
compiler	VW	compiler
celui	PRO.dem.m.s	celui
-ci	PRO.dem.m.s	ci
(	PONCT.W	(
ainsi	ADV.-	ainsi
que	C.S	que
d'	P	de
éditer	VW	éditer
les	D.def.m.p	le
liens	N.C.m.p	lien
)	PONCT.W	)
afin	V.P.3.s	<unknown>
de	P	de
créer	VW	créer
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
exécutable	A.qual.m.s	exécutable
.	PONCT.S	.

Ce	D.dem.m.s	ce
processus	N.C.m.s	processus
demande	V.P.3.s	demander
des	D.ind.f.p	du
notions	N.C.f.p	notion
avancées	VK.f.p	avancer
en	P	en
informatique	N.C.f.s	informatique
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
pourquoi	ADV.int	pourquoi
trois	D.card.m.p	trois
adeptes	N.C.m.p	adepte
de	P	de
PHP	N.P.m.s	Php
(	PONCT.W	(
Emmanuel	N.P.m.s	Emmanuel
Faivre	N.P.m.s	Faivre
,	PONCT.W	,
Laurent	N.P.m.s	Laurent
Abbal	N.P.m.s	Abbal
et	C.C	et
Thierry	N.P.m.s	Thierry
Murail	N.P.m.s	Murail
)	PONCT.W	)
ont	V.P.3.p	avoir
mis	VK.m.s	mettre
au	P+D.def.m.s	au
point	N.C.m.s	point
un	D.ind.m.s	un
package	N.C.m.s	package
(	PONCT.W	(
appelé	VK.m.s	appeler
EasyPHP	N.P.m.s	<unknown>
)	PONCT.W	)
contenant	VG	contenir
3	D.card.m.p	@card@
produits	N.C.m.p	produit
incontournables	A.qual.m.p	incontournable
de	P	de
la	D.def.f.s	le
scène	N.C.f.s	scène
PHP	N.P.m.s	Php
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	P	à
Le	D.def.m.s	le
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
Apache	N.P.m.s	Apache
Le	D.def.m.s	le
moteur	N.C.m.s	moteur
de	P	de
scripts	N.C.m.p	script
PHP4	N.P.m.s	Php4
La	D.def.f.s	le
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
MySQL	N.P.m.s	Mysql
Un	D.ind.m.s	un
outil	N.C.m.s	outil
de	P	de
gestion	N.C.f.s	gestion
de	P	de
base	N.C.f.s	base
de	P	de
donnée	N.C.f.s	donnée
graphique	A.qual.f.s	graphique
,	PONCT.W	,
Phpmyadmin	N.P.m.s	Phpmyadmin
EasyPHP	N.P.m.s	<unknown>
est	V.P.3.s	être
ainsi	ADV.-	ainsi
un	D.ind.m.s	un
pack	N.C.m.s	pack
fonctionnant	VG	fonctionner
sous	P	sous
Windows	N.P.m.s	Windows
permettant	VG	permettre
d'	P	de
installer	VW	installer
en	P	en
un	D.ind.m.s	un
clin	N.C.m.s	clin
d'	P	de
oeil	N.C.m.s	œil
les	D.def.m.p	le
éléments	N.C.m.p	élément
nécessaires	A.qual.m.p	nécessaire
au	P+D.def.m.s	au
fonctionnement	N.C.m.s	fonctionnement
d'	P	de
un	D.ind.m.s	un
site	N.C.m.s	site
web	N.C.m.s	web
dynamique	A.qual.m.s	dynamique
développé	VK.m.s	développer
en	P	en
PHP	N.P.m.s	Php
Récupérer	VW	récupérer
EasyPHP	N.P.m.s	<unknown>
Le	D.def.m.s	le
pack	N.C.m.s	pack
EasyPHP	N.P.m.s	<unknown>
est	V.P.3.s	être
disponible	A.qual.m.s	disponible
sur	P	sur
les	D.def.m.p	le
sites	N.C.m.p	site
suivants	A.qual.m.p	suivant
:	PONCT.W	:
•	D.card.m.s	•
•	ET	•
www.manucorp.com	ET	wwwanucorpom
www.easyphp.org	ET	<unknown>
Il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
dans	P	dans
un	D.ind.m.s	un
premier	A.ord.m.s	premier
temps	N.C.m.s	temps
de	P	de
télécharger	VW	télécharger
la	D.def.f.s	le
version	N.C.f.s	version
la	D.def.f.s	le
plus	ADV.-	plus
récente	A.qual.f.s	récent
de	P	de
EasyPHP	N.P.m.s	<unknown>
.	PONCT.S	.

Vous	CL.suj.2.m.p	vous
pouvez	V.P.2.p	pouvoir
la	CL.obj.3.f.s	la
télécharger	VW	télécharger
à	P	à
cette	D.dem.f.s	ce
adresse	N.C.f.s	adresse
:	PONCT.W	:
Page	N.C.f.s	page
de	P	de
téléchargement	N.C.m.s	téléchargement
de	P	de
EasyPhP	N.P.m.s	<unknown>
Installer	N.P.m.s	Installer
EasyPHP	N.P.m.s	<unknown>
L'	D.def.f.s	le
installation	N.C.f.s	installation
de	P	de
EasyPHP	N.P.m.s	<unknown>
est	V.P.3.s	être
très	ADV.-	très
simple	A.qual.f.s	simple
,	PONCT.W	,
notamment	ADV.-	notamment
avec	P	avec
l'	D.def.f.s	le
apparition	N.C.f.s	apparition
de	P	de
la	D.def.f.s	le
version	N.C.f.s	version
1.4	A.card.m.s	@card@
comportant	VG	comporter
un	D.ind.m.s	un
installeur	N.C.m.s	installeur
automatique	A.qual.m.s	automatique
.	PONCT.S	.

Pour	P	pour
installer	VW	installer
EasyPHP	N.P.m.s	<unknown>
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
dans	P	dans
un	D.ind.m.s	un
premier	A.ord.m.s	premier
temps	N.C.m.s	temps
de	P	de
double-cliquer	VW	double-cliquer
sur	P	sur
le	D.def.m.s	le
fichier	N.C.m.s	fichier
téléchargé	VK.m.s	télécharger
précédemment	ADV.-	précédemment
:	PONCT.W	:
L'	D.def.m.s	le
écran	N.C.m.s	écran
d'	P	de
installation	N.C.f.s	installation
de	P	de
EasyPHP	N.P.m.s	<unknown>
suivant	VG	suivre
devrait	V.C.3.s	devoir
apparaître	VW	apparaître
,	PONCT.W	,
cliquez	V.Y.2.p	cliquer
sur	P	sur
Next	N.P.m.s	Next
(	PONCT.W	(
Suivant</	N.P.x.s	Suivantüé
)	PONCT.W	)
:	PONCT.W	:
L'	D.def.f.s	le
installeur	N.C.m.s	installeur
va	V.P.3.s	aller
ensuite	ADV.-	ensuite
vous	CL.suj.2.m.p	vous
demander	VW	demander
de	P	de
préciser	VW	préciser
le	D.def.m.s	le
répertoire	N.C.m.s	répertoire
d'	P	de
installation	N.C.f.s	installation
:	PONCT.W	:
Puis	C.C	pui
il	CL.suj.3.m.s	il
va	V.P.3.s	aller
demander	VW	demander
la	D.def.f.s	le
création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
groupe	N.C.m.s	groupe
dans	P	dans
le	D.def.m.s	le
menu	N.C.m.s	menu
démarrer	VW	démarrer
Et	C.C	et
enfin	ADV.-	enfin
il	CL.suj.3.m.s	il
va	V.P.3.s	aller
vous	CL.suj.2.m.p	vous
récapituler	VW	récapituler
les	D.def.m.p	le
éléments	N.C.m.p	élément
de	P	de
l'	D.def.f.s	le
installation	N.C.f.s	installation
avant	P	avant
de	P	de
procéder	VW	procéder
à	P	à
la	D.def.f.s	le
copie	N.C.f.s	copie
des	P+D.def.m.p	du
fichiers	N.C.m.p	fichier
.	PONCT.S	.

Après	P	après
la	D.def.f.s	le
copie	N.C.f.s	copie
des	P+D.def.m.p	du
fichiers	N.C.m.p	fichier
,	PONCT.W	,
EasyPHP	N.P.m.s	<unknown>
vous	CL.obj.2.m.p	vous
présente	V.P.3.s	présenter
l'	D.def.m.s	le
écran	N.C.m.s	écran
suivant	A.qual.m.s	suivant
indiquant	VG	indiquer
que	C.S	que
l'	D.def.f.s	le
installation	N.C.f.s	installation
s'	CL.refl.3.f.s	se
est	V.P.3.s	être
déroulée	VK.f.s	dérouler
correctement	ADV.-	correctement
Il	CL.suj.3.m.s	il
se	CL.refl.3.m.s	se
peut	V.P.3.s	pouvoir
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
installation	N.C.f.s	installation
que	C.S	que
l'	D.def.f.s	le
installeur	N.C.f.s	installeur
vous	CL.obj.2.m.p	vous
indique	V.P.3.s	indiquer
l'	D.def.f.s	le
erreur	N.C.f.s	erreur
suivante	A.qual.f.s	suivant
:	PONCT.W	:
Cette	D.dem.f.s	ce
erreur	N.C.f.s	erreur
indique	V.P.3.s	indiquer
que	C.S	que
la	D.def.f.s	le
librairie	N.C.f.s	librairie
msvcrt.dll	N.C.m.s	<unknown>
n'	ADV.neg	ne
a	V.P.3.s	avoir
pû	VK.m.s	pouvoir
être	VW	être
copiée	VK.f.s	copier
.	PONCT.S	.

La	D.def.f.s	le
raison	N.C.f.s	raison
de	P	de
cette	D.dem.f.s	ce
erreur	N.C.f.s	erreur
provient	V.P.3.s	provenir
du	P+D.def.m.s	du
fait	N.C.m.s	fait
que	C.S	que
votre	D.poss.m.s	votre
système	N.C.m.s	système
Windows	N.P.m.s	Windows
est	V.P.3.s	être
actuellement	ADV.-	actuellement
en	P	en
train	N.C.m.s	train
d'	P	de
utiliser	VW	utiliser
cette	D.dem.f.s	ce
libraire	N.C.f.s	libraire
et	C.C	et
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
donc	ADV.-	donc
l'	CL.obj.3.m.s	le
écraser	VW	écraser
.	PONCT.S	.

Pour	P	pour
y	CL.obj.3.m.s	y
remédier	VW	remédier
,	PONCT.W	,
copiez	V.Y.2.p	copier
cette	D.dem.f.s	ce
librairie	N.C.f.s	librairie
(	PONCT.W	(
par	P	par
exemple	N.C.m.s	exemple
dans	P	dans
c:\	N.P.x.s	Cê
)	PONCT.W	)
sur	P	sur
votre	D.poss.m.s	votre
disque	N.C.m.s	disque
dur	A.qual.m.s	dur
(	PONCT.W	(
cliquez	V.Y.2.p	cliquer
ici	ADV.-	ici
pour	P	pour
télécharger	VW	télécharger
la	D.def.f.s	le
librairie	N.C.f.s	librairie
pour	P	pour
Windows	N.P.m.s	Windows
9x	N.card.m.s	<unknown>
)	PONCT.W	)
,	PONCT.W	,
puis	C.C	pui
redémarrez	V.Y.2.p	redémarrer
en	P	en
mode	N.C.f.s	mode
MS-DOS	N.P.x.s	Ms-Dos
,	PONCT.W	,
puis	C.C	pui
tapez	ET	tapez
copy	ET	copy
c:\msvcrt.dll	ET	<unknown>
c:\windows\system	N.P.m.s	C
.	PONCT.S	.

Le	D.def.m.s	le
système	N.C.m.s	système
va	V.P.3.s	aller
vous	CL.refl.3.m.s	vous
demander	VW	demander
de	P	de
confirmer	VW	confirmer
cet	D.dem.m.s	ce
écrasement	N.C.m.s	écrasement
répondez	V.Y.2.p	répondre
"	PONCT.W	"
Oui	I	oui
"	PONCT.W	"
(	PONCT.W	(
Y	ET	y
ou	C.C	ou
O	C.C	o
)	PONCT.W	)
,	PONCT.W	,
redémarrez	V.Y.2.p	redémarrer
Windows	N.P.m.s	Windows
et	C.C	et
EasyPHP	N.P.m.s	<unknown>
devrait	V.C.3.s	devoir
fonctionner	VW	fonctionner
!	PONCT.S	!

Démarrage	N.C.m.s	démarrage
de	P	de
EasyPHP	N.P.m.s	<unknown>
Pour	P	pour
démarrer	VW	démarrer
Apache	N.P.m.s	Apache
,	PONCT.W	,
MySQL	N.P.m.s	Mysql
et	C.C	et
PHP	N.P.m.s	Php
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
de	P	de
lancer	VW	lancer
EasyPHP	N.P.m.s	<unknown>
à	P	à
partir	VW	partir
du	P+D.def.m.s	du
groupe	N.C.m.s	groupe
créé	VK.m.s	créer
dans	P	dans
le	D.def.m.s	le
menu	N.C.m.s	menu
démarrer	VW	démarrer
:	PONCT.W	:
Pour	P	pour
vérifier	VW	vérifier
si	C.S	si
EasyPHP	N.P.m.s	<unknown>
fonctionne	V.P.3.s	fonctionner
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
de	P	de
taper	VW	taper
dans	P	dans
votre	D.poss.m.s	votre
navigateur	N.C.m.s	navigateur
préféré	A.qual.m.s	préféré
:	PONCT.W	:
•	N.C.m.s	•
•	P+D.def.m.s	c
http://localhost	N.C.m.s	<unknown>
ou	C.C	ou
http://127.0.0.1	N.C.m.s	<unknown>
Les	D.def.f.p	le
deux	A.card.f.p	deux
adresses	N.C.f.p	adresse
ci-dessus	ADV.-	ci-dessus
représentant	VG	représenter
votre	D.poss.f.s	votre
machine	N.C.f.s	machine
locale	A.qual.f.s	local
.	PONCT.S	.

Editer	VW	editer
votre	D.poss.m.s	votre
site	N.C.m.s	site
Pour	P	pour
créer	VW	créer
votre	D.poss.m.s	votre
site	N.C.m.s	site
web	N.C.m.s	web
dynamique	A.qual.m.s	dynamique
avec	P	avec
EasyPHP	N.P.m.s	<unknown>
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
suffit	V.P.3.s	suffire
de	P	de
déposer	VW	déposer
vos	D.poss.f.p	votre
créations	N.C.f.p	création
dans	P	dans
le	D.def.m.s	le
sousrépertoire	N.C.m.s	sousrépertoire
/www	N.C.m.s	éwww
de	P	de
EasyPHP	N.P.m.s	<unknown>
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
créez	V.Y.2.p	créer
un	D.ind.m.s	un
fichier	A.qual.m.s	fichier
texte	N.C.m.s	texte
contenant	VG	contenir
le	D.def.m.s	le
texte	N.C.m.s	texte
suivant	A.qual.m.s	suivant
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

phpinfo()	N.C.m.s	phpinfoëë
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Puis	C.C	pui
renommez	V.Y.2.p	renommer
ce	D.dem.m.s	ce
fichier	N.C.m.s	fichier
en	P	en
phpinfo.php3	N.C.m.s	<unknown>
et	C.C	et
déposez	V.Y.2.p	déposer
-le	CL.obj.3.m.s	le
dans	P	dans
le	D.def.m.s	le
sous-répertoire	N.C.m.s	sous-répertoire
/www	N.C.m.s	éwww
.	PONCT.S	.

Vous	CL.suj.2.m.p	vous
pouvez	V.P.2.p	pouvoir
désormais	ADV.-	désormais
visualiser	VW	visualiser
le	D.def.m.s	le
résultat	N.C.m.s	résultat
à	P	à
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
suivante	A.qual.f.s	suivant
:	PONCT.W	:
http://localhost/phpinfo.php3	N.C.m.s	<unknown>
Plus	ADV.-	plus
d'	P	de
informations	N.C.f.p	information
Pour	P	pour
plus	ADV.-	plus
d'	P	de
informations	N.C.f.p	information
ou	C.C	ou
en	P	en
cas	N.C.m.s	cas
de	P	de
problème	N.C.m.s	problème
avec	P	avec
EasyPHP	N.P.m.s	<unknown>
,	PONCT.W	,
allez	V.Y.2.p	aller
sur	P	sur
EasyPHP.org	N.P.m.s	<unknown>
.	PONCT.S	.

En	P	en
cas	N.C.m.s	cas
de	P	de
problème	N.C.m.s	problème
,	PONCT.W	,
commencez	V.Y.2.p	commencer
par	P	par
consulter	VW	consulter
la	D.def.f.s	le
FAQ	N.P.f.s	Faq
,	PONCT.W	,
puis	C.C	pui
consultez	V.P.2.p	consulter
le	D.def.m.s	le
Forum	N.C.m.s	forum
Concept	N.P.m.s	Concept
de	P	de
variable	N.C.f.s	variable
avec	P	avec
PHP	N.P.m.s	Php
Une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
un	D.ind.m.s	un
objet	N.C.m.s	objet
repéré	VK.m.s	repérer
par	P	par
son	D.poss.m.s	son
nom	N.C.m.s	nom
,	PONCT.W	,
pouvant	VG	pouvoir
contenir	VW	contenir
des	D.ind.f.p	du
données	N.C.f.p	donnée
,	PONCT.W	,
qui	PRO.rel.f.p	qui
pourront	V.F.3.p	pouvoir
être	VW	être
modifiées	VK.f.p	modifier
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
programme	N.C.m.s	programme
.	PONCT.S	.

Les	D.def.f.p	le
variables	N.C.f.p	variable
en	P	en
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
peuvent	V.P.3.p	pouvoir
être	VW	être
de	P	de
trois	D.card.m.p	trois
types	N.C.m.p	type
:	PONCT.W	:
•	N.C.m.p	•
•	N.C.m.p	•
•	D.card.m.p	•
scalaires	N.C.m.p	scalaire
tableaux	A.qual.m.p	tableau
tableaux	A.qual.m.p	tableau
associatifs	A.qual.m.p	associatif
Quelque	A.qual.m.p	quelque
soit	V.S.3.s	être
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
variable	N.C.f.s	variable
,	PONCT.W	,
son	D.poss.m.s	son
nom	N.C.m.s	nom
doit	V.P.3.s	devoir
obligatoirement	ADV.-	obligatoirement
être	VW	être
précédé	VK.m.s	précéder
du	P+D.def.m.s	du
caractère	N.C.m.s	caractère
dollar	A.qual.m.s	dollar
(	PONCT.W	(
$	N.C.m.s	$
)	PONCT.W	)
.	PONCT.S	.

Contrairement	ADV.-	contrairement
à	P	à
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
langages	N.C.m.p	langage
de	P	de
programmation	N.C.f.s	programmation
,	PONCT.W	,
comme	P	comme
le	D.def.m.s	le
langage	N.C.m.s	langage
C	PONCT.W	C
,	PONCT.W	,
les	D.def.f.p	le
variables	N.C.f.p	variable
en	P	en
PHP	N.P.f.s	Php
n'	ADV.neg	ne
ont	V.P.3.p	avoir
pas	ADV.neg	pas
besoin	N.C.m.s	besoin
d'	P	de
être	VW	être
déclarées	VK.f.p	déclarer
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
commencer	VW	commencer
à	P	à
les	CL.obj.3.m.p	le
utiliser	VW	utiliser
sans	P	sans
en	CL.obj.3.m.s	en
avoir	VW	avoir
averti	VK.m.s	avertir
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
précédemment	ADV.-	précédemment
,	PONCT.W	,
ainsi	ADV.-	ainsi
si	C.S	si
la	D.def.f.s	le
variable	N.C.f.s	variable
existait	V.I.3.s	exister
précédemment	ADV.-	précédemment
,	PONCT.W	,
son	D.poss.m.s	son
contenu	N.C.m.s	contenu
est	V.P.3.s	être
utilisé	VK.m.s	utiliser
,	PONCT.W	,
sinon	C.C	sinon
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
lui	CL.obj.3.m.s	lui
affectera	V.F.3.s	affecter
la	D.def.f.s	le
valeur	N.C.f.s	valeur
en	P	en
lui	CL.obj.3.m.s	lui
assignant	VG	assigner
0	A.card.m.s	@card@
par	P	par
défaut	N.C.m.s	défaut
.	PONCT.S	.

De	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
si	C.S	si
vous	CL.suj.2.m.p	vous
ajoutez	V.P.2.p	ajouter
3	D.card.m.p	@card@
à	P	à
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
variable	N.C.f.s	variable
(	PONCT.W	(
non	ADV.neg	non
définie	VK.f.s	définir
plus	ADV.-	plus
haut	A.qual.m.s	haut
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
)	PONCT.W	)
,	PONCT.W	,
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
sera	V.F.3.s	être
3	A.card.f.s	@card@
...	PONCT.W	<unknown>
Nommage	N.C.m.s	nommage
des	P+D.def.f.p	du
variables	N.C.f.p	variable
Avec	P	avec
PHP	N.P.m.s	Php
,	PONCT.W	,
les	D.def.m.p	le
noms	N.C.m.p	nom
de	P	de
variables	N.C.f.p	variable
doivent	V.P.3.p	devoir
répondre	VW	répondre
à	P	à
certains	D.ind.m.p	certain
critères	N.C.m.p	critère
:	PONCT.W	:
•	P	à
un	D.ind.m.s	un
nom	N.C.m.s	nom
de	P	de
variable	N.C.f.s	variable
doit	V.P.3.s	devoir
commencer	VW	commencer
par	P	par
une	D.ind.f.s	un
lettre	N.C.f.s	lettre
(	PONCT.W	(
majuscule	A.qual.f.s	majuscule
ou	C.C	ou
minuscule	A.qual.f.s	minuscule
)	PONCT.W	)
ou	C.C	ou
un	D.ind.m.s	un
"	PONCT.W	"
_	N.C.m.s	_
"	PONCT.W	"
(	PONCT.W	(
pas	ADV.neg	pas
par	P	par
un	D.ind.m.s	un
chiffre	N.C.m.s	chiffre
)	PONCT.W	)
•	P	à
un	D.ind.m.s	un
nom	N.C.m.s	nom
de	P	de
variable	N.C.f.s	variable
peut	V.P.3.s	pouvoir
comporter	VW	comporter
des	D.ind.f.p	du
lettres	N.C.f.p	lettre
,	PONCT.W	,
des	P+D.def.m.p	du
chiffres	N.C.m.p	chiffre
et	C.C	et
le	D.def.m.s	le
caractère	N.C.m.s	caractère
_	N.C.m.s	_
(	PONCT.W	(
les	D.def.m.p	le
espaces	N.C.m.p	espace
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
autorisés	VK.m.p	autoriser
!	PONCT.S	!

)	PONCT.W	)
Nom	N.P.m.s	Nom
de	P	de
variable	A.qual.m.s	variable
correct	A.qual.m.s	correct
Nom	N.P.m.s	Nom
de	P	de
variable	A.qual.m.s	variable
incorrect	A.qual.m.s	incorrect
Raison	N.C.f.s	raison
$Variable	N.P.m.s	<unknown>
$Nom	N.C.m.s	<unknown>
de	P	de
Variable	N.P.m.s	Variable
comporte	V.P.3.s	comporter
des	D.ind.m.p	du
espaces	N.C.m.p	espace
$Nom_De_Variable	N.P.x.s	<unknown>
$123Nom_De_Variable	N.P.x.s	<unknown>
commence	V.P.3.s	commencer
par	P	par
un	D.ind.m.s	un
chiffre	N.C.m.s	chiffre
$nom_de_variable	A.qual.m.s	änomädeëvariable
$toto@mailcity.com	N.C.m.s	<unknown>
caractère	N.C.m.s	caractère
spécial	A.qual.m.s	spécial
@	P	à
$nom_de_variable_123	N.P.x.s	<unknown>
$Nom-de-variable	N.P.x.s	<unknown>
signe	N.C.m.s	signe
-	PONCT.W	-
interdit	V.P.3.s	interdire
$nom_de_variable	N.P.x.s	<unknown>
nom_de_variable	A.qual.m.s	nomädeëvariable
ne	ADV.neg	ne
commence	V.P.3.s	commencer
pas	ADV.neg	pas
par	P	par
$	N.C.m.s	$
Les	D.def.m.p	le
noms	N.C.m.p	nom
de	P	de
variables	N.C.f.p	variable
sont	V.P.3.p	être
sensibles	A.qual.m.p	sensible
à	P	à
la	D.def.f.s	le
casse	N.C.f.s	casse
(	PONCT.W	(
le	D.def.m.s	le
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
fait	V.P.3.s	faire
la	D.def.f.s	le
différence	N.C.f.s	différence
entre	P	entre
un	D.ind.m.s	un
nom	N.C.m.s	nom
en	P	en
majuscule	N.C.m.s	majuscule
et	C.C	et
un	D.ind.m.s	un
nom	N.C.m.s	nom
en	P	en
minuscules	N.C.m.p	minuscule
)	PONCT.W	)
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
donc	ADV.-	donc
veiller	VW	veiller
à	P	à
utiliser	VW	utiliser
des	D.ind.m.p	du
noms	N.C.m.p	nom
comportant	VG	comporter
la	D.def.f.s	le
même	A.qual.f.s	même
casse	N.C.f.s	casse
!	PONCT.S	!

Toutefois	ADV.-	toutefois
,	PONCT.W	,
les	D.def.m.p	le
noms	N.C.m.p	nom
de	P	de
fonctions	N.C.f.p	fonction
font	V.P.3.p	faire
exception	N.C.f.s	exception
à	P	à
cette	D.dem.f.s	ce
règle	N.C.f.s	règle
...	PONCT.W	<unknown>
Variables	D.ind.m.p	variable
scalaires	N.C.m.p	scalaire
Le	D.def.m.s	le
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
propose	V.P.3.s	proposer
trois	D.card.m.p	trois
types	N.C.m.p	type
de	P	de
variables	A.qual.m.p	variable
scalaires	A.qual.m.p	scalaire
:	PONCT.W	:
•	D.card.m.s	•
•	D.card.m.p	•
entiers	N.C.m.p	entier
:	PONCT.W	:
nombres	N.C.m.p	nombre
naturels	A.qual.m.p	naturel
sans	P	sans
décimale	N.C.f.s	décimale
(	PONCT.W	(
sans	P	sans
virgule	N.C.f.s	virgule
)	PONCT.W	)
réels	A.qual.m.p	réel
:	PONCT.W	:
nombres	A.qual.m.p	nombre
décimaux	A.qual.m.p	décimal
(	PONCT.W	(
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
généralement	ADV.-	généralement
de	P	de
type	N.C.m.s	type
double	A.qual.m.s	double
,	PONCT.W	,
car	C.C	car
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
nombre	N.C.m.s	nombre
décimaux	A.qual.m.s	décimal
à	P	à
double	A.qual.f.s	double
précision	N.C.f.s	précision
)	PONCT.W	)
•	D.card.f.p	•
chaines	N.C.f.p	chaine
de	P	de
caractères	N.C.m.p	caractère
:	PONCT.W	:
ensembles	N.C.m.p	ensemble
de	P	de
caractères	N.C.m.p	caractère
Il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
nécessaire	A.qual.m.s	nécessaire
en	P	en
PHP	N.C.m.s	php
de	P	de
typer	VW	typer
les	D.def.f.p	le
variables	N.C.f.p	variable
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
de	P	de
définir	VW	définir
leur	D.poss.m.s	leur
type	N.C.m.s	type
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
leur	CL.obj.3.m.p	lui
assigner	VW	assigner
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
pour	P	pour
en	CL.obj.3.m.s	en
définir	VW	définir
le	D.def.m.s	le
type	N.C.m.s	type
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	D.card.m.p	•
entiers	N.C.m.p	entier
:	PONCT.W	:
nombre	N.C.m.s	nombre
sans	P	sans
virgule	N.C.f.s	virgule
réels	A.qual.m.p	réel
:	PONCT.W	:
nombres	N.C.m.p	nombre
avec	P	avec
une	D.ind.f.s	un
virgule	N.C.f.s	virgule
(	PONCT.W	(
en	P	en
réalité	N.C.f.s	réalité
un	D.ind.m.s	un
point	N.C.m.s	point
)	PONCT.W	)
chaines	N.C.f.p	chaine
de	P	de
caractères	N.C.m.p	caractère
:	PONCT.W	:
ensembles	N.C.m.p	ensemble
de	P	de
caractères	N.C.m.p	caractère
entre	P	entre
guillemets	N.C.m.p	guillemet
simples	A.qual.m.p	simple
ou	C.C	ou
doubles	A.qual.m.p	double
Instruction	N.C.f.s	instruction
Type	N.C.m.s	type
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
$Variable	N.P.m.s	<unknown>
=	PONCT.W	=
0	D.card.m.s	@card@
;	PONCT.W	;
type	N.C.m.s	type
entier	A.qual.m.s	entier
$Variable	N.P.m.s	<unknown>
=	P	à
12	A.card.m.s	@card@
;	PONCT.W	;
type	N.C.m.s	type
entier	A.qual.m.s	entier
$Variable	A.qual.m.s	çvariable
=	PONCT.W	=
0.0	N.card.m.s	@card@
;	PONCT.W	;
type	N.C.m.s	type
réel	A.qual.m.s	réel
$Variable	N.P.m.s	<unknown>
=	PONCT.W	=
12.0	N.card.m.s	@card@
;	PONCT.W	;
type	N.C.m.s	type
réel	A.qual.m.s	réel
$Variable	N.P.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
0.0	N.card.m.s	@card@
"	PONCT.W	"
;	PONCT.W	;
type	N.C.m.s	type
chaîne	N.C.f.s	chaîne
$Variable	N.P.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
tout	A.ind.m.s	tout
le	D.def.m.s	le
monde	N.C.m.s	monde
"	PONCT.W	"
;	PONCT.W	;
type	N.C.m.s	type
chaîne	V.P.3.s	chaîner
Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
des	D.ind.m.p	du
caractères	N.C.m.p	caractère
repérés	VK.m.p	repérer
par	P	par
un	D.ind.m.s	un
code	N.C.m.s	code
ASCII	N.C.m.s	ascii
spécial	A.qual.m.s	spécial
permettant	VG	permettre
d'	P	de
effectuer	VW	effectuer
des	D.ind.f.p	du
opérations	N.C.f.p	opération
particulières	A.qual.f.p	particulier
.	PONCT.S	.

Ces	D.dem.m.p	ce
caractères	N.C.m.p	caractère
peuvent	V.P.3.p	pouvoir
être	VW	être
représentés	VK.m.p	représenter
plus	ADV.-	plus
simplement	ADV.-	simplement
en	P	en
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
grâce	N.C.f.s	grâce
au	P+D.def.m.s	au
caractère	N.C.m.s	caractère
'	PONCT.W	'
\	N.C.m.s	\
'	PONCT.W	'
suivi	VK.m.s	suivre
d'	P	de
une	D.ind.f.s	un
lettre	N.C.f.s	lettre
,	PONCT.W	,
qui	PRO.rel.f.s	qui
précise	V.P.3.s	préciser
qu'	C.S	que
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
un	D.ind.m.s	un
caractère	N.C.m.s	caractère
de	P	de
contrôle	N.C.m.s	contrôle
:	PONCT.W	:
Caractère	N.P.m.s	Caractère
Description	N.C.f.s	description
\	P	à
"	PONCT.W	"
guillemet	N.C.m.s	guillemet
\\	ET	çù
barre	N.C.f.s	barre
oblique	A.qual.m.s	oblique
inverse	A.qual.m.s	inverse
(	PONCT.W	(
antislash	N.C.m.s	antislash
)	PONCT.W	)
\r	P	àr
retour	N.C.m.s	retour
chariot	A.qual.m.s	chariot
\n	P	àn
retour	N.C.m.s	retour
à	P	à
la	D.def.f.s	le
ligne	N.C.f.s	ligne
\t	N.P.x.s	<unknown>
tabulation	N.C.f.s	tabulation
En	P	en
effet	N.C.m.s	effet
,	PONCT.W	,
certains	PRO.ind.m.p	certain
de	P	de
ces	D.dem.m.p	ce
caractères	N.C.m.p	caractère
ne	ADV.neg	ne
pourraient	V.C.3.p	pouvoir
pas	ADV.neg	pas
être	VW	être
représentés	VK.m.p	représenter
autrement	ADV.-	autrement
(	PONCT.W	(
un	D.ind.m.s	un
retour	N.C.m.s	retour
à	P	à
la	D.def.f.s	le
ligne	N.C.f.s	ligne
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
pas	ADV.neg	pas
être	VW	être
représenté	VK.m.s	représenter
à	P	à
l'	D.def.m.s	le
écran	N.C.m.s	écran
)	PONCT.W	)
.	PONCT.S	.

D'	P	de
autre	A.ind.f.s	autre
part	N.C.f.s	part
,	PONCT.W	,
les	D.def.m.p	le
caractères	N.C.m.p	caractère
\	A.qual.m.p	\
et	C.C	et
"	PONCT.W	"
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
pas	ADV.neg	pas
faire	VW	faire
partie	N.C.f.s	partie
en	P	en
tant	ADV.-	tant
que	C.S	que
tel	A.qual.m.s	tel
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractère	N.C.m.s	caractère
,	PONCT.W	,
pour	P	pour
des	D.ind.f.p	du
raisons	N.C.f.p	raison
évidente	A.qual.f.s	évident
d'	P	de
ambiguité	N.C.f.s	ambiguité
...	PONCT.S	<unknown>
Variables	A.qual.m.p	variable
tableaux	N.C.m.p	tableau
Les	D.def.f.p	le
variables	N.C.f.p	variable
,	PONCT.W	,
telles	A.qual.f.p	tel
que	C.S	que
nous	CL.suj.1.m.p	nous
les	CL.obj.3.m.p	le
avons	V.P.1.p	avoir
vues	VK.f.p	voir
,	PONCT.W	,
ne	ADV.neg	ne
permettent	V.P.3.p	permettre
de	P	de
stocker	VW	stocker
qu'	ADV.neg	qu'
une	D.ind.f.s	un
seule	A.ind.f.s	seul
donnée	N.C.f.s	donnée
à	P	à
la	D.def.f.s	le
fois	N.C.f.s	foi
.	PONCT.S	.

Or	C.C	or
,	PONCT.W	,
pour	P	pour
de	D.ind.f.p	de
nombreuses	A.qual.f.p	nombreux
données	N.C.f.p	donnée
,	PONCT.W	,
comme	C.S	comme
cela	PRO.dem.m.s	cela
est	V.P.3.s	être
souvent	ADV.-	souvent
le	D.def.m.s	le
cas	N.C.m.s	cas
,	PONCT.W	,
des	D.ind.f.p	du
variables	N.C.f.p	variable
distinctes	A.qual.f.p	distinct
seraient	V.C.3.p	être
beaucoup	ADV.-	beaucoup
trop	ADV.-	trop
lourdes	A.qual.f.p	lourd
à	P	à
gérer	VW	gérer
.	PONCT.S	.

Heureusement	ADV.-	heureusement
,	PONCT.W	,
PHP	N.P.m.s	Php
propose	V.P.3.s	proposer
des	D.ind.f.p	du
structures	N.C.f.p	structure
de	P	de
données	N.C.f.p	donnée
permettant	VG	permettre
de	P	de
stocker	VW	stocker
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
de	P	de
ces	D.dem.f.p	ce
données	N.C.f.p	donnée
dans	P	dans
une	D.ind.f.s	un
"	PONCT.W	"
variable	N.C.f.s	variable
commune	A.qual.f.s	commun
"	PONCT.W	"
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
pour	P	pour
accéder	VW	accéder
à	P	à
ces	D.dem.f.p	ce
valeurs	N.C.f.p	valeur
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
parcourir	VW	parcourir
la	D.def.f.s	le
variable	N.C.f.s	variable
de	P	de
type	N.C.m.s	type
complexe	A.qual.m.s	complexe
composée	VK.f.s	composer
de	P	de
«	D.card.f.p	«
variables	N.C.f.p	variable
»	N.C.m.s	»
de	P	de
type	N.C.m.s	type
simple	A.qual.m.s	simple
.	PONCT.S	.

Les	D.def.m.p	le
tableaux	N.C.m.p	tableau
stockent	V.P.3.p	stocker
des	P+D.def.f.p	du
données	N.C.f.p	donnée
sous	P	sous
forme	N.C.f.s	forme
de	P	de
liste	N.C.f.s	liste
.	PONCT.S	.

Les	D.def.f.p	le
données	N.C.f.p	donnée
contenues	VK.f.p	contenir
dans	P	dans
la	D.def.f.s	le
liste	N.C.f.s	liste
sont	V.P.3.p	être
accessibles	A.qual.f.p	accessible
grâce	N.C.f.s	grâce
à	P	à
un	D.ind.m.s	un
index	N.C.m.s	index
(	PONCT.W	(
un	D.ind.m.s	un
numéro	N.C.m.s	numéro
représentant	VG	représenter
l'	D.def.m.s	le
élément	N.C.m.s	élément
de	P	de
la	D.def.f.s	le
liste	N.C.f.s	liste
)	PONCT.W	)
.	PONCT.S	.

Contrairement	ADV.-	contrairement
à	P	à
des	D.ind.m.p	du
langages	N.C.m.p	langage
tels	A.qual.m.p	tel
que	C.S	que
le	D.def.m.s	le
langage	N.C.m.s	langage
C	PONCT.W	C
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
stocker	VW	stocker
des	D.ind.m.p	du
éléments	N.C.m.p	élément
de	P	de
types	N.C.m.p	type
différents	A.qual.m.p	différent
dans	P	dans
un	D.ind.m.s	un
même	A.qual.m.s	même
tableau	N.C.m.s	tableau
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
pour	P	pour
désigner	VW	désigner
un	D.ind.m.s	un
élément	N.C.m.s	élément
de	P	de
tableau	N.C.m.s	tableau
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
faire	VW	faire
suivre	VW	suivre
au	P+D.def.m.s	au
nom	N.C.m.s	nom
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
l'	D.def.m.s	le
indice	N.C.m.s	indice
de	P	de
l'	D.def.m.s	le
élément	N.C.m.s	élément
entre	P	entre
crochets	N.C.m.p	crochet
:	PONCT.W	:
$Tableau[0	N.C.m.p	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
12	A.card.m.s	@card@
;	PONCT.W	;
$Tableau[1	N.P.x.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
CCM	N.P.m.s	CCM
"	PONCT.W	"
;	PONCT.W	;
Avec	P	avec
PHP	N.P.m.s	Php
,	PONCT.W	,
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
nécessaire	A.qual.m.s	nécessaire
de	P	de
préciser	VW	préciser
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
l'	D.def.m.s	le
index	N.C.m.s	index
lorsque	C.S	lorsque
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
veut	V.P.3.s	vouloir
remplir	VW	remplir
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
,	PONCT.W	,
car	C.C	car
il	CL.suj.3.m.s	il
assigne	V.P.3.s	assigner
la	D.def.f.s	le
valeur	N.C.f.s	valeur
0	A.card.f.s	@card@
au	P+D.def.m.s	au
premier	A.ord.m.s	premier
élément	N.C.m.s	élément
(	PONCT.W	(
si	C.S	si
le	D.def.m.s	le
tableau	N.C.m.s	tableau
est	V.P.3.s	être
vide	A.qual.m.s	vide
)	PONCT.W	)
et	C.C	et
incrémente	V.P.3.s	incrémenter
les	D.def.m.p	le
indices	N.C.m.p	indice
suivants	A.qual.m.p	suivant
.	PONCT.S	.

De	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
facile	A.qual.m.s	facile
de	P	de
remplir	VW	remplir
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
avec	P	avec
des	D.ind.f.p	du
valeurs	N.C.f.p	valeur
.	PONCT.S	.

Le	D.def.m.s	le
code	N.C.m.s	code
précédent	A.qual.m.s	précédent
est	V.P.3.s	être
équivalent	A.qual.m.s	équivalent
à	P	à
:	PONCT.W	:
$Tableau[	N.P.x.s	<unknown>
]	PONCT.W	]
=	P	à
12	A.card.m.s	@card@
;	PONCT.W	;
$Tableau[	N.P.x.s	<unknown>
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
CCM	N.P.m.s	CCM
"	PONCT.W	"
;	PONCT.W	;
•	PRO.card.m.p	•
•	N.C.m.s	•
Les	D.def.m.p	le
indices	N.C.m.p	indice
de	P	de
tableau	N.C.m.s	tableau
commencent	V.P.3.p	commencer
à	P	à
zéro	N.C.m.s	zéro
tous	A.ind.m.p	tous
les	D.def.m.p	le
types	N.C.m.p	type
de	P	de
variables	N.C.f.p	variable
peuvent	V.P.3.p	pouvoir
être	VW	être
contenus	VK.m.p	contenir
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
Lorsqu'	C.S	lorsque
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
contient	V.P.3.s	contenir
d'	D.int.m.p	de
autres	A.ind.m.p	autre
tableaux	N.C.m.p	tableau
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
de	P	de
tableaux	N.C.m.p	tableau
multidimensionnels	A.qual.m.p	multidimensionnel
.	PONCT.S	.

Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
créer	VW	créer
directement	ADV.-	directement
des	D.ind.m.p	du
tableaux	N.C.m.p	tableau
multidimensionnels	A.qual.m.p	multidimensionnel
en	P	en
utilisant	VG	utiliser
plusieurs	D.ind.f.p	plusieurs
paires	N.C.f.p	paire
de	P	de
crochets	N.C.m.p	crochet
pour	P	pour
les	D.def.m.p	le
index	N.C.m.p	index
(	PONCT.W	(
autant	ADV.-	autant
de	P	de
paires	N.C.f.p	paire
de	P	de
crochets	N.C.m.p	crochet
que	PRO.rel.m.p	que
la	D.def.f.s	le
dimension	N.C.f.s	dimension
voulue	VK.f.s	vouloir
)	PONCT.W	)
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
à	P	à
deux	D.card.f.p	deux
dimensions	N.C.f.p	dimension
pourra	V.F.3.s	pouvoir
être	VW	être
déclaré	VK.m.s	déclarer
comme	P	comme
suit	VK.m.s	suivre
:	PONCT.W	:
$Tableau[0][0	N.C.m.p	<unknown>
]	PONCT.W	]
$Tableau[0][1	N.P.f.s	<unknown>
]	PONCT.W	]
$Tableau[1][0	N.P.f.s	<unknown>
]	PONCT.W	]
$Tableau[1][1	N.P.f.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
=	V.P.3.s	être
=	V.P.3.s	être
=	PONCT.W	=
12	N.card.m.s	@card@
;	PONCT.W	;
"	PONCT.W	"
CCM	N.P.m.s	CCM
"	PONCT.W	"
;	PONCT.W	;
1245.652	PRO.card.m.p	@card@
;	PONCT.W	;
"	PONCT.W	"
Au	P+D.def.m.s	au
revoir	VW	revoir
"	PONCT.W	"
;	PONCT.W	;
Variables	A.qual.m.p	variable
tableaux	N.C.m.p	tableau
associatifs	A.qual.m.p	associatif
PHP	N.P.m.s	Php
permet	V.P.3.s	permettre
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
de	P	de
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
au	P+D.def.m.s	au
lieu	N.C.m.s	lieu
de	P	de
simples	A.qual.m.p	simple
entiers	N.C.m.p	entier
pour	P	pour
définir	VW	définir
les	D.def.m.p	le
indices	N.C.m.p	indice
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
tableaux	N.C.m.p	tableau
associatifs	A.qual.m.p	associatif
.	PONCT.S	.

Cette	D.dem.f.s	ce
façon	N.C.f.s	façon
de	P	de
nommer	VW	nommer
les	D.def.m.p	le
indices	N.C.m.p	indice
peut	V.P.3.s	pouvoir
parfois	ADV.-	parfois
être	VW	être
plus	ADV.-	plus
agréable	A.qual.f.s	agréable
à	P	à
utiliser	VW	utiliser
:	PONCT.W	:
$Toto["Age	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
=	PONCT.W	=
12	A.card.m.s	@card@
;	PONCT.W	;
$Toto["Adresse	N.C.f.s	ctotoëçadre
"	PONCT.W	"
]	PONCT.W	]
=	PONCT.W	=
"	PONCT.W	"
22	D.card.f.p	@card@
rue	N.C.f.s	rue
des	P+D.def.m.p	du
bois	N.C.m.p	bois
fleuris	A.qual.m.p	fleuri
"	PONCT.W	"
;	PONCT.W	;
$Toto["Nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
=	V.P.3.s	être
"	PONCT.W	"
Ah	I	ah
,	PONCT.W	,
vous	CL.suj.2.m.p	vous
auriez	V.I.2.p	aurer
bien	ADV.-	bien
aimé	VK.m.s	aimer
connaître	VW	connaître
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
famille	N.C.f.s	famille
de	P	de
Toto	N.P.m.s	Toto
...	PONCT.W	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Portée	N.P.f.s	Portée
(	PONCT.W	(
visibilité	N.C.f.s	visibilité
)	PONCT.W	)
des	P+D.def.f.p	du
variables	N.C.f.p	variable
Selon	P	selon
l'	D.def.m.s	le
endroit	N.C.m.s	endroit
où	PRO.rel.m.s	où
on	CL.suj.3.m.s	on
déclare	V.P.3.s	déclarer
une	D.ind.f.s	un
variable	N.C.f.s	variable
,	PONCT.W	,
celle	PRO.dem.f.s	celui
-ci	CL.suj.3.m.s	ci
pourra	V.F.3.s	pouvoir
être	VW	être
accessible	A.qual.f.s	accessible
(	PONCT.W	(
visible	A.qual.m.s	visible
)	PONCT.W	)
de	P	de
partout	ADV.-	partout
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
ou	C.C	ou
bien	ADV.-	bien
que	C.S	que
dans	P	dans
une	D.ind.f.s	un
portion	N.C.f.s	portion
confinée	VK.f.s	confiner
de	P	de
celui	PRO.dem.m.s	celui
-ci	ADV.-	-ci
(	PONCT.W	(
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
de	P	de
portée	N.C.f.s	portée
(	PONCT.W	(
ou	C.C	ou
visibilité	N.C.f.s	visibilité
)	PONCT.W	)
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
.	PONCT.S	.

Lorsqu'	C.S	lorsque
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
déclarée	VK.f.s	déclarer
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
même	A.qual.m.s	même
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
à	P	à
l'	D.def.m.s	le
extérieur	N.C.m.s	extérieur
de	P	de
toute	D.ind.f.s	tout
fonction	N.C.f.s	fonction
ou	C.C	ou
de	P	de
tout	D.ind.m.s	tout
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
accessible	A.qual.f.s	accessible
de	P	de
partout	ADV.-	partout
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
(	PONCT.W	(
n'	ADV.neg	ne
importe	V.P.3.s	importer
quelle	D.int.f.s	quel
fonction	N.C.f.s	fonction
du	P+D.def.m.s	du
programme	N.C.m.s	programme
peut	V.P.3.s	pouvoir
faire	VW	faire
appel	N.C.m.s	appel
à	P	à
cette	D.dem.f.s	ce
variable	N.C.f.s	variable
)	PONCT.W	)
.	PONCT.S	.

On	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
variable	N.C.f.s	variable
globale	A.qual.f.s	global
Lorsque	C.S	lorsque
l'	D.def.f.s	le
on	CL.suj.3.m.s	on
déclare	V.P.3.s	déclarer
une	D.ind.f.s	un
variable	N.C.f.s	variable
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
(	PONCT.W	(
entre	P	entre
des	D.ind.f.p	du
accolades	N.C.f.p	accolade
)	PONCT.W	)
,	PONCT.W	,
sa	D.poss.f.s	son
portée	N.C.f.s	portée
se	CL.refl.3.f.s	se
confine	V.P.3.s	confiner
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
du	P+D.def.m.s	du
bloc	N.C.m.s	bloc
dans	P	dans
lequel	PRO.rel.m.s	lequel
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
déclarée	VK.f.s	déclarer
.	PONCT.S	.

•	P	à
Une	D.ind.f.s	un
variable	N.C.f.s	variable
déclarée	VK.f.s	déclarer
au	P+D.def.m.s	au
début	N.C.m.s	début
du	P+D.def.m.s	du
code	N.C.m.s	code
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
avant	P	avant
tout	D.ind.m.s	tout
bloc	N.C.m.s	bloc
de	P	de
donnée	N.C.f.s	donnée
,	PONCT.W	,
sera	V.F.3.s	être
globale	A.qual.f.s	global
,	PONCT.W	,
on	CL.suj.3.m.s	on
pourra	V.F.3.s	pouvoir
alors	ADV.-	alors
les	CL.obj.3.m.p	le
utiliser	VW	utiliser
à	P	à
partir	VW	partir
de	P	de
n'	ADV.neg	ne
importe	V.P.3.s	importer
quel	D.excl.m.s	quel
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
•	P	à
Une	D.ind.f.s	un
variable	N.C.f.s	variable
déclarée	VK.f.s	déclarer
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
(	PONCT.W	(
dans	P	dans
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
ou	C.C	ou
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
aura	V.F.3.s	avoir
une	D.ind.f.s	un
portée	N.C.f.s	portée
limitée	VK.f.s	limiter
à	P	à
ce	D.dem.m.s	ce
seul	A.qual.m.s	seul
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qu'	PRO.rel.m.s	que
elle	CL.suj.3.f.s	elle
est	V.P.3.s	être
inutilisable	A.qual.f.s	inutilisable
ailleurs	ADV.-	ailleurs
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
variable	N.C.f.s	variable
locale	A.qual.f.s	local
D'	P	de
une	D.ind.f.s	un
manière	N.C.f.s	manière
générale	A.qual.f.s	général
il	CL.suj.3.m.s	il
est	V.P.3.s	être
préférable	A.qual.f.s	préférable
de	P	de
donner	VW	donner
des	D.ind.m.p	du
noms	N.C.m.p	nom
différents	A.qual.m.p	différent
aux	P+D.def.f.p	au
variables	N.C.f.p	variable
locales	A.qual.f.p	local
et	C.C	et
globales	A.qual.f.p	global
pour	P	pour
des	D.ind.f.p	du
raisons	N.C.f.p	raison
de	P	de
lisibilité	N.C.f.s	lisibilité
et	C.C	et
de	P	de
compréhension	N.C.f.s	compréhension
du	P+D.def.m.s	du
code	N.C.m.s	code
.	PONCT.S	.

Définition	N.C.f.s	définition
de	P	de
constantes	N.C.f.p	constante
Une	D.ind.f.s	un
constante	N.C.f.s	constante
est	V.P.3.s	être
une	D.ind.f.s	un
variable	N.C.f.s	variable
dont	PRO.rel.f.s	dont
la	D.def.f.s	le
valeur	N.C.f.s	valeur
est	V.P.3.s	être
inchangeable	A.qual.f.s	inchangeable
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
d'	P	de
un	D.ind.m.s	un
programme	N.C.m.s	programme
.	PONCT.S	.

Avec	P	avec
PHP	N.P.m.s	Php
,	PONCT.W	,
les	D.def.f.p	le
constantes	N.C.f.p	constante
sont	V.P.3.p	être
définies	VK.f.p	définir
grâce	N.C.f.s	grâce
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
define(	A.qual.f.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

la	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
define()	V.P.3.s	definer
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
define("Nom_de_la_variable	N.C.f.s	defineçnom-dablable
"	PONCT.W	"
,	PONCT.W	,
Valeur	N.C.f.s	valeur
)	PONCT.W	)
;	PONCT.W	;
Le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
une	D.ind.f.s	un
constante	N.C.f.s	constante
définie	VK.f.s	définir
à	P	à
l'	D.def.f.s	le
aide	N.C.f.s	aide
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
define()	N.C.m.s	defineçà
ne	ADV.neg	ne
doit	V.P.3.s	devoir
pas	ADV.neg	pas
commencer	VW	commencer
par	P	par
le	D.def.m.s	le
caractère	N.C.m.s	caractère
$	N.C.m.s	$
(	PONCT.W	(
de	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
aucune	D.neg.f.s	aucun
affectation	N.C.f.s	affectation
n'	ADV.neg	ne
est	V.P.3.s	être
possible	A.qual.f.s	possible
)	PONCT.W	)
.	PONCT.S	.

Qu'	PRO.int.m.s	que
est	V.P.3.s	être
-ce	CL.suj.3.m.s	ce
qu'	C.S	que
un	D.ind.m.s	un
opérateur	N.C.m.s	opérateur
?	PONCT.S	?

Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
sont	V.P.3.p	être
des	D.ind.m.p	du
symboles	N.C.m.p	symbole
qui	PRO.rel.m.p	qui
permettent	V.P.3.p	permettre
de	P	de
manipuler	VW	manipuler
des	D.ind.f.p	du
variables	N.C.f.p	variable
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
effectuer	VW	effectuer
des	D.ind.f.p	du
opérations	N.C.f.p	opération
,	PONCT.W	,
les	CL.obj.3.m.p	le
évaluer	VW	évaluer
,	PONCT.W	,
...	PONCT.W	<unknown>
On	CL.suj.3.m.s	on
distingue	V.P.3.s	distinguer
plusieurs	D.ind.m.p	plusieurs
types	N.C.m.p	type
d'	P	de
opérateurs	N.C.m.p	opérateur
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
calcul	N.C.m.s	calcul
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
assignation	N.C.f.s	assignation
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
incrémentation	N.C.f.s	incrémentation
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
comparaison	N.C.f.s	comparaison
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
logiques	A.qual.m.p	logique
(	PONCT.W	(
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
bit-à-bit	A.ind.m.p	bit-à-bit
)	PONCT.W	)
(	PONCT.W	(
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
rotation	N.C.f.s	rotation
de	P	de
bit	N.C.m.s	bit
)	PONCT.W	)
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
calcul	N.C.m.s	calcul
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
calcul	N.C.m.s	calcul
permettent	V.P.3.p	permettre
de	P	de
modifier	VW	modifier
mathématiquement	ADV.-	mathématiquement
la	D.def.f.s	le
valeur	N.C.f.s	valeur
d'	P	de
une	D.ind.f.s	un
variable	A.qual.f.s	variable
Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
Effet	N.P.m.s	Effet
Résultat	N.C.m.s	résultat
(	PONCT.W	(
pour	P	pour
x=7	N.card.m.s	<unknown>
)	PONCT.W	)
Exemple	N.C.m.s	exemple
+	P	p
opérateur	N.C.m.s	opérateur
d'	P	de
addition	N.C.f.s	addition
Ajoute	V.P.3.s	ajouter
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
$x+3	N.P.m.s	<unknown>
10	A.card.m.s	@card@
-	PONCT.W	-
opérateur	N.C.m.s	opérateur
de	P	de
soustraction	N.C.f.s	soustraction
Soustrait	V.P.3.s	soustraire
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
$x-3	N.C.m.s	<unknown>
4	A.card.m.s	@card@
*	A.card.m.s	*
opérateur	N.C.m.s	opérateur
de	P	de
multiplication	N.C.f.s	multiplication
Multiplie	N.P.f.s	Multiplie
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
$x*3	N.P.m.s	<unknown>
21	A.card.m.s	@card@
/	PONCT.W	@card@
plus	ADV.-	plus
:	PONCT.W	:
opérateur	N.C.m.s	opérateur
de	P	de
division	N.C.f.s	division
Divise	V.P.3.s	diviser
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
$x/3	N.C.m.s	<unknown>
2.3333333	N.card.f.s	@card@
=	P+D.def.m.s	c
opérateur	N.C.m.s	opérateur
d'	P	de
affectation	N.C.f.s	affectation
Affecte	V.P.3.s	affecter
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
à	P	à
une	D.ind.f.s	un
variable	N.C.f.s	variable
$x=3	N.C.f.s	<unknown>
Met	V.P.3.s	mettre
la	D.def.f.s	le
valeur	N.C.f.s	valeur
3	N.card.f.s	@card@
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
$x	D.card.m.p	<unknown>
%	N.C.m.s	%
opérateur	N.C.m.s	opérateur
modulo	ET	modulo
$x%3	N.P.x.s	<unknown>
1	D.card.m.s	@card@
Donne	V.S.3.s	donner
le	D.def.m.s	le
reste	N.C.m.s	reste
de	P	de
la	D.def.f.s	le
division	N.C.f.s	division
entière	A.qual.f.s	entier
entre	P	entre
2	D.card.m.p	@card@
nombres	N.C.m.p	nombre
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
assignation	N.C.f.s	assignation
Ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
permettent	V.P.3.p	permettre
de	P	de
simplifier	VW	simplifier
des	D.ind.f.p	du
opérations	N.C.f.p	opération
telles	A.qual.f.p	tel
que	C.S	que
ajouter	VW	ajouter
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
dans	P	dans
une	D.ind.f.s	un
variable	N.C.f.s	variable
et	C.C	et
stocker	VW	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
.	PONCT.S	.

Une	D.ind.f.s	un
telle	A.qual.f.s	tel
opération	N.C.f.s	opération
s'	CL.refl.3.f.s	se
écrirait	V.C.3.s	écrire
habituellement	ADV.-	habituellement
de	P	de
la	D.def.f.s	le
façon	N.C.f.s	façon
suivante	A.qual.f.s	suivant
par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
$x=$x+2	N.P.x.s	<unknown>
Avec	P	avec
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
assignation	N.C.f.s	assignation
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
d'	P	de
écrire	VW	écrire
cette	D.dem.f.s	ce
opération	N.C.f.s	opération
sous	P	sous
la	D.def.f.s	le
forme	N.C.f.s	forme
suivante	A.qual.f.s	suivant
:	PONCT.W	:
$x+=2	N.P.m.s	<unknown>
Ainsi	ADV.-	ainsi
,	PONCT.W	,
si	C.S	si
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
x	N.C.m.p	x
était	V.I.3.s	être
7	PRO.card.m.p	@card@
avant	P	avant
opération	N.C.f.s	opération
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
sera	V.F.3.s	être
de	P	de
9	D.card.m.p	@card@
après	ADV.-	après
...	PONCT.W	<unknown>
Les	D.def.m.p	le
autres	A.ind.m.p	autre
opérateurs	N.C.m.p	opérateur
du	P+D.def.m.s	du
même	A.ind.m.s	même
type	N.C.m.s	type
sont	V.P.3.p	être
les	D.def.m.p	le
suivants	N.C.m.p	suivant
:	PONCT.W	:
Opérateur	N.C.m.s	opérateur
Effet	N.C.m.s	effet
+=	P	uà
addition	N.C.f.s	addition
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
(	PONCT.W	(
à	P	à
gauche	N.C.f.s	gauche
)	PONCT.W	)
-=	PONCT.W	<unknown>
soustrait	V.I.3.s	soustrer
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
*=	N.C.f.s	çù
multiplie	V.P.3.s	multiplier
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
/=	PONCT.W	<unknown>
divise	V.P.3.s	diviser
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	A.qual.f.s	variable
%=	N.C.m.s	<unknown>
donne	V.P.3.s	donner
le	D.def.m.s	le
reste	N.C.m.s	reste
de	P	de
la	D.def.f.s	le
division	N.C.f.s	division
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
|=	N.P.m.s	<unknown>
Effectue	V.P.3.s	effectuer
un	D.ind.m.s	un
OU	PRO.rel.m.s	ou
logique	A.qual.m.s	logique
entre	P	entre
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
^=	N.P.m.s	<unknown>
Effectue	V.P.3.s	effectuer
un	D.ind.m.s	un
OU	A.qual.m.s	ou
exclusif	A.qual.m.s	exclusif
entre	P	entre
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
&=	N.P.f.s	<unknown>
Effectue	V.P.3.s	effectuer
un	D.ind.m.s	un
Et	C.C	et
logique	A.qual.m.s	logique
entre	P	entre
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
.=	PONCT.S	<unknown>
Concatène	N.C.m.s	concatène
deux	D.card.f.p	deux
chaînes	N.C.f.p	chaîne
et	C.C	et
stocke	V.P.3.s	stocker
le	D.def.m.s	le
résultat	N.C.m.s	résultat
dans	P	dans
la	D.def.f.s	le
variable	N.C.f.s	variable
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
d'	P	de
incrémentation	N.C.f.s	incrémentation
Ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
opérateur	N.C.m.s	opérateur
permet	V.P.3.s	permettre
de	P	de
facilement	ADV.-	facilement
augmenter	VW	augmenter
ou	C.C	ou
diminuer	VW	diminuer
d'	P	de
une	D.ind.f.s	un
unité	N.C.f.s	unité
une	D.ind.f.s	un
variable	N.C.f.s	variable
.	PONCT.S	.

Ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
sont	V.P.3.p	être
très	ADV.-	très
utiles	A.qual.m.p	utile
pour	P	pour
des	D.ind.f.p	du
structures	N.C.f.p	structure
telles	A.qual.f.p	tel
que	C.S	que
des	D.ind.m.p	du
boucles	N.C.m.p	boucle
,	PONCT.W	,
qui	PRO.rel.m.p	qui
ont	V.P.3.p	avoir
besoin	N.C.m.s	besoin
d'	P	de
un	D.ind.m.s	un
compteur	N.C.m.s	compteur
(	PONCT.W	(
variable	N.C.f.s	variable
qui	PRO.rel.m.s	qui
augmente	V.P.3.s	augmenter
de	P	de
un	D.ind.m.s	un
en	P	en
un	PRO.ind.m.s	un
)	PONCT.W	)
.	PONCT.S	.

Un	D.ind.m.s	un
opérateur	N.C.m.s	opérateur
de	P	de
type	N.C.m.s	type
$x++	N.P.x.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
remplacer	VW	remplacer
des	D.ind.f.p	du
notations	N.C.f.p	notation
lourdes	A.qual.f.p	lourd
telles	A.qual.f.p	tel
que	C.S	que
$x=$x+1	N.P.m.s	Éxçë
ou	C.C	ou
bien	ADV.-	bien
$x+=1	N.C.m.s	<unknown>
Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
Effet	N.P.m.s	Effet
Syntaxe	N.P.m.s	Syntaxe
Résultat	N.C.m.s	résultat
(	PONCT.W	(
avec	P	avec
x	A.card.m.s	X
valant	VG	valoir
7	N.card.m.s	@card@
)	PONCT.W	)
++	P	uu
Incrémentation	N.C.f.s	incrémentation
Augmente	V.P.3.s	augmenter
d'	P	de
une	D.ind.f.s	un
unité	N.C.f.s	unité
la	D.def.f.s	le
variable	N.C.f.s	variable
$x++	N.P.x.s	<unknown>
8	N.card.m.s	@card@
--	PONCT.W	--
Décrémentation	N.C.f.s	décrémentation
Diminue	VK.f.s	diminer
d'	P	de
une	D.ind.f.s	un
unité	N.C.f.s	unité
la	D.def.f.s	le
variable	N.C.f.s	variable
6	D.card.m.p	@card@
$x	N.C.m.p	çx
--	PONCT.W	--
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
comparaison	N.C.f.s	comparaison
Opérateur	N.P.m.s	Opérateur
Dénomination	N.C.f.s	dénomination
==	V.P.3.s	cevoir
A	P	à
ne	ADV.neg	ne
pas	ADV.neg	pas
confondre	VW	confondre
avec	P	avec
opérateur	N.C.m.s	opérateur
d'	P	de
égalité	N.C.f.s	égalité
le	D.def.m.s	le
signe	N.C.m.s	signe
d'	P	de
affectation	N.C.f.s	affectation
(	PONCT.W	(
=	N.card.m.s	=
)	PONCT.W	)
!	PONCT.S	!

!	PONCT.S	!

Effet	N.C.m.s	effet
Compare	N.C.m.s	compare
deux	D.card.f.p	deux
valeurs	N.C.f.p	valeur
et	C.C	et
vérifie	V.P.3.s	vérifier
leur	D.poss.f.s	leur
égalité	N.C.f.s	égalité
Exemple	N.C.m.s	exemple
$x==3	N.P.m.s	<unknown>
Résultat	N.C.m.s	résultat
Retourne	V.P.3.s	retourner
1	A.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
égal	A.qual.m.s	égal
à	P	à
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	D.card.m.s	@card@
<	P+D.def.m.s	c
opérateur	N.C.m.s	opérateur
d'	P	de
infériorité	N.C.f.s	infériorité
stricte	A.qual.f.s	strict
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
strictement	ADV.-	strictement
inférieure	A.qual.f.s	inférieur
à	P	à
$x<3	N.P.m.s	<unknown>
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
Retourne	A.qual.f.s	retourne
1	A.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
inférieur	A.qual.m.s	inférieur
à	P	à
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	D.card.m.s	@card@
<=	P+D.def.m.s	çù
opérateur	N.C.m.s	opérateur
d'	P	de
infériorité	N.C.f.s	infériorité
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
inférieure	A.qual.f.s	inférieur
ou	C.C	ou
égale	A.qual.f.s	égal
à	P	à
une	D.ind.f.s	un
$x<=3	A.qual.f.s	<unknown>
valeur	N.C.f.s	valeur
Retourne	N.P.f.s	Retourne
1	A.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
inférieur	A.qual.m.s	inférieur
ou	C.C	ou
égale	A.qual.f.s	égal
à	P	à
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	D.card.m.s	@card@
>	P+D.def.m.s	c
opérateur	N.C.m.s	opérateur
de	P	de
supériorité	N.C.f.s	supériorité
stricte	A.qual.f.s	strict
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
strictement	ADV.-	strictement
supérieure	A.qual.f.s	supérieur
à	P	à
$x>3	N.P.m.s	<unknown>
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
Retourne	A.qual.f.s	retourne
1	A.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
supérieur	A.qual.m.s	supérieur
à	P	à
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	D.card.m.s	@card@
>=	P+D.def.m.s	çù
opérateur	N.C.m.s	opérateur
de	P	de
supériorité	N.C.f.s	supériorité
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
supérieure	A.qual.f.s	supérieur
ou	C.C	ou
égale	A.qual.f.s	égal
à	P	à
une	D.ind.f.s	un
$x>=3	A.qual.f.s	<unknown>
valeur	N.C.f.s	valeur
Retourne	N.P.f.s	Retourne
1	N.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
supérieur	A.qual.m.s	supérieur
ou	C.C	ou
égal	A.qual.m.s	égal
à	P	à
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	N.card.m.s	@card@
!	PONCT.S	!

=	P+D.def.m.s	c
opérateur	N.C.m.s	opérateur
de	P	de
différence	N.C.f.s	différence
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
$x	N.P.m.s	<unknown>
!	PONCT.S	!

=3	PRO.card.m.p	<unknown>
différente	A.qual.f.s	différent
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
Retourne	A.qual.f.s	retourne
1	A.card.f.s	@card@
si	C.S	si
$x	N.C.m.s	cx
est	V.P.3.s	être
différent	A.qual.m.s	différent
de	P	de
3	N.card.m.s	@card@
,	PONCT.W	,
sinon	C.C	sinon
0	D.def.m.p	@card@
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
logiques	A.qual.m.p	logique
(	PONCT.W	(
booléens	N.C.m.p	booléen
)	PONCT.W	)
Ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
opérateur	N.C.m.s	opérateur
permet	V.P.3.s	permettre
de	P	de
vérifier	VW	vérifier
si	C.S	si
plusieurs	D.ind.f.p	plusieurs
conditions	N.C.f.p	condition
sont	V.P.3.p	être
vraies	A.qual.f.p	vrai
:	PONCT.W	:
Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
Effet	N.P.m.s	Effet
Syntaxe	N.P.m.s	Syntaxe
||	N.C.m.s	<unknown>
ou	C.C	ou
OR	N.P.f.s	Or
OU	D.poss.f.s	ou
logique	N.C.f.s	logique
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	D.ind.f.s	un
des	P+D.def.f.p	du
conditions	N.C.f.p	condition
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
((condition1)||(condition2))	PONCT.W	çccondition-ciççonçi
&&	D.card.m.p	<unknown>
ou	C.C	ou
AND	P	and
ET	C.C	et
logique	N.C.f.s	logique
Vérifie	V.P.3.s	vérifier
que	C.S	que
toutes	A.ind.f.p	tout
les	D.def.f.p	le
conditions	N.C.f.p	condition
sont	V.P.3.p	être
réalisées	VK.f.p	réaliser
((condition1)&&(condition2))	PONCT.W	çccondition-ciççonçi
XOR	N.P.m.s	Xor
OU	CL.refl.3.f.p	ou
exclusif	A.qual.m.s	exclusif
Vérifie	V.P.3.s	vérifier
qu'	C.S	que
une	PRO.ind.f.s	un
et	C.C	et
une	D.ind.f.s	un
seule	A.qual.f.s	seul
des	P+D.def.f.p	du
conditions	N.C.f.p	condition
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
((condition1)XOR(condition2))	PONCT.W	<unknown>
!	PONCT.S	!

NON	N.C.f.s	non
logique	N.C.f.s	logique
Inverse	V.P.3.s	inverser
l'	D.def.m.s	le
état	N.C.m.s	état
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
booléenne	A.qual.f.s	booléen
(	PONCT.W	(
retourne	N.C.f.s	retourne
(	PONCT.W	(
!	PONCT.S	!

condition	N.C.f.s	condition
)	PONCT.W	)
la	D.def.f.s	le
valeur	N.C.f.s	valeur
1	A.card.f.s	@card@
si	C.S	si
la	D.def.f.s	le
variable	N.C.f.s	variable
vaut	V.P.3.s	valoir
0	A.card.f.s	@card@
,	PONCT.W	,
0	PRO.card.m.s	@card@
si	C.S	si
elle	CL.suj.3.f.s	elle
vaut	V.P.3.s	valoir
1	N.card.m.s	@card@
)	PONCT.W	)
(	PONCT.W	(
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
bit-à-bit	A.ind.m.p	bit-à-bit
)	PONCT.W	)
Si	C.S	si
vous	CL.suj.2.m.p	vous
ne	ADV.neg	ne
comprenez	V.P.2.p	comprendre
pas	ADV.neg	pas
ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
cela	PRO.dem.m.s	cela
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
important	A.qual.m.s	important
,	PONCT.W	,
vous	CL.suj.2.m.p	vous
n'	ADV.neg	ne
en	CL.obj.3.m.s	en
aurez	V.F.2.p	avoir
probablement	ADV.-	probablement
pas	ADV.neg	pas
l'	D.def.f.s	le
utilité	N.C.f.s	utilité
.	PONCT.S	.

Pour	P	pour
ceux	PRO.dem.m.p	celui
qui	PRO.rel.m.p	qui
voudraient	V.C.3.p	vouloir
comprendre	VW	comprendre
,	PONCT.W	,
rendez-	V.Y.2.p	render-
vous	PPRO.2.m.p	vous
aux	P+D.def.m.p	au
chapitres	N.C.m.p	chapitre
suivants	A.qual.m.p	suivant
:	PONCT.W	:
•	D.card.m.s	•
•	N.C.m.s	•
•	D.ind.f.s	•
compréhension	N.C.f.s	compréhension
du	P+D.def.m.s	du
binaire	A.qual.f.s	binaire
représentation	N.C.f.s	représentation
des	P+D.def.f.p	du
données	N.C.f.p	donnée
Instructions	N.C.f.p	instruction
arithmétiques	A.qual.f.p	arithmétique
et	C.C	et
logiques	A.qual.f.p	logique
en	P	en
assembleur	N.C.m.s	assembleur
Ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
opérateur	N.C.m.s	opérateur
traite	V.P.3.s	traiter
ses	D.poss.f.p	son
opérandes	N.C.f.p	opérande
comme	P	comme
des	D.ind.f.p	du
données	N.C.f.p	donnée
binaires	A.qual.f.p	binaire
,	PONCT.W	,
plutôt	ADV.-	plutôt
que	C.S	que
des	D.ind.f.p	du
données	N.C.f.p	donnée
décimales	A.qual.f.p	décimal
,	PONCT.W	,
hexadécimales	A.qual.f.p	hexadécimal
ou	C.C	ou
octales	A.qual.f.p	octal
.	PONCT.S	.

Ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
traitent	V.P.3.p	traiter
ces	D.dem.f.p	ce
données	N.C.f.p	donnée
selon	P	selon
leur	D.poss.f.s	leur
représentation	N.C.f.s	représentation
binaire	A.qual.f.s	binaire
mais	C.C	mais
retournent	V.P.3.p	retourner
des	D.ind.f.p	du
valeurs	N.C.f.p	valeur
numériques	A.qual.f.p	numérique
standard	A.qual.f.p	standard
dans	P	dans
leur	D.poss.m.s	leur
format	N.C.m.s	format
d'	P	de
origine	N.C.f.s	origine
.	PONCT.S	.

Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
suivants	A.qual.m.p	suivant
effectuent	V.P.3.p	effectuer
des	D.ind.f.p	du
opérations	N.C.f.p	opération
bit-à-bit	V.P.3.p	bit-à-bir
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
avec	P	avec
des	D.ind.m.p	du
bits	N.C.m.p	bit
de	P	de
même	A.qual.m.s	même
poids	N.C.m.s	poids
.	PONCT.S	.

Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
&	PONCT.W	&
ET	C.C	et
bit-à-bit	N.C.m.p	bit-à-bit
Effet	N.P.m.s	Effet
Retourne	V.P.3.s	retourner
1	C.S	@card@
si	C.S	si
les	D.def.m.p	le
deux	A.card.m.p	deux
bits	N.C.m.p	bit
de	P	de
même	A.qual.m.s	même
poids	N.C.m.s	poids
sont	V.P.3.p	être
à	P	à
1	D.card.m.s	@card@
Syntaxe	N.C.m.s	syntaxe
9	A.card.m.s	@card@
&	PONCT.W	&
12	A.card.m.s	@card@
(	PONCT.W	(
1001	A.card.m.s	@card@
&	PONCT.W	&
1100	N.card.f.s	@card@
)	PONCT.W	)
Résultat	N.C.m.s	résultat
8	A.card.m.s	@card@
(	PONCT.W	(
1000	PRO.card.m.p	@card@
)	PONCT.W	)
|	P	à
OU	CL.suj.3.m.s	ou
bit-à-bit	V.P.3.s	bit-à-bir
Retourne	V.P.3.s	retourner
1	N.card.m.s	@card@
si	C.S	si
l'	D.def.m.s	le
un	PRO.ind.m.s	un
ou	C.C	ou
l'	D.def.m.s	le
autre	PRO.ind.m.s	autre
des	P+D.def.m.p	du
deux	A.card.m.p	deux
bits	N.C.m.p	bit
de	P	de
même	A.ind.m.s	même
poids	N.C.m.s	poids
est	V.P.3.s	être
à	P	à
1	N.card.m.s	@card@
(	PONCT.W	(
ou	C.C	ou
les	D.def.m.p	le
deux	A.card.m.p	deux
)	PONCT.W	)
9	A.card.m.s	@card@
|	A.card.m.s	|
12	A.card.m.s	@card@
(	PONCT.W	(
1001	A.card.m.s	@card@
|	N.C.m.s	|
1100	A.card.m.s	@card@
)	PONCT.W	)
13	A.card.m.s	@card@
(	PONCT.W	(
1101	A.card.m.s	@card@
)	PONCT.W	)
^	P	à
OU	CL.suj.3.m.s	ou
exclusif	A.qual.m.s	exclusif
Retourne	V.P.3.s	retourner
1	N.card.m.s	@card@
si	C.S	si
l'	D.def.m.s	le
un	PRO.ind.m.s	un
des	P+D.def.m.p	du
deux	A.card.m.p	deux
bits	N.C.m.p	bit
de	P	de
même	A.ind.m.s	même
poids	N.C.m.s	poids
est	V.P.3.s	être
à	P	à
1	D.card.m.s	@card@
(	PONCT.W	(
mais	C.C	mais
pas	ADV.neg	pas
les	D.def.m.p	le
deux	A.card.m.p	deux
)	PONCT.W	)
9	A.card.m.s	@card@
^	A.card.m.s	^
12	A.card.m.s	@card@
(	PONCT.W	(
1001	A.card.m.s	@card@
^	N.C.m.s	^
5	A.card.m.s	@card@
(	PONCT.W	(
0101	A.card.m.s	@card@
)	PONCT.W	)
1100	A.card.m.s	@card@
)	PONCT.W	)
~	A.card.m.s	~
Complément	N.C.m.s	complément
(	PONCT.W	(
NON	N.P.f.s	Non
)	PONCT.W	)
Retourne	V.P.3.s	retourner
1	D.card.m.s	@card@
si	C.S	si
le	D.def.m.s	le
bit	N.C.m.s	bit
est	V.P.3.s	être
à	P	à
0	N.card.m.s	@card@
(	PONCT.W	(
et	C.C	et
inversement	ADV.-	inversement
)	PONCT.W	)
~9	N.C.m.s	c
(	PONCT.W	(
~1001	N.card.f.s	@card@
)	PONCT.W	)
6	PRO.card.m.p	@card@
(	PONCT.W	(
0110	PRO.card.m.p	@card@
)	PONCT.W	)
(	PONCT.W	(
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
de	P	de
rotation	N.C.f.s	rotation
de	P	de
bit	N.C.m.s	bit
)	PONCT.W	)
Si	C.S	si
vous	CL.suj.2.m.p	vous
ne	ADV.neg	ne
comprenez	V.P.2.p	comprendre
pas	ADV.neg	pas
ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
cela	PRO.dem.m.s	cela
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
important	A.qual.m.s	important
,	PONCT.W	,
vous	CL.suj.2.m.p	vous
n'	ADV.neg	ne
en	CL.obj.3.m.s	en
aurez	V.F.2.p	avoir
probablement	ADV.-	probablement
pas	ADV.neg	pas
l'	D.def.f.s	le
utilité	N.C.f.s	utilité
.	PONCT.S	.

Pour	P	pour
ceux	PRO.dem.m.p	celui
qui	PRO.rel.m.p	qui
voudraient	V.C.3.p	vouloir
comprendre	VW	comprendre
,	PONCT.W	,
rendez-	V.Y.2.p	render-
vous	PPRO.2.m.p	vous
aux	P+D.def.m.p	au
chapitres	N.C.m.p	chapitre
suivants	A.qual.m.p	suivant
:	PONCT.W	:
•	D.card.m.s	•
•	N.C.m.s	•
•	D.ind.f.s	•
compréhension	N.C.f.s	compréhension
du	P+D.def.m.s	du
binaire	A.qual.f.s	binaire
représentation	N.C.f.s	représentation
des	P+D.def.f.p	du
données	N.C.f.p	donnée
Instructions	N.C.f.p	instruction
arithmétiques	A.qual.f.p	arithmétique
et	C.C	et
logiques	A.qual.f.p	logique
en	P	en
assembleur	N.C.m.s	assembleur
Ce	D.dem.m.s	ce
type	N.C.m.s	type
d'	P	de
opérateur	N.C.m.s	opérateur
traite	V.P.3.s	traiter
ses	D.poss.f.p	son
opérandes	N.C.f.p	opérande
comme	P	comme
des	D.ind.f.p	du
données	N.C.f.p	donnée
binaires	A.qual.f.p	binaire
d'	P	de
une	D.ind.f.s	un
longueur	N.C.f.s	longueur
de	P	de
32	D.card.m.p	@card@
bits	N.C.m.p	bit
,	PONCT.W	,
plutôt	ADV.-	plutôt
que	C.S	que
des	D.ind.f.p	du
données	N.C.f.p	donnée
décimales	A.qual.f.p	décimal
,	PONCT.W	,
hexadécimales	A.qual.f.p	hexadécimal
ou	C.C	ou
octales	A.qual.f.p	octal
.	PONCT.S	.

Ces	D.dem.m.p	ce
opérateurs	N.C.m.p	opérateur
traitent	V.P.3.p	traiter
ces	D.dem.f.p	ce
données	N.C.f.p	donnée
selon	P	selon
leur	D.poss.f.s	leur
représentation	N.C.f.s	représentation
binaire	A.qual.f.s	binaire
mais	C.C	mais
retournent	V.P.3.p	retourner
des	D.ind.f.p	du
valeurs	N.C.f.p	valeur
numériques	A.qual.f.p	numérique
standards	A.qual.f.p	standard
dans	P	dans
leur	D.poss.m.s	leur
format	N.C.m.s	format
d'	P	de
origine	N.C.f.s	origine
.	PONCT.S	.

Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
suivants	A.qual.m.p	suivant
effectuent	V.P.3.p	effectuer
des	D.ind.f.p	du
rotations	N.C.f.p	rotation
sur	P	sur
les	D.def.m.p	le
bits	N.C.m.p	bit
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qu'	C.S	que
il	CL.suj.3.m.s	il
décale	V.P.3.s	décaler
chacun	PRO.ind.m.s	chacun
des	P+D.def.m.p	du
bits	N.C.m.p	bit
d'	P	de
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
de	P	de
bits	N.C.m.p	bit
vers	P	vers
la	D.def.f.s	le
gauche	N.C.f.s	gauche
ou	C.C	ou
vers	P	vers
la	D.def.f.s	le
droite	N.C.f.s	droite
.	PONCT.S	.

La	D.def.f.s	le
première	A.ord.f.s	premier
opérande	N.C.f.s	opérande
désigne	V.P.3.s	désigner
la	D.def.f.s	le
donnée	N.C.f.s	donnée
sur	P	sur
laquelle	PRO.rel.f.s	lequel
on	CL.suj.3.m.s	on
va	V.P.3.s	aller
faire	VW	faire
le	D.def.m.s	le
décalage	N.C.m.s	décalage
,	PONCT.W	,
la	D.def.f.s	le
seconde	A.ord.f.s	second
désigne	V.P.3.s	désigner
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
bits	N.C.m.p	bit
duquel	P+PRO.rel.3.m.s	duquel
elle	CL.suj.3.f.s	elle
va	V.P.3.s	aller
être	VW	être
décalée	VK.f.s	décaler
.	PONCT.S	.

Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
Effet	N.P.m.s	Effet
Syntaxe	N.P.m.s	Syntaxe
Décale	V.P.3.s	décaler
les	D.def.m.p	le
bits	N.C.m.p	bit
vers	P	vers
la	D.def.f.s	le
gauche	N.C.f.s	gauche
(	PONCT.W	(
multiplie	VK.f.s	multiplir
par	P	par
2	N.card.m.s	@card@
à	P	à
chaque	D.ind.m.s	chaque
décalage	N.C.m.s	décalage
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
zéros	N.C.m.p	zéro
qui	PRO.rel.m.p	qui
sortent	V.P.3.p	sortir
à	P	à
gauche	A.qual.m.s	gauche
sont	V.P.3.p	être
perdus	VK.m.p	perdre
,	PONCT.W	,
tandis	VK.m.p	tandir
que	C.S	que
des	D.ind.m.p	du
zéros	N.C.m.p	zéro
sont	V.P.3.p	être
insérés	VK.m.p	insérer
à	P	à
droite	N.C.f.s	droite
<<	N.card.m.p	<unknown>
Rotation	N.C.f.s	rotation
à	P	à
gauche	N.C.f.s	gauche
>>	N.C.m.s	<unknown>
Décale	N.P.f.s	Décale
les	D.def.m.p	le
bits	N.C.m.p	bit
vers	P	vers
la	D.def.f.s	le
droite	N.C.f.s	droite
(	PONCT.W	(
divise	VK.f.s	divir
par	P	par
2	N.card.m.s	@card@
à	P	à
Rotation	N.C.f.s	rotation
à	P	à
droite	N.C.f.s	droite
avec	P	avec
chaque	D.ind.m.s	chaque
décalage	N.C.m.s	décalage
)	PONCT.W	)
.	PONCT.S	.

Les	D.def.m.p	le
zéros	N.C.m.p	zéro
qui	PRO.rel.m.p	qui
sortent	V.P.3.p	sortir
à	P	à
droite	A.qual.f.s	droit
conservation	N.C.f.s	conservation
du	P+D.def.m.s	du
signe	N.C.m.s	signe
sont	V.P.3.p	être
perdus	VK.m.p	perdre
,	PONCT.W	,
tandis	N.C.m.p	tandis
que	PRO.rel.m.p	que
le	D.def.m.s	le
bit	N.C.m.s	bit
non-nul	A.qual.m.s	non-nul
de	P	de
poids	N.C.m.p	poids
plus	ADV.-	plus
fort	A.qual.m.s	fort
est	V.P.3.s	être
recopié	VK.m.s	recopier
à	P	à
gauche	A.qual.m.s	gauche
Résultat	N.C.m.s	résultat
6	A.card.m.s	@card@
<<	N.C.m.p	çù
1	A.card.m.s	@card@
12	A.card.m.s	@card@
(	PONCT.W	(
110	A.card.m.s	@card@
<<	N.C.m.p	çù
1	A.card.m.s	@card@
)	PONCT.W	)
(	PONCT.W	(
1100	PRO.card.m.p	@card@
)	PONCT.W	)
6	A.card.m.s	@card@
>>	N.C.m.p	çù
1	A.card.m.s	@card@
(	PONCT.W	(
0110	D.card.m.p	@card@
>>	N.C.m.p	çù
1	A.card.m.s	@card@
)	PONCT.W	)
3	A.card.m.s	@card@
(	PONCT.W	(
0011	A.card.m.s	@card@
)	PONCT.W	)
Autres	A.ind.m.p	autre
opérateurs	N.C.m.p	opérateur
Les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
ne	ADV.neg	ne
peuvent	V.P.3.p	pouvoir
pas	ADV.neg	pas
être	VW	être
classés	VK.m.p	classer
dans	P	dans
une	D.ind.f.s	un
catégorie	N.C.f.s	catégorie
spécifique	A.qual.f.s	spécifique
mais	C.C	mais
ils	CL.suj.3.m.p	il
ont	V.P.3.p	avoir
tout	ADV.-	tout
de	P	de
même	ADV.-	même
chacun	PRO.ind.m.s	chacun
leur	D.poss.f.s	leur
importance	N.C.f.s	importance
!	PONCT.S	!

Opérateur	N.C.m.s	opérateur
Dénomination	N.C.f.s	dénomination
Effet	N.P.m.s	Effet
Syntaxe	N.P.m.s	Syntaxe
.	PONCT.S	.

Concaténation	N.C.f.s	concaténation
Joint	N.P.m.s	Joint
deux	D.card.f.p	deux
chaînes	N.C.f.p	chaîne
bout	N.C.m.s	bout
à	P	à
bout	N.C.m.s	bout
"	PONCT.W	"
Bonjour"."Au	N.P.m.s	Bonjourçau
revoir	VW	revoir
"	PONCT.W	"
$	P	à
Référencement	N.C.m.s	référencement
de	P	de
variable	A.qual.m.s	variable
Permet	N.P.m.s	Permet
de	P	de
définir	VW	définir
une	D.ind.f.s	un
variable	N.C.f.s	variable
$MaVariable	N.C.f.s	<unknown>
=	P	à
2	N.card.m.s	@card@
;	PONCT.W	;
->	N.P.x.s	<unknown>
Propriété	N.C.f.s	propriété
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
Permet	V.P.3.s	permettre
d'	P	de
accéder	VW	accéder
aux	P+D.def.f.p	au
données	N.C.f.p	donnée
membres	N.C.m.p	membre
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
$MonObjet>Propriete	N.P.m.s	Mmonobjetépriete
Résultat	N.C.m.s	résultat
"	PONCT.W	"
BonjourAu	N.P.m.s	Bonjourau
revoir	VW	revoir
"	PONCT.W	"
Les	D.def.f.p	le
priorités	N.C.f.p	priorité
Lorsque	C.S	lorsque
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
associe	V.P.3.s	associer
plusieurs	D.ind.m.p	plusieurs
opérateurs	N.C.m.p	opérateur
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
que	C.S	que
l'	D.def.m.s	le
interprêteur	N.C.m.s	interprêteur
PHP	N.P.m.s	Php
sache	A.qual.m.s	sache
dans	P	dans
quel	A.int.m.s	quel
ordre	N.C.m.s	ordre
les	CL.obj.3.m.p	le
traiter	VW	traiter
,	PONCT.W	,
voici	V.P.3.s	<unknown>
donc	ADV.-	donc
dans	P	dans
l'	D.def.m.s	le
ordre	N.C.m.s	ordre
décroissant	VG	décroître
les	D.def.f.p	le
priorités	N.C.f.p	priorité
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
:	PONCT.W	:
Priorité	N.C.f.s	priorité
des	P+D.def.m.p	du
opérateurs	N.C.m.p	opérateur
+++++++++++++++	A.ind.m.p	UnnnnnnMNCNCMMMCCCCCCCCCCCCCCCCCCCCC
(	PONCT.W	(
)	PONCT.W	)
++++++++++++++	N.P.x.s	UununuunununuuSuSuunuSuSuSuSuSuSuuSu
--	PONCT.W	--
[	PONCT.W	[
]	PONCT.W	]
++	ADV.-	un
!	PONCT.S	!

~	P	à
+++++++++++++	N.C.m.s	Unnunununuuuuuuuuuuuuuuuuuuuuuuuuuuu
*	N.C.m.s	*
/	PONCT.W	@card@
++++++++++++	N.P.x.s	unuuuuununununununununununununsunsun
+	P	p
-	PONCT.W	-
+++++++++++	N.P.x.s	unununununununununununununsunununsun
<	P	à
<=	N.C.m.s	<unknown>
>=	N.C.m.s	<unknown>
>	N.C.m.s	>
++++++++++	N.C.m.s	unununusssssssssunununununununununun
==	V.P.3.s	cevoir
!	PONCT.S	!

=	PONCT.W	=
+++++++++	ADV.-	uunuuuuuuuuuuuuuuuuuuuuuSuuuuuuuuuSu
&	PONCT.W	&
++++++++	ADV.-	uunuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
^	P	à
+++++++	ADV.-	uunuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
|	D.card.m.p	|
%	N.C.m.s	%
-	PONCT.W	-
++++++	ADV.-	uunuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
&&	D.card.m.p	<unknown>
+++++	ADV.-	uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu
||	N.C.m.p	çù
++++	ADV.-	uua-uiuiuauauuauauuiuiuaiuauiuiuaiua
?	PONCT.S	?

:	PONCT.W	:
+++	ADV.-	uua-uaiuaua-uaiuaua-uaiuaua-uaiuaua-
=	P	à
+=	N.C.m.s	au
-=	PONCT.W	<unknown>
*=	N.C.m.p	çù
/=	D.card.m.p	<unknown>
%=	N.C.m.p	çù
<<=	N.P.x.s	<unknown>
>>=	N.P.x.s	<unknown>
>>>=	ET	çäëë
&=	N.C.m.p	çù
^=	P+D.def.m.s	çù
|=	P+D.def.m.s	çù
++	P	uu
AND	N.P.x.s	And
+	P	p
XOR	N.P.m.s	Xor
Qu'	PRO.int.m.s	que
est	V.P.3.s	être
-ce	CL.suj.3.m.s	ce
qu'	C.S	que
une	D.ind.f.s	un
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
?	PONCT.S	?

On	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
les	D.def.f.p	le
instructions	N.C.f.p	instruction
qui	PRO.rel.f.p	qui
permettent	V.P.3.p	permettre
de	P	de
tester	VW	tester
si	C.S	si
une	D.ind.f.s	un
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
ou	C.C	ou
non	ADV.neg	non
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
si	C.S	si
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
son	D.poss.f.s	son
expression	N.C.f.s	expression
vaut	V.P.3.s	valoir
0	N.card.m.s	@card@
ou	C.C	ou
1	N.card.m.s	@card@
(	PONCT.W	(
le	D.def.m.s	le
PHP	N.P.m.s	Php
associe	V.P.3.s	associer
le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
true	V.P.3.s	truer
à	P	à
1	N.card.m.s	@card@
et	C.C	et
false	N.C.f.s	false
à	P	à
0	N.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Ces	D.dem.f.p	ce
structures	N.C.f.p	structure
conditionnelles	A.qual.f.p	conditionnel
peuvent	V.P.3.p	pouvoir
être	VW	être
associées	VK.f.p	associer
à	P	à
des	D.ind.f.p	du
structures	N.C.f.p	structure
qui	PRO.rel.f.p	qui
se	CL.refl.3.f.p	se
répètent	V.P.3.p	répéter
suivant	P	suivant
la	D.def.f.s	le
réalisation	N.C.f.s	réalisation
de	P	de
la	D.def.f.s	le
condition	N.C.f.s	condition
,	PONCT.W	,
on	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
ces	D.dem.f.p	ce
structures	N.C.f.p	structure
des	P+D.def.f.p	du
structures	N.C.f.p	structure
de	P	de
boucle	N.C.f.s	boucle
La	D.def.f.s	le
notion	N.C.f.s	notion
de	P	de
bloc	N.C.m.s	bloc
Une	D.ind.f.s	un
expression	N.C.f.s	expression
suivie	VK.f.s	suivre
d'	P	de
un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
est	V.P.3.s	être
appelée	VK.f.s	appeler
instruction	N.C.f.s	instruction
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
a++	A.qual.m.s	au
;	PONCT.W	;
est	V.P.3.s	être
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
.	PONCT.S	.

Lorsque	C.S	lorsque
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
veut	V.P.3.s	vouloir
regrouper	VW	regrouper
plusieurs	D.ind.f.p	plusieurs
instructions	N.C.f.p	instruction
,	PONCT.W	,
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
créer	VW	créer
ce	PRO.dem.m.s	ce
que	PRO.rel.m.s	que
l'	CL.obj.3.m.s	le
on	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
,	PONCT.W	,
c'est-à-dire	P	c'est-à-dire
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
d'	P	de
instructions	N.C.f.p	instruction
(	PONCT.W	(
suivies	VK.f.p	suivre
respectivement	ADV.-	respectivement
par	P	par
des	D.ind.m.p	du
point-virgules	N.C.m.p	point-virgule
)	PONCT.W	)
et	C.C	et
comprises	VK.f.p	comprendre
entre	P	entre
les	D.def.f.p	le
accolades	N.C.f.p	accolade
{	N.C.m.p	{
et	C.C	et
}	N.C.m.s	}
.	PONCT.S	.

Les	D.def.f.p	le
instructions	N.C.f.p	instruction
if	ET	if
,	PONCT.W	,
while	N.C.m.s	while
et	C.C	et
for	N.C.m.s	for
peuvent	V.P.3.p	pouvoir
par	P	par
exemple	N.C.m.s	exemple
être	VW	être
suivies	VK.f.p	suivre
d'	P	de
un	D.ind.m.s	un
bloc	N.C.m.s	bloc
d'	P	de
instructions	N.C.f.p	instruction
à	P	à
exécuter	VW	exécuter
...	PONCT.W	<unknown>
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	I	if
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	CL.suj.3.m.s	if
est	V.P.3.s	être
la	D.def.f.s	le
structure	N.C.f.s	structure
de	P	de
test	N.C.m.s	test
la	D.def.f.s	le
plus	ADV.-	plus
basique	A.qual.f.s	basique
,	PONCT.W	,
on	CL.suj.3.m.s	on
la	CL.obj.3.f.s	la
retrouve	V.P.3.s	retrouver
dans	P	dans
tous	A.ind.m.p	tous
les	D.def.m.p	le
langages	N.C.m.p	langage
(	PONCT.W	(
avec	P	avec
une	D.ind.f.s	un
syntaxe	N.C.f.s	syntaxe
différente	A.qual.f.s	différent
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Elle	CL.suj.3.f.s	elle
permet	V.P.3.s	permettre
d'	P	de
exécuter	VW	exécuter
une	D.ind.f.s	un
série	N.C.f.s	série
d'	P	de
instruction	N.C.f.s	instruction
si	C.S	si
jamais	ADV.neg	jamais
une	D.ind.f.s	un
condition	N.C.f.s	condition
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
if	N.C.m.s	if
(	PONCT.W	(
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
Remarques	N.P.m.s	Remarques
:	PONCT.W	:
•	N.C.m.s	•
•	P	à
la	D.def.f.s	le
condition	N.C.f.s	condition
doit	V.P.3.s	devoir
être	VW	être
entre	P	entre
des	D.ind.f.p	du
parenthèses	N.C.f.p	parenthèse
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
définir	VW	définir
plusieurs	D.ind.f.p	plusieurs
conditions	N.C.f.p	condition
à	P	à
remplir	VW	remplir
avec	P	avec
les	D.def.m.p	le
opérateurs	N.C.m.p	opérateur
ET	C.C	et
et	C.C	et
OU	N.P.f.s	Ou
(	PONCT.W	(
&&	D.card.m.p	<unknown>
et	C.C	et
||	N.C.m.s	<unknown>
)	PONCT.W	)
par	P	par
exemple	N.C.m.s	exemple
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
suivante	A.qual.f.s	suivant
teste	V.P.3.s	tester
si	C.S	si
les	D.def.f.p	le
deux	A.card.f.p	deux
conditions	N.C.f.p	condition
sont	V.P.3.p	être
vraies	A.qual.f.p	vrai
:	PONCT.W	:
if	N.C.m.s	if
((condition1)&&(condition2))	PONCT.W	çccondition-ciççonçi
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
ci-dessous	ADV.-	ci-dessous
exécutera	V.F.3.s	exécuter
les	D.def.f.p	le
instructions	N.C.f.p	instruction
si	C.S	si
l'	D.def.f.s	le
une	PRO.ind.f.s	un
ou	C.C	ou
l'	D.def.f.s	le
autre	PRO.ind.f.s	autre
des	P+D.def.f.p	du
deux	A.card.f.p	deux
conditions	N.C.f.p	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
:	PONCT.W	:
if	N.C.m.s	if
((condition1)||(condition2))	PONCT.W	çccondition-ciççonçi
•	N.C.m.s	•
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
qu'	ADV.-	qu'
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
,	PONCT.W	,
les	D.def.f.p	le
accolades	N.C.f.p	accolade
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
nécessaires	A.qual.f.p	nécessaire
...	PONCT.W	<unknown>
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	I	if
...	PONCT.S	<unknown>
else	V.P.3.s	elser
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	A.qual.m.s	if
dans	P	dans
sa	D.poss.f.s	son
forme	N.C.f.s	forme
basique	A.qual.f.s	basique
ne	ADV.neg	ne
permet	V.P.3.s	permettre
de	P	de
tester	VW	tester
qu'	ADV.neg	qu'
une	D.ind.f.s	un
condition	N.C.f.s	condition
,	PONCT.W	,
or	C.C	or
la	D.def.f.s	le
plupart	N.C.f.s	plupart
du	P+D.def.m.s	du
temps	N.C.m.s	temps
on	CL.suj.3.m.s	on
aimerait	V.C.3.s	aimer
pouvoir	VW	pouvoir
choisir	VW	choisir
les	D.def.f.p	le
instructions	N.C.f.p	instruction
à	P	à
exécuter	VW	exécuter
en	P	en
cas	N.C.m.s	cas
de	P	de
non	ADV.neg	non
réalisation	N.C.f.s	réalisation
de	P	de
la	D.def.f.s	le
condition	N.C.f.s	condition
...	PONCT.W	<unknown>
L'	D.def.f.s	le
expression	N.C.f.s	expression
if	N.P.m.s	If
...	PONCT.S	<unknown>
else	CL.suj.3.f.s	else
permet	V.P.3.s	permettre
d'	P	de
exécuter	VW	exécuter
une	D.ind.f.s	un
autre	A.ind.f.s	autre
série	N.C.f.s	série
d'	P	de
instruction	N.C.f.s	instruction
en	P	en
cas	N.C.m.s	cas
de	P	de
non-réalisation	N.C.f.s	non-réalisation
de	P	de
la	D.def.f.s	le
condition	N.C.f.s	condition
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
if	N.C.m.s	if
(	PONCT.W	(
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
else	PPRO.3.f.s	<unknown>
{	P+D.def.m.s	c
autre	A.ind.f.s	autre
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	A.qual.m.s	if
...	PONCT.W	<unknown>
elseif	A.qual.m.s	elseif
...	PONCT.S	<unknown>
else	V.P.3.s	elser
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
if	A.qual.m.s	if
...	PONCT.S	<unknown>
else	CL.suj.3.f.s	else
ne	ADV.neg	ne
permet	V.P.3.s	permettre
de	P	de
tester	VW	tester
qu'	ADV.neg	qu'
une	D.ind.f.s	un
condition	N.C.f.s	condition
,	PONCT.W	,
or	N.C.m.s	or
il	CL.suj.3.m.s	il
est	V.P.3.s	être
parfois	ADV.-	parfois
nécessaire	A.qual.m.s	nécessaire
de	P	de
tester	VW	tester
plusieurs	D.ind.f.p	plusieurs
conditions	N.C.f.p	condition
de	P	de
façon	N.C.f.s	façon
exclusive	A.qual.f.s	exclusif
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
sur	P	sur
toutes	A.ind.f.p	tout
les	D.def.f.p	le
conditions	N.C.f.p	condition
une	D.ind.f.s	un
seule	A.ind.f.s	seul
sera	V.F.3.s	être
réalisée	VK.f.s	réaliser
...	PONCT.W	<unknown>
L'	D.def.f.s	le
expression	N.C.f.s	expression
if	A.qual.m.s	if
...	PONCT.W	<unknown>
elseif	A.qual.m.s	elseif
...	PONCT.S	<unknown>
else	CL.suj.3.f.s	else
permet	V.P.3.s	permettre
d'	P	de
enchaîner	VW	enchaîner
une	D.ind.f.s	un
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
et	C.C	et
évite	V.P.3.s	éviter
d'	P	de
avoir	VW	avoir
à	P	à
imbriquer	VW	imbriquer
des	D.ind.f.p	du
instructions	N.C.f.p	instruction
if	A.qual.f.p	if
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
if	N.C.m.s	if
(	PONCT.W	(
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
elseif	N.C.m.s	<unknown>
(	PONCT.W	(
autre	A.ind.f.s	autre
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
autre	A.ind.f.s	autre
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
}	N.C.m.s	}
...	PONCT.W	<unknown>
else	PPRO.3.f.s	<unknown>
(	PONCT.W	(
dernière	A.qual.f.s	dernier
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
une	D.ind.f.s	un
façon	N.C.f.s	façon
plus	ADV.-	plus
courte	A.qual.f.s	court
de	P	de
faire	VW	faire
un	D.ind.m.s	un
test	N.C.m.s	test
(	PONCT.W	(
opérateur	N.C.m.s	opérateur
ternaire	A.qual.m.s	ternaire
)	PONCT.W	)
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
faire	VW	faire
un	D.ind.m.s	un
test	N.C.m.s	test
avec	P	avec
une	D.ind.f.s	un
structure	N.C.f.s	structure
beaucoup	ADV.-	beaucoup
moins	ADV.-	moins
lourde	A.qual.f.s	lourd
grâce	N.C.f.s	grâce
à	P	à
la	D.def.f.s	le
structure	N.C.f.s	structure
suivante	A.qual.f.s	suivant
,	PONCT.W	,
appelée	VK.f.s	appeler
opérateur	N.C.m.s	opérateur
ternaire	A.qual.m.s	ternaire
:	PONCT.W	:
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
?	PONCT.S	?

instruction	N.C.f.s	instruction
si	ADV.-	si
vrai	A.qual.m.s	vrai
:	PONCT.W	:
instruction	N.C.f.s	instruction
si	C.S	si
faux	A.qual.m.s	faux
Remarques	N.C.f.p	remarque
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
la	D.def.f.s	le
condition	N.C.f.s	condition
doit	V.P.3.s	devoir
être	VW	être
entre	P	entre
des	D.ind.f.p	du
parenthèses	N.C.f.p	parenthèse
Lorsque	C.S	lorsque
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
vraie	A.qual.f.s	vrai
,	PONCT.W	,
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
de	P	de
gauche	N.C.f.s	gauche
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
Lorsque	C.S	lorsque
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
fausse	A.qual.f.s	faux
,	PONCT.W	,
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
de	P	de
droite	N.C.f.s	droite
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
switch	A.qual.f.s	switch
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
switch	A.qual.f.s	switch
permet	V.P.3.s	permettre
de	P	de
faire	VW	faire
plusieurs	D.ind.m.p	plusieurs
tests	N.C.m.p	test
de	P	de
valeurs	N.C.f.p	valeur
sur	P	sur
le	D.def.m.s	le
contenu	N.C.m.s	contenu
d'	P	de
une	D.ind.f.s	un
même	A.qual.f.s	même
variable	N.C.f.s	variable
.	PONCT.S	.

Ce	D.dem.m.s	ce
branchement	N.C.m.s	branchement
conditionnel	A.qual.m.s	conditionnel
simplifie	V.P.3.s	simplifier
beaucoup	ADV.-	beaucoup
le	D.def.m.s	le
test	N.C.m.s	test
de	P	de
plusieurs	D.ind.f.p	plusieurs
valeurs	N.C.f.p	valeur
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
,	PONCT.W	,
car	C.C	car
cette	D.dem.f.s	ce
opération	N.C.f.s	opération
aurait	V.C.3.s	avoir
été	VK.m.s	être
compliquée	VK.f.s	compliquer
(	PONCT.W	(
mais	C.C	mais
possible	A.qual.m.s	possible
)	PONCT.W	)
avec	P	avec
des	D.ind.m.p	du
if	N.C.m.p	if
imbriqués	A.qual.m.p	imbriqué
.	PONCT.S	.

Sa	D.poss.f.s	son
syntaxe	N.C.f.s	syntaxe
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
switch	ET	switch
(	PONCT.W	(
Variable	N.P.x.s	Variable
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
Valeur1	N.P.f.s	<unknown>
:	PONCT.W	:
Liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
Valeur2	N.P.f.s	<unknown>
:	PONCT.W	:
Liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
break	ET	break
;	PONCT.W	;
case	N.C.f.s	case
Valeurs	N.P.m.s	Valeurs
...	PONCT.W	<unknown>
:	PONCT.W	:
Liste	N.C.m.s	liste
d'	P	de
instructions	N.C.f.p	instruction
break	A.qual.f.p	break
;	PONCT.W	;
default	N.C.m.s	default
:	PONCT.W	:
Liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
break	A.qual.f.p	break
;	PONCT.W	;
}	P	à
Les	D.def.f.p	le
parenthèses	N.C.f.p	parenthèse
qui	PRO.rel.f.p	qui
suivent	V.P.3.p	suivre
le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
switch	N.C.m.s	switch
indiquent	V.P.3.p	indiquer
une	D.ind.f.s	un
expression	N.C.f.s	expression
dont	PRO.rel.f.s	dont
la	D.def.f.s	le
valeur	N.C.f.s	valeur
est	V.P.3.s	être
testée	VK.f.s	tester
successivement	ADV.-	successivement
par	P	par
chacun	PRO.ind.m.s	chacun
des	P+D.def.m.p	du
case	N.C.f.p	case
.	PONCT.S	.

Lorsque	C.S	lorsque
l'	D.def.f.s	le
expression	N.C.f.s	expression
testée	VK.f.s	tester
est	V.P.3.s	être
égale	A.qual.f.s	égal
à	P	à
une	D.ind.f.s	un
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
suivant	P	suivant
un	D.ind.m.s	un
case	N.C.m.s	case
,	PONCT.W	,
la	D.def.f.s	le
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
qui	PRO.rel.f.s	qui
suit	V.P.3.s	suivre
celui	PRO.dem.m.s	celui
-ci	CL.suj.3.m.s	ci
est	V.P.3.s	être
exécutée	VK.f.s	exécuter
.	PONCT.S	.

Le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
break	A.qual.m.s	break
indique	V.P.3.s	indiquer
la	D.def.f.s	le
sortie	N.C.f.s	sortie
de	P	de
la	D.def.f.s	le
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
.	PONCT.S	.

Le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
default	V.P.3.s	<unknown>
précède	V.P.3.s	précéder
la	D.def.f.s	le
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
qui	PRO.rel.f.s	qui
sera	V.F.3.s	être
exécutée	VK.f.s	exécuter
si	C.S	si
l'	D.def.f.s	le
expression	N.C.f.s	expression
n'	ADV.neg	ne
est	V.P.3.s	être
jamais	ADV.neg	jamais
égale	A.qual.f.s	égal
à	P	à
une	D.ind.f.s	un
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
.	PONCT.S	.

N'	ADV.neg	ne
oubliez	V.P.2.p	oublier
pas	ADV.neg	pas
d'	P	de
insérer	VW	insérer
des	D.ind.f.p	du
instructions	N.C.f.p	instruction
break	A.qual.f.p	break
entre	P	entre
chaque	D.ind.m.s	chaque
test	N.C.m.s	test
,	PONCT.W	,
ce	D.dem.m.s	ce
genre	N.C.m.s	genre
d'	P	de
oubli	N.C.m.s	oubli
est	V.P.3.s	être
difficile	A.qual.m.s	difficile
à	P	à
détecter	VW	détecter
car	C.C	car
aucune	D.neg.f.s	aucun
erreur	N.C.f.s	erreur
n'	ADV.neg	ne
est	V.P.3.s	être
signalée	VK.f.s	signaler
...	PONCT.W	<unknown>
Les	D.def.m.p	le
boucles	N.C.m.p	boucle
Les	D.def.m.p	le
boucles	N.C.m.p	boucle
sont	V.P.3.p	être
des	D.ind.f.p	du
structures	N.C.f.p	structure
qui	PRO.rel.f.p	qui
permettent	V.P.3.p	permettre
d'	P	de
exécuter	VW	exécuter
plusieurs	D.ind.f.p	plusieurs
fois	N.C.f.p	foi
la	D.def.f.s	le
même	A.qual.f.s	même
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
jusqu'	P	jusque
à	P	à
ce	PRO.dem.m.s	ce
qu'	PRO.rel.m.s	que
une	D.ind.f.s	un
condition	N.C.f.s	condition
ne	ADV.neg	ne
soit	V.S.3.s	être
plus	ADV.neg	plus
réalisée	VK.f.s	réaliser
...	PONCT.S	<unknown>
On	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
parfois	ADV.-	parfois
ces	D.dem.f.p	ce
structures	N.C.f.p	structure
instructions	N.C.f.p	instruction
répétitives	A.qual.f.p	répétitif
ou	C.C	ou
bien	ADV.-	bien
itérations	A.qual.f.p	itération
.	PONCT.S	.

La	D.def.f.s	le
façon	N.C.f.s	façon
la	D.def.f.s	le
plus	ADV.-	plus
commune	A.qual.f.s	commun
de	P	de
faire	VW	faire
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
,	PONCT.W	,
est	V.P.3.s	être
de	P	de
créer	VW	créer
un	D.ind.m.s	un
compteur	N.C.m.s	compteur
(	PONCT.W	(
une	D.ind.f.s	un
variable	N.C.f.s	variable
qui	PRO.rel.f.s	qui
s'	CL.refl.3.f.s	se
incrémente	V.P.3.s	incrémenter
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qui	PRO.rel.f.s	qui
augmente	V.P.3.s	augmenter
de	P	de
1	N.card.m.s	@card@
à	P	à
chaque	D.ind.m.s	chaque
tour	N.C.m.s	tour
de	P	de
boucle	N.C.f.s	boucle
)	PONCT.W	)
et	C.C	et
de	P	de
faire	VW	faire
arrêter	VW	arrêter
la	D.def.f.s	le
boucle	N.C.f.s	boucle
lorsque	C.S	lorsque
le	D.def.m.s	le
compteur	N.C.m.s	compteur
dépasse	V.P.3.s	dépasser
une	D.ind.f.s	un
certaine	A.qual.f.s	certain
valeur	N.C.f.s	valeur
.	PONCT.S	.

La	D.def.f.s	le
boucle	N.C.f.s	boucle
for	N.C.f.s	for
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
for	A.qual.f.s	for
permet	V.P.3.s	permettre
d'	P	de
exécuter	VW	exécuter
plusieurs	D.ind.f.p	plusieurs
fois	N.C.f.p	foi
la	D.def.f.s	le
même	A.qual.f.s	même
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
:	PONCT.W	:
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
!	PONCT.S	!

Dans	P	dans
sa	D.poss.f.s	son
syntaxe	N.C.f.s	syntaxe
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
préciser	VW	préciser
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
qui	PRO.rel.f.s	qui
sert	V.P.3.s	servir
de	P	de
compteur	N.C.m.s	compteur
(	PONCT.W	(
et	C.C	et
éventuellement	ADV.-	éventuellement
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
de	P	de
départ	N.C.m.s	départ
,	PONCT.W	,
la	D.def.f.s	le
condition	N.C.f.s	condition
sur	P	sur
la	D.def.f.s	le
variable	N.C.f.s	variable
pour	P	pour
laquelle	PRO.rel.f.s	lequel
la	D.def.f.s	le
boucle	N.C.f.s	boucle
s'	CL.refl.3.f.s	se
arrête	V.P.3.s	arrêter
(	PONCT.W	(
basiquement	ADV.-	basiquement
une	D.ind.f.s	un
condition	N.C.f.s	condition
qui	PRO.rel.f.s	qui
teste	V.P.3.s	tester
si	C.S	si
la	D.def.f.s	le
valeur	N.C.f.s	valeur
du	P+D.def.m.s	du
compteur	N.C.m.s	compteur
dépasse	V.P.3.s	dépasser
une	D.ind.f.s	un
limite	N.C.f.s	limite
)	PONCT.W	)
et	C.C	et
enfin	ADV.-	enfin
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
qui	PRO.rel.f.s	qui
incrémente	V.P.3.s	incrémenter
(	PONCT.W	(
ou	C.C	ou
décrémente	A.qual.f.s	décrément
)	PONCT.W	)
le	D.def.m.s	le
compteur	N.C.m.s	compteur
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
compteur	N.C.m.s	compteur
;	PONCT.W	;
condition	N.C.f.s	condition
;	PONCT.W	;
modification	N.C.f.s	modification
du	P+D.def.m.s	du
compteur	N.C.m.s	compteur
)	PONCT.W	)
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	N.C.m.s	}
Par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<6	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.P.x.s	<unknown>
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
$i<br>	ET	çiëbrë
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
Cette	D.dem.f.s	ce
boucle	N.C.f.s	boucle
affiche	V.P.3.s	afficher
5	D.card.f.p	@card@
fois	N.C.f.p	foi
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
$i	N.C.m.s	çi
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
1,2,3,4,5	D.card.m.s	@card@
Elle	CL.suj.3.f.s	elle
commence	V.P.3.s	commencer
à	P	à
$i=1	N.C.f.s	<unknown>
,	PONCT.W	,
vérifie	V.P.3.s	vérifier
que	C.S	que
$i	N.P.f.s	<unknown>
est	V.P.3.s	être
bien	ADV.-	bien
inférieur	A.qual.m.s	inférieur
à	P	à
6	N.card.m.s	@card@
,	PONCT.W	,
etc	ADV.-	<unknown>
...	PONCT.W	<unknown>
jusqu'	P	jusque
à	P	à
atteindre	VW	atteindre
la	D.def.f.s	le
valeur	N.C.f.s	valeur
$i=6	N.P.m.s	<unknown>
,	PONCT.W	,
pour	P	pour
laquelle	PRO.rel.f.s	lequel
la	D.def.f.s	le
condition	N.C.f.s	condition
ne	ADV.neg	ne
sera	V.F.3.s	être
plus	ADV.neg	plus
réalisée	VK.f.s	réaliser
,	PONCT.W	,
la	D.def.f.s	le
boucle	N.C.f.s	boucle
s'	CL.refl.3.f.s	se
interrompra	V.F.3.s	interrompre
et	C.C	et
le	D.def.m.s	le
programme	N.C.m.s	programme
continuera	V.F.3.s	continuer
son	D.poss.m.s	son
cours	N.C.m.s	cours
.	PONCT.S	.

D'	P	de
autre	A.ind.f.s	autre
part	N.C.f.s	part
,	PONCT.W	,
le	D.def.m.s	le
langage	N.C.m.s	langage
PHP	N.P.m.s	Php
autorise	V.P.3.s	autoriser
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
de	P	de
boucle	N.C.f.s	boucle
dans	P	dans
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
for	A.qual.f.s	for
elle-même	PRO.refl.f.s	elle-même
!	PONCT.S	!

Par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
for	N.C.m.s	for
(	PONCT.W	(
$i=0	N.C.m.s	<unknown>
;	PONCT.W	;
$i<10	N.C.m.p	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
$i<br>	ET	çiëbrë
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
•	C.S	•
il	CL.suj.3.m.s	il
faudra	V.F.3.s	falloir
toujours	ADV.-	toujours
vérifier	VW	vérifier
que	C.S	que
la	D.def.f.s	le
boucle	N.C.f.s	boucle
a	V.P.3.s	avoir
bien	ADV.-	bien
une	D.ind.f.s	un
condition	N.C.f.s	condition
de	P	de
sortie	N.C.f.s	sortie
(	PONCT.W	(
i.e	C.S	<unknown>
le	D.def.m.s	le
compteur	N.C.m.s	compteur
s'	CL.refl.3.m.s	se
incrémente	V.P.3.s	incrémenter
correctement	ADV.-	correctement
)	PONCT.W	)
•	V.P.3.s	être
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
echo	A.qual.f.s	echo
dans	P	dans
votre	D.poss.m.s	votre
boucle	N.C.f.s	boucle
est	V.P.3.s	être
un	D.ind.m.s	un
bon	A.qual.m.s	bon
moyen	N.C.m.s	moyen
pour	P	pour
vérifier	VW	vérifier
la	D.def.f.s	le
valeur	N.C.f.s	valeur
du	P+D.def.m.s	du
compteur	N.C.m.s	compteur
pas	ADV.neg	pas
à	P	à
pas	ADV.neg	pas
en	P	en
l'	CL.obj.3.m.s	le
affichant	VG	afficher
!	PONCT.S	!

•	C.S	•
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
bien	ADV.-	bien
compter	VW	compter
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
fois	N.C.f.p	foi
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
veut	V.P.3.s	vouloir
faire	VW	faire
exécuter	VW	exécuter
la	D.def.f.s	le
boucle	N.C.f.s	boucle
:	PONCT.W	:
o	PONCT.W	o
for($i=0	N.C.m.s	forccir
;	PONCT.W	;
$i<10	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
exécute	V.P.3.s	exécuter
10	D.card.f.p	@card@
fois	N.C.f.p	foi
la	D.def.f.s	le
boucle	N.C.f.s	boucle
(	PONCT.W	(
$i	N.C.f.s	çi
de	P	de
0	D.card.m.s	@card@
à	P	à
9	A.card.m.s	@card@
)	PONCT.W	)
o	PONCT.W	o
for($i=0	N.C.m.s	forccir
;	PONCT.W	;
$i<=10	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.P.m.s	<unknown>
)	PONCT.W	)
exécute	V.P.3.s	exécuter
11	D.card.f.p	@card@
fois	N.C.f.p	foi
la	D.def.f.s	le
boucle	N.C.f.s	boucle
(	PONCT.W	(
$i	N.C.f.s	çi
de	P	de
0	D.card.m.s	@card@
à	P	à
10	N.card.m.s	@card@
)	PONCT.W	)
o	PONCT.W	o
for($i=1	N.C.m.s	forçc
;	PONCT.W	;
$i<10	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.P.x.s	<unknown>
)	PONCT.W	)
exécute	V.P.3.s	exécuter
9	D.card.f.p	@card@
fois	N.C.f.p	foi
la	D.def.f.s	le
boucle	N.C.f.s	boucle
(	PONCT.W	(
$i	N.C.f.s	çi
de	P	de
1	D.card.m.s	@card@
à	P	à
9	A.card.m.s	@card@
)	PONCT.W	)
o	PONCT.W	o
for($i=1	N.C.m.s	forçc
;	PONCT.W	;
$i<=10	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
exécute	V.P.3.s	exécuter
10	D.card.f.p	@card@
fois	N.C.f.p	foi
la	D.def.f.s	le
boucle	N.C.f.s	boucle
(	PONCT.W	(
$i	N.C.f.s	çi
de	P	de
1	D.card.m.s	@card@
à	P	à
10	PRO.card.f.p	@card@
)	PONCT.W	)
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
while	V.P.3.s	whiler
L'	D.def.f.s	le
instruction	N.C.f.s	instruction
while	A.qual.f.s	while
représente	V.P.3.s	représenter
un	D.ind.m.s	un
autre	A.ind.m.s	autre
moyen	N.C.m.s	moyen
d'	P	de
exécuter	VW	exécuter
plusieurs	D.ind.f.p	plusieurs
fois	N.C.f.p	foi
la	D.def.f.s	le
même	A.qual.f.s	même
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
réalisée	VK.f.s	réaliser
)	PONCT.W	)
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	P	à
Cette	D.dem.f.s	ce
instruction	N.C.f.s	instruction
exécute	V.P.3.s	exécuter
la	D.def.f.s	le
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
tant	ADV.-	tant
que	C.S	que
(	PONCT.W	(
while	N.C.m.s	while
est	V.P.3.s	être
un	D.ind.m.s	un
mot	N.C.m.s	mot
anglais	A.qual.m.s	anglais
qui	PRO.rel.m.s	qui
signifie	V.P.3.s	signifier
tant	ADV.-	tant
que	C.S	que
)	PONCT.W	)
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
.	PONCT.S	.

La	D.def.f.s	le
condition	N.C.f.s	condition
de	P	de
sortie	N.C.f.s	sortie
pouvant	VG	pouvoir
être	VW	être
n'	ADV.neg	ne
importe	V.P.3.s	importer
quelle	D.int.f.s	quel
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
,	PONCT.W	,
les	D.def.m.p	le
risques	N.C.m.p	risque
de	P	de
boucle	N.C.f.s	boucle
infinie	A.qual.f.s	infini
(	PONCT.W	(
boucle	N.C.f.s	boucle
dont	PRO.rel.m.p	dont
la	D.def.f.s	le
condition	N.C.f.s	condition
est	V.P.3.s	être
toujours	ADV.-	toujours
vraie	A.qual.f.s	vrai
)	PONCT.W	)
sont	V.P.3.p	être
grands	A.qual.m.p	grand
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qu'	C.S	que
elle	CL.suj.3.f.s	elle
risque	V.P.3.s	risquer
de	P	de
provoquer	VW	provoquer
un	D.ind.m.s	un
plantage	N.C.m.s	plantage
du	P+D.def.m.s	du
navigateur	N.C.m.s	navigateur
!	PONCT.S	!

Saut	V.P.3.s	sauoir
inconditionnel	A.qual.m.s	inconditionnel
Il	CL.suj.3.m.s	il
peut	V.P.3.s	pouvoir
être	VW	être
nécessaire	A.qual.m.s	nécessaire
de	P	de
faire	VW	faire
sauter	VW	sauter
à	P	à
la	D.def.f.s	le
boucle	N.C.f.s	boucle
une	D.ind.f.s	un
ou	C.C	ou
plusieurs	D.ind.f.p	plusieurs
valeurs	N.C.f.p	valeur
sans	P	sans
pour	P	pour
autant	ADV.-	autant
mettre	VW	mettre
fin	N.C.f.s	fin
à	P	à
celle	PRO.dem.f.s	celui
-ci	ADV.-	-ci
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
expression	N.C.f.s	expression
est	V.P.3.s	être
"	PONCT.W	"
continue	A.qual.f.s	continu
;	PONCT.W	;
"	PONCT.W	"
(	PONCT.W	(
cette	D.dem.f.s	ce
instruction	N.C.f.s	instruction
se	CL.refl.3.f.s	se
place	V.P.3.s	placer
dans	P	dans
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
!	PONCT.S	!

)	PONCT.W	)
,	PONCT.W	,
on	CL.suj.3.m.s	on
l'	CL.obj.3.m.s	le
associe	V.P.3.s	associer
généralement	ADV.-	généralement
à	P	à
une	D.ind.f.s	un
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
,	PONCT.W	,
sinon	C.C	sinon
les	D.def.f.p	le
lignes	N.C.f.p	ligne
situées	VK.f.p	situer
entre	P	entre
cette	D.dem.f.s	ce
instruction	N.C.f.s	instruction
et	C.C	et
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
boucle	N.C.f.s	boucle
seraient	V.C.3.p	être
obsolètes	A.qual.f.p	obsolète
.	PONCT.S	.

Exemple	N.C.m.s	exemple
:	PONCT.W	:
Imaginons	V.Y.1.p	imaginer
que	C.S	que
l'	D.def.f.s	le
on	CL.suj.3.m.s	on
veuille	V.S.3.s	vouloir
imprimer	VW	imprimer
pour	P	pour
$x	N.C.m.s	cx
allant	VG	aller
de	P	de
1	D.card.m.s	@card@
à	P	à
10	PRO.card.m.p	@card@
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
1/($x-7)	N.C.m.s	<unknown>
...	PONCT.W	<unknown>
il	CL.suj.3.m.s	il
est	V.P.3.s	être
évident	A.qual.m.s	évident
que	C.S	que
pour	P	pour
$x=7	N.P.m.s	<unknown>
il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
aura	V.F.3.s	avoir
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
.	PONCT.S	.

Heureusement	ADV.-	heureusement
,	PONCT.W	,
grâce	N.C.f.s	grâce
à	P	à
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
continue	V.P.3.s	continuer
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.f.s	possible
de	P	de
traiter	VW	traiter
cette	D.dem.f.s	ce
valeur	N.C.f.s	valeur
à	P	à
part	N.C.f.s	part
puis	C.C	pui
de	P	de
continuer	VW	continuer
la	D.def.f.s	le
boucle	N.C.f.s	boucle
!	PONCT.S	!

$x=1	N.C.m.s	<unknown>
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
$x<=10	N.C.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
if	N.C.m.s	if
(	PONCT.W	(
$x	N.C.m.s	cx
==	V.P.3.s	cevoir
7	A.card.m.s	@card@
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
Division	N.C.f.s	division
par	P	par
zéro	N.C.m.s	zéro
!	PONCT.S	!

"	PONCT.W	"
;	PONCT.W	;
continue	V.P.3.s	continuer
;	PONCT.W	;
}	N.C.m.s	}
$a	N.P.x.s	<unknown>
=	PONCT.W	=
1/($x-7)	D.card.m.p	@card@
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
$a<br>	ET	çaëbrà
"	PONCT.W	"
;	PONCT.W	;
$x++	N.P.m.s	<unknown>
;	PONCT.W	;
}	C.S	}
Il	CL.suj.3.m.s	il
y	CL.obj.3.m.s	y
avait	V.I.3.s	avoir
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
dans	P	dans
ce	D.dem.m.s	ce
programme	N.C.m.s	programme
...	PONCT.S	<unknown>
peut-être	ADV.-	peut-être
ne	ADV.neg	ne
l'	CL.obj.3.m.s	le
avez	V.P.2.p	avoir
-vous	CL.suj.2.m.p	vous
pas	ADV.neg	pas
vue	VK.f.s	voir
:	PONCT.W	:
Lorsque	C.S	lorsque
$x	N.C.m.s	cx
est	V.P.3.s	être
égal	A.qual.m.s	égal
à	P	à
7	N.card.m.s	@card@
,	PONCT.W	,
le	D.def.m.s	le
compteur	N.C.m.s	compteur
ne	ADV.neg	ne
s'	CL.refl.3.m.s	se
incrémente	V.P.3.s	incrémenter
plus	ADV.neg	plus
,	PONCT.W	,
il	CL.suj.3.m.s	il
reste	V.P.3.s	rester
constamment	ADV.-	constamment
à	P	à
la	D.def.f.s	le
valeur	N.C.f.s	valeur
7	A.card.f.s	@card@
,	PONCT.W	,
il	CL.suj.3.m.s	il
aurait	V.C.3.s	avoir
fallu	VK.m.s	falloir
écrire	VW	écrire
:	PONCT.W	:
$x=1	N.C.m.s	<unknown>
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
$x<=10	N.C.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
if	N.C.m.s	if
(	PONCT.W	(
$x	N.C.m.s	cx
==	V.P.3.s	cevoir
7	A.card.m.s	@card@
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
division	N.C.f.s	division
par	P	par
0	N.card.m.s	@card@
"	PONCT.W	"
;	PONCT.W	;
$x++	N.P.x.s	<unknown>
;	PONCT.W	;
continue	V.P.3.s	continuer
;	PONCT.W	;
}	ET	}
$a	N.P.x.s	<unknown>
=	PONCT.W	=
1/($x-7)	D.card.m.p	@card@
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
$a<br>	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$x++	N.P.m.s	<unknown>
;	PONCT.W	;
}	D.card.m.s	}
Arrêt	N.C.m.s	arrêt
inconditionnel	A.qual.m.s	inconditionnel
A	P	à
l'	D.def.m.s	le
inverse	N.C.m.s	inverse
,	PONCT.W	,
il	CL.suj.3.m.s	il
peut	V.P.3.s	pouvoir
être	VW	être
voulu	VK.m.s	vouloir
d'	P	de
arrêter	VW	arrêter
prématurément	ADV.-	prématurément
la	D.def.f.s	le
boucle	N.C.f.s	boucle
,	PONCT.W	,
pour	P	pour
une	D.ind.f.s	un
autre	A.ind.f.s	autre
condition	N.C.f.s	condition
que	C.S	que
celle	PRO.dem.f.s	celui
précisé	VK.m.s	préciser
dans	P	dans
l'	D.def.m.s	le
en-tète	N.C.f.s	en-tète
de	P	de
la	D.def.f.s	le
boucle	N.C.f.s	boucle
.	PONCT.S	.

L'	D.def.f.s	le
instruction	N.C.f.s	instruction
break	A.qual.f.s	break
permet	V.P.3.s	permettre
d'	P	de
arrêter	VW	arrêter
une	D.ind.f.s	un
boucle	N.C.f.s	boucle
(	PONCT.W	(
for	N.C.m.s	for
ou	C.C	ou
bien	ADV.-	bien
while	N.C.m.s	while
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
,	PONCT.W	,
tout	ADV.-	tout
comme	P	comme
continue	V.P.3.s	continuer
,	PONCT.W	,
de	P	de
l'	CL.obj.3.m.s	le
associer	VW	associer
à	P	à
une	D.ind.f.s	un
structure	N.C.f.s	structure
conditionnelle	A.qual.f.s	conditionnel
,	PONCT.W	,
sans	P	sans
laquelle	PRO.rel.f.s	lequel
la	D.def.f.s	le
boucle	N.C.f.s	boucle
ne	ADV.neg	ne
ferait	V.C.3.s	faire
jamais	ADV.neg	jamais
plus	ADV.-	plus
d'	P	de
un	D.ind.m.s	un
tour	N.C.m.s	tour
!	PONCT.S	!

Dans	P	dans
l'	D.def.m.s	le
exemple	N.C.m.s	exemple
de	P	de
tout	PRO.ind.m.s	tout
à	P	à
l'	D.def.f.s	le
heure	N.C.f.s	heure
,	PONCT.W	,
par	P	par
exemple	N.C.m.s	exemple
si	C.S	si
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
ne	ADV.neg	ne
savait	V.I.3.s	savoir
pas	ADV.neg	pas
à	P	à
quel	D.excl.m.s	quel
moment	N.C.m.s	moment
le	D.def.m.s	le
dénominateur	N.C.m.s	dénominateur
(	PONCT.W	(
$x-7	N.C.m.s	<unknown>
)	PONCT.W	)
s'	CL.refl.3.m.s	se
annule	V.P.3.s	annuler
(	PONCT.W	(
bon	A.qual.m.s	bon
...	PONCT.W	<unknown>
OK	N.P.m.s	Ok
...	PONCT.W	<unknown>
pour	P	pour
des	D.ind.f.p	du
équations	N.C.f.p	équation
plus	ADV.-	plus
compliquées	A.qual.f.p	compliqué
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
il	CL.suj.3.m.s	il
serait	V.C.3.s	être
possible	A.qual.m.s	possible
de	P	de
faire	VW	faire
arrêter	VW	arrêter
la	D.def.f.s	le
boucle	N.C.f.s	boucle
en	P	en
cas	N.C.m.s	cas
d'	P	de
annulation	N.C.f.s	annulation
du	P+D.def.m.s	du
dénominateur	N.C.m.s	dénominateur
,	PONCT.W	,
pour	P	pour
éviter	VW	éviter
une	D.ind.f.s	un
division	N.C.f.s	division
par	P	par
zéro	N.C.m.s	zéro
!	PONCT.S	!

for	N.C.m.s	for
(	PONCT.W	(
$x=1	N.C.m.s	<unknown>
;	PONCT.W	;
$x<=10	N.C.m.s	<unknown>
;	PONCT.W	;
$x++	N.P.x.s	<unknown>
)	PONCT.W	)
{	P	à
$a	N.P.x.s	<unknown>
=	PONCT.W	=
$x-7	N.C.m.s	<unknown>
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
$a	N.P.x.s	<unknown>
==	V.P.3.s	cevoir
0	PRO.card.m.s	@card@
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
division	N.C.f.s	division
par	P	par
0	N.card.m.s	@card@
"	PONCT.W	"
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
}	ET	}
echo	ET	echo
"	PONCT.W	"
1/$a<br>	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	D.card.m.s	}
Arrêt	N.C.m.s	arrêt
d'	P	de
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
script	N.C.m.s	script
PHP	N.P.m.s	Php
autorise	V.P.3.s	autoriser
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
de	P	de
la	D.def.f.s	le
commande	N.C.f.s	commande
exit	V.P.3.s	exir
,	PONCT.W	,
qui	PRO.rel.f.s	qui
permet	V.P.3.s	permettre
d'	P	de
interrompre	VW	interrompre
totalement	ADV.-	totalement
l'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
du	P+D.def.m.s	du
script	N.C.m.s	script
,	PONCT.W	,
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
signifie	V.P.3.s	signifier
que	C.S	que
le	D.def.m.s	le
serveur	N.C.m.s	serveur
n'	ADV.neg	ne
envoie	V.P.3.s	envoyer
plus	ADV.neg	plus
d'	D.ind.f.p	de
informations	N.C.f.p	information
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
:	PONCT.W	:
le	D.def.m.s	le
script	N.C.m.s	script
est	V.P.3.s	être
figé	VK.m.s	figer
dans	P	dans
son	D.poss.m.s	son
état	N.C.m.s	état
actuel	A.qual.m.s	actuel
.	PONCT.S	.

cette	D.dem.f.s	ce
instruction	N.C.f.s	instruction
est	V.P.3.s	être
particulièrement	ADV.-	particulièrement
utile	A.qual.f.s	utile
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
apparition	N.C.f.s	apparition
d'	P	de
erreur	N.C.f.s	erreur
La	D.def.f.s	le
notion	N.C.f.s	notion
de	P	de
fonction	N.C.f.s	fonction
On	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
fonction	N.C.f.s	fonction
un	D.ind.m.s	un
sous-programme	N.C.m.s	sous-programme
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
d'	P	de
effectuer	VW	effectuer
un	D.ind.m.s	un
ensemble	N.C.m.s	ensemble
d'	P	de
instructions	N.C.f.p	instruction
par	P	par
simple	A.qual.m.s	simple
appel	N.C.m.s	appel
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
dans	P	dans
le	D.def.m.s	le
corps	N.C.m.s	corps
du	P+D.def.m.s	du
programme	N.C.m.s	programme
principal	A.qual.m.s	principal
.	PONCT.S	.

Les	D.def.f.p	le
fonctions	N.C.f.p	fonction
permettent	V.P.3.p	permettre
d'	P	de
exécuter	VW	exécuter
dans	P	dans
plusieurs	D.ind.f.p	plusieurs
parties	N.C.f.p	partie
du	P+D.def.m.s	du
programme	N.C.m.s	programme
une	D.ind.f.s	un
série	N.C.f.s	série
d'	P	de
instructions	N.C.f.p	instruction
,	PONCT.W	,
cela	PRO.dem.m.s	cela
permet	V.P.3.s	permettre
une	D.ind.f.s	un
simplicité	N.C.f.s	simplicité
du	P+D.def.m.s	du
code	N.C.m.s	code
et	C.C	et
donc	ADV.-	donc
une	D.ind.f.s	un
taille	N.C.f.s	taille
de	P	de
programme	N.C.m.s	programme
minimale	A.qual.f.s	minimal
.	PONCT.S	.

D'	P	de
autre	A.ind.f.s	autre
part	N.C.f.s	part
,	PONCT.W	,
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
peut	V.P.3.s	pouvoir
faire	VW	faire
appel	N.C.m.s	appel
à	P	à
elle-même	PRO.refl.f.s	elle-même
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
fonction	N.C.f.s	fonction
récursive	A.qual.f.s	récursif
(	PONCT.W	(
il	CL.suj.3.m.s	il
ne	ADV.neg	ne
faut	V.P.3.s	falloir
pas	ADV.neg	pas
oublier	VW	oublier
de	P	de
mettre	VW	mettre
une	D.ind.f.s	un
condition	N.C.f.s	condition
de	P	de
sortie	N.C.f.s	sortie
au	P+D.def.m.s	au
risque	N.C.m.s	risque
sinon	C.C	sinon
de	P	de
ne	ADV.neg	ne
pas	ADV.neg	pas
pouvoir	VW	pouvoir
arrêter	VW	arrêter
le	D.def.m.s	le
programme	N.C.m.s	programme
...	PONCT.W	<unknown>
)	PONCT.W	)
.	PONCT.S	.

La	D.def.f.s	le
déclaration	N.C.f.s	déclaration
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
PHP	N.P.m.s	Php
recèle	V.P.3.s	recéler
de	D.ind.f.p	de
nombreuses	A.qual.f.p	nombreux
fonctions	N.C.f.p	fonction
intégrées	VK.f.p	intégrer
permettant	VG	permettre
d'	P	de
effectuer	VW	effectuer
des	D.ind.f.p	du
actions	N.C.f.p	action
courantes	A.qual.f.p	courant
.	PONCT.S	.

Toutefois	ADV.-	toutefois
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
définir	VW	définir
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
,	PONCT.W	,
dites	VK.f.p	dire
fonctions	N.C.f.p	fonction
utilisateurs	A.qual.f.p	utilisateur
afin	ADV.-	afin
de	P	de
simplifier	VW	simplifier
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
séries	N.C.f.p	série
d'	P	de
instructions	N.C.f.p	instruction
répétitives	A.qual.f.p	répétitif
.	PONCT.S	.

Contrairement	ADV.-	contrairement
à	P	à
de	D.ind.m.p	de
nombreux	A.qual.m.p	nombreux
autres	A.ind.m.p	autre
langages	N.C.m.p	langage
,	PONCT.W	,
PHP	N.P.m.s	Php
nécessite	V.P.3.s	nécessiter
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
définisse	V.S.3.s	définir
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
avant	P	avant
que	C.S	que
celle	PRO.dem.f.s	celui
-ci	ADV.-	-ci
puisse	V.S.3.s	pouvoir
être	VW	être
utilisée	VK.f.s	utiliser
,	PONCT.W	,
car	C.C	car
pour	P	pour
l'	CL.obj.3.m.s	le
appeler	VW	appeler
dans	P	dans
le	D.def.m.s	le
corps	N.C.m.s	corps
du	P+D.def.m.s	du
programme	N.C.m.s	programme
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
que	C.S	que
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
la	D.def.f.s	le
connaisse	N.C.f.s	connaisse
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qu'	C.S	que
il	CL.suj.3.m.s	il
connaisse	V.S.3.s	connaître
son	D.poss.m.s	son
nom	N.C.m.s	nom
,	PONCT.W	,
ses	D.poss.m.p	son
arguments	N.C.m.p	argument
et	C.C	et
les	D.def.f.p	le
instructions	N.C.f.p	instruction
qu'	PRO.rel.f.p	que
elle	CL.suj.3.f.s	elle
contient	V.P.3.s	contenir
.	PONCT.S	.

La	D.def.f.s	le
définition	N.C.f.s	définition
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
"	PONCT.W	"
déclaration	N.C.f.s	déclaration
"	PONCT.W	"
et	C.C	et
peut	V.P.3.s	pouvoir
se	CL.refl.3.f.s	se
faire	VW	faire
n'	ADV.neg	ne
importe	V.P.3.s	importer
où	PRO.rel.f.s	où
dans	P	dans
le	D.def.m.s	le
code	N.C.m.s	code
.	PONCT.S	.

La	D.def.f.s	le
déclaration	N.C.f.s	déclaration
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
se	CL.refl.3.f.s	se
fait	V.P.3.s	faire
grâce	N.C.f.s	grâce
au	P+D.def.m.s	au
mot-clé	N.C.m.s	mot-clé
function	N.C.f.s	function
,	PONCT.W	,
selon	P	selon
la	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
suivante	A.qual.f.s	suivant
:	PONCT.W	:
function	N.C.f.s	function
Nom_De_La_Fonction(argument1	N.P.m.s	<unknown>
,	PONCT.W	,
argument2	N.C.m.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
{	P	à
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
}	A.qual.f.p	}
Remarques	N.C.f.p	remarque
:	PONCT.W	:
•	P	à
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
suit	V.P.3.s	suivre
les	D.def.f.p	le
mêmes	A.ind.f.p	même
règles	N.C.f.p	règle
que	C.S	que
les	D.def.m.p	le
noms	N.C.m.p	nom
de	P	de
variables	N.C.f.p	variable
:	PONCT.W	:
o	CL.suj.3.m.s	o
le	D.def.m.s	le
nom	N.C.m.s	nom
doit	V.P.3.s	devoir
commencer	VW	commencer
par	P	par
une	D.ind.f.s	un
lettre	N.C.f.s	lettre
o	PONCT.W	o
un	D.ind.m.s	un
nom	N.C.m.s	nom
de	P	de
fonction	N.C.f.s	fonction
peut	V.P.3.s	pouvoir
comporter	VW	comporter
des	D.ind.f.p	du
lettres	N.C.f.p	lettre
,	PONCT.W	,
des	P+D.def.m.p	du
chiffres	N.C.m.p	chiffre
et	C.C	et
les	D.def.m.p	le
caractères	N.C.m.p	caractère
_	N.C.m.p	_
et	C.C	et
&	PRO.rel.m.p	&
(	PONCT.W	(
les	D.def.m.p	le
espaces	N.C.m.p	espace
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
autorisés	VK.m.p	autoriser
!	PONCT.S	!

)	PONCT.W	)
o	PONCT.W	o
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
,	PONCT.W	,
comme	P	comme
celui	PRO.dem.m.s	celui
des	P+D.def.f.p	du
variables	N.C.f.p	variable
est	V.P.3.s	être
sensible	A.qual.m.s	sensible
à	P	à
la	D.def.f.s	le
casse	N.C.f.s	casse
(	PONCT.W	(
différenciation	N.C.f.s	différenciation
entre	P	entre
les	D.def.m.p	le
minuscules	N.C.m.p	minuscule
et	C.C	et
majuscules	N.C.m.p	majuscule
)	PONCT.W	)
•	P	à
Les	D.def.m.p	le
arguments	N.C.m.p	argument
sont	V.P.3.p	être
facultatifs	A.qual.m.p	facultatif
,	PONCT.W	,
mais	C.C	mais
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
pas	ADV.neg	pas
d'	D.ind.m.p	de
arguments	N.C.m.p	argument
,	PONCT.W	,
les	D.def.f.p	le
parenthèses	N.C.f.p	parenthèse
doivent	V.P.3.p	devoir
rester	VW	rester
présentes	A.qual.f.p	présent
•	P	à
Il	CL.suj.3.m.s	il
ne	ADV.neg	ne
faut	V.P.3.s	falloir
pas	ADV.neg	pas
oublier	VW	oublier
de	P	de
refermer	VW	refermer
les	D.def.f.p	le
accolades	N.C.f.p	accolade
•	P	à
Le	D.def.m.s	le
nombre	N.C.m.s	nombre
d'	P	de
accolades	N.C.f.p	accolade
ouvertes	A.qual.f.p	ouvert
(	PONCT.W	(
fonction	N.C.f.s	fonction
,	PONCT.W	,
boucles	N.C.m.p	boucle
et	C.C	et
autres	A.ind.f.p	autre
structures	N.C.f.p	structure
)	PONCT.W	)
doit	V.P.3.s	devoir
être	VW	être
égal	A.qual.m.s	égal
au	P+D.def.m.s	au
nombre	N.C.m.s	nombre
d'	P	de
accolades	N.C.f.p	accolade
fermées	A.qual.f.p	fermé
!	PONCT.S	!

•	P	à
La	D.def.f.s	le
même	A.ind.f.s	même
chose	N.C.f.s	chose
s'	CL.refl.3.f.s	se
applique	V.P.3.s	appliquer
pour	P	pour
les	D.def.f.p	le
parenthèses	N.C.f.p	parenthèse
,	PONCT.W	,
les	D.def.m.p	le
crochets	N.C.m.p	crochet
ou	C.C	ou
les	D.def.m.p	le
guillemets	N.C.m.p	guillemet
!	PONCT.S	!

Une	D.ind.f.s	un
fois	N.C.f.s	foi
cette	D.dem.f.s	ce
étape	N.C.f.s	étape
franchie	VK.f.s	franchir
,	PONCT.W	,
votre	D.poss.f.s	votre
fonction	N.C.f.s	fonction
ne	ADV.neg	ne
s'	CL.refl.3.f.s	se
exécutera	V.F.3.s	exécuter
pas	ADV.neg	pas
tant	ADV.-	tant
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
ne	ADV.neg	ne
fait	V.P.3.s	faire
pas	ADV.neg	pas
appel	N.C.m.s	appel
à	P	à
elle	PPRO.3.f.s	elle
quelque	D.ind.f.s	quelque
part	N.C.f.s	part
dans	P	dans
la	D.def.f.s	le
page	N.C.f.s	page
!	PONCT.S	!

Appel	N.C.m.s	appel
de	P	de
fonction	N.C.f.s	fonction
Pour	P	pour
exécuter	VW	exécuter
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
faire	VW	faire
appel	N.C.m.s	appel
à	P	à
elle	PPRO.3.f.s	elle
en	P	en
écrivant	VG	écrire
son	D.poss.m.s	son
nom	N.C.m.s	nom
(	PONCT.W	(
une	D.ind.f.s	un
fois	N.C.f.s	foi
de	P	de
plus	ADV.-	plus
en	P	en
respectant	VG	respecter
la	D.def.f.s	le
casse	N.C.f.s	casse
)	PONCT.W	)
suivie	VK.f.s	suivre
d'	P	de
une	D.ind.f.s	un
parenthèse	N.C.f.s	parenthèse
ouverte	A.qual.f.s	ouvert
(	PONCT.W	(
éventuellement	ADV.-	éventuellement
des	P+D.def.m.p	du
arguments	N.C.m.p	argument
)	PONCT.W	)
puis	C.C	pui
d'	P	de
une	D.ind.f.s	un
parenthèse	N.C.f.s	parenthèse
fermée	A.qual.f.s	fermé
:	PONCT.W	:
Nom_De_La_Fonction()	N.P.m.s	<unknown>
;	PONCT.W	;
Remarques	N.C.f.p	remarque
:	PONCT.W	:
•	P	à
le	D.def.m.s	le
point	N.C.m.s	point
virgule	A.qual.m.s	virgule
signifie	V.P.3.s	signifier
la	D.def.f.s	le
fin	N.C.f.s	fin
d'	P	de
une	D.ind.f.s	un
instruction	N.C.f.s	instruction
et	C.C	et
permet	V.P.3.s	permettre
à	P	à
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
de	P	de
distinguer	VW	distinguer
les	D.def.m.p	le
différents	A.qual.m.p	différent
blocs	N.C.m.p	bloc
d'	P	de
instructions	N.C.f.p	instruction
•	P	à
si	C.S	si
jamais	ADV.neg	jamais
vous	CL.suj.2.m.p	vous
avez	V.P.2.p	avoir
défini	VK.m.s	définir
des	D.ind.m.p	du
arguments	N.C.m.p	argument
dans	P	dans
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
,	PONCT.W	,
il	CL.suj.3.m.s	il
faudra	V.F.3.s	falloir
veiller	VW	veiller
à	P	à
les	CL.obj.3.m.p	le
inclure	VW	inclure
lors	ADV.-	lors
de	P	de
l'	D.def.m.s	le
appel	N.C.m.s	appel
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
(	PONCT.W	(
le	D.def.m.s	le
même	A.qual.m.s	même
nombre	N.C.m.s	nombre
d'	P	de
arguments	N.C.m.p	argument
séparés	VK.m.p	séparer
par	P	par
des	D.ind.f.p	du
virgules	N.C.f.p	virgule
!	PONCT.S	!

)	PONCT.W	)
Nom_De_La_Fonction(argument1	N.P.m.s	<unknown>
,	PONCT.W	,
argument2	N.C.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Renvoi	N.P.m.s	Renvoi
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
par	P	par
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
La	D.def.f.s	le
fonction	N.C.f.s	fonction
peut	V.P.3.s	pouvoir
renvoyer	VW	renvoyer
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
(	PONCT.W	(
et	C.C	et
donc	ADV.-	donc
se	CL.refl.3.f.s	se
terminer	VW	terminer
)	PONCT.W	)
grâce	N.C.f.s	grâce
au	P+D.def.m.s	au
mot-clé	N.C.m.s	mot-clé
return	A.qual.m.s	return
.	PONCT.S	.

Lorsque	C.S	lorsque
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
return	N.C.m.s	return
est	V.P.3.s	être
rencontrée	VK.f.s	rencontrer
,	PONCT.W	,
la	D.def.f.s	le
fonction	N.C.f.s	fonction
évalue	V.P.3.s	évaluer
la	D.def.f.s	le
valeur	N.C.f.s	valeur
qui	PRO.rel.f.s	qui
la	CL.obj.3.f.s	la
suit	V.P.3.s	suivre
,	PONCT.W	,
puis	C.C	pui
la	D.def.f.s	le
renvoie	N.C.f.s	renvoie
au	P+D.def.m.s	au
programme	N.C.m.s	programme
appelant	A.qual.m.s	appelant
(	PONCT.W	(
programme	N.C.m.s	programme
à	P	à
partir	VW	partir
duquel	PRO.rel.m.s	duquel
la	D.def.f.s	le
fonction	N.C.f.s	fonction
a	V.P.3.s	avoir
été	VK.m.s	être
appelée	VK.f.s	appeler
)	PONCT.W	)
.	PONCT.S	.

Une	D.ind.f.s	un
fonction	N.C.f.s	fonction
peut	V.P.3.s	pouvoir
contenir	VW	contenir
plusieurs	D.ind.f.p	plusieurs
instructions	N.C.f.p	instruction
return	A.qual.m.s	return
,	PONCT.W	,
ce	CL.suj.3.m.s	ce
sera	V.F.3.s	être
toutefois	ADV.-	toutefois
la	D.def.f.s	le
première	A.ord.f.s	premier
instruction	N.C.f.s	instruction
return	N.C.m.s	return
rencontrée	VK.f.s	rencontrer
qui	PRO.rel.f.s	qui
provoquera	V.F.3.s	provoquer
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
et	C.C	et
le	D.def.m.s	le
renvoi	N.C.m.s	renvoi
de	P	de
la	D.def.f.s	le
valeur	N.C.f.s	valeur
qui	PRO.rel.f.s	qui
la	CL.obj.3.f.s	la
suit	V.P.3.s	suivre
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
return	N.C.m.s	return
est	V.P.3.s	être
simple	A.qual.f.s	simple
:	PONCT.W	:
return	N.C.m.s	return
valeur_ou_variable	A.qual.f.s	valeurçouçvariable
;	PONCT.W	;
Les	D.def.m.p	le
arguments	N.C.m.p	argument
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.f.s	possible
de	P	de
passer	VW	passer
des	D.ind.m.p	du
arguments	N.C.m.p	argument
à	P	à
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
lui	CL.obj.3.m.s	lui
fournir	VW	fournir
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
ou	C.C	ou
le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
une	D.ind.f.s	un
variable	A.qual.f.s	variable
afin	N.C.f.s	afin
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
puisse	V.S.3.s	pouvoir
effectuer	VW	effectuer
des	D.ind.f.p	du
opérations	N.C.f.p	opération
sur	P	sur
ces	D.dem.m.p	ce
arguments	N.C.m.p	argument
ou	C.C	ou
bien	ADV.-	bien
grâce	N.C.f.s	grâce
à	P	à
ces	D.dem.m.p	ce
arguments	N.C.m.p	argument
.	PONCT.S	.

Le	D.def.m.s	le
passage	N.C.m.s	passage
d'	P	de
arguments	N.C.m.p	argument
à	P	à
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
se	CL.refl.3.m.s	se
fait	V.P.3.s	faire
au	P+D.def.m.s	au
moyen	N.C.m.s	moyen
d'	P	de
une	D.ind.f.s	un
liste	N.C.f.s	liste
d'	P	de
arguments	N.C.m.p	argument
(	PONCT.W	(
séparés	VK.m.p	séparer
par	P	par
des	D.ind.f.p	du
virgules	N.C.f.p	virgule
)	PONCT.W	)
entre	P	entre
parenthèses	N.C.f.p	parenthèse
suivant	P	suivant
immédiatement	ADV.-	immédiatement
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
.	PONCT.S	.

Les	D.def.m.p	le
arguments	N.C.m.p	argument
peuvent	V.P.3.p	pouvoir
être	VW	être
de	P	de
simple	A.qual.f.s	simple
variables	N.C.f.p	variable
,	PONCT.W	,
mais	C.C	mais
aussi	ADV.-	aussi
des	D.ind.m.p	du
tableaux	N.C.m.p	tableau
ou	C.C	ou
des	P+D.def.m.p	du
objets	N.C.m.p	objet
.	PONCT.S	.

A	P	à
noter	VW	noter
qu'	C.S	que
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
donner	VW	donner
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
à	P	à
ces	D.dem.m.p	ce
arguments	N.C.m.p	argument
en	P	en
faisant	VG	faire
suivre	VW	suivre
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
par	P	par
le	D.def.m.s	le
signe	N.C.m.s	signe
"	PONCT.W	"
=	V.P.3.s	être
"	PONCT.W	"
puis	C.C	pui
la	D.def.f.s	le
valeur	N.C.f.s	valeur
que	PRO.rel.f.s	que
l'	CL.obj.3.f.s	la
on	CL.suj.3.m.s	on
affecte	V.P.3.s	affecter
par	P	par
défaut	N.C.m.s	défaut
à	P	à
la	D.def.f.s	le
variable	N.C.f.s	variable
.	PONCT.S	.

Lorsque	C.S	lorsque
vous	CL.suj.2.m.p	vous
voulez	V.P.2.p	vouloir
utiliser	VW	utiliser
un	D.ind.m.s	un
argument	N.C.m.s	argument
dans	P	dans
le	D.def.m.s	le
corps	N.C.m.s	corps
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
en	P	en
tant	ADV.-	tant
que	C.S	que
variable	A.qual.m.s	variable
,	PONCT.W	,
celui	PRO.dem.m.s	celui
-ci	CL.suj.3.m.s	ci
doit	V.P.3.s	devoir
être	VW	être
précédé	VK.m.s	précéder
par	P	par
le	D.def.m.s	le
signe	N.C.m.s	signe
$	N.C.m.s	$
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
dire_texte($qui	N.C.m.s	direëtexteçqui
,	PONCT.W	,
$texte	N.C.m.s	<unknown>
=	PONCT.W	=
'	PONCT.W	'
Bonjour	N.P.m.s	Bonjour
'	PONCT.W	'
)	PONCT.W	)
{	P	à
if(empty($qui)){	N.C.m.p	ifçemptyëçquçç
//	PONCT.W	@card@
$qui	N.P.f.s	<unknown>
est	V.P.3.s	être
vide	A.qual.m.s	vide
,	PONCT.W	,
on	CL.suj.3.m.s	on
retourne	V.P.3.s	retourner
faux	A.qual.m.s	faux
return	N.C.m.s	return
false	A.qual.f.s	fals
;	PONCT.W	;
}else{	ET	<unknown>
echo	ET	echo
"	PONCT.W	"
$texte	N.C.m.s	<unknown>
$qui	A.qual.m.s	qui
"	PONCT.W	"
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
affiche	V.P.3.s	afficher
le	D.def.m.s	le
texte	N.C.m.s	texte
return	A.qual.m.s	return
true	A.qual.m.s	tru
;	PONCT.W	;
//	PONCT.W	@card@
fonction	N.C.f.s	fonction
exécutée	VK.f.s	exécuter
avec	P	avec
succès	N.C.m.s	succès
}	P	à
}	N.C.m.s	}
?	PONCT.S	?

>	P	à
Ainsi	ADV.-	ainsi
cette	D.dem.f.s	ce
fonction	N.C.f.s	fonction
peut	V.P.3.s	pouvoir
être	VW	être
appelée	VK.f.s	appeler
de	P	de
deux	D.card.f.p	deux
façons	N.C.f.p	façon
différentes	A.qual.f.p	différent
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

//	PONCT.W	@card@
Passage	N.C.m.s	passage
des	P+D.def.m.p	du
deux	A.card.m.p	deux
paramètres	N.C.m.p	paramètre
dire_texte("cher	ET	direëtexteçcher
phpeur	N.C.f.s	phpeur
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
cher	A.qual.m.s	cher
phpeur	N.C.f.s	phpeur
"	PONCT.W	"
//	PONCT.W	@card@
Utilisation	N.C.f.s	utilisation
de	P	de
la	D.def.f.s	le
valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
du	P+D.def.m.s	du
deuxième	A.ord.m.s	deuxième
paramètre	N.C.m.s	paramètre
dire_texte("cher	A.ind.m.s	direëtexteçcher
phpeur	N.C.f.s	phpeur
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
cher	A.qual.m.s	cher
phpeur	N.C.f.s	phpeur
"	PONCT.W	"
?	PONCT.S	?

>	P	à
Travailler	VW	travailler
sur	P	sur
des	D.ind.f.p	du
variables	N.C.f.p	variable
dans	P	dans
les	D.def.f.p	le
fonctions	N.C.f.p	fonction
Lorsque	C.S	lorsque
vous	CL.suj.2.m.p	vous
manipulerez	V.P.2.p	manipulerer
des	D.ind.f.p	du
variables	N.C.f.p	variable
dans	P	dans
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
,	PONCT.W	,
il	CL.suj.3.m.s	il
vous	CL.obj.2.m.p	vous
arrivera	V.F.3.s	arriver
de	P	de
constater	VW	constater
que	C.S	que
vous	CL.suj.2.m.p	vous
avez	V.P.2.p	avoir
beau	ADV.-	beau
modifier	VW	modifier
la	D.def.f.s	le
variable	N.C.f.s	variable
dans	P	dans
la	D.def.f.s	le
fonction	N.C.f.s	fonction
celle	PRO.dem.f.s	celui
-ci	CL.suj.3.m.s	ci
retrouve	V.P.3.s	retrouver
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
d'	P	de
origine	N.C.f.s	origine
dès	P	dès
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
sort	V.P.3.s	sortir
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
...	PONCT.W	<unknown>
Cela	PRO.dem.m.s	cela
est	V.P.3.s	être
du	P+D.def.m.s	du
à	P	à
la	D.def.f.s	le
portée	N.C.f.s	portée
des	P+D.def.f.p	du
variables	N.C.f.p	variable
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
si	C.S	si
elles	CL.suj.3.f.p	elle
ont	V.P.3.p	avoir
été	VK.m.s	être
définies	VK.f.p	définir
comme	P	comme
variables	N.C.f.p	variable
globales	A.qual.f.p	global
ou	C.C	ou
locales	A.qual.f.p	local
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
plusieurs	D.ind.m.p	plusieurs
niveaux	N.C.m.p	niveau
de	P	de
définition	N.C.f.s	définition
de	P	de
variables	N.C.f.p	variable
:	PONCT.W	:
•	P	à
Une	D.ind.f.s	un
variable	N.C.f.s	variable
précédée	VK.f.s	précéder
du	P+D.def.m.s	du
mot	N.C.m.s	mot
clé	N.C.f.s	clé
global	A.qual.m.s	global
sera	V.F.3.s	être
visible	A.qual.m.s	visible
dans	P	dans
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
du	P+D.def.m.s	du
code	N.C.m.s	code
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
sa	D.poss.f.s	son
portée	N.C.f.s	portée
ne	ADV.neg	ne
sera	V.F.3.s	être
pas	ADV.neg	pas
limitée	VK.f.s	limiter
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
seulement	ADV.-	seulement
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
toutes	A.ind.f.p	tout
les	D.def.f.p	le
fonctions	N.C.f.p	fonction
pourront	V.F.3.p	pouvoir
utiliser	VW	utiliser
et	C.C	et
modifier	VW	modifier
cette	D.dem.f.s	ce
même	A.qual.f.s	même
variable	N.C.f.s	variable
•	P	à
Le	D.def.m.s	le
niveau	N.C.m.s	niveau
static	A.qual.m.s	static
permet	V.P.3.s	permettre
de	P	de
définir	VW	définir
une	D.ind.f.s	un
variable	N.C.f.s	variable
locale	A.qual.f.s	local
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
,	PONCT.W	,
qui	PRO.rel.f.s	qui
persiste	V.P.3.s	persister
durant	P	durant
tout	A.ind.m.s	tout
le	D.def.m.s	le
temps	N.C.m.s	temps
d'	P	de
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
script	N.C.m.s	script
•	N.C.m.s	•
Par	P	par
défaut	N.C.m.s	défaut
,	PONCT.W	,
la	D.def.f.s	le
variable	N.C.f.s	variable
possède	V.P.3.s	posséder
le	D.def.m.s	le
niveau	N.C.m.s	niveau
local	A.qual.m.s	local
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
la	D.def.f.s	le
variable	N.C.f.s	variable
ne	ADV.neg	ne
sera	V.F.3.s	être
modifiée	VK.f.s	modifier
qu'	ADV.neg	qu'
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
et	C.C	et
retrouvera	V.F.3.s	retrouver
la	D.def.f.s	le
valeur	N.C.f.s	valeur
qu'	PRO.rel.f.s	que
elle	CL.suj.3.f.s	elle
avait	V.I.3.s	avoir
juste	ADV.-	juste
avant	P	avant
l'	D.def.m.s	le
appel	N.C.m.s	appel
de	P	de
fonction	N.C.f.s	fonction
à	P	à
la	D.def.f.s	le
sortie	N.C.f.s	sortie
de	P	de
celle	PRO.dem.f.s	celui
-ci	ADV.-	-ci
<	N.C.m.s	<
?	PONCT.S	?

$chaine	A.qual.f.s	çchain
=	PONCT.W	=
"	PONCT.W	"
Nombre	N.C.m.s	nombre
de	P	de
camions	N.C.m.p	camion
:	PONCT.W	:
"	PONCT.W	"
;	PONCT.W	;
function	N.C.f.s	function
ajoute_camion($mode='')	N.C.m.s	ajouteëcamionçmode''
{	N.C.m.s	{
global	A.qual.m.s	global
$chaine	A.qual.m.s	cchain
;	PONCT.W	;
static	N.C.m.s	static
$nb=0	N.P.m.s	<unknown>
;	PONCT.W	;
$nb++	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
incrémente	V.P.3.s	incrémenter
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
camions	N.C.m.p	camion
if($mode	N.C.m.s	ifçmode
==	PONCT.W	<unknown>
"	PONCT.W	"
affiche"){	N.C.m.s	afficheëë
echo	ET	echo
$chaine.$nb	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
affiche	V.P.3.s	afficher
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
camions	N.C.m.p	camion
}	P	à
}	N.C.m.s	}
ajoute_camion()	N.C.m.s	ajoute-camionçë
;	PONCT.W	;
//	PONCT.W	@card@
nb	ET	<unknown>
==	V.P.3.s	cevoir
ajoute_camion()	N.P.x.s	Ajouteëcamionçë
;	PONCT.W	;
//	PONCT.W	@card@
nb	ET	<unknown>
==	V.P.3.s	cevoir
ajoute_camion()	N.P.x.s	Ajouteëcamionçë
;	PONCT.W	;
//	PONCT.W	@card@
nb	N.C.m.s	<unknown>
==	V.P.3.s	cevoir
ajoute_camion("affiche")	VK.m.s	ajoute-camionçaffir
;	PONCT.W	;
?	PONCT.S	?

>	N.C.m.s	>
1	D.card.m.s	@card@
2	A.card.m.s	@card@
3	A.card.m.s	@card@
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
Nombre	N.C.m.s	nombre
de	P	de
camions	N.C.m.p	camion
:	PONCT.W	:
4	D.card.m.p	@card@
Passage	N.C.m.s	passage
de	P	de
paramètre	N.C.m.s	paramètre
par	P	par
référence	N.C.f.s	référence
Une	D.ind.f.s	un
autre	A.ind.f.s	autre
méthode	N.C.f.s	méthode
pour	P	pour
modifier	VW	modifier
une	D.ind.f.s	un
variable	N.C.f.s	variable
consiste	A.qual.f.s	consiste
à	P	à
la	CL.obj.3.f.s	la
faire	VW	faire
précéder	VW	précéder
du	P+D.def.m.s	du
caractère	N.C.m.s	caractère
&	PONCT.W	&
,	PONCT.W	,
précisant	VG	préciser
qu'	C.S	que
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
alors	ADV.-	alors
d'	P	de
un	D.ind.m.s	un
alias	N.C.m.s	alias
:	PONCT.W	:
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
est	V.P.3.s	être
modifiée	VK.f.s	modifier
à	P	à
la	D.def.f.s	le
sortie	N.C.f.s	sortie
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
.	PONCT.S	.

On	CL.suj.3.m.s	on
parle	V.P.3.s	parler
alors	ADV.-	alors
de	P	de
passage	N.C.m.s	passage
par	P	par
référence	N.C.f.s	référence
.	PONCT.S	.

Dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
on	CL.suj.3.m.s	on
passe	V.P.3.s	passer
la	D.def.f.s	le
référence	N.C.f.s	référence
(	PONCT.W	(
adresse	N.C.f.s	adresse
mémoire	A.qual.f.s	mémoire
)	PONCT.W	)
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
,	PONCT.W	,
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
permet	V.P.3.s	permettre
de	P	de
modifier	VW	modifier
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
dire_texte($qui	N.C.m.s	direëtexteçqui
,	PONCT.W	,
&$texte	N.C.m.s	çätexte
)	PONCT.W	)
{	N.C.m.s	{
$texte	N.C.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
$qui	N.C.m.s	cqui
"	PONCT.W	"
;	PONCT.W	;
}	P	à
$chaine	N.P.f.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
Bonjour	N.P.m.s	Bonjour
"	PONCT.W	"
;	PONCT.W	;
dire_texte("cher	N.C.m.s	direëtexteçcher
phpeur",$chaine	N.C.m.s	phpeurçdçchaine
)	PONCT.W	)
;	PONCT.W	;
echo	ET	echo
$chaine	N.P.f.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
"	PONCT.W	"
Bienvenue	N.P.f.s	Bienvenue
cher	A.qual.m.s	cher
phpeur	N.C.f.s	phpeur
"	PONCT.W	"
?	PONCT.S	?

>	P	à
Retourner	VW	retourner
plusieurs	D.ind.f.p	plusieurs
variables	N.C.f.p	variable
Lorsque	C.S	lorsque
vous	CL.suj.2.m.p	vous
souhaitez	V.P.2.p	souhaiter
qu'	C.S	que
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
retourne	V.P.3.s	retourner
plusieurs	D.ind.f.p	plusieurs
valeurs	N.C.f.p	valeur
,	PONCT.W	,
le	D.def.m.s	le
plus	ADV.-	plus
simple	A.qual.m.s	simple
est	V.P.3.s	être
d'	P	de
utiliser	VW	utiliser
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
nom_fonction()	N.C.f.s	nomäfonctionçë
{	N.C.m.s	{
...	PONCT.W	<unknown>
.	PONCT.S	.
.	PONCT.S	.
return	N.C.m.s	return
array(	ET	arrayç
$variable1	N.P.m.s	<unknown>
,	PONCT.W	,
$variable2	N.P.m.s	<unknown>
,	PONCT.W	,
$variable3	N.P.f.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
retourne	V.P.3.s	retourner
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
voulues	VK.f.p	vouloir
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
}	P	à
$retour	N.P.m.s	<unknown>
=	PONCT.W	=
nom_fonction()	N.C.m.s	nomäfonctionçë
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
$retour[0	N.P.m.s	<unknown>
]	PONCT.W	]
-	PONCT.W	-
$retour[1	N.P.f.s	<unknown>
]	PONCT.W	]
-	PONCT.W	-
$retour[2	N.C.f.s	<unknown>
]	PONCT.W	]
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
La	D.def.f.s	le
récursivité	N.C.f.s	récursivité
Les	D.def.f.p	le
fonctions	N.C.f.p	fonction
récursives	A.qual.f.p	récursif
sont	V.P.3.p	être
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
qui	PRO.rel.f.p	qui
s'	CL.refl.3.f.p	se
appellent	V.P.3.p	appeler
elles-mêmes	PRO.refl.f.p	elle-même
.	PONCT.S	.

Ce	D.dem.m.s	ce
type	N.C.m.s	type
de	P	de
fonction	N.C.f.s	fonction
se	CL.refl.3.m.s	se
révéle	V.P.3.s	révéler
indispensable	A.qual.m.s	indispensable
pour	P	pour
parcourir	VW	parcourir
une	D.ind.f.s	un
arborescence	N.C.f.s	arborescence
par	P	par
exemple	N.C.m.s	exemple
.	PONCT.S	.

Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
exemple	N.C.m.s	exemple
simple	A.qual.m.s	simple
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
fonction_recursive($n=0)	N.C.m.s	<unknown>
{	P	à
$n++	N.C.m.s	çnu
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
$n	P	àn
<br>	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
if($n	N.C.m.s	ifçän
<	P	à
10){	PRO.card.m.p	10ë
//	PONCT.W	@card@
si	C.S	si
n	CL.suj.3.m.s	n
est	V.P.3.s	être
inférieur	A.qual.m.s	inférieur
à	P	à
10	N.card.m.s	@card@
on	CL.suj.3.m.s	on
continue	V.P.3.s	continuer
fonction_recursive($n)	N.C.f.s	fonctionçrecursivenç
;	PONCT.W	;
}	N.C.m.s	}
}	P+D.def.m.s	c
fonction_recursive()	N.C.m.s	fonction-recursiveç
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
les	D.def.m.p	le
nb	N.C.m.p	<unknown>
de	P	de
1	D.card.m.s	@card@
à	P	à
10	PRO.card.m.p	@card@
?	PONCT.S	?

>	P	à
La	D.def.f.s	le
notion	N.C.f.s	notion
de	P	de
classe	N.C.f.s	classe
Php3	N.P.m.s	<unknown>
intègre	V.P.3.s	intégrer
un	D.ind.m.s	un
soupçon	N.C.m.s	soupçon
de	P	de
caractéristiques	N.C.f.p	caractéristique
empruntées	VK.f.p	emprunter
aux	P+D.def.m.p	au
langages	N.C.m.p	langage
orientés	VK.m.p	orienter
objet	N.C.m.s	objet
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
la	D.def.f.s	le
possibilité	N.C.f.s	possibilité
d'	P	de
utiliser	VW	utiliser
des	D.ind.m.p	du
objets	N.C.m.p	objet
,	PONCT.W	,
entités	N.C.f.p	entité
regroupant	VG	regrouper
des	D.ind.f.p	du
données	N.C.f.p	donnée
et	C.C	et
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
au	P+D.def.m.s	au
sein	N.C.m.s	sein
d'	P	de
une	D.ind.f.s	un
structure	N.C.f.s	structure
et	C.C	et
rendant	VG	rendre
la	D.def.f.s	le
programmation	N.C.f.s	programmation
plus	ADV.-	plus
simple	A.qual.f.s	simple
qu'	C.S	que
en	P	en
programmation	N.C.f.s	programmation
habituelle	A.qual.f.s	habituel
(	PONCT.W	(
appelée	A.qual.f.s	appelé
programmation	N.C.f.s	programmation
procédurale	A.qual.f.s	procédural
par	P	par
opposition	N.C.f.s	opposition
à	P	à
la	D.def.f.s	le
programmation	N.C.f.s	programmation
orientée	VK.f.s	orienter
objet	N.C.m.s	objet
)	PONCT.W	)
.	PONCT.S	.

On	CL.suj.3.m.s	on
appelle	V.P.3.s	appeler
classe	V.P.3.s	classer
la	D.def.f.s	le
structure	N.C.f.s	structure
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
de	P	de
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
des	P+D.def.f.p	du
entités	N.C.f.p	entité
qui	PRO.rel.f.p	qui
composeront	V.F.3.p	composer
un	D.ind.m.s	un
objet	N.C.m.s	objet
.	PONCT.S	.

Un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
donc	ADV.-	donc
"	PONCT.W	"
issu	VK.m.s	<unknown>
"	PONCT.W	"
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
le	D.def.m.s	le
produit	N.C.m.s	produit
qui	PRO.rel.m.s	qui
sort	V.P.3.s	sortir
d'	P	de
un	D.ind.m.s	un
moule	N.C.m.s	moule
.	PONCT.S	.

En	P	en
réalité	N.C.f.s	réalité
on	CL.suj.3.m.s	on
dit	V.P.3.s	dire
qu'	C.S	que
un	D.ind.m.s	un
objet	N.C.m.s	objet
est	V.P.3.s	être
une	D.ind.f.s	un
instanciation	N.C.f.s	instanciation
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
raison	N.C.f.s	raison
pour	P	pour
laquelle	PRO.rel.f.s	lequel
on	CL.suj.3.m.s	on
pourra	V.F.3.s	pouvoir
parler	VW	parler
indifféremment	ADV.-	indifféremment
d'	P	de
objet	N.C.m.s	objet
ou	C.C	ou
d'	P	de
instance	N.C.f.s	instance
(	PONCT.W	(
éventuellement	ADV.-	éventuellement
d'	P	de
occurrence	N.C.f.s	occurrence
)	PONCT.W	)
.	PONCT.S	.

Une	D.ind.f.s	un
classe	N.C.f.s	classe
est	V.P.3.s	être
composée	VK.f.s	composer
de	P	de
deux	D.card.f.p	deux
parties	N.C.f.p	partie
:	PONCT.W	:
•	P	à
Les	D.def.m.p	le
attributs	N.C.m.p	attribut
(	PONCT.W	(
parfois	ADV.-	parfois
appelés	VK.m.p	appeler
données	VK.f.p	donner
membres	N.C.m.p	membre
)	PONCT.W	)
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
des	P+D.def.f.p	du
données	N.C.f.p	donnée
représentant	VG	représenter
l'	D.def.m.s	le
état	N.C.m.s	état
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
•	N.C.m.s	•
Les	D.def.f.p	le
méthodes	N.C.f.p	méthode
(	PONCT.W	(
parfois	ADV.-	parfois
appelées	VK.f.p	appeler
fonctions	N.C.f.p	fonction
membres	A.qual.f.p	membre
)	PONCT.W	)
:	PONCT.W	:
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
des	P+D.def.f.p	du
opérations	N.C.f.p	opération
applicables	A.qual.f.p	applicable
aux	P+D.def.m.p	au
objets	N.C.m.p	objet
déclaration	N.C.f.s	déclaration
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
Pour	P	pour
pouvoir	VW	pouvoir
manipuler	VW	manipuler
des	P+D.def.m.p	du
objets	N.C.m.p	objet
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
essentiel	A.qual.m.s	essentiel
de	P	de
définir	VW	définir
des	D.ind.f.p	du
classes	N.C.f.p	classe
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
définir	VW	définir
la	D.def.f.s	le
structure	N.C.f.s	structure
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
.	PONCT.S	.

Avec	P	avec
Php	N.P.m.s	Php
,	PONCT.W	,
cette	D.dem.f.s	ce
définition	N.C.f.s	définition
se	CL.refl.3.f.s	se
fait	V.P.3.s	faire
de	P	de
la	D.def.f.s	le
manière	N.C.f.s	manière
suivante	A.qual.f.s	suivant
:	PONCT.W	:
class	N.C.m.p	class
Nom_de_la_classe	N.P.m.s	Nomädeëclasse
{	N.P.m.s	{
//	PONCT.W	@card@
Déclarations	N.C.f.p	déclaration
des	P+D.def.f.p	du
données	N.C.f.p	donnée
membres	N.C.m.p	membre
var	P	var
$Donnee_Membre_1	N.P.x.s	<unknown>
;	PONCT.W	;
var	P	var
$Donnee_Membre_2	N.P.x.s	<unknown>
;	PONCT.W	;
var	P	var
$	N.C.m.s	$
...	PONCT.W	<unknown>
//	PONCT.W	@card@
Déclarations	N.C.f.p	déclaration
des	P+D.def.f.p	du
méthodes	N.C.f.p	méthode
function	N.C.f.s	function
Nom_de_la_fonction_membre1(parametres)	N.P.m.s	Nomädeëlanctionçmemetremetre
{	P+D.def.m.s	c
liste	N.C.f.s	liste
d'	P	de
instructions	N.C.f.p	instruction
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
Nom_de_la_classe	N.P.m.s	Nomädeëclasse
représente	V.P.3.s	représenter
bien	ADV.-	bien
évidemment	ADV.-	évidemment
le	D.def.m.s	le
type	N.C.m.s	type
d'	P	de
objet	N.C.m.s	objet
désigné	VK.m.s	désigner
par	P	par
la	D.def.f.s	le
classe	N.C.f.s	classe
ou	C.C	ou
du	P	du
moins	ADV.-	moins
le	D.def.m.s	le
nom	N.C.m.s	nom
que	PRO.rel.m.s	que
vous	CL.suj.2.m.p	vous
leur	CL.obj.3.m.p	lui
attribuez	V.P.2.p	attribuer
.	PONCT.S	.

Contrairement	ADV.-	contrairement
aux	P+D.def.m.p	au
langages	N.C.m.p	langage
orientés	VK.m.p	orienter
objet	N.C.m.s	objet
comme	P	comme
le	D.def.m.s	le
C++	N.P.m.s	Can
,	PONCT.W	,
Php	N.P.x.s	Php
n'	ADV.neg	ne
inclut	V.P.3.s	inclure
pas	ADV.neg	pas
dans	P	dans
sa	D.poss.f.s	son
version	N.C.f.s	version
3	D.card.m.p	@card@
de	P	de
niveaux	N.C.m.p	niveau
de	P	de
visibilité	N.C.f.s	visibilité
des	P+D.def.m.p	du
éléments	N.C.m.p	élément
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
,	PONCT.W	,
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
y	CL.obj.3.m.s	y
a	V.P.3.s	avoir
donc	ADV.-	donc
pas	ADV.neg	pas
de	D.ind.m.s	de
concept	N.C.m.s	concept
d'	P	de
encapsulation	N.C.f.s	encapsulation
,	PONCT.W	,
un	PRO.ind.m.s	un
des	P+D.def.m.p	du
concepts	N.C.m.p	concept
majeurs	A.qual.m.p	majeur
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
orientée	VK.f.s	orienter
objet	N.C.m.s	objet
.	PONCT.S	.

Contrairement	ADV.-	contrairement
à	P	à
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
de	P	de
classes	N.C.f.p	classe
en	P	en
C++	N.P.f.s	Can
,	PONCT.W	,
la	D.def.f.s	le
déclaration	N.C.f.s	déclaration
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
ne	ADV.neg	ne
se	CL.refl.3.f.s	se
finit	V.P.3.s	finir
pas	ADV.neg	pas
par	P	par
un	D.ind.m.s	un
point-virgule	N.C.m.s	point-virgule
!	PONCT.S	!

Instanciation	N.C.f.s	instanciation
de	P	de
la	D.def.f.s	le
classe	N.C.f.s	classe
Après	P	après
avoir	VW	avoir
déclaré	VK.m.s	déclarer
une	D.ind.f.s	un
classe	N.C.f.s	classe
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
instancier	A.qual.m.s	instancier
des	P+D.def.m.p	du
objets	N.C.m.p	objet
pour	P	pour
pouvoir	VW	pouvoir
l'	CL.obj.3.m.s	le
exploiter	VW	exploiter
.	PONCT.S	.

Cette	D.dem.f.s	ce
opération	N.C.f.s	opération
se	CL.refl.3.f.s	se
fait	V.P.3.s	faire
à	P	à
l'	D.def.f.s	le
aide	N.C.f.s	aide
du	P+D.def.m.s	du
mot	N.C.m.s	mot
clé	N.C.f.s	clé
new	ET	new
permettant	VG	permettre
de	P	de
faire	VW	faire
des	D.ind.m.p	du
objets	N.C.m.p	objet
découlant	VG	découler
d'	P	de
une	D.ind.f.s	un
classe	N.C.f.s	classe
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
du	P+D.def.m.s	du
mot	N.C.m.s	mot
clé	N.C.f.s	clé
new	ET	new
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
$Nom_de_l_objet	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
Nom_de_la_classe	N.P.x.s	Nomädeëclasse
;	PONCT.W	;
A	P	à
partir	VW	partir
du	P+D.def.m.s	du
moment	N.C.m.s	moment
où	PRO.rel.m.s	où
l'	D.def.m.s	le
objet	N.C.m.s	objet
est	V.P.3.s	être
instancié	VK.m.s	instancier
,	PONCT.W	,
il	CL.suj.3.m.s	il
possède	V.P.3.s	posséder
des	D.ind.f.p	du
propriétés	N.C.f.p	propriété
qui	PRO.rel.f.p	qui
lui	CL.obj.3.m.s	lui
sont	V.P.3.p	être
propres	A.qual.f.p	propre
,	PONCT.W	,
cela	PRO.dem.m.s	cela
signifie	V.P.3.s	signifier
que	C.S	que
si	C.S	si
vous	CL.suj.2.m.p	vous
instanciez	V.P.2.p	instancier
un	D.ind.m.s	un
nouvel	A.qual.m.s	nouveau
objet	N.C.m.s	objet
,	PONCT.W	,
la	D.def.f.s	le
modification	N.C.f.s	modification
des	P+D.def.f.p	du
propriétés	N.C.f.p	propriété
de	P	de
l'	D.def.m.s	le
un	D.ind.m.s	un
n'	ADV.neg	ne
influera	V.F.3.s	influer
aucunement	ADV.-	aucunement
sur	P	sur
celles	PRO.dem.f.p	celui
de	P	de
l'	D.def.m.s	le
autre	PRO.ind.m.s	autre
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
spéciale	A.qual.f.s	spécial
(	PONCT.W	(
portant	VG	porter
le	D.def.m.s	le
même	A.ind.m.s	même
nom	N.C.m.s	nom
que	C.S	que
la	D.def.f.s	le
classe	N.C.f.s	classe
)	PONCT.W	)
s'	CL.refl.3.m.s	se
exécutant	VG	exécuter
automatiquement	ADV.-	automatiquement
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
instanciation	N.C.f.s	instanciation
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
.	PONCT.S	.

Cette	D.dem.f.s	ce
méthode	N.C.f.s	méthode
,	PONCT.W	,
appelée	VK.f.s	appeler
constructeur	N.C.m.s	constructeur
est	V.P.3.s	être
très	ADV.-	très
utile	A.qual.f.s	utile
pour	P	pour
initialiser	VW	initialiser
les	D.def.f.p	le
données	N.C.f.p	donnée
membres	N.C.m.p	membre
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
instanciation	N.C.f.s	instanciation
.	PONCT.S	.

Accéder	VW	accéder
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
L'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
se	CL.refl.3.m.s	se
fait	V.P.3.s	faire
grâce	N.C.f.s	grâce
au	P+D.def.m.s	au
nom	N.C.m.s	nom
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
,	PONCT.W	,
suivi	VK.m.s	suivre
d'	P	de
une	D.ind.f.s	un
flêche	N.C.f.s	flêche
(	PONCT.W	(
->	N.P.m.s	<unknown>
)	PONCT.W	)
représentée	VK.f.s	représenter
par	P	par
un	D.ind.m.s	un
moins	N.C.m.s	moin
(	PONCT.W	(
-	PONCT.W	-
)	PONCT.W	)
et	C.C	et
un	D.ind.m.s	un
signe	N.C.m.s	signe
supérieur	A.qual.m.s	supérieur
(	PONCT.W	(
>	N.C.m.s	>
)	PONCT.W	)
,	PONCT.W	,
puis	C.C	pui
du	P+D.def.m.s	du
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
membre	N.C.m.s	membre
(	PONCT.W	(
sans	P	sans
le	D.def.m.s	le
signe	N.C.m.s	signe
$	N.C.m.s	$
)	PONCT.W	)
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
$Nom_de_l_objet->Nom_de_la_donnee_membre	N.C.m.s	änomädeëlçobjet-ëembremendonnembre
=	P	à
Valeur	N.C.f.s	valeur
;	PONCT.W	;
Accéder	VW	accéder
aux	P+D.def.f.p	au
méthodes	N.C.f.p	méthode
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
L'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.f.p	au
méthodes	N.C.f.p	méthode
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
se	CL.refl.3.m.s	se
fait	V.P.3.s	faire
comme	P	comme
pour	P	pour
l'	D.def.m.s	le
accès	N.C.m.s	accès
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
par	P	par
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
,	PONCT.W	,
suivi	VK.m.s	suivre
d'	P	de
une	D.ind.f.s	un
flêche	N.C.f.s	flêche
et	C.C	et
du	P+D.def.m.s	du
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
.	PONCT.S	.

La	D.def.f.s	le
méthode	N.C.f.s	méthode
est	V.P.3.s	être
suivie	VK.f.s	suivre
de	P	de
parenthèses	N.C.f.p	parenthèse
,	PONCT.W	,
contenant	VG	contenir
les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
,	PONCT.W	,
si	C.S	si
il	CL.suj.3.m.s	il
y'en	CL.obj.3.m.s	y'en
a.	N.C.m.s	<unknown>
L'	D.def.m.s	le
accès	N.C.m.s	accès
à	P	à
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
se	CL.refl.3.f.s	se
fait	V.P.3.s	faire
donc	ADV.-	donc
de	P	de
la	D.def.f.s	le
façon	N.C.f.s	façon
suivante	A.qual.f.s	suivant
:	PONCT.W	:
$Nom_de_l_objet->Nom_de_la_fonction_membre(parametre1,parametre2	N.P.x.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
variable	N.C.f.s	variable
courante	A.qual.f.s	courant
$this	N.P.m.s	<unknown>
Le	D.def.m.s	le
mot	N.C.m.s	mot
clé	A.qual.m.s	clé
$this	N.P.m.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
désigner	VW	désigner
l'	D.def.m.s	le
objet	N.C.m.s	objet
dans	P	dans
lequel	PRO.rel.m.s	lequel
on	CL.suj.3.m.s	on
se	CL.refl.3.m.s	se
trouve	V.P.3.s	trouver
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
que	C.S	que
lorsque	C.S	lorsque
l'	CL.obj.3.m.s	le
on	CL.suj.3.m.s	on
désire	V.P.3.s	désirer
faire	VW	faire
référence	N.C.f.s	référence
dans	P	dans
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
membre	N.C.m.s	membre
à	P	à
l'	D.def.m.s	le
objet	N.C.m.s	objet
dans	P	dans
lequel	PRO.rel.m.s	lequel
elle	CL.suj.3.f.s	elle
se	CL.refl.3.f.s	se
trouve	V.P.3.s	trouver
,	PONCT.W	,
on	CL.suj.3.m.s	on
utilise	V.P.3.s	utiliser
this	VK.m.s	thir
.	PONCT.S	.

Grâce	N.P.f.s	Grâce
à	P	à
cette	D.dem.f.s	ce
variable	N.C.f.s	variable
spéciale	A.qual.f.s	spécial
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
dans	P	dans
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
membre	N.C.m.s	membre
de	P	de
faire	VW	faire
référence	N.C.f.s	référence
aux	P+D.def.f.p	au
propriétés	N.C.f.p	propriété
situées	VK.f.p	situer
dans	P	dans
le	D.def.m.s	le
même	A.qual.m.s	même
objet	N.C.m.s	objet
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
membre	N.C.m.s	membre
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
lorsque	C.S	lorsque
l'	CL.obj.3.m.s	le
on	CL.suj.3.m.s	on
désire	V.P.3.s	désirer
accéder	VW	accéder
à	P	à
une	D.ind.f.s	un
propriété	N.C.f.s	propriété
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
à	P	à
partir	VW	partir
d'	P	de
une	D.ind.f.s	un
méthode	N.C.f.s	méthode
du	P+D.def.m.s	du
même	A.qual.m.s	même
objet	N.C.m.s	objet
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
faire	VW	faire
précéder	VW	précéder
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
donnée	N.C.f.s	donnée
membre	N.C.m.s	membre
par	P	par
$this->	N.P.x.s	<unknown>
.	PONCT.S	.

Par	P	par
exemple	N.C.m.s	exemple
:	PONCT.W	:
class	ET	class
Toto{	N.P.m.s	Totoë
var	P	var
$age	N.P.m.s	<unknown>
;	PONCT.W	;
var	P	var
$sexe	N.P.m.s	<unknown>
;	PONCT.W	;
var	P	var
$adresse	N.C.f.s	çadresse
;	PONCT.W	;
function	N.C.f.s	function
DefineTotoAge($Age){	N.P.m.s	Definetotoageçeë
$this->age	N.P.x.s	<unknown>
=	PONCT.W	=
$Age	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
$toto_test	N.P.m.s	<unknown>
=	ET	=
new	ET	new
Toto	N.P.m.s	Toto
;	PONCT.W	;
$toto_test->DefineTotoAge(10)	N.C.m.s	<unknown>
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
L'	D.def.f.s	le
age	N.C.f.s	age
de	P	de
TOTO	N.P.m.s	Toto
:	PONCT.W	:
"	PONCT.W	"
.	PONCT.S	.

$toto_test->age	N.C.m.s	-totoëtest-çage
.	PONCT.S	.

"	PONCT.W	"
<br/>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Les	D.def.f.p	le
limitations	N.C.f.p	limitation
de	P	de
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
de	P	de
classes	N.C.f.p	classe
avec	P	avec
Php	N.P.m.s	Php
PHP	N.P.m.s	Php
,	PONCT.W	,
dans	P	dans
sa	D.poss.f.s	son
version	N.C.f.s	version
3	N.card.f.s	@card@
,	PONCT.W	,
reste	V.P.3.s	rester
assez	ADV.-	assez
limité	A.qual.m.s	limité
du	P+D.def.m.s	du
point	N.C.m.s	point
de	P	de
vue	N.C.f.s	vue
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
objet	N.C.m.s	objet
.	PONCT.S	.

La	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.m.p	du
aspects	N.C.m.p	aspect
marquants	A.qual.m.p	marquant
de	P	de
la	D.def.f.s	le
programmation	N.C.f.s	programmation
objet	N.C.m.s	objet
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
présents	A.qual.m.p	présent
dans	P	dans
le	D.def.m.s	le
langage	N.C.m.s	langage
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	P	à
l'	D.def.f.s	le
encapsulation	N.C.f.s	encapsulation
l'	D.def.m.s	le
héritage	N.C.m.s	héritage
le	D.def.m.s	le
polymorphisme	N.C.m.s	polymorphisme
Le	D.def.m.s	le
but	N.C.m.s	but
de	P	de
PHP	N.P.m.s	Php
est	V.P.3.s	être
de	P	de
permettre	VW	permettre
la	D.def.f.s	le
création	N.C.f.s	création
de	P	de
pages	N.C.f.p	page
web	N.C.m.s	web
dynamiques	A.qual.f.p	dynamique
,	PONCT.W	,
ainsi	ADV.-	ainsi
son	D.poss.m.s	son
but	N.C.m.s	but
premier	A.ord.m.s	premier
est	V.P.3.s	être
de	P	de
pouvoir	VW	pouvoir
envoyer	VW	envoyer
des	D.ind.f.p	du
données	N.C.f.p	donnée
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
.	PONCT.S	.

Les	D.def.f.p	le
trois	A.card.f.p	trois
fonctions	N.C.f.p	fonction
standards	A.qual.f.p	standard
PHP	N.P.m.s	Php
fournit	V.P.3.s	fournir
3	D.card.f.p	@card@
fonctions	N.C.f.p	fonction
permettant	VG	permettre
d'	P	de
envoyer	VW	envoyer
du	P+D.def.m.s	du
texte	N.C.m.s	texte
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
.	PONCT.S	.

Ces	D.dem.f.p	ce
fonctions	N.C.f.p	fonction
ont	V.P.3.p	avoir
la	D.def.f.s	le
particularité	N.C.f.s	particularité
de	P	de
pouvoir	VW	pouvoir
insérer	VW	insérer
dans	P	dans
les	D.def.f.p	le
données	N.C.f.p	donnée
envoyées	VK.f.p	envoyer
des	D.ind.f.p	du
valeurs	N.C.f.p	valeur
variables	A.qual.f.p	variable
,	PONCT.W	,
pouvant	VG	pouvoir
être	VW	être
fonction	N.C.f.s	fonction
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
récupérée	VK.f.s	récupérer
par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
c'	CL.suj.3.m.s	ce
est	V.P.3.s	être
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
rend	V.P.3.s	rendre
possible	A.qual.f.s	possible
la	D.def.f.s	le
création	N.C.f.s	création
de	P	de
pages	N.C.f.p	page
dynamiques	A.qual.f.p	dynamique
.	PONCT.S	.

Les	D.def.f.p	le
3	A.card.f.p	@card@
fonctions	N.C.f.p	fonction
sont	V.P.3.p	être
les	D.def.f.p	le
suivantes	A.qual.f.p	suivant
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
echo	ET	echo
print	V.J.3.s	prendre
printf	N.C.m.s	<unknown>
La	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	ET	echo
La	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	ET	echo
permet	V.P.3.s	permettre
d'	P	de
envoyer	VW	envoyer
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
(	PONCT.W	(
délimitée	VK.f.s	délimiter
par	P	par
des	D.ind.m.p	du
guillemets	N.C.m.p	guillemet
)	PONCT.W	)
qui	PRO.rel.f.s	qui
la	CL.obj.3.f.s	la
suit	V.P.3.s	suivre
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
fonction	N.C.f.s	fonction
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
echo	ET	echo
Expression	N.C.f.s	expression
;	PONCT.W	;
L'	D.def.f.s	le
expression	N.C.f.s	expression
peut	V.P.3.s	pouvoir
être	VW	être
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
ou	C.C	ou
une	D.ind.f.s	un
expression	N.C.f.s	expression
que	PRO.rel.f.s	que
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
évalue	V.P.3.s	évaluer
echo	ET	echo
"	PONCT.W	"
Chaine	N.P.f.s	Chaine
de	P	de
caracteres	N.C.m.p	caractere
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
(1+2)*87	N.C.m.s	<unknown>
;	PONCT.W	;
Ainsi	ADV.-	ainsi
,	PONCT.W	,
étant	VG	être
donné	VK.m.s	donner
que	C.S	que
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
est	V.P.3.s	être
délimitée	VK.f.s	délimiter
par	P	par
des	D.ind.m.p	du
guillemets	N.C.m.p	guillemet
,	PONCT.W	,
l'	D.def.f.s	le
insertion	N.C.f.s	insertion
de	P	de
guillemets	N.C.m.p	guillemet
doubles	A.qual.m.p	double
dans	P	dans
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
provoquerait	V.C.3.s	provoquer
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
la	D.def.f.s	le
raison	N.C.f.s	raison
pour	P	pour
laquelle	PRO.rel.f.s	lequel
les	D.def.m.p	le
guillemets	N.C.m.p	guillemet
doubles	A.qual.m.p	double
,	PONCT.W	,
ainsi	ADV.-	ainsi
que	C.S	que
tous	A.ind.m.p	tous
les	D.def.m.p	le
caractères	N.C.m.p	caractère
spéciaux	A.qual.m.p	spécial
,	PONCT.W	,
doivent	V.P.3.p	devoir
être	VW	être
précédés	VK.m.p	précéder
d'	P	de
un	D.ind.m.s	un
antislash	N.C.m.s	antislash
.	PONCT.S	.

Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
récapitulatif	N.C.m.s	récapitulatif
des	P+D.def.m.p	du
caractères	N.C.m.p	caractère
spéciaux	A.qual.m.p	spécial
nécessitant	VG	nécessiter
l'	D.def.m.s	le
ajout	N.C.m.s	ajout
d'	P	de
un	D.ind.m.s	un
antislash	N.C.m.s	antislash
:	PONCT.W	:
Caractère	N.P.m.s	Caractère
Description	N.C.f.s	description
<TD\"<	N.P.x.s	<unknown>
td><TDGUILLEMET<	A.qual.m.s	<unknown>
td>	N.C.m.p	<unknown>
<TD\$<	N.P.x.s	<unknown>
td><TDCARACT&EGRAVE	A.ind.m.s	<unknown>
;	PONCT.W	;
RE	N.C.m.s	re
td	ET	<unknown>
$<>	ET	
<TD\\<	N.P.x.s	<unknown>
td><	ET	tdë
inverse	A.qual.f.s	inverse
oblique>	A.qual.f.s	obliqueë
<TD\R<	N.P.x.s	<unknown>
td><>	ET	
<TD\N<	N.P.x.s	<unknown>
td><	V.J.3.s	<unknown>
la	D.def.f.s	le
à>	P	àà
<TD\T<	N.P.x.s	<unknown>
td><TDTABULATION<	N.P.x.s	<unknown>
td>	A.ind.m.s	<unknown>
Le	D.def.m.s	le
caractère	N.C.m.s	caractère
$	N.P.m.s	$
a	V.P.3.s	avoir
un	D.ind.m.s	un
rôle	N.C.m.s	rôle
particulier	A.qual.m.s	particulier
dans	P	dans
la	D.def.f.s	le
mesure	N.C.f.s	mesure
où	PRO.rel.f.s	où
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
le	CL.obj.3.m.s	le
comprend	V.P.3.s	comprendre
comme	P	comme
une	D.ind.f.s	un
variable	N.C.f.s	variable
,	PONCT.W	,
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
signifie	V.P.3.s	signifier
que	C.S	que
lorsque	C.S	lorsque
le	D.def.m.s	le
caractère	N.C.m.s	caractère
$	A.qual.m.s	$
est	V.P.3.s	être
rencontré	VK.m.s	rencontrer
dans	P	dans
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
qui	PRO.rel.f.s	qui
suit	V.P.3.s	suivre
la	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	A.qual.f.s	echo
,	PONCT.W	,
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
récupère	V.P.3.s	récupérer
le	D.def.m.s	le
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
qui	PRO.rel.m.s	qui
suit	V.P.3.s	suivre
le	D.def.m.s	le
caractère	N.C.m.s	caractère
$	A.qual.m.s	$
et	C.C	et
le	D.def.m.s	le
remplace	N.C.m.s	remplace
par	P	par
sa	D.poss.f.s	son
valeur	N.C.f.s	valeur
.	PONCT.S	.

Dans	P	dans
l'	D.def.m.s	le
exemple	N.C.m.s	exemple
suivant	A.qual.m.s	suivant
par	P	par
exemple	N.C.m.s	exemple
,	PONCT.W	,
on	CL.suj.3.m.s	on
assigne	V.P.3.s	assigner
la	D.def.f.s	le
date	N.C.f.s	date
actuelle	A.qual.f.s	actuel
à	P	à
une	D.ind.f.s	un
variable	A.qual.f.s	variable
appelée	VK.f.s	appeler
$MaDate	A.qual.f.s	<unknown>
,	PONCT.W	,
puis	C.C	pui
on	CL.suj.3.m.s	on
l'	CL.obj.3.f.s	la
affiche	V.P.3.s	afficher
sur	P	sur
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
:	PONCT.W	:
<HTML>	N.P.m.s	<unknown>
<HEAD>	N.P.x.s	<unknown>
<TITLE>Affichage	N.C.m.s	ctitleçaffichage
de	P	de
l'	D.def.f.s	le
heure</TITLE>	N.C.f.s	<unknown>
</HEAD>	N.P.x.s	<unknown>
<BODY>	N.P.f.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

//	PONCT.W	@card@
Récupération	N.C.f.s	récupération
de	P	de
la	D.def.f.s	le
date	N.C.f.s	date
//	PONCT.W	@card@
et	C.C	et
stockage	N.C.m.s	stockage
dans	P	dans
une	D.ind.f.s	un
variable	N.C.f.s	variable
$MaDate	N.P.f.s	Mmadate
=	PONCT.W	=
date("Y")	N.P.x.s	Dateëçyç
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Nous	CL.suj.1.m.p	nous
sommes	V.P.1.p	être
en	P	en
$MaDate	N.P.f.s	Mmadate
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</BODY>	N.P.x.s	<unknown>
</HTML>	N.P.x.s	<unknown>
La	D.def.f.s	le
fonction	N.C.f.s	fonction
print	V.J.3.s	prendre
La	D.def.f.s	le
fonction	N.C.f.s	fonction
print	V.J.3.s	prendre
est	V.P.3.s	être
similaire	A.qual.f.s	similaire
à	P	à
la	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	N.C.m.s	echo
à	P	à
la	D.def.f.s	le
différence	N.C.f.s	différence
près	ADV.-	près
que	C.S	que
l'	D.def.f.s	le
expression	N.C.f.s	expression
à	P	à
afficher	VW	afficher
est	V.P.3.s	être
entre	P	entre
parenthèses	N.C.f.p	parenthèse
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
print	V.J.3.s	prendre
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
print(expression)	N.C.f.s	print-expressionà
;	PONCT.W	;
L'	D.def.f.s	le
expression	N.C.f.s	expression
peut	V.P.3.s	pouvoir
,	PONCT.W	,
comme	C.S	comme
pour	P	pour
la	D.def.f.s	le
fonction	N.C.f.s	fonction
echo	ET	echo
être	VW	être
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
ou	C.C	ou
une	D.ind.f.s	un
expression	N.C.f.s	expression
que	PRO.rel.f.s	que
l'	D.def.f.s	le
interpréteur	N.C.m.s	interpréteur
évalue	V.P.3.s	évaluer
:	PONCT.W	:
print("Chaine	N.C.m.s	printçächaine
de	P	de
caracteres	N.C.m.p	caractere
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
print	A.qual.m.s	print
((1+2)*87)	N.C.m.s	<unknown>
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
printf	V.P.3.s	<unknown>
La	D.def.f.s	le
fonction	N.C.f.s	fonction
printf()	N.C.m.s	printfçë
(	PONCT.W	(
empruntée	VK.f.s	emprunter
au	P+D.def.m.s	au
langage	N.C.m.s	langage
C	PONCT.W	C
)	PONCT.W	)
est	V.P.3.s	être
rarement	ADV.-	rarement
utilisée	VK.f.s	utiliser
car	C.C	car
sa	D.poss.f.s	son
syntaxe	N.C.f.s	syntaxe
est	V.P.3.s	être
plus	ADV.-	plus
lourde	A.qual.f.s	lourd
.	PONCT.S	.

Toutefois	ADV.-	toutefois
,	PONCT.W	,
contrairement	ADV.-	contrairement
aux	P+D.def.f.p	au
deux	A.card.f.p	deux
fonctions	N.C.f.p	fonction
précédentes	A.qual.f.p	précédent
,	PONCT.W	,
elle	CL.suj.3.f.s	elle
permet	V.P.3.s	permettre
un	D.ind.m.s	un
formatage	N.C.m.s	formatage
des	P+D.def.f.p	du
données	N.C.f.p	donnée
,	PONCT.W	,
cela	PRO.dem.m.s	cela
signifie	V.P.3.s	signifier
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
choisir	VW	choisir
le	D.def.m.s	le
format	N.C.m.s	format
dans	P	dans
lequel	PRO.rel.m.s	lequel
une	D.ind.f.s	un
variable	N.C.f.s	variable
sera	V.F.3.s	être
affichée	VK.f.s	afficher
à	P	à
l'	D.def.m.s	le
écran	N.C.m.s	écran
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
printf()	N.C.m.s	printfçë
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
printf	N.C.m.s	<unknown>
(	PONCT.W	(
chaîne	N.C.f.s	chaîne
formattée	VK.f.s	formatter
)	PONCT.W	)
;	PONCT.W	;
Une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
formattée	VK.f.s	formatter
est	V.P.3.s	être
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
contenant	VG	contenir
des	D.ind.m.p	du
codes	N.C.m.p	code
spéciaux	A.qual.m.p	spécial
permettant	VG	permettre
de	P	de
repérer	VW	repérer
l'	D.def.m.s	le
emplacement	N.C.m.s	emplacement
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
à	P	à
insérer	VW	insérer
et	C.C	et
son	D.poss.m.s	son
format	N.C.m.s	format
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
sa	D.poss.f.s	son
représentation	N.C.f.s	représentation
.	PONCT.S	.

A	P	à
chaque	D.ind.m.s	chaque
code	N.C.m.s	code
rencontré	VK.m.s	rencontrer
doit	V.P.3.s	devoir
être	VW	être
associé	VK.m.s	associer
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
ou	C.C	ou
une	D.ind.f.s	un
variable	N.C.f.s	variable
,	PONCT.W	,
que	C.S	que
l'	D.def.f.s	le
on	CL.suj.3.m.s	on
retrouve	V.P.3.s	retrouver
en	P	en
paramètre	N.C.m.s	paramètre
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
printf	A.qual.f.s	<unknown>
.	PONCT.S	.

Les	D.def.f.p	le
valeurs	N.C.f.p	valeur
à	P	à
insérer	VW	insérer
dans	P	dans
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
formattées	VK.f.p	formatter
sont	V.P.3.p	être
séparées	VK.f.p	séparer
par	P	par
des	D.ind.f.p	du
virgules	N.C.f.p	virgule
et	C.C	et
doivent	V.P.3.p	devoir
apparaître	VW	apparaître
dans	P	dans
l'	D.def.m.s	le
ordre	N.C.m.s	ordre
où	PRO.rel.m.s	où
les	D.def.m.p	le
codes	N.C.m.p	code
apparaissent	V.P.3.p	apparaître
dans	P	dans
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
formattée	VK.f.s	formatter
Les	D.def.m.p	le
codes	N.C.m.p	code
de	P	de
formatage	N.C.m.s	formatage
des	P+D.def.m.p	du
types	N.C.m.p	type
de	P	de
données	N.C.f.p	donnée
sont	V.P.3.p	être
les	D.def.m.p	le
suivants	N.C.m.p	suivant
:	PONCT.W	:
Code	N.P.m.s	Code
Type	N.C.m.s	type
de	P	de
format	N.C.m.s	format
%b	N.C.m.s	bb
Entier	A.qual.m.s	entier
en	P	en
notation	N.C.f.s	notation
binaire	A.qual.f.s	binaire
%c	N.C.m.s	cc
Caractère	N.P.m.s	Caractère
codé	VK.m.s	coder
par	P	par
son	D.poss.m.s	son
code	N.C.m.s	code
ASCII	N.P.m.s	Ascii
%d	N.C.m.s	<unknown>
Entier	A.qual.m.s	entier
en	P	en
notation	N.C.f.s	notation
décimale	A.qual.f.s	décimal
%e	ET	<unknown>
Type	N.C.m.s	type
double	A.qual.m.s	double
(	PONCT.W	(
nombre	N.C.m.s	nombre
à	P	à
virgule	N.C.f.s	virgule
)	PONCT.W	)
au	P+D.def.m.s	au
format	N.C.m.s	format
scientifique	A.qual.m.s	scientifique
(	PONCT.W	(
1.76e+3	N.C.f.s	<unknown>
)	PONCT.W	)
%f	N.C.m.p	ff
Type	N.C.m.s	type
double	A.qual.m.s	double
(	PONCT.W	(
nombre	N.C.m.s	nombre
à	P	à
virgule	N.C.f.s	virgule
)	PONCT.W	)
%o	N.C.m.s	ço
Entier	A.qual.m.s	entier
en	P	en
notation	N.C.f.s	notation
octale	A.qual.f.s	octal
%s	N.C.m.p	-s
Chaîne	N.P.f.s	Chaîne
de	P	de
caractères	N.C.m.p	caractère
%x	N.C.m.p	çx
Entier	A.qual.m.s	entier
en	P	en
notation	N.C.f.s	notation
hexadécimale	A.qual.f.s	hexadécimal
(	PONCT.W	(
lettres	N.C.f.p	lettre
en	P	en
minuscules	N.C.m.p	minuscule
)	PONCT.W	)
%X	N.C.m.p	cx
Entier	A.qual.m.s	entier
en	P	en
notation	N.C.f.s	notation
hexadécimale	A.qual.f.s	hexadécimal
(	PONCT.W	(
lettres	N.C.f.p	lettre
en	P	en
majuscules	N.C.m.p	majuscule
)	PONCT.W	)
%	N.C.m.s	%
%	N.C.m.s	%
Caractère	N.P.m.s	Caractère
%	N.C.m.s	%
Imaginons	V.Y.1.p	imaginer
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
définisse	V.S.3.s	définir
une	D.ind.f.s	un
variable	N.C.f.s	variable
en	P	en
virgule	N.C.f.s	virgule
flottante	A.qual.f.s	flottant
,	PONCT.W	,
afin	V.P.3.s	<unknown>
d'	P	de
obtenir	VW	obtenir
une	D.ind.f.s	un
précision	N.C.f.s	précision
de	P	de
calcul	N.C.m.s	calcul
plus	ADV.-	plus
grande	A.qual.f.s	grand
qu'	C.S	que
avec	P	avec
un	D.ind.m.s	un
entier	N.C.m.s	entier
,	PONCT.W	,
mais	C.C	mais
qu'	C.S	que
on	CL.suj.3.m.s	on
désire	V.P.3.s	désirer
l'	CL.obj.3.m.s	le
afficher	VW	afficher
en	P	en
tant	ADV.-	tant
qu'	C.S	que
entier	A.qual.m.s	entier
.	PONCT.S	.

Dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
la	D.def.f.s	le
fonction	N.C.f.s	fonction
printf	A.qual.f.s	<unknown>
prend	V.P.3.s	prendre
toute	A.ind.f.s	tout
son	D.poss.f.s	son
importance	N.C.f.s	importance
:	PONCT.W	:
$Pi	N.P.m.s	<unknown>
=	PONCT.W	=
3.1415927	PRO.card.m.p	@card@
;	PONCT.W	;
$R	N.P.x.s	<unknown>
=	PONCT.W	=
24.546	N.card.m.s	@card@
;	PONCT.W	;
$Perimetre	N.P.x.s	<unknown>
=	V.P.3.s	être
2	A.card.m.s	@card@
*	N.C.m.p	*
$Pi	N.C.m.s	ppi
*	N.C.m.s	*
$R	N.C.m.s	cr
;	PONCT.W	;
printf	N.C.m.s	<unknown>
(	PONCT.W	(
"	PONCT.W	"
Le	D.def.m.s	le
périmètre	N.C.m.s	périmètre
du	P+D.def.m.s	du
cercle	N.C.m.s	cercle
est	V.P.3.s	être
%d",$Perimetre	N.P.x.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
L'	D.def.f.s	le
importance	N.C.f.s	importance
de	P	de
l'	D.def.f.s	le
implantation	N.C.f.s	implantation
du	P+D.def.m.s	du
code	N.C.m.s	code
php	N.C.m.s	<unknown>
au	P+D.def.m.s	au
sein	N.C.m.s	sein
du	P+D.def.m.s	du
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
Le	D.def.m.s	le
code	N.C.m.s	code
PHP	N.P.m.s	Php
peut	V.P.3.s	pouvoir
être	VW	être
implanté	VK.m.s	implanter
au	P+D.def.m.s	au
sein	N.C.m.s	sein
du	P+D.def.m.s	du
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
.	PONCT.S	.

Cette	D.dem.f.s	ce
caractéristique	N.C.f.s	caractéristique
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
à	P	à
négliger	VW	négliger
car	C.C	car
le	D.def.m.s	le
fait	N.C.m.s	fait
d'	P	de
écrire	VW	écrire
uniquement	ADV.-	uniquement
du	P+D.def.m.s	du
code	N.C.m.s	code
PHP	N.P.m.s	Php
là	ADV.-	là
où	PRO.rel.m.s	où
il	CL.suj.3.m.s	il
est	V.P.3.s	être
nécessaire	A.qual.m.s	nécessaire
rend	V.P.3.s	rendre
la	D.def.f.s	le
programmation	N.C.f.s	programmation
plus	ADV.-	plus
simple	A.qual.f.s	simple
(	PONCT.W	(
il	CL.suj.3.m.s	il
est	V.P.3.s	être
plus	ADV.-	plus
simple	A.qual.m.s	simple
d'	P	de
écrire	VW	écrire
du	P+D.def.m.s	du
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
que	C.S	que
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
echo	ET	echo
ou	C.C	ou
print	A.qual.m.s	print
,	PONCT.W	,
dans	P	dans
lesquelles	PRO.rel.f.p	lequel
les	D.def.m.p	le
caractères	N.C.m.p	caractère
spéciaux	A.qual.m.p	spécial
doivent	V.P.3.p	devoir
être	VW	être
précédés	VK.m.p	précéder
d'	P	de
un	D.ind.m.s	un
antislash	N.C.m.s	antislash
sous	P	sous
peine	N.C.f.s	peine
de	P	de
voir	VW	voir
des	D.ind.f.p	du
erreurs	N.C.f.p	erreur
lors	ADV.-	lors
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
)	PONCT.W	)
.	PONCT.S	.

L'	D.def.m.s	le
exemple	N.C.m.s	exemple
le	D.def.m.s	le
plus	ADV.-	plus
simple	A.qual.m.s	simple
concerne	V.P.3.s	concerner
les	D.def.f.p	le
pages	N.C.f.p	page
dynamiques	A.qual.f.p	dynamique
dont	PRO.rel.f.p	dont
l'	D.def.f.s	le
en-tête	N.C.f.s	en-tête
est	V.P.3.s	être
toujours	ADV.-	toujours
le	D.def.m.s	le
même	A.qual.m.s	même
:	PONCT.W	:
dans	P	dans
ce	D.dem.m.s	ce
cas	N.C.m.s	cas
,	PONCT.W	,
le	D.def.m.s	le
code	N.C.m.s	code
PHP	N.P.m.s	Php
peut	V.P.3.s	pouvoir
ne	ADV.neg	ne
commencer	VW	commencer
qu'	ADV.neg	qu'
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
balise	N.C.f.s	balise
<BODY>	N.P.x.s	<unknown>
,	PONCT.W	,
au	P+D.def.m.s	au
moment	N.C.m.s	moment
où	PRO.rel.m.s	où
la	D.def.f.s	le
page	N.C.f.s	page
peut	V.P.3.s	pouvoir
s'	CL.refl.3.f.s	se
afficher	VW	afficher
différemment	ADV.-	différemment
selon	P	selon
une	D.ind.f.s	un
variable	N.C.f.s	variable
par	P	par
exemple	N.C.m.s	exemple
.	PONCT.S	.

Mieux	ADV.-	mieux
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
d'	P	de
écrire	VW	écrire
plusieurs	D.ind.f.p	plusieurs
portions	N.C.f.p	portion
de	P	de
script	N.C.m.s	script
en	P	en
PHP	N.P.m.s	Php
,	PONCT.W	,
séparées	VK.f.p	séparer
par	P	par
du	P+D.def.m.s	du
code	N.C.m.s	code
HTML	N.P.m.s	<unknown>
statique	A.qual.m.s	statique
car	C.C	car
les	D.def.f.p	le
variables/fonctions	N.C.f.p	variableséfonction
déclarées	VK.f.p	déclarer
dans	P	dans
une	D.ind.f.s	un
portion	N.C.f.s	portion
de	P	de
script	N.C.m.s	script
seront	V.F.3.p	être
accessibles	A.qual.f.p	accessible
dans	P	dans
les	D.def.f.p	le
portions	N.C.f.p	portion
de	P	de
scripts	N.C.m.p	script
inférieures	A.qual.f.p	inférieur
.	PONCT.S	.

Notion	N.C.f.s	notion
de	P	de
variable	N.C.f.s	variable
d'	P	de
environnement	N.C.m.s	environnement
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
sont	V.P.3.p	être
,	PONCT.W	,
comme	P	comme
leur	D.poss.m.s	leur
nom	N.C.m.s	nom
l'	CL.obj.3.m.s	le
indique	V.P.3.s	indiquer
,	PONCT.W	,
des	D.ind.f.p	du
données	N.C.f.p	donnée
stockées	VK.f.p	stocker
dans	P	dans
des	D.ind.f.p	du
variables	N.C.f.p	variable
permettant	VG	permettre
au	P+D.def.m.s	au
programme	N.C.m.s	programme
d'	P	de
avoir	VW	avoir
des	D.ind.f.p	du
informations	N.C.f.p	information
sur	P	sur
son	D.poss.m.s	son
environnement	N.C.m.s	environnement
.	PONCT.S	.

L'	D.def.m.s	le
environnement	N.C.m.s	environnement
,	PONCT.W	,
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
du	P+D.def.m.s	du
script	N.C.m.s	script
PHP	N.P.m.s	Php
est	V.P.3.s	être
:	PONCT.W	:
•	VK.m.s	être
•	P	à
Le	D.def.m.s	le
serveur	N.C.m.s	serveur
Le	D.def.m.s	le
client	N.C.m.s	client
Ces	D.dem.f.p	ce
variables	N.C.f.p	variable
sont	V.P.3.p	être
créées	VK.f.p	créer
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
à	P	à
chaque	D.ind.f.s	chaque
fois	N.C.f.s	foi
que	C.S	que
le	D.def.m.s	le
script	N.C.m.s	script
PHP	N.P.m.s	Php
est	V.P.3.s	être
appelé	VK.m.s	appeler
,	PONCT.W	,
le	D.def.m.s	le
serveur	N.C.m.s	serveur
les	CL.obj.3.f.p	la
lui	CL.obj.3.m.s	lui
fournit	V.P.3.s	fournir
en	P	en
paramètres	N.C.m.p	paramètre
cachés	VK.m.p	cacher
lors	A.qual.m.p	lors
de	P	de
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
de	P	de
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
.	PONCT.S	.

Elles	CL.suj.3.f.p	elle
permettent	V.P.3.p	permettre
notamment	ADV.-	notamment
d'	P	de
avoir	VW	avoir
des	D.ind.f.p	du
informations	N.C.f.p	information
sur	P	sur
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
serveur	N.C.m.s	serveur
,	PONCT.W	,
son	D.poss.m.s	son
administrateur	N.C.m.s	administrateur
,	PONCT.W	,
la	D.def.f.s	le
date	N.C.f.s	date
à	P	à
laquelle	PRO.rel.f.s	lequel
le	D.def.m.s	le
script	N.C.m.s	script
a	V.P.3.s	avoir
été	VK.m.s	être
appelé	VK.m.s	appeler
,	PONCT.W	,
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
IP	N.P.x.s	Ip
et	C.C	et
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
navigateur	N.C.m.s	navigateur
du	P+D.def.m.s	du
client	N.C.m.s	client
,	PONCT.W	,
...	PONCT.W	<unknown>
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
On	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
donc	ADV.-	donc
classer	VW	classer
les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
en	P	en
deux	D.card.f.p	deux
catégories	N.C.f.p	catégorie
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
dépendant	VG	dépendre
du	P+D.def.m.s	du
client	N.C.m.s	client
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
dépendant	VG	dépendre
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
dépendant	VG	dépendre
du	P+D.def.m.s	du
client	N.C.m.s	client
Variable	A.qual.m.s	variable
d'	P	de
environnement	N.C.m.s	environnement
Description	N.C.f.s	description
$AUTH_TYPE	V.P.3.s	çauthëtyper
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
d'	P	de
authentification	N.C.f.s	authentification
qui	PRO.rel.f.s	qui
a	V.P.3.s	avoir
été	VK.m.s	être
utilisée	VK.f.s	utiliser
par	P	par
le	D.def.m.s	le
client	N.C.m.s	client
pour	P	pour
accéder	VW	accéder
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.P.m.s	Php
$COMSPEC	N.P.x.s	<unknown>
Location	N.C.f.s	location
de	P	de
l'	D.def.m.s	le
interpréteur	N.C.m.s	interpréteur
de	P	de
commandes	N.C.f.p	commande
sur	P	sur
la	D.def.f.s	le
machine	N.C.f.s	machine
(	PONCT.W	(
Sous	P	sous
Windows	N.P.m.s	Windows
)	PONCT.W	)
$CONTENT_TYPE	N.C.f.s	ccontentytype
Type	N.C.m.s	type
de	P	de
données	N.C.f.p	donnée
contenu	VK.m.s	contenir
présent	A.qual.m.s	présent
dans	P	dans
le	D.def.m.s	le
corps	N.C.m.s	corps
de	P	de
la	D.def.f.s	le
requête	N.C.f.s	requête
.	PONCT.S	.

Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
du	P+D.def.m.s	du
type	N.C.m.s	type
MIME	N.P.m.s	Mime
des	P+D.def.f.p	du
données	N.C.f.p	donnée
$DOCUMENT_ROOT	N.P.m.s	<unknown>
Racine	N.P.f.s	Racine
des	P+D.def.m.p	du
documents	N.C.m.p	document
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
$DOCUMENT_URI	N.P.m.s	<unknown>
Adresse	N.P.m.s	Adresse
du	P+D.def.m.s	du
script	N.C.m.s	script
PHP	N.P.m.s	Php
en	P	en
relatif	N.C.m.s	relatif
(	PONCT.W	(
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
racine	N.C.f.s	racine
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
)	PONCT.W	)
$HTTP_ACCEPT	N.P.m.s	<unknown>
Types	N.P.m.s	Types
MIME	N.P.m.s	Mime
reconnus	VK.m.p	reconnaître
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
(	PONCT.W	(
séparés	VK.m.p	séparer
par	P	par
des	D.ind.f.p	du
virgules	N.C.f.p	virgule
)	PONCT.W	)
$HTTP_ACCEPT_ENCODING	N.P.x.s	Chttppacceptëng
Types	N.C.m.p	type
d'	P	de
encodage	N.C.m.s	encodage
que	PRO.rel.m.p	que
le	D.def.m.s	le
serveur	N.C.m.s	serveur
peut	V.P.3.s	pouvoir
réaliser	VW	réaliser
(	PONCT.W	(
gzip,deflate	N.C.m.s	<unknown>
)	PONCT.W	)
$HTTP_ACCEPT_LANGUAGE	N.P.m.s	<unknown>
Langue	N.C.f.s	langue
utilisée	VK.f.s	utiliser
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
(	PONCT.W	(
par	P	par
défaut	N.C.m.s	défaut
en-us	ADV.-	en-us
)	PONCT.W	)
$HTTP_CONNECTION	N.P.m.s	<unknown>
Type	N.C.m.s	type
de	P	de
connexion	N.C.f.s	connexion
ouverte	A.qual.f.s	ouvert
entre	P	entre
le	D.def.m.s	le
client	N.C.m.s	client
et	C.C	et
le	D.def.m.s	le
serveur	N.C.m.s	serveur
(	PONCT.W	(
par	P	par
exemple	N.C.m.s	exemple
KeepAlive	N.P.m.s	Keepalive
)	PONCT.W	)
$HTTP_HOST	N.P.m.s	<unknown>
Nom	N.P.m.s	Nom
d'	P	de
hôte	N.C.f.s	hôte
de	P	de
la	D.def.f.s	le
machine	N.C.f.s	machine
du	P+D.def.m.s	du
client	N.C.m.s	client
(	PONCT.W	(
associée	VK.f.s	associer
à	P	à
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
IP	N.P.m.s	Ip
)	PONCT.W	)
$HTTP_REFERER	N.P.m.s	<unknown>
URL	N.P.m.s	Url
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
qui	PRO.rel.f.s	qui
a	V.P.3.s	avoir
appelé	VK.m.s	appeler
le	D.def.m.s	le
script	N.C.m.s	script
PHP	N.P.m.s	Php
Cette	D.dem.f.s	ce
variable	N.C.f.s	variable
permet	V.P.3.s	permettre
d'	P	de
avoir	VW	avoir
des	D.ind.f.p	du
informations	N.C.f.p	information
sur	P	sur
le	D.def.m.s	le
type	N.C.m.s	type
de	P	de
navigateur	N.C.m.s	navigateur
utilisé	VK.m.s	utiliser
par	P	par
le	D.def.m.s	le
client	N.C.m.s	client
,	PONCT.W	,
ainsi	ADV.-	ainsi
que	C.S	que
son	D.poss.m.s	son
système	N.C.m.s	système
d'	P	de
exploitation	N.C.f.s	exploitation
.	PONCT.S	.

Voici	P	<unknown>
quelques	D.ind.m.p	quelque
exemples	N.C.m.p	exemple
de	P	de
User-Agents	N.P.m.s	User-Agents
:	PONCT.W	:
$HTTP_USER_AGENT	N.P.m.s	<unknown>
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
•	N.C.m.s	•
Mozilla/4.0	N.P.x.s	<unknown>
(	PONCT.W	(
compatible	N.C.m.s	compatible
;	PONCT.W	;
MSIE	N.C.m.s	msie
5.01	A.card.f.s	@card@
;	PONCT.W	;
Windows	N.P.m.s	Windows
NT	N.P.m.s	NTM
;	PONCT.W	;
TUCOWS	N.P.m.s	Tucows
Network	N.P.m.s	Network
)	PONCT.W	)
Mozilla/4.7	N.P.m.s	<unknown>
[	PONCT.W	[
en	P	en
]	PONCT.W	]
(	PONCT.W	(
X11	A.card.m.s	@card@
;	PONCT.W	;
I	A.card.m.s	I
;	PONCT.W	;
Linux	N.P.m.s	Linux
2.2.14-15mdk	N.P.m.s	<unknown>
i686	N.card.f.s	@card@
)	PONCT.W	)
$LAST_MODIFIED	N.P.m.s	<unknown>
Date	N.P.f.s	Date
et	C.C	et
heure	N.C.f.s	heure
de	P	de
dernière	A.qual.f.s	dernier
modification	N.C.f.s	modification
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
$PATH	N.P.m.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
du	P+D.def.m.s	du
chemin	N.C.m.s	chemin
d'	P	de
accès	N.C.m.s	accès
aux	P+D.def.m.p	au
différents	A.qual.m.p	différent
répertoires	N.C.m.p	répertoire
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
$PATH_INFO	N.P.x.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
du	P+D.def.m.s	du
chemin	N.C.m.s	chemin
d'	P	de
accès	N.C.m.s	accès
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.C.m.s	php
en	P	en
relatif	N.C.m.s	relatif
(	PONCT.W	(
de	P	de
la	D.def.f.s	le
racine	N.C.f.s	racine
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
jusqu'	P	jusque
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.P.m.s	Php
)	PONCT.W	)
$PHP_SELF	N.P.m.s	<unknown>
Nom	N.P.m.s	Nom
du	P+D.def.m.s	du
script	N.C.m.s	script
PHP	N.P.m.s	Php
$REDIRECT_STATUS	N.P.m.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
l'	D.def.m.s	le
état	N.C.m.s	état
de	P	de
la	D.def.f.s	le
redirection	N.C.f.s	redirection
(	PONCT.W	(
echec	ET	echec
ou	C.C	ou
succès	N.C.m.s	succès
)	PONCT.W	)
$REDIRECT_URL	N.P.m.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
l'	D.def.f.s	le
URL	N.P.f.s	Url
vers	P	vers
laquelle	PRO.rel.f.s	lequel
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
du	P+D.def.m.s	du
client	N.C.m.s	client
a	V.P.3.s	avoir
été	VK.m.s	être
redirigé	VK.m.s	rediriger
$QUERY_STRING	N.P.x.s	<unknown>
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
de	P	de
la	D.def.f.s	le
partie	N.C.f.s	partie
de	P	de
l'	D.def.m.s	le
URL	N.P.f.s	Url
(	PONCT.W	(
ayant	VG	avoir
servi	VK.m.s	servir
à	P	à
accéder	VW	accéder
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.P.m.s	Php
)	PONCT.W	)
située	VK.f.s	situer
après	P	après
le	D.def.m.s	le
point	N.C.m.s	point
d'	P	de
interrogation	N.C.f.s	interrogation
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
de	P	de
cette	D.dem.f.s	ce
manière	N.C.f.s	manière
que	PRO.rel.f.s	que
sont	V.P.3.p	être
transmises	VK.f.p	transmettre
les	D.def.f.p	le
données	N.C.f.p	donnée
d'	P	de
un	D.ind.m.s	un
formulaire	N.C.m.s	formulaire
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
de	P	de
la	D.def.f.s	le
méthode	N.C.f.s	méthode
GET	N.P.m.s	Get
$REMOTE_ADDR	N.P.f.s	<unknown>
Cette	D.dem.f.s	ce
variable	N.C.f.s	variable
contient	V.P.3.s	contenir
l'	D.def.f.s	le
adresse	N.C.f.s	adresse
IP	N.P.x.s	Ip
du	P+D.def.m.s	du
client	N.C.m.s	client
appelant	VG	appeler
le	D.def.m.s	le
script	N.C.m.s	script
CGI	N.P.f.s	Cgi
$REMOTE_PORT	N.P.m.s	<unknown>
Cette	D.dem.f.s	ce
variable	N.C.f.s	variable
permet	V.P.3.s	permettre
de	P	de
savoir	VW	savoir
le	D.def.m.s	le
port	N.C.m.s	port
sur	P	sur
lequel	PRO.rel.m.s	lequel
la	D.def.f.s	le
requête	N.C.f.s	requête
HTTP	N.P.m.s	Http
a	V.P.3.s	avoir
été	VK.m.s	être
envoyée	VK.f.s	envoyer
au	P+D.def.m.s	au
serveur	N.C.m.s	serveur
Chemin	N.P.m.s	Chemin
d'	P	de
accès	N.C.m.s	accès
complet	A.qual.m.s	complet
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.P.m.s	Php
$SCRIPT_FILENAME	N.C.m.s	<unknown>
$SCRIPT_NAME	N.C.m.s	csscriptäname
•	N.C.m.s	•
Sous	P	sous
windows	N.C.m.p	window
,	PONCT.W	,
il	CL.suj.3.m.s	il
sera	V.F.3.s	être
de	P	de
la	D.def.f.s	le
forme	N.C.f.s	forme
:	PONCT.W	:
c:/php/php.exe	N.C.m.s	<unknown>
Chemin	N.P.m.s	Chemin
d'	P	de
accès	N.C.m.s	accès
relatif	A.qual.m.s	relatif
(	PONCT.W	(
par	P	par
rapport	N.C.m.s	rapport
au	P+D.def.m.s	au
chemin	N.C.m.s	chemin
d'	P	de
accès	N.C.m.s	accès
à	P	à
la	D.def.f.s	le
racine	N.C.f.s	racine
web	N.C.m.s	web
($DOCUMENT_ROOT))	N.P.m.s	<unknown>
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.C.m.s	php
Les	D.def.f.p	le
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
dépendant	VG	dépendre
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
Variable	A.qual.m.s	variable
d'	P	de
environnement	N.C.m.s	environnement
Description	N.C.f.s	description
$DATE_GMT	N.P.f.s	<unknown>
Date	N.P.f.s	Date
actuelle	A.qual.f.s	actuel
au	P+D.def.m.s	au
format	N.C.m.s	format
GMT	N.P.m.s	Gmt
$DATE_LOCAL	N.P.x.s	<unknown>
Date	N.P.f.s	Date
actuelle	A.qual.f.s	actuel
au	P+D.def.m.s	au
format	N.C.m.s	format
local	A.qual.m.s	local
$DOCUMENT_ROOT	N.P.m.s	<unknown>
Racine	N.P.f.s	Racine
des	P+D.def.m.p	du
documents	N.C.m.p	document
Web	N.P.m.s	Web
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
$GATEWAY_INTERFACE	N.P.m.s	Ggateway-intace
Version	N.C.f.s	version
des	P+D.def.f.p	du
spécifications	N.C.f.p	spécification
CGI	N.P.f.s	Cgi
utilisées	VK.f.p	utiliser
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
$HTTP_HOST	N.P.m.s	<unknown>
Nom	N.P.m.s	Nom
de	P	de
domaine	N.C.m.s	domaine
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
$SERVER_ADDR	N.P.m.s	<unknown>
Adresse	N.P.m.s	Adresse
IP	N.P.m.s	Ip
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
$SERVER_ADMIN	N.P.x.s	<unknown>
Adresse	N.C.f.s	adresse
de	P	de
l'	D.def.m.s	le
administrateur	N.C.m.s	administrateur
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
$SERVER_NAME	N.P.m.s	<unknown>
Nom	N.P.m.s	Nom
donné	VK.m.s	donner
au	P+D.def.m.s	au
serveur	N.C.m.s	serveur
en	P	en
local	N.C.m.s	local
$SERVER_PORT	N.C.m.s	<unknown>
Numéro	N.P.m.s	Numéro
de	P	de
port	N.C.m.s	port
associé	VK.m.s	associer
au	P+D.def.m.s	au
protocole	N.C.m.s	protocole
HTTP	N.P.m.s	Http
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
$SERVER_PROTOCOL	N.P.x.s	<unknown>
Nom	N.P.m.s	Nom
et	C.C	et
version	N.C.f.s	version
du	P+D.def.m.s	du
protocole	N.C.m.s	protocole
utilisé	VK.m.s	utiliser
pour	P	pour
envoyer	VW	envoyer
la	D.def.f.s	le
requête	N.C.f.s	requête
au	P+D.def.m.s	au
script	N.C.m.s	script
PHP	N.P.m.s	Php
Type	N.P.m.s	Type
(	PONCT.W	(
logiciel	N.C.m.s	logiciel
)	PONCT.W	)
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
web	N.C.m.s	web
$SERVER_SOFTWARE	N.P.m.s	<unknown>
•	N.C.m.s	•
Pour	P	pour
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
Apache	N.P.m.s	Apache
sous	P	sous
Unix	N.P.f.s	Unix
:	PONCT.W	:
Apache/1.3.2	N.P.x.s	<unknown>
(	PONCT.W	(
Unix	N.P.f.s	Unix
)	PONCT.W	)
PHP/3.0.5	N.P.m.s	<unknown>
•	N.C.m.s	•
Pour	P	pour
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
Apache	N.P.m.s	Apache
sous	P	sous
Windows	N.P.m.s	Windows
:	PONCT.W	:
Apache/1.3.2	N.P.x.s	<unknown>
(	PONCT.W	(
Win32	N.P.m.s	<unknown>
)	PONCT.W	)
PHP/3.0.5	N.P.m.p	<unknown>
Affichage	N.C.m.s	affichage
des	P+D.def.f.p	du
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
créer	VW	créer
un	D.ind.m.s	un
script	N.C.m.s	script
permettant	VG	permettre
de	P	de
visualiser	VW	visualiser
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
des	P+D.def.f.p	du
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
.	PONCT.S	.

La	D.def.f.s	le
première	A.ord.f.s	premier
façon	N.C.f.s	façon
consiste	V.P.3.s	consister
à	P	à
utiliser	VW	utiliser
la	D.def.f.s	le
fonction	N.C.f.s	fonction
phpinfo()	N.C.m.s	phpinfoëë
qui	PRO.rel.f.s	qui
affiche	V.P.3.s	afficher
toute	ADV.-	toute
seule	A.qual.f.s	seul
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
récapitulatif	A.qual.m.s	récapitulatif
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
et	C.C	et
de	P	de
l'	D.def.m.s	le
intepréteur	N.C.m.s	intepréteur
PHP	N.P.m.s	Php
,	PONCT.W	,
ainsi	ADV.-	ainsi
qu'	C.S	que
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
des	P+D.def.f.p	du
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
<	N.C.m.s	<
?	PONCT.S	?

phpinfo()	N.C.m.s	phpinfoëë
;	PONCT.W	;
?	PONCT.S	?

>	P	à
PHP	N.P.m.s	Php
fournit	V.P.3.s	fournir
la	D.def.f.s	le
fonction	N.C.f.s	fonction
getenv()	N.C.m.s	getenvçë
permettant	VG	permettre
de	P	de
retourner	VW	retourner
la	D.def.f.s	le
valeur	N.C.f.s	valeur
de	P	de
la	D.def.f.s	le
variable	N.C.f.s	variable
d'	P	de
environnement	N.C.m.s	environnement
passée	VK.f.s	passer
en	P	en
paramètre	N.C.m.s	paramètre
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

echo	ET	echo
getenv("HTTP_USER_AGENT")	ET	getenvçttpuserçent
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Enfin	ADV.-	enfin
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
définir	VW	définir
des	D.ind.f.p	du
variables	N.C.f.p	variable
d'	P	de
environnement	N.C.m.s	environnement
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

echo	ADV.-	echo
putenv("MA_VARIABLE=mavaleur	N.C.f.s	putenvçhmaëvaleur
La	D.def.f.s	le
gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
fichiers	N.C.m.p	fichier
avec	P	avec
PHP	N.P.m.s	Php
Avec	P	avec
PHP	N.P.m.s	Php
,	PONCT.W	,
la	D.def.f.s	le
création	N.C.f.s	création
ou	C.C	ou
la	D.def.f.s	le
lecture	N.C.f.s	lecture
de	P	de
fichiers	N.C.m.p	fichier
est	V.P.3.s	être
,	PONCT.W	,
une	D.ind.f.s	un
fois	N.C.f.s	foi
de	P	de
plus	ADV.-	plus
,	PONCT.W	,
assez	ADV.-	assez
simple	A.qual.m.s	simple
.	PONCT.S	.

Il	CL.suj.3.m.s	il
existe	V.P.3.s	exister
une	D.ind.f.s	un
multitude	N.C.f.s	multitude
de	P	de
fonctions	N.C.f.p	fonction
dédiées	VK.f.p	dédier
à	P	à
l'	D.def.f.s	le
utilisation	N.C.f.s	utilisation
des	P+D.def.m.p	du
fichiers	N.C.m.p	fichier
.	PONCT.S	.

La	D.def.f.s	le
communication	N.C.f.s	communication
entre	P	entre
le	D.def.m.s	le
script	N.C.m.s	script
PHP	N.P.m.s	Php
et	C.C	et
le	D.def.m.s	le
fichier	N.C.m.s	fichier
est	V.P.3.s	être
repérée	VK.f.s	repérer
par	P	par
une	D.ind.f.s	un
variable	N.C.f.s	variable
,	PONCT.W	,
indiquant	VG	indiquer
l'	D.def.m.s	le
état	N.C.m.s	état
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
et	C.C	et
que	C.S	que
l'	D.def.m.s	le
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
passer	VW	passer
en	P	en
paramètre	N.C.m.s	paramètre
aux	P+D.def.f.p	au
fonctions	N.C.f.p	fonction
spécialisées	A.qual.f.p	spécialisé
pour	P	pour
le	CL.obj.3.m.s	le
manipuler	VW	manipuler
.	PONCT.S	.

La	D.def.f.s	le
fonction	N.C.f.s	fonction
fopen()	V.P.3.s	fopencer
La	D.def.f.s	le
fonction	N.C.f.s	fonction
de	P	de
base	N.C.f.s	base
est	V.P.3.s	être
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fopen(	A.qual.m.s	fopenç
)	PONCT.W	)
.	PONCT.S	.

C'	CL.suj.3.m.s	ce
est	V.P.3.s	être
elle	CL.suj.3.f.s	elle
qui	PRO.rel.f.s	qui
permet	V.P.3.s	permettre
d'	P	de
ouvrir	VW	ouvrir
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
,	PONCT.W	,
que	C.S	que
ce	CL.suj.3.m.s	ce
soit	V.S.3.s	être
pour	P	pour
le	CL.obj.3.m.s	le
lire	VW	lire
,	PONCT.W	,
le	CL.obj.3.m.s	le
créer	VW	créer
,	PONCT.W	,
ou	C.C	ou
y	CL.obj.3.m.s	y
écrire	VW	écrire
.	PONCT.S	.

Voilà	V.P.3.s	<unknown>
sa	D.poss.f.s	son
syntaxe	N.C.f.s	syntaxe
:	PONCT.W	:
entier	N.C.m.s	entier
fopen(chaine	N.C.f.s	fopençchain
nomdufichier	A.qual.m.s	nomdufichier
,	PONCT.W	,
chaine	A.qual.f.s	chain
mode	N.C.f.s	mode
)	PONCT.W	)
;	PONCT.W	;
Le	D.def.m.s	le
mode	N.C.m.s	mode
indique	V.P.3.s	indiquer
le	D.def.m.s	le
type	N.C.m.s	type
d'	P	de
opération	N.C.f.s	opération
qu'	PRO.rel.m.s	que
il	CL.suj.3.m.s	il
sera	V.F.3.s	être
possible	A.qual.m.s	possible
d'	P	de
effectuer	VW	effectuer
sur	P	sur
le	D.def.m.s	le
fichier	N.C.m.s	fichier
après	P	après
ouverture	N.C.f.s	ouverture
.	PONCT.S	.

Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
une	D.ind.f.s	un
lettre	N.C.f.s	lettre
(	PONCT.W	(
en	P	en
réalité	N.C.f.s	réalité
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
)	PONCT.W	)
indiquant	VG	indiquer
l'	D.def.f.s	le
opération	N.C.f.s	opération
possible	A.qual.f.s	possible
:	PONCT.W	:
•	N.C.m.s	•
•	N.C.m.s	•
r	N.C.m.s	r
(	PONCT.W	(
comme	P	comme
read	N.C.m.s	read
)	PONCT.W	)
indique	V.P.3.s	indiquer
une	D.ind.f.s	un
ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
seulement	ADV.-	seulement
w	N.C.m.s	w
(	PONCT.W	(
comme	P	comme
write	N.C.m.s	write
)	PONCT.W	)
indique	V.P.3.s	indiquer
une	D.ind.f.s	un
ouverture	N.C.f.s	ouverture
en	P	en
écriture	N.C.f.s	écriture
seulement	ADV.-	seulement
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
•	VK.m.s	être
a	V.P.3.s	avoir
(	PONCT.W	(
comme	C.S	comme
append	V.P.3.s	appendre
)	PONCT.W	)
indique	V.P.3.s	indiquer
une	D.ind.f.s	un
ouverture	N.C.f.s	ouverture
en	P	en
écriture	N.C.f.s	écriture
seulement	ADV.-	seulement
avec	P	avec
ajout	N.C.m.s	ajout
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
Lorsque	C.S	lorsque
le	D.def.m.s	le
mode	N.C.m.s	mode
est	V.P.3.s	être
suivi	VK.m.s	suivre
du	P+D.def.m.s	du
caractère	N.C.m.s	caractère
+	P	p
celui	PRO.dem.m.s	celui
-ci	CL.suj.3.m.s	ci
peut	V.P.3.s	pouvoir
être	VW	être
lu	VK.m.s	lire
et	C.C	et
écrit	VK.m.s	écrire
.	PONCT.S	.

Enfin	ADV.-	enfin
,	PONCT.W	,
le	D.def.m.s	le
fait	N.C.m.s	fait
de	P	de
faire	VW	faire
suivre	VW	suivre
le	D.def.m.s	le
mode	N.C.m.s	mode
par	P	par
la	D.def.f.s	le
lettre	N.C.f.s	lettre
b	N.C.m.s	b
entre	P	entre
crochets	N.C.m.p	crochet
indique	V.P.3.s	indiquer
que	C.S	que
le	D.def.m.s	le
fichier	N.C.m.s	fichier
est	V.P.3.s	être
traité	VK.m.s	traiter
de	P	de
façon	N.C.f.s	façon
binaire	A.qual.f.s	binaire
.	PONCT.S	.

Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
récapitulant	VG	récapituler
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
des	P+D.def.m.p	du
modes	N.C.m.p	mode
de	P	de
fichiers	N.C.m.p	fichier
possibles	A.qual.m.p	possible
:	PONCT.W	:
Mode	N.P.m.s	Mode
Description	N.C.f.s	description
r	PONCT.W	r
ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
seulement	ADV.-	seulement
w	P	w
ouverture	N.C.f.s	ouverture
en	P	en
écriture	N.C.f.s	écriture
seulement	ADV.-	seulement
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
a	V.P.3.s	avoir
ouverture	N.C.f.s	ouverture
en	P	en
écriture	N.C.f.s	écriture
seulement	ADV.-	seulement
avec	P	avec
ajout	N.C.m.s	ajout
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
r+	ADV.-	ru
ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
et	C.C	et
écriture	V.P.3.s	écriturer
w+	ET	wu
ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
et	C.C	et
écriture	N.C.f.s	écriture
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
a+	ADV.neg	au
ouverture	N.C.f.s	ouverture
en	P	en
lecture	N.C.f.s	lecture
et	C.C	et
écriture	N.C.f.s	écriture
avec	P	avec
ajout	N.C.m.s	ajout
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
(	PONCT.W	(
la	D.def.f.s	le
fonction	N.C.f.s	fonction
crée	V.P.3.s	créer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
s'	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
)	PONCT.W	)
Voici	V.P.3.s	<unknown>
des	D.ind.m.p	du
exemples	N.C.m.p	exemple
d'	P	de
utilisations	N.C.f.p	utilisation
possibles	A.qual.f.p	possible
de	P	de
cette	D.dem.f.s	ce
fonction	N.C.f.s	fonction
:	PONCT.W	:
$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("../fichier.txt","r")	N.C.m.s	<unknown>
;	PONCT.W	;
//lecture	N.P.x.s	<unknown>
//écriture	N.C.m.s	<unknown>
depuis	P	depuis
début	N.C.m.s	début
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("ftp://phpfrance.com/pub/fichier.txt","w")	N.C.m.s	<unknown>
;	PONCT.W	;
//écriture	N.C.m.s	<unknown>
depuis	P	depuis
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
$fp	N.P.x.s	<unknown>
=	PONCT.W	=
fopen("http://igalaxie.com/fichier.txt","a")	N.C.m.s	<unknown>
;	PONCT.W	;
De	P	de
plus	ADV.-	plus
,	PONCT.W	,
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fopen	ET	fopen
permet	V.P.3.s	permettre
d'	P	de
ouvrir	VW	ouvrir
des	D.ind.m.p	du
fichiers	N.C.m.p	fichier
présents	A.qual.m.p	présent
sur	P	sur
le	D.def.m.s	le
web	N.C.m.s	web
grâce	A.qual.m.s	grâce
à	P	à
leur	D.poss.m.s	leur
URL	N.P.f.s	Url
.	PONCT.S	.

Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
script	N.C.m.s	script
permettant	VG	permettre
de	P	de
récupérer	VW	récupérer
le	D.def.m.s	le
contenu	N.C.m.s	contenu
d'	P	de
une	D.ind.f.s	un
page	N.C.f.s	page
d'	P	de
un	D.ind.m.s	un
site	N.C.m.s	site
web	N.C.m.s	web
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("http://www.commentcamarche.net","r")	N.C.m.s	<unknown>
;	PONCT.W	;
//lecture	N.C.m.s	émlecture
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
while	A.qual.m.s	while
(	PONCT.W	(
!	PONCT.S	!

feof($fp))	N.C.m.s	feofüëfpçë
{	N.C.m.s	{
//on	PONCT.W	<unknown>
parcourt	V.P.3.s	parcourir
toutes	A.ind.f.p	tout
les	D.def.f.p	le
lignes	N.C.f.p	ligne
$page	N.P.f.s	<unknown>
.=	PONCT.W	<unknown>
fgets($fp	N.C.m.s	<unknown>
,	PONCT.W	,
4096	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
lecture	N.C.f.s	lecture
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
}	N.C.m.s	}
?	PONCT.S	?

>	P	à
Il	CL.suj.3.m.s	il
est	V.P.3.s	être
généralement	ADV.-	généralement
utile	A.qual.m.s	utile
de	P	de
tester	VW	tester
si	C.S	si
l'	D.def.f.s	le
ouverture	N.C.f.s	ouverture
de	P	de
fichier	N.C.m.s	fichier
s'	CL.refl.3.f.s	se
est	V.P.3.s	être
bien	ADV.-	bien
déroulée	VK.f.s	dérouler
ainsi	ADV.-	ainsi
que	C.S	que
d'	P	de
éventuellement	ADV.-	éventuellement
stopper	VW	stopper
le	D.def.m.s	le
script	N.C.m.s	script
PHP	N.P.m.s	Php
si	C.S	si
cela	PRO.dem.m.s	cela
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
le	D.def.m.s	le
cas	N.C.m.s	cas
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

if	A.qual.m.s	if
(	PONCT.W	(
!	PONCT.S	!

$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("http://www.commentcamarche.net","r"))	N.C.m.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Echec	N.P.m.s	Echec
de	P	de
l'	D.def.f.s	le
ouverture	N.C.f.s	ouverture
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
"	PONCT.W	"
;	PONCT.W	;
exit	V.P.3.s	exir
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	V.P.3.s	être
//	PONCT.W	@card@
votre	D.poss.m.s	votre
code	N.C.m.s	code
;	PONCT.W	;
}	N.C.m.s	}
?	PONCT.S	?

>	P	à
Un	D.ind.m.s	un
fichier	N.C.m.s	fichier
ouvert	VK.m.s	ouvrir
avec	P	avec
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fopen()	N.C.f.s	fopenç
doit	V.P.3.s	devoir
être	VW	être
fermé	VK.m.s	fermer
,	PONCT.W	,
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
son	D.poss.f.s	son
utilisation	N.C.f.s	utilisation
,	PONCT.W	,
par	P	par
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fclose()	N.C.m.s	fcloseçà
en	P	en
lui	CL.obj.3.m.s	lui
passant	VG	passer
en	P	en
paramètre	N.C.m.s	paramètre
l'	D.def.m.s	le
entier	N.C.m.s	entier
retourné	VK.m.s	retourner
par	P	par
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fopen()	N.C.f.s	fopenç
Lecture	N.P.m.s	Lecture
et	C.C	et
écriture	V.P.3.s	écriturer
Une	D.ind.f.s	un
fois	N.C.f.s	foi
que	PRO.rel.f.s	que
le	D.def.m.s	le
fichier	N.C.m.s	fichier
a	V.P.3.s	avoir
été	VK.m.s	être
ouvert	VK.m.s	ouvrir
avec	P	avec
le	D.def.m.s	le
mode	N.C.m.s	mode
désiré	A.qual.m.s	désiré
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
de	P	de
lire	VW	lire
son	D.poss.m.s	son
contenu	N.C.m.s	contenu
et	C.C	et
d'	P	de
y	CL.obj.3.m.s	y
écrire	VW	écrire
des	D.ind.f.p	du
informations	N.C.f.p	information
grâce	N.C.f.s	grâce
aux	P+D.def.f.p	au
fonctions	N.C.f.p	fonction
:	PONCT.W	:
•	N.C.m.s	•
fputs()	N.C.m.s	fputsçë
(	PONCT.W	(
aussi	ADV.-	aussi
parfois	ADV.-	parfois
appelée	VK.f.s	appeler
fwrite()	N.C.m.s	fwriteç
,	PONCT.W	,
les	D.def.m.p	le
deux	A.card.m.p	deux
noms	N.C.m.p	nom
sont	V.P.3.p	être
équivalents	A.qual.m.p	équivalent
,	PONCT.W	,
on	CL.suj.3.m.s	on
parle	V.P.3.s	parler
d'	P	de
alias	N.C.m.p	alia
)	PONCT.W	)
permettant	VG	permettre
d'	P	de
écrire	VW	écrire
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
entier	A.qual.m.s	entier
fputs(entier	A.qual.m.s	fputsçentier
Etat_du_fichier	N.P.m.s	Etatäduëfichier
,	PONCT.W	,
chaine	N.C.f.s	chaine
Sortie	N.P.f.s	Sortie
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
fputs()	N.C.m.s	fputsçë
renvoie	V.P.3.s	renvoyer
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
caractères	N.C.m.p	caractère
effectivement	ADV.-	effectivement
écrits	VK.m.p	écrire
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
•	P	à
fgets()	N.C.m.s	fgetsçë
permettant	VG	permettre
de	P	de
récupérer	VW	récupérer
une	D.ind.f.s	un
ligne	N.C.f.s	ligne
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
chaîne	N.C.f.s	chaîne
fgets(entier	N.C.m.s	fgetsçentier
Etat_du_fichier	N.P.m.s	Etatäduëfichier
,	PONCT.W	,
entier	A.qual.m.s	entier
Longueur	N.P.m.s	Longueur
)	PONCT.W	)
;	PONCT.W	;
Le	D.def.m.s	le
paramètre	N.C.m.s	paramètre
Longueur	N.P.m.s	Longueur
désigne	V.P.3.s	désigner
le	D.def.m.s	le
nombre	N.C.m.s	nombre
de	P	de
caractères	N.C.m.p	caractère
maximum	A.qual.m.s	maximum
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
est	V.P.3.s	être
sensée	VK.f.s	senser
récupérer	VW	récupérer
sur	P	sur
la	D.def.f.s	le
ligne	N.C.f.s	ligne
.	PONCT.S	.

La	D.def.f.s	le
fonction	N.C.f.s	fonction
fgets()	N.C.m.s	fgetsçë
renvoie	V.P.3.s	renvoyer
0	D.card.m.s	@card@
en	P	en
cas	N.C.m.s	cas
d'	P	de
échec	N.C.m.s	échec
,	PONCT.W	,
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
contraire	A.qual.m.s	contraire
Etant	VG	eter
donné	VK.m.s	donner
que	C.S	que
la	D.def.f.s	le
fonction	N.C.f.s	fonction
fgets()	N.C.m.s	fgetsçë
récupère	V.P.3.s	récupérer
à	P	à
chaque	D.ind.m.s	chaque
appel	N.C.m.s	appel
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
ligne	N.C.f.s	ligne
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
,	PONCT.W	,
il	CL.suj.3.m.s	il
est	V.P.3.s	être
essentiel	A.qual.m.s	essentiel
,	PONCT.W	,
pour	P	pour
récupérer	VW	récupérer
l'	D.def.f.s	le
intégralité	N.C.f.s	intégralité
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
de	P	de
l'	CL.obj.3.m.s	le
insérer	VW	insérer
dans	P	dans
une	D.ind.f.s	un
boucle	A.qual.f.s	boucle
while	N.C.f.s	while
.	PONCT.S	.

Ainsi	ADV.-	ainsi
,	PONCT.W	,
on	CL.suj.3.m.s	on
utilise	V.P.3.s	utiliser
la	D.def.f.s	le
fonction	N.C.f.s	fonction
feof()	N.C.m.s	feofçë
,	PONCT.W	,
fonction	N.C.f.s	fonction
testant	VG	tester
si	C.S	si
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
n'	ADV.neg	ne
a	V.P.3.s	avoir
pas	ADV.neg	pas
été	VK.m.s	être
atteinte	VK.f.s	atteindre
,	PONCT.W	,
en	P	en
tant	ADV.-	tant
que	C.S	que
test	V.P.3.s	tenir
de	P	de
la	D.def.f.s	le
boucle	N.C.f.s	boucle
while	N.C.m.s	while
.	PONCT.S	.

De	P	de
cette	D.dem.f.s	ce
façon	N.C.f.s	façon
,	PONCT.W	,
tant	ADV.-	tant
que	C.S	que
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
n'	ADV.neg	ne
a	V.P.3.s	avoir
pas	ADV.neg	pas
été	VK.m.s	être
atteinte	VK.f.s	atteindre
,	PONCT.W	,
on	CL.suj.3.m.s	on
lit	V.P.3.s	lire
la	D.def.f.s	le
ligne	N.C.f.s	ligne
suivante	A.qual.f.s	suivant
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
...	PONCT.S	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

if	A.qual.m.s	if
(	PONCT.W	(
!	PONCT.S	!

$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("fichier.txt","r"))	N.C.m.s	fopençfichierçquë
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Echec	N.P.m.s	Echec
de	P	de
l'	D.def.f.s	le
ouverture	N.C.f.s	ouverture
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
"	PONCT.W	"
;	PONCT.W	;
exit	V.P.3.s	exir
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
while(	N.C.m.s	whileë
!	PONCT.S	!

feof($fp))	N.C.m.s	feofüëfpçë
{	N.C.m.s	{
//	PONCT.W	@card@
On	CL.suj.3.m.s	on
récupère	V.P.3.s	récupérer
une	D.ind.f.s	un
ligne	N.C.f.s	ligne
$Ligne	A.qual.f.s	çligne
=	PONCT.W	=
fgets($fp,255)	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
On	CL.suj.3.m.s	on
affiche	V.P.3.s	afficher
la	D.def.f.s	le
ligne	N.C.f.s	ligne
echo	ET	echo
$Ligne	N.P.x.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
On	CL.suj.3.m.s	on
stocke	V.P.3.s	stocker
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
des	P+D.def.f.p	du
lignes	N.C.f.p	ligne
dans	P	dans
une	D.ind.f.s	un
variable	N.C.f.s	variable
$Fichier	N.P.f.s	Ffichier
.=	PONCT.W	<unknown>
$Ligne	N.P.f.s	<unknown>
;	PONCT.W	;
}	P+D.def.m.s	c
fclose($fp)	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
On	CL.suj.3.m.s	on
ferme	V.P.3.s	fermer
le	D.def.m.s	le
fichier	N.C.m.s	fichier
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
Pour	P	pour
stocker	VW	stocker
des	P+D.def.m.p	du
infos	N.C.m.p	info
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
,	PONCT.W	,
il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
dans	P	dans
un	D.ind.m.s	un
premier	A.ord.m.s	premier
temps	N.C.m.s	temps
ouvrir	VW	ouvrir
le	D.def.m.s	le
fichier	N.C.m.s	fichier
en	P	en
écriture	N.C.f.s	écriture
en	P	en
le	CL.obj.3.m.s	le
créant	VG	créer
si	C.S	si
il	CL.suj.3.m.s	il
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
.	PONCT.S	.

On	CL.suj.3.m.s	on
a	V.P.3.s	avoir
donc	ADV.-	donc
le	D.def.m.s	le
choix	N.C.m.s	choix
entre	P	entre
le	D.def.m.s	le
mode	N.C.m.s	mode
'	PONCT.W	'
w	A.card.m.s	w
'	PONCT.W	'
et	C.C	et
le	D.def.m.s	le
mode	N.C.m.s	mode
'	PONCT.W	'
a	V.P.3.s	avoir
'	PONCT.W	'
.	PONCT.S	.

On	CL.suj.3.m.s	on
préférera	V.F.3.s	préférer
le	D.def.m.s	le
second	A.ord.m.s	second
puisque	C.S	puisque
le	D.def.m.s	le
pointeur	N.C.m.s	pointeur
se	CL.refl.3.m.s	se
trouve	V.P.3.s	trouver
en	P	en
fin	N.C.f.s	fin
de	P	de
fichier	N.C.m.s	fichier
(	PONCT.W	(
autrement	ADV.-	autrement
dit	VK.m.s	dire
on	CL.suj.3.m.s	on
écrit	V.P.3.s	écrire
à	P	à
la	D.def.f.s	le
suite	N.C.f.s	suite
de	P	de
ce	PRO.dem.m.s	ce
qui	PRO.rel.m.s	qui
se	CL.refl.3.m.s	se
trouve	V.P.3.s	trouver
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
au	P+D.def.m.s	au
lieu	N.C.m.s	lieu
d'	P	de
écraser	VW	écraser
le	D.def.m.s	le
contenu	N.C.m.s	contenu
existant	A.qual.m.s	existant
éventuellement	ADV.-	éventuellement
déjà	ADV.-	déjà
)	PONCT.W	)
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("php_8_fichier.txt","a")	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
ouverture	N.C.f.s	ouverture
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
en	P	en
écriture	N.C.f.s	écriture
fputs($fp	N.P.x.s	Fputsëëfp
,	PONCT.W	,
"	PONCT.W	"
\n	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
va	V.P.3.s	aller
a	V.P.3.s	avoir
la	D.def.f.s	le
ligne	N.C.f.s	ligne
fputs($fp	N.P.x.s	Fputsëëfp
,	PONCT.W	,
"	PONCT.W	"
$nom|$email	N.C.m.s	änomçemail
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
on	CL.suj.3.m.s	on
écrit	V.P.3.s	écrire
le	D.def.m.s	le
nom	N.C.m.s	nom
et	C.C	et
email	N.C.m.s	email
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
fclose($fp)	N.P.x.s	Fcloseëfpë
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Voici	V.P.3.s	<unknown>
un	D.ind.m.s	un
petit	A.qual.m.s	petit
script	N.C.m.s	script
permettant	VG	permettre
de	P	de
récupérer	VW	récupérer
le	D.def.m.s	le
titre	N.C.m.s	titre
d'	P	de
une	D.ind.f.s	un
page	N.C.f.s	page
Web	N.P.m.s	Web
(	PONCT.W	(
le	D.def.m.s	le
texte	N.C.m.s	texte
compris	VK.m.s	comprendre
entre	P	entre
les	D.def.f.p	le
balises	N.C.f.p	balise
<TITLE>	N.P.x.s	<unknown>
et	C.C	et
</TITLE>	N.P.x.s	<unknown>
)	PONCT.W	)
.	PONCT.S	.

Il	CL.suj.3.m.s	il
utilise	V.P.3.s	utiliser
les	D.def.f.p	le
expressions	N.C.f.p	expression
régulières	A.qual.f.p	régulier
pour	P	pour
localiser	VW	localiser
le	D.def.m.s	le
texte	N.C.m.s	texte
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

$fp	N.C.m.s	<unknown>
=	PONCT.W	=
fopen("http://www.commentcamarche.net","r")	N.C.m.s	<unknown>
;	PONCT.W	;
//lecture	N.C.m.s	émlecture
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
while	A.qual.m.s	while
(	PONCT.W	(
!	PONCT.S	!

feof($fp))	N.C.m.s	feofüëfpçë
{	N.C.m.s	{
//on	PONCT.W	<unknown>
parcourt	V.P.3.s	parcourir
toutes	A.ind.f.p	tout
les	D.def.f.p	le
lignes	N.C.f.p	ligne
$page	N.P.f.s	<unknown>
.=	PONCT.W	<unknown>
fgets($fp	N.C.m.s	<unknown>
,	PONCT.W	,
4096	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
lecture	N.C.f.s	lecture
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
de	P	de
la	D.def.f.s	le
ligne	N.C.f.s	ligne
}	P	à
$titre	N.C.m.s	<unknown>
=	PONCT.W	=
eregi("<title>(.*)</title>",$page,$regs)	N.P.x.s	<unknown>
;	PONCT.W	;
//on	PONCT.W	<unknown>
isole	V.P.3.s	isoler
le	D.def.m.s	le
titre	N.C.m.s	titre
echo	ET	echo
$regs[1	ET	<unknown>
]	PONCT.W	]
;	PONCT.W	;
fclose($fp)	N.C.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Les	D.def.m.p	le
tests	N.C.m.p	test
de	P	de
fichiers	N.C.m.p	fichier
PHP	N.P.m.s	Php
fournit	V.P.3.s	fournir
de	D.ind.f.p	de
nombreuses	A.qual.f.p	nombreux
fonctions	N.C.f.p	fonction
permettant	VG	permettre
de	P	de
faire	VW	faire
des	D.ind.m.p	du
tests	N.C.m.p	test
sur	P	sur
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
pour	P	pour
connaître	VW	connaître
leurs	D.poss.f.p	leur
propriétés	N.C.f.p	propriété
.	PONCT.S	.

Voici	V.P.3.s	<unknown>
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
des	P+D.def.m.p	du
tests	N.C.m.p	test
:	PONCT.W	:
•	N.C.m.s	•
is_dir()	N.C.m.s	isädirçë
permet	V.P.3.s	permettre
de	P	de
savoir	VW	savoir
si	C.S	si
le	D.def.m.s	le
fichier	N.C.m.s	fichier
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
nom	N.C.m.s	nom
est	V.P.3.s	être
passé	VK.m.s	passer
en	P	en
paramètre	N.C.m.s	paramètre
correspond	V.P.3.s	correspondre
à	P	à
un	D.ind.m.s	un
répertoire	N.C.m.s	répertoire
booléen	A.qual.m.s	booléen
is_dir(chaine	A.qual.m.s	isädirçchain
Nom_du_fichier	N.P.m.s	Nomäduëfichier
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
is_dir()	N.P.m.s	Isëdirçë
renvoie	V.P.3.s	renvoyer
1	C.S	@card@
si	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
un	D.ind.m.s	un
répertoire	N.C.m.s	répertoire
,	PONCT.W	,
0	N.card.m.s	@card@
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
contraire	A.qual.m.s	contraire
<	A.qual.m.s	<
?	PONCT.S	?

if	A.qual.m.s	if
(	PONCT.W	(
!	PONCT.S	!

is_dir("install"))	N.C.m.s	isädirççinstallçëë
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Il	CL.suj.3.m.s	il
ne	ADV.neg	ne
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
pas	ADV.neg	pas
d'	P	de
un	D.ind.m.s	un
répertoire	N.C.m.s	répertoire
"	PONCT.W	"
;	PONCT.W	;
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
bien	ADV.-	bien
d'	P	de
un	D.ind.m.s	un
répertoire	N.C.m.s	répertoire
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
•	N.C.m.s	•
is_executable()	N.P.m.s	Isçexecutableëù
permet	V.P.3.s	permettre
de	P	de
savoir	VW	savoir
si	C.S	si
le	D.def.m.s	le
fichier	N.C.m.s	fichier
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
nom	N.C.m.s	nom
est	V.P.3.s	être
passé	VK.m.s	passer
en	P	en
paramètre	N.C.m.s	paramètre
est	V.P.3.s	être
exécutable	A.qual.m.s	exécutable
booléen	A.qual.m.s	booléen
is_executable(chaine	N.P.f.s	Isçexecutableçne
Nom_du_fichier	N.P.m.s	Nomäduëfichier
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
is_executable()	N.P.m.s	Isçexecutableëù
renvoie	V.P.3.s	renvoyer
1	N.card.m.s	@card@
si	C.S	si
le	D.def.m.s	le
fichier	N.C.m.s	fichier
est	V.P.3.s	être
exécutable	A.qual.m.s	exécutable
,	PONCT.W	,
0	N.card.m.s	@card@
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
contraire	A.qual.m.s	contraire
•	A.qual.m.s	•
is_file()	N.C.m.s	isäfileçà
permet	V.P.3.s	permettre
de	P	de
savoir	VW	savoir
si	C.S	si
le	D.def.m.s	le
fichier	N.C.m.s	fichier
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
nom	N.C.m.s	nom
est	V.P.3.s	être
passé	VK.m.s	passer
en	P	en
paramètre	N.C.m.s	paramètre
ne	ADV.neg	ne
correspond	V.P.3.s	correspondre
ni	C.C	ni
à	P	à
un	D.ind.m.s	un
répertoire	N.C.m.s	répertoire
,	PONCT.W	,
ni	C.C	ni
à	P	à
un	D.ind.m.s	un
lien	N.C.m.s	lien
symbolique	A.qual.m.s	symbolique
booléen	A.qual.m.s	booléen
is_file(chaine	A.qual.m.s	isäfileçchain
Nom_du_fichier	N.P.m.s	Nomäduëfichier
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
is_file()	N.P.m.s	Isëfileëë
renvoie	V.P.3.s	renvoyer
1	C.S	@card@
si	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
,	PONCT.W	,
0	N.card.m.s	@card@
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
contraire	A.qual.m.s	contraire
•	A.qual.m.s	•
is_link()	N.P.m.s	Isëlinkëë
permet	V.P.3.s	permettre
de	P	de
savoir	VW	savoir
si	C.S	si
le	D.def.m.s	le
fichier	N.C.m.s	fichier
dont	PRO.rel.m.s	dont
le	D.def.m.s	le
nom	N.C.m.s	nom
est	V.P.3.s	être
passé	VK.m.s	passer
en	P	en
paramètre	N.C.m.s	paramètre
correpond	V.P.3.s	correpondre
à	P	à
un	D.ind.m.s	un
lien	N.C.m.s	lien
symbolique	A.qual.m.s	symbolique
booléen	A.qual.m.s	booléen
is_link(chaine	A.qual.m.s	isälinkçchain
Nom_du_fichier	N.P.m.s	Nomäduëfichier
)	PONCT.W	)
;	PONCT.W	;
La	D.def.f.s	le
fonction	N.C.f.s	fonction
is_link()	N.P.m.s	Isëlinkëë
renvoie	V.P.3.s	renvoyer
1	C.S	@card@
si	C.S	si
il	CL.suj.3.m.s	il
s'	CL.refl.3.m.s	se
agit	V.P.3.s	agir
d'	P	de
un	D.ind.m.s	un
lien	N.C.m.s	lien
symbolique	A.qual.m.s	symbolique
,	PONCT.W	,
0	N.card.m.s	@card@
dans	P	dans
le	D.def.m.s	le
cas	N.C.m.s	cas
contraire	A.qual.m.s	contraire
D'	D.ind.f.p	de
autres	A.ind.f.p	autre
façons	N.C.f.p	façon
de	P	de
lire	VW	lire
et	C.C	et
écrire	VW	écrire
Dans	P	dans
certains	D.ind.m.p	certain
cas	N.C.m.p	cas
,	PONCT.W	,
il	CL.suj.3.m.s	il
peut	V.P.3.s	pouvoir
être	VW	être
rébarbatif	A.qual.m.s	rébarbatif
de	P	de
devoir	VW	devoir
mettre	VW	mettre
en	P	en
oeuvre	N.C.f.s	œuvre
les	D.def.f.p	le
fonctions	N.C.f.p	fonction
fopen()	A.qual.f.p	fopençë
et	C.C	et
fgets	N.C.m.p	fget
pour	P	pour
lire	VW	lire
l'	D.def.f.s	le
intégralité	N.C.f.s	intégralité
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
.	PONCT.S	.

Pour	P	pour
cette	D.dem.f.s	ce
raison	N.C.f.s	raison
PHP	N.P.m.s	Php
fournit	V.P.3.s	fournir
des	D.ind.f.p	du
fonctions	N.C.f.p	fonction
supplémentaires	A.qual.f.p	supplémentaire
permettant	VG	permettre
de	P	de
faire	VW	faire
directement	ADV.-	directement
certaines	D.ind.f.p	certain
opérations	N.C.f.p	opération
.	PONCT.S	.

La	D.def.f.s	le
fonction	N.C.f.s	fonction
file()	N.C.m.s	fileçà
permet	V.P.3.s	permettre
de	P	de
retourner	VW	retourner
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
l'	D.def.f.s	le
intégralité	N.C.f.s	intégralité
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
en	P	en
mettant	VG	mettre
chacune	PRO.ind.f.s	chacun
de	P	de
ces	D.dem.f.p	ce
lignes	N.C.f.p	ligne
dans	P	dans
un	D.ind.m.s	un
élément	N.C.m.s	élément
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
(	PONCT.W	(
rappel	N.C.m.s	rappel
:	PONCT.W	:
le	D.def.m.s	le
premier	A.ord.m.s	premier
élément	N.C.m.s	élément
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
est	V.P.3.s	être
repéré	VK.m.s	repérer
par	P	par
l'	D.def.m.s	le
indice	N.C.m.s	indice
0	A.card.m.s	@card@
)	PONCT.W	)
.	PONCT.S	.

Voilà	V.P.3.s	<unknown>
sa	D.poss.f.s	son
syntaxe	N.C.f.s	syntaxe
:	PONCT.W	:
Tableau	N.C.m.s	tableau
file(chaine	N.C.f.s	fileçchaine
nomdufichier	A.qual.m.s	nomdufichier
)	PONCT.W	)
;	PONCT.W	;
L'	D.def.m.s	le
exemple	N.C.m.s	exemple
suivant	A.qual.m.s	suivant
montre	V.P.3.s	montrer
comment	ADV.int	comment
parcourir	VW	parcourir
l'	D.def.m.s	le
ensemble	N.C.m.s	ensemble
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
afin	A.qual.m.s	afin
d'	P	de
afficher	VW	afficher
le	D.def.m.s	le
fichier	N.C.m.s	fichier
.	PONCT.S	.

<	N.C.m.s	<
?	PONCT.S	?

$Fichier	N.C.m.s	ffichier
=	PONCT.W	=
"	PONCT.W	"
fichier.txt	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
if	ET	if
(is_file($Fichier))	N.C.m.s	çis-fileëfichierçë
{	N.C.m.s	{
if	N.C.m.s	if
(	PONCT.W	(
$TabFich	N.P.m.s	<unknown>
=	PONCT.W	=
file($Fichier))	N.C.m.s	fileçfifichierçë
{	N.C.m.s	{
for($i	N.C.m.s	forççi
=	PONCT.W	=
0	N.card.m.s	@card@
;	PONCT.W	;
$i	N.C.m.s	çi
<	P+D.def.m.s	c
count($TabFich)	N.P.x.s	Countüëtabfichë
;	PONCT.W	;
$i++	N.P.x.s	<unknown>
)	PONCT.W	)
echo	ET	echo
$TabFich[$i	N.P.m.s	<unknown>
]	PONCT.W	]
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
Le	D.def.m.s	le
fichier	N.C.m.s	fichier
ne	ADV.neg	ne
peut	V.P.3.s	pouvoir
être	VW	être
lu	VK.m.s	lire
...	PONCT.W	<unknown>
<br>	N.C.m.s	çbrà
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
Désolé	VK.m.s	désoler
le	D.def.m.s	le
fichier	N.C.m.s	fichier
n'	ADV.neg	ne
est	V.P.3.s	être
pas	ADV.neg	pas
valide<br>	A.qual.m.s	valideëbrù
"	PONCT.W	"
;	PONCT.W	;
}	A.qual.m.s	}
?	PONCT.S	?

>	P	à
La	D.def.f.s	le
fonction	N.C.f.s	fonction
fpassthru()	N.C.m.s	<unknown>
permet	V.P.3.s	permettre
d'	P	de
envoyer	VW	envoyer
le	D.def.m.s	le
contenu	N.C.m.s	contenu
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
dans	P	dans
la	D.def.f.s	le
fenêtre	N.C.f.s	fenêtre
du	P+D.def.m.s	du
navigateur	N.C.m.s	navigateur
.	PONCT.S	.

La	D.def.f.s	le
syntaxe	N.C.f.s	syntaxe
de	P	de
cette	D.dem.f.s	ce
fonction	N.C.f.s	fonction
est	V.P.3.s	être
la	D.def.f.s	le
suivante	N.C.f.s	suivante
:	PONCT.W	:
booléen	A.qual.m.s	booléen
fpassthru(entier	A.qual.m.s	fpassthruçentier
etat	N.C.m.s	etat
)	PONCT.W	)
;	PONCT.W	;
Cette	D.dem.f.s	ce
fonction	N.C.f.s	fonction
permet	V.P.3.s	permettre
en	P	en
réalité	N.C.f.s	réalité
d'	P	de
envoyer	VW	envoyer
le	D.def.m.s	le
contenu	N.C.m.s	contenu
du	P+D.def.m.s	du
fichier	N.C.m.s	fichier
à	P	à
partir	VW	partir
de	P	de
la	D.def.f.s	le
position	N.C.f.s	position
courante	A.qual.f.s	courant
dans	P	dans
le	D.def.m.s	le
fichier	N.C.m.s	fichier
,	PONCT.W	,
c'est-à-dire	C.C	c'est-à-dire
qu'	C.S	que
il	CL.suj.3.m.s	il
est	V.P.3.s	être
possible	A.qual.m.s	possible
par	P	par
exemple	N.C.m.s	exemple
de	P	de
lire	VW	lire
quelques	D.ind.f.p	quelque
lignes	N.C.f.p	ligne
avec	P	avec
fgets()	N.C.m.s	fgetsçë
,	PONCT.W	,
puis	C.C	pui
d'	P	de
envoyer	VW	envoyer
le	D.def.m.s	le
reste	N.C.m.s	reste
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
...	PONCT.W	<unknown>
Le	D.def.m.s	le
script	N.C.m.s	script
suivant	A.qual.m.s	suivant
permet	V.P.3.s	permettre
de	P	de
parcourir	VW	parcourir
tous	A.ind.m.p	tous
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
HTML	N.P.m.s	<unknown>
contenus	VK.m.p	contenir
dans	P	dans
votre	D.poss.m.s	votre
site	N.C.m.s	site
et	C.C	et
d'	P	de
en	CL.obj.3.m.s	en
afficher	VW	afficher
l'	D.def.f.s	le
arborescence	N.C.f.s	arborescence
:	PONCT.W	:
<HTML>	N.P.m.s	<unknown>
<HEAD>	N.P.x.s	<unknown>
<TITLE>Affichage	N.P.x.s	<unknown>
de	P	de
l'	D.def.m.s	le
arborescence</TITLE>	N.C.m.s	<unknown>
</HEAD>	N.P.x.s	<unknown>
<BODY>	N.P.x.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

function	N.C.f.s	function
ScanDir($Directory){	N.P.x.s	Scandirçdirectoryçç
if	ET	if
(	PONCT.W	(
is_dir($Directory)	N.P.m.s	Isëdirëëirectoryç
&&	PONCT.W	<unknown>
is_readable($Directory))	N.C.m.s	isäreadable-directoryçç
{	P	à
if($MyDirectory	N.P.x.s	Ifëmydirectory
=	PONCT.W	=
opendir($Directory))	N.P.x.s	Opendirçdirectoryçç
{	P+D.def.m.s	c
while($Entry	N.C.m.s	whileçentry
=	PONCT.W	=
readdir($MyDirectory))	N.C.m.s	readdirçmydirectoryçç
{	P	à
if	ET	if
(is_dir($Directory."/".$Entry))	N.P.x.s	<unknown>
{	N.C.m.s	{
if	ET	if
(	PONCT.W	(
(	PONCT.W	(
$Entry	N.P.m.s	<unknown>
!	PONCT.S	!

=	PONCT.W	=
"	PONCT.W	"
.	PONCT.W	.
"	PONCT.W	"
)	PONCT.W	)

&&	PRO.card.m.p	<unknown>
(	PONCT.W	(
$Entry	N.P.m.s	<unknown>
!	PONCT.S	!

=	PONCT.W	=
"	PONCT.W	"
.	PONCT.W	.
.	PONCT.W	.
"	PONCT.W	"
)	PONCT.W	)
)	PONCT.W	)
{	ET	{
echo	ET	echo
"	PONCT.W	"
<li><b>Repertoire</b>	N.P.m.s	<unknown>
:	PONCT.W	:
$Directory/$Entry</li>\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
<ul>	ET	çulà
"	PONCT.W	"
;	PONCT.W	;
ScanDir($Directory."/".$Entry)	N.P.x.s	<unknown>
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
</ul>	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
<li><b>Fichier</b>	N.P.m.s	<unknown>
:	PONCT.W	:
$Directory/$Entry	N.P.m.s	<unknown>
</li>\n	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
if	ET	if
(eregi("(\.html)|(\.htm)",$Entry)){	N.C.m.p	<unknown>
$MetaTags	N.P.x.s	<unknown>
=	PONCT.W	=
get_meta_tags($Directory."/".$Entry)	N.P.x.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
}	N.C.m.s	}
}	P+D.def.m.s	c
closedir($MyDirectory)	N.C.m.s	closedirçdydirectoryç
;	PONCT.W	;
}	D.card.m.s	}
}	N.C.m.s	}
}	N.C.m.s	}
$open_basedir=	N.P.x.s	<unknown>
"	PONCT.W	"
.	PONCT.W	.
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
<ul>	ET	çulà
"	PONCT.W	"
;	PONCT.W	;
ScanDir(".")	N.P.x.s	Scandirçëë
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
</ul>	N.P.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</BODY>	N.P.x.s	<unknown>
</HTML>	N.P.x.s	<unknown>

