PHP	N.C.m.s	php
(	PONCT.W	(
ET	C.C	et
MYSQL	N.P.m.s	Mysql
)	PONCT.W	)
Introduction	N.C.f.s	introduction
	P	à
HTML	N.P.m.s	<unknown>
:	PONCT.W	:
pages	N.C.f.p	page
destinées	VK.f.p	destiner
à	P	à
être	VW	être
publiées	VK.f.p	publier
sur	P	sur
Internet	N.P.m.s	Internet
Texte	N.P.m.s	Texte
à	P	à
afficher	VW	afficher
+	P	p
instructions	N.C.f.p	instruction
de	P	de
mise	N.C.f.s	mise
en	P	en
page	N.C.f.s	page
	P	à
Pas	ADV.neg	pas
d'	P	de
instructions	N.C.f.p	instruction
de	P	de
calcul	N.C.m.s	calcul
ou	C.C	ou
de	P	de
traitements	N.C.m.p	traitement
conditionnels	A.qual.m.p	conditionnel
	P	à
	N.C.m.s	
Des	P+D.def.m.p	du
sites	N.C.m.p	site
de	P	de
plus	ADV.-	plus
en	P	en
plus	ADV.-	plus
riches	A.qual.m.p	riche
en	P	en
informations	N.C.f.p	information
Nécessité	N.C.f.s	nécessité
croissante	A.qual.f.s	croissant
d'	P	de
améliorer	VW	améliorer
le	D.def.m.s	le
contenu	N.C.m.s	contenu
des	P+D.def.m.p	du
sites	N.C.m.p	site
	D.card.f.p	
Mises	VK.f.p	mettre
à	P	à
jour	N.C.m.s	jour
manuelles	A.qual.f.p	manuel
trop	ADV.-	trop
complexes	A.qual.f.p	complexe
	P	à
	N.C.m.s	
	N.C.m.s	
	P	à
Exemple	N.C.m.s	exemple
:	PONCT.W	:
modifier	VW	modifier
l'	D.def.f.s	le
entête	N.C.f.s	entête
sur	P	sur
plusieurs	D.ind.f.p	plusieurs
pages	N.C.f.p	page
!	PONCT.S	!

Besoin	N.C.m.s	besoin
de	P	de
réponses	N.C.f.p	réponse
spécifiques	A.qual.f.p	spécifique
liées	VK.f.p	lier
à	P	à
un	D.ind.m.s	un
BD	N.C.m.s	bd
par	P	par
exemple	N.C.m.s	exemple
Passage	N.P.m.s	Passage
de	P	de
sites	N.C.m.p	site
statiques	A.qual.m.p	statique
à	P	à
des	D.ind.m.p	du
sites	N.C.m.p	site
dynamiques	A.qual.m.p	dynamique
Web	N.P.m.s	Web
dynamique	A.qual.m.s	dynamique
–	P	à
coté	N.C.m.s	coté
client	N.C.m.s	client
	P	à
Traité	VK.m.s	traiter
par	P	par
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
:	PONCT.W	:
	D.card.m.p	
Résultats	N.C.m.p	résultat
variables	A.qual.m.p	variable
en	P	en
fonction	N.C.f.s	fonction
du	P+D.def.m.s	du
navigateur	N.C.m.s	navigateur
	P	à
Nécessité	N.C.f.s	nécessité
de	P	de
tests	N.C.m.p	test
importants	A.qual.m.p	important
	P	à
Indépendant	VG	indépendre
	P	à
Pas	ADV.neg	pas
	N.C.m.s	
du	P+D.def.m.s	du
serveur	N.C.m.s	serveur
de	P	de
rechargement	N.C.m.s	rechargement
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
,	PONCT.W	,
tout	PRO.ind.m.s	tout
est	V.P.3.s	être
fait	VK.m.s	faire
en	P	en
local	N.C.m.s	local
Confiance	N.C.f.s	confiance
:	PONCT.W	:
	D.card.f.p	
Sources	N.C.f.p	source
du	P+D.def.m.s	du
programme	N.C.m.s	programme
disponibles	A.qual.f.p	disponible
	P	à
Données	VK.f.p	donner
envoyées	VK.f.p	envoyer
au	P+D.def.m.s	au
serveur	N.C.m.s	serveur
pas	ADV.neg	pas
fiables	A.qual.f.p	fiable
	P+D.def.m.s	c
Base	N.C.m.s	base
de	P	de
données	N.C.f.p	donnée
stockée	VK.f.s	stocker
chez	P	chez
le	D.def.m.s	le
client	N.C.m.s	client
?	PONCT.S	?

Web	N.P.m.s	Web
dynamique	A.qual.m.s	dynamique
–	P	à
coté	N.C.m.s	coté
serveur	N.C.m.s	serveur
	P	à
L'	D.def.f.s	le
interprétation	N.C.f.s	interprétation
est	V.P.3.s	être
réalisée	VK.f.s	réaliser
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
:	PONCT.W	:
	N.C.m.s	
Indépendant	A.qual.m.s	indépendant
de	P	de
la	D.def.f.s	le
machine	N.C.f.s	machine
et	C.C	et
du	P+D.def.m.s	du
navigateur	N.C.m.s	navigateur
	N.C.m.s	
"	PONCT.W	"
Compatible	A.qual.m.s	compatible
"	PONCT.W	"
avec	P	avec
tous	A.ind.m.p	tous
les	D.def.m.p	le
navigateurs	N.C.m.p	navigateur
	P	à
Les	D.def.m.p	le
	N.C.m.p	
Les	D.def.m.p	le
	A.card.m.p	
échanges	N.C.m.p	échange
ne	ADV.neg	ne
concernent	V.P.3.p	concerner
que	ADV.neg	que
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
(	PONCT.W	(
ou	C.C	ou
Json	N.P.m.s	Json
ou	C.C	ou
autre	PRO.ind.m.s	autre
)	PONCT.W	)
sources	N.C.f.p	source
sont	V.P.3.p	être
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
donc	ADV.-	donc
invisibles	A.qual.m.p	invisible
Besoin	N.P.m.s	Besoin
d'	P	de
échanges	N.C.m.p	échange
entre	P	entre
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
et	C.C	et
le	D.def.m.s	le
serveur	N.C.m.s	serveur
	P	à
Rechargement	N.C.m.s	rechargement
	N.C.m.s	
Ou	C.C	ou
Ajax	N.P.m.s	Ajax
…	N.C.m.s	…
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
à	P	à
chaque	D.ind.f.s	chaque
modification	N.C.f.s	modification
Web	N.P.m.s	Web
dynamique	A.qual.m.s	dynamique
–	P	à
client	N.C.m.s	client
ou	C.C	ou
serveur	N.C.m.s	serveur
	N.C.m.s	
Il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
les	D.def.m.p	le
deux	A.card.m.p	deux
!	PONCT.S	!

	P+D.def.m.s	c
Script	ET	script
côté	N.C.m.s	côté
client	N.C.m.s	client
(	PONCT.W	(
Javascript	N.P.m.s	Javascript
)	PONCT.W	)
:	PONCT.W	:
Calculs	N.C.m.p	calcul
et	C.C	et
traitement	ADV.-	traitement
simples	A.qual.m.p	simple
	P	à
Mises	N.C.f.p	mise
à	P	à
jour	N.C.m.s	jour
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
web	N.C.m.s	web
sans	P	sans
rechargement	N.C.m.s	rechargement
(	PONCT.W	(
ajax	N.C.m.s	ajax
)	PONCT.W	)
	N.C.m.s	
	N.C.m.s	
Script	ET	script
côté	N.C.m.s	côté
serveur	N.C.m.s	serveur
(	PONCT.W	(
Php	N.P.x.s	Php
ou	C.C	ou
autre	PRO.ind.m.s	autre
)	PONCT.W	)
:	PONCT.W	:
Calculs	N.C.m.p	calcul
,	PONCT.W	,
traitements	N.C.m.p	traitement
plus	ADV.-	plus
conséquents	A.qual.m.p	conséquent
	D.card.f.p	
Requêtes	N.C.f.p	requête
vers	P	vers
une	D.ind.f.s	un
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
	P	à
Opérations	N.C.f.p	opération
sécurisées	VK.f.p	sécuriser
	P	à
Le	D.def.m.s	le
langage	N.C.m.s	langage
Php	N.P.x.s	Php
-	PONCT.W	-
histoire	N.C.f.s	histoire
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
PHP	N.P.m.s	Php
:	PONCT.W	:
Hypertext	N.P.m.s	Hypertext
PreProcessor	N.P.m.s	Preprocessor
La	D.def.f.s	le
première	A.ord.f.s	premier
version	N.C.f.s	version
de	P	de
PHP	N.P.m.s	Php
(	PONCT.W	(
Personal	N.P.m.s	Personal
Home	N.P.m.s	Home
Pages	N.P.m.s	Pages
)	PONCT.W	)
sort	V.P.3.s	sortir
en	P	en
1995	N.card.f.s	@card@
La	D.def.f.s	le
version	N.C.f.s	version
5.0	A.card.f.s	@card@
actuelle	A.qual.f.s	actuel
est	V.P.3.s	être
sortie	VK.f.s	sortir
en	P	en
2004	N.card.f.s	@card@
:	PONCT.W	:
	P	à
la	D.def.f.s	le
	A.card.f.s	
version	N.C.f.s	version
4.0	N.card.f.s	@card@
n'	ADV.neg	ne
est	V.P.3.s	être
plus	ADV.neg	plus
maintenue	VK.f.s	maintenir
depuis	P	depuis
août	N.C.m.s	août
2008	N.card.f.s	@card@
.	PONCT.S	.

Environ	ADV.-	environ
75	D.card.m.p	@card@
%	N.C.m.p	%
des	P+D.def.m.p	du
sites	N.C.m.p	site
web	N.C.m.s	web
dynamiques	A.qual.m.p	dynamique
utilisent	V.P.3.p	utiliser
php	ADV.-	php
.	PONCT.S	.

Le	D.def.m.s	le
langage	N.C.m.s	langage
Php	N.P.m.s	Php
	N.C.m.s	
	N.C.m.s	
Langage	N.C.m.s	langage
pour	P	pour
la	D.def.f.s	le
création	N.C.f.s	création
d'	P	de
applications	N.C.f.p	application
Web	N.P.m.s	Web
Exécution	N.C.f.s	exécution
coté	VK.m.s	coter
serveur	N.C.m.s	serveur
	N.C.m.s	
Indépendant	A.qual.m.s	indépendant
de	P	de
la	D.def.f.s	le
plate-forme	N.C.f.s	plate-forme
utilisée	VK.f.s	utiliser
	P	à
Facile	N.P.m.s	Facile
à	P	à
combiner	VW	combiner
avec	P	avec
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
et	C.C	et
une	D.ind.f.s	un
BD	N.P.m.s	Bd
	P	à
Logiciels	N.C.m.p	logiciel
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
tout	A.ind.m.s	tout
en	P	en
un	PRO.ind.m.s	un
(	PONCT.W	(
WampServer	N.P.m.s	Wampserver
,	PONCT.W	,
EasyPhp	N.P.m.s	<unknown>
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
.	PONCT.S	.

Gratuit	N.C.m.s	gratuit
,	PONCT.W	,
code	P	code
source	N.C.f.s	source
disponible	A.qual.f.s	disponible
Ecriture	N.C.f.s	ecriture
de	P	de
scripts	N.C.m.p	script
simples	A.qual.m.p	simple
Inclusion	N.C.f.s	inclusion
directe	A.qual.f.s	direct
de	P	de
Php	N.C.m.s	<unknown>
dans	P	dans
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
Le	D.def.m.s	le
langage	N.C.m.s	langage
Php	N.P.m.s	Php
	P	à
Programme	N.P.m.s	Programme
s'	CL.refl.3.m.s	se
exécutant	VG	exécuter
côté	VK.m.s	côter
serveur	N.C.m.s	serveur
Web	N.P.m.s	Web
	P	à
Extension	N.C.f.s	extension
.php	ET	<unknown>
pour	P	pour
les	D.def.f.p	le
pages	N.C.f.p	page
PHP	N.P.m.s	Php
	P	à
Fichiers	N.C.m.p	fichier
pouvant	VG	pouvoir
aussi	ADV.-	aussi
contenir	VW	contenir
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
	P	à
Les	D.def.m.p	le
fichiers	N.C.m.p	fichier
.php	A.qual.m.p	<unknown>
sont	V.P.3.p	être
stockés	VK.m.p	stocker
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
	P	à
Désignés	VK.m.p	désigner
par	P	par
une	D.ind.f.s	un
URL	N.P.f.s	Url
:	PONCT.W	:
http://www.lip6.fr/page.php	N.C.m.s	<unknown>
	P	à
Le	D.def.m.s	le
chargement	N.C.m.s	chargement
de	P	de
l'	D.def.f.s	le
URL	N.P.f.s	Url
provoque	V.P.3.s	provoquer
l'	D.def.f.s	le
exécution	N.C.f.s	exécution
côté	N.C.m.s	côté
serveur	N.C.m.s	serveur
	P	à
Le	D.def.m.s	le
script	N.C.m.s	script
Php	N.P.x.s	Php
va	V.P.3.s	aller
généralement	ADV.-	généralement
créer	VW	créer
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
Exemple	N.C.m.s	exemple
	C.S	
On	CL.suj.3.m.s	on
veut	V.P.3.s	vouloir
créer	VW	créer
la	D.def.f.s	le
page	N.C.f.s	page
web	N.C.m.s	web
ci-dessous	ADV.-	ci-dessous
	A.qual.m.s	
Pour	P	pour
un	D.ind.m.s	un
nombre	N.C.m.s	nombre
quelconque	A.qual.m.s	quelconque
de	P	de
valeurs	N.C.f.p	valeur
(	PONCT.W	(
venant	VG	venir
d'	P	de
un	D.ind.m.s	un
formulaire	N.C.m.s	formulaire
par	P	par
exemple	N.C.m.s	exemple
)	PONCT.W	)
.	PONCT.S	.

<html>	N.C.m.p	<unknown>
<body>	N.P.m.s	<unknown>
1	A.card.m.s	@card@
:	PONCT.W	:
1	D.card.m.s	@card@
<br	N.C.m.s	<unknown>
/>	N.C.m.s	<unknown>
2	A.card.m.s	@card@
:	PONCT.W	:
4	D.card.m.p	@card@
<br	N.C.m.p	<unknown>
/>	N.C.m.p	<unknown>
3	A.card.m.s	@card@
:	PONCT.W	:
9	D.card.m.p	@card@
<br	N.C.m.p	<unknown>
/>	N.C.m.p	<unknown>
</body>	N.P.x.s	<unknown>
</html>	ET	<unknown>
Version	N.P.f.s	Version
Javascript	N.P.m.s	Javascript
	P+D.def.m.s	c
Insertion	N.C.f.s	insertion
de	P	de
javascript	N.C.m.s	javascript
avec	P	avec
la	D.def.f.s	le
balise	N.C.f.s	balise
<script>	N.P.x.s	<unknown>
Boucle	V.P.3.s	boucler
for	N.C.f.s	for
classique	A.qual.m.s	classique
	P+D.def.m.s	c
Affichage	N.C.m.s	affichage
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
via	P	via
document.write	N.C.f.s	documentwite
	P	à
Concaténation	N.C.f.s	concaténation
de	P	de
chaînes	N.C.f.p	chaîne
avec	P	avec
le	D.def.m.s	le
signe	N.C.m.s	signe
+	P	p
	N.C.m.s	
	N.C.m.s	
Exécuté	VK.m.s	exécuter
par	P	par
le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
<html>	N.P.m.s	<unknown>
<body>	N.P.m.s	<unknown>
<script	ET	<unknown>
type="text/javascript">	N.C.m.s	<unknown>
for(var	ET	forçvar
i=1	N.C.f.s	<unknown>
;	PONCT.W	;
i<=3	N.C.m.p	<unknown>
;	PONCT.W	;
i++	N.C.m.s	iu
)	PONCT.W	)
document.write(i+	ET	documentwiteçi
"	PONCT.W	"
:	PONCT.W	:
"	PONCT.W	"
+i*i+"<br	N.C.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
</script>	N.P.x.s	<unknown>
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
Version	N.P.f.s	Version
Php	N.P.x.s	Php
	P+D.def.m.s	c
Insertion	N.C.f.s	insertion
de	P	de
Php	N.P.m.s	Php
avec	P	avec
la	D.def.f.s	le
balise	N.C.f.s	balise
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
Boucle	A.qual.m.s	boucle
for	N.C.f.s	for
classique	A.qual.m.s	classique
	P	à
Affichage	N.C.m.s	affichage
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
via	P	via
echo	N.C.m.s	echo
	P	à
Concaténation	N.C.f.s	concaténation
de	P	de
chaînes	N.C.f.p	chaîne
avec	P	avec
le	D.def.m.s	le
signe	N.C.m.s	signe
	N.C.m.s	
	N.C.m.s	
Exécuté	VK.m.s	exécuter
par	P	par
le	D.def.m.s	le
serveur	N.C.m.s	serveur
puis	C.C	pui
envoyé	VK.m.s	envoyer
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
<html>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
for	A.qual.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<=3	N.P.m.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
echo	ET	echo
$i	N.P.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

:	PONCT.W	:
"	PONCT.W	"
.($i*$i)."<br	N.C.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</body>	N.P.x.s	<unknown>
</html>	N.P.m.s	<unknown>
Différence	N.C.f.s	différence
entre	P	entre
Javascript	N.P.m.s	Javascript
et	C.C	et
Php	N.P.x.s	Php
	N.C.m.s	
Javascript	N.P.m.s	Javascript
:	PONCT.W	:
Le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
demande	V.P.3.s	demander
le	D.def.m.s	le
fichier	N.C.m.s	fichier
html	A.qual.m.s	<unknown>
	P	à
Le	D.def.m.s	le
fichier	N.C.m.s	fichier
html	A.qual.m.s	<unknown>
(	PONCT.W	(
contenant	VG	contenir
du	P+D.def.m.s	du
javascript	N.C.m.s	javascript
)	PONCT.W	)
est	V.P.3.s	être
envoyé	VK.m.s	envoyer
	P	à
Le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
exécute	V.P.3.s	exécuter
le	D.def.m.s	le
javascript	N.C.m.s	javascript
	P	à
L'	D.def.m.s	le
affichage	N.C.m.s	affichage
est	V.P.3.s	être
fait	VK.m.s	faire
de	P	de
manière	N.C.f.s	manière
dynamique	A.qual.f.s	dynamique
	A.qual.f.s	
	P	à
Php	N.P.x.s	Php
:	PONCT.W	:
Le	D.def.m.s	le
navigateur	N.C.m.s	navigateur
demande	V.P.3.s	demander
le	D.def.m.s	le
fichier	N.C.m.s	fichier
php	N.C.m.s	<unknown>
	P	à
Le	D.def.m.s	le
serveur	N.C.m.s	serveur
exécute	V.P.3.s	exécuter
le	D.def.m.s	le
code	N.C.m.s	code
php	N.C.m.s	<unknown>
et	C.C	et
envoie	V.P.3.s	envoyer
le	D.def.m.s	le
résultat	N.C.m.s	résultat
	P	à
La	D.def.f.s	le
page	N.C.f.s	page
envoyée	VK.f.s	envoyer
au	P+D.def.m.s	au
navigateur	N.C.m.s	navigateur
est	V.P.3.s	être
affichée	VK.f.s	afficher
	P	à
Code	N.P.m.s	Code
Php	N.P.m.s	Php
–	P	à
autre	A.ind.f.s	autre
version	N.C.f.s	version
	P	à
Seules	A.qual.f.p	seul
les	D.def.f.p	le
parties	N.C.f.p	partie
purement	ADV.-	purement
dynamiques	A.qual.f.p	dynamique
sont	V.P.3.p	être
faites	VK.f.p	faire
en	P	en
Php	N.C.f.s	<unknown>
Tout	A.ind.m.s	tout
le	D.def.m.s	le
reste	N.C.m.s	reste
est	V.P.3.s	être
du	P+D.def.m.s	du
html	N.C.m.s	<unknown>
de	P	de
base	N.C.f.s	base
	P	à
Pas	ADV.neg	pas
forcément	ADV.-	forcément
très	ADV.-	très
lisible	A.qual.m.s	lisible
	P	à
<html>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
for	A.qual.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<=3	N.P.m.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	N.C.m.s	{
?	PONCT.S	?

>	N.C.m.s	>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
$i	ADV.-	çi
?	PONCT.S	?

>	N.C.m.s	>
:	PONCT.W	:
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
$i*$i	N.P.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

><br	N.C.m.s	<unknown>
/>	C.C	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
}	N.C.m.s	}
?	PONCT.S	?

>	P	à
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
Code	ET	code
Php	ET	<unknown>
–	P	à
autre	A.ind.f.s	autre
version	N.C.f.s	version
	P	à
Tout	A.ind.m.s	tout
le	D.def.m.s	le
fichier	N.C.m.s	fichier
html	A.qual.m.s	<unknown>
est	V.P.3.s	être
créé	VK.m.s	créer
en	P	en
Php	N.P.m.s	Php
:	PONCT.W	:
	P	à
Syntaxe	N.P.m.s	Syntaxe
assez	ADV.-	assez
lourde	A.qual.f.s	lourd
<	N.P.m.s	<
?	PONCT.S	?

php	ET	<unknown>
echo	ET	echo
"	PONCT.W	"
<html>\n	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
<body>\n	ET	äbodyään
"	PONCT.W	"
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<=3	N.P.m.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P	à
echo	ET	echo
$i	N.P.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

:	PONCT.W	:
"	PONCT.W	"
.($i*$i)."<br	N.C.m.s	<unknown>
/>\n	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
echo	ET	echo
"	PONCT.W	"
</body>\n	ET	çmbodyään
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
</html>\n	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
PHP	N.C.m.s	php
-	PONCT.W	-
SYNTAXE	N.C.m.s	syntaxe
VARIABLES	N.P.m.s	Variables
Variables	N.P.m.s	Variables
	P	à
Une	D.ind.f.s	un
variable	N.C.f.s	variable
est	V.P.3.s	être
toujours	ADV.-	toujours
précédée	VK.f.s	précéder
de	P	de
$	N.C.m.s	$
	N.C.m.s	
	P	à
Types	N.P.m.s	Types
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
$i	N.P.f.s	<unknown>
est	V.P.3.s	être
une	D.ind.f.s	un
variable	N.C.f.s	variable
qui	PRO.rel.f.s	qui
s'	CL.refl.3.f.s	se
appelle	V.P.3.s	appeler
i	ADV.-	i
Entiers	N.C.m.p	entier
,	PONCT.W	,
réels	A.qual.m.p	réel
,	PONCT.W	,
chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
,	PONCT.W	,
objets	N.C.m.p	objet
Pas	ADV.neg	pas
de	P	de
déclaration	N.C.f.s	déclaration
explicite	A.qual.f.s	explicite
,	PONCT.W	,
l'	D.def.f.s	le
affectation	N.C.f.s	affectation
d'	P	de
une	D.ind.f.s	un
valeur	N.C.f.s	valeur
suffit	V.P.3.s	suffire
	N.C.m.s	
	D.card.f.p	
Affectation	N.C.f.s	affectation
par	P	par
valeur	N.C.f.s	valeur
:	PONCT.W	:
$i=0	N.C.f.s	<unknown>
Affectation	N.C.f.s	affectation
par	P	par
(	PONCT.W	(
référence	N.C.f.s	référence
)	PONCT.W	)
variable	A.qual.f.s	variable
:	PONCT.W	:
$j	N.P.m.s	<unknown>
=	PONCT.W	=
&$i	N.C.m.s	ççi
	N.C.m.s	
	D.card.m.s	
Changement	N.C.m.s	changement
de	P	de
type	N.C.m.s	type
automatique	A.qual.m.s	automatique
:	PONCT.W	:
	N.C.m.s	
	P	à
la	D.def.f.s	le
modification	N.C.f.s	modification
de	P	de
$i	N.C.m.s	çi
modifie	V.P.3.s	modifier
$j	N.P.m.s	<unknown>
(	PONCT.W	(
comme	P	comme
les	D.def.m.p	le
pointeurs	N.C.m.p	pointeur
en	P	en
C	N.P.m.s	C
)	PONCT.W	)
$compteur="premier	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Valeur	N.C.f.s	valeur
par	P	par
défaut	N.C.m.s	défaut
avant	P	avant
l'	D.def.f.s	le
affectation	N.C.f.s	affectation
	P	à
Attention	N.C.f.s	attention
si	C.S	si
on	CL.suj.3.m.s	on
essaye	V.P.3.s	essayer
de	P	de
lire	VW	lire
son	D.poss.m.s	son
contenu	N.C.m.s	contenu
!	PONCT.S	!

Variables	N.C.f.p	variable
	P	à
Variable	A.qual.f.s	variable
locale	A.qual.f.s	local
	N.C.m.s	
	N.C.m.s	
Visible	A.qual.m.s	visible
uniquement	ADV.-	uniquement
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
un	D.ind.m.s	un
contexte	N.C.m.s	contexte
d'	P	de
utilisation	N.C.f.s	utilisation
Variable	A.qual.m.s	variable
globale	A.qual.f.s	global
	N.C.m.s	
	N.C.m.s	
Visible	A.qual.m.s	visible
dans	P	dans
tout	A.ind.m.s	tout
le	D.def.m.s	le
script	N.C.m.s	script
Utilisation	N.C.f.s	utilisation
de	P	de
l'	D.def.f.s	le
instruction	N.C.f.s	instruction
"	PONCT.W	"
global	A.qual.m.s	global
"	PONCT.W	"
pour	P	pour
accéder	VW	accéder
à	P	à
une	D.ind.f.s	un
variable	N.C.f.s	variable
globale	A.qual.f.s	global
dans	P	dans
des	D.ind.m.p	du
contextes	N.C.m.p	contexte
locaux	A.qual.m.p	local
$var	P	<unknown>
=	P	à
1	N.card.m.s	@card@
;	PONCT.W	;
function	N.C.f.s	function
test(){	ET	testüëë
global	A.qual.m.s	global
$var	N.P.x.s	<unknown>
;	PONCT.W	;
echo	ET	echo
$var	N.P.x.s	<unknown>
;	PONCT.W	;
}	D.card.f.p	}
Chaînes	N.C.f.p	chaîne
de	P	de
caractères	N.C.m.p	caractère
	P	à
Création/affectation	N.P.x.s	<unknown>
entre	P	entre
guillemets	N.C.m.p	guillemet
	N.C.m.s	
	N.C.m.s	
Concaténation	N.C.f.s	concaténation
avec	P	avec
le	D.def.m.s	le
signe	N.C.m.s	signe
.	PONCT.S	.

	N.C.m.s	
	N.C.m.s	
$test="a	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$test="bonjour	N.P.m.s	<unknown>
"	PONCT.W	"
.	PONCT.S	.

"	PONCT.W	"
au	P+D.def.m.s	au
revoir	N.C.m.s	revoir
"	PONCT.W	"
;	PONCT.W	;
Substitutions	N.C.f.p	substitution
possible	A.qual.m.s	possible
de	P	de
variables	N.C.f.p	variable
à	P	à
l'	D.def.m.s	le
intérieur	N.C.m.s	intérieur
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
"	PONCT.W	"
x	D.card.m.p	x
$test	N.C.m.s	<unknown>
x	N.C.m.p	x
"	PONCT.W	"
est	V.P.3.s	être
similaire	A.qual.m.s	similaire
à	P	à
"	PONCT.W	"
x	N.card.m.s	x
"	PONCT.W	"
.$test	N.P.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

x	D.card.m.p	x
"	PONCT.W	"
pas	ADV.neg	pas
de	P	de
substitution	N.C.f.s	substitution
avec	P	avec
des	D.ind.f.p	du
apostrophes	N.C.f.p	apostrophe
	P	à
	N.C.m.s	
'	PONCT.W	'
x	A.card.m.s	X
$test	N.C.m.s	<unknown>
x	D.card.m.p	x
'	N.card.m.p	'
;	PONCT.W	;
//	PONCT.W	@card@
"	PONCT.W	"
x	D.card.m.p	x
$test	V.P.3.s	être
x	D.card.m.p	x
"	PONCT.W	"
Encodages	N.C.m.p	encodage
des	P+D.def.m.p	du
caractères	N.C.m.p	caractère
spéciaux	A.qual.m.p	spécial
obligatoire	A.qual.m.s	obligatoire
:	PONCT.W	:
	D.card.m.s	
\$	N.C.m.p	çù
\\	N.C.m.p	çù
\n	N.C.m.s	<unknown>
\t	N.C.m.s	<unknown>
\	N.C.m.s	\
"	PONCT.W	"
…	D.card.f.p	…
Création	N.C.f.s	création
de	P	de
variables	N.C.f.p	variable
dynamiques	A.qual.f.p	dynamique
	P	à
Possibilité	N.C.f.s	possibilité
de	P	de
créer	VW	créer
une	D.ind.f.s	un
variable	N.C.f.s	variable
dynamique	A.qual.f.s	dynamique
:	PONCT.W	:
	D.card.f.p	
Création	N.C.f.s	création
à	P	à
partir	VW	partir
du	P+D.def.m.s	du
contenu	N.C.m.s	contenu
d'	P	de
une	D.ind.f.s	un
autre	A.qual.f.s	autre
variable	N.C.f.s	variable
.	PONCT.S	.

$var="test	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$$var="test2	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
//	PONCT.W	@card@
similaire	A.qual.m.s	similaire
à	P	à
$test="test2	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
$var	N.P.m.s	<unknown>
$test	N.P.m.s	<unknown>
${$var	N.P.x.s	<unknown>
}	N.C.m.s	}
"	PONCT.W	"
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
"	PONCT.W	"
test	V.P.3.s	tenir
test2	VK.m.s	<unknown>
test2	N.C.m.s	<unknown>
"	PONCT.W	"
//	PONCT.W	@card@
similaire	N.C.m.s	similaire
avec	P	avec
des	D.ind.m.p	du
tableaux	N.C.m.p	tableau
$nom_variable	A.qual.m.p	çnomçvariable
=	PONCT.W	=
array("val0	N.C.m.s	<unknown>
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
val1	N.C.f.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
${$nom_variable[0	N.C.m.s	<unknown>
]	PONCT.W	]
}	N.C.m.s	}
=	PONCT.W	=
"	PONCT.W	"
x	N.C.m.p	x
"	PONCT.W	"
;	PONCT.W	;
Opérations	N.C.f.p	opération
sur	P	sur
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
	P	à
Longueur	N.C.f.s	longueur
d'	P	de
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
strlen	A.qual.f.s	<unknown>
	P+D.def.m.s	c
strlen($str)	N.C.m.s	<unknown>
	P+D.def.m.s	c
Comparaison	N.C.f.s	comparaison
==	V.P.3.s	cevoir
	P+D.def.m.s	c
$x	N.C.m.s	cx
	N.C.m.s	
==	V.P.3.s	cevoir
$y	N.P.m.s	<unknown>
Concaténation	N.C.f.s	concaténation
.	PONCT.S	.

	N.C.m.s	
$x.$y	N.P.m.s	<unknown>
	D.card.f.p	
Nombreuses	A.qual.f.p	nombreux
fonctions	N.C.f.p	fonction
de	P	de
manipulation	N.C.f.s	manipulation
disponibles	A.qual.f.p	disponible
Fonctions	N.C.f.p	fonction
sur	P	sur
les	D.def.f.p	le
chaînes	N.C.f.p	chaîne
	P	à
Afficher	VW	afficher
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
:	PONCT.W	:
	N.C.m.s	
	P	à
Retourner	VW	retourner
un	D.ind.m.s	un
morceau	N.C.m.s	morceau
d'	P	de
un	D.ind.m.s	un
chaîne	N.C.f.s	chaîne
:	PONCT.W	:
substr($chaine	N.C.f.s	substrçchain
,	PONCT.W	,
$debut	N.P.m.s	<unknown>
,	PONCT.W	,
$longueur	N.C.m.s	çlongueur
)	PONCT.W	)
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
$debut	N.C.m.s	<unknown>
peut	V.P.3.s	pouvoir
être	VW	être
négatif	A.qual.m.s	négatif
:	PONCT.W	:
en	P	en
partant	VG	partir
de	P	de
la	D.def.f.s	le
fin	N.C.f.s	fin
$longueur	N.C.f.s	çlongueur
est	V.P.3.s	être
facultatif	A.qual.m.s	facultatif
:	PONCT.W	:
toute	A.ind.f.s	tout
la	D.def.f.s	le
fin	N.C.f.s	fin
de	P	de
la	D.def.f.s	le
chaîne	N.C.f.s	chaîne
est	V.P.3.s	être
retournée	VK.f.s	retourner
Couper	VW	couper
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
en	P	en
morceaux	N.C.m.p	morceau
avec	P	avec
un	D.ind.m.s	un
délimiteur	N.C.m.s	délimiteur
:	PONCT.W	:
	N.C.m.s	
	P	à
echo	ET	echo
$chaine	A.qual.f.s	çchain
;	PONCT.W	;
…	P+D.def.m.s	c
$tableau	N.C.m.s	<unknown>
=	PONCT.W	=
explode($delimiteur	N.C.m.s	explodeëdelimiteur
,	PONCT.W	,
$chaine	N.P.f.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
INSTRUCTIONS	N.P.x.s	Instructions
Instructions	N.C.f.p	instruction
conditionnelles	A.qual.f.p	conditionnel
	P	à
if	ET	if
then	ET	then
else	PPRO.3.f.s	<unknown>
	P	à
définition	N.C.f.s	définition
spéciale	A.qual.f.s	spécial
pour	P	pour
le	D.def.m.s	le
else	ET	else
if	A.qual.m.s	if
(	PONCT.W	(
pas	ADV.neg	pas
obligatoire	A.qual.m.s	obligatoire
)	PONCT.W	)
if	ET	if
(	PONCT.W	(
cond	N.C.m.s	cond
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P+D.def.m.s	c
elseif	N.C.m.s	<unknown>
(	PONCT.W	(
cond	N.C.m.s	cond
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
else	PPRO.3.f.s	<unknown>
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
//	PONCT.W	@card@
version	N.C.f.s	version
courte	A.qual.f.s	court
:	PONCT.W	:
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
?	PONCT.S	?

instructionSiVrai:instructionSiFaux	A.qual.m.p	<unknown>
;	PONCT.W	;
Instructions	N.C.f.p	instruction
conditionnelles	A.qual.f.p	conditionnel
	P	à
switch	N.C.m.s	switch
(	PONCT.W	(
…	N.C.m.s	…
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
…	N.C.m.s	…
:	PONCT.W	:
…	N.C.m.s	…
;	PONCT.W	;
}	ET	}
switch	N.C.m.s	switch
(	PONCT.W	(
expression	N.C.f.s	expression
)	PONCT.W	)
{	P	à
case	N.C.f.s	case
"	PONCT.W	"
1	N.card.m.s	@card@
"	PONCT.W	"
:	PONCT.W	:
...	PONCT.W	<unknown>
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
case	N.C.f.s	case
"	PONCT.W	"
2	N.card.m.s	@card@
"	PONCT.W	"
:	PONCT.W	:
...	PONCT.W	<unknown>
;	PONCT.W	;
break	N.C.m.s	break
;	PONCT.W	;
case	N.C.f.s	case
"	PONCT.W	"
3	N.card.m.s	@card@
"	PONCT.W	"
:	PONCT.W	:
...	PONCT.W	<unknown>
;	PONCT.W	;
break	ET	break
;	PONCT.W	;
default	N.C.m.s	default
:	PONCT.W	:
...	PONCT.W	<unknown>
}	N.C.m.s	}
Boucles	N.C.m.p	boucle
	P	à
Boucles	N.P.m.s	Boucles
for	N.C.m.s	for
:	PONCT.W	:
	P	à
for	N.C.m.s	for
	N.C.m.s	
(	PONCT.W	(
initialisation	N.C.f.s	initialisation
;	PONCT.W	;
condition	N.C.f.s	condition
;	PONCT.W	;
increment	N.C.m.s	increment
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	P	à
Boucles	N.P.m.s	Boucles
while	N.C.m.s	while
:	PONCT.W	:
	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
	N.C.m.s	
do	P+D.def.m.s	do
{	N.C.m.s	{
...	PONCT.W	<unknown>
}	N.C.m.s	}
while	N.C.m.s	while
(	PONCT.W	(
condition	N.C.f.s	condition
)	PONCT.W	)
;	PONCT.W	;
Instructions	N.C.f.p	instruction
conditionnelles	A.qual.f.p	conditionnel
	P	à
Saut	N.C.m.s	saut
inconditionnel	A.qual.m.s	inconditionnel
	N.C.m.s	
	P+D.def.m.s	c
Arrêt	N.C.m.s	arrêt
inconditionnel	A.qual.m.s	inconditionnel
	P	à
	P	à
continue	V.P.3.s	continuer
:	PONCT.W	:
termine	V.P.3.s	terminer
l'	D.def.f.s	le
itération	N.C.f.s	itération
courante	A.qual.f.s	courant
de	P	de
la	D.def.f.s	le
boucle	A.qual.f.s	boucle
break	N.C.m.s	break
:	PONCT.W	:
termine	V.P.3.s	terminer
la	D.def.f.s	le
boucle	N.C.f.s	boucle
complètement	ADV.-	complètement
Arrêt	N.C.m.s	arrêt
d'	P	de
exécution	N.C.f.s	exécution
du	P+D.def.m.s	du
script	N.C.m.s	script
	P	à
exit	V.P.3.s	exir
:	PONCT.W	:
termine	V.P.3.s	terminer
le	D.def.m.s	le
script	N.C.m.s	script
for	A.qual.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<=10	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
$i	N.C.f.s	çi
==	P+D.def.m.s	çù
5	N.card.m.s	@card@
)	PONCT.W	)
continue	V.P.3.s	continuer
;	PONCT.W	;
echo	ET	echo
$i."<br	N.P.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
for	N.C.m.s	for
(	PONCT.W	(
$i=1	N.C.f.s	<unknown>
;	PONCT.W	;
$i<=10	N.P.m.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
$i	N.C.f.s	çi
==	P+D.def.m.s	çù
5	N.card.m.s	@card@
)	PONCT.W	)
break	ET	break
;	PONCT.W	;
echo	ET	echo
$i."<br	N.P.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
sauf	P	sauf
5	A.card.m.s	@card@
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
jusqu'	P	jusque
à	P	à
5	N.card.m.s	@card@
(	PONCT.W	(
exclu	VK.m.s	exclure
)	PONCT.W	)
TABLEAUX	N.C.m.p	tableau
Les	D.def.m.p	le
tableaux	N.C.m.p	tableau
	P	à
Création	N.C.f.s	création
à	P	à
l'	D.def.f.s	le
aide	N.C.f.s	aide
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
array()	N.C.m.s	arrayçë
	P+D.def.m.s	c
$tableau	N.C.m.s	<unknown>
	N.C.m.s	
=	V.P.3.s	être
array(1	N.C.m.s	<unknown>
,	PONCT.W	,
"	PONCT.W	"
deux	PRO.card.m.p	deux
"	PONCT.W	"
,	PONCT.W	,
3	D.card.m.p	@card@
)	PONCT.W	)
;	PONCT.W	;
Tableaux	N.C.m.p	tableau
à	P	à
une	D.ind.f.s	un
dimension	N.C.f.s	dimension
	P	à
Les	D.def.m.p	le
éléments	N.C.m.p	élément
peuvent	V.P.3.p	pouvoir
être	VW	être
de	P	de
différents	A.qual.m.p	différent
types	N.C.m.p	type
	P	à
L'	D.def.m.s	le
index	N.C.m.s	index
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
commence	V.P.3.s	commencer
à	P	à
0	D.card.m.s	@card@
	N.C.m.s	
Fonction	N.C.f.s	fonction
:	PONCT.W	:
	D.card.m.p	
count()	N.C.m.s	countçë
pour	P	pour
avoir	VW	avoir
le	D.def.m.s	le
nombre	N.C.m.s	nombre
d'	P	de
éléments	N.C.m.p	élément
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
Tableaux	A.qual.m.p	tableau
simples	A.qual.m.p	simple
	P	à
Association	N.C.f.s	association
numéro	N.C.m.s	numéro
-	PONCT.W	-
valeur	N.C.f.s	valeur
//	PONCT.W	@card@
Création	N.C.f.s	création
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
$tableau	A.qual.m.s	<unknown>
=	PONCT.W	=
array(valeur0	N.C.m.s	<unknown>
,	PONCT.W	,
valeur1	N.C.f.s	<unknown>
,	PONCT.W	,
...	PONCT.W	<unknown>
,	PONCT.W	,
valeurN	N.C.f.s	valeurn
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Affectation	N.C.f.s	affectation
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$tableau[indice	N.C.m.s	<unknown>
]	PONCT.W	]
=	P	à
valeur	N.C.f.s	valeur
;	PONCT.W	;
//	PONCT.W	@card@
Récupération	N.C.f.s	récupération
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$variable	A.qual.m.s	çvariable
=	PONCT.W	=
$tableau[indice	N.C.m.s	<unknown>
]	PONCT.W	]
;	PONCT.W	;
//	PONCT.W	@card@
Parcours	N.P.m.s	Parcours
version	N.C.f.s	version
1	D.card.m.s	@card@
for	N.C.m.s	for
(	PONCT.W	(
$i=0	N.P.m.s	<unknown>
;	PONCT.W	;
$i<count($tableau)	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
echo	ET	echo
$i	N.P.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

"	PONCT.W	"
.$tableau[$i]."<br	N.C.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
//	PONCT.W	@card@
Parcours	N.P.m.s	Parcours
version	N.C.f.s	version
2	A.card.m.s	@card@
foreach($tableau	N.C.m.s	foreachëëtableau
as	ET	as
$valeur	N.C.f.s	çvaleur
)	PONCT.W	)
echo	ET	echo
$valeur."<br	N.P.x.s	<unknown>
/>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Tableaux	N.C.m.p	tableau
associatifs	A.qual.m.p	associatif
	P	à
Associations	N.C.f.p	association
clé	N.C.f.s	clé
d'	P	de
index	N.C.m.s	index
-	PONCT.W	-
valeur	N.C.f.s	valeur
//	PONCT.W	@card@
Création	N.C.f.s	création
du	P+D.def.m.s	du
tableau	N.C.m.s	tableau
$tableau	A.qual.m.s	<unknown>
=	PONCT.W	=
array(cle0	N.C.m.s	<unknown>
=>	N.P.x.s	<unknown>
val0	N.C.f.p	<unknown>
,	PONCT.W	,
cle1	PRO.dem.f.s	<unknown>
=>	N.P.x.s	<unknown>
val1	V.P.3.s	valoir
,	PONCT.W	,
...	PONCT.W	<unknown>
,	PONCT.W	,
cleN	N.C.m.s	clen
=>	N.P.x.s	<unknown>
valN	N.C.m.s	valn
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Affectation	N.C.f.s	affectation
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$tableau["cle	N.C.m.s	çtableauçle
"	PONCT.W	"
]	PONCT.W	]
=	V.P.3.s	être
valeur	N.C.f.s	valeur
;	PONCT.W	;
//	PONCT.W	@card@
Récupération	N.C.f.s	récupération
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$variable	A.qual.m.s	çvariable
=	PONCT.W	=
$tableau["cle	N.C.m.s	çtableauçle
"	PONCT.W	"
]	PONCT.W	]
;	PONCT.W	;
//	PONCT.W	@card@
Parcours	N.P.m.s	Parcours
version	N.C.f.s	version
1	D.card.m.s	@card@
foreach($tableau	N.C.m.s	foreachëëtableau
as	ET	as
$cle	N.C.m.s	ccle
=>	N.P.x.s	<unknown>
$valeur	N.C.f.s	çvaleur
)	PONCT.W	)
echo	ET	echo
$cle	N.C.m.s	ccle
.	PONCT.W	.
"	PONCT.S	"

"	PONCT.W	"
.$valeur."<br	ET	<unknown>
/>	N.C.m.p	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Parcours	N.P.x.s	Parcours
version	N.C.f.s	version
2	A.card.m.s	@card@
reset($tableau)	V.I.3.s	<unknown>
;	PONCT.W	;
while	N.C.m.s	while
(	PONCT.W	(
list($cle	N.C.m.s	listçäcle
,	PONCT.W	,
$valeur	N.C.f.s	çvaleur
)	PONCT.W	)
=	V.P.3.s	être
each($tableau))	N.P.x.s	Eachëëtableauç
echo	ET	echo
$cle	ET	ccle
.	PONCT.W	.
"	PONCT.S	"

"	PONCT.W	"
.$valeur."<br	ET	<unknown>
/>	N.C.m.p	<unknown>
;	PONCT.W	;
Tableaux	N.C.m.p	tableau
multidimensionnels	A.qual.m.p	multidimensionnel
	P	à
Pas	ADV.neg	pas
de	P	de
méthode	N.C.f.s	méthode
de	P	de
création	N.C.f.s	création
native	A.qual.f.s	natif
:	PONCT.W	:
	N.card.m.s	
On	CL.suj.3.m.s	on
imbrique	V.P.3.s	imbriquer
des	D.ind.m.p	du
tableaux	N.C.m.p	tableau
.	PONCT.S	.

//	PONCT.W	@card@
Création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
à	P	à
deux	D.card.f.p	deux
dimensions	N.C.f.p	dimension
$tab1	A.qual.m.s	<unknown>
=	PONCT.W	=
array(Val0	N.C.m.s	<unknown>
,	PONCT.W	,
Val1	N.P.m.s	Val1
,	PONCT.W	,
...	PONCT.W	<unknown>
,	PONCT.W	,
ValN	N.P.m.s	Valn
)	PONCT.W	)
;	PONCT.W	;
$tab2	N.P.m.s	<unknown>
=	PONCT.W	=
array(Val0	N.C.m.s	<unknown>
,	PONCT.W	,
Val1	N.P.f.s	Val1
,	PONCT.W	,
...	PONCT.W	<unknown>
,	PONCT.W	,
ValN	N.P.m.s	Valn
)	PONCT.W	)
;	PONCT.W	;
$tableau	N.C.m.s	<unknown>
=	PONCT.W	=
array($tab1	N.C.m.s	<unknown>
,	PONCT.W	,
$tab2	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
//	PONCT.W	@card@
Affectation	N.C.f.s	affectation
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$tableau[indice][indice	N.C.m.s	<unknown>
]	PONCT.W	]
=	V.P.3.s	être
$variable	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
Récupération	N.C.f.s	récupération
d'	P	de
un	D.ind.m.s	un
élément	N.C.m.s	élément
$variable	A.qual.m.s	çvariable
=	PONCT.W	=
$tableau[indice][indice	N.C.m.s	<unknown>
]	PONCT.W	]
;	PONCT.W	;
//	PONCT.W	@card@
Parcours	N.P.m.s	Parcours
for	N.C.m.s	for
(	PONCT.W	(
$i=0	N.P.m.s	<unknown>
;	PONCT.W	;
$i<count($tableau)	N.P.x.s	<unknown>
;	PONCT.W	;
$i++	N.P.x.s	<unknown>
)	PONCT.W	)
for	N.C.m.s	for
(	PONCT.W	(
$j=0	N.P.f.s	<unknown>
;	PONCT.W	;
$j<count($tableau[$i])	N.P.m.s	<unknown>
;	PONCT.W	;
$j++	N.P.x.s	<unknown>
)	PONCT.W	)
echo	ET	echo
$i	N.P.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

"	PONCT.W	"
.$j	N.C.m.s	<unknown>
.	PONCT.W	.
"	PONCT.S	"

"	PONCT.W	"
.$tableau[$i][$j]."<br	N.C.m.s	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
Fonctions	N.C.f.p	fonction
sur	P	sur
les	D.def.m.p	le
tableaux	N.C.m.p	tableau
	P	à
Taille	N.P.f.s	Taille
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
:	PONCT.W	:
	N.C.m.s	
	P	à
Compter	VW	compter
le	D.def.m.s	le
nombre	N.C.m.s	nombre
d'	P	de
occurrences	N.C.f.p	occurrence
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
d'	P	de
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
$tab2	N.C.m.s	<unknown>
=	PONCT.W	=
array_map("fonction	N.C.f.s	arrayämapççfonction
"	PONCT.W	"
,	PONCT.W	,
$tab	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
Filtrage	N.C.m.s	filtrage
par	P	par
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
(	PONCT.W	(
supprime	V.P.3.s	supprimer
les	D.def.m.p	le
éléments	N.C.m.p	élément
ne	ADV.neg	ne
vérifiant	VG	vérifier
pas	ADV.neg	pas
le	D.def.m.s	le
critère	N.C.m.s	critère
)	PONCT.W	)
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
sort($tab)	N.C.m.s	sortçëtabë
;	PONCT.W	;
//	PONCT.W	@card@
selon	P	selon
les	D.def.f.p	le
valeurs	N.C.f.p	valeur
ksort($tab)	A.qual.f.p	ksortçëtabë
;	PONCT.W	;
//	PONCT.W	@card@
selon	P	selon
les	D.def.m.p	le
clefs	N.C.m.p	clef
Mappage	N.P.x.s	Mappage
par	P	par
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
(	PONCT.W	(
applique	V.P.3.s	appliquer
la	D.def.f.s	le
fonction	N.C.f.s	fonction
à	P	à
tous	A.ind.m.p	tous
les	D.def.m.p	le
éléments	N.C.m.p	élément
)	PONCT.W	)
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
$tab2	N.C.m.s	<unknown>
=	PONCT.W	=
array_count_values($tab)	N.C.m.s	arrayccount-valuesçëtabë
;	PONCT.W	;
Tri	N.P.x.s	Tri
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
count()	N.C.m.s	countçë
$tab2	N.P.m.s	<unknown>
=	PONCT.W	=
array_filter($tab	N.C.m.s	arrayçfilterçtab
,	PONCT.W	,
"	PONCT.W	"
fonction	N.C.f.s	fonction
"	PONCT.W	"
)	PONCT.W	)
Intervertir	VW	intervertir
les	D.def.m.p	le
clefs	N.C.m.p	clef
et	C.C	et
valeurs	N.C.f.p	valeur
:	PONCT.W	:
	P	à
$tab2	N.P.m.s	<unknown>
=	PONCT.W	=
array_flip($tab)	N.C.m.s	arrayçflipç-tabë
;	PONCT.W	;
FONCTIONS	N.C.f.p	fonction
Fonctions	N.C.f.p	fonction
	P	à
Pas	ADV.neg	pas
de	P	de
typage	N.C.m.s	typage
Arguments	N.C.m.p	argument
	P	à
Valeur	N.C.f.s	valeur
de	P	de
retour	N.C.m.s	retour
	N.C.m.s	
	P	à
Récursivité	N.C.f.s	récursivité
possible	A.qual.f.s	possible
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
//	PONCT.W	@card@
définition	N.C.f.s	définition
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
factorielle	A.qual.f.s	factoriel
function	N.C.f.s	function
factorielle($n)	A.qual.f.s	factorielleçnç
{	P	à
if	N.C.m.s	if
(	PONCT.W	(
$n<2	N.P.x.s	<unknown>
)	PONCT.W	)
return	N.C.m.s	return
1	A.card.f.s	@card@
;	PONCT.W	;
else	CL.suj.3.f.s	else
return	N.C.m.s	return
$n*factorielle($n-1)	N.P.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
appel	N.C.m.s	appel
de	P	de
la	D.def.f.s	le
fonction	N.C.f.s	fonction
et	C.C	et
afficahage	N.C.m.s	afficahage
du	P+D.def.m.s	du
résultat	N.C.m.s	résultat
echo	ET	echo
factorielle(3)	A.ind.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	D.card.f.p	>
Fonctions	N.C.f.p	fonction
	P	à
Valeurs	N.C.f.p	valeur
par	P	par
défaut	N.C.m.s	défaut
possibles	A.qual.f.p	possible
pour	P	pour
les	D.def.m.p	le
arguments	N.C.m.p	argument
	P	à
	N.C.m.s	
	N.C.m.s	
	P	à
Tous	A.ind.m.p	tous
les	D.def.m.p	le
arguments	N.C.m.p	argument
peuvent	V.P.3.p	pouvoir
avoir	VW	avoir
des	D.ind.f.p	du
valeurs	N.C.f.p	valeur
par	P	par
défaut	N.C.m.s	défaut
function	N.C.f.s	function
racine($x	N.P.m.s	Racineççx
,	PONCT.W	,
$racine=2	N.P.m.s	<unknown>
)	PONCT.W	)
{	N.C.m.s	{
}	N.C.m.s	}
Appel	N.P.m.s	Appel
:	PONCT.W	:
racine($a	ET	racineçça
,	PONCT.W	,
$b	N.C.m.s	bb
)	PONCT.W	)
ou	C.C	ou
racine($a)	N.C.m.s	racineçhaë
Valeurs	N.P.m.s	Valeurs
par	P	par
défaut	N.C.m.s	défaut
uniquement	ADV.-	uniquement
pour	P	pour
les	D.def.m.p	le
derniers	A.qual.m.p	dernier
arguments	N.C.m.p	argument
	P	à
racine($x=4,$degre)	N.C.m.s	<unknown>
impossible	A.qual.m.s	impossible
//	C.C	@card@
si	C.S	si
un	D.ind.m.s	un
seul	A.ind.m.s	seul
argument	N.C.m.s	argument
alors	ADV.-	alors
$degre	N.P.m.s	<unknown>
vaut	V.P.3.s	valoir
2	A.card.m.s	@card@
par	P	par
défaut	N.C.m.s	défaut
function	N.C.f.s	function
racine($x,$degre=2){	A.qual.m.s	<unknown>
return	N.C.m.s	return
pow($x,1/$degre)	N.C.m.s	<unknown>
;	PONCT.W	;
}	P+D.def.m.s	c
racine(27,3)	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
retourne	V.P.3.s	retourner
la	D.def.f.s	le
racine	N.C.f.s	racine
cubique	A.qual.f.s	cubique
de	P	de
27	D.card.f.p	@card@
racine(16)	N.C.m.p	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
retourne	V.P.3.s	retourner
la	D.def.f.s	le
racine	N.C.f.s	racine
carrée	A.qual.f.s	carré
de	P	de
16	D.card.f.p	@card@
Fonctions	N.C.f.p	fonction
	P	à
Nombre	N.C.m.s	nombre
d'	P	de
arguments	N.C.m.p	argument
inconnu	A.qual.m.s	inconnu
:	PONCT.W	:
	P+D.def.m.s	c
func_num_args()	N.C.m.s	funcänumçargsëë
:	PONCT.W	:
nombre	N.C.m.s	nombre
d'	P	de
arguments	N.C.m.p	argument
	P	à
func_get_arg($i)	N.C.m.s	func-getçargçç
:	PONCT.W	:
argument	N.C.m.s	argument
i.	CL.suj.3.m.s	<unknown>
	P+D.def.m.s	c
Numérotés	VK.m.p	numéroter
à	P	à
partir	VW	partir
de	P	de
0	D.card.m.p	@card@
//	PONCT.W	@card@
fonction	N.C.f.s	fonction
calculant	VG	calculer
le	D.def.m.s	le
produit	N.C.m.s	produit
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
arguments	N.C.m.p	argument
function	N.C.f.s	function
produit()	N.C.m.s	produitçë
{	P	à
$prod=1	N.C.m.s	<unknown>
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
$i=0	N.P.m.s	<unknown>
;	PONCT.W	;
$i	N.C.m.s	çi
<	P+D.def.m.s	c
func_num_args()	N.C.m.s	funcänumçargsëë
;	PONCT.W	;
$i++	N.P.m.s	<unknown>
)	PONCT.W	)
$prod	N.P.m.s	<unknown>
*=	V.P.3.s	cevoir
func_get_arg($i)	N.C.m.s	func-getçargçç
;	PONCT.W	;
return	N.C.m.s	return
$prod	ET	<unknown>
;	PONCT.W	;
}	ET	}
echo	ET	echo
produit(3	N.C.f.s	<unknown>
,	PONCT.W	,
77	N.card.m.s	@card@
,	PONCT.W	,
10	N.card.m.s	@card@
,	PONCT.W	,
5	N.card.m.s	@card@
,	PONCT.W	,
81	N.card.m.s	@card@
,	PONCT.W	,
9	D.card.f.p	@card@
)	PONCT.W	)
;	PONCT.W	;
Fonctions	N.C.f.p	fonction
	P	à
Passage	N.C.m.s	passage
de	P	de
paramètres	N.C.m.p	paramètre
par	P	par
valeur	N.C.f.s	valeur
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
Utilise	V.P.3.s	utiliser
une	D.ind.f.s	un
copie	N.C.f.s	copie
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
d'	P	de
appel	N.C.m.s	appel
.	PONCT.S	.

Passage	N.C.m.s	passage
de	P	de
paramètre	N.C.m.s	paramètre
par	P	par
référence	N.C.f.s	référence
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
Utilise	N.P.m.s	Utilise
directement	ADV.-	directement
les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
d'	P	de
appel	N.C.m.s	appel
(	PONCT.W	(
donc	ADV.-	donc
modifiable	A.qual.m.s	modifiable
)	PONCT.W	)
.	PONCT.S	.

Passage	N.C.m.s	passage
de	P	de
paramètre	N.C.m.s	paramètre
avec	P	avec
&	PONCT.W	&
function	N.C.f.s	function
double($val)	N.C.m.s	doubleçvalç
{	P	à
$val	N.P.m.s	<unknown>
*=	N.C.m.s	<unknown>
2	A.card.m.s	@card@
;	PONCT.W	;
return	N.C.m.s	return
$val	N.P.m.s	<unknown>
;	PONCT.W	;
}	P+D.def.m.s	c
$x	N.C.m.s	cx
=	PONCT.W	=
10	A.card.m.s	@card@
;	PONCT.W	;
$y	N.C.m.p	çy
=	PONCT.W	=
double($x)	N.C.m.s	doubleëäxç
;	PONCT.W	;
//	PONCT.W	@card@
y=20	D.card.m.p	<unknown>
x=10	D.card.m.p	<unknown>
$y	N.C.m.p	çy
=	PONCT.W	=
double(&$x)	N.C.m.s	doubleëç
;	PONCT.W	;
//	PONCT.W	@card@
y=20	D.card.f.p	<unknown>
x=20	D.card.f.p	<unknown>
Variables	N.C.f.p	variable
globales	A.qual.f.p	global
et	C.C	et
statiques	A.qual.f.p	statique
	P+D.def.m.s	c
Static	N.P.m.s	Static
permet	V.P.3.s	permettre
de	P	de
conserver	VW	conserver
une	D.ind.f.s	un
variable	N.C.f.s	variable
dans	P	dans
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
$v	N.C.m.s	<unknown>
=	PONCT.W	=
2	N.card.m.s	@card@
;	PONCT.W	;
function	N.C.f.s	function
test	V.P.3.s	tenir
(	PONCT.W	(
)	PONCT.W	)
{	N.C.m.s	{
global	A.qual.m.s	global
$v	N.C.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
variable	A.qual.m.s	variable
globale	A.qual.f.s	global
static	N.C.m.s	static
$x=0	N.P.m.s	<unknown>
;	PONCT.W	;
//	PONCT.W	@card@
variable	A.qual.m.s	variable
statique	A.qual.f.s	statique
$x+=$v	N.P.x.s	<unknown>
;	PONCT.W	;
echo	ET	echo
$x."<br	ET	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
test()	N.C.m.s	testçë
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
2	A.card.m.s	@card@
test()	N.C.m.s	testçë
;	PONCT.W	;
//	PONCT.W	@card@
affiche	V.P.3.s	afficher
4	A.card.m.s	@card@
Appel	N.C.m.s	appel
dynamique	A.qual.m.s	dynamique
	P	à
Similaire	N.P.m.s	Similaire
aux	P+D.def.f.p	au
variables	N.C.f.p	variable
dynamiques	A.qual.f.p	dynamique
function	N.C.f.s	function
bonjour(){	A.qual.f.s	bonjourçëë
echo	ET	echo
"	PONCT.W	"
bonjour<br	ET	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
function	N.C.f.s	function
bonsoir	A.qual.m.s	bonsoir
(){	ET	çùë
echo	ET	echo
"	PONCT.W	"
bonsoir<br	ET	<unknown>
/>	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
//	PONCT.W	@card@
création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
variable	N.C.m.s	variable
contenant	VG	contenir
le	D.def.m.s	le
nom	N.C.m.s	nom
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
$salut	N.P.m.s	<unknown>
=	N.P.m.s	=
(	PONCT.W	(
date("h")	N.C.m.s	dateçhëë
<=	P+D.def.m.s	çù
17	A.card.m.s	@card@
)	PONCT.W	)
?	PONCT.S	?

"	PONCT.W	"
bonjour":"bonsoir	N.C.m.s	bonjourç-bonsoir
"	PONCT.W	"
;	PONCT.W	;
$salut()	N.C.m.s	<unknown>
;	PONCT.W	;
Fonctions	N.C.f.p	fonction
de	P	de
fonctions	N.C.f.p	fonction
	P	à
Vérifie	V.P.3.s	vérifier
l'	D.def.f.s	le
existence	N.C.f.s	existence
d'	P	de
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
:	PONCT.W	:
	N.C.m.s	
	P	à
Retourne	V.P.3.s	retourner
la	D.def.f.s	le
liste	N.C.f.s	liste
des	P+D.def.f.p	du
fonctions	N.C.f.p	fonction
définies	VK.f.p	définir
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
$tableau	N.C.m.s	<unknown>
=	PONCT.W	=
get_defined_functions()	N.C.m.s	getädefined-functioncçë
;	PONCT.W	;
Enregistre	V.P.3.s	enregistrer
une	D.ind.f.s	un
fonction	N.C.f.s	fonction
à	P	à
exécuter	VW	exécuter
à	P	à
la	D.def.f.s	le
fin	N.C.f.s	fin
du	P+D.def.m.s	du
script	N.C.m.s	script
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
function_exists("fonction")	N.C.m.s	functionçexist-stionctionction
;	PONCT.W	;
register_shutdown_function("fonction")	N.C.m.s	registeràshutdownçfunctionctionctionçt
;	PONCT.W	;
…	D.card.f.p	…
Fonctions	N.C.f.p	fonction
utiles	A.qual.f.p	utile
	P	à
Header	N.P.m.s	Header
:	PONCT.W	:
	N.P.m.s	
Permet	N.P.m.s	Permet
de	P	de
modifier	VW	modifier
l'	D.def.f.s	le
entête	N.C.f.s	entête
du	P+D.def.m.s	du
protocole	N.C.m.s	protocole
http	N.C.m.s	<unknown>
	P	à
Utilisation	N.C.f.s	utilisation
principale	A.qual.f.s	principal
:	PONCT.W	:
redirection	N.C.f.s	redirection
vers	P	vers
une	D.ind.f.s	un
autre	A.ind.f.s	autre
page	N.C.f.s	page
if	ET	if
(isConnected($user))	N.C.m.s	çisconnectedçuserçç
{	P+D.def.m.s	c
header("Location	N.C.m.s	headerçlocation
:	PONCT.W	:
accueil.php	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
header("Location	N.C.m.s	headerçlocation
:	PONCT.W	:
login.php	ET	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
}	P+D.def.m.s	c
LES	D.def.m.p	le
FORMULAIRES	N.C.m.p	formulaire
Exploitation	N.C.f.s	exploitation
d'	P	de
un	D.ind.m.s	un
formulaire	N.C.m.s	formulaire
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
Accès	N.C.m.s	accès
à	P	à
la	D.def.f.s	le
page	N.C.f.s	page
du	P+D.def.m.s	du
formulaire	A.qual.m.s	formulaire
Remplissage/modification	N.C.f.s	<unknown>
des	P+D.def.m.p	du
champs	N.C.m.p	champ
Envoi	N.C.m.p	envoi
du	P+D.def.m.s	du
formulaire(submit)	N.C.m.s	<unknown>
Récupération	N.C.f.s	récupération
du	P+D.def.m.s	du
formulaire	N.C.m.s	formulaire
soumis	VK.m.s	soumettre
Traitement	ADV.-	traitement
du	P+D.def.m.s	du
formulaire	A.qual.m.s	formulaire
Calculs	N.C.m.p	calcul
	P	à
Transformations	N.C.f.p	transformation
	P	à
Accès	N.C.m.s	accès
aux	P+D.def.m.p	au
BD	N.C.m.p	bd
…	P+D.def.m.s	c
	N.C.m.s	
	P	à
Client	N.P.m.s	Client
Envoi	N.C.m.s	envoi
de	P	de
la	D.def.f.s	le
réponse	N.C.f.s	réponse
au	P+D.def.m.s	au
client	N.C.m.s	client
Serveur	N.P.m.s	Serveur
Récupération	N.C.f.s	récupération
des	P+D.def.m.p	du
paramètres	N.C.m.p	paramètre
	C.C	c
Les	D.def.m.p	le
paramètres	N.C.m.p	paramètre
sont	V.P.3.p	être
récupérés	VK.m.p	récupérer
dans	P	dans
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
:	PONCT.W	:
	P	à
$_POST["nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
si	C.S	si
la	D.def.f.s	le
méthode	N.C.f.s	méthode
d'	P	de
envoi	N.C.m.s	envoi
est	V.P.3.s	être
POST	N.P.m.s	Post
	P	à
$_GET["nom	N.P.m.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
si	C.S	si
la	D.def.f.s	le
méthode	N.C.f.s	méthode
d'	P	de
envoi	N.C.m.s	envoi
est	V.P.3.s	être
GET	N.P.m.s	Get
	P	à
<form	N.P.m.s	<unknown>
method="POST	N.P.m.s	Methodçëpost
"	PONCT.W	"
action="…">	N.C.f.p	actionçëëë
	P	à
Exemple	N.C.m.s	exemple
	N.C.m.s	
Dans	P	dans
le	D.def.m.s	le
formulaire	A.qual.m.s	formulaire
<input	N.P.m.s	<unknown>
name="nom	ET	nameçnom
"	PONCT.W	"
>	N.C.m.s	>
	C.S	
On	CL.suj.3.m.s	on
récupère	V.P.3.s	récupérer
le	D.def.m.s	le
contenu	N.C.m.s	contenu
en	P	en
php	N.C.m.s	<unknown>
avec	P	avec
:	PONCT.W	:
	D.card.m.s	
$_POST["nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
	P	à
$_GET["nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
Pour	P	pour
continuer	VW	continuer
	P	à
Le	D.def.m.s	le
plus	ADV.-	plus
simple	A.qual.m.s	simple
pour	P	pour
comprendre	VW	comprendre
:	PONCT.W	:
	P	à
Utiliser	VW	utiliser
la	D.def.f.s	le
méthode	N.C.f.s	méthode
GET	N.P.m.s	Get
pour	P	pour
passer	VW	passer
les	D.def.m.p	le
arguments	N.C.m.p	argument
	P	à
Regarder	VW	regarder
l'	D.def.f.s	le
URL	N.P.f.s	Url
appelée	VK.f.s	appeler
	P	à
http://www.test.com/test.php	N.C.m.s	<unknown>
?	PONCT.S	?

champ=valeur	N.C.m.s	champçvaleur
	P	à
Les	D.def.m.p	le
différents	A.qual.m.p	différent
paramètres	N.C.m.p	paramètre
envoyés	VK.m.p	envoyer
et	C.C	et
leur	D.poss.f.s	leur
valeur	N.C.f.s	valeur
sont	V.P.3.p	être
visibles	A.qual.m.p	visible
	P	à
Ici	ADV.-	ici
$_GET["champ	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
vaut	V.P.3.s	valoir
valeur	N.C.f.s	valeur
	P	à
Puis	C.C	pui
	P	à
utiliser	VW	utiliser
POST	N.P.m.s	Post
une	D.ind.f.s	un
fois	N.C.f.s	foi
qu'	PRO.rel.f.s	que
on	CL.suj.3.m.s	on
a	V.P.3.s	avoir
compris	VK.m.s	comprendre
Spécificités	N.C.f.p	spécificité
selon	P	selon
les	D.def.m.p	le
types	N.C.m.p	type
:	PONCT.W	:
	P	à
les	D.def.f.p	le
cases	N.C.f.p	case
à	P	à
cocher	VW	cocher
sont	V.P.3.p	être
envoyées	VK.f.p	envoyer
sous	P	sous
forme	N.C.f.s	forme
de	P	de
tableau	N.C.m.s	tableau
Un	D.ind.m.s	un
exemple	N.C.m.s	exemple
<form	N.P.m.s	<unknown>
method="GET	N.P.x.s	Methodçget
"	PONCT.W	"
action="test.php">	ET	actionçh
<input	ET	çinput
type="text	N.C.m.s	typeëtext
"	PONCT.W	"
name="Champ1	N.C.m.s	<unknown>
"	PONCT.W	"
value="Texte	N.C.f.s	valueëtexte
"	PONCT.W	"
/><br	ET	<unknown>
/>	ET	<unknown>
<textarea	ET	<unknown>
name="Champ2	ET	<unknown>
"	PONCT.W	"
cols="30	N.C.m.p	<unknown>
"	PONCT.W	"
rows="5">Texte</textarea>	ET	<unknown>
<br	ET	<unknown>
/>	ET	<unknown>
<select	N.P.m.s	<unknown>
name="Champ3">	ET	nameçchamp3ëë
<option	N.C.f.s	çoption
value="Option_1">Option_1</option>	ET	<unknown>
<option	N.C.f.s	çoption
value="Option_2	N.C.f.s	<unknown>
"	PONCT.W	"
selected="selected">Option_2</option>	ET	<unknown>
</select><br	N.P.x.s	<unknown>
/>	ET	<unknown>
<input	ET	çinput
type="checkbox	N.C.m.s	typeëcheckbox
"	PONCT.W	"
name="Champ4[	ET	nameçchamp4ë
]	PONCT.W	]
"	PONCT.W	"
value="Case_1	N.C.f.s	<unknown>
"	PONCT.W	"
checked="checked">	ET	checkedçheckedçë
Case	ET	case
1<br>	ET	<unknown>
<input	ET	çinput
type="checkbox	N.C.m.s	typeëcheckbox
"	PONCT.W	"
name="Champ4[	ET	nameçchamp4ë
]	PONCT.W	]
"	PONCT.W	"
value="Case_2	N.C.f.s	<unknown>
"	PONCT.W	"
checked="checked">	N.C.m.p	checkedçheckedçë
Case	ET	case
2<br>	ET	2ëbrë
<input	ET	çinput
type="radio	ET	typeçeradio
"	PONCT.W	"
name="Champ5	ET	<unknown>
"	PONCT.W	"
value="Case_1">	ET	<unknown>
radio	ET	radio
1<br>	ET	<unknown>
<input	ET	çinput
type="radio	ET	typeçeradio
"	PONCT.W	"
name="Champ5	ET	<unknown>
"	PONCT.W	"
value="Case_2">	ET	<unknown>
radio	ET	radio
2<br>	ET	2ëbrë
<input	ET	çinput
type="radio	ET	typeçeradio
"	PONCT.W	"
name="Champ5	ET	<unknown>
"	PONCT.W	"
value="Case_3">	ET	<unknown>
radio	ET	radio
3<br>	ET	@card@
<input	ET	çinput
type="submit	N.C.m.s	<unknown>
"	PONCT.W	"
name="Soumission	N.C.f.s	nameç-soumission
"	PONCT.W	"
value="Soumettre">	N.C.f.s	valueççumettreçë
</form>	N.P.x.s	<unknown>
test.php	N.C.m.s	<unknown>
?	PONCT.S	?

Champ1=Texte&Champ2=Texte&Champ3=Option_2&Champ4[]=Case_1&Champ4[]=Case_2&Champ	N.P.m.s	<unknown>
5=Case_2&Soumission=Soumettre	N.P.x.s	<unknown>
Un	D.ind.m.s	un
exemple	N.C.m.s	exemple
	P	à
Récupération	N.C.f.s	récupération
avec	P	avec
$_GET	N.P.m.s	<unknown>
	P+D.def.m.s	c
Vérification	N.C.f.s	vérification
de	P	de
l'	D.def.f.s	le
existence	N.C.f.s	existence
d'	P	de
une	D.ind.f.s	un
variable	N.C.f.s	variable
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
isset(var)	N.C.m.s	issetçvarç
Attention	N.C.f.s	attention
au	P+D.def.m.s	au
contenu	N.C.m.s	contenu
des	P+D.def.f.p	du
choses	N.C.f.p	chose
reçues	VK.f.p	recevoir
	A.qual.f.p	
Nombreuses	A.qual.f.p	nombreux
failles	N.C.f.p	faille
si	C.S	si
on	CL.suj.3.m.s	on
ne	ADV.neg	ne
fait	V.P.3.s	faire
pas	ADV.neg	pas
attention	N.C.f.s	attention
!	PONCT.S	!

//	PONCT.W	@card@
affichage	N.C.m.s	affichage
de	P	de
tous	A.ind.m.p	tous
les	D.def.m.p	le
champs	N.C.m.p	champ
reçus	VK.m.p	recevoir
via	P	via
le	D.def.m.s	le
formulaire	A.qual.m.s	formulaire
$resultat	N.C.m.s	<unknown>
=	PONCT.W	=
$_GET["Champ1"]."<br>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$resultat	N.P.m.s	<unknown>
.=	PONCT.W	<unknown>
$_GET["Champ2"]."<br>	N.P.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$resultat	N.P.m.s	<unknown>
.=	PONCT.W	<unknown>
$_GET["Champ3"]."<br>	N.P.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
for	N.C.m.s	for
(	PONCT.W	(
$i	N.C.f.s	çi
=	PONCT.W	=
0	N.card.m.s	@card@
;	PONCT.W	;
$i	N.C.m.s	çi
<	P+D.def.m.s	c
count($_GET["Champ4"])	N.C.m.s	countçget-cetçhëë
;	PONCT.W	;
$i++	N.C.m.s	çiu
)	PONCT.W	)
{	P+D.def.m.s	c
$resultat	N.C.m.s	<unknown>
.=	PONCT.W	<unknown>
$_GET["Champ4"][$i]."<br>	N.P.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
if	ET	if
(isset($_GET["Champ5"]))	ET	çissetçëëäëë
$resultat	N.P.m.s	<unknown>
.=	PONCT.W	<unknown>
$_GET["Champ5"]."<br>	N.P.f.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
$resultat	N.P.m.s	<unknown>
;	PONCT.W	;
FONCTIONNALITÉS	N.C.f.p	fonctionnalité
SUPPLÉMENTAIRES	N.C.f.p	supplémentaire
Date	N.P.f.s	Date
et	C.C	et
heure	N.C.f.s	heure
	P	à
Retourner	VW	retourner
la	D.def.f.s	le
date	N.C.f.s	date
courante	A.qual.f.s	courant
dans	P	dans
une	D.ind.f.s	un
chaîne	N.C.f.s	chaîne
de	P	de
caractères	N.C.m.p	caractère
:	PONCT.W	:
$chaine	N.P.x.s	<unknown>
=	PONCT.W	=
date(format	N.C.m.s	dateëformat
[	PONCT.W	[
,	PONCT.W	,
nombre	N.C.m.s	nombre
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
	ET	
$chaine=date("Y/m/d")	N.P.x.s	<unknown>
;	PONCT.W	;
retourne	V.P.3.s	retourner
2010/03/10	N.C.m.s	@card@
	N.C.m.s	
	N.C.m.s	
Idem	ADV.-	idem
pour	P	pour
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
associatif	A.qual.m.s	associatif
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
$tableau	N.C.m.s	<unknown>
=	PONCT.W	=
getdate([nombre])	N.C.m.s	getdateçnombreç-
;	PONCT.W	;
Vérification	N.C.f.s	vérification
de	P	de
la	D.def.f.s	le
validité	N.C.f.s	validité
d'	P	de
une	D.ind.f.s	un
date	N.C.f.s	date
:	PONCT.W	:
	D.card.m.p	
checkdate(mois	N.C.m.p	checkdateëmois
,	PONCT.W	,
jour	N.C.m.s	jour
,	PONCT.W	,
année	N.C.f.s	année
)	PONCT.W	)
;	PONCT.W	;
Les	D.def.f.p	le
cookies	N.C.f.p	cookie
	P	à
Écrire	VW	écrire
des	D.ind.f.p	du
cookies	N.C.f.p	cookie
:	PONCT.W	:
	P	à
fonction	N.C.f.s	fonction
setcookie("PremierCookie	ET	<unknown>
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Salut	N.P.m.s	Salut
"	PONCT.W	"
,	PONCT.W	,
time()+3600*24*7)	N.C.m.s	<unknown>
;	PONCT.W	;
	V.P.3.s	être
	N.C.m.s	
	N.C.m.s	
	D.card.m.p	
timestamp	N.C.m.s	timestamp
en	P	en
secondes	N.C.f.p	seconde
(	PONCT.W	(
différent	A.qual.m.s	différent
de	P	de
Javascript	N.P.m.s	Javascript
)	PONCT.W	)
à	P	à
exécuter	VW	exécuter
avant	P	avant
tout	D.ind.m.s	tout
autre	A.ind.m.s	autre
envoi	N.C.m.s	envoi
vers	P	vers
le	D.def.m.s	le
serveur	N.C.m.s	serveur
(	PONCT.W	(
envoyé	VK.m.s	envoyer
dans	P	dans
l'	D.def.f.s	le
entête	N.C.f.s	entête
)	PONCT.W	)
cookie	N.C.f.s	cookie
non	ADV.neg	non
visible	A.qual.m.s	visible
avant	P	avant
le	D.def.m.s	le
prochain	A.qual.m.s	prochain
chargement	N.C.m.s	chargement
d'	P	de
une	D.ind.f.s	un
page	N.C.f.s	page
Lecture	N.P.f.s	Lecture
:	PONCT.W	:
	N.C.m.s	
(	PONCT.W	(
$_COOKIE["PremierCookie	N.P.f.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
setcookie	N.C.f.s	setcookie
(	PONCT.W	(
"	PONCT.W	"
PremierCookie	N.P.f.s	Premiercookie
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
Salut	N.P.m.s	Salut
"	PONCT.W	"
,	PONCT.W	,
time()	N.C.m.s	timeçë
+3600*24*7	PRO.card.m.p	<unknown>
)	PONCT.W	)
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
!	PONCT.S	!

isset($_COOKIE["PremierCookie"]))	N.P.x.s	Issetç-cookieçiekieëëe
{	P	à
echo	ET	echo
"	PONCT.W	"
cookie	N.C.f.s	cookie
non	ADV.neg	non
défini<br	A.qual.m.s	<unknown>
/>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	V.P.3.s	être
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
$_COOKIE["PremierCookie"]."<br	N.P.x.s	<unknown>
/>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
Les	D.def.f.p	le
sessions	N.C.f.p	session
	P	à
Objectif	N.C.m.s	objectif
:	PONCT.W	:
garder	VW	garder
des	D.ind.f.p	du
données	N.C.f.p	donnée
de	P	de
page	N.C.f.s	page
en	P	en
page	N.C.f.s	page
.	PONCT.S	.

	P	à
session_start()	N.C.f.s	sessionästartëë
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	P	à
Crée	V.P.3.s	créer
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
session	N.C.f.s	session
Ou	C.C	ou
ravive	V.P.3.s	raviver
une	D.ind.f.s	un
session	N.C.f.s	session
déjà	ADV.-	déjà
existante	A.qual.f.s	existant
$_SESSION["nom"]=valeur	N.P.x.s	<unknown>
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
une	D.ind.f.s	un
variable	N.C.f.s	variable
de	P	de
session	N.C.f.s	session
session_destroy()	N.P.m.s	Sessionädestroyçë
détruit	V.P.3.s	détruire
la	D.def.f.s	le
session	N.C.f.s	session
en	P	en
cours	N.C.m.s	cours
session_start()	N.C.f.s	sessionästartëë
;	PONCT.W	;
$_SESSION["ma_variable"]=12	N.P.x.s	<unknown>
;	PONCT.W	;
Sessions	N.C.f.p	session
–	P+D.def.m.s	c
exemple	N.C.m.s	exemple
<html>	N.P.x.s	<unknown>
<body>	N.P.m.s	<unknown>
<form	ET	fform
method="post	ET	methodçpost
"	PONCT.W	"
action="test.php">	ET	actionçh
<table	A.qual.m.s	çtable
border="0">	N.C.m.s	borderçëëë
<tr>	N.P.m.s	<unknown>
<td>Nom	N.P.m.s	<unknown>
:</td>	N.P.x.s	<unknown>
<td><input	ET	<unknown>
type="text	ET	typeëtext
"	PONCT.W	"
name="Nom	ET	nameçnom
"	PONCT.W	"
size="20	ET	<unknown>
"	PONCT.W	"
value="x"></td></tr>	N.C.m.s	<unknown>
<tr>	ET	<unknown>
<td>Prénom	N.P.x.s	<unknown>
:</td>	N.P.x.s	<unknown>
<td><input	ET	<unknown>
type="text	ET	typeëtext
"	PONCT.W	"
name="Prenom	ET	nameçprenom
"	PONCT.W	"
size="20	ET	<unknown>
"	PONCT.W	"
value="y"></td></tr>	N.C.m.s	<unknown>
<tr>	N.P.m.s	<unknown>
<td>eMail	N.P.x.s	<unknown>
:</td>	N.P.x.s	<unknown>
<td><input	ET	<unknown>
type="text	ET	typeëtext
"	PONCT.W	"
name="Email	ET	nameçemail
"	PONCT.W	"
size="20	D.card.f.p	<unknown>
"	PONCT.W	"
value="z"></td></tr>	ET	<unknown>
<tr>	ET	<unknown>
<td	ET	<unknown>
colspan="2"><input	N.C.m.s	colspanççinput
type="submit	N.C.m.s	<unknown>
"	PONCT.W	"
name="soumettre	VW	nameç-soumettre
"	PONCT.W	"
value="Envoyer"></td>	A.ind.f.s	<unknown>
</tr>	N.P.x.s	<unknown>
</table>	N.P.x.s	<unknown>
</form>	N.P.x.s	<unknown>
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
Sessions	N.C.f.p	session
–	P	à
exemple	N.C.m.s	exemple
"	PONCT.W	"
test.php	N.C.m.s	<unknown>
"	PONCT.W	"
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
session_start()	N.C.f.s	sessionästartëë
;	PONCT.W	;
$_SESSION["nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
=	PONCT.W	=
$_POST["Nom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
;	PONCT.W	;
$_SESSION["prenom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
=	PONCT.W	=
$_POST["Prenom	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
;	PONCT.W	;
$_SESSION["email	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
=	PONCT.W	=
$_POST["Email	N.P.x.s	<unknown>
"	PONCT.W	"
]	PONCT.W	]
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Sessions	N.C.f.p	session
–	P	à
exemple	N.C.m.s	exemple
"	PONCT.W	"
session.php	ET	<unknown>
"	PONCT.W	"
<html>	N.P.m.s	<unknown>
<body>	N.P.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
session_start()	N.C.f.s	sessionästartëë
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Identifiant	ET	identifiant
:".session_id()."<br	N.P.x.s	<unknown>
/>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Nom	N.P.m.s	Nom
de	P	de
la	D.def.f.s	le
session	N.C.f.s	session
:".session_name()."<br	N.P.x.s	<unknown>
/>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Nom	N.P.m.s	Nom
:	PONCT.W	:
"	PONCT.W	"
.$_SESSION["nom"]."<br>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Prénom	N.P.m.s	Prénom
:	PONCT.W	:
"	PONCT.W	"
.$_SESSION["prenom"]."<br>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
echo	ET	echo
"	PONCT.W	"
Mail	N.P.m.s	Mail
:	PONCT.W	:
"	PONCT.W	"
.$_SESSION["email"]."<br>	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
session_destroy()	N.C.m.s	sessionädestroyçë
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
Envoyer	VW	envoyer
des	D.ind.m.p	du
emails	N.C.m.p	email
	P	à
La	D.def.f.s	le
fonction	N.C.f.s	fonction
mail	N.C.m.s	mail
:	PONCT.W	:
mail($recipient	V.P.3.p	mailç-recipier
,	PONCT.W	,
$subject	N.P.m.s	<unknown>
,	PONCT.W	,
$message[	N.P.x.s	<unknown>
,	PONCT.W	,
$headers	N.P.m.s	<unknown>
,	PONCT.W	,
$params	N.P.m.s	<unknown>
]	PONCT.W	]
)	PONCT.W	)
;	PONCT.W	;
	N.P.m.s	
Nécessite	V.P.3.s	nécessiter
un	D.ind.m.s	un
serveur	N.C.m.s	serveur
mail	N.C.m.s	mail
accessible	A.qual.m.s	accessible
sur	P	sur
le	D.def.m.s	le
serveur	N.C.m.s	serveur
	A.qual.m.s	
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
$dest	N.P.m.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
Moi	PPRO.1.f.s	moi
<moi@moi.com>	N.P.x.s	<unknown>
,	PONCT.W	,
Toi	N.P.m.s	Toi
<toi@toi.com	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$subject	ET	çsubject
=	PONCT.W	=
"	PONCT.W	"
Test	N.P.m.s	Test
"	PONCT.W	"
;	PONCT.W	;
$content	N.C.m.s	ccontent
=	PONCT.W	=
"	PONCT.W	"
Bonjour,\n	N.P.x.s	Bonjourtün
"	PONCT.W	"
;	PONCT.W	;
$content	N.P.x.s	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
Ceci	PRO.dem.m.s	ceci
est	V.P.3.s	être
un	D.ind.m.s	un
message	N.C.m.s	message
de	P	de
test\n	N.C.m.s	testän
"	PONCT.W	"
;	PONCT.W	;
$content	N.P.x.s	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
Moi	PPRO.1.f.s	moi
"	PONCT.W	"
;	PONCT.W	;
$headers	N.P.x.s	<unknown>
=	PONCT.W	=
"	PONCT.W	"
From	N.P.m.s	From
:	PONCT.W	:
Moi	N.C.m.p	moi
<moi@moi.com>\n	N.P.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$headers	N.P.x.s	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
Content-Type	N.P.m.s	Content-Type
:	PONCT.W	:
text/html	N.C.m.s	<unknown>
;	PONCT.W	;
charset=iso-8859-1\n	N.C.m.p	<unknown>
"	PONCT.W	"
;	PONCT.W	;
$headers	N.P.x.s	<unknown>
.=	PONCT.W	<unknown>
"	PONCT.W	"
Cc	ET	cc
:	PONCT.W	:
lui@lui.com\n	ET	<unknown>
"	PONCT.W	"
;	PONCT.W	;
mail($dest	ET	mailäëdest
,	PONCT.W	,
$subject	N.P.m.s	<unknown>
,	PONCT.W	,
$content	N.P.m.s	<unknown>
,	PONCT.W	,
$headers	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
?	PONCT.S	?

>	P	à
Créer	VW	créer
autre	A.ind.f.s	autre
chose	N.C.f.s	chose
que	C.S	que
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
	P	à
Php	N.P.x.s	Php
peut	V.P.3.s	pouvoir
créer	VW	créer
autre	A.ind.f.s	autre
chose	N.C.f.s	chose
que	C.S	que
du	P+D.def.m.s	du
HTML	N.P.m.s	<unknown>
	D.card.f.p	
Images	N.P.x.s	Images
:	PONCT.W	:
	D.card.m.s	
grand	A.qual.m.s	grand
choix	N.C.m.s	choix
de	P	de
formats	N.C.m.p	format
,	PONCT.W	,
comme	P	comme
GIF	N.P.m.s	Gif
,	PONCT.W	,
PNG	N.C.m.s	png
,	PONCT.W	,
JPEG	N.P.m.s	Jpeg
,	PONCT.W	,
WBMP	N.P.x.s	Wbmp
…	P	à
Fichiers	N.C.m.p	fichier
pdf	N.C.m.p	<unknown>
(	PONCT.W	(
librairie	N.C.f.s	librairie
tcpdf	N.C.m.s	<unknown>
)	PONCT.W	)
,	PONCT.W	,
csv	N.C.m.s	<unknown>
,	PONCT.W	,
word	N.C.m.s	word
,	PONCT.W	,
excel	N.C.m.s	excel
,	PONCT.W	,
…	P	à
	P	à
Aucune	D.neg.f.s	aucun
limitation	N.C.f.s	limitation
,	PONCT.W	,
il	CL.suj.3.m.s	il
suffit	V.P.3.s	suffire
de	P	de
savoir	VW	savoir
comment	ADV.int	comment
modifier	VW	modifier
l'	D.def.f.s	le
entête	N.C.f.s	entête
(	PONCT.W	(
header	N.C.m.s	header
)	PONCT.W	)
puis	C.C	pui
afficher	VW	afficher
le	D.def.m.s	le
contenu	N.C.m.s	contenu
…	A.qual.m.s	…
	N.C.m.s	
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
header("Content-type	N.C.m.s	headerçcontent-type
:	PONCT.W	:
image/png	N.C.m.s	<unknown>
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
$im	N.P.x.s	<unknown>
=	PONCT.W	=
imagecreatefrompng("test.png")	N.C.m.s	<unknown>
;	PONCT.W	;
$im	N.P.x.s	<unknown>
=	PONCT.W	=
imagerotate($im	N.C.m.s	<unknown>
,	PONCT.W	,
90	N.card.m.s	@card@
,	PONCT.W	,
0	N.card.m.s	@card@
)	PONCT.W	)
;	PONCT.W	;
imagepng($im)	N.C.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	P	à
PHP	N.C.m.s	php
ET	C.C	et
MYSQL	N.P.m.s	Mysql
Bases	N.P.m.s	Bases
de	P	de
données	N.C.f.p	donnée
	P	à
Présentation	N.C.f.s	présentation
:	PONCT.W	:
HTML	N.P.m.s	<unknown>
,	PONCT.W	,
Javascript	N.P.m.s	Javascript
	N.C.m.s	
Navigateur	N.P.m.s	Navigateur
:	PONCT.W	:
IE	N.P.m.s	Ie
,	PONCT.W	,
Firefox	N.P.m.s	Firefox
,	PONCT.W	,
Chrome	N.P.m.s	Chrome
,	PONCT.W	,
…	N.C.m.s	…
	N.C.m.s	
	D.card.m.p	
Traitements	N.C.m.p	traitement
/	PONCT.W	@card@
création	N.C.f.s	création
de	P	de
la	D.def.f.s	le
page	N.C.f.s	page
:	PONCT.W	:
PHP	N.P.m.s	Php
,	PONCT.W	,
ASP	N.P.f.s	Asp
,	PONCT.W	,
JSP	N.P.m.s	Jsp
,	PONCT.W	,
servlet	N.C.m.s	servlet
,	PONCT.W	,
CGI	N.P.f.s	Cgi
,	PONCT.W	,
…	N.C.m.s	…
	P+D.def.m.s	c
Serveur	N.P.m.s	Serveur
Web	N.P.m.s	Web
Apache	N.P.m.s	Apache
,	PONCT.W	,
IIS	N.P.x.s	Iis
,	PONCT.W	,
…	N.C.m.s	…
	N.C.m.s	
	N.C.m.s	
Données	VK.f.p	donner
:	PONCT.W	:
Tables	N.P.m.s	Tables
SQL	N.P.m.s	Sql
	P	à
Serveur	N.P.m.s	Serveur
BD	N.P.m.s	Bd
Access	N.P.m.s	Access
,	PONCT.W	,
Oracle	N.P.m.s	Oracle
,	PONCT.W	,
MySQL	N.P.m.s	Mysql
,	PONCT.W	,
PostGreSQL	N.P.x.s	Postgresql
,	PONCT.W	,
…	N.C.m.s	…
	D.card.f.p	
Bases	N.P.m.s	Bases
de	P	de
données	N.C.f.p	donnée
	P	à
PHP	N.P.m.s	Php
permet	V.P.3.s	permettre
de	P	de
travailler	VW	travailler
nativement	ADV.-	nativement
avec	P	avec
la	D.def.f.s	le
plupart	N.C.f.s	plupart
des	P+D.def.m.p	du
SGBDR	N.P.x.s	Sgbdr
	A.card.f.p	
	A.card.f.p	
	D.card.f.p	
Trois	D.card.f.p	trois
fonctions	N.C.f.p	fonction
sont	V.P.3.p	être
essentielles	A.qual.f.p	essentiel
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
Mysql	N.P.m.s	<unknown>
,	PONCT.W	,
Oracle	N.P.m.s	Oracle
,	PONCT.W	,
Sybase	N.P.m.s	Sybase
,	PONCT.W	,
Microsoft	N.P.m.s	Microsoft
SQL	N.P.m.s	Sql
Server	N.P.m.s	Server
,	PONCT.W	,
PostgreSQL	N.P.x.s	Postgresql
,	PONCT.W	,
…	N.C.m.s	…
Dans	P	dans
les	D.def.m.p	le
autres	A.ind.m.p	autre
cas	N.C.m.p	cas
on	CL.suj.3.m.s	on
peut	V.P.3.s	pouvoir
utiliser	VW	utiliser
des	D.ind.m.p	du
drivers	N.C.m.p	driver
spécifiques	A.qual.m.p	spécifique
Connexion	N.C.f.s	connexion
au	P+D.def.m.s	au
serveur	N.C.m.s	serveur
Exécution	N.C.f.s	exécution
de	P	de
la	D.def.f.s	le
requête	N.C.f.s	requête
SQL	N.P.m.s	Sql
Gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
résultats	N.C.m.p	résultat
On	CL.suj.3.m.s	on
va	V.P.3.s	aller
voir	VW	voir
le	D.def.m.s	le
fonctionnement	N.C.m.s	fonctionnement
avec	P	avec
les	D.def.m.p	le
"	PONCT.W	"
PHP	N.C.m.p	php
Data	N.P.m.s	Data
Objects	N.C.m.p	object
"	PONCT.W	"
:	PONCT.W	:
	N.P.x.s	
Indépendant	N.P.m.s	Indépendant
(	PONCT.W	(
partiellement	ADV.-	partiellement
)	PONCT.W	)
du	P+D.def.m.s	du
SGBD	N.P.m.s	Sgbd
utilisé	VK.m.s	utiliser
.	PONCT.S	.

MySQL	N.P.m.s	Mysql
et	C.C	et
Php	N.P.x.s	Php
–	D.ind.f.s	–
connexion	N.C.f.s	connexion
	P	à
Connexion	N.C.f.s	connexion
=	PONCT.W	=
création	N.C.f.s	création
d'	P	de
un	D.ind.m.s	un
objet	N.C.m.s	objet
PDO	N.P.x.s	Pdo
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	P+D.def.m.s	c
Adresse	N.C.f.s	adresse
de	P	de
la	D.def.f.s	le
base	N.C.f.s	base
et	C.C	et
nom	N.C.m.s	nom
de	P	de
la	D.def.f.s	le
table	N.C.f.s	table
Nom	N.P.m.s	Nom
d'	P	de
utilisateur	N.C.m.s	utilisateur
Mot	N.C.m.s	mot
de	P	de
passe	N.C.f.s	passe
Déconnexion	N.C.f.s	déconnexion
:	PONCT.W	:
destruction	N.C.f.s	destruction
de	P	de
l'	D.def.m.s	le
objet	N.C.m.s	objet
try	ET	try
{	N.C.m.s	{
//	PONCT.W	@card@
ouverture	N.C.f.s	ouverture
de	P	de
la	D.def.f.s	le
connexion	N.C.f.s	connexion
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=127.0.0.1	N.P.x.s	<unknown>
;	PONCT.W	;
port=3306	N.C.m.p	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
...	PONCT.W	<unknown>
//	PONCT.W	@card@
fermeture	N.C.f.s	fermeture
de	P	de
la	D.def.f.s	le
connexion	N.C.f.s	connexion
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
die('Erreur	N.C.m.s	dieç'erreur
:	PONCT.W	:
'	ADV.-	'
.	PONCT.S	.

$e->getMessage())	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
MySQL	N.P.m.s	Mysql
et	C.C	et
Php	N.P.x.s	Php
–	D.card.f.p	–
requêtes	N.C.f.p	requête
	P	à
Avec	P	avec
:	PONCT.W	:
la	D.def.f.s	le
méthode	N.C.f.s	méthode
query	N.P.m.s	Query
pour	P	pour
les	D.def.f.p	le
recherches	N.C.f.p	recherche
	P	à
Le	D.def.f.s	le
méthode	N.C.f.s	méthode
exec	V.P.3.s	exec
pour	P	pour
les	D.def.f.p	le
modifications	N.C.f.p	modification
	N.C.m.s	
	N.C.m.s	
Libération	N.C.f.s	libération
des	P+D.def.f.p	du
ressources	N.C.f.p	ressource
:	PONCT.W	:
	P+D.def.m.s	c
closeCursor()	N.C.m.s	closecursorç
;	PONCT.W	;
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=127.0.0.1	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$reponse	N.C.f.s	<unknown>
=	P	à
$dbh->query('SELECT	N.C.m.s	<unknown>
*	N.C.m.s	*
FROM	N.P.m.s	From
`	P	à
test	N.C.m.s	test
`	N.C.m.s	`
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$nb_modifs	N.C.m.p	änbämodif
=	PONCT.W	=
$dbh->exec('UPDATE	N.P.x.s	<unknown>
`	N.C.m.s	`
test	N.C.m.s	test
`	P+D.def.m.s	c
SET	N.P.m.s	Set
test_id=21	A.qual.m.s	<unknown>
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
...	PONCT.W	<unknown>
$reponse->closeCursor()	N.P.x.s	<unknown>
;	PONCT.W	;
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
MySQL	N.P.x.s	Mysql
et	C.C	et
Php	N.P.x.s	Php
–	P+D.def.m.s	c
traitement	N.C.m.s	traitement
	P+D.def.m.s	c
Nombre	N.C.m.s	nombre
de	P	de
réponses	N.C.f.p	réponse
:	PONCT.W	:
	N.C.m.s	
	P+D.def.m.s	c
rowCount()	N.C.m.s	rowcountçë
Traitement	ADV.-	traitement
des	P+D.def.f.p	du
réponses	N.C.f.p	réponse
:	PONCT.W	:
fetch()	N.C.m.s	fetchëë
:	PONCT.W	:
retourne	V.P.3.s	retourner
les	D.def.m.p	le
résultats	N.C.m.p	résultat
un	PRO.ind.m.s	un
par	P	par
un	D.ind.m.s	un
	N.C.m.s	
fetchAll()	N.C.m.s	fetchallçë
:	PONCT.W	:
retourne	V.P.3.s	retourner
un	D.ind.m.s	un
tableau	N.C.m.s	tableau
avec	P	avec
tous	A.ind.m.p	tous
les	D.def.m.p	le
résultats	N.C.m.p	résultat
	P	à
if	N.C.m.s	if
(	PONCT.W	(
$reponse->rowCount()	N.C.f.s	çreponse--rowcountçë
>	N.C.m.s	>
0	A.card.m.s	@card@
)	PONCT.W	)
{	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
$donnees	N.C.f.p	<unknown>
=	PONCT.W	=
$reponse->fetch())	N.P.x.s	<unknown>
{	P+D.def.m.s	c
echo	ET	echo
$donnees['test_id	N.P.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
.	PONCT.S	.
'	PONCT.S	'

'	PONCT.W	'
.$donnees['test_val'].'<br	N.P.x.s	<unknown>
/>	PONCT.W	<unknown>
'	PONCT.W	'
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
aucun	D.neg.m.s	aucun
résultat<br	N.C.m.s	<unknown>
/>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.p	}
MySQL	N.P.m.s	Mysql
et	C.C	et
Php	N.P.x.s	Php
–	P	à
Un	D.ind.m.s	un
exemple	N.C.m.s	exemple
<html><body>	N.P.m.s	<unknown>
<ul>	A.qual.m.s	çulà
<	A.qual.m.s	<
?	PONCT.S	?

php	ET	<unknown>
try	ET	try
{	P	à
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
new	ET	new
PDO('mysql:host=127.0.0.1	N.P.x.s	<unknown>
;	PONCT.W	;
dbname=test	N.C.m.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
root	N.C.m.s	root
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$id=$_POST['id	N.P.x.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
;	PONCT.W	;
$reponse	N.C.f.s	<unknown>
=	P	à
$dbh->query('SELECT	N.C.m.s	<unknown>
*	N.C.m.s	*
FROM	N.P.m.s	From
`	P	à
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id='.$id	N.C.m.s	testüidä'
)	PONCT.W	)
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
$reponse->rowCount()	N.C.f.s	çreponse--rowcountçë
>	N.C.m.s	>
0	A.card.m.s	@card@
)	PONCT.W	)
{	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
$donnees	N.C.f.p	<unknown>
=	PONCT.W	=
$reponse->fetch())	N.P.m.s	<unknown>
{	P	à
echo	N.C.m.s	echo
"	PONCT.W	"
<li>".$donnees['test_id	N.P.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
.	PONCT.S	.
'	PONCT.S	'

:	PONCT.W	:
'	PONCT.W	'
.$donnees['test_val'].'</li>	N.P.x.s	<unknown>
'	PONCT.W	'
;	PONCT.W	;
}	N.C.m.s	}
}	P	à
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
<li>aucun	N.P.m.s	<unknown>
résultat</li>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	ET	}
$reponse->closeCursor()	N.P.x.s	<unknown>
;	PONCT.W	;
$dbh	N.P.x.s	<unknown>
=	PONCT.W	=
null	A.qual.m.s	nul
;	PONCT.W	;
}	ET	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
die('Erreur	N.C.m.s	dieç'erreur
:	PONCT.W	:
'	PONCT.W	'
.	PONCT.S	.

$e->getMessage())	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
?	PONCT.S	?

>	P	à
</ul>	N.C.m.s	<unknown>
</body></html>	N.P.x.s	<unknown>
Sécurité	N.C.f.s	sécurité
	P	à
Que	PRO.int.m.s	que
se	CL.refl.3.m.s	se
passe	V.P.3.s	passer
-t-il	CL.suj.3.m.s	il
si	C.S	si
:	PONCT.W	:
	D.card.m.s	
$id	N.C.m.s	çid
=	PONCT.W	=
"	PONCT.W	"
12	A.card.m.s	@card@
"	PONCT.W	"
	N.C.m.s	
$id	N.C.m.s	çid
=	PONCT.W	=
"	PONCT.W	"
12	D.card.m.s	@card@
OR	N.C.m.s	or
1	N.card.m.s	@card@
"	PONCT.W	"
	N.C.m.s	
$id	N.C.m.s	çid
=	PONCT.W	=
"	PONCT.W	"
12	A.card.m.s	@card@
;	PONCT.W	;
DROP	N.C.m.p	drop
TABLE	N.C.m.s	table
`	N.C.m.s	`
test	V.P.3.s	tenir
`	N.C.m.s	`
;	PONCT.W	;
"	PONCT.W	"
$id=$_POST['id	N.P.m.s	<unknown>
'	PONCT.W	'
]	PONCT.W	]
;	PONCT.W	;
$reponse	N.C.f.s	<unknown>
=	PONCT.W	=
$dbh->query(	N.P.m.s	<unknown>
'	PONCT.W	'
SELECT	N.P.m.s	Select
*	N.C.m.s	*
FROM	N.P.m.s	From
`	P	à
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id='.$id	N.C.m.s	testüidä'
)	PONCT.W	)
;	PONCT.W	;
SELECT	N.P.m.s	Select
*	N.C.m.s	*
FROM	N.P.m.s	From
`	P	à
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id=12	N.C.m.s	<unknown>
SELECT	N.P.m.s	Select
*	N.C.m.s	*
FROM	N.P.m.s	From
`	N.P.m.s	`
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id=12	N.C.m.s	<unknown>
OR	N.P.x.s	Or
1	D.card.m.s	@card@
SELECT	N.P.m.s	Select
*	N.C.m.s	*
FROM	N.P.m.s	From
`	N.C.m.s	`
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id=12	N.C.m.s	<unknown>
;	PONCT.W	;
DROP	N.P.x.s	Drop
TABLE	N.P.m.s	Table
`	N.C.m.s	`
test	V.P.3.s	tenir
`	N.C.m.s	`
;	PONCT.W	;
Requêtes	N.C.f.p	requête
avancées	VK.f.p	avancer
	P	à
Préparation	N.C.f.s	préparation
de	P	de
requêtes	N.C.f.p	requête
génériques	A.qual.f.p	générique
:	PONCT.W	:
	P+D.def.m.s	c
prepare($query)	N.C.m.s	prepareçqueryç
;	PONCT.W	;
	N.P.x.s	
execute	V.P.3.s	executer
avec	P	avec
arguments	N.C.m.p	argument
	P	à
Plus	ADV.-	plus
sécurisé	VK.m.s	sécuriser
que	C.S	que
la	D.def.f.s	le
version	N.C.f.s	version
précédente	A.qual.f.s	précédent
,	PONCT.W	,
mise	VK.f.s	mettre
en	P	en
cache	N.C.f.s	cache
,	PONCT.W	,
plus	ADV.-	plus
portable	A.qual.f.s	portable
…	P	à
en	P	en
clair	N.C.m.s	clair
à	P	à
utiliser	VW	utiliser
$req	N.P.m.s	<unknown>
=	PONCT.W	=
$dbh->prepare(	N.P.x.s	<unknown>
'	PONCT.W	'
SELECT	N.P.m.s	Select
test_id	A.qual.m.s	testüid
,	PONCT.W	,
test_val	N.C.m.s	testüval
FROM	N.P.m.s	From
`	N.P.m.s	`
test	N.C.m.s	test
`	N.C.m.s	`
WHERE	N.P.m.s	Where
test_id	N.C.m.s	testüid
=	PONCT.W	=
?	PONCT.S	?

AND	P	and
test_val=	N.C.m.s	testüvalà
?	PONCT.S	?

'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
$req->execute(array($x	N.P.x.s	<unknown>
,	PONCT.W	,
$y	N.P.f.s	<unknown>
)	PONCT.W	)
)	PONCT.W	)
;	PONCT.W	;
Remarques	N.C.f.p	remarque
finales	A.qual.f.p	final
	P	à
	P	à
Limiter	VW	limiter
au	P+D.def.m.s	au
maximum	N.C.m.s	maximum
les	D.def.m.p	le
droits	N.C.m.p	droit
de	P	de
l'	D.def.m.s	le
utilisateur	N.C.m.s	utilisateur
.	PONCT.S	.

Les	D.def.f.p	le
données	N.C.f.p	donnée
transmises	VK.f.p	transmettre
par	P	par
le	D.def.m.s	le
client	N.C.m.s	client
ne	ADV.neg	ne
sont	V.P.3.p	être
pas	ADV.neg	pas
fiables	A.qual.f.p	fiable
:	PONCT.W	:
	N.C.m.s	
SQL	N.P.m.s	Sql
Injection	N.C.f.s	injection
	P	à
Javascript	N.P.m.s	Javascript
injection	N.C.f.s	injection
	P	à
Tenter	N.P.m.s	Tenter
	P	à
	N.C.m.s	
de	P	de
mettre	VW	mettre
javascript:alert("Hello	ADV.-	<unknown>
!	PONCT.S	!

"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
dans	P	dans
un	D.ind.m.s	un
input	N.C.m.s	input
Toujours	ADV.-	toujours
tester	VW	tester
l'	D.def.f.s	le
existence	N.C.f.s	existence
/	PONCT.W	@card@
la	D.def.f.s	le
validité	N.C.f.s	validité
d'	P	de
un	D.ind.m.s	un
fichier	N.C.m.s	fichier
/	PONCT.W	@card@
code	N.C.m.s	code
à	P	à
inclure	VW	inclure
.	PONCT.S	.

Regarder	VW	regarder
régulièrement	ADV.-	régulièrement
les	D.def.m.p	le
logs	N.C.m.p	log
.	PONCT.S	.

MYSQL	N.P.m.s	Mysql
MySQL	N.P.m.s	Mysql
–	P	à
types	N.C.m.p	type
de	P	de
données	N.C.f.p	donnée
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
INT	N.P.m.s	Int
FLOAT	N.P.m.s	Float
TEXT	N.P.m.s	Text
DATETIME	N.C.f.s	datetime
/	PONCT.W	@card@
TIMESTAMP	N.P.m.s	Timestamp
	N.C.m.s	
	N.C.m.s	
ENUM('value1','value2	N.P.x.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
:	PONCT.W	:
	N.C.m.s	
	P	à
Ensemble	ADV.-	ensemble
fixé	VK.m.s	fixer
de	P	de
valeurs	N.C.f.p	valeur
SET('value1','value2	N.P.x.s	<unknown>
'	PONCT.W	'
,	PONCT.W	,
...	PONCT.W	<unknown>
)	PONCT.W	)
:	PONCT.W	:
	N.C.m.s	
	P	à
Date	N.P.f.s	Date
et	C.C	et
heure	N.C.f.s	heure
/	PONCT.W	@card@
Horaire	N.P.m.s	Horaire
Unix	N.P.f.s	Unix
Une	D.ind.f.s	un
ou	C.C	ou
plusieurs	D.ind.m.p	plusieurs
parmi	N.C.m.p	parmi
Et	C.C	et
beaucoup	ADV.-	beaucoup
d'	P	de
autres	A.ind.m.p	autre
MySQL	N.P.x.s	Mysql
–	P	à
opérations	N.C.f.p	opération
	P	à
Création	N.C.f.s	création
de	P	de
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
	P+D.def.m.s	c
CREATE	N.C.m.s	create
	P+D.def.m.s	c
Suppression	N.C.f.s	suppression
de	P	de
bases	N.C.f.p	base
de	P	de
données	N.C.f.p	donnée
	P+D.def.m.s	c
DROP	N.C.m.s	drop
	P+D.def.m.s	c
IF	N.P.m.s	If
	P+D.def.m.s	c
DATABASE	N.P.m.s	Database
nom_bd	N.P.m.s	Nomübd
DATABASE	N.P.m.s	Database
[	PONCT.W	[
IF	N.P.m.s	If
EXISTS	N.P.x.s	Exists
]	PONCT.W	]
nom_bd	N.C.m.s	nomübd
EXISTS	N.P.m.s	Exists
évite	V.P.3.s	éviter
une	D.ind.f.s	un
erreur	N.C.f.s	erreur
si	C.S	si
la	D.def.f.s	le
base	N.C.f.s	base
n'	ADV.neg	ne
existe	V.P.3.s	exister
pas	ADV.neg	pas
.	PONCT.S	.

Utilisation	N.C.f.s	utilisation
d'	P	de
une	D.ind.f.s	un
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
	P	à
USE	N.P.f.s	Use
	P	à
La	D.def.f.s	le
nom_bd	ET	nomübd
base	A.qual.f.s	bas
spécifiée	A.qual.f.s	spécifié
sera	V.F.3.s	être
utilisée	VK.f.s	utiliser
par	P	par
défaut	N.C.m.s	défaut
.	PONCT.S	.

MySQL	N.C.m.s	mysql
–	P	à
opérations	N.C.f.p	opération
	P	à
CREATE	N.C.m.s	create
TABLE	N.P.m.s	Table
:	PONCT.W	:
permet	V.P.3.s	permettre
de	P	de
créer	VW	créer
une	D.ind.f.s	un
nouvelle	A.qual.f.s	nouveau
table	N.C.f.s	table
dans	P	dans
la	D.def.f.s	le
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
courante	A.qual.f.s	courant
	P	à
CREATE	N.C.m.s	create
TABLE	N.C.m.s	table
tbl_name	N.C.m.s	tbläname
[	PONCT.W	[
(	PONCT.W	(
champ1	N.C.m.s	<unknown>
,	PONCT.W	,
…	N.C.m.s	…
)	PONCT.W	)
]	PONCT.W	]
	P	à
AUTO_INCREMENT	N.C.m.s	autoëincrement
:	PONCT.W	:
le	D.def.m.s	le
contenu	N.C.m.s	contenu
est	V.P.3.s	être
incrémenté	VK.m.s	incrémenter
automatiquement	ADV.-	automatiquement
après	P	après
chaque	D.ind.f.s	chaque
insertion	N.C.f.s	insertion
	P	à
PRIMARY_KEY	N.P.m.s	Primaryçkey
:	PONCT.W	:
clé	N.C.f.s	clé
d'	P	de
index	N.C.m.s	index
primaire	A.qual.m.s	primaire
unique	A.qual.m.s	unique
CREATE	N.P.m.s	Create
TABLE	N.P.m.s	Table
`	N.C.m.s	`
test	V.P.3.s	tenir
`	N.C.m.s	`
(	PONCT.W	(
`	N.C.m.s	`
test_id	N.C.m.s	testüid
`	N.C.m.s	`
INT	N.P.m.s	Int
NOT	N.P.m.s	Not
NULL	N.P.m.s	Null
AUTO_INCREMENT	N.C.m.s	autoëincrement
PRIMARY	N.P.m.s	Primary
KEY	N.P.m.s	Key
,	PONCT.W	,
`	P+D.def.m.s	c
test_val	N.C.m.s	testüval
`	P	à
INT	N.P.m.s	Int
NOT	N.P.m.s	Not
NULL	N.P.f.s	Null
)	PONCT.W	)
MySQL	N.P.m.s	Mysql
–	D.card.f.p	–
opérations	N.C.f.p	opération
	P+D.def.m.s	c
Suppression	N.C.f.s	suppression
d'	P	de
une	D.ind.f.s	un
Table	N.C.f.s	table
	P+D.def.m.s	c
DROP	N.P.f.s	Drop
	P+D.def.m.s	c
TABLE	N.C.m.s	table
tbl_name	N.C.m.s	tbläname
[	PONCT.W	[
,	PONCT.W	,
tbl_name	N.C.m.s	tbläname
,	PONCT.W	,
…	N.P.f.s	…
]	PONCT.W	]
Modifier	VW	modifier
la	D.def.f.s	le
structure	N.C.f.s	structure
d'	P	de
une	D.ind.f.s	un
table	N.C.f.s	table
existante	A.qual.f.s	existant
	P+D.def.m.s	c
ALTER	N.P.m.s	Alter
TABLE	N.P.m.s	Table
tbl_name	N.C.m.s	tbläname
alter_spec	N.P.x.s	Alteräspec
[	PONCT.W	[
,	PONCT.W	,
alter_spec	N.C.m.s	alteräspec
…	N.P.x.s	…
]	PONCT.W	]
MySQL	N.P.m.s	Mysql
–	P	à
opérations	N.C.f.p	opération
	P	à
Insérer	VW	insérer
de	D.ind.m.p	de
nouveaux	A.qual.m.p	nouveau
enregistrement	N.C.m.s	enregistrement
INSERT	N.P.m.s	Insert
INTO	N.P.m.s	Into
article	N.C.m.s	article
(	PONCT.W	(
Champ1	N.P.m.s	Champ1
,	PONCT.W	,
Champ2	N.P.m.s	<unknown>
)	PONCT.W	)
VALUES	N.P.m.s	Values
(	PONCT.W	(
'	P	e
12	A.card.m.s	@card@
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
test	N.C.m.s	test
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
	P	à
Remplacer	VW	remplacer
un	D.ind.m.s	un
enregistrement	N.C.m.s	enregistrement
REPLACE	N.P.m.s	Replace
INTO	N.P.m.s	Into
article	N.C.m.s	article
(	PONCT.W	(
Champ1	N.P.m.s	Champ1
,	PONCT.W	,
Champ2	N.P.m.s	<unknown>
)	PONCT.W	)
VALUES	N.P.m.s	Values
(	PONCT.W	(
'	P	e
13	A.card.m.s	@card@
'	PONCT.W	'
,	PONCT.W	,
'	PONCT.W	'
test	N.C.m.s	test
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
MySQL	N.P.x.s	Mysql
–	P	à
opérations	N.C.f.p	opération
	P	à
Modification	N.C.f.s	modification
des	P+D.def.f.p	du
valeurs	N.C.f.p	valeur
UPDATE	N.P.m.s	Update
table_name	N.C.m.s	tableëname
SET	N.P.m.s	Set
column_name=expr1	N.C.m.s	<unknown>
[	PONCT.W	[
WHERE	N.P.m.s	Where
section_condition_where	N.C.f.s	sectionçconditionçwhere
]	PONCT.W	]
	P	à
Suppression	N.C.f.s	suppression
d'	P	de
enregistrements	N.C.m.p	enregistrement
DELETE	N.P.m.s	Delete
FROM	N.P.m.s	From
table_name	N.C.m.s	tableëname
[	PONCT.W	[
WHERE	N.P.m.s	Where
definition	N.C.f.s	definition
]	PONCT.W	]
MySQL	N.P.m.s	Mysql
–	P	à
opérations	N.C.f.p	opération
	P	à
Sélection	N.C.f.s	sélection
d'	P	de
enregistrement	N.C.m.s	enregistrement
SELECT	N.P.f.s	Select
[	PONCT.W	[
DISTINCT|ALL	N.P.f.s	Distinctçall
]	PONCT.W	]
expression_de_selection	N.C.f.s	expressionçde-selection
FROM	N.P.m.s	From
tables	N.C.f.p	table
WHERE	N.P.m.s	Where
expression_where	A.qual.m.s	expressionäwher
[	PONCT.W	[
GROUP	N.P.m.s	Group
BY	N.P.m.s	By
col_name	V.P.3.s	colänamer
,	PONCT.W	,
…	N.C.m.s	…
]	PONCT.W	]
[	PONCT.W	[
HAVING	N.P.m.s	Having
where_definition	N.C.m.s	whereëdefinition
]	PONCT.W	]
[	PONCT.W	[
ORDER	N.P.m.s	Order
BY	N.P.m.s	By
[	PONCT.W	[
ASC|DESC	N.P.x.s	Asc-Desc
]	PONCT.W	]
]	PONCT.W	]
	D.card.m.p	
Exemples	N.C.m.p	exemple
SELECT	N.P.f.s	Select
*	V.P.3.s	être
FROM	N.P.m.s	From
article	V.P.3.s	articler
WHERE	N.P.m.s	Where
PrixArt	N.P.m.s	Prixart
>	N.C.m.s	>
50	N.card.m.s	@card@
	P	à
SELECT	N.P.m.s	Select
NumGrArt	N.P.m.s	Numgrart
,	PONCT.W	,
AVG(PrixArt)	N.P.m.s	<unknown>
FROM	N.P.m.s	From
article	V.P.3.s	articler
GROUP	N.P.m.s	Group
BY	N.P.m.s	By
NumArt	N.P.m.s	Numart
	P	à
UN	D.ind.m.s	un
EXEMPLE	N.P.m.s	Exemple
"	PONCT.W	"
COMPLET	N.C.m.s	complet
"	PONCT.W	"
SIMPLE	N.C.m.s	simple
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
PUBLIC	A.qual.m.s	public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
XHTML	N.P.m.s	<unknown>
1.0	D.card.m.p	@card@
Strict//EN	N.C.m.p	<unknown>
"	PONCT.W	"
"	PONCT.W	"
http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">	N.C.m.p	<unknown>
<html>	N.P.x.s	<unknown>
<head><title>Site	N.P.x.s	<unknown>
de	P	de
vente	N.C.f.s	vente
en	P	en
ligne</title></head>	N.C.m.p	<unknown>
<body>	N.P.m.s	<unknown>
<div	N.P.m.s	<unknown>
id="container">	V.P.3.s	idçäcontainercer
<div	N.P.m.s	<unknown>
id="header">	ET	idççheaderäë
<ul	ET	çul
id="top_menu">	ET	idäëtopçmenuë
<li><a	N.P.m.s	<unknown>
href="index.php">index</a></li>	ET	<unknown>
<li><a	N.P.m.s	<unknown>
href="rechercher.php">rechercher</a></li>	ET	hrefç-rechercherche
<li><a	N.P.m.s	<unknown>
href="commander.php">commander</a></li>	A.ind.m.s	<unknown>
</ul>	N.P.x.s	<unknown>
</div>	N.P.x.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

--	PONCT.W	--
/header	N.C.m.s	<unknown>
--	PONCT.W	--
>	D.card.m.s	>
<div	N.C.m.s	<unknown>
id="main">	N.C.m.s	idäämainçë
<	I	à
!	PONCT.S	!

–	P	à
Affichage	N.C.m.s	affichage
du	P+D.def.m.s	du
catalogue	N.C.m.s	catalogue
venant	VG	venir
de	P	de
la	D.def.f.s	le
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
--	PONCT.W	--
>	P	à
</div>	N.P.x.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

--	PONCT.W	--
/main	N.C.m.s	<unknown>
--	PONCT.W	--
>	D.card.m.s	>
<div	N.C.m.s	<unknown>
id="footer">	N.C.m.p	idä-footerçë
<p>Copyright	N.P.x.s	<unknown>
2011	D.card.m.p	@card@
&copy	N.P.x.s	<unknown>
;	PONCT.W	;
SdVeL	N.P.m.s	Sdvel
.	PONCT.S	.

Tous	A.ind.m.p	tous
droits	A.qual.m.p	droit
réservés</p>	N.C.m.p	<unknown>
</div>	A.ind.m.p	<unknown>
<	I	à
!	PONCT.S	!

--	PONCT.W	--
/footer	VW	<unknown>
--	PONCT.W	--
>	N.C.m.s	>
</div>	N.P.x.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

--	PONCT.W	--
/container	N.C.m.s	<unknown>
--	PONCT.W	--
>	D.card.m.p	>
</body>	N.P.x.s	<unknown>
</html>	N.P.x.s	<unknown>
config.php	ET	configrphp
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
session_start()	N.C.f.s	sessionästartëë
;	PONCT.W	;
$user	VW	çuser
=	PONCT.W	=
"	PONCT.W	"
root	N.C.m.s	root
"	PONCT.W	"
;	PONCT.W	;
$pwd	ET	<unknown>
=	PONCT.W	=
"	PONCT.W	"
"	PONCT.W	"
;	PONCT.W	;
$host	ET	çhost
=	PONCT.W	=
"	PONCT.W	"
127.0.0.1	A.card.f.s	@card@
"	PONCT.W	"
;	PONCT.W	;
$bdd	ET	<unknown>
=	PONCT.W	=
"	PONCT.W	"
test	V.P.3.s	tenir
"	PONCT.W	"
;	PONCT.W	;
try	ET	try
{	P+D.def.m.s	c
$dbh	N.P.x.s	<unknown>
=	ET	=
new	ET	new
PDO('mysql:host='.$host	N.P.x.s	<unknown>
.	PONCT.S	.
'	PONCT.W	'
;	PONCT.W	;
dbname='.$bdd	N.C.m.s	<unknown>
,	PONCT.W	,
$user	N.P.m.s	<unknown>
,	PONCT.W	,
$pwd	N.P.m.s	<unknown>
)	PONCT.W	)
;	PONCT.W	;
}	D.card.m.s	}
catch	N.C.m.s	catch
(	PONCT.W	(
Exception	N.C.f.s	exception
$e	N.C.m.s	<unknown>
)	PONCT.W	)
{	D.card.m.s	{
die('Erreur	N.C.m.s	dieç'erreur
:	PONCT.W	:
'	PONCT.W	'
.	PONCT.S	.

$e->getMessage())	N.C.m.s	<unknown>
;	PONCT.W	;
}	N.C.m.s	}
$menu	N.P.m.s	<unknown>
=	PONCT.W	=
array(	VK.m.s	arrayer
"	PONCT.W	"
index.php	ET	<unknown>
"	PONCT.W	"
=>	D.card.m.p	<unknown>
"	PONCT.W	"
index	ET	index
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
rechercher.php	N.C.m.s	rechercherphp
"	PONCT.W	"
=>	N.P.m.s	<unknown>
"	PONCT.W	"
rechercher	VW	rechercher
"	PONCT.W	"
,	PONCT.W	,
"	PONCT.W	"
commander.php	ET	<unknown>
"	PONCT.W	"
=>	N.P.m.s	<unknown>
"	PONCT.W	"
commander	VW	commander
"	PONCT.W	"
)	PONCT.W	)
;	PONCT.W	;
?	PONCT.S	?

>	P	à
header.php	N.C.m.s	<unknown>
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
include_once('config.php')	N.P.x.s	Includeçonceç'config
;	PONCT.W	;
?	PONCT.S	?

>	P	à
<	N.C.m.s	<
!	PONCT.S	!

DOCTYPE	N.C.f.s	doctype
html	ADV.-	<unknown>
PUBLIC	A.qual.m.s	public
"	PONCT.W	"
-//W3C//DTD	N.C.m.s	<unknown>
XHTML	N.P.m.s	<unknown>
1.0	D.card.m.p	@card@
Strict//EN	N.C.m.p	<unknown>
"	PONCT.W	"
"	PONCT.W	"
http://www.w3.org/TR/xhtml1/DTD/xhtml1strict.dtd">	N.C.m.p	<unknown>
<html>	N.P.x.s	<unknown>
<head><title>Site	N.P.x.s	<unknown>
de	P	de
vente	N.C.f.s	vente
en	P	en
ligne</title></head>	N.C.m.p	<unknown>
<body>	N.P.m.s	<unknown>
<div	N.P.m.s	<unknown>
id="container">	V.P.3.s	idçäcontainercer
<div	N.P.m.s	<unknown>
id="header">	ET	idççheaderäë
<ul	N.P.m.s	<unknown>
id="top_menu">	N.P.x.s	Idçätopçmenç
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
foreach	A.qual.m.s	foreach
(	PONCT.W	(
$menu	VK.m.s	cmener
as	ET	as
$page_url	N.P.x.s	<unknown>
=>	N.P.x.s	<unknown>
$page_title	N.P.x.s	<unknown>
)	PONCT.W	)
echo	ET	echo
"	PONCT.W	"
<li><a	N.P.m.s	<unknown>
href=\"$page_url\">$page_title</a></li>\n	N.P.x.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
?	PONCT.S	?

>	P	à
</ul>	N.C.m.s	<unknown>
</div>	N.P.x.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

--	PONCT.W	--
/	PONCT.W	@card@
header	N.C.m.s	header
--	PONCT.W	--
>	N.C.m.s	>
<div	N.P.m.s	<unknown>
id="main">	N.P.x.s	<unknown>
footer.php	ET	<unknown>
</div>	N.P.x.s	<unknown>
<	I	à
!	PONCT.S	!

--	PONCT.W	--
/	PONCT.W	@card@
main	N.C.f.s	main
--	PONCT.W	--
>	D.card.m.s	>
<div	N.C.m.s	<unknown>
id="footer">	N.C.m.s	idääfooterç
<p>Copyright	N.P.x.s	<unknown>
2011	A.card.m.s	@card@
&copy	N.P.x.s	<unknown>
;	PONCT.W	;
DVD	N.P.x.s	Dvd
Club	N.P.m.s	Club
.	PONCT.S	.

Tous	A.ind.m.p	tous
droits	A.qual.m.p	droit
réservés</p>	N.C.m.p	<unknown>
</div>	A.ind.m.p	<unknown>
<	I	à
!	PONCT.S	!

--	PONCT.W	--
/	PONCT.W	@card@
footer	VW	footer
--	PONCT.W	--
>	P	à
</div>	N.P.x.s	<unknown>
<	N.C.m.s	<
!	PONCT.S	!

--	PONCT.W	--
/	PONCT.W	@card@
container	VW	container
--	PONCT.W	--
>	P	à
</body>	N.P.x.s	<unknown>
</html>	N.P.m.s	<unknown>
Toutes	A.ind.f.p	tout
les	D.def.f.p	le
autres	A.ind.f.p	autre
pages	N.C.f.p	page
Création	N.C.f.s	création
d'autant	ADV.-	d'autant
de	P	de
pages	N.C.f.p	page
que	PRO.rel.f.p	que
nécessaire	A.qual.m.s	nécessaire
:	PONCT.W	:
	N.C.m.s	
	N.C.m.s	
	N.C.m.s	
	P+D.def.m.s	c
Modification	N.C.f.s	modification
de	P	de
l'	D.def.f.s	le
entête	N.C.f.s	entête
ou	C.C	ou
du	P+D.def.m.s	du
pied	N.C.m.s	pied
de	P	de
page	N.C.f.s	page
via	P	via
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
header.php	A.qual.m.p	<unknown>
,	PONCT.W	,
footer.php	ET	<unknown>
Modification	N.C.f.s	modification
des	P+D.def.m.p	du
identifiants	N.C.m.p	identifiant
de	P	de
connexion	N.C.f.s	connexion
via	P	via
le	D.def.m.s	le
fichier	N.C.m.s	fichier
config.php	N.C.m.s	configrphp
…	N.P.x.s	…
Reste	V.P.3.s	rester
à	P	à
modifier	VW	modifier
les	D.def.m.p	le
fichiers	N.C.m.p	fichier
header/footer	VW	<unknown>
et	C.C	et
faire	VW	faire
une	D.ind.f.s	un
css	N.C.f.s	<unknown>
.	PONCT.S	.

	N.C.m.s	
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
include('header.php')	A.qual.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	P	à
<	N.C.m.s	<
!	PONCT.S	!

–	P	à
Affichage	N.C.m.s	affichage
du	P+D.def.m.s	du
catalogue	N.C.m.s	catalogue
venant	VG	venir
de	P	de
la	D.def.f.s	le
base	N.C.f.s	base
de	P	de
données	N.C.f.p	donnée
--	PONCT.W	--
>	N.C.m.s	>
<	N.C.m.s	<
?	PONCT.S	?

php	ET	<unknown>
$reponse	N.P.f.s	<unknown>
=	P	à
$dbh->query('SELECT	N.C.m.s	<unknown>
*	N.C.m.p	*
FROM	N.P.m.s	From
`	P	à
test	N.C.m.s	test
`	N.C.m.s	`
'	PONCT.W	'
)	PONCT.W	)
;	PONCT.W	;
if	ET	if
(	PONCT.W	(
$reponse->rowCount()	N.C.f.s	çreponse--rowcountçë
>	N.C.m.s	>
0	A.card.m.s	@card@
)	PONCT.W	)
{	P+D.def.m.s	c
while	N.C.m.s	while
(	PONCT.W	(
$donnees	N.C.f.p	<unknown>
=	PONCT.W	=
$reponse->fetch())	N.P.m.s	<unknown>
{	P+D.def.m.s	c
echo	N.C.m.s	echo
...	PONCT.W	<unknown>
}	N.C.m.s	}
}	N.C.m.s	}
else	PPRO.3.f.s	<unknown>
{	P	à
echo	ET	echo
"	PONCT.W	"
<li>aucun	N.P.m.s	<unknown>
résultat</li>	N.C.m.s	<unknown>
"	PONCT.W	"
;	PONCT.W	;
}	N.C.m.s	}
?	PONCT.S	?

>	N.C.m.s	>
<	N.C.m.s	<
?	PONCT.S	?

php	N.C.m.s	<unknown>
include('footer.php')	A.qual.m.s	<unknown>
;	PONCT.W	;
?	PONCT.S	?

>	N.C.m.s	>
Pour	P	pour
aller	VW	aller
plus	ADV.-	plus
loin	ADV.-	loin
	C.S	
Il	CL.suj.3.m.s	il
faut	V.P.3.s	falloir
ensuite	ADV.-	ensuite
apprendre	VW	apprendre
:	PONCT.W	:
	P	à
Quelques	D.ind.f.p	quelque
fonctions	N.C.f.p	fonction
de	P	de
base	N.C.f.s	base
supplémentaires	A.qual.f.p	supplémentaire
	A.qual.f.p	
A	P	à
ne	ADV.neg	ne
jamais	ADV.neg	jamais
faire	VW	faire
confiance	N.C.f.s	confiance
au	P+D.def.m.s	au
client	N.C.m.s	client
	P	à
La	D.def.f.s	le
gestion	N.C.f.s	gestion
des	P+D.def.m.p	du
objets	N.C.m.p	objet
en	P	en
Php	N.C.m.s	<unknown>
	N.C.m.s	
Les	D.def.f.p	le
méthodes	N.C.f.p	méthode
de	P	de
programmation	N.C.f.s	programmation
avancées	VK.f.p	avancer
	P+D.def.m.s	c
MVC	N.P.x.s	Mvc
	P	à
Gestion	N.C.f.s	gestion
	P	à
…	N.C.m.s	…
de	P	de
templates	N.C.m.p	template

