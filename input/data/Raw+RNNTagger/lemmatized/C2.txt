Php
Thierry
Lecroq
Université
de
Rouen
FRANCE
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
1
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
2
/
64
page
dynamiques
Exemple
Exemple
statique
<html>
<head><title>Page
statique</title></head>
<body>
Nous
sommes
le
2/10/2008
</body>
</html>
Problème
Afficher
une
page
différente
en
fonction
de
l'
utilisateur
,
de
l'
environnement
,
...
Solution
Utiliser
un
langage
de
programmation
évolué
,
par
exemple
Php
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
3
/
64
Présentation
Langage
récent
(
crée
en
1994
)
Versions
utilisées
:
I
4.3
(
plus
répandue
)
I
5.0
(
avec
une
couche
objet
)
Langage
de
script
Langage
interprété
Présence
de
un
interpréteur
côté
serveur
Intégré
au
code
HTML
Syntaxe
proche
du
C
et
du
Java
Interface
simple
avec
beaucoup
de
Sgbd
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
4
/
64
Modèle
de
exécution
1
le
client
demande
une
page
Php
2
le
serveur
web
exécute
le
code
de
la
page
3
lancement
de
l'
interpréteur
4
exécution
du
code
5
le
serveur
web
renvoie
le
résultat
de
l'
exécution
6
le
client
affiche
le
résultat
Pour
le
client
,
il
est
impossible
de
voir
le
code
Php
Seul
le
résultat
de
l'
exécution
est
récupéré
par
le
client
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
5
/
64
Premier
exemple
Code
côté
serveur
<html>
<head><title>Page
dynamique</title></head>
<body>
<
?

php
echo
(
"
Nous
sommes
le
"
)
;
echo
(
date
(
"
j/m/Y
"
)
)
;
?

à
</body>
</html>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
6
/
64
Premier
exemple
Résultat
côté
client
<html>
<head><title>Page
statique</title></head>
<body>
Nous
sommes
le
23/10/2008
</body>
</html>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
7
/
64
Mélange
HTML/PHP
Php
s'
intègre
dans
l'
HTML
entre
<
?

php
et
?

à
Les
instructions
se
finissent
par
;
Les
commentaires
sont
soit
entre
/*
et
*/
,
soit
après
//
ou
#
Manuel
complet
en
français
:
http://www.php.net/manual/fr
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
8
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
9
/
64
Les
variables
Les
variables
sont
préfixées
par
à
Leur
nom
suit
les
règles
classiques
Exemple
:
$my_var_03
Les
noms
sont
sensibles
à
la
casse
:
$var
à
$Var
Pas
de
déclaration
,
typage
implicite
Exemple
:
$my_var_03
à
54
;
//
Maintenant
,
c'
est
un
entier
$my_var_03
=
"
pif
"
;
//
Maintenant
,
c'
est
une
chaine
Attention
au
fautes
de
frappes
dans
les
noms
de
variables
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
10
/
64
Les
types
entiers
:
54
flottants
:
54.3
chaˆınes
:
”
54
”
ou
’
54
’
booléens
:
false
ou
true
tableaux
Fonctions
de
test
isset($var)
:
renvoie
true
si
$var
existe
unset($var)
:
détruit
$var
is_integer($var)
,
is_string($var)
,
...
:
renvoie
true
si
$var
est
un
entier
,
une
chaˆıne
,
...
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
11
/
64
Les
commentaires
et
les
constantes
Les
commentaires
après
//
:
sur
une
ligne
après
#
:
sur
une
ligne
entre
/*
et
*/
:
sur
plusieurs
lignes
Constantes
On
les
définit
à
l'
aide
de
la
commande
define
Exemple
:
define("PI
"
,
3.14
)
On
les
utilise
directement
(
sans
$
)
:
echo(PI)
Test
de
existence
:
defined("PI")
renvoie
1
,
defined("Pi")
renvoie
0
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
12
/
64
Les
entrées/sorties
Les
entrées
à
l'
aide
de
formulaires
Les
sorties
On
peut
afficher
avec
la
commande
echo
(
avec
ou
sans
parenthèses
)
print
est
équivalente
à
echo
On
peut
faire
un
affichage
comme
en
C
avec
printf
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
13
/
64
Opérateurs
Arithmétiques
:
+
-
*
/
%
uu
--
Affectation
:
=
.=
au
-=
çù
/=
çù
Comparaison
:
==
à
!

=
>
===
çù
!

==
>=
Logiques
:
and
&&
or
çù
xor
!

Conditionnel
:
...
?

...
:
...
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
14
/
64
Instructions
conditionnelles
if
if
(
cond
)
{
...
}
elseif
(
cond
)
{
...
à
else
{
...
}
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
15
/
64
Instructions
conditionnelles
switch
switch
(
expr
)
à
case
VALEUR1
:
...
break
;
case
VALEUR2
:
...
break
;
default
:
...
break
;
}
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
16
/
64
Instructions
itératives
for
for
(
init
;
cond
;
modif
)
{
...
}
while
while
(
cond
)
{
...
}
do
while
do
{
...
}
while
(
cond
)
;
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
17
/
64
Les
tableaux
Chaque
élément
du
tableau
a
une
clé
et
une
valeur
Pas
de
déclaration
du
tableau
Les
valeurs
du
éléments
ne
sont
pas
forcément
toutes
du
même
type
Exemple
remplissage
à
la
volée
:
$tab
[
0
]
=
54
;
$tab
[
1
]
=
"
pif
"
;
$tab
[
"
paf
"
]
=
false
;
Exemple
remplissage
direct
:
$tab
=
array
(
54
,
"
pif
"
)
;
$tab
=
array
(
"
paf
"
=>
false
)
;
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
18
/
64
Parcours
de
tableaux
Parcours
(
classique
)
avec
for
Parcours
spécifique
:
foreach
(
$tab
as
$value
)
{
...
}
foreach
(
$tab
as
$key
=>
$value
)
{
...
}
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
19
/
64
Les
tableaux
Fonctions
prédéfinies
count($tab)
:
compte
le
nombre
de
éléments
initialisés
current($tab)
:
retourne
la
valeur
de
l'
élément
en
cours
key($tab)
:
retourne
l'
indice
de
l'
élément
en
cours
reset($tab)
:
déplace
le
pointeur
vers
le
premier
élément
list($indice,$valeur)
avec
each($tab)
:
permettent
de
parcourir
les
couples
(
indice
,
valeur
)
même
si
les
indices
ne
sont
pas
consécutifs
next($tab)
:
déplace
le
pointeur
vers
l'
élément
suivant
prev($tab)
:
déplace
le
pointeur
vers
l'
élément
précédent
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
20
/
64
Les
tableaux
Fonctions
prédéfinies
sort($tab)
:
trie
les
valeurs
et
réaffecte
les
indices
asort($tab)
:
trie
les
valeurs
et
ne
réaffecte
pas
les
indices
rsort($tab)
:
id
sort
mais
dans
l'
ordre
inverse
arsort($tab)
:
id
asort
mais
dans
l'
ordre
inverse
ksort($tab)
:
trie
les
indices
krsort($tab)
:
id
ksort
mais
dans
l'
ordre
inverse
usort($tab,$critere)
,
uasort($tab,$critere)
,
uksort($tab,$critere)
:
trie
selon
un
citère
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
21
/
64
Les
chaˆınes
de
caractères
Délimitées
par
’
:
contenu
non
interprété
Délimitées
par
"
:
contenu
interprété
Les
unes
peuvent
contenir
les
autres
Concaténation
avec
.

Exemple
$pif
=
"
toto
"
;
//
Contient
"
toto
"
$paf
=
"
comme
$pif
"
;
//
Contient
"
comme
toto
"
$pouf
=
à
pas
comme
$pif
’
;
//
Contient
"
pas
comme
$pif
"
$bim
=
$pif.$paf
;
//
Contient
"
toto
comme
toto
"
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
22
/
64
Les
chaˆınes
de
caractères
Accès
à
un
caractère
:
$bim[0
]
strlen
(
$str
)
:
longueur
de
$str
Comparaison
avec
==
,
çùë
ou
strcmp
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
23
/
64
Les
chaˆınes
de
caractères
str_repeat(ch
,
nb
)
:
répétition
strtolower(ch)
:
minuscules
strtoupper(ch)
:
majuscules
ucwords(ch)
:
initiales
en
majuscules
ucfirst(ch)
:
1re
lettre
en
majuscule
ltrim(ch
,
liste
)
:
suppression
de
caractères
au
début
rtrim(ch
,
liste
)
:
suppression
de
caractères
à
la
fin
trim(ch
,
liste
)
:
suppression
de
caractères
au
début
et
à
la
fin
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
24
/
64
Les
chaˆınes
de
caractères
strstr(ch
,
ch2
)
:
recherche
sensible
à
la
casse
(
retourne
tous
les
caractères
de
ch
depuis
la
1re
occurence
de
ch
jusque
à
la
finn
)
stristr(ch
,
ch2
)
:
recherche
insensible
à
la
casse
substr(ch
,
indice
,
N
)
:
extraction
de
chaˆıne
de
caractères
substr_count(ch
,
ssch
)
:
décompte
du
nombre
de
occurences
de
une
sous-chaˆıne
str_replace(oldssch
,
newssch
,
ch
)
:
remplacement
strpos(ch
,
ssch
)
:
position
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
25
/
64
Les
fonctions
function
ma_fonc
(
$param1
,
$param2
,
...
)
{
...
return
...
;
}
pas
de
type
pour
les
paramètres
ou
la
valeur
de
retour
nombre
fixé
de
paramètres
le
nom
ne
commence
pas
par
$
le
nom
est
insensible
à
la
casse
le
résultat
est
renvoyé
avec
la
commande
return
une
seule
valeur
de
retour
passage
du
paramètres
par
valeur
(
par
défaut
)
passage
par
référence
:
&$param
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
26
/
64
Les
fonctions
Example
function
double($n)
{
$n
*=
2
;
return
$n
;
}
$x
=
12
echo
"
double
=
"
.

double($x)
.

"
valeur
=
"
.

$x
echo
"
double
=
"
.

double(&$x)
.

"
valeur
=
"
.

$x
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
27
/
64
Les
fonctions
Les
variables
utilisées
à
l'
intérieur
de
une
fonctions
sont
détruites
à
la
fin
,
sauf
:
si
on
les
définit
avec
static
si
on
les
définit
avec
global
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
28
/
64
Les
fonctions
Exemple
function
ma_fonc
(
)
à
static
$appels
=
0
;
$appel
Sâu
;
echo
(
"
je
ai
ete
appellee
$appels
foi
"
)
;
à
function
ma_fonc2
(
)
à
global
$var
;
$var
=
54
;
}
$var
=
0
;
ma_fonc2
(
)
;
echo
(
$var
)
;
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
29
/
64
Inclusion
de
fichiers
require
(
"
fichier
"
)
include
(
"
fichier
"
)
require_once(
"
fichier
"
)
include_once(
"
fichier
"
)
Les
variantes
include
provoquent
des
warnings
au
lieu
de
erreurs
en
cas
de
problème
Les
variantes
_once
n'
incluent
le
fichier
que
si
celui
n'
a
pas
déjà
été
inclu
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
30
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
31
/
64
Les
formulaires
ou
les
entrées
L'
élément
form
<form>
...
</form>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
32
/
64
Les
formulaires
Les
attributs
de
l'
élément
form
action
:
permet
de
préciser
comment
doivent
être
traitées
les
données
du
formulaire
côté
serveur
ex
<form
action="traitement.php">
<form
action="http//www.site.com/script/traitement.php">
<form
action="mailto:Thierry.Lecroq@univ-rouen.fr">
traitement
par
le
fichier
lui-même
<form
action="<
?

=$_SERVER[’PHP_SELF
’
]
?

>">
method
:
méthode
de
envoi
du
données
vers
le
serveur
I
get
:
utilisée
par
défaut
,
données
transmises
visibles
par
l'
utilisateur
ex
http//www.site.com/script/traitement.php
?

prenom=Thierry&nom=Lecroq
I
post
:
données
non
visibles
mais
pas
de
navigation
avec
Précédent/Suivant
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
33
/
64
Les
éléments
descendants
de
l'
élément
form
<fieldset>
:
délimite
du
groupes
de
composants
actifs
,
contient
l'
élément
<legend>
Bouton
de
envoi
<input
type="submit
"
value="Envoyer
"
name="soumission1
"
tabindex="5
"
accesskey="E
"
title="Bouton
de
envoi
"
/>
<button
type="submit
"
name="soumission2
"
tabindex="2
"
accesskey="B
"
title="Bouton
de
envoi">
Envoyer
</button>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
34
/
64
Les
éléments
descendants
de
l'
élément
form
avec
une
image
<button
type="submit
"
name="soumission2
"
tabindex="2
"
accesskey="B
"
title="Bouton
de
envoi">
Envoyer
</button>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
35
/
64
Les
éléments
descendants
de
l'
élément
form
bouton
de
remise
à
zéro
<input
type="reset
"
value="Effacer
"
name="effacement
"
/>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
36
/
64
La
saisie
de
texte
La
saisie
de
texte
uniligne
<label>Votre
nom
:
</label>
<input
type="text
"
name="nom
"
size="10
"
maxlength="25
"
value="Lecroq
"
onclick="this.value=
’
’
"
/>
Autres
attributs
:
disabled="disabled
"
readonly="readonly
"
onfocus="script
"
onchange="script
"
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
37
/
64
Exemple.xhmtl
Exemple
<form
method="post
"
action="exemple.php">
<fieldset>
<legend>Donn&eacute
;
es
personnelles</legend>
<label>Nom
:
</label>
<input
type="text
"
name="nom
"
maxlength="25
"
/>
</br></br>
<label>Pr&eacute
;
nom
:
</label>
<input
type="text
"
name="prenom
"
value="Votre
pr&eacute
;
nom
"
maxlength="25
"
onclick="this.value=
’
’
"
/>
</br></br>
<label>Adresse
:
</label>
<input
type="text
"
name="adresse
"
maxlength="60
"
/>
<label>Code
postal
:
</label>
<input
type="text
"
name="codePostal
"
size="5
"
maxlength="5
"
/>
<label>Ville
:
</label>
<input
type="text
"
name="ville
"
maxlength="25
"
/>
<input
type="submit
"
name="envoi
"
value="Envoyer
"
/>
</fieldset>
</form>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
38
/
64
Exemple.php
Exemple
<table>
<
?

php
foreach
(
$_POST
as
$cle
=>
$valeur
)
à
echo
"
<tr><td>".$cle."</td><td>".$valeur."</td></tr>
"
;
}
?

à
</table>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
39
/
64
saisie
Saisie
de
mot
de
passe
type="password
"
Saisie
de
texte
long
élément
<textarea>
attributs
cols="N
"
:
largeur
de
la
zone
rows="N
"
:
hauteur
visible
de
la
zone
Exemple
<textarea
name="commentaires
"
cols="70
"
rows="10
"
onclick="this.value=’’">
Tapez
vos
commentaires
ici
...
</textarea>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
40
/
64
Les
boutons
radio
et
les
cases
à
cocher
<input
type="radio
"
name="nom1
"
value="valeur1
"
checked="checked
"
/>
<input
type="radio
"
name="nom2
"
value="valeur2
"
/>
<input
type="checkbox
"
name="nom3
"
value="valeur3
"
checked="checked
"
/>
<input
type="checkbox
"
name="nom4
"
value="valeur4
"
/>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
41
/
64
Les
listes
de
sélection
<select
name="nom">
<option
value="valeur1">Option
1</option>
<option
value="valeur2">Option
2</option>
.

.

.

<option
value="valeurN">Option
N</option>
</select>
les
attributs
size="N
"
:
nombre
de
lignes
visibles
lors
de
l'
affichage
(
1
par
défaut
)
multiple="multiple
"
:
plusieurs
choix
possibles
dans
la
liste
(
maintenir
la
touche
Ctrl
enfoncée
)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
42
/
64
Groupes
de
option
Exemple
<select
name="nom">
<optgroup
label="Groupe
1">
<option
value="valeur1">Valeur
1</option>
<option
value="valeur2">Valeur
2</option>
</optgroup>
<optgroup
label="Groupe
2">
<option
value="valeur3">Valeur
3</option>
<option
value="valeur4">Valeur
4</option>
<option
value="valeur5">Valeur
5</option>
</optgroup>
</select>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
43
/
64
Le
transfert
de
fichiers
<form
action="fichier.php
"
method="post
"
enctype="multipart/form-data">
<input
type="file
"
name="fichier
"
accept="type
MIME">
côté
serveur
en
php
:
$_FILES
(
tableau
)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
44
/
64
Récapitulatif
Les
différents
types
pour
les
balises
input
:
text
:
une
zone
de
texte
sur
une
seule
ligne
password
:
idem
,
mais
avec
affichage
de
étoiles
file
:
permet
la
sélection
de
un
fichier
checkbox
:
une
case
à
cocher
button
:
un
bouton
simple
(
pas
de
action
sans
javascript
)
hidden
:
un
champ
texte
caché
radio
:
un
bouton
de
option
reset
:
un
bouton
de
remise
à
zéro
submit
:
un
bouton
de
soumission
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
45
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
46
/
64
Les
fichiers
Ouverture
$fd=fopen(chemin
,
mode
)
mode
r
:
lecture
(
read
)
w
:
écriture
(
write
)
a
:
ajout
(
append
)
p
:
lecture/écriture
Lecture
caractère
par
caractère
$car=fgetc($fd)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
47
/
64
Les
fichiers
Lecture
de
lignes
$ligne=fgets($fd
,
[
longueur
]
)
Lecture
de
octets
$v=fread($fd
,
nboctets
)
taille
de
un
fichier
filesize(chemin)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
48
/
64
Les
fichiers
Écriture
fwrite($fd
,
message
,
[
longueur-maximale
]
)
fputs
Fin
de
fichier
feofçëfdë
Fermeture
fclose($fd)
Existence
de
un
fichier
file-exists(chemin)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
49
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
50
/
64
Les
cookies
conçus
par
Netscape
fichiers
texte
courts
stockés
par
le
navigateur
(
côté
client
)
analogie
:
carte
de
identité
cookie
sans
durée
de
expiration
:
mémoire
vive
cookie
avec
durée
de
expiration
:
mémoire
secondaire
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
51
/
64
Exemple
<
?

php
setcookie(’truc
’
,
’
machin
’
)
;
?

à
<html>
<head>
<title>Titre</title>
</head>
<body>
<p>Un
cookie
a
&eacute
;
t&eacute
;
envoy&eacute
;
</p>
</body>
</html>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
52
/
64
Exemple
<html>
<head>
<title>Titre</title>
</head>
<body>
<
?

php
if
(isset($_COOKIE[’truc’]))
à
echo
à
<p>Un
cookie
a
&eacute
;
t&eacute
;
envoy&eacute
;
</p>
’
;
echo
à
<p>Son
contenu
est
:
’
;
echo
$_COOKIE[’truc
’
]
;
echo
à
</p>
’
;
à
else
à
echo
"
<p>Aucun
cookie
du
nom
de
truc
n'
a
&eacute
;
t&eacute
;
re&ccedil
;
u</p>
"
;
}
?

à
</body>
</html>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
53
/
64
Les
cookies
Suppression
de
un
cookie
setcookie(’nom’)
Modification
de
la
valeur
de
un
cookie
setcookie(’nom
’
,
nouvelle
valeur
)
Validité
et
date
de
expiration
setcookie(’nom
’
,
valeur
,
timestamp
)
timestamp
:
nombre
de
secondes
depuis
le
1erjanvier
1970
mktime(heures
,
minutes
,
secondes
,
mois
,
jour
,
an
)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
54
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
55
/
64
Persistence
du
données
On
veut
parfois
garder
de
l'
information
entre
plusieurs
page
:
Login
/
Password
Préférences
de
navigation
Sélection
de
produits
à
acheter
(
panier
,
...
)
On
utilise
donc
les
sessions
Php
.

Les
cookies
permettent
de
stocker
des
informations
côté
client
.

Les
sessions
permettent
de
stocker
des
informations
côté
serveur
.

Elles
sont
identifiées
par
un
numéro
qui
reste
valide
tant
que
le
visiteur
reste
connecté
.

Le
numéro
est
transmis
au
serveur
soit
dans
l'
URL
,
soit
dans
un
cookie
.

Les
données
se
placent
et
se
récupèrent
dans
$_SESSION
,
comme
pour
les
formulaires
.

Thierry
Lecroq
(
Univ
.

Rouen
)
Php
56
/
64
Utilisation
du
sessions
La
session
existe
dès
que
elle
est
crée
et
jusque
à
ce
qu'
elle
soit
détruite
Création
(
et
réouverture
)
:
session_start
(
)
Destruction
:
session_destroy
(
)
Note
:
les
sessions
s'
autodétruisent
après
un
certain
temps
(
généralement
30
min
)
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
57
/
64
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
58
/
64
Exemple
de
utilisation
<html>
<head>
<title>Connexion
au
site</title>
</head>
<body>
<form
method="post
"
action="verifLogin.php">
<label>Login</label>
<input
type="text
"
name="login">
<br/>
<label>Mot
de
passe</label>
<input
type="password
"
name="password">
<br/>
<input
type="submit
"
name="submit
"
value="Login">
</form>
</body>
</html>
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
59
/
64
<
?

php
//
On
démarre
la
session
session_start()
;
//
On
n'
effectue
les
traitement
qu'
à
la
condition
que
//
les
informations
aient
été
effectivement
postées
if
(
isset($_POST)
&&
(
!

empty($_POST[’login’]))
&&
(
!

empty($_POST[’password’]))
)
{
extract($_POST)
;
//
création
du
variables
$login
,
$mdp
et
$submit
//
On
va
chercher
le
mot
de
passe
afférent
à
ce
login
//
Établir
la
connexion
,
sélectionner
la
base
$connexion=mysql_connect("localhost","","")
;
mysql_select_db("nom_de_la_base")
;
$sql
=
"
SELECT
pseudo
,
age
,
sexe
,
ville
,
mdp
FROM
user
WHERE
login
=
’
$login
’
"
;
$req
=
mysql_query($sql)
or
die(’Erreur
SQL
:
<br
/>’.$sql
)
;
//
On
vérifie
que
l'
utilisateur
existe
bien
if
(
mysql_num_rows($req)
>
0
)
à
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
60
/
64
$data
=
mysql_fetch_assoc($req)
;
//
On
vérifie
que
son
mot
de
passe
est
correct
if
(
$password
çà
$data[’mdp
’
]
)
à
$loginOK
=
true
;
à
else
à
$loginOK
=
false
;
}
}
//
Fermeture
de
la
connexion
mysql_close($connexion)
;
}
//
si
le
login
a
été
validé
on
met
les
données
en
sessions
If
(
$loginOK
)
{
$_SESSION[’pseudo
’
]
=
$data[’pseudo
’
]
;
$_SESSION[’age
’
]
=
$data[’age
’
]
;
$_SESSION[’sexe
’
]
=
$data[’sexe
’
]
;
$_SESSION[’ville
’
]
=
$data[’ville
’
]
;
à
else
à
echo
à
Une
erreur
est
survenue
,
veuillez
réessayer
!

’
;
}
?

à
Utilisation
<
?

php
//
On
appelle
la
session
session_start()
;
//
On
affiche
une
phrase
résumant
les
infos
sur
l'
utilisateur
courant
echo
à
Pseudo
:
’
,$_SESSION[’pseudo’],’<br/>
’
,
à
Age
:
’
,$_SESSION[’age’],’<br/>
’
,
à
Sexe
:
’
,$_SESSION[’sexe’],’<br/>
’
,
à
Ville
:
’
,$_SESSION[’ville’],’<br/>
’
;
?

à
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
61
/
64
Déconnexion
Code
de
la
page
logout.php
<
?

php
//
On
appelle
la
session
session_start()
;
//
On
écrase
le
tableau
de
session
$_SESSION
=
array()
;
//
On
détruit
la
session
session_destroy()
;
?

à
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
62
/
64
Plan
1
G´
en´
eralit´
es
sur
Php
2
Les
base
3
Les
formulaires
4
Les
fichiers
5
Les
cookies
6
Les
sessions
7
Perspectives
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
63
/
64
XHTML
2.0
href
peut
être
attribut
de
tout
élément
acronym
,
b
,
i
,
small
,
big
,
tt
disparaissent
hr
est
remplacé
par
separator
l'
attribut
role
permet
de
ajouter
des
informations
sémantiques
au
éléments
(
incorporation
du
Rdf
(
Ressource
Description
Format
)
)
<section><h>
plutôt
que
<hn>
en
concurrence
avec
X/HTML
5
Thierry
Lecroq
(
Univ
.

Rouen
)
Php
64
/
64
Document
Outline
Généralités
sur
php
Les
base
Les
formulaires
Les
fichiers
Les
cookies
Les
sessions
Perspectives

