Département
Éducation
et
Technologie
•
Les
formulaires
en
HTML
•
JavaScript
et
CSS
•
Php
•
MySQL
•
Démarche
de
conception
Développer
une
application
avec
Php
et
MySQL
Étienne
Vandeput
5.87
Juin
2005
Centre
pour
la
Formation
à
l'
Informatique
dans
le
Secondaire
Publier
sur
le
Web
-
Perfectionnement
Toutes
vos
remarques
pour
améliorer
ces
notes
sont
les
bienvenues
.

vous
pouvez
les
envoyer
à
:
etienne.vandeput@fundp.ac.be
Étienne
Vandeput
–
©
Cefis
2005
2
Publier
sur
le
Web
-
Perfectionnement
Table
du
matières
1
.

LES
FORMULAIRES
EN
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
6
1.1
INTRODUCTION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
6
1.2
LE
FORMULAIRE
(
ELEMENT
à
FORM
»
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..6
1.2.1
Attributs
importants
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..7
1.2.2
Contenu
du
formulaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
8
1.3
L'
ELEMENT
«
TEXTAREA
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
8
1.3.1
1.4
Les
attributs
les
plus
importants
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.8
L'
ELEMENT
«
SELECT
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..9
1.4.1
Les
attributs
les
plus
importants
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.9
1.4.2
Les
attributs
les
plus
importants
de
l'
élément
à
option
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
10
1.5
L'
ELEMENT
«
INPUT
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..11
1.5.1
Le
champ
texte
<input
type="text">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.11
1.5.2
Le
champ
texte
spécial
mot
de
passe
<input
type="password">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.11
1.5.3
Le
champ
texte
spécial
référence
de
fichier
<input
type="file">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
1.5.4
Le
bouton
simple
<input
type="button">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
1.5.5
Le
bouton
radio
<input
type="radio">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.12
1.5.6
Le
bouton
de
envoi
<input
type="submit">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.13
1.5.7
Le
bouton
de
envoi
image
<input
type="image">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.14
1.5.8
Le
bouton
de
réinitialisation
<input
type="reset">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
14
1.5.9
La
case
à
cocher
<input
type="checkbox">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..15
1.5.10
Le
champ
caché
<input
type="hidden">
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..16
1.6
ATTRIBUTS
vu
METHODES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..16
1.7
LA
GESTION
du
EVENEMENTS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.17
1.7.1
Élément
à
form
»
et
transmission
du
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.17
1.7.2
Élément
«
textarea
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..19
1.7.3
Élément
à
select
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..20
1.7.4
Élément
«
input
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
20
1.8
AUTRES
EVENEMENTS
,
AUTRES
ELEMENTS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
20
1.9
EXERCICES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..20
1.9.1
Rendre
un
champ
texte
inaccessible
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..21
1.9.2
Donner
le
focus
à
un
élément
précis
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.21
1.9.3
Permettre
l'
exécution
de
une
action
en
fonction
du
choix
de
un
bouton
radio
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
1.10
LES
STYLES
CSS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..22
1.10.1
Feuille
de
styles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.22
1.10.2
Règle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
1.10.3
Sélecteur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
1.10.4
Exemples
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..24
Étienne
Vandeput
–
à
Cefis
2005
3
Publier
sur
le
Web
-
Perfectionnement
1.10.5
La
cascade
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
24
1.10.6
Exercice
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.25
1.10.7
Localisation
du
feuilles
de
styles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
1.11
LES
FORMULAIRES
ET
JAVASCRIPT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
1.11.1
Scripts
généraux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
1.11.2
Scripts
liés
au
formulaires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.30
1.12
EXERCICE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.35
2
.

LE
LANGAGE
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
36
2.1
EN
QUOI
CONSISTE
php
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
36
2.2
QU'
OFFRE
Php
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..37
2.3
LES
base
du
LANGAGE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..38
2.3.1
Éléments
de
syntaxe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..38
2.3.2
Variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.39
2.3.3
Les
constantes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..44
2.3.4
Types
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.44
2.3.5
Opérateurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..47
2.3.6
Fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.48
2.3.7
Expressions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
49
2.3.8
Instructions
de
contrôle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
49
2.4
EXERCICE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.51
2.5
LES
TABLEAUX
EN
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
54
2.5.1
Créer
un
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..54
2.5.2
Fonctions
liées
au
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..54
2.6
LES
SESSIONS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.55
2.6.1
Création
de
un
nouvel
utilisateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..55
2.6.2
Authentification
de
un
utilisateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.55
2.6.3
Identificateur
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..55
2.7
LES
INCLUSIONS
de
FICHIERS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
56
2.8
EXERCICE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.58
3
.

MYSQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
59
3.1
L'
ASSOCIATION
ENTRE
MYSQL
ET
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..59
3.2
LA
CONCEPTION
de
UNE
Base
de
DONNEES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.60
3.3
3.2.1
Schémas
ERA
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
60
3.2.2
Entités
,
associations
,
attributs
,
rôles
et
cardinalités
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
60
3.2.3
Transformation
en
tables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.61
3.2.4
Associations
ternaires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
62
3.2.5
Clés
étrangères
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.62
LES
TABLES
ET
LEURS
CONTENUS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
63
Étienne
Vandeput
–
©
Cefis
2005
4
Publier
sur
le
Web
-
Perfectionnement
3.3.1
Structure
de
une
table
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..63
3.3.2
Types
de
informations
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.63
3.4
LES
PRIMITIVES
de
GESTION
de
UNE
Base
de
DONNEES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
65
3.4.1
Accès
à
une
Bd
et
à
ses
tables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.65
3.4.2
Création
et
gestion
du
contenu
de
une
Bd
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
66
3.4.3
Gestion
de
une
Bd
avec
PHPMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
74
3.4.4
Sélection
de
informations
dans
une
Bd
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.75
3.4.5
Sélections
multi-tables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.79
3.5
GERER
UNE
Bd
AVEC
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.85
3.5.1
Le
principe
de
communication
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.85
3.5.2
Les
fonctions
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..85
3.6
BILAN
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.90
3.7
EXERCICE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.90
4
.

APPLICATION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

91
4.1
INTRODUCTION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.91
4.2
UN
ENONCE
à
RAFFINER
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..91
4.3
UN
BON
SCHEMA
CONCEPTUEL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.92
4.3.1
Première
ébauche
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
92
4.3.2
Améliorations
du
schéma
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
93
4.4
LE
SCHEMA
Logique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.94
4.5
LA
CONSTRUCTION
de
UNE
INTERFACE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..95
4.5.1
Utilité
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
95
4.5.2
Utilisabilité
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.96
4.5.3
Création
de
modèles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..96
4.5.4
La
connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..105
4.5.5
Les
scripts
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.109
4.6
4.7
LA
Base
de
DONNEES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.126
4.6.1
La
table
eleve
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.126
4.6.2
La
table
maitre
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
127
4.6.3
La
table
lieu
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.127
4.6.4
La
table
stage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..128
STRUCTURE
du
SITE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
128
Étienne
Vandeput
–
©
Cefis
2005
5
Publier
sur
le
Web
-
Perfectionnement
1
.

Les
formulaires
en
HTML
1.1
Introduction
depuis
ses
premiers
développements
,
HTML
inclut
du
éléments1
qui
permettent
la
communication
entre
un
client
Web
et
un
serveur
capable
de
recevoir
des
informations
de
ce
client
,
de
les
stocker
et/ou
de
effectuer
des
traitements
en
dépendant
.

La
réalisation
de
sites
Web
interactifs
et
la
création
de
page
Web
dynamiques
demandent
que
cette
communication
soit
possible
.

dès
lors
,
la
connaissance
de
ces
éléments
est
déterminante
car
ils
constituent
,
en
quelque
sorte
,
l'
interface
de
communication
entre
l'
internaute
et
les
applications
qui
sont
développées
sur
des
serveurs
.

Dans
ce
chapitre
,
nous
nous
intéresserons
à
chacun
de
ces
éléments
,
à
leurs
attributs
possibles
,
mais
aussi
au
informations
qui
vont
être
véhiculées
vers
un
serveur
ainsi
que
à
leur
forme
.

Les
applications
côté
serveur
sont
développées
dans
un
langage
qualifié
de
langage
de
script
.

Php
est
le
langage
de
script
que
nous
avons
choisi2
pour
illustrer
le
mécanisme
de
construction
dynamique
du
page
Web
.

Le
langage
est
capable
de
communiquer
et
de
exploiter
des
données
gérées
par
de
nombreux
SGBD3
.

Nous
nous
intéresserons
à
des
applications
exploitant
des
base
de
données
gérées
par
le
Sgbd
MySQL
parce
que
la
combinaison
de
ces
deux
outils
(
langage
de
script
et
Sgbd
)
semble
aujourd'hui
la
plus
fréquente
parmi
les
nombreuses
combinaisons
possibles
.

C'
est
aussi
celle
qui
apparaît
comme
la
mieux
adaptée
au
applications
exploitant
Internet
et
ses
technologies
.

Les
base
de
données
gérées
via
des
sites
Web
sont
généralement
particulières
et
comprennent
peu
de
enregistrements
par
rapports
à
certains
autres
types
de
application
.

MySQL
est
adapté
à
ce
type
de
base
de
données
en
ce
sens
qu'
il
offre
juste
les
services
qu'
il
faut
,
avec
l'
efficacité
souhaitée
.

Une
observation
importante
:
le
fait
de
confier
l'
exécution
de
scripts
à
des
serveurs
n'
exclut
pas
la
possibilité
,
pour
le
client
,
de
exécuter
des
scripts
localement
.

C'
est
le
cas
,
par
exemple
,
lorsqu'
on
souhaite
faire
valider
les
données
avant
de
les
envoyer
.

Les
traitements
seront
donc
parfois
répartis
entre
le
client
et
le
serveur
même
si
l'
objet
de
cet
ouvrage
est
de
s'
intéresser
au
scripts
côté
serveur
.

1.2
Le
formulaire
(
élément
à
form
»
)
Le
formulaire
est
un
élément
qui
rend
possible
la
fourniture
de
un
certain
nombre
de
données
et
l'
exécution
de
une
action
par
un
serveur
.

Un
simple
exemple
,
pour
avoir
accès
à
certains
services
sur
le
Web
(
commande
en
ligne
,
cours
en
ligne
,
homebanking
,
…
)
vous
devez
généralement
fournir
un
identificateur
(
login
)
et
un
mot
de
passe
(
password
)
.

La
fourniture
de
ces
informations
se
fait
au
travers
de
un
formulaire
(
zones
à
compléter
)
.

En
fonction
du
données
reçues
,
l'
application
construit
dynamiquement
une
page
Web
dépendant
des
données
reçues
.

Dans
ce
cas
,
il
s'
agit
de
une
page
personnalisée
(
voir
ci-après
)
.

1
p
,
h1
,
a
,
form
sont
des
éléments
au
sens
de
HTML
.

2
En
ce
qui
concerne
les
langages
de
script
,
le
développeur
a
le
choix
.

Ce
sont
cependant
les
langages
utilisables
gratuitement
et
pouvant
être
distribués
qui
connaissent
le
plus
grand
succès
.

Parmi
eux
,
Php
,
Python
et
dans
une
moindre
mesure
Perl
semblent
les
mieux
placés
dans
le
hit
parade
du
développeurs
.

3
Système
de
Gestion
de
Bases
de
Données
Étienne
Vandeput
–
©
Cefis
2005
6
Publier
sur
le
Web
-
Perfectionnement
En
HTML
,
le
formulaire
correspond
à
l'
élément
form
.

Cet
élément
contient
généralement
plusieurs
éléments
interactifs
que
nous
allons
décrire
par
la
suite
(
champs
de
texte
,
boutons
,
cases
à
cocher
,
…
)
.

Ces
éléments
interactifs
permettent
de
encoder
ou
de
sélectionner
les
données
à
transmettre
au
serveur
.

Comme
nous
le
verrons
,
il
peut
également
contenir
des
éléments
cachés
qui
sont
aussi
des
données
à
transmettre
au
serveur
.

Un
document
HTML
peut
contenir
plusieurs
formulaires4
mais
ceux
-ci
ne
peuvent
pas
être
imbriqués
.

1.2.1
Attributs
importants
1.2.1.1
action
Cet
attribut
est
obligatoire
.

Sa
valeur
est
une
URL5
(
adresse
absolue
ou
relative
)
qui
précise
le
script
qui
doit
recevoir
les
données
et
être
exécuté
sur
le
serveur
.

En
général
,
le
script
a
pour
but
de
créer
une
page
HTML
qui
sera
renvoyée
au
client
Web
.

1.2.1.2
method
Il
n'
y
a
que
deux
valeurs
possibles
:
get
ou
post
.

La
méthode
get
concatène
les
données
à
la
fin
de
l'
URL
du
script
alors
que
la
méthode
post
envoie
les
données
dans
le
corps
de
requête
.

La
méthode
post
est
préférable
pour
tout
une
série
de
raisons
et
notamment
,
la
confidentialité
.

1.2.1.3
name
Cet
attribut
permet
de
nommer
le
formulaire
.

Il
n'
est
de
aucune
utilité
pour
le
serveur
mais
peut
servir
à
un
script
local
.

4
Encore
faut
-il
trouver
une
illustration
intéressante
de
cette
possibilité
à
5
Beaucoup
de
serveurs
sont
sensibles
à
la
casse
du
noms
de
fichiers
et
de
dossiers
.

Il
convient
donc
de
être
prudent
dans
l'
écriture
de
l'
URL
.

Nous
verrons
également
que
une
URL
vide
a
du
sens
dans
certaines
circonstances
.

Étienne
Vandeput
–
©
Cefis
2005
7
Publier
sur
le
Web
-
Perfectionnement
Dans
l'
illustration
qui
précède
,
on
voit
le
code
engendré
par
Macromedia
Dreamweaver
MX
lors
de
l'
insertion
de
un
formulaire
dans
un
document
HTML
.

Un
nom
par
défaut
est
donné
et
l'
action
par
défaut
est
vide
.

La
méthode
choisie
est
post
.

1.2.2
Contenu
du
formulaire
Tous
ces
attributs
n'
ont
aucun
sens
si
le
formulaire
n'
a
pas
de
contenu
.

L'
élément
form
est
donc
un
élément
qui
va
en
contenir
d'
autres
porteurs
de
informations
ou
de
instructions
.

On
trouve
trois
types
de
éléments
dans
un
formulaire
:
à
textarea
:
pour
définir
une
zone
de
texte
à
select
:
pour
sélectionner
une
information
dans
une
liste
•
input
:
pour
tous
les
autres
types
de
entrées
Ce
sont
ces
éléments
que
nous
allons
décrire
maintenant
.

1.3
L'
élément
«
textarea
à
On
emploie
cet
élément
lorsqu'
il
y
a
plusieurs
lignes
de
texte
à
entrer
.

Ainsi
,
lorsqu'
on
souhaite
réaliser
une
application
de
Webmail
,
il
est
clair
que
la
zone
de
rédaction
du
message
doit
s'
étendre
sur
plusieurs
lignes
.

Les
valeurs
par
défaut
sont
4
lignes
de
40
caractères
.

Les
attributs
qui
suivent
permettent
néanmoins
de
modifier
ces
valeurs
.

Cet
élément
nécessite
une
balise
initiale
et
une
balise
finale
.

Un
texte
par
défaut
peut
se
trouver
entre
ces
deux
balises
.

Il
est
à
noter
que
le
texte
n'
est
pas
limité
dans
sa
taille
,
ce
qui
peut
se
révéler
assez
gênant
dans
une
perspective
de
stockage
dans
une
base
de
données
,
par
exemple
.

Un
contrôle
peut
toutefois
être
effectué
,
soit
par
un
script
local
,
soit
par
un
script
php
au
niveau
du
serveur
.

1.3.1
Les
attributs
les
plus
importants
1.3.1.1
name
La
zone
de
texte
doit
porter
un
nom
si
on
veut
l'
exploiter
en
Php
.

Ce
nom
correspondra
au
nom
de
une
variable
en
Php
.

C'
est
le
moment
de
se
souvenir
que
le
langage
est
sensible
à
la
casse
.

si
certains
objets
interactifs
portent
le
même
nom
,
Php
ne
prend
en
compte
que
le
dernier
.

Les
noms
doivent
commencer
par
une
lettre
ou
le
caractère
à
suivi
de
lettres
,
chiffres
ou
caractères
à
.

1.3.1.2
rows
Cet
attribut
précise
la
hauteur
de
la
zone
de
texte
,
ce
qui
n'
en
limite
pas
la
taille
.

Étienne
Vandeput
–
©
Cefis
2005
8
Publier
sur
le
Web
-
Perfectionnement
1.3.1.3
cols
Cet
attribut
spécifie
le
nombre
de
colonnes
visibles
mais
ne
correspond
que
fort
approximativement
au
nombre
de
caractères
.

Voici
un
exemple
de
code
et
de
son
interprétation
dans
un
navigateur
.

<form
name="form1
"
method="post
"
action="">
<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif"><strong>Objectifs
du
cours</strong></font></p>
<textarea
name="textarea
"
cols="60
"
rows="10"></textarea>
</form>
1.4
L'
élément
à
select
à
Cet
élément
défini
un
menu
déroulant
dans
lequel
l'
utilisateur
va
pouvoir
sélectionner
une
ou
plusieurs
informations
.

Ces
informations
seront
définies
grâce
à
des
éléments
option
qui
seront
inclus
entre
les
deux
balises
de
l'
élément
select
.

Notez
que
chacun
du
éléments
décrits
jusque
ici
peut
être
vu
comme
un
bloc
contenant
éventuellement
d'
autres
blocs
.

L'
élément
form
contient
du
éléments
textarea
,
select
,
à
L'
élément
(
bloc
)
select
contient
du
éléments
option
.

Un
formulaire
peut
évidemment
contenir
plusieurs
éléments
select
.

Php
crée
une
variable
ou
un
tableau
(
en
cas
de
sélection
multiple
)
pour
chaque
élément
select
.

La
variable
ou
le
tableau
porte
le
même
nom
que
l'
élément
.

option
select
textarea
form
1.4.1
Les
attributs
les
plus
importants
1.4.1.1
name
Pour
les
raisons
qui
précèdent
,
cet
attribut
est
évidemment
indispensable
.

Attention
,
en
cas
de
sélection
multiple
possible
,
ce
nom
doit
se
terminer
par
des
crochets
(
[
]
)
.

1.4.1.2
multiple
Cet
attribut
autorise
les
sélections
multiples
dans
la
liste
.

Étienne
Vandeput
–
©
Cefis
2005
9
Publier
sur
le
Web
-
Perfectionnement
1.4.1.3
size
Cet
attribut
spécifie
le
nombre
de
items
visibles
de
la
liste
.

En
son
absence
,
un
seul
item
est
visible
.

1.4.2
Les
attributs
les
plus
importants
de
l'
élément
à
option
à
Cet
élément
n'
est
pas
directement
un
objet
de
formulaire
mais
une
composante
de
l'
élément
select
.

Il
nécessite
une
balise
initiale
et
une
balise
finale
.

1.4.2.1
value
L'
attribut
précise
la
valeur
qui
est
envoyée
au
script
et
donc
pas
nécessairement
celle
qui
est
affichée
dans
la
liste
.

Il
est
en
effet
plus
simple
,
parfois
,
de
envoyer
des
valeurs
techniques
plus
simples
à
manipuler
tout
en
affichant
des
choix
compréhensibles
.

1.4.2.2
selected
Les
options
qui
ont
cet
attribut
correspondent
à
des
valeurs
présélectionnées
.

Il
n'
est
pas
nécessaire
que
il
y
en
ait
.

Dans
le
cas
de
une
sélection
simple
,
si
il
y
en
a
plusieurs
,
seule
la
dernière
est
prise
en
compte
.

Lorsque
la
liste
est
déroulante
,
c'
est
la
première
option
ou
,
le
cas
échéant
,
l'
option
présélectionnée
qui
apparaît
.

Voici
deux
exemples
incluant
les
types
de
éléments
concernés
.

<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif"><strong>Type
de
cours</strong></font></p>
<select
name="typeCours
"
sizeçç4ëë
<option
value="0
"
selected>inconnu</option>
<option
value="1">pr&eacute
;
senciel</option>
<option
value="2">&agrave
;
distance</option>
<option
value="3">semi-pr&eacute
;
senciel</option>
</select>
<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif"><strong>Type
de
cours</strong></font></p>
<select
name="typeCours">
<option
value="0
"
selected>inconnu</option>
<option
value="1">pr&eacute
;
senciel</option>
<option
value="2">&agrave
;
distance</option>
<option
value="3">semi-pr&eacute
;
senciel</option>
</select>
Étienne
Vandeput
–
à
Cefis
2005
10
Publier
sur
le
Web
-
Perfectionnement
1.5
L'
élément
«
input
à
Cet
élément
correspond
à
une
panoplie
de
objets
de
formulaire
.

C'
est
l'
attribut
type
de
cet
élément
input
qui
les
distingue
.

Nous
allons
donc
examiner
ces
différents
objets
,
les
uns
après
les
autres
.

Un
formulaire
peut
évidement
contenir
plusieurs
éléments
input
.

L'
élément
input
n'
a
qu'
une
seule
balise
.

1.5.1
Le
champ
texte
<input
type="text">
Cet
attribut
définit
un
champ
texte
de
une
seule
ligne
.

Php
crée
une
variable
portant
le
nom
du
champ
dont
la
valeur
est
l'
information
que
ce
dernier
contient
.

Les
attributs
courants
sont
:
1.5.1.1
name
voir
ci-dessus
1.5.1.2
value
la
valeur
par
défaut
du
champ
texte
1.5.1.3
size
la
taille
(
approximative
)
de
affichage
du
champ
texte
1.5.1.4
maxlength
le
nombre
de
caractères
admis
1.5.1.5
accesskey
crée
un
raccourci-clavier
pour
accéder
directement
au
champ
Voici
un
petit
exemple
.

<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<strong><u>D</u>&eacute
;
nomination</strong></font></p>
<p>
<input
name="denomination
"
type="text
"
size="50
"
maxlength="80
"
accesskey="D">
</p>
Le
raccourci-clavier
alt-D
premettra
de
accéder
directement
au
champ
texte
.

L'
attribut
accesskey
existe
aussi
pour
les
éléments
textarea
et
select
.

1.5.2
Le
champ
texte
spécial
mot
de
passe
<input
type="password">
L'
attribut
définit
un
champ
texte
particulier
car
l'
information
introduite
dans
ce
champ
n'
est
pas
lisible
à
l'
écran
.

Il
faut
toutefois
savoir
que
le
mot
de
passe
est
transmis
en
clair
au
serveur
.

Il
est
possible
de
demander
à
Php
un
encryptage
par
la
suite
.

Comme
pour
un
champ
texte
ordinaire
,
Php
crée
une
variable
portant
le
nom
du
champ
.

Les
attributs
courants
sont
les
mêmes
que
ceux
du
champ
texte
normal
.

Étienne
Vandeput
–
©
Cefis
2005
11
Publier
sur
le
Web
-
Perfectionnement
1.5.3
Le
champ
texte
spécial
référence
de
fichier
<input
type="file">
Dans
ce
champ
texte
particulier
,
l'
information
est
la
référence
absolue
et
locale
de
un
fichier
que
l'
on
veut
transférer
au
serveur
.

L'
usage
de
cette
fonctionnalité
nécessite
que
la
méthode
de
envoi
du
formulaire
soit
post
et
que
l'
attribut
enctype
,
dont
nous
n'
avons
pas
parlé
,
soit
présent
avec
comme
valeur
multipart/form-data
.

Le
champ
est
accompagné
de
un
bouton
à
Parcourir
»
qui
ouvre
une
fenêtre
de
l'
explorateur
.

<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<strong>T&eacute
;
l&eacute
;
verser</strong></font></p>
<p>
<input
type="file
"
name="telechargement">
</p>
Les
attributs
courants
sont
sensiblement
les
mêmes
,
si
ce
n'
est
que
l'
attribut
value
n'
est
pas
utilisé
.

1.5.4
Le
bouton
simple
<input
type="button">
L'
attribut
définit
un
bouton
simple
.

L'
intérêt
de
ce
type
de
bouton
réside
dans
l'
exécution
de
scripts
locaux
.

Aucune
donnée
n'
est
envoyée
au
serveur
lorsqu'
un
tel
bouton
est
activé
.

On
mentionnera
les
attributs
:
1.5.4.1
name
le
nom
du
bouton
1.5.4.2
value
son
étiquette
1.5.4.3
disabled
son
état
(
désactivé
)
1.5.4.4
accesskey
crée
un
raccourci-clavier
pour
accéder
directement
au
bouton
<input
name="validation
"
type="button
"
id="validation
"
value="Validation
du
donn&eacute
;
es
"
disabled>
1.5.5
Le
bouton
radio
<input
type="radio">
Les
boutons
radio
sont
utilisés
en
groupe
.

Un
seul
de
entre
eux
peut
être
actif
à
la
foi
.

Le
groupe
de
boutons
porte
un
nom
qui
sera
celui
de
la
variable
Php
contenant
la
valeur
du
bouton
sélectionné
.

Citons
comme
attributs
:
1.5.5.1
name
le
nom
du
groupe
de
boutons
Étienne
Vandeput
–
©
Cefis
2005
12
Publier
sur
le
Web
-
Perfectionnement
1.5.5.2
value
la
valeur
du
bouton
(
information
transmise
)
1.5.5.3
checked
la
sélection
du
bouton
1.5.5.4
accesskey
le
raccourci-clavier
Un
exemple
:
<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif"><strong>Type
de
enseignement</strong></font></p>
<p>
<input
type="radio
"
name="type
"
value="1">
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">Général</font>
<br>
<input
type="radio
"
name="type
"
value="2">
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">Technique</font>
<br>
<input
type="radio
"
name="type
"
value="3">
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">Professionnel</font>
</label>
</p>
1.5.6
Le
bouton
de
envoi
<input
type="submit">
Grâce
à
cet
attribut
,
le
bouton
est
le
déclencheur
de
l'
envoi
du
données
au
script
décrit
dans
l'
attribut
action
de
l'
élément
form
.

Un
formulaire
peut
contenir
plusieurs
boutons
de
envoi
.

Dans
ce
cas
,
c'
est
au
script
de
choisir
le
traitement
à
effectuer
en
fonction
de
la
valeur
du
bouton
.

Comme
de
habitude
,
Php
créera
une
variable
portant
le
nom
de
ce
bouton
.

Les
attributs
importants
sont
:
1.5.6.1
name
le
nom
du
bouton
nécessaire
pour
la
création
de
la
variable
1.5.6.2
value
la
valeur
du
bouton
nécessaire
pour
un
éventuel
choix
de
script
1.5.6.3
accesskey
un
caractère
pour
un
raccourci-clavier
de
accès
rapide
au
bouton
<input
name="envoi
"
type="submit
"
id="envoi
"
value="Envoyer">
Étienne
Vandeput
–
©
Cefis
2005
13
Publier
sur
le
Web
-
Perfectionnement
1.5.7
Le
bouton
de
envoi
image
<input
type="image">
Le
bouton
de
envoi
image
joue
le
même
rôle
que
le
bouton
de
envoi
classique
.

La
différence
réside
dans
le
fait
que
la
source
de
l'
image
doit
être
fournie
.

de
plus
,
les
coordonnées
précises
de
l'
endroit
où
l'
on
a
cliqué
sont
également
envoyées
.

Les
noms
du
deux
variables
sont
constitués
du
nom
du
bouton
suivi
respectivement
du
symboles
_x
et
_y
.

Les
attributs
à
retenir
sont
:
1.5.7.1
name
le
nom
du
bouton
image
1.5.7.2
src
la
localisation
de
l'
image
1.5.7.3
alt
le
texte
alternatif
(
si
l'
image
ne
peut
être
affichée
)
1.5.7.4
accesskey
le
caractère
pour
un
raccourci-clavier
éventuel
de
accès
au
bouton
<input
name="cathedrale
"
type="image
"
id="cathedrale
"
src="/images/cathedrale.jpg
"
alt="Saint-Aubain
"
width="100
"
height="80
"
border="0">
1.5.8
Le
bouton
de
réinitialisation
<input
type="reset">
Le
bouton
de
réinitialisation
permet
à
chaque
objet
du
formulaire
de
reprendre
sa
valeur
initiale
.

Il
n'
y
a
donc
aucune
information
envoyée
au
serveur
lorsque
celui
-ci
est
activé
.

Les
attributs
essentiels
sont
:
1.5.8.1
name
le
nom
du
bouton
1.5.8.2
value
son
étiquette
1.5.8.3
accesskey
le
caractère
pour
un
raccourci-clavier
<input
name="initialisation
"
type="reset
"
id="initialisation
"
value="R&eacute
;
tablir">
Étienne
Vandeput
–
©
Cefis
2005
14
Publier
sur
le
Web
-
Perfectionnement
1.5.9
La
case
à
cocher
<input
type="checkbox">
L'
attribut
fait
de
cet
objet
une
case
à
cocher
.

Il
est
possible
mais
pas
nécessaire
de
grouper
les
cases
à
cocher
.

Php
crée
une
variable
pour
chaque
case
à
cocher
ou
un
tableau
pour
un
groupe
de
cases
à
cocher
.

La
case
ou
au
moins
une
du
cases
dans
le
cas
de
un
groupe
doit
être
cochée
pour
que
la
variable
ou
le
tableau
soit
créé
.

La
programmation
devra
veiller
à
s'
assurer
que
une
telle
variable
ou
un
tel
tableau
existe
.

Les
attributs
importants
sont
:
1.5.9.1
name
le
nom
de
la
case
sera
celui
de
la
variable
;
dans
le
cas
de
un
groupement
,
il
faut
donner
le
même
nom
à
chaque
case
et
faire
suivre
ce
nom
de
crochets
(
[
]
)
.

1.5.9.2
value
la
valeur
transmise
au
script
qui
ne
correspond
pas
à
l'
affichage
1.5.9.3
checked
pour
signaler
si
la
case
et
cochée
1.5.9.4
accesskey
un
caractère
pour
le
raccourci-clavier
<p><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif"><strong>Cours
choisis</strong></font></p>
<p>
<strong><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<input
type="checkbox
"
name="cours
"
value="1">
</font></strong><font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
Math
</font></p>
<p>
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<input
type="checkbox
"
name="cours
"
value="2">
Fran&ccedil
;
ais</font></p>
<p>
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<input
type="checkbox
"
name="cours
"
value="3">
Physique</font></p>
<p>
<font
size="2
"
face="Verdana
,
Arial
,
Helvetica
,
sans-serif">
<input
type="checkbox
"
name="cours
"
value="4">
Histoire</font></p>
Étienne
Vandeput
à
©
Cefis
2005
15
Publier
sur
le
Web
-
Perfectionnement
1.5.10
Le
champ
caché
<input
type="hidden">
L'
attribut
confère
ici
au
champ
le
statut
à
caché
»
.

L'
intérêt
réside
dans
la
possibilité
de
transmettre
au
serveur
du
valeurs
qui
seraient
disponibles
au
niveau
du
navigateur
.

C'
est
aussi
de
pallier
le
caractère
«
sans
état
»
de
http
.

Une
variable
portant
le
nom
du
champ
est
créée
.

Les
attributs
sont
:
1.5.10.1
name
le
nom
du
champ
caché
1.5.10.2
value
la
valeur
à
transmettre
<input
name="login
"
type="hidden
"
id="login
"
value="eva">
1.6
Attributs
vs
méthodes
Sans
entrer
dans
le
grand
détail
,
nous
rappellerons
que
JavaScript
est
un
langage
de
script
interprété
par
le
client
(
le
navigateur
Web
)
et
que
ce
langage
est
un
langage
à
orienté
objet
à
6
.

Il
s'
appuie
sur
le
Document
Object
Model
(
Dom
)
développé
par
le
consortium
w37
.

Parmi
ces
«
objets
»
,
on
trouve
bien
sûr
les
formulaires
et
tous
les
objets
qu'
ils
peuvent
eux-mêmes
contenir
.

JavaScript
définit
du
méthodes
qu'
il
est
possible
de
invoquer
sur
ces
objets
.

Nous
nous
intéresserons
peu
à
ces
méthodes
étant
donné
que
la
programmation
en
JavaScript
n'
est
pas
le
sujet
principal
de
cet
ouvrage
.

En
revanche
,
nous
avons
besoin
du
propriétés
et
du
événements
détectables
au
niveau
du
objets
car
ils
se
traduisent
en
attributs
du
éléments
correspondants
.

à
titre
de
exemple
,
voici
pour
un
formulaire
quelques
attributs
et
méthodes
disponibles
.

Quelques
attributs
possibles
de
l'
élément
formulaire
(
du
point
de
vue
HTML
)
•
Propriétés
:
name
:
le
nom
du
formulaire
action
:
l'
adresse
du
script
de
serveur
à
exécuter
method
:
la
méthode
de
appel
du
script
(
get
ou
post
)
•
Événements
:
onSubmit
:
pour
détecter
la
soumission
du
formulaire
onReset
:
pour
détecter
la
réinitialisation
Il
en
existe
bien
d'
autres
qui
sont
moins
spécifiques
(
id
,
class
,
…
pour
les
propriétés
;
onclick
,
ondblclick
,
…
pour
les
événements
)
.

Quelques
méthodes
possibles
de
l'
objet
formulaire8
(
du
point
de
vue
JavaScript
)
:
submit
:
pour
déclencher
l'
action
du
formulaire
reset
:
pour
réinitialiser
les
données
du
formulaire
avec
les
valeurs
par
défaut
6
La
signification
de
ce
qualificatif
,
en
particulier
en
JavaScript
,
mériterait
un
large
débat
que
nous
ne
mèneront
pas
.

7
http://w3.org
8
On
pourrait
trouver
dans
un
script
une
instruction
du
genre
if
(
valide
)
form.submit()
;
pour
autant
que
valide
désigne
une
variable
booléenne
et
form
un
formulaire
.

Étienne
Vandeput
–
©
Cefis
2005
16
Publier
sur
le
Web
-
Perfectionnement
Après
avoir
illustré
les
propriétés
du
éléments
correspondant
au
objets
de
formulaire
,
nous
consacrons
la
section
suivante
à
examiner
les
événements
qui
peuvent
également
y
être
associés
sous
forme
de
attributs
.

1.7
La
gestion
du
événements
Les
attributs
correspondant
à
des
événements
peuvent
se
révéler
utiles
dans
le
contexte
de
utilisation
de
scripts
locaux
.

En
voici
une
description
en
fonction
du
éléments
concernés
.

1.7.1
Élément
à
form
»
et
transmission
du
données
1.7.1.1
onsubmit
Cet
attribut
indique
un
script
à
exécuter
localement
avant
l'
envoi
du
données
(
par
exemple
,
un
certain
nombre
de
vérifications
)
.

Ce
script
doit
renvoyer
une
valeur
booléenne
qui
détermine
l'
envoi
ou
non
du
données
.

Il
est
déclenché
lorsque
l'
utilisateur
clique
sur
le
bouton
de
envoi
(
voir
plus
loin
)
.

La
valeur
doit
être
constituée
du
mot
return
suivi
du
nom
du
script
à
exécuter
.

Exemple
:
onsubmit
=
"
return
verification()
"
<form
action="test.php
"
method="post
"
name="formulaire
"
onSubmit="return
verification()">
Le
script
doit
figurer
dans
le
document
,
soit
dans
la
partie
entête
,
soit
dans
la
partie
corps
,
en
tant
que
contenu
de
l'
élément
script
.

Cet
élément
possède
un
attribut
language
qui
précise
dans
quel
langage
le
script
est
rédigé
(
autrement
dit
,
comment
il
doit
être
interprété
)
et
un
attribut
type
qui
précise
quel
encodage
est
utilisé
.

<script
language="JavaScript
"
type="text/JavaScript">
function
verification(){
if(document.forms["formulaire"].elements["denomination"].value==""){
alert("Vous
n'
avez
pas
fourni
de
dénomination
pour
le
cours
"
)
;
return
false
;
}
if(document.forms["formulaire"].elements["objectifs"].value==""){
alert("Vous
n'
avez
pas
fourni
d'
objectifs
pour
le
cours
"
)
;
return
false
;
à
else{
return
true
;
}
à
</script>
Comme
nous
ne
donnons
pas
trop
de
détails
à
propos
de
JavaScript
,
nous
apportons
à
ce
script
quelques
commentaires
.

Il
se
compose
de
un
double
test
de
vérification
de
remplissage
pour
les
rubriques
Dénomination
et
Objectifs
.

La
fonction
n'
a
pas
d'
argument
et
renvoie
une
valeur
booléenne
(
return=
…
)
.

alert()
est
une
fonction
prédéfinie
qui
affiche
une
boîte
de
dialogue
de
avertissement
.

Elle
prend
comme
argument
une
chaîne
de
caractère
.

Notez
que
JavaScript
est
un
langage
faiblement
typé
.

Le
typage
du
valeurs
et
du
variables
est
implicite
.

Observez
aussi
la
syntaxe
de
écriture
pour
une
structure
alternative
.

Étienne
Vandeput
–
©
Cefis
2005
17
Publier
sur
le
Web
-
Perfectionnement
Le
point
le
plus
délicat
concerne
l'
accès
au
informations
de
la
page
.

JavaScript
utilise
le
modèle
objet
du
document
(
Dom
)
pour
accéder
à
ces
informations
.

L'
objet
principal
est
document
.

Il
contient
un
tableau
indexé
forms
de
ses
(
éventuels
)
formulaires
.

Chaque
formulaire
contient
un
tableau
indexé
de
ses
éléments
:
elements
.

Pour
accéder
à
la
valeur
de
un
de
ces
éléments
,
on
utilise
la
propriété
value
.

Notez
encore
le
symbole
de
comparaison
(
==
et
non
=
)
.

Il
est
possible
de
accéder
à
l'
item
de
un
tableau
en
fournissant
son
numéro
de
ordre
en
commençant
par
0
(
exemple
:
si
formulaire
est
le
seul
formulaire
,
forms[0
]
)
.

Voici
maintenant
le
code
du
fichier
test.php
.

Ce
dernier
contient
l'
action
à
effectuer
si
la
valeur
renvoyée
par
le
script
est
true
à
savoir
,
l'
affichage
de
un
message
de
réussite
et
du
données
transmises
.

Pour
ce
faire
,
des
commandes
élémentaires
en
php
sont
nécessaires
.

Une
feuille
de
style
,
cefis.css
,
est
attachée
à
la
page
test.php
.

<html>
<head>
<title>Fourniture
de
données
à
un
serveur</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
</head>
<body>
<h4>Ex&eacute
;
cution
du
code
JavaScript</h4>
àp
class="important1">Test
concluant
!

</p>
<p>Les
donn&eacute
;
es
suivantes
ont
&eacute
;
t&eacute
;
envoy&eacute
;
es:</p>
àp
class="important2">D&eacute
;
nomination
du
cours</p>
<p><
?

php
echo
$_POST["denomination
"
]
;
?

></p>
àp
class="important2">Objectifs
du
cours</p>
Étienne
Vandeput
–
©
Cefis
2005
18
Publier
sur
le
Web
-
Perfectionnement
<p><
?

php
echo
$_POST["objectifs
"
]
;
?

></p>
</body>
</html>
Cet
exemple
nous
permet
de
découvrir
un
tout
petit
peu
Php
.

Lorsque
le
navigateur
rencontre
la
suite
du
symboles
<
?

php
,
il
sait
que
il
doit
interpréter
la
suite
comme
du
Php
et
cela
,
tant
que
il
n'
a
pas
rencontré
les
deux
symboles
?

>
.

Comme
vous
vous
en
doutez9
,
la
commande
echo
est
une
commande
de
affichage
.

Une
autre
chose
importante
à
observer
,
c'
est
que
(
à
partir
de
sa
version
4
)
Php
crée
une
variable
prédéfinie10
sous
forme
de
un
tableau
s'
appelant
$_POST11
et
contenant
les
valeurs
transmises
au
serveur
par
la
méthode
post
.

On
accède
à
une
composante
du
tableau
par
son
numéro
de
ordre
ou
le
nom
(
attribut
name
)
de
l'
élément
contenant
l'
information
concernée
.

1.7.1.2
onreset
Cet
attribut
indique
un
script
à
exécuter
localement
avant
la
réinitialisation
du
formulaire
.

Pour
la
valeur
de
cet
attribut
,
la
syntaxe
est
identique
à
celle
de
l'
attribut
onsubmit
.

1.7.2
Élément
à
textarea
à
Voici
quelques-uns
du
événements
(
ou
attributs
de
script
)
de
l'
élément
textarea
.

1.7.2.1
onfocus
Le
script
associé
sera
exécuté
lorsque
la
zone
de
texte
recevra
le
focus12
.

9
Rappelez
vous
la
création
de
fichiers
batch
en
Dos
.

10
Il
en
crée
plein
de
autres
.

11
En
php
,
toutes
les
variables
ont
un
nom
commençant
par
le
symbole
$
.

12
Un
objet
reçoit
le
focus
quand
l'
utilisateur
clique
dessus
,
ou
bien
que
il
y
accède
par
la
touche
de
tabulation
ou
un
raccourci-clavier
.

Étienne
Vandeput
–
©
Cefis
2005
19
Publier
sur
le
Web
-
Perfectionnement
1.7.2.2
onblur
Il
s'
agit
ici
de
la
perte
du
focus
par
l'
élément
.

1.7.2.3
onselect
Cet
événement
se
produit
si
tout
ou
partie
du
texte
de
la
zone
a
été
sélectionné
.

1.7.2.4
onchange
Celui
-ci
se
produit
en
cas
de
perte
de
focus
et
pour
autant
que
la
valeur
de
la
zone
de
texte
ait
été
modifiée
.

1.7.3
Élément
à
select
»
Parmi
les
événements
associables
à
l'
élément
select
on
trouve
onfocus
,
onblur
et
onchange
.

1.7.4
Élément
à
input
à
1.7.4.1
Champs
texte
,
texte
spécial
mot
de
passe
et
texte
spécial
référence
de
fichier
Les
événements
intéressants
à
associer
sont
onfocus
,
onblur
,
onselect
et
onchange
.

1.7.4.2
Bouton
simple
,
de
envoi,de
réinitialisation
,
radio
,
case
à
cocher
Les
événements
à
associer
sont
onfocus
,
onblur
et
onchange
.

1.7.4.3
Bouton
de
envoi
image
Les
événements
à
associer
sont
onfocus
et
onblur
.

1.8
Autres
événements
,
autres
éléments
si
vous
utilisez
un
éditeur
spécialisé
,
vous
constaterez
peut-être
que
il
propose
beaucoup
d'
autres
événements
et
quelques
objets
de
formulaire
supplémentaires
.

Parmi
les
événements
,
citons
,
par
exemple
:
onclick
,
ondblclick
,
onmousedown
,
onmouseup
,
onmouseover
,
onmouseout
,
onmousemove
,
onkeypress
,
onkeydown
,
onkeyup
à
Les
éléments
button
,
fieldset
,
label
et
optgroup
existent
également
.

Ils
offrent
de
nouvelles
possibilités
mais
ils
ne
sont
pas
correctement
interprétés
par
tous
les
navigateurs
.

Par
exemple
,
l'
élément
button
permet
de
combiner
texte
et
image
.

L'
élément
fieldset
permet
de
regrouper
des
champs
sous
un
même
titre
,
grâce
à
un
élément
legend
par
lequel
l'
élément
fieldset
doit
commencer
.

L'
élément
label
permet
de
attribuer
une
étiquette
à
un
objet
,
ce
qui
n'
a
de
véritable
intérêt
que
pour
les
personnes
malvoyantes
utilisant
des
navigateurs
couplés
avec
un
système
sonore
.

L'
élément
optgroup
sert
à
regrouper
des
éléments
options
à
l'
intérieur
de
un
élément
select
ce
qui
permet
la
création
de
menus
en
cascade
.

1.9
Exercices
Écrire
des
scripts
JavaScript
pour
:
à
rendre
un
champ
texte
inaccessible
à
donner
le
focus
à
un
élément
précis
à
permettre
l'
exécution
de
une
action
en
fonction
du
choix
de
un
bouton
radio
Étienne
Vandeput
–
©
Cefis
2005
20
Publier
sur
le
Web
-
Perfectionnement
1.9.1
Rendre
un
champ
texte
inaccessible
Il
suffit
de
faire
perdre
le
focus
à
l'
objet
au
moment
où
il
la
reçoit
.

<input
type="text
"
name="couleur
"
onFocus="this.blur()">
Comme
dans
la
plupart
du
langages
objets
,
la
référence
à
l'
objet
courant
est
this
.

Une
autre
solution
consiste
à
donner
à
l'
objet
l'
attribut
readonly
.

<input
type="text
"
name="couleur
"
readonly>
Les
effets
graphiques
sont
légèrement
différents
dans
la
mesure
où
,
dans
le
premier
cas
,
le
point
de
insertion
apparaît
avant
de
disparaître
.

1.9.2
Donner
le
focus
à
un
élément
précis
Cette
action
est
réalisée
au
chargement
de
la
page
.

C'
est
donc
l'
attribut
onload
de
l'
élément
body
qui
est
utilisé
.

<body
onLoad="document.form1.nom.focus()">
<form
name="form1
"
method="post
"
action="">
<p>Nom
<input
type="text
"
name="nom">
</p>
</form>
</body>
1.9.3
Permettre
l'
exécution
de
une
action
en
fonction
du
choix
de
un
bouton
radio
Le
problème
est
plus
délicat
.

Il
s'
agit
de
identifier
le
bouton
radio
qui
est
sélectionné
et
de
compléter
l'
action
en
conséquence
.

La
première
fonction
a
pour
but
de
renvoyer
l'
index
correspondant
à
ce
bouton
dans
le
tableau
du
boutons
radios
concernés
(
index
qui
commence
à
0
)
.

La
seconde
fonction
fixe
l'
action
qui
est
la
valeur
du
bouton
et
provoque
la
soumission
du
formulaire
.

<script
language="JavaScript
"
type="text/JavaScript">
function
valeurChoix(groupeBouton){
for
(
var
i=0
;
i<groupeBouton.length
;
iâëç
if
(
groupeBouton[i].checked
)
à
return
i
}
}
à
function
choisirAction(formulaire,script){
var
i=valeurChoix(script)
formulaire.action=script[i].value
formulaire.submit()
à
</script>
<form
name="form1
"
method="post
"
action="">
<p>Nom
Étienne
Vandeput
–
©
Cefis
2005
21
Publier
sur
le
Web
-
Perfectionnement
<input
type="text
"
name="nom">
</p>
<p><strong>Choix
du
script</strong></p>
<p>
<label>
<input
name="choix
"
type="radio
"
value="action1.php
"
checked>
action
n&deg
;
1</label>
<br>
<label>
<input
type="radio
"
name="choix
"
value="action2.php">
action
n&deg
;
2</label>
<br>
<label>
<input
type="radio
"
name="choix
"
value="action3.php">
action
n&deg
;
3</label>
</p>
<p>
<input
type="button
"
name="run
"
value="Ex&eacute
;
cuter
"
onClick=
"
choisirAction(this.form,this.form.choix)">
<br>
</p>
</form>
Voici
à
quoi
ressemble
l'
interface
.

Le
choix
de
un
du
boutons
avant
un
clic
sur
le
bouton
simple
permet
de
sélectionner
le
script
dont
l'
exécution
sera
demandée
au
serveur
.

1.10
Les
styles
CSS
Cette
section
,
un
peu
hors
contexte
,
trouve
toutefois
son
utilité
dans
la
mesure
où
elle
présente
un
langage
(
un
de
plus
)
interprété
par
les
navigateurs
.

CSS
signifie
Cascading
Style
Sheets
(
feuilles
de
style
en
cascade
)
.

C'
est
un
langage
dont
l'
objectif
est
de
paramétrer
finement
la
mise
en
page
et
la
mise
en
forme
du
éléments
de
un
document
HTML
.

Il
convient
de
en
comprendre
les
principes
,
et
notamment
,
le
fonctionnement
de
la
cascade
.

Il
est
également
utile
de
se
familiariser
avec
la
syntaxe
du
langage
.

L'
utilisation
de
CSS
permet
de
réfléchir
à
des
stratégies
efficaces
de
conception
en
prenant
en
compte
,
dès
le
départ
,
les
possibles
mises
à
jour
.

1.10.1
Feuille
de
styles
Le
concept
de
feuille
de
styles
est
un
concept
abstrait
qui
trouve
sa
concrétisation
sous
de
multiples
formes
.

On
peut
définir
une
feuille
de
styles
comme
un
ensemble
de
règles
utilisées
par
le
navigateur
pour
la
mise
en
page
et
en
forme
du
différents
éléments
(
au
sens
de
HTML
)
.

Ces
règles
sont
définies
:
•
par
défaut
Étienne
Vandeput
–
©
Cefis
2005
22
Publier
sur
le
Web
-
Perfectionnement
•
par
l'
internaute
•
par
l'
auteur
Nous
verrons
plus
loin
quelles
priorités
le
navigateur
accorde
à
ces
différents
niveaux
.

1.10.2
Règle
Une
règle
se
compose
de
un
sélecteur
(
de
éléments
)
suivi
de
une
déclaration
(
des
paramètres
à
appliquer
)
.

La
syntaxe
en
est
la
suivante
:
<sélecteur>
à
<déclaration>
à
Examinons
de
abord
la
syntaxe
de
une
déclaration
.

Elle
se
compose
de
un
ou
plusieurs
ensembles
constitués
de
un
mot-clé
et
de
une
valeur
.

<mot-clé>
:
<valeur>
;
[
<mot-clé>
:
<valeur>
;
çù
Il
existe
52
mots-clés
dans
la
version
Csss
que
sont
censés
respecter
tous
les
navigateurs
.

Chaque
mot-clé
est
séparé
de
sa
valeur
par
un
double
point
et
l'
ensemble
se
termine
par
un
point-virgule
.

Toutes
les
valeurs
ne
sont
pas
acceptables
.

1.10.2.1
Exemples
color
:
red
;
color
:
#FF0000
;
font-family
:
Arial
;
color
:
red
;
font-size
:
18px
;
1.10.3
Sélecteur
Les
sélecteurs
sont
les
paramètres
qui
autorisent
le
navigateur
à
sélectionner
les
règles
de
mise
en
forme
applicables
au
éléments
HTML
.

On
distingue
les
sélecteurs
simples
du
sélecteurs
contextuels
.

1.10.3.1
Sélecteur
simple
Un
sélecteur
simple
permet
de
sélectionner
les
éléments
de
trois
manières
.

Soit
:
•
que
ils
portent
le
même
nom
;
•
que
ils
ont
les
mêmes
valeurs
pour
certains
attributs
précis
(
class
et
id
)
;
•
que
ils
portent
le
même
nom
et
ont
les
mêmes
valeurs
pour
certains
attributs
précis
(
class
ou
id
)
1.10.3.2
Exemples
à
Même
nom
:
p
Tous
les
éléments
p
du
document
HTML
tels
<p>
,
p
à
chapeau
»
>
,
…
à
class
=
«
rouge
»
>
,
p
id
=
Même
valeur
pour
l'
attribut
class
:
.important
(
attention
au
point
initial
)
Tous
éléments
(
quel
que
soit
leur
nom
)
qui
ont
un
attribut
class
valant
"
important
"
tels
:
<
?

?
?

class="important
"
…>
,
…
•
Même
valeur
pour
l'
attribut
id
:
#titre
(
attention
au
dièse
initial
)
Tous
éléments
(
quel
que
soit
leur
nom
)
qui
ont
un
attribut
id
valant
"
titre
"
tels
:
<
?

?
?

id="titre
"
…>
,
…
à
Même
nom
et
même
valeur
pour
l'
attribut
class
ou
l'
attribut
id
:
p.important
ou
td#titre
Étienne
Vandeput
à
à
Cefis
2005
23
Publier
sur
le
Web
-
Perfectionnement
Tous
les
éléments
p
(
td
)
qui
ont
un
attribut
class
(
id
)
valant
"
important
"
(
"
titre
"
)
p
class="important
"
…>
,
<td
id="titre
"
…>
,
…
1.10.3.3
Sélecteur
contextuel
Les
sélecteurs
contextuels
permettent
de
sélectionner
tous
les
éléments
qui
sont
dans
un
certain
contexte
.

La
syntaxe
est
relativement
simple
puisque
un
sélecteur
contextuel
se
compose
de
plusieurs
sélecteurs
simples
séparés
par
des
espaces
.

Il
est
bon
,
pour
en
comprendre
l'
intérêt
,
de
prendre
en
compte
le
principe
de
emboîtement
du
éléments
HTML
.

Les
éléments
HTML
sont
emboîtés
.

Cela
signifie
que
ils
peuvent
contenir
d'
autres
éléments
(
p
,
h1
,
strong
,
ul
,
…
)
.

Un
sélecteur
contextuel
fait
référence
à
un
élément
contenu
dans
un
ou
plusieurs
autres
.

La
possibilité
de
utiliser
des
sélecteurs
contextuels
donne
une
grande
souplesse
à
la
mise
en
forme
.

Ainsi
,
par
exemple
,
les
paragraphes
peuvent
-ils
être
formatés
différemment
si
ils
sont
dans
un
tableau
,
dans
un
calques
ou
hors
de
tout
contexte
.

1.10.3.4
Exemples
h4
strong
désigne
les
éléments
strong
qui
sont
contenus
dans
un
élément
h4
.

<h4>Titre
en
<strong>gras</strong></h4>
Autres
exemples
:
h4
strong
em
ou
encore
td
.important
Attention
,
p.important
(
sélecteur
simple
)
est
différent
de
p
.important
(
sélecteur
contextuel
)
.

1.10.4
Exemples
Voici
quelques
exemples
de
règles
.

Notez
que
ces
règles
ne
sont
que
du
texte
et
que
elles
peuvent
donc
être
éditées
avec
un
simple
éditeur
de
texte
.

Il
reste
à
savoir
à
quel
endroit
on
peut
les
définir
.

p
{
color:red
;
à
les
contenus
du
paragraphes
en
rouge
h1
{
font-size:20px
;
font-family:Verdana
;
à
les
titres
de
niveau
1
en
taille
20
pixels
et
police
Verdana
p.important
à
font-weight:bold
;
à
les
paragraphes
qualifiés
"
important
"
en
gras
div
p,h1,.important
à
color:red
;
à
les
paragraphes
dans
les
calques
,
les
titres
de
niveau
1
et
tous
les
éléments
qualifiés
"
important
"
en
rouge
td
p.mineur
à
color=#333333
;
font-size:15px
;
}
les
paragraphes
qualifiés
"
mineur
"
dans
les
cellules
de
tableau
en
gris
et
taille
15
pixels
Il
faut
signaler
que
la
plupart
du
éditeurs
HTML
donnent
au
concepteur
la
possibilité
de
créer
les
règles
de
manière
dynamique
sans
avoir
à
en
écrire
le
code
.

1.10.5
La
cascade
Rappelons
que
la
feuille
de
style
se
compose
tant
des
règles
définies
au
niveau
du
navigateur
(
feuille
de
style
par
défaut
)
que
de
celles
qui
pourraient
résulter
du
choix
de
l'
internaute
(
préférences
au
niveau
du
navigateur
)
et
,
évidemment
,
de
celles
du
concepteur
de
la
page
.

Étienne
Vandeput
–
©
Cefis
2005
24
Publier
sur
le
Web
-
Perfectionnement
de
autre
part
,
une
règle
est
souvent
partielle
.

Elle
ne
définit
pas
tous
les
paramètres
du
éléments
considérés
.

Pour
établir
l'
ensemble
du
paramètres
,
le
navigateur
doit
tenir
compte
de
une
certaine
hiérarchie
.

Enfin
,
comme
les
règles
peuvent
être
définies
à
plusieurs
endroits
,
il
convient
de
déterminer
,
en
cas
de
règles
concernant
les
mêmes
éléments
,
quelle
est
celle
qui
doit
l'
emporter
.

Nous
verrons
que
dans
ce
cas
,
c'
est
la
proximité
de
la
définition
par
rapport
à
l'
élément
qui
compte
.

1.10.5.1
Algorithme
Pour
comprendre
l'
algorithme
,
il
faut
se
rappeler
que
les
éléments
HTML
sont
emboîtés
(
l'
élément
qui
contient
tous
les
autres
étant
html
)
.

à
Rechercher
toutes
les
déclarations
qui
concernent
l'
élément
ou
la
propriété
concernée
si
il
n'
y
en
a
pas
,
prendre
en
considération
les
déclarations
héritées
(
emboîtement
)
si
il
n'
y
en
a
toujours
pas
,
prendre
en
considération
les
valeurs
par
défaut
à
Trier
les
déclarations
par
poids
explicites
(
certaines
règles
peuvent
être
déclarées
prioritaires
par
le
concepteur
ou
l'
internaute
)
à
Trier
par
origine
(
auteur
,
internaute
,
agent
)
à
Trier
par
spécificité
du
sélecteur
Ce
dernier
point
mérite
une
explication
.

Il
s'
agit
de
calculer
le
poids
du
règles
qu'
il
n'
est
pas
encore
possible
de
trier
,
de
la
manière
qui
suit
.

Il
s'
agit
de
concaténer
les
trois
nombres
suivants
:
à
le
nombre
de
attributs
id
dans
le
sélecteur
(
ex
:
1
)
à
le
nombre
de
attributs
class
dans
le
sélecteur
(
ex
:
1
)
à
le
nombre
de
éléments
(
ex
:
3
)
Dans
notre
exemple
,
le
poids
est
113
.

C'
est
la
règle
qui
a
le
poids
le
plus
élevé
qui
l'
emporte
.

1.10.6
Exercice
1.10.6.1
Énoncé
si
toutes
les
déclarations
qui
suivent
sont
valables
pour
un
même
élément
li
,
quel
sera
le
sélecteur
dont
la
déclaration
sera
retenue
?

ol
ul
li.rouge
{
…
à
ul
li
{
…
}
li
{
…
}
ol
ul
li
{
…
à
#titre
{
…
}
li.rouge
{
…
}
Imaginez
une
partie
de
la
syntaxe
de
cet
élément
et
ses
emboîtements
pour
que
cette
situation
soit
plausible
.

1.10.6.2
Correction
ol
ul
li.rouge
{
…
}
013
Étienne
Vandeput
–
à
Cefis
2005
25
Publier
sur
le
Web
-
Perfectionnement
ul
li
{
…
}
002
li
{
…
}
001
ol
ul
li
{
…
}
003
#titre
{
…
}
100
li.rouge
{
…
}
011
C'
est
donc
la
définition
de
#titre
qui
sera
prise
en
compte
.

C'
est
assez
logique
si
on
se
dit
que
il
s'
agit
de
un
élément
très
particulier
puisque
il
est
appelé
titre
.

Voici
une
structure
qui
rend
toutes
ces
définitions
plausibles
.

<ol>
à
<ul>
à
<li
class
=
«
rouge
»
id
=
«
titre
»
>…</li>
à
</ul>
…
</ol>
1.10.7
Localisation
du
feuilles
de
styles
Les
règles
de
une
feuille
de
styles
peuvent
se
retrouver
à
plusieurs
endroits
:
•
dans
un
fichier
externe
•
dans
l'
entête
du
document
HTML
•
dans
la
balise
de
ouverture
de
un
élément
•
dans
les
paramètres
du
navigateur
1.10.7.1
Fichier
externe
Il
est
possible
,
et
c'
est
même
la
meilleure
du
solutions
,
de
rassembler
les
règles
dans
un
fichier
texte
qui
sera
téléchargé
.

La
liaison
entre
le
document
HTML
et
le
fichier
à
feuille
de
style
»
se
fait
par
l'
intermédiaire
de
l'
élément
link
.

<link
rel="stylesheet
"
href="essai.css
"
type="text/css">
L'
attribut
rel
décrit
le
type
de
relation
entre
les
fichiers
.

L'
attribut
href
précise
la
localisation
du
fichier
.

L'
attribut
type
décrit
le
type
de
fichier
au
navigateur
.

1.10.7.2
Entête
du
document
HTML
Des
règles
peuvent
également
être
incluses
à
l'
intérieur
de
l'
élément
style
de
l'
entête
.

La
syntaxe
du
règles
est
rigoureusement
la
même
.

<style
type="text/css">
<
!

-.rouge
à
font-family
:
Arial
,
Helvetica
,
sans-serif
;
font-size
:
12px
;
color
:
#FF0000
}
--
>
</style>
Étienne
Vandeput
–
©
Cefis
2005
26
Publier
sur
le
Web
-
Perfectionnement
Les
balises
de
commentaires
sont
ignorées
par
les
navigateurs
si
ils
sont
capables
de
interpréter
le
langage
CSS
.

1.10.7.3
Élément
La
seule
possibilité
à
ce
niveau
est
de
utiliser
un
attribut
.

Il
s'
agit
de
l'
attribut
style
dont
la
valeur
est
la
règle
à
prendre
en
compte
.

La
syntaxe
est
légèrement
différente
(
pas
de
sélecteur
évidemment
et
pas
de
accolades
)
.

<h1
style="color
:
#00ff00">
Rappelons
que
la
priorité
est
accordée
au
paramètres
qui
sont
les
plus
proches
de
l'
élément
.

Cette
dernière
technique
est
donc
une
façon
de
revoir
,
en
dernière
minute
,
le
style
de
un
élément
.

Il
n'
est
pas
dit
que
c'
est
une
manière
efficace
de
procéder
.

1.11
Les
formulaires
et
JavaScript
L'
intérêt
de
un
langage
de
script
côté
client
est
évident
:
•
il
permet
une
certaine
interactivité
;
•
il
autorise
un
certain
contrôle
du
interactions
qui
serait
trop
lourd
à
demander
à
un
serveur
.

Dans
cette
section
,
nous
présentons
et
commentons
certains
scripts
.

La
plupart
sont
liés
à
la
gestion
du
formulaires
.

Le
but
est
de
montrer
comment
fonctionnent
le
modèle
objet
et
le
modèle
du
événements
en
JavaScript
et
de
faire
percevoir
que
à
peu
près
tout
est
permis
en
matière
de
interaction
.

Beaucoup
de
ces
scripts
sont
des
classiques
que
l'
on
retrouvera
sous
d'
autres
formes
sur
des
sites
Web
.

1.11.1
Scripts
généraux
Nous
avons
déjà
proposés
des
scripts
à
titre
de
exercices
.

En
voici
d'
autres
.

Certains
illustrent
la
communication
possible
entre
les
langages
et
en
particulier
,
entre
JavaScript
et
Php
.

1.11.1.1
Faire
afficher
la
date
et
l'
heure
Cet
exemple
illustre
la
possibilité
de
créer
un
objet
de
type
Date
et
de
en
extraire
les
informations
.

Un
objet
est
créé
en
utilisant
le
mot-clé
new
.

Diverses
méthodes
peuvent
être
invoquées
sur
des
objets
de
type
Date
:
getDate()
,
getMonth()
,
à
Notez
que
getDate()
renvoie
un
nombre
entre
1
et
31
alors
que
getDay()
renverrait
un
nombre
entre
0
et
6
correspondant
au
jour
de
la
semaine
.

<script
language="javascript">
à
!

-maintenant
à
new
Date()
document.write("<br>Aujourd'hui
,
nous
sommes
le
"
,
maintenant.getDate()
,
"
/
"
,
maintenant.getMonth()
p
1
,
"
/
"
,
maintenant.getYear())
document.write("<br>Il
est
"
,maintenant.getHours(),":",maintenant.getMinutes(),'.')
;
--
à
</script>
1.11.1.2
Faire
afficher
la
date
du
serveur
Cet
exemple
illustre
le
passage
de
un
langage
à
l'
autre
.

Nous
utilisons
ici
la
méthode
write()
de
l'
objet
document
.

Le
mini
script
Php
fournira
la
date
du
serveur
sous
forme
de
une
chaîne
de
caractères
.

<script
language="Javascript">
Étienne
Vandeput
–
©
Cefis
2005
27
Publier
sur
le
Web
-
Perfectionnement
<
!

-document.write('Nous
sommes
le
'
p
'
<
?

php
echo
date("d/m/Y")
;
?

ç'u
'
.
'
)
;
--
>
</script>
Cette
dernière
sera
concaténée
à
un
bout
de
phrase
par
JavaScript
(
opérateur
p
pour
la
concaténation
)
.

Notez
que
date()
est
une
fonction
PHP13
.

Le
fichier
qui
contiendra
ce
script
devra
avoir
l'
extension
php
.

1.11.1.3
Faire
afficher
la
date
de
dernière
modification
du
document
On
s'
intéresse
ici
à
la
propriété
lastModified
de
l'
objet
document
.

Le
résultat
(
une
chaîne
de
caractères
)
est
ensuite
découpé
en
morceaux
pour
reconstituer
la
date
sous
un
format
européen
.

<script
language="javascript">
à
!

-date=document.lastModified
jour=date.charAt(3)+date.charAt(4)
mois=date.charAt(0)+date.charAt(1)
annee=date.charAt(6)+date.charAt(7)+date.charAt(8)+date.charAt(9)
document.write("<br>Ce
document
a
été
modifié
pour
la
dernière
foi
le
"
/
"
p
mois
p
"
/
"
p
annee
)
"
p
jour
p
--
à
</script>
La
méthode
charAt()
s'
applique
à
tous
les
objets
chaînes
de
caractères
et
renvoie
le
caractère
à
la
position
indiquée
par
l'
argument
(
l'
index
commence
à
0
comme
de
habitude
)
.

Une
autre
possibilité
est
de
utiliser
la
méthode
substring(
)
.

On
observe
aussi
que
JavaScript
peut
produire
des
balises
(
exemple
ici
:
<br>
)
qui
seront
interprétées
par
le
navigateur
.

1.11.1.4
Recommander
un
site
à
un(e)
ami(e)
Il
s'
agit
de
un
script
simple
mais
qui
montre
la
souplesse
de
un
langage
comme
JavaScript
.

Les
variables
email
,
sujet
et
message
correspondent
à
des
chaînes
de
caractères
.

La
propriété
location
de
l'
objet
window
sert
à
rediriger
la
fenêtre
vers
une
nouvelle
adresse
(
URL
)
.

Autrement
dit
,
le
navigateur
fera
appel
au
client
mail
en
fournissant
le
destinataire
(
adresse
)
,
le
sujet
(
sujet
)
et
le
corps
du
message
(
message
)
.

L'
adresse
est
fournie
par
l'
internaute
à
travers
une
boîte
de
dialogue
(
fonction
prompt()
)
.

<script
language="javascript">
à
!

-function
recommander(){
var
adresse=
prompt('E-mail
de
votre
ami(e)
:
'
,
'
'
)
;
var
sujet=
"
Le
Cefis
à
un
centre
de
formation
au
technologies
"
;
var
messageë
"
Le
Cefis
est
le
centre
de
formation
que
vous
cherchez
!

!

Cliquez-ici
:
http://www.det.fundp.ac.be/cefis/
"
;
window.location="mailto:"+adresse+
"
?

subject="+sujet+"&body="+message
;
13
Pour
information
:
http://be.php.net/manual/fr/function.date.php
Étienne
Vandeput
–
©
Cefis
2005
28
Publier
sur
le
Web
-
Perfectionnement
}
--
à
</script>
Un
seul
bouton
est
nécessaire
pour
le
déclenchement
de
la
fonction
recommander(
)
.

<form
name="form1
"
method="post
"
action="">
<p>
<input
name="envoi
"
type="button
"
class="important1
"
value="Recommander
&agrave
;
un
ami
"
onclick="recommander()">
</p>
</form>
En
voici
une
illustration
:
Étienne
Vandeput
à
©
Cefis
2005
29
Publier
sur
le
Web
-
Perfectionnement
1.11.2
Scripts
liés
au
formulaires
1.11.2.1
Transformer
en
majuscules
le
contenu
saisi
dans
un
champ
Dans
cet
exemple
,
on
découvre
que
la
valeur
de
un
attribut
événement
peut
être
une
instruction
et
non
une
fonction
.

La
valeur
de
l'
attribut
commence
par
le
mot-clé
javascript
:
suivi
de
l'
instruction
.

<form
name="form1
"
method="post
"
action="">
<p>Nom
:
<input
type="text
"
name="titre
"
onChange="javascript:this.value=this.value.toUpperCase()
;
"
>
</p>
<p>Pr&eacute
;
nom
:
<input
type="text
"
name="auteur">
</p>
</form>
Le
script
se
résume
à
cette
seule
instruction
.

Lorsque
l'
objet
titre
perdra
le
focus
,
son
contenu
sera
transformé
en
majuscules
.

1.11.2.2
Vider
le
contenu
de
un
champ
en
cliquant
sur
un
bouton
Ce
script
peut
être
intéressant
lorsque
le
champ
contient
une
valeur
par
défaut
et
que
cette
valeur
ne
convient
pas
.

Cela
évite
à
l'
utilisateur
du
formulaire
de
devoir
effacer
manuellement
la
valeur
.

<script
language="javascript">
à
!

-function
vide(n)
à
document.form1.elements[n].value=
"
"
;
}
--
>
</script>
En
cas
de
clic
sur
le
bouton
,
le
contenu
de
l'
élément
numéro
0
est
effacé
.

<form
name="form1
"
method="post
"
action="">
<p>Valeur
:
<input
type="text
"
value="Valeur
par
défaut">
<input
type="button
"
value="Effacer
"
onclick="vide(0)">
</p>
</form>
1.11.2.3
Vider
le
contenu
de
un
champ
(
valeur
par
défaut
)
lorsqu'
on
lui
donne
le
focus
L'
utilité
de
ce
script
est
semblable
à
celle
du
script
précédent
.

La
manipulation
est
encore
plus
rapide
.

Il
est
parfois
intéressant
de
employer
cette
technique
pour
garnir
le
champ
de
une
valeur
par
défaut
qui
donne
une
indication
sur
l'
information
à
fournir
(
«
votre
nom
»
)
.

<input
name="nom
"
type="text
"
id="nom
"
value="Votre
nom
"
size=18
maxlength=75
onfocus="this.value=''">
Étienne
Vandeput
–
à
Cefis
2005
30
Publier
sur
le
Web
-
Perfectionnement
1.11.2.4
Contrôler
que
le
contenu
de
un
champ
est
de
une
longueur
minimale
La
fonction
alert()
affiche
une
boîte
de
dialogue
comportant
un
message
de
alerte
.

C'
est
la
propriété
length
du
contenu
du
champ
qui
est
testée
.

La
fonction
renvoie
un
booléen
car
elle
est
utilisée
comme
valeur
de
l'
attribut
onsubmit
du
formulaire
.

<script
language="javascript">
à
!

-function
minimum(champ,nbre){
if
(
champ.length
<
nbre){
alert("Le
mot
de
passe
doit
compter
"
+nbre+
"
caractères
au
minimum
.
"
)
;
return
false
;
à
return
true
;
}
--
>
</script>
au
niveau
du
formulaire
,
on
aura
:
<form
name="form1
"
method="post
"
action="../exemples/ok.php
"
onsubmit="return
minimum(this.mp.value,6)">
<p>Identificateur
<input
name="id
"
type="text
"
id="id">
</p>
<p>Mot
de
passe
<input
name="mp
"
type="password
"
idçämpëë
</p>
<p>
<input
name="envoi
"
type="submit
"
id="envoi
"
value="Envoyer">
</p>
</form>
Un
du
paramètres
est
la
référence
faite
à
la
propriété
value
du
champ
mp
du
formulaire
courant
(
this
)
.

1.11.2.5
Augmenter
la
taille
de
un
champ
en
fonction
de
son
contenu
Ce
script
permet
à
un
champ
de
s'
élargir
si
son
contenu
est
trop
«
large
»
pour
la
taille
du
champ
.

Cet
agrandissement
n'
a
toutefois
lieu
que
lorsque
le
champ
perd
le
focus
.

<script
language="JavaScript">
function
augmente(){
var
taille
=
document.form1.champ.size
;
if(document.form1.champ.value.length>=taille){
document.form1.champ.size
=
document.form1.champ.value.length
;
à
else
à
document.form1.champ.size
=
taille
;
}
}
</script>
Étienne
Vandeput
–
à
Cefis
2005
31
Publier
sur
le
Web
-
Perfectionnement
C'
est
la
valeur
de
l'
attribut
size
du
champ
texte
et
la
propriété
de
longueur
du
contenu
de
celui
-ci
qui
sont
concernés
par
ce
script
.

Lorsqu'
une
modification
du
contenu
du
champ
a
lieu
,
la
fonction
augmente()
est
activée
.

<form
name="form1
"
method="post
"
action="">
<p>Champ
qui
s'
agrandit
:
<input
type="text
"
name="champ
"
maxlength="50
"
size="2
"
onChange="augmente()">
</p>
<p>Autre
champ
<input
type="text
"
name="autrechamp">
</p>
</form>
1.11.2.6
Vérification
(
simple
)
de
une
adresse
email
On
se
contente
ici
de
vérifier
que
l'
arrobase
fait
bien
partie
de
la
chaîne
encodée
.

<script
language="javascript">
à
!

-function
arrobase_ok(email){
var
a=document.forms[0].email.value
;
var
test=
"
"
+
a
;
for(var
k
=
0
;
k
<
test.length
;
Kâëë
var
c
=
test.substring(k,k+1)
;
if(c
==
"
çäëë
return
true
;
}
à
alert("L’adresse
email
n'
est
pas
correcte
!

"
)
;
return
false
;
}
--
>
</script>
Étienne
Vandeput
à
à
Cefis
2005
32
Publier
sur
le
Web
-
Perfectionnement
Le
corps
du
document
contiendra
la
définition
suivante
de
formulaire
:
<form
name="form1
"
method="post
"
action=
"
"
onsubmit="return
arrobase_ok(email)">
<p>Nom
<input
type="text
"
name="nom">
</p>
<p>Adresse
email
<input
name="email
"
type="text
"
class="important1">
</p>
<p>
<input
type="submit
"
name="envoi
"
value="Envoyer">
</p>
</form>
En
cas
de
fourniture
de
adresse
dépourvue
de
arrobase
,
un
message
sera
affiché
comme
le
montre
l'
illustration
ci-après
.

1.11.2.7
Remplir
une
liste
en
fonction
de
un
choix
par
bouton
radio
Cet
exemple
montre
que
les
choix
proposés
au
internautes
peuvent
être
fonction
de
autres
choix
que
font
ces
derniers
.

Il
illustre
aussi
la
création
de
objet
et
inclus
du
éléments
de
mise
en
page
au
moyen
de
styles
CSS
(
voir
dernière
ligne
de
code
et
illustration
)
.

<script
language="javascript">
à
!

-function
animaux(form,list){
list.options.length=0
;
var
o=new
Option("Lapin","1")
;
form.liste.options[form.liste.options.length]=o
;
Étienne
Vandeput
à
©
Cefis
2005
33
Publier
sur
le
Web
-
Perfectionnement
var
o=new
Option("Chat","2")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Chien","3")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Renard","4")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Canard","5")
;
form.liste.options[form.liste.options.length]=o
;
à
function
sports(form,list){
list.options.length=0
;
var
o=new
Option("Tennis","1")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Basket","2")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Natation","3")
;
form.liste.options[form.liste.options.length]=o
;
à
function
fleurs(form,list){
list.options.length=0
;
var
o=new
Option("Rose","1")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Tulipe","2")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Narcisse","3")
;
form.liste.options[form.liste.options.length]=o
;
var
o=new
Option("Jonquille","4")
;
form.liste.options[form.liste.options.length]=o
;
}
--
>
</script>
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
Les
fonctions
animaux()
,
sports()
et
fleurs()
ont
pour
but
de
créer
des
listes
.

Une
de
ces
listes
sera
créée
en
fonction
du
choix
de
l'
internaute
.

Un
objet
Option
est
créé
en
donnant
son
étiquette
et
sa
valeur
.

Dans
la
description
du
formulaire
qui
suit
,
on
voit
que
en
fonction
du
bouton
radio
cliqué
,
c'
est
l'
une
ou
l'
autres
du
trois
fonctions
qui
est
activée
,
créant
une
liste
de
animaux
,
de
sports
ou
de
fleurs
.

<form
name="form1
"
action=
"
"
method="get">
<table
width="260
"
cellspacing="2
"
cellpadding="5">
Étienne
Vandeput
–
©
Cefis
2005
34
Publier
sur
le
Web
-
Perfectionnement
<tr>
<td
width="96"><p>
<input
type="radio
"
name="choix
"
value="Animaux
"
onClick
=
"
animaux(this.form,this.form.liste)">
Animaux</p>
<p>
<input
type="radio
"
name="choix
"
value="Sports
"
onClick
=
"
sports(this.form,this.form.liste)">
Sports
</p>
<p>
<input
type="radio
"
name="choix
"
value="Fleurs
"
onClick
=
"
fleurs(this.form,this.form.liste)">
Fleurs
</p></td>
<td
width="132"><select
name="liste
"
size="3
"
class="gris
"
align="top">
<option
value="Liste
vide
"
selected>Liste
vide</option>
</select></td>
</tr>
</table>
</form>
au
départ
,
la
liste
est
vide
ou
plutôt
,
elle
ne
contient
que
l'
item
«
Liste
vide
»
.

Lorsqu'
un
choix
est
fait
,
la
liste
se
remplit
du
items
correspondants
.

1.12
Exercice
Créez
un
formulaire
à
votre
goût
et
selon
vos
intérêts
.

Il
devra
contenir
des
champs
texte
,
une
liste
déroulante
,
un
groupe
de
boutons
radios
et
l'
une
ou
l'
autre
case
à
cocher
,
un
bouton
simple
qui
permet
de
faire
exécuter
un
script
local
(
vérification
du
remplissage
de
certains
champs
)
et
un
bouton
de
soumission
.

N'
oubliez
pas
de
donner
des
étiquettes
au
objets
du
formulaire
.

La
page
contiendra
la
date
du
jour
et
la
date
de
dernière
modification
.

Lorsque
le
formulaire
sera
soumis
,
une
page
contenant
des
bribes
de
code
Php
reconstituera
un
document
HTML
reprenant
quelques-unes
du
données
fournies
avec
,
si
possible
,
un
petit
traitement
sur
l'
une
ou
l'
autre
donnée
(
par
exemple
en
réécrivant
nom
et
prénom
dans
l'
ordre
inverse
avec
l'
initiale
du
prénom
seulement)14
.

14
vous
pouvez
déjà
consulter
la
liste
du
fonctions
Php
pour
faire
quelques
manipulations
simples
.

Étienne
Vandeput
–
à
Cefis
2005
35
Publier
sur
le
Web
-
Perfectionnement
2
.

Le
langage
Php
2.1
En
quoi
consiste
php
?

Php
est
un
langage
de
scripts
open
ource15
.

Comme
beaucoup
d'
autres
langages
,
il
a
été
spécialement
conçu
pour
le
développement
de
applications
web
.

Il
peut
être
intégré
au
HTML
.

Pour
ce
faire
,
le
code
Php
est
inclus
entre
une
balise
de
début
(
ensemble
de
symboles
)
et
une
balise
de
fin
qui
permettent
au
serveur
web
de
passer
en
mode
Php
.

La
partie
Php
correspond
donc
à
la
partie
créative
et
dynamique
du
document
HTML
finalement
envoyé
par
le
serveur
et
que
le
navigateur
transformera
en
page
Web
.

à
!

DOCTYPE
HTML
PUBLIC
"
-//W3C//DTD
HTML
4.01
Transitional//EN">
<html>
<head>
<title>M&eacute
;
lange
HTML
-
PHP</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
</head>
<body>
<h4>Partie
statique
(
HTML
pur
et
dur)</h4>
<p>Cette
partie
du
texte
est
du
HTML
classique.</p>
<h4>Partie
dynamique
(
HTML
construit)</h4>
<p><
?

php
echo
"
Celle
-ci
a
été
transformée
en
HTML
<strong>au
niveau
du
serveur</strong>
,
par
l'
analyseur
Php
.
"
;
?

></p>
</body>
</html>
à
l'
affichage
,
cela
donne
:
15
Un
logiciel
est
dit
open
source
si
le
code
source
est
inclus
avec
sa
version
compilée
,
encourageant
ainsi
réellement
sa
modification
ou
son
adaptation
.

Pour
être
considéré
comme
tel
,
le
logiciel
doit
être
distribué
gratuitement
,
le
code
source
doit
y
être
inclus
de
sorte
que
chacun
puisse
le
modifier
et
le
redistribuer
.

Étienne
Vandeput
–
©
Cefis
2005
36
Publier
sur
le
Web
-
Perfectionnement
Contrairement
au
code
JavaScript
,
le
code
Php
est
exécuté
par
le
serveur
et
non
par
le
client
.

Le
client
ne
reçoit
que
le
résultat
du
script
,
sans
aucun
moyen
de
avoir
accès
au
code
qui
a
produit
ce
résultat
.

si
vous
donnez
au
fichiers
HTML
correspondant
à
des
page
statiques
l'
extension
Php
,
l'
internaute
n'
a
aucun
moyen
de
distinguer
les
page
qui
sont
produites
dynamiquement
des
page
statiques
.

Voici
la
partie
intéressante
de
la
source
qu'
a
reçue
le
navigateur
dans
l'
exemple
précédent
:
<body>
<h4>Partie
statique
(
HTML
pur
et
dur)</h4>
<p>Cette
partie
du
texte
est
du
HTML
classique.</p>
<h4>Partie
dynamique
(
HTML
construit)</h4>
<p>Celle
-ci
a
été
transformée
en
HTML
<strong>au
niveau
du
serveur</strong>
,
par
l'
analyseur
PHP.</p>
</body>
Tous
les
fichiers
contenant
des
instructions
en
php
doivent
posséder
l'
extension
.php16
.

2.2
Qu'
offre
php
?

php
est
principalement
conçu
pour
servir
de
langage
de
script
coté
serveur
.

Il
est
capable
de
réaliser
tout
ce
qu'
un
script
Cgi
peut
faire17
.

Il
est
principalement
utilisé
pour
écrire
des
scripts
de
collecte
de
données
issues
de
formulaires
,
de
stockage
éventuel
de
ces
données
dans
une
base
de
données
,
de
génération
dynamique
de
contenu
(
voir
petit
exemple
ci-dessus
)
,
…
C'
est
l'
utilisation
la
plus
traditionnelle
et
le
principal
objet
de
Php
.

Trois
composants
sont
nécessaires
:
à
un
analyseur
php
,
à
un
serveur
Web
(
Apache
,
par
exemple
)
,
à
un
navigateur
web
.

Le
serveur
Web
doit
s'
exécuter
en
corrélation
avec
Php
,
ce
qui
nécessite
une
configuration
particulière
et
pas
forcément
évidente
à
réaliser
.

C'
est
pourquoi
il
existe
des
environnements
logiciels
grâce
auxquels
ces
problèmes
passent
au
second
plan18
.

Notez
que
il
est
aussi
possible
de
écrire
des
scripts
Php
et
de
les
exécuter
en
ligne
de
commande
,
sans
l'
aide
du
serveur
Web
et
de
un
navigateur
.

Il
faut
,
pour
cela
,
disposer
de
l'
exécutable
Php
.

Cette
utilisation
est
intéressante
pour
des
scripts
qui
doivent
être
exécutés
régulièrement
.

Php
est
utilisable
sur
la
majorité
du
systèmes
de
exploitation
et
supporte
la
plupart
du
serveurs
Web
actuels
et
notamment
Apache
et
Microsoft
Internet
Information
Server
(
Iis
)
.

vous
avez
également
le
choix
de
utiliser
la
programmation
procédurale
,
la
programmation
objet
,
ou
un
mélange
du
deux
.

16
D'
autres
extensions
sont
reconnues
telles
php3
,
phtml
,
…
pour
autant
que
elles
soient
fournies
au
serveur
Web
via
le
fichier
.httpd.conf
.

Par
exemple
:
AddType
application/x-httpd-php
.phtml
.pwml
.php3
.php4
.php
.php2
.inc
.

17
Cgi
(
Common
Gateway
Interface
)
est
un
moyen
de
faire
communiquer
le
client
Web
avec
des
applications
écrites
dans
différents
langages
et
disponibles
au
niveau
du
serveur
.

L'
utilisation
de
scripts
Cgi
demande
,
bien
entendu
,
quelques
efforts
de
configuration
.

18
http://www.easyphp.org/telechargements.php3
Étienne
Vandeput
–
à
Cefis
2005
37
Publier
sur
le
Web
-
Perfectionnement
Php
ne
se
limite
pas
à
la
production
de
code
HTML
.

Il
peut
aussi
générer
des
image
,
des
fichiers
PDF
,
et
même
du
animations
Flash
.

Il
génère
facilement
du
texte
et
donc
aussi
,
du
code
XML
ou
XHTML
.

Php
génère
ces
fichiers
et
les
sauve
dans
le
système
de
fichiers
,
ou
bien
les
envoie
au
navigateur
web
.

mais
,
ce
qui
nous
intéresse
davantage
,
Php
possède
de
nombreuses
fonctions
permettant
de
exploiter
les
base
de
données
parmi
lesquelles
:
InterBase
,
PostgreSQL
,
dBase
,
MySQL
,
Ibm
DB2
,
ODBC
,
Informix
,
Oracle
et
Ingres
,
pour
ne
citer
que
les
plus
connues
.

2.3
Les
base
du
langage
2.3.1
Éléments
de
syntaxe
2.3.1.1
Les
balises
Php
Il
y
a
quatre
jeu
de
balises
pouvant
servir
à
délimiter
des
blocs
de
code
Php
.

Seuls
deux
de
entre
eux
sont
actifs
à
coup
sûr19
:
<
?

php
.

.

.
?
>
et
<script
language="php">
.

.

.</script>
.

<html>
<head>
<title>M&eacute
;
lange
HTML
-
PHP</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
</head>
<body>
<p>Cette
partie
du
texte
est
interpr&eacute
;
t&eacute
;
e
par
le
navigateur.</p>
<p>
<script
language="php">
echo
"
Celle
-ci
le
sera
par
l'
analyseur
Php
.
"
;
</script>
</p>
</body>
</html>
Cette
deuxième
syntaxe
est
évidemment
plus
lourde
.

Dans
la
suite
de
ces
notes
,
nous
utiliserons
toujours
la
première
.

2.3.1.2
Les
séparateurs
de
instructions
Le
séparateur
de
instructions
est
le
symbole
"
;
"
.

Il
est
nécessaire
partout
sauf
devant
la
balise
de
fin
de
exécution
du
php
soit
"
?

>
"
.

2.3.1.3
Les
commentaires
Comme
dans
de
nombreux
autres
langages
,
les
caractères
se
trouvant
entre
les
couples
de
symboles
"
/*
"
et
"
*/
"
ne
sont
pas
pris
en
compte
par
l'
analyseur
.

Les
commentaires
jusque
en
fin
de
ligne
commencent
par
les
symboles
"
//
"
ou
le
symbole
"
#
"
.

<html>
<head>
<title>M&eacute
;
lange
HTML
-
PHP</title>
19
Les
balises
courtes
(
sans
le
mot-clé
php
)
et
les
balises
Asp
peuvent
être
activées
et
déasctivées
au
niveau
du
fichier
php.ini
.

Étienne
Vandeput
–
©
Cefis
2005
38
Publier
sur
le
Web
-
Perfectionnement
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
</head>
<body>
<p>Cette
partie
du
texte
est
interpr&eacute
;
t&eacute
;
e
par
le
navigateur.</p>
<p>
<
?

php
àà
echo
est
une
fonction
de
affichage
.

Elle
est
suivie
de
une
chaîne
de
caractères
.

*/
echo
"
Celle
-ci
le
sera
par
l'
analyseur
PHP.<br>
"
;
//
La
fonction
print
est
...
print
"
Et
celle
-ci
aussi
!

"
;
#
La
preuve
!

?

>
</p>
</body>
</html>
2.3.2
Variables
2.3.2.1
Variables
internes
Les
variables
sont
représentées
par
le
signe
dollar
"
$
"
suivi
du
nom
de
la
variable
.

Le
nom
est
sensible
à
la
casse
(
$x
à
$X
)
.

Un
nom
de
variable
doit
commencer
par
une
lettre
ou
le
caractère
souligné
(
_
)
,
suivi
de
lettres
,
chiffres
ou
soulignés
.

<html>
<head>
<title>Nommage
du
variables
et
affectations</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
</head>
<body>
<
?

php
$prenom='Étienne
'
;
$Prenom="Charles
"
;
echo
$prenom
,
'
est
l\'assistant
de
'
,$Prenom
,
'
.
'
;
?

à
</body>
</html>
Dans
cet
exemple
,
on
constate
que
à
la
casse
du
caractères
est
importante
dans
les
noms
de
variables
,
à
les
chaînes
de
caractères
constantes
s'
écrivent
entre
guillemets
ou
apostrophes
,
à
la
fonction
echo
admet
plusieurs
arguments
séparés
par
des
virgules
,
Étienne
Vandeput
à
à
Cefis
2005
39
Publier
sur
le
Web
-
Perfectionnement
à
une
vraie
apostrophe
dans
une
chaîne
de
caractères
,
elle-même
délimitée
par
des
apostrophes
,
doit
être
précédée
de
la
barre
oblique
inverse
(
\
)
.

Les
variables
sont
affectées
par
valeur
mais
peuvent
aussi
l'
être
par
référence
(
à
partir
de
Php4
)
.

Dans
ce
deuxième
cas
,
la
nouvelle
variable
ne
fait
que
référencer
la
variable
originale
.

Les
modifications
de
la
nouvelle
variable
affecteront
l'
ancienne
,
et
vice
versa
.

Pour
assigner
par
référence
,
on
ajoute
le
symbole
"
&
"
au
nom
de
la
variable
source
.

<html>
<head>
<title>Nommage
du
variables
et
affectations</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
</head>
<body>
<
?

php
$a=12
;
$b=23
;
print
$a+$b
.
'

'
;
//
Affectation
par
valeur
$c=$a
;
$c=20
;
print
$a+$b
.
'

'
;
//
Affectation
par
référence
$c=&$a
;
$c=15
;
print
çaëçb
;
?

à
</body>
</html>
Observez
que
l'
affectation
se
fait
au
moyen
du
symbole
"
=
"
alors
que
l'
opérateur
de
comparaison
est
(
voir
plus
loin
)
"
==
"
.

L'
instruction
print
$a+$b
.
'

'
;
est
particulière
.

La
première
expression
est
le
résultat
de
une
opération
entre
deux
entiers
(
voir
les
types
,
ci-après
)
,
alors
que
la
seconde
est
une
chaîne
constituée
du
seul
caractère
"
espace
"
.

L'
opérateur
entre
les
deux
,
symbolisé
par
le
point
(
.
)
,
est
un
opérateur
de
concaténation
.

L'
expression
entière
est
donc
automatiquement
transformée
en
chaîne
de
caractères
avant
de
être
affichée
.

2.3.2.2
Portée
du
variables
Les
variables
ont
une
portée
globale
si
elles
ne
sont
pas
définies
à
l'
intérieur
de
une
fonction
.

Elles
sont
accessibles
partout
dans
le
script
.

Les
variables
définies
à
l'
intérieur
de
une
fonction
sont
locales
.

de
même
,
les
variables
définies
en
dehors
de
une
fonction
ne
sont
pas
directement
accessibles
à
l'
intérieur
de
celle
-ci
.

Étienne
Vandeput
–
à
Cefis
2005
40
Publier
sur
le
Web
-
Perfectionnement
Il
est
possible
de
accéder
au
variables
globales
à
l'
intérieur
du
fonctions
.

de
même
,
il
est
possible
de
rendre
visibles
partout
les
variables
définies
dans
une
fonction
.

Le
script
qui
suit
illustre
la
portée
du
variables
.

à
l'
intérieur
de
une
fonction
,
il
est
possible
de
accéder
à
une
variable
globale
par
l'
intermédiaire
du
tableau
prédéfini
$GLOBALS[
]
.

Ce
tableau
est
indexé
par
les
noms
du
variables
(
sans
le
symbole
$
)
.

Pour
rendre
une
variable
locale
visible
,
il
faut
utiliser
la
déclaration
global
.

<
?

php
$a=1
;
$b=2
;
function
portee(){
$a=101
;
$b=102
;
echo
$a+$b.'<br>
'
;
//
Affichage
de
la
somme
à
l'
intérieur
de
la
fonction
echo
$GLOBALS['a'].'<br>
'
;
//
Accès
à
la
variable
globale
$a
(
extérieure
)
global
$c
;
//
Rendre
la
variable
$c
locale
visible
partout
$c=99
;
}
portee()
;
echo
$a+$b
;
echo
'
<br>
'
;
//
Affichage
de
la
somme
à
l'
extérieur
de
la
fonction
echo
$c.'<br>
'
;
//
Affichage
de
la
valeur
de
$c
à
l'
extérieur
de
la
fonction
echo
$GLOBALS['c'].'<br>
'
;
?

à
Voici
le
résultat
:
la
fonction
portee()
est
exécutée
,
fournissant
la
somme
du
valeurs
du
variables
locales
et
la
valeur
de
la
variable
globale
$a
.

pui
c'
est
la
somme
du
valeurs
du
variables
globales
qui
est
affichée
,
suivie
de
la
valeur
de
la
variable
$c
qui
a
été
rendue
globale
et
qui
est
obtenue
de
deux
manières
différentes
,
vu
que
la
valeur
de
la
variable
$c
garnit
aussi
le
tableau
$GLOBALS[
]
.

2.3.2.3
Variables
dynamiques
Il
est
possible
de
s'
arranger
pour
que
le
nom
de
une
variable
soit
lui-même
variable
.

C'
est
particulièrement
pratique
pour
éviter
les
problèmes
de
nomination
.

Cette
opportunité
existe
en
utilisant
le
symbole
dollar
(
$
)
une
seconde
foi
.

Voyez
l'
exemple
qui
suit
.

<
?

php
$a="Charles
"
;
$$a="Directeur
du
Cefis
"
;
echo
$a
.
'

'
.$Charles
;
?

à
L'
intérêt
de
pouvoir
créer
des
variables
dynamiquement
est
de
éviter
de
devoir
utiliser
des
tableaux
,
voire
de
se
casser
la
tête
pour
trouver
des
noms
de
variables
.

Étienne
Vandeput
–
à
Cefis
2005
41
Publier
sur
le
Web
-
Perfectionnement
En
voici
un
exemple
:
<
?

php
foreach($_POST
as
$key
=>
$value
)
à
$varname
=
"
_".$key
;
$$varname
=
$value
;
}
?

à
même
si
vous
ne
connaissez
pas
encore
cette
structure
répétitive
,
il
est
facile
de
comprendre
ce
que
fait
cette
partie
de
script
.

Les
valeurs
de
un
formulaire
décorent
le
tableau
$_POST
qui
contient
les
valeurs
envoyées
au
serveur
par
le
client
.

Pour
éclater
ce
tableau
en
autant
de
variables
que
nécessaire
,
on
crée
des
variables
contenant
à
chaque
foi
une
chaîne
de
caractères
commençant
par
le
caractère
de
soulignement
,
suivi
du
nom
de
la
variable
(
clé
de
index
du
tableau
)
.

On
utilise
ces
chaînes
comme
nom
pour
des
variables
qui
contiendront
les
valeurs
transmises
.

Exemple
:
si
les
couples
clés-valeurs
transmis
sont
(
nom
,
Vandeput
)
,
(
prenom
,
Étienne
)
,
(
departement
,
DET
)
,
les
variables
créées
seront
respectivement
$_nom
,
$_prenom
et
$_departement
et
contiendront
les
valeurs
Vandeput
,
Étienne
et
DET
.

2.3.2.4
Variables
externes
Php
manipule
aussi
des
variables
provenant
de
l'
extérieur
comme
,
nous
venons
juste
de
le
rappeler
,
les
variables
provenant
de
la
soumission
de
un
formulaire
.

C'
est
d'ailleurs
là
une
de
ses
qualités
.

Ces
variables
sont
aisément
accessibles
à
travers
des
tableaux
prédéfinis
.

Parmi
ceux
-ci
,
notons
$GLOBALS
qui
rassemble
les
variables
globales
,
$_POST
et
$_GET
qui
contiennent
respectivement
les
valeurs
transmises
par
la
méthode
post
et
celles
qui
ont
été
transmises
par
la
méthode
get
,
ou
encore
$_SERVER
.

Nous
vous
renvoyons
à
la
documentation
pour
plus
de
détails
.

Nous
donnons
ici
quelques
exemples
de
informations
normalement20
disponibles
au
niveau
du
serveur
à
<html>
<head>
<title>La
variable
$_SERVER</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
</head>
<body>
<p>
<
?

php
echo
"
<span
class='important2'>Nom
du
fichier
à
partir
de
la
racine
:
</span>
"
;
echo
$_SERVER['PHP_SELF'].'<br><br>
'
;
echo
"
<span
class='important2'>Nom
de
la
racine
du
script
:
</span>
"
;
echo
$_SERVER['DOCUMENT_ROOT'].'<br><br>
'
;
echo
"
<span
class='important2'>Nom
du
client
HTML
:
</span>
"
;
20
Il
n'
y
a
aucune
garantie
sur
la
fourniture
de
toutes
les
informations
prévues
par
un
serveur
donné
.

Étienne
Vandeput
–
©
Cefis
2005
42
Publier
sur
le
Web
-
Perfectionnement
echo
$_SERVER['HTTP_USER_AGENT'].'<br><br>
'
;
echo
"
<span
class='important2'>Nom
du
serveur
qui
exécute
le
script
:
</span>
"
;
echo
$_SERVER['SERVER_NAME'].'<br><br>
'
;
?

>
</p>
</body>
</html>
…dont
voici
le
résultat
dans
un
contexte
donné
:
Un
autre
moyen
de
accéder
au
valeurs
du
tableau
$_server
est
de
activer
la
fonction
prédéfinie
phpinfo()
dans
un
script
.

L'
instruction
à
placer
dans
le
fichier
php
est
:
à
?

php
phpinfo()
?

à
Étienne
Vandeput
–
©
Cefis
2005
43
Publier
sur
le
Web
-
Perfectionnement
Voici
un
petit
exemple
qui
illustre
le
profit
que
l'
on
peut
éventuellement
tirer
de
telles
informations
.

La
composante
$_SERVER[REMOTE_ADDR
]
représente
l'
adresse
Ip
du
client
.

Supposons
que
une
page
soit
réservée
à
une
catégorie
de
clients
identifiables
par
leur
adresse
Ip
(
par
exemple
,
les
Facultés
:
138.48
…
.
)
.

Il
suffit
de
vérifier
que
le
client
a
bien
une
adresse
commençant
par
ces
deux
valeurs
.

La
fonction
explode(<séparateur>,<chaîne>)
renvoie
un
tableau
dont
les
composantes
sont
les
éléments
de
la
chaîne
<chaîne>
séparées
par
le
séparateur
<séparateur>
.

$adresseIP=explode(".",$_SERVER['REMOTE_ADDR'])
;
if(adresseIP[0
]
!

="138"||adresseIP[1
]
!

ççëëë
echo
htmlentities("Accès
limité
au
FUNDP
"
)
;
exit
;
à
La
fonction
htmlentities(<chaîne>)
convertit
les
caractères
spéciaux
en
entités
HTML
(
exemple
:
é
devient
&eacute
;
.

L'
utilisation
de
cette
fonction
évite
un
certain
nombre
de
surprises
.

2.3.3
Les
constantes
Une
constante
est
un
identifiant
qui
représente
une
valeur
simple
.

Le
nom
de
constante
valide
commence
par
une
lettre
ou
un
souligné
(
_
)
,
suivi
de
un
nombre
quelconque
de
lettre
,
chiffres
ou
soulignés
.

Par
convention
,
les
constantes
sont
toujours
en
majuscules
.

Les
constantes
sont
définies
grâce
à
la
fonction
define()
et
ne
peuvent
être
redéfinies
.

$a=3
;
define("VALMAX","100")
;
$a+=VALMAX
;
echo
$a
;
affichera
la
valeur
103
.

Elles
sont
accessibles
de
manière
globale
.

$a=3
;
define("VALMAX","100")
;
$a+=VALMAX
;
echo
$a.'<br>
'
;
function
test(){
echo
VALMAX
;
à
test()
;
2.3.4
Types
Habituellement
en
Php
,
le
type
de
une
variable
n'
est
pas
déclaré
par
le
programmeur
.

Il
est
décidé
au
moment
de
l'
exécution
,
en
fonction
du
contexte
dans
lequel
la
variable
est
utilisée
(
voir
exemple
ci-dessus
pour
la
variable
adresseIP
)
.

Il
y
a
huit
types
de
base
dont
:
quatre
types
scalaires
(
valeurs
indécomposables
)
Étienne
Vandeput
–
©
Cefis
2005
44
Publier
sur
le
Web
-
Perfectionnement
•
booléen
•
entier
à
nombre
à
virgule
flottante
•
chaîne
de
caractères
deux
types
composés
•
tableau
à
objet
et
deux
types
spéciaux
à
ressource
à
null
Comme
d'
autres
langages
,
Php
offre
la
possibilité
de
"
transtyper
"
les
variables
(
casting
)
.

examinons
rapidement
les
types
scalaires
.

Les
autres
types
seront
analysés
plus
loin
.

Nous
2.3.4.1
Booléen
Classiquement
,
les
valeurs
sont
true
et
false
(
casse
sans
importance
)
.

Les
variables
du
autres
types
peuvent
être
transtypées
en
variable
booléenne
.

Ainsi
,
par
exemple
,
la
valeur
entière
0
,
la
valeur
en
nombre
à
virgule
0.0
,
la
chaîne
vide
ou
la
chaîne
"
0
"
prennent
la
valeur
false
lorsqu'
elles
sont
transtypées
en
booléen
.

2.3.4.2
Entier
Les
entiers
peuvent
être
spécifiés
en
base
décimale
,
en
hexadécimal
ou
en
octal
et
optionnellement
être
précédés
de
un
signe
.

Selon
les
systèmes
,
environ
4
milliard
de
valeurs
signées
sont
possibles
(
codage
sur
32
bits
)
.

<
?

php
$i=123456
;
$j=123.456E3
;
$k=01234
;
$l=0xAA45
;
print
$i."<br>".$j."<br>".$k."<br>".$l
?

>
2.3.4.3
Nombre
à
virgule
flottante
Voici
quelques
exemples
illustrant
la
syntaxe
admise
.

<
?

php
$i=123.456
;
$j=1.23456E2
;
$k=.123456e3
;
print
$i."<br>".$j."<br>".$k
?

à
Étienne
Vandeput
–
à
Cefis
2005
45
Publier
sur
le
Web
-
Perfectionnement
La
taille
du
nombres
décimaux
dépend
de
la
plateforme
.

La
configuration
la
plus
répandue
permet
de
coder
des
nombres
dont
l'
ordre
de
grandeur
est
de
1.8E308
avec
une
précision
de
14
décimales
.

C'
est
le
format
64
bits
Ieee
.

Il
ne
faut
jamais
faire
confiance
au
nombres
à
virgule
jusque
à
leur
dernière
décimale
et
s'
interdire
de
les
comparer
avec
l'
opérateur
de
égalité
.

2.3.4.4
Chaîne
de
caractères
Il
y
a
trois
manières
différentes
de
construire
des
chaînes
de
caractères
:
•
en
utilisant
les
apostrophes
;
•
en
utilisant
les
guillemets
;
•
en
utilisant
la
syntaxe
HEREDOC
(
dont
nous
ne
parlerons
pas
)
.

2.3.4.5
Les
apostrophes
$prenom='Étienne
'
;
si
la
chaîne
doit
contenir
des
apostrophes
,
vous
devez
les
échapper
avec
la
barre
oblique
inverse
(
\
)
.

$titre='L\'école
et
les
TIC
'
;
C'
est
pareil
pour
la
barre
oblique
inverse
elle-même
.

$remarque='Utilisez
la
barre
oblique
inverse
(
\\
)
pour
échapper
les
caractères
.
'
;
Les
noms
de
variables
présents
dans
la
chaîne
apparaîtront
tels
quels
.

$c='La
variable
$nom
'
;
<
?

php
$prenom='Étienne<br>
'
;
$titre='L\'école
et
les
TIC<br>
'
;
$remarque='Utilisez
la
barre
oblique
inverse
(
\\
)
pour
échapper
les
caractères.<br>
'
;
$c='La
variable
$nom
'
;
echo
$prenom.'<br>'.$titre.'<br>'.$remarque.'<br>'.$c
;
?

à
Observez
que
les
balises
HTML
qui
ne
sont
que
du
texte
peuvent
être
incluses
dans
les
chaînes
de
caractères
.

Elles
seront
interprétées
par
le
navigateur
.

2.3.4.6
Les
guillemets
L'
apostrophe
ne
doit
plus
être
échappé
mais
bien
le
guillemet
.

Les
noms
de
variables
sont
remplacés
par
leurs
valeurs
respectives
.

<
?

php
$prenom="Étienne
"
;
$titre="Le
cours
\"PHP\"<br>
"
;
Étienne
Vandeput
–
©
Cefis
2005
46
Publier
sur
le
Web
-
Perfectionnement
$remarque="Utilisez
la
barre
oblique
inverse
(
\\
)
pour
échapper
les
caractères.<br>
"
;
$c="Le
cours
Php
est
donné
par
$prenom.<br>
"
;
$d='Le
cours
Php
est
donné
par
$prenom.<br>
'
;
$e='Le
cours
Php
est
donné
par
'
.$prenom.'.<br>
'
;
echo
$prenom."<br><br>".$titre."<br>".$remarque."<br>".$c."<br>".$d."<br>".$e
;
?

>
2.3.5
Opérateurs
Comme
tout
langage
de
programmation
,
Php
propose
des
opérateurs
et
des
fonctions
prédéfinies
,
mais
offre
aussi
au
programmeur
la
possibilité
de
construire
ses
propres
fonctions
.

Les
opérateurs
(
comme
les
fonctions
prédéfinies
)
sont
trop
nombreux
pour
être
décrits
ici
.

vous
pouvez
vous
référer
à
la
documentation
en
ligne
de
PHP21
.

Dans
ce
qui
suit
,
nous
nous
contentons
de
évoquer
ceux
,
parmi
les
moins
classiques
,
qui
présentent
un
intérêt
immédiat
.

Ils
sont
utilisés
et
documentés
dans
les
exemples
qui
suivent
.

2.3.5.1
Opérateurs
de
assignation
L'
assignation
se
fait
classiquement
en
utilisant
le
symbole
=
.

Des
facilités
sont
offertes
comme
dans
de
nombreux
autres
langages
:
opérateurs
combinés
uà
ou
.=
$a
uà
bb
;
//
$a
=
$a
p
bb
;
$a
.=
bb
;
//
$a
=
$a
.

bb
;
assignations
combinées
$a
=
(
bb
à
5
)
p
1
;
//
bb
=
5
;
$a
=
bb
p
1
;
2.3.5.2
Opérateurs
de
comparaison
La
comparaison
peut
se
faire
sur
les
valeurs
mais
également
sur
les
types
.

C'
est
la
raison
pour
laquelle
,
à
l'
opérateur
classique
de
comparaison
==
,
s'
ajoute
un
opérateur
qui
vérifie
en
plus
l'
égalité
du
types
===
.

$a
===
bb
possède
la
valeur
true
uniquement
si
les
deux
variables
contiennent
les
mêmes
valeurs
et
sont
de
même
type
.

On
trouve
de
même
du
opérateurs
!

=
et
!

==
pour
tester
la
différence
du
valeurs
et
la
différence
du
valeurs
ou
du
types
.

$a
!

==
bb
possède
la
valeur
true
si
les
deux
variables
contiennent
des
valeurs
différentes
ou
sont
de
types
différents
.

21
http://www.php.net/manual/fr/
Étienne
Vandeput
à
à
Cefis
2005
47
Publier
sur
le
Web
-
Perfectionnement
2.3.5.3
Opérateurs
de
incrémentation
décrémentation
Ces
opérateurs
peuvent
être
utilisés
de
concert
avec
des
tests
.

C'
est
la
raison
pour
laquelle
on
parle
de
pré
ou
de
post
incrémentation/décrémentation
.

++$a
incrémente
$a
avant
de
renvoyer
sa
valeur
(
pour
un
test
éventuel
)
.

çauu
renvoie
la
valeur
de
$a
avant
de
l'
incrémenter
.

Les
expressions
suivantes
--
ça
et
$a
--
sont
les
équivalentes
en
décrémentation
.

2.3.5.4
Opérateurs
logiques
Les
opérateurs
logiques
habituels
,
ET
,
Ou
et
NON
sont
respectivement
symbolisés
par
&&
,
||
et
!

.

Il
existe
aussi
des
opérateurs
and
et
or
qui
sont
équivalents
à
&&
et
à
||
à
ceci
près
que
ils
ont
une
priorité
différente
.

Profitons
-en
pour
rappeler
que
il
faut
être
attentif
à
la
priorité
du
opérateurs
et
,
en
cas
de
doute
,
utiliser
les
parenthèses
.

2.3.5.5
Opérateurs
de
chaînes
L'
opérateur
de
concaténation
du
chaînes
de
caractères
est
le
point
.

si
$nom
contient
la
valeur
à
Vandeput
»
et
$prenom
,
la
valeur
à
Étienne
»
,
le
texte
affiché
par
…
echo
"
Bonjour".$prenom
.
"

"
.$nom
.
"
.
"
;
…
sera
à
Bonjour
Étienne
Vandeput
.

Notez
la
différence
de
interprétation
du
point
dans
et
en
dehors
du
guillemets
.

2.3.6
Fonctions
Une
fonction
est
définie
de
la
manière
suivante
:
function
f(p1,p2,…,pn){
à
return
v
;
…
}
à
partir
de
Php4
,
les
fonctions
peuvent
être
définies
n'
importe
où
.

Toutefois
,
une
fonction
définie
à
l'
intérieur
de
une
autre
fonction
n'
existe
que
si
cette
dernière
est
appelée
.

de
même
,
une
fonction
définie
de
manière
conditionnelle
n'
existe
que
si
la
condition
est
testée
et
vérifiée
.

Il
est
possible
de
passer
les
arguments
par
valeur
(
méthode
par
défaut
)
à
function
multiplier($a,$b){
$p=$a*$b
;
return
p
;
}
echo
multiplier(4,8)
;
…ou
par
référence
à
function
tripler(&$n){
$n*=3
;
}
Étienne
Vandeput
–
©
Cefis
2005
48
Publier
sur
le
Web
-
Perfectionnement
$a=5
;
tripler($a)
;
echo
$a
;
Il
existe
évidemment
de
très
nombreuses
fonctions
prédéfinies
en
Php
.

2.3.7
Expressions
L'
association
du
opérateurs
,
du
fonctions
,
du
variables
et
du
constantes
donne
naissance
à
des
expressions
.

On
peut
dire
de
une
expression
,
que
elle
a
une
valeur
de
un
certain
type
.

Dans
l'
exemple
qui
suit
,
l'
opérateur
%
désigne
le
reste
de
la
division
entière
de
…
par
…
<
?

php
$x=12
;
$y=$x%5
;
echo
$x
.
"

modulo
5
égale
"
.$y.".<br>
"
;
$x=($y=4)+5
;
echo
"
x
vaut
$x
et
y
vaut
$y
.
"
;
?

à
…donnera
à
12
modulo
5
égale
2
.

x
vaut
9
et
y
vaut
4
.

Comme
vous
pouvez
le
constater
,
Php
offre
les
facilités
de
écriture
du
langages
récents
.

2.3.8
Instructions
de
contrôle
Comme
la
plupart
du
langages
de
script
,
Php
offre
une
grande
variété
de
instructions
de
contrôle
et
une
grande
souplesse
de
écriture
.

2.3.8.1
L'
instruction
if
Pour
commencer
,
il
est
important
de
se
rendre
compte
que
des
variables
de
tous
types
peuvent
être
considérées
comme
des
expressions
booléennes
.

Ainsi
,
une
variable
çx
utilisée
dans
un
contexte
booléen
fournira
la
valeur
true
si
elle
ne
contient
ni
la
valeur
zéro
numérique
,
ni
la
chaîne
vide
,
ni
la
valeur
logique
false
et
que
elle
est
définie
.

Par
exemple
,
à
$x=1
;
ifçëxçë
echo
"
vrai
"
;
}
else{
echo
"
true
"
;
}
…affichera
vrai
.

si
l'
utilisation
du
accolades
n'
est
pas
nécessaire
,
elle
est
souhaitable
.

D'
autres
instructions
pourraient
venir
s'
ajouter
par
la
suite
.

Étienne
Vandeput
–
©
Cefis
2005
49
Publier
sur
le
Web
-
Perfectionnement
2.3.8.2
L'
instruction
if-elseif-else
L'
instruction
if-elseif-else
est
une
instruction
très
souple
qui
permet
de
effectuer
des
tests
de
natures
très
différentes
.

Elle
peut
comporter
autant
de
elseif
que
nécessaire
.

à
chaque
nouveau
test
,
comme
dans
le
bloc
else
,
on
ne
s'
intéresse
qu'
au
cas
restants
.

if($nombre%2){
echo
"
Nombre
impair
"
;
}
elseif($nombre%3){
echo
"
Nombre
non
divisible
par
3
"
;
}
else{
echo
"
Nombre
pair
,
multiple
de
3
"
;
}
2.3.8.3
L'
instruction
switch
L'
instruction
switch
est
une
alternative
à
la
construction
if-elseif-else
.

Elle
est
plus
souple
que
dans
d'
autres
langages
car
elle
accepte
d'
autres
valeurs
que
des
valeurs
entières
.

On
la
préfèrera
dans
les
cas
où
c'
est
toujours
la
même
expression
qui
doit
être
testée
.

switch($a){
case
(
$a>99
)
:
$b="excessif
"
;
break
;
case
(
$a>75
)
:
$b="élevé
"
;
break
;
case
(
$a>50
)
:
$b="normal
"
;
break
;
default
:
$b="faible
"
;
}
L'
instruction
break
évite
le
passage
au
autres
instructions
.

En
l'
absence
de
ces
instructions
,
une
valeur
de
ça
de
88
ferait
afficher
faible
et
non
élevé
.

2.3.8.4
L'
instruction
while
L'
instruction
while
est
la
plus
courante
du
instructions
de
boucles
.

Le
bloc
du
instructions
qu'
elle
encadre
est
exécuté
tant
que
la
condition
est
vérifiée
,
ce
qui
implique
que
celle
-ci
soit
évaluée
avant
le
parcours
de
la
boucle
.

while($a>50){
$a-=5
;
}
echo
$a
;
si
$a
possède
toujours
la
valeur
88
,
la
valeur
48
sera
affichée
.

Les
instructions
break
et
continue
permettent
respectivement
de
quitter
la
boucle
ou
de
interrompre
le
cycle
en
cours
pour
passer
au
cycle
suivant
.

2.3.8.5
L'
instruction
do…while
L'
instruction
do…while
permet
à
la
boucle
de
être
effectuée
au
moins
une
foi
.

La
condition
n'
est
en
effet
testée
qu'
en
fin
de
boucle
.

Étienne
Vandeput
–
©
Cefis
2005
50
Publier
sur
le
Web
-
Perfectionnement
Les
instructions
qui
suivent
font
afficher
les
dates
du
jours
qui
se
succèdent
de
aujourd'hui
jusque
au
premier
dimanche
de
mars
.

$jourCourant=time()
;
echo
"
<ol>\n
"
;
doë
echo
"
<li>".date("l
j
F",$jourCourant
)
.
"

"
.date("j",$jourCourant
)
.
"

"
.date("F",$jourCourant)."</li>\n
"
;
$jourCourant+=86400
;
}
while(date("l",$jourCourant)
!

="Sunday"||date("F",$jourCourant)
!

="March
"
)
;
echo
"
</ol>\n
"
;
La
fonction
time()
génère
une
estampille
(
le
moment
présent
exprimé
en
secondes
depuis
le
1er
janvier
1970
)
.

La
fonction
date()
a
comme
arguments
un
format
et
une
estampille
.

Pour
la
signification
du
formats
,
référez
vous
à
la
documentation
Php
.

Le
script
augmente
de
un
jour
le
moment
courant
avant
de
en
afficher
les
paramètres
dans
une
liste
numérotée
.

Notez
que
si
nous
étions
le
premier
dimanche
de
mars
,
le
script
afficherait
les
paramètres
de
365
jours
.

2.3.8.6
L'
instruction
for
L'
instruction
for
permet
de
faire
des
économies
de
écriture
dans
le
cas
où
le
nombre
de
passage
dans
la
boucle
est
déterminable
.

Voici
,
dans
ces
conditions
,
ce
que
devient
le
script
précédent
:
echo
"
<ol>\n
"
;
for(
$jourCourant=time()
;
date("l",$jourCourant)
!

="Sunday
"
||date("F",$jourCourant)
!

="March
"
;
$jourCourant+=86400
çù
echo
"
<li>".date("l
j
F",$jourCourant)."</li>\n
"
;
}
echo
"
</ol>\n
"
;
2.3.8.7
L'
instruction
foreach
L'
instruction
foreach
est
relative
au
tableaux
.

Nous
la
décrirons
au
moment
où
nous
détaillerons
davantage
ces
structures
intéressantes
.

2.4
Exercice
Un
formulaire
(
incomplet
)
se
présente
de
la
sorte
:
Étienne
Vandeput
à
à
Cefis
2005
51
Publier
sur
le
Web
-
Perfectionnement
Il
s'
agit
de
faire
en
sorte
que
le
choix
du
bouton
radio
à
Madame
à
introduise
les
modifications
graphiques
suivantes
:
On
ajoutera
que
les
différents
champs
doivent
se
vider
de
leur
contenu
dès
que
ils
reçoivent
le
focus
.

L'
idée
est
de
ajouter
un
attribut
événement
à
chacun
du
boutons
radios
en
y
associant
la
soumission
du
formulaire
avec
,
comme
action
,
un
script
de
reconstitution
du
formulaire
.

Un
premier
fichier
HTML
contiendra
le
formulaire
initial
.

Un
second
fichier
Php
contiendra
le
script
qui
reconstituera
une
nouvelle
page
avec
plus
ou
moins
de
champs
textes
selon
le
choix
.

<form
name="form1
"
method="post
"
action="transmis.php">
<p>
<label>
<input
name="sexe
"
type="radio
"
onClick="this.form.action='sexe.php
'
;
this.form.submit()
;
"
value="0
"
checked>
Monsieur</label>
<br>
<label>
<input
type="radio
"
name="sexe
"
value="1
"
onClick="this.form.action='sexe.php
'
;
this.form.submit()
;
"
>
Madame</label>
Coordonn&eacute
;
es
:
<input
name="textfield
"
type="text
"
class="gris
"
value="Nom
"
onFocus="this.value=
''
;
"
>
<input
name="Submit
"
type="submit
"
class="important1
"
value="Envoyer">
<br>
</p>
</form>
Étienne
Vandeput
–
à
Cefis
2005
52
Publier
sur
le
Web
-
Perfectionnement
Les
attributs
class
de
certains
éléments
traduisent
l'
utilisation
de
styles
personnalisés
.

Les
attributs
onFocus
servent
au
vidage
du
champs
.

Lorsqu'
un
du
boutons
est
sélectionné
,
l'
action
du
formulaire
est
changée
et
le
formulaire
est
soumis
en
invoquant
le
script
sexe.php
dont
le
code
suit
et
qui
va
reconstituer
un
nouveau
formulaire
.

<form
name="form1
"
method="post
"
action="transmis.php">
<p>
<label>
<input
name="sexe
"
type="radio
"
onClick="this.form.action='sexe.php
'
;
this.form.submit()
;
"
value="0
"
checked>
Monsieur</label>
<br>
<label>
<input
type="radio
"
name="sexe
"
value="1
"
<
?

php
$sexe=$_POST["sexe
"
]
;
Ifë-sexeëëëë
echo
"
checked
"
;
}
?

à
onClick="this.form.action='sexe.php
'
;
this.form.submit()
;
"
>
Madame</label>
</p>
<p>Coordonn&eacute
;
es
:
<
?

php
Ifë-sexeëëëë
echo
"
<input
name='njf
'
type='text
'
class='gris
'
value='Nom
de
jeune
fille
'
onFocus='this.value=\"\"'>\n
"
;
echo
"
<input
name='nfm
'
type='text
'
size='25
'
class='gris
'
value='Nom
de
femme
mariée
'
onFocus='this.value=\"\"'>\n
"
;
}
else{
echo
"
<input
name='nom
'
type='text
'
class='gris
'
value='nom
'
onFocus='this.value=\"\"'>\n
"
;
}
?

à
<input
name="Submit
"
type="submit
"
class="important1
"
value="Envoyer">
<br>
</p>
</form>
Le
code
php
de
ce
document
se
trouve
à
deux
endroits
.

Le
premier
morceau
de
code
sert
à
cocher
le
bouton
radio
correspondant
au
choix
à
Madame
»
dans
le
formulaire
reconstitué
.

Il
n'
est
pas
nécessaire
de
le
préciser
pour
l'
autre
choix
.

C'
est
le
premier
choix
qui
est
sélectionné
par
défaut
.

On
observera
que
le
code
est
inséré
à
l'
intérieur
même
de
la
définition
de
un
élément
,
ce
qui
montre
que
les
deux
langages
peuvent
être
intimement
mélangés
.

Le
deuxième
morceau
permet
la
création
du
deux
champs
ou
le
retour
à
un
seul
champ
avec
les
valeurs
par
défaut
nécessaires
.

au
niveau
syntaxique
,
vous
noterez
que
les
apostrophes
,
placés
à
l'
intérieur
du
guillemets
,
permettent
de
éviter
l'
échappement
de
ces
caractères
.

Toutefois
,
un
troisième
niveau
de
inclusion
,
pour
la
chaîne
de
caractères
vide
,
oblige
l'
échappement
de
certains
guillemets
.

Étienne
Vandeput
–
©
Cefis
2005
53
Publier
sur
le
Web
-
Perfectionnement
2.5
Les
tableaux
en
Php
Un
tableau
est
une
association
ordonnée
.

Une
association
est
un
type
qui
fait
correspondre
des
valeurs
à
des
clés
.

Ce
type
est
optimisé
de
diverses
façons
,
qui
font
que
on
peut
le
manipuler
de
diverses
manières
.

Comme
une
valeur
peut
elle-même
être
un
tableau
,
vous
pouvez
simuler
facilement
un
arbre
.

2.5.1
Créer
un
tableau
Les
éléments
de
un
tableau
peuvent
être
créés
à
la
volée
.

$monTableau[]="Pomme
"
;
$monTableau[]="Poire
"
;
$monTableau[]="Abricot
"
;
$monTableau[]="Cerise
"
;
$monTableau[]="Pêche
"
;
Dans
ce
cas
,
un
index
de
0
à
…
est
créé
.

Un
tableau
peut
également
être
créé
avec
la
fonction
array(
)
.

Cette
fonction
prend
en
argument
du
structures
key
=>
value
,
séparées
par
des
virgules
.

array(
[
key
=>
]
value
,
...
)
//
key
est
soit
une
chaîne
soit
un
entier
positif
//
value
peut
être
de
n'
importe
quel
type
(
y
compris
un
autre
tableau
)
En
voici
une
illustration
:
<
?

php
$table
=
array("nom
"
=>
"
Vandeput
"
,
10
çù
125
)
;
echo
$table["nom
"
]
;
//
affiche
Vandeput
echo
$table[10
]
;
//
affiche
125
?

à
Un
tableau
peut
être
multidimensionnel
:
$voitures=array(
"
allemandes
"
çù
array("opel
"
,
"
bmw
"
,
"
vw
"
,
"
mercedes
"
)
,
"
francaises
"
=>
array("peugeot
"
,
"
citroen
"
,
"
renault
"
)
,
"
italiennes
"
çù
array("alpha
romeo
"
,
"
fiat
"
)
)
;
echo
$voitures["francaises"][2
]
;
//
affichera
renault
On
constate
que
le
tableau
est
une
structure
de
données
relativement
souple
.

2.5.2
Fonctions
liées
au
tableaux
Voici
un
exemple
qui
illustre
quelques-unes
des
nombreuses
fonctions
prédéfinies
prenant
un
tableau
en
argument
.

Le
tableau
est
parcouru
du
début
à
la
fin
et
les
clés
sont
affichées
en
regard
du
valeurs
correspondantes
.

<
?

php
$coordonnees['nom']="Vandeput
"
;
Étienne
Vandeput
–
©
Cefis
2005
54
Publier
sur
le
Web
-
Perfectionnement
$coordonnees['prenom']="Étienne
"
;
$coordonnees['organisme']="CeFIS
"
;
for(reset($coordonnees)
;
$k=key($coordonnees)
;
next($coordonnees)){
$v=current($coordonnees)
;
echo
"
La
valeur
de
la
clé
<span
class='important2'>".$k."</span>
est
<span
class='important2'>".$v."</span><br>
"
;
}
?

à
Le
tableau
est
rempli
à
la
volée
.

La
boucle
for
fait
apparaître
les
trois
éléments
habituels
:
initialisation
,
condition
de
arrêt
,
évolution
du
variables
.

Examinons
-les
un
à
un
.

reset(coordonnees)
:
la
fonction
reset
place
le
pointeur
interne
sur
le
premier
élément
du
tableau
.

key(coordonnees)
:
la
fonction
key
fournit
la
clé
de
l'
élément
courant
.

En
bout
de
tableau
,
la
valeur
renvoyée
est
false
,
ce
qui
convient
comme
test
de
arrêt
.

next(coordonnees)
:
la
fonction
next
place
le
pointeur
interne
sur
l'
élément
suivant
si
il
existe
.

current(coordonnees)
:
la
fonction
current
renvoie
la
valeur
de
l'
élément
courant
.

2.6
Les
sessions
Dans
un
certain
nombre
de
cas
,
il
est
bon
que
l'
accès
au
page
Web
de
un
site
soit
réglementé
.

La
technique
consiste
généralement
à
demander
au
client
de
fournir
un
identificateur
et
un
mot
de
passe
.

Pour
éviter
le
stockage
en
clair
de
ce
mot
de
passe
dans
une
base
de
données
,
celui
-ci
peut
être
encrypté
.

L'
intérêt
de
une
session
réside
dans
la
production
de
variables
dont
l'
existence
servira
à
vérifier
que
l'
utilisateur
s'
est
identifié
correctement
.

Ces
variables
,
globales
en
Php4
,
évitent
notamment
de
devoir
véhiculer
certaines
valeurs
de
une
page
à
une
autre
du
site
.

Il
faut
distinguer
la
création
de
un
nouvel
utilisateur
de
son
authentification
.

Un
script
JavaScript
peut
aisément
traiter
ces
deux
options
au
moyen
de
boutons
radios
.

2.6.1
Création
de
un
nouvel
utilisateur
Lors
de
la
création
de
un
nouvel
utilisateur
,
on
veillera
particulièrement
à
vérifier
l'
unicité
de
l'
identificateur
et
aura
soin
de
encrypter
le
mot
de
passe
avant
de
le
stocker
dans
la
base
de
données
.

On
utilisera
deux
fichiers
.

Le
premier
permettra
de
saisir
les
informations
provenant
de
l'
utilisateur
,
le
second
,
de
préparer
et
de
stocker
ces
informations
dans
la
base
de
données
(
voir
la
section
consacrée
à
MySQL
)
.

On
en
profitera
aussi
pour
définir
des
variables
de
session
qu'
il
ne
sera
plus
nécessaire
de
véhiculer
de
une
page
à
l'
autre
.

Théoriquement
,
il
faut
également
veiller
à
connecter
l'
utilisateur
au
site
.

2.6.2
Authentification
de
un
utilisateur
Le
processus
de
authentification
consiste
à
vérifier
que
l'
identificateur
et
le
mot
de
passe
encrypté
concordent
.

Cela
passe
évidemment
par
un
accès
à
la
base
de
données
.

Ici
aussi
,
on
en
profitera
pour
définir
les
variables
de
session
nécessaires
et
on
connectera
l'
utilisateur
au
site
.

2.6.3
Identificateur
de
session
Le
principe
est
que
chaque
utilisateur
reçoit
un
numéro
unique
identifiant
sa
session
et
appelé
à
session
Id
»
.

Sa
création
est
liée
au
démarrage
de
la
session
provoquée
par
la
fonction
session_start(
)
.

Le
but
de
cette
fonction
est
soit
de
créer
une
session
,
si
l'
utilisateur
ne
s'
est
pas
encore
connecté
,
soit
de
restaurer
Étienne
Vandeput
–
©
Cefis
2005
55
Publier
sur
le
Web
-
Perfectionnement
une
session
trouvée
sur
le
serveur
grâce
à
ce
à
session
Id
»
.

Dans
ce
cas
,
ce
dernier
est
fourni
,
soit
par
un
cookie
ou
via
une
requête
GET
ou
POST
.

Le
fait
que
certains
clients
refusent
les
cookies
ne
parle
toutefois
pas
en
faveur
de
cette
solution
toutefois
très
souple
.

Le
«
session
Id
»
peut
être
aisément
propagé
,
à
travers
les
URL
,
grâce
à
la
constante
Sid
qui
le
contient
.

<a
href="autrePage.php
?

<
?

php
echo
Sid
;
?

>">Autre
page</a>
Grâce
à
l'
identifiant
de
session
,
Php
peut
retrouver
toutes
les
variables
associées
à
cette
session
.

2.7
Les
inclusions
de
fichiers
Afin
de
modéliser
les
page
de
un
site
,
il
est
utile
de
récupérer
des
parties
entières
de
code
.

php
fournit
,
avec
la
fonction
include()
,
l'
opportunité
de
inclure
dans
un
fichier
le
code
de
certains
autres
fichiers
.

Il
existe
une
autre
fonction
qui
est
la
fonction
require(
)
.

Dans
ce
dernier
cas
,
l'
absence
du
fichier
provoque
l'
interruption
de
l'
exécution
pour
cause
de
erreur
fatale
.

à
titre
de
exemple
,
on
peut
faire
en
sorte
que
l'
exécution
de
un
fichier
produise
l'
entête
du
page
et
l'
exécution
de
un
autre
,
le
pied-de-page
.

Voici
le
code
du
fichier
entete.php
.

<html>
<head>
<title>Document
sans
titre</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
<style
type="text/css">
<
!

-.grand
à
font-size
:
24px
;
color
:
#999999
;
}
--
>
</style>
<style
type="text/css">
<
!

-.blanc
à
color
:
Fffffff
;
}
td
{
padding
:
5px
;
}
--
>
</style>
</head>
Étienne
Vandeput
à
à
Cefis
2005
56
Publier
sur
le
Web
-
Perfectionnement
<body>
<table
width="555
"
height="113
"
border="1
"
cellpadding="10
"
cellspacing="0
"
bordercolor="#FF8888
"
bgcolor="#FFDFD5
"
class="grand">
<tr>
<td
height="109">
<div
align="center"><img
src="../images/cathedrale.jpg
"
width="112
"
height="89
"
align="left"><span
class="grand">D&eacute
;
partement
&Eacute
;
ducation
et
Technologie</span></div>
</td>
</tr>
</table>
Le
fichier
contient
les
instructions
de
entête
habituelles
de
un
fichier
HTML
.

On
y
trouve
également
quelques
définitions
de
styles
propres
à
ce
fichier
.

Notez
que
les
styles
seront
disponibles
au
niveau
de
tous
les
fichiers
qui
incluront
celui
-ci
.

L'
élément
<body>
est
ouvert
dans
ce
fichier
et
sera
fermé
dans
le
fichier
pied-de-page
.

Les
autres
instructions
sont
celles
de
la
définition
de
un
tableau
.

Voilà
celui
du
fichier
de
pieddepage.php
.

<table
width="555
"
border="1
"
cellpadding="10
"
cellspacing="0
"
bordercolor="#FF8888
"
bgcolor="#FFDFD5">
<tr>
<td><a
href="mailto:webmaster@det.fundp.ac.be">Contacter</a>
<span
class="gris">
le
Webmaster</span></td>
</tr>
</table>
</body>
</html>
On
y
trouve
la
définition
de
un
autre
tableau
.

Notez
que
il
n'
était
pas
nécessaire
de
clôturer
le
tableau
dans
le
fichier
de
entête
.

On
pouvait
en
continuer
la
définition
dans
les
autres
fichiers
.

Le
style
gris
est
utilisé
.

Il
est
défini
grâce
au
fichier
précédent
.

On
bénéficie
aussi
d'
autres
définitions
de
styles
pour
la
mise
en
forme
du
liens
.

Celui
qui
inclut
les
deux
autres
ne
contient
rien
du
balises
de
début
et
de
fin
de
un
fichier
HTML
classique
.

En
voici
le
code
:
<
?

php
include('entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">Ceci
est
une
page
incluant
un
ent&ecirc
;
te
et
un
pied
de
page
.

</td>
</tr>
</table>
<
?

php
include('pieddepage.php')
;
?

>
Il
s'
agit
à
nouveau
de
la
définition
de
un
tableau
de
une
seule
cellule
.

On
remarque
la
première
et
la
dernière
instructions
qui
sont
des
instructions
Php
de
inclusion
de
fichiers
.

Et
voici
le
résultat
à
l'
affichage
:
Étienne
Vandeput
à
©
Cefis
2005
57
Publier
sur
le
Web
-
Perfectionnement
2.8
Exercice
Il
s'
agit
de
réaliser
un
entête
(
entete.php
)
et
un
pied
de
page
(
pieddepage.php
)
qui
serviront
de
modèles
pour
les
page
de
un
site
.

Une
première
page
de
ce
site
(
login.php
)
permettra
de
choisir
,
soit
de
s'
y
connecter
,
soit
de
se
constituer
en
tant
que
nouvel
utilisateur
.

Dans
ce
cas
,
on
demandera
quelques
informations
(
formulaire.php
)
:
nom
,
prénom
,
adresse
à
Les
informations
reçues
seront
stockées
dans
une
base
de
données
et
l'
utilisateur
sera
connecté
au
site
(
enregistrer.php
)
.

Pour
ce
faire
,
un
message
indiquant
que
les
données
ont
été
enregistrées
suffira
.

Auparavant
,
les
données
seront
préparées
:
le
mot
de
passe
encrypté
,
le
nom
transformé
en
majuscules
,
les
blancs
inutiles
détruits
à
Dans
le
cas
de
une
connexion
immédiate
(
connexion.php
)
,
un
message
annoncera
que
l'
utilisateur
est
bien
connecté
au
site
.

Toutes
les
page
auront
le
même
aspect
général
grâce
au
fichiers
inclus
.

Les
opérations
de
connexion
à
la
Bd
,
de
vérification
du
mots
de
passe
,
de
enregistrement
ne
seront
évidemment
pas
programmées
à
ce
stade
du
connaissances
développées
.

Étienne
Vandeput
–
©
Cefis
2005
58
Publier
sur
le
Web
-
Perfectionnement
3
.

MySQL
3.1
L'
association
entre
MySQL
et
Php
MySQL
est
un
système
de
gestion
de
base
de
données
relationnelles
basé
sur
le
langage
de
interrogation
SQL
(
Structured
Query
Language
)
.

C'
est
un
du
derniers
logiciels
open
source
de
cette
catégorie
apparu
sur
le
marché
(
si
ce
terme
a
du
sens
)
.

Développé
à
partir
de
un
autre
SGBD
portant
le
nom
de
mSQL
,
il
possède
de
nombreuses
qualités
et
notamment
celle
de
être
portable
,
en
ce
sens
qu'
il
s'
exécute
sur
à
peu
près
tous
les
systèmes
de
exploitation
et
tous
les
types
de
matériel
.

Comme
tous
les
Sgbd
,
MySQL
permet
de
créer
et
de
gérer
des
base
de
données
.

Dans
le
contexte
qui
nous
intéresse
,
un
langage
comme
Php
est
capable
de
prendre
en
compte
les
commandes
de
MySQL
et
donc
de
interroger
des
base
de
données
créées
avec
ce
Sgbd
.

La
communication
de
l'
un
à
l'
autre
se
fait
de
manière
souple
.

Nous
en
donnons
ci-dessous
une
illustration
.

Voici
une
requête
telle
que
on
peut
l'
effectuer
sous
MySQL
:
SELECT
upper(nom),prenom,login
FROM
inscrits
WHERE
choix='C
'
ORDER
By
nom
;
Cette
requête
sélectionne
les
valeurs
du
colonnes22
nom
et
prenom
dans
une
table
s'
appelant
inscrits
,
pour
autant
que
la
colonne
choix
contienne
la
valeur
C
,
et
en
ordonne
les
résultats
par
ordre
alphabétique
du
valeurs
trouvées
dans
la
colonne
nom
.

MySQL
produira
un
résultat
sous
la
forme
de
un
affichage
en
mettant
la
valeur
de
la
colonne
nom
en
majuscules
.

La
même
requête
,
effectuée
via
un
script
Php
s'
écrira
:
22
Les
notions
de
tables
et
de
colonnes
sont
les
termes
propres
à
utiliser
.

Ils
sont
définis
dans
la
suite
du
chapitre
.

Étienne
Vandeput
–
©
Cefis
2005
59
Publier
sur
le
Web
-
Perfectionnement
$sqlquery="SELECT
upper(nom),prenom
FROM
inscrits
WHERE
choix='C
'
ORDER
By
nom
"
;
$queryresult=mysql_query($sqlquery)
or
die
(
"
<p>La
requête
a
échoué.</p>
"
)
;
Comme
on
peut
le
constater
,
la
requête
est
fournie
sous
forme
de
une
chaîne
de
caractères
(
stockée
préalablement
,
ici
,
dans
une
variable
$sqlquery
)
.

Syntaxiquement
parlant
,
le
point-virgule
,
nécessaire
en
MySQL
,
est
omis
dans
la
chaîne
de
caractères
.

Un
point-virgule
termine
toutefois
l'
instruction
Php
.

La
fonction
mysql_query
prend
cette
chaîne
de
caractère
en
argument
et
renvoie
le
résultat
de
la
requête
dans
une
variable
tableau
(
$queryresult
dans
cet
exemple
)
,
dont
le
script
pourra
exploiter
le
contenu
à
sa
convenance
.

3.2
La
conception
de
une
base
de
données
La
conception
de
une
base
de
données
s'
appuie
généralement
sur
la
réalisation
de
un
schéma
décrivant
de
manière
statique
la
réalité
que
l'
on
veut
prendre
en
compte
.

Pour
un
de
ces
schémas
que
nous
décrivons
,
la
démarche
consiste
à
isoler
des
entités
et
à
les
associer
.

C'
est
la
raison
pour
laquelle
on
parle
généralement
de
schéma
entités-relations-associations
ou
schéma
ERA
.

La
réalisation
de
ces
schémas
ne
va
pas
de
soi
.

Nous
nous
contentons
ici
de
décrire
les
notions
principales
et
leur
représentation
.

Nous
ne
nous
attardons
pas
sur
les
stratégies
(
notamment
les
différentes
formes
de
normalisation
du
relations
)
et
les
méthodes
de
conception
du
base
de
données
.

3.2.1
Schémas
ERA
Formé
id
nom
prenom
à
Formation
participe
0-N
est
suivie
par
Participer
0-N
id
titre
nbrinscrits
…
est
assurée
par
1-1
Assurer
assure
1-N
Formateur
Un
schéma
ERA
identifie
donc
des
entités
.

L'
identification
de
ces
entités
est
réalisée
,
soit
au
travers
de
interviews
de
personnes
occupées
dans
le
domaine
,
soit
de
documents
décrivant
les
activités
.

Par
exemple
,
l'
interview
du
directeur
du
Cefis
pourrait
fournir
des
renseignements
à
propos
du
formations
organisées
,
du
personnes
qui
les
organisent
ou
en
sont
responsables
,
des
participants
,
etc
.

de
cette
interview
,
pourraient
émerger
des
entités
telles
:
formation
,
formateur
,
formé
,
ouvrage
(
de
référence
)
,
local
,
à
En
principe
,
la
description
s'
arrête
là
ou
la
gestion
s'
arrête
.

si
,
dans
le
problème
de
la
gestion
du
formations
du
Cefis
,
l'
attribution
du
locaux
n'
est
pas
un
problème
,
la
notion
de
local
ne
sera
pas
prise
en
compte
,
ou
en
tous
cas
pas
comme
entité
à
gérer
.

id
nom
à
Les
entités
sont
qualifiées
par
des
attributs
qui
les
caractérisent
.

Pour
être
identifiée
,
une
entité
doit
avoir
un
identifiant
.

La
nature
de
un
identifiant
peut
être
variée
.

L'
identifiant
est
souvent
un
simple
attribut
.

Il
est
qualifié
de
naturel
si
l'
information
permet
de
identifier
naturellement
l'
enregistrement
(
le
nom
de
un
pays
,
par
exemple
)
.

Il
est
souvent
construit
automatiquement
(
numéro
de
enregistrement
)
ou
non
(
matricule
,
ISBN
,
…
)
.

Il
peut
être
multiple
(
le
code
postal
et
la
localité
pour
identifier
une
ville
ou
un
village
)
.

3.2.2
Entités
,
associations
,
attributs
,
rôles
et
cardinalités
Dans
un
schéma
ERA
,
les
entités
sont
reliées
entre
elles
par
des
associations
.

Les
associations
peuvent
être
décrites
par
des
verbes
.

Dans
le
schéma
précédent
,
participer
,
assurer
sont
des
associations
.

Étienne
Vandeput
–
©
Cefis
2005
60
Publier
sur
le
Web
-
Perfectionnement
Chaque
entité
possède
des
attributs
.

Une
association
peut
en
posséder
aussi
.

Un
attribut
est
une
propriété
qui
ne
doit
pas
être
considérée
comme
une
entité
dans
le
problème
traité
.

Ainsi
,
par
exemple
,
le
formé
pourrait
faire
partie
de
une
institution
.

si
la
base
de
données
est
conçue
de
manière
à
prendre
en
compte
du
traitements
spécifiques
sur
les
institutions
,
celles
-ci
doivent
être
considérées
comme
des
entités
.

Sinon
,
l'
institution
peut
être
considérée
comme
un
attribut
du
formé
.

Chaque
entité
joue
un
rôle
dans
une
association
.

Le
formateur
assure
la
formation
,
alors
que
la
formation
est
assurée
par
le
formateur
.

Le
nombre
de
entités
pouvant
jouer
le
même
rôle
est
appelé
cardinalité
.

Dans
l'
exemple
qui
précède
,
le
formé
est
inscrit
à
un
nombre
de
formations
variant
entre
0
et
NS
On
pourrait
s'
étonner
de
trouver
le
nombre
0
et
pas
1
.

Dans
un
contexte
où
le
formé
est
connu
du
système
,
pour
avoir
participé
certaines
années
à
des
formations
,
cela
a
du
sens
.

Une
formation
est
assurée
par
un
et
un
seul
formateur
qui
,
dans
l'
exemple
,
donne
au
moins
une
formation
.

Formé
Institution
id
nom
prenom
tel
à
travaille
1-N
id
nom
adresse
tel
…
a
engagé
Travailler
tel
1-N
La
présence
de
un
attribut
tel
dans
chacun
du
éléments
(
entités
et
association
)
de
ce
schéma
n'
est
pas
contradictoire
.

Le
téléphone
du
formé
est
son
privé
.

Il
y
a
celui
de
l'
institution
et
celui
de
son
lieu
de
travail
(
bureau
)
.

3.2.3
Transformation
en
tables
Très
concrètement
,
les
entités
et
les
associations
qui
vont
subsister
dans
le
schéma
final
vont
être
transformées
en
tables
.

Une
table
est
tout
simplement
un
ensemble
de
lignes
et/ou
de
colonnes
.

Chaque
ligne
correspond
à
un
enregistrement
,
chaque
colonne
à
une
information
à
propos
de
cet
enregistrement
.

Tous
les
enregistrements
de
une
même
table
sont
évidemment
caractérisés
de
la
même
manière
.

à
l'
intersection
de
une
ligne
et
de
une
colonne
,
on
trouve
une
information
qui
,
comme
nous
le
verrons
plus
loin
,
est
de
un
certain
type
.

La
transformation
s'
effectue
de
la
manière
suivante
.

Pour
des
relations
1
à
1
:
E2
E1
id1
…
à
0-1
0-1
E1
id1
id2
…
id2
E1
ou
id1
E2
id2
E2
id2
id1
Les
deux
entités
donnent
naissance
à
deux
tables
et
l'
association
disparaît
.

L'
identifiant
de
une
du
deux
entités
sert
de
lien
entre
les
deux
tables
.

On
parle
de
clé
étrangère
car
elle
identifie
les
éléments
de
une
autre
table
.

Pour
des
relations
1
à
NS
:
Formateur
Formation
id1
à
Assurer
1-1
Étienne
Vandeput
–
©
Cefis
2005
1-N
id2
à
Formation
id1
id2
Formateur
id2
61
Publier
sur
le
Web
-
Perfectionnement
Les
deux
entités
donnent
naissance
à
deux
tables
et
l'
association
disparaît
.

L'
identifiant
de
l'
entité
côté
1
sert
de
clé
étrangère
pour
l'
entité
côté
NS
Pour
des
relations
N
à
NS
:
Les
deux
entités
donnent
naissance
à
deux
tables
et
l'
association
à
une
troisième
.

Les
identifiants
du
deux
entités
se
retrouvent
dans
la
table
correspondant
à
l'
association
.

Formation
Formé
id1
à
Participer
NS
0-N
id2
à
Formation
id1
Formé
id2
Participer
id1
id2
3.2.4
Associations
ternaires
Il
existe
des
relations
plus
complexes
que
les
relations
binaires
.

En
voici
un
exemple
.

Fournisseur
0-N
Commande
nocomm
à
nofourn
à
0-N
Assigner
Quantité
Proposer
1-N
0-N
0-N
Produit
noprod
à
Le
fournisseur
propose
de
0
à
NS
produits
.

Un
produit
est
proposé
par
0
à
NS
fournisseurs
.

Une
commande
est
assignée
à
un
fournisseur
pour
une
certaine
quantité
de
un
produit
.

3.2.5
Clés
étrangères
Lorsqu'
un
schéma
ERA
est
établi
,
il
peut
donc
être
converti
en
une
série
de
tables
.

Les
relations
entre
ces
tables
dépendent
du
identifiants
de
chacune
de
entre
elles
.

Un
identifiant
de
une
table
présent
dans
une
autre
table
est
appelé
clé
étrangère
.

Ce
sont
les
clés
étrangères
qui
permettent
de
relier
les
informations
entre
elles
.

Les
Sgbd
sont
censés
gérer
correctement
les
clés
étrangères
et
donc
,
notamment
,
les
mise
à
jour
,
les
insertions
,
les
suppressions
.

Par
exemple
,
si
dans
une
table
notes
contenant
les
notes
du
étudiants
,
chaque
enregistrement
contient
l'
identifiant
de
l'
étudiant
etud_id
,
par
exemple
,
la
suppression
de
un
étudiant
dans
la
table
etudiants
(
dont
l'
identifiant
est
etud_id
)
devrait
entraîner
automatiquement
la
suppression
de
toutes
les
notes
de
cet
étudiant
.

Ce
n'
est
malheureusement
pas
le
cas
avec
MySQL
,
le
choix
de
implémentation
s'
étant
focalisé
sur
la
vitesse
de
traitement
,
déterminante
sur
Internet
.

Cette
gestion
doit
donc
être
prise
en
compte
par
le
programmeur
Php
.

Étienne
Vandeput
–
©
Cefis
2005
62
Publier
sur
le
Web
-
Perfectionnement
3.3
Les
tables
et
leurs
contenus
3.3.1
Structure
de
une
table
Avant
de
préciser
le
contenu
de
une
table
,
il
convient
de
en
définir
la
structure
,
à
savoir
le
nom
du
colonnes
,
le
type
de
information
qu'
elles
vont
contenir
et
leur
statut
éventuel
(
identifiant
,
jamais
vide
,
unique
,
…
)
.

Ce
tableau
reprend
le
nom
du
colonnes
,
le
type
de
information
contenue
(
voir
plus
loin
pour
une
description
plus
complète
)
,
une
indication
qui
précise
si
le
champ
peut
être
vide
(
dans
l'
exemple
,
le
prénom
peut
l'
être
)
,
une
autre
qui
précise
si
le
champ
fait
partie
de
l'
identifiant
(
voir
paragraphe
suivant
)
,
la
valeur
par
défaut
si
il
y
en
a
une
et
une
information
supplémentaire
(
qui
précise
,
dans
ce
cas
,
que
la
valeur
du
champ
est
incrémentée
de
manière
automatique
)
.

Plus
de
détails
seront
donnés
par
la
suite
à
propos
du
différentes
options
possibles
.

3.3.2
Types
de
informations
Les
types
de
informations
disponibles
sont
assez
nombreux
.

Les
types
généraux
sont
évidemment
:
numérique
,
chaîne
de
caractères
et
date/heure
mais
ils
se
déclinent
en
de
multiples
sous-types
.

3.3.2.1
Les
types
numériques
Les
types
possibles
sont
repris
dans
le
tableau
ci-dessous
:
Nom
du
type
Espace
requis
Signé
Non
signé
TINYINT[(M)
]
1
octet
-27
à
27-1
0
à
28-1
SMALLINT[(M)
]
2
octets
-215
à
215-1
0
à
216-1
MEDIUMINT[(M)
]
3
octets
-223
à
223-1
0
à
224-1
INT[(M)
]
4
octets
-231
à
231-1
0
à
232-1
BIGINT[(M)
]
8
octets
-263
à
263-1
0
à
264-1
Espace
requis
Minimum
Maximum
FLOAT[(M,D)
]
4
octets
±1,17E-38
±3,40E+38
DOUBLE[(M,D)
]
8
octets
±2,23E-308
±1,80E-308
DECIMAL(M,D)
M+2
octets
texte
texte
Nom
du
type
Les
valeurs
m
et
D
sont
optionnelles
,
sauf
pour
le
type
DECIMAL
et
servent
à
gérer
l'
affichage
.

Par
exemple
,
DECIMAL(4,2)
permet
de
coder
les
nombre
de
-99.99
à
999,99
.

Étienne
Vandeput
–
©
Cefis
2005
63
Publier
sur
le
Web
-
Perfectionnement
C'
est
un
attribut
particulier
UNSIGNED
qui
permet
de
déclarer
les
entiers
signés
ou
non
.

de
même
,
l'
attribut
ZEROFILL
permet
de
ajouter
des
zéros
à
l'
affichage
pour
atteindre
la
valeur
maximum
autorisée
.

3.3.2.2
Les
types
chaînes
de
caractères
Les
types
possibles
sont
repris
dans
le
tableau
ci-dessous
:
Nom
du
type
Espace
requis
Taille
maximale
m
octets
m
octets
VARCHAR(M)
L+1
octets
m
octets
TINYBLOB
,
TINYTEXT
L+1
octets
28-1
octets
BLOB
,
TEXT
L+2
octets
216-1
octets
MEDIUMBLOB
,
MEDIUMTEXT
L+3
octets
224-1
octets
LONGBLOB
,
LONGTEXT
L+4
octets
232-1
octets
ENUM("val1","val2",…)
1
ou
2
octets
65.535
valeurs
SET("val1","val2",…)
1
,
2
,
3
,
4
ou
8
octets
64
valeurs
CHAR(M)
L
est
la
longueur
de
la
chaîne
.

Sa
valeur
est
stockée
dans
les
octets
supplémentaires
(
1
à
4
selon
cette
longueur
)
.

Les
valeurs
de
type
ENUM
sont
stockées
comme
des
nombres
(
leur
numéro
de
ordre
)
,
ce
qui
a
pour
effet
de
diminuer
considérablement
leur
taille
(
2
octets
suffisent
pour
encoder
65.535
valeurs
)
.

Chaque
valeur
de
un
type
SET
est
codée
avec
un
seul
bit
à
1
.

Ainsi
,
si
il
y
a
au
plus
4
valeurs
,
elles
seront
codées
0001
,
0010
,
0100
et
1000
,
de
sorte
que
si
un
du
enregistrements
prend
la
première
et
la
troisième
de
ces
valeurs
,
l'
information
codée
soit
0101
.

Pour
64
valeurs
,
il
faut
donc
au
plus
8
octets
.

Il
faut
encore
noter
que
si
une
colonne
est
de
type
VARCHAR
,
toutes
les
autres
colonnes
de
type
CHAR
le
deviendront
aussi
.

3.3.2.3
Les
types
dates
et
heures
Les
types
possibles
sont
repris
dans
le
tableau
ci-dessous
:
Nom
du
type
Espace
requis
Intervalle
DATE
3
octets
"
1000-01-01
"
à
"
9999-12-31
"
Time
3
octets
"
-838:59:59
"
à
"
838:59:59
"
DATETIME
8
octets
"
1000-01-01
00:00:00
"
à
"
9999-12-31
00:00:00
"
TIMESTAMP[(M)
]
4
octets
19700101000000
à
2037
…
YEAR[(M)
]
1
octet
1901
à
2155
Comme
vous
pouvez
le
constater
,
les
dates
commencent
toujours
par
l'
année
,
suivie
du
mois
et
du
jour
.

La
valeur
par
défaut
de
TIMESTAMP
correspond
à
la
date
et
l'
heure
du
serveur
dans
son
propre
fuseau
horaire
.

Étienne
Vandeput
–
©
Cefis
2005
64
Publier
sur
le
Web
-
Perfectionnement
3.4
Les
primitives
de
gestion
de
une
base
de
données
3.4.1
Accès
à
une
Bd
et
à
ses
tables
3.4.1.1
Connexion
à
MySQL
En
ligne
de
commande
,
vous
devez
préciser
le
nom
de
l'
hôte
,
le
nom
de
utilisateur
et
le
mot
de
passe
.

C:\Program
Files\EasyPHP1-7\mysql\bin
à
mysql
h
localhost
u
root
p-
si
le
serveur
se
trouve
sur
la
machine
locale
,
le
premier
paramètre
n'
est
pas
obligatoire
.

Par
défaut
,
le
seul
utilisateur
reconnu
par
mysql
est
root
et
il
ne
faut
pas
fournir
de
mot
de
passe
.

L'
instruction
suivante
convient
donc
:
C:\Program
Files\EasyPHP1-7\mysql\bin>
mysql
u
root
ou
encore
C:\Program
Files\EasyPHP1-7\mysql\bin>
mysql
à
uroot
Une
du
premières
démarches
à
effectuer
,
si
MySQL
n'
est
pas
installé
localement
,
c'
est
de
le
sécuriser
.

L'
application
PHPMyAdmin
dont
il
est
question
dans
le
paragraphe
suivant
,
permet
de
effectuer
cette
opération
en
remplaçant
,
par
exemple
,
l'
utilisateur
root
par
un
utilisateur
administrateur
qui
devra
fournir
un
mot
de
passe
.

L'
administrateur
pourra
alors
définir
d'
autres
utilisateurs
et
décider
finement
de
leurs
privilèges
.

Les
opérations
dont
il
vient
de
être
question
sont
toutefois
à
réaliser
avec
prudence
pour
éviter
de
perdre
l'
accès
au
serveurs
.

Il
est
conseillé
de
rechercher
un
peu
de
documentation
sur
Internet
à
ce
propos23
,
avant
de
se
lancer
dans
l'
aventure
.

Toutefois
,
la
désinstallation
et
la
réinstallation
de
EasyPHP
sont
rapides
,
ce
qui
relativise
le
danger
.

3.4.1.2
Déconnexion
de
MySQL
Pour
se
déconnecter
de
MySQL
,
on
utilise
la
commande
quit
.

mysql>
quit
Il
faut
noter
que
les
commandes
sont
insensibles
à
la
casse
,
sauf
en
ce
qui
concerne
le
nom
du
base
de
données
et
les
tables
.

3.4.1.3
Informations
sur
les
bd
existantes
On
peut
obtenir
la
liste
du
base
de
données
par
la
commande
mysql>
show
databases
;
Toutes
les
commandes
fournies
en
ligne
de
commande
doivent
se
terminer
par
le
point-virgule
,
une
instruction
pouvant
s'
étendre
sur
plusieurs
lignes
.

Il
convient
alors
de
sélectionner
une
base
de
données
pour
y
travailler
.

Cette
opération
est
réalisée
grâce
à
la
commande
use
.

mysql>
use
exemple
;
La
base
de
données
est
alors
accessible
et
vous
pouvez
vous
inquiéter
du
23
…comme
au
adresses
http://www.wampserver.com/faq4.php
ou
http://linuxeduquebec.org/article.php3
?

id_article=4
Étienne
Vandeput
–
à
Cefis
2005
65
Publier
sur
le
Web
-
Perfectionnement
tables
qui
la
composent
en
vous
servant
de
la
commande
show
tables
.

mysql>
show
tables
;
La
liste
du
tables
constituant
la
base
de
données
est
affichée
.

Dans
l'
exemple
ci-contre
,
on
constate
que
il
n'
y
a
qu'
une
seule
table
appelée
users
dans
la
base
de
données
.

La
structure
de
une
table
(
nom
du
colonnes
,
types
et
autres
attributs
)
peut
être
obtenue
grâce
à
la
commande
describe
.

Ce
résultat
peut
également
être
obtenu
avec
la
commande
show
columns
from
.

mysql>
describe
users
;
La
commande
select
database()
permet
de
connaître
la
base
de
données
active
.

mysql>
select
database()
;
Voilà
donc
un
aperçu
du
commandes
qui
permettent
de
obtenir
les
renseignements
souhaités
à
propos
du
base
de
données
existantes
.

Il
n'
est
évidemment
pas
encore
question
,
à
ce
stade
,
de
interroger
les
base
de
données
,
de
effectuer
des
requêtes
sur
le
contenu
.

3.4.2
Création
et
gestion
du
contenu
de
une
Bd
3.4.2.1
Création
de
une
base
de
données
La
création
de
une
base
de
données
implique
évidemment
que
celle
-ci
ait
été
complètement
décrite
au
niveau
conceptuel
(
schéma
ERA
)
et
au
niveau
logique
(
transformation
en
tables
)
.

Elle
commence
par
l'
instruction
create
database
.

mysql>
create
database
formations
;
Cette
commande
devra
être
suivie
de
la
création
du
différentes
tables
:
définition
de
leur
structure
(
définition
du
colonnes
)
et
encodage
de
leurs
enregistrements
(
lignes
)
.

La
règle
de
attribution
du
noms
permet
de
utiliser
les
lettres
,
les
chiffres
et
les
caractères
$
(
déconseillé
,
on
s'
en
doute
,
à
cause
de
Php
)
et
_
.

Un
nom
ne
peut
se
composer
uniquement
de
chiffres
.

3.4.2.2
Suppression
de
une
base
de
données
La
suppression
de
une
base
de
données
se
fera
par
l'
instruction
drop
.

mysql>
drop
database
formations
;
Il
est
clair
que
la
suppression
de
une
base
de
données
entraîne
la
suppression
de
toutes
les
tables
et
de
tous
les
enregistrements
qu'
elle
contient
.

Voici
pour
suivre
,
une
séquence
qui
illustre
ces
deux
commandes
ainsi
que
leurs
effets
.

Étienne
Vandeput
–
©
Cefis
2005
66
Publier
sur
le
Web
-
Perfectionnement
3.4.2.3
Création
de
une
table
Une
table
est
créée
au
moyen
de
l'
instruction
create
table
.

Cette
instruction
qui
permet
de
nommer
la
table
s'
accompagne
de
la
description
du
colonnes
,
de
leur
type
et
de
leurs
attributs
éventuels
.

Elle
s'
écrit
généralement
sur
plusieurs
lignes
pour
plus
de
lisibilité24
.

24
La
plupart
du
instructions
nécessitent
une
syntaxe
(
trop
)
rigoureuse
.

C'
est
pourquoi
il
existe
des
applications
permettant
de
en
générer
le
code
via
des
interfaces
graphiques
.

Nous
en
décrivons
une
plus
loin
dans
ce
chapitre
.

Étienne
Vandeput
–
©
Cefis
2005
67
Publier
sur
le
Web
-
Perfectionnement
La
colonne
login
est
une
colonne
identifiante
(
primary
key
)
.

Les
colonnes
prenom
et
statut
peuvent
ne
pas
contenir
de
valeurs
contrairement
au
colonnes
login
,
password
et
nom
.

Il
est
possible
de
garnir
rapidement
une
table
pour
autant
que
ses
données
se
trouvent
dans
un
fichier
,
grâce
à
l'
instruction
load
data
.

Par
exemple
,
il
est
possible
de
créer
un
fichier
texte
à
partir
de
Excel
et
de
le
récupérer
.

Ce
fichier
étant
enregistré
au
format
texte
sous
le
nom
membres.txt
et
sauvegardé
dans
le
même
répertoire
que
la
base
de
données
exemples
,
on
aura
:
3.4.2.4
Suppression
de
une
table
Une
table
est
supprimée
au
moyen
de
l'
instruction
drop
table
.

mysql>
drop
table
users
;
La
suppression
de
la
table
users
s'
accompagne
,
comme
le
montre
le
résultat
de
la
commande
describe
,
de
la
suppression
de
sa
structure
.

3.4.2.5
Modification
de
une
table
Par
modification
de
une
table
,
on
entend
évidemment
une
modification
de
sa
structure
.

De
nombreux
changements
peuvent
être
opérés
.

Nous
en
évoquons
quelques-uns
.

C'
est
la
commande
alter
table
qui
permet
ces
modifications
.

Elle
est
suivie
du
nom
deësà
l'
action(s)
et
de
sa
(
leur
)
description(s
)
.

Parmi
les
actions
,
on
trouve
:
add
,
alter
,
drop
,
change
,
modify
,
rename
as
(
ou
to
)
,
…
Étienne
Vandeput
–
à
Cefis
2005
68
Publier
sur
le
Web
-
Perfectionnement
si
on
souhaite
ajouter
une
colonne
depuis
qui
contiendra
l'
année
de
entrée
en
service
,
on
procèdera
comme
suit
:
mysql>
alter
table
users
add
(
depuis
varchar(4))
;
Pour
supprimer
la
colonne
depuis
,
on
utilisera
l'
action
drop
:
mysql>
alter
table
users
drop
depuis
;
Avec
l'
action
add
,
les
options
first
ou
after
suivi
du
nom
de
une
colonne
,
permettent
de
positionner
la
nouvelle
à
l'
endroit
voulu
.

Par
défaut
,
c'
est
naturellement
à
la
fin
.

Voici
d'
autres
exemples
:
mysql>
alter
table
users
add
(
depuis
varchar(4))
after
prenom
;
mysql>
alter
table
users
add
(
depuis
varchar(4)
,
commentaires
blob
)
;
à
titre
de
illustration
:
Étienne
Vandeput
–
©
Cefis
2005
69
Publier
sur
le
Web
-
Perfectionnement
Pour
ajouter
une
clé
primaire
à
une
colonne
,
on
utilisera
l'
action
add
avec
l'
option
primary
key
.

Ainsi
,
par
exemple
,
si
on
estime
que
login
seul
n'
est
pas
identifiant
,
mais
la
paire
login-password
,
on
commandera
:
mysql>
alter
table
users
add
(
login,password
)
primary
key
;
Attention
,
MySQL
considère
que
il
n'
y
a
qu'
un
seul
identifiant
possible
.

Donc
,
si
il
en
existe
déjà
un
,
il
faut
le
supprimer
avant
de
en
créer
un
autre
.

Pour
cela
,
on
utilise
l'
action
drop
et
l'
option
primary
key
,
comme
dans
l'
exemple
ci-dessous
:
On
peut
aussi
ajouter
des
index
sur
les
colonnes
.

Les
index
sont
intéressants
en
ce
sens
qu'
ils
accélèrent
les
recherches
mais
ils
ralentissent
certains
autres
traitements
comme
l'
insertion
de
une
ligne
dans
une
table
,
par
exemple
.

Cet
ajout
se
fait
par
l'
option
index
suivi
du
nom
de
la
ou
du
colonnes
.

mysql>
alter
table
users
add
index
(
nom
,
login
)
;
Il
existe
plusieurs
sortes
de
clés
,
chaque
type
ayant
son
intérêt
.

vous
connaissez
les
clés
primaires
et
les
clés
de
index
.

Les
clés
unique
sont
aussi
des
index
mais
qui
n'
autorisent
pas
les
valeurs
multiples
du
colonnes
sur
lesquelles
elles
portent
.

mysql>
alter
table
users
add
unique
(
login
)
;
ne
permettra
pas
,
lors
de
une
insertion
,
que
deux
enregistrements
aient
la
même
valeur
pour
login
.

Pour
supprimer
une
clé
unique
,
il
faut
utiliser
l'
action
drop
avec
l'
option
index
suivie
du
nom
de
la
(
du
)
colonne(s
)
.

mysql>
alter
table
users
drop
index
login
;
Les
actions
change
et
modify
permettent
de
changer
la
définition
de
une
colonne
et
,
éventuellement
,
de
la
repositionner
.

La
première
permet
aussi
de
changer
le
nom
de
la
colonne
.

Ainsi
,
la
commande
:
mysql>
alter
table
users
modify
depuis
varchar(4)
not
null
after
prenom
;
Étienne
Vandeput
à
à
Cefis
2005
70
Publier
sur
le
Web
-
Perfectionnement
fournira
le
résultat
suivant
:
Pour
renommer
une
table
,
on
se
servira
de
l'
action
rename
as
.

3.4.2.6
Copier
des
tables
On
peut
envisager
la
copie
de
tables
de
deux
manières
:
à
une
copie
intégrale
ou
partielle
de
la
structure
et
du
données

une
copie
de
la
structure
Les
deux
se
réalisent
au
moyen
de
la
commande
create
table
combinée
avec
une
simple
commande
de
sélection
.

Les
commandes
de
sélection
font
d'ailleurs
l'
objet
de
la
section
suivante
.

Pour
une
copie
intégrale
:
mysql>
create
table
util2
select
*
from
utilisateurs
;
Pour
une
copie
de
la
structure
:
Étienne
Vandeput
à
à
Cefis
2005
71
Publier
sur
le
Web
-
Perfectionnement
mysql>
create
table
util2
select
*
from
utilisateurs
where
1=0
;
Cette
commande
donne
déjà
quelques
indications
sur
les
attributs
de
la
commande
select
.

L'
attribut
where
est
suivi
de
une
condition
à
vérifier
par
les
enregistrements
à
prendre
en
compte
.

Comme
1
n'
est
jamais
égal
à
0
,
aucun
enregistrement
n'
est
repris
dans
la
nouvelle
table
qui
a
toutefois
la
même
structure
que
la
table
originale
.

3.4.2.7
Ajouter
,
supprimer
,
mettre
à
jour
des
lignes
Pour
ajouter
une
ligne
à
une
table
,
on
utilise
la
commande
insert
.

Il
y
a
différentes
manières
de
insérer
une
ligne
et
notamment
,
en
précisant
:
à
une
liste
de
colonnes
et
une
liste
de
valeurs
mysql>
insert
users
(
login,password,nom
)
values(ldo,dddddd,Doumont)
;
Observez
que
les
colonnes
ne
sont
pas
citées
dans
l'
ordre
qu'
elles
occupent
dans
la
structure
.

à
une
liste
de
paires
colonne-valeur
mysql>
insert
utilisateurs
set
(
nom='Donnay',login='jdo',password='eeeeee
'
)
;
Cette
commande
ne
permet
de
insérer
qu'
une
seule
ligne
à
la
foi
.

à
une
sélection
,
comme
dans
l'
exemple
ci-dessus
mysql>
insert
utilisateurs
select
à
Cette
instruction
permet
de
insérer
plusieurs
lignes
à
la
foi
mais
demande
l'
existence
de
une
table
de
laquelle
sont
extraites
les
lignes
à
insérer
avec
les
contraintes
que
cela
suppose
(
cohérence
du
noms
,
du
types
et
autres
attributs
de
colonnes
)
.

Pour
supprimer
des
lignes
,
on
utilise
la
commande
delete
from
.

Cette
commande
doit
être
agrémentée
de
une
condition
semblable
à
celles
que
l'
on
trouve
souvent
dans
les
commandes
select
et
qui
précise
quels
sont
les
lignes
qui
doivent
disparaître
de
la
table
.

mysql>
delete
from
utilisateurs
where
isnull(statut)
;
La
manière
de
écrire
les
conditions
s'
apparente
à
celles
que
l'
on
trouve
dans
la
plupart
du
langages
de
programmation
.

Les
expressions
de
ces
conditions
font
appel
à
des
variables
(
dont
les
noms
sont
ceux
du
colonnes
)
,
du
opérateurs
,
du
fonctions
,
du
constantes
.

En
voici
une
illustration
:
Étienne
Vandeput
–
©
Cefis
2005
72
Publier
sur
le
Web
-
Perfectionnement
Dans
l'
expression
de
la
condition
utilisée
dans
cet
exemple
,
statut
joue
le
rôle
de
variable
et
isnull
est
une
fonction
qui
renvoie
une
valeur
booléenne
.

Un
attribut
limit
peut
être
utilisé
pour
limiter
le
nombre
de
lignes
supprimées
.

mysql>
delete
from
utilisateurs
where
isnull(statut)
limit
1
;
n'
aurait
supprimé
qu'
une
seule
du
deux
lignes
.

La
mise
à
jour
des
informations
contenues
dans
les
lignes
s'
effectue
au
moyen
de
la
commande
update
.

Cette
commande
possède
aussi
des
attributs
where
et
limit
.

L'
attribut
set
permet
de
préciser
quelles
colonnes
doivent
être
mises
à
jour
et
de
quelle
manière
.

La
commande
mysql>
update
utilisateurs
set
(
login=concat('c-',login)
;
aura
pour
effet
de
ajouter
un
c
et
un
tiret
devant
les
login
de
tous
les
utilisateurs
.

Étienne
Vandeput
–
à
Cefis
2005
73
Publier
sur
le
Web
-
Perfectionnement
Dans
l'
expression
qui
décrit
ce
que
doit
devenir
la
colonne
login
,
on
retrouve
une
variable
(
login
)
une
fonction
(
concat
)
et
une
constante
(
la
chaîne
'
c-
'
)
.

3.4.3
Gestion
de
une
Bd
avec
PHPMyAdmin
Comme
il
a
été
dit
par
ailleurs
,
l'
écriture
du
instructions
en
MySQL
est
souvent
fastidieuse
.

Pour
cette
raison
,
il
existe
des
générateurs
de
code
qui
permettent
de
gérer
les
base
de
données
via
des
interfaces
graphiques
.

Toutefois
,
la
connaissance
de
la
syntaxe
de
un
tel
langage
reste
un
atout
pour
la
résolution
du
problèmes
qui
peuvent
surgir
lors
de
la
gestion
de
une
base
de
données
.

EasyPHP
comprend
une
application
,
PHPMyAdmin
,
qui
offre
la
possibilité
de
gérer
ses
base
de
données
.

Elle
est
accessible
à
partir
du
menu
contextuel
du
programme
EasyPHP
.

si
son
interface
mérite
de
être
améliorée
,
elle
permet
néanmoins
de
éviter
les
problèmes
de
syntaxe
.

Voici
une
illustration
de
un
du
écrans
de
cette
interface
:
Sans
entrer
dans
le
détail
de
cette
application
,
précisons
que
:
à
l'
onglet
Structure
permet
,
comme
on
s'
en
doute
,
de
modifier
la
structure
du
tables
de
une
base
données
;
à
l'
onglet
Afficher
permet
non
seulement
de
visualiser
les
lignes
de
une
table
,
mais
aussi
de
les
éditer
facilement
;
à
l'
onglet
SQL
permet
de
formuler
une
requête
qu'
il
n'
est
pas
possible
de
formuler
par
l'
intermédiaire
de
l'
interface
;
à
l'
onglet
Sélectionner
permet
de
construire
des
requêtes
(
comme
il
en
sera
question
dans
la
section
suivante
)
;
Étienne
Vandeput
à
à
Cefis
2005
74
Publier
sur
le
Web
-
Perfectionnement
à
l'
onglet
Insérer
offre
des
facilités
de
génération
du
instructions
permettant
de
insérer
des
lignes
dans
les
tables
.

Les
autres
options
sont
moins
importantes
à
ce
stade
.

Comme
dans
toutes
les
interfaces
de
ce
type
,
la
connaissance
de
la
syntaxe
est
évidemment
très
éclairante
quand
à
la
signification
du
options
qu'
elles
proposent
.

3.4.4
Sélection
de
informations
dans
une
Bd
3.4.4.1
Les
requêtes
Toutes
les
primitives
dont
nous
venons
de
parler
ne
servent
qu'
à
créer
,
ou
à
utiliser
pour
mettre
à
jour
,
des
base
de
données
et
les
tables
qu'
elles
sont
censées
contenir
.

Une
tout
autre
activité
consiste
à
interroger
les
base
de
données
pour
en
tirer
un
certain
nombre
de
informations
.

On
parle
généralement
de
requête
à
formuler
.

Le
résultat
de
une
requête
se
présente
aussi
sous
forme
de
une
table
.

dès
lors
,
rien
n'
empêche
que
celle
-ci
soit
stockée
comme
les
autres
dans
une
base
de
données
.

Nous
analysons
,
dans
cette
section
,
la
commande
select
qui
est
à
la
base
de
la
formulation
du
requêtes
de
ce
type
.

Pour
pouvoir
effectuer
des
requêtes
fines
,
la
commande
select
est
flanquée
de
nombreuses
options
.

Nous
présentons
d'abord
les
plus
importantes
de
entre
elles
et
nous
reviendrons
,
à
la
fin
de
cette
section
,
sur
une
syntaxe
plus
complète
de
cette
commande
.

3.4.4.2
Sélectionner
Quand
on
pense
à
sélectionner
,
on
imagine
extraire
de
l'
information
de
une
ou
plusieurs
tables
constituant
une
base
de
données
.

La
commande
select
qui
permet
de
réaliser
ce
souhait
est
toutefois
plus
générale
.

Il
n'
est
donc
pas
absolument
nécessaire
de
préciser
un
(
du
)
nom(s)
de
table(s
)
.

L'
écriture
de
une
simple
expression
suffit
.

En
voici
quelques
illustrations
:
3.4.4.3
Sélectionner
des
colonnes
Quand
on
parle
de
sélection
dans
une
seule
table
,
il
ne
peut
être
question
que
de
colonnes
,
de
lignes
ou
de
un
mélange
du
deux
.

On
peut
donc
préciser
quelles
sont
les
colonnes
dont
on
veut
sélectionner
les
informations
.

La
sélection
la
plus
simple
est
celle
qui
consiste
à
sélectionner
toutes
les
colonnes
.

mysql>
select
*
from
utilisateurs
;
fera
afficher
toutes
les
colonnes
de
la
table
utilisateurs
.

Étienne
Vandeput
–
à
Cefis
2005
75
Publier
sur
le
Web
-
Perfectionnement
Toutes
les
commandes
de
sélection
demandent
de
préciser
la
ou
les
tables
concernées
par
celle
-ci
.

Le
mot
clé
qui
l(es)'introduit
est
from
.

Dans
le
cas
où
les
informations
de
toutes
les
colonnes
ne
sont
pas
souhaitées
,
il
convient
de
préciser
celles
qui
sont
concernées
.

mysql>
select
nom
,
prenom
,
login
from
utilisateurs
;
ne
fera
afficher
que
les
informations
du
colonnes
nom
,
prenom
et
login
.

La
sélection
peut
être
accompagnée
de
un
traitement
du
données
.

Ainsi
,
on
peut
souhaiter
voir
les
noms
apparaître
en
majuscules
.

mysql>
select
upper(nom),prenom
from
utilisateurs
;
C'
est
le
rôle
de
la
fonction
upper
de
transformer
les
caractères
en
majuscules
.

Les
résultats
ne
sont
donc
pas
nécessairement
composés
que
de
informations
issues
de
la
base
de
données
,
mais
aussi
de
traitements
effectués
sur
ces
informations
comme
dans
...
çou
mieux
,
Étienne
Vandeput
à
à
Cefis
2005
76
Publier
sur
le
Web
-
Perfectionnement
3.4.4.4
Sélectionner
du
lignes
La
sélection
du
lignes
à
partir
de
une
(
de
plusieurs
)
table(s)
s'
effectue
en
définissant
une
clause
à
l'
aide
du
mot-clé
where
.

La
clause
étant
une
expression
booléenne
,
son
écriture
est
,
à
nouveau
,
un
assemblage
de
variables
(
colonnes
)
,
constantes
,
opérateurs
et
fonctions
.

Parmi
les
opérateurs
et
les
fonctions
,
on
retrouve
les
grands
classiques
présents
dans
la
plupart
du
langages
.

Nous
n'
allons
pas
les
énumérer
ici25
.

Nous
en
mentionnons
quelques-uns
qui
sont
plus
spécifiques
à
un
Sgbd
à
travers
quelques
exemples
.

L'
opérateur
in
permet
de
rechercher
une
valeur
dans
une
liste
.

Il
est
évidemment
possible
de
combiner
une
sélection
de
lignes
avec
une
sélection
de
colonnes
.

Dans
l'
exemple
qui
précède
,
l'
opérateur
between
permet
de
rechercher
une
valeur
dans
un
intervalle
.

25
vous
pourrez
trouver
une
documentation
assez
complète
du
opérateurs
et
des
fonctions
disponibles
à
l'
adresse
http://dev.mysql.com/doc/mysql/fr/
.

Étienne
Vandeput
–
©
Cefis
2005
77
Publier
sur
le
Web
-
Perfectionnement
Comme
on
peut
le
voir
,
l'
opérateur
like
autorise
des
sélections
utilisant
des
caractères
génériques
.

De
nombreux
autres
opérateurs
existent
comme
not
like
,
not
between…and
,
not
in
,
is
null
ou
encore
is
not
null
en
dehors
des
opérateurs
classiques
arithmétiques
,
logiques
et
de
comparaison
.

3.4.4.5
Opérer
des
classements
L'
option
order
by
et
son
attribut
asc
ou
desc
,
permettent
de
présenter
les
informations
dans
un
ordre
choisi
pour
les
éléments
de
une
colonne
.

mysql>
select
prenom,upper(nom),login
order
by
prenom
asc
;
Les
lignes
sont
ici
présentées
dans
l'
ordre
(
alphabétique
)
ascendant
des
prénoms
.

3.4.4.6
Opérer
des
regroupements
Outre
le
fait
de
trier
les
lignes
,
on
peut
souhaiter
que
ces
dernières
subissent
un
certain
regroupement
.

Ce
regroupement
doit
évidemment
précéder
le
tri
si
il
y
en
a
un
.

La
clause
utilisée
dans
ce
cas
est
la
clause
group
by
.

Cette
clause
permet
de
regrouper
les
lignes
selon
les
valeurs
de
une
ou
de
plusieurs
colonnes
.

Attention
,
même
si
il
n'
y
a
qu'
une
seule
colonne
concernée
par
la
clause
,
il
ne
s'
agit
pas
de
un
tri
,
mais
bien
de
un
regroupement
.

Pour
illustrer
ces
regroupements
,
il
convient
de
travailler
avec
une
base
de
données
un
peu
plus
élaborée
.

C'
est
ce
que
nous
faisons
,
après
avoir
précisé
deux
nouveaux
opérateurs
utilisables
dans
la
commande
select
.

La
clause
group
by
peut
être
accompagnée
de
une
autre
clause
,
having
,
permettant
de
effectuer
un
filtrage
supplémentaire
lorsque
ce
regroupement
est
effectué
.

Des
exemples
suivront
.

3.4.4.7
Limiter
le
nombre
du
résultats
On
peut
ne
pas
souhaiter
obtenir
tous
les
résultats
,
mais
seulement
un
certain
nombre
ou
même
,
quelquefois
,
un
seul
.

L'
attribut
limit
permet
de
fixer
ce
nombre
.

Ainsi
,
si
on
ne
s'
intéresse
qu'
à
la
première
ligne
vérifiant
un
critère
donné
,
on
peut
procéder
comme
dans
l'
exemple
suivant
.

mysql>
select
prenom,upper(nom)
where
depuis>'1990
'
order
by
nom
limit
1
;
La
ligne
retournée
sera
celle
de
la
première
personne
,
par
ordre
alphabétique
(
du
noms
)
,
qui
a
été
engagée
après
1990
.

Étienne
Vandeput
–
©
Cefis
2005
78
Publier
sur
le
Web
-
Perfectionnement
3.4.4.8
Éliminer
les
doublons
Il
ne
s'
agit
pas
de
considérer
des
lignes
identiques
dans
la
table
de
sélection
,
mais
des
lignes
identiques
dans
la
table
du
résultats
.

On
utilise
pour
cela
l'
opérateur
distinct
.

Dans
cet
exemple
,
on
recherche
par
quelles
lettres
commencent
les
noms
du
utilisateurs
.

3.4.4.9
Syntaxe
plus
complète
de
la
commande
select
Une
commande
select
peut
donc
s'
écrire
de
manière
relativement
longue
si
plusieurs
clauses
et
plusieurs
opérateurs
sont
utilisés
.

Les
principales
clauses
et
les
principaux
opérateurs
sont
les
suivants
:

distinct
(
opérateur
)
à
from
(
mot-clé
)
à
where
(
clause
)

group
by
(
clause
)
à
having
(
clause
)
à
order
by
à
asc
ou
desc
(
clause
)
à
limit
(
opérateur
)
3.4.5
Sélections
multi-tables
3.4.5.1
Création
du
tables
Rappelons
-nous
que
une
base
de
données
est
rarement
composée
de
une
seule
table
,
et
que
la
transformation
du
schéma
conceptuel
aboutit
nécessairement
à
un
nombre
plus
ou
moins
élevé
de
tables
.

Pour
continuer
à
illustrer
notre
propos
,
nous
allons
quelque
peu
modifier
notre
base
de
données
et
repartir
de
un
du
schémas
simples
que
nous
avons
proposés
.

Ce
schéma
décrit
que
dans
un
centre
de
formation
,
il
y
a
des
formés
qui
participent
à
des
formations
assurées
par
des
formateurs
.

Étienne
Vandeput
–
©
Cefis
2005
Formé
id
nom
prenom
à
Formation
participe
0-N
est
suivie
par
Participer
0-N
id
titre
nbrinscrits
…
est
assurée
par
1-1
Assurer
assure
1-N
Formateur
id
nom
à
79
Publier
sur
le
Web
-
Perfectionnement
Tâchons
de
réfléchir
à
la
transformation
de
ce
schéma
en
tables
.

Nous
allons
modifier
un
peu
ce
schéma
en
étoffant
le
nombre
de
attributs
de
ses
entités
et
en
ajoutant
un
,
voire
deux
attributs
à
l'
association
:
un
attribut
paye
qui
précise
si
le
formé
a
payé
son
inscription
et
un
attribut
attente
qui
précise
si
l'
inscription
est
retenue
ou
si
le
formé
fait
partie
de
une
liste
de
attente
.

Notez
aussi
que
la
table
utilisateurs
qui
nous
a
servi
de
exemple
jusque
ici
sera
reconvertie
en
table
formateurs
grâce
au
vertu
de
la
commande
alter
table
à
rename
as
…
Forme
id
nom
prenom
naissance
institution
Formation
participe
1-N
Participer
paye
attente
est
suivie
par
0-N
id
titre
est
assurée
par
1-1
Assurer
assure
1-N
Formateur
id
nom
prenom
depuis
statut
L'
identificateur
id
fait
office
de
identifiant
dans
l'
entité
formateur
.

Il
faudra
donc
s'
assurer
,
par
la
programmation
,
que
deux
formateurs
n'
ont
pas
le
même
identifiant
.

Chaque
formé
participe
au
moins
à
une
formation
,
sauf
que
il
est
peut-être
en
attente
pour
cette
formation
.

Ce
schéma
est
simple
et
toutefois
suffisant
pour
illustrer
notre
propos
.

Il
est
clair
que
nous
pourrions
rajouter
des
attributs
tels
l'
adresse
du
formés
,
du
formateurs
,
les
prérequis
de
une
formation
,
etc
.

mais
ces
informations
supplémentaires
ne
vont
pas
nous
aider
à
comprendre
mieux
ce
qu'
il
y
a
à
comprendre
.

La
première
démarche
consiste
à
transformer
le
schéma
en
table
.

La
relation
entre
formé
et
formation
est
une
relation
de
plusieurs
à
plusieurs
.

L'
association
Participer
va
donc
donner
naissance
à
une
table
reprenant
les
attributs
de
cette
association
,
soit
paye
et
attente
,
mais
aussi
,
les
identifiants
de
chacune
du
entités
qu'
elle
associe
.

La
relation
entre
formateur
et
formation
est
une
relation
de
un
à
plusieurs
.

En
conséquence
,
et
comme
nous
l'
avons
vu
précédemment
,
l'
association
Assurer
ne
donnera
pas
naissance
à
une
table
.

Nous
aurons
donc
en
tout
quatre
tables
:

formes
qui
correspond
à
l'
entité
Formé

formations
qui
correspond
à
l'
entité
Formation
à
inscriptions
qui
correspond
à
l'
association
Participer
à
formateurs
qui
correspond
à
l'
entité
Formateur
Dans
la
table
formes
nous
avons
décidé
de
choisir
un
identifiant
automatiquement
généré
par
MySQL
.

Le
formé
aura
un
nom
,
un
prénom
,
une
année
de
naissance
et
une
institution
.

si
on
souhaitait
développer
la
notion
de
institution
,
par
exemple
pour
des
raisons
de
contact
par
courrier
ou
autre
,
on
en
ferait
certainement
une
entité
.

Étienne
Vandeput
–
©
Cefis
2005
80
Publier
sur
le
Web
-
Perfectionnement
La
table
formations
comprend
trois
attributs
:
un
identifiant
construit
(
deux
derniers
chiffres
de
l'
année
et
lettre
de
la
formation
)
,
un
titre
et
,
provenant
de
l'
association
Assurer
,
l'
identifiant
du
formateur
.

La
table
inscriptions
se
compose
des
identifiants
de
chacune
du
entités
de
l'
association
Participer
et
de
ses
attributs
paye
et
attente
qui
ont
été
choisis
de
type
enum
.

Enfin
,
la
table
formateurs
est
l'
ancienne
table
utilisateurs
.

Nous
avons
décidé
que
l'
identificateur
était
un
identifiant
à
lui
seul
et
non
avec
le
mot
de
passe
qui
a
d'ailleurs
disparu
de
la
structure
.

Afin
de
bien
comprendre
les
opérations
de
jointures
qui
font
l'
objet
du
paragraphe
suivant
,
il
importe
de
visualiser
le
contenu
de
ces
différentes
tables
au
moment
où
ces
jointures
sont
effectuées
.

Les
voici
,
avec
pour
commencer
,
la
table
formes
à
Étienne
Vandeput
–
©
Cefis
2005
81
Publier
sur
le
Web
-
Perfectionnement
…ensuite
,
la
table
formations
à
…la
table
inscriptions
à
…et
finalement
,
la
table
formateurs
.

3.4.5.2
Jointures
L'
opération
qui
consiste
à
fusionner
,
de
une
manière
ou
de
une
autre
,
les
informations
de
deux
ou
plusieurs
tables
porte
le
nom
de
jointure
.

Il
existe
différents
types
de
jointures
et
notre
propos
n'
est
pas
de
les
décrire
tous
.

Nous
nous
contenterons
de
en
illustrer
deux
.

Une
du
jointures
les
plus
intéressantes
est
l'
équijointure
.

C'
est
une
jointure
basée
sur
une
condition
de
égalité
.

Les
noms
du
colonnes
ne
doivent
pas
nécessairement
être
identiques
,
comme
dans
les
jointures
dites
naturelles26
,
et
l'
égalité
ne
porte
pas
nécessairement
sur
des
clés
primaires
ou
étrangères
.

26
Les
jointures
naturelles
se
font
sur
base
de
colonnes
portant
les
mêmes
noms
et
ayant
les
mêmes
caractéristiques
.

Étienne
Vandeput
–
©
Cefis
2005
82
Publier
sur
le
Web
-
Perfectionnement
mysql>
select
nom,prenom,titre
from
formes,formations,inscriptions
where
id_formation=formations.id
&&
id_forme=formes.id
;
La
commande
qui
précède
va
permettre
de
sélectionner
deux
colonnes
dans
la
table
formes
et
une
dans
la
table
formations
.

En
réalité
,
elle
va
produire
l'
affichage
de
toutes
les
inscriptions
prises
sous
la
forme
nom
et
prénom
de
l'
inscrit
et
titre
de
la
formation
à
laquelle
il
est
inscrit
.

La
jointure
se
fait
par
l'
intermédiaire
de
l'
identifiant
de
la
table
inscriptions
qui
est
composé
de
deux
clés
étrangères
.

vous
remarquerez
que
certaines
colonnes
de
la
clause
where
sont
écrites
sous
leur
nom
long
(
<nom
de
la
table>.<nom
de
la
colonne>
)
.

C'
est
dû
à
la
nécessité
de
ne
pas
confondre
des
noms
de
colonnes
identiques
dans
deux
tables
(
ici
,
id
)
.

Pour
les
autres
colonnes
,
il
n'
y
a
pas
d'
ambiguïtés
.

On
peut
combiner
une
jointure
et
un
tri
,
comme
dans
la
commande
suivante
,
en
demandant
de
afficher
les
résultats
par
ordre
alphabétique
du
noms
,
pui
du
titres
.

mysql>
select
nom,prenom,titre
from
formes,formations
inscriptions
where
id_formation=formations.id
&&
id_forme=formes.id
order
by
nom,titre
Étienne
Vandeput
à
à
Cefis
2005
83
Publier
sur
le
Web
-
Perfectionnement
Ce
qui
est
différent
de
la
commande
qui
suit
où
le
tri
est
d'abord
réalisé
sur
le
titre
pui
sur
le
nom
.

mysql>
select
nom,prenom,titre
from
formes,formations
inscriptions
where
id_formation=formations.id
&&
id_forme=formes.id
order
by
titre,nom
Dans
certains
cas
,
pour
raccourcir
l'
écriture
du
requêtes
,
on
utilise
des
alias
pour
les
tables
.

mysql>
select
nom,prenom,titre
from
formes
as
f1,formations
as
f2
,
inscriptions
where
id_formation=f2.id
&&
id_forme=f1.id
order
by
titre,nom
La
table
formes
a
comme
alias
fs
et
la
table
formations
,
f2
.

Dans
d'
autres
cas
,
cette
utilisation
est
inévitable
comme
dans
le
cas
du
autojointures
.

si
nous
recherchons
la
liste
du
inscrits
qui
sont
nés
la
même
année
,
nous
donnerons
la
commande
mysql>
select
f1.nom,f1.naissance
from
formes
as
f1,formes
as
f2
where
f1.naissance=f2.naissance
&&
f1.id
!

=f2.id
;
Étienne
Vandeput
à
©
Cefis
2005
84
Publier
sur
le
Web
-
Perfectionnement
Cette
commande
crée
deux
alias
pour
la
même
table
,
ce
qui
permet
de
comparer
une
ligne
avec
toutes
les
autres
,
par
exemple
.

Seront
retenus
,
les
nom
et
date
de
naissance
du
lignes
de
la
première
instance
de
la
table
lorsque
cette
même
année
de
naissance
sera
retrouvée
dans
une
autre
ligne
.

Il
existe
d'
autres
types
de
jointures
.

On
trouvera
en
bibliographie
du
ouvrages
intéressants
à
ce
propos
.

3.5
Gérer
une
Bd
avec
Php
3.5.1
Le
principe
de
communication
La
gestion
de
une
base
de
données
avec
MySQL
étant
bien
amorcée
,
il
reste
à
voir
comment
Php
peut
s'
en
accommoder
.

Nous
avons
vu
que
les
requêtes
étaient
fournies
à
Php
sous
forme
de
chaînes
de
caractères
éventuellement
stockées
dans
des
variables
avant
de
être
prises
en
charge
par
des
fonctions
.

Les
fonctions
dont
il
est
question
sont
des
fonctions
de
communication
avec
MySQL
.

Il
importe
de
en
connaître
les
principales
,
de
savoir
ce
qu'
elles
prennent
en
argument
et
ce
qu'
elles
retournent
comme
types
de
valeurs
.

3.5.2
Les
fonctions
Php
Il
existe
une
bonne
trentaine
de
fonctions
dédiées
à
la
communication
entre
Php
et
MySQL
.

Nous
illustrons
ici
celles
qui
paraissent
les
plus
intéressantes
au
premiers
stades
du
développement
de
une
application
de
gestion
de
base
de
données
avec
Php
.

3.5.2.1
mySql_connect
Cette
fonction
permet
de
établir
la
connexion
avec
un
serveur
MySQL
.

Elle
prend
trois
arguments
de
type
chaîne
:
le
nom
de
l'
hôte
,
le
nom
de
l'
utilisateur
et
le
mot
de
passe
.

entier
mySql_connect(chaine
hôte
,
chaîne
utilisateur
,
chaîne
mot
de
passe
)
Tous
les
arguments
sont
optionnels
.

Ils
existent
par
défaut
(
localhost
,
le
propriétaire
du
processus
et
le
mot
de
passe
vide
)
.

Voici
un
exemple
concret
de
ouverture
de
connexion
:
<
?

php
$link
=
mysql_connect("localhost
"
,
"
root
"
,
"
"
)
or
die("<p>Impossible
de
se
connecter
:
"
.mysql_error()."</p>")
;
Étienne
Vandeput
à
à
Cefis
2005
85
Publier
sur
le
Web
-
Perfectionnement
print
(
"
Connexion
réussie
.
"
)
;
mysql_close($link)
;
?

à
Cet
exemple
illustre
diverses
choses
.

La
fonction
renvoie
un
entier
qui
est
un
identifiant
de
la
connexion
.

Cette
valeur
est
utilisée
pour
clore
la
connexion
au
moyen
de
une
autre
fonction
mySql_close
qui
la
prend
en
argument
et
qui
renvoie
une
valeur
booléenne
.

Notez
que
la
précision
de
cette
valeur
,
dans
cet
exemple
,
est
inutile
.

Ce
n'
est
que
lorsque
la
confusion
est
possible
que
elle
devient
nécessaire
(
plusieurs
connexions
ouvertes
,
par
exemple
)
.

de
même
,
la
fermeture
de
la
connexion
n'
est
pas
nécessaire
.

Elle
accompagne
la
fin
de
l'
exécution
du
script
.

Les
paramètres
fournis
à
la
fonction
sont
ceux
qui
seraient
fournis
lors
de
une
connexion
normale
à
MySQL
via
la
ligne
de
commande
.

L'
exécution
de
la
fonction
s'
accompagne
de
une
option
qui
commande
au
script
de
se
terminer
si
la
connexion
ne
peut
avoir
lieu
.

Le
mot-clé
die
est
synonyme
de
exit
,
mais
die
se
comporte
comme
une
fonction
en
ce
sens
qu'
elle
peut
prendre
comme
argument
une
chaîne
de
caractères
qui
sera
affichée
en
cas
de
arrêt
du
script
.

mySql_error
est
aussi
une
fonction
qui
renvoie
une
chaîne
de
caractères
contenant
le
texte
du
message
de
erreur
.

Il
existe
une
fonction
mySql_pconnect
qui
rend
les
connexions
permanentes
,
ce
qui
évite
des
pertes
de
temps
,
dans
certains
cas
.

3.5.2.2
mySql_create_db
Une
foi
connecté
au
serveur
MySQL
,
il
convient
de
activer
une
base
de
données
ou
de
en
créer
une
.

La
création
de
une
base
de
données
s'
effectue
par
le
biais
de
la
fonction
mySql_create_db
.

booléen
mySql_create_db(chaîne
base
de
données
,
entier
lien
)
Voici
une
illustration
de
l'
utilisation
de
cette
fonction
:
<
?

php
$link
=
mysql_pconnect("localhost
"
,
"
root
"
,
"
"
)
or
die
(
"
Connexion
impossible
"
)
;
if
(mysql_create_db("ma_db"))
à
echo
"
<p>La
base
de
données
a
été
correctement
créée.\n</p>
"
;
}
else
à
echo
"
<p>Erreur
lors
de
la
création
de
la
base
:
"
.mysql_error()."</p>
"
;
}
?

>
Il
est
à
noter
que
la
fonction
mySql_query
que
nous
avons
déjà
illustrée
tout
au
début
de
ce
chapitre
permet
de
obtenir
le
même
résultat
avec
la
commande
create
database
.

Elle
sera
préférée
à
la
précédente
.

Dans
cet
exemple
,
le
résultat
renvoyé
par
la
fonction
est
utilisé
dans
un
test
.

3.5.2.3
mySql_select_db
Cette
fonction
qui
renvoie
un
booléen
permet
de
sélectionner
une
base
de
données
.

Elle
prend
comme
arguments
,
le
nom
de
la
base
de
données
et
l'
entier
lien
résultant
de
l'
ouverture
de
la
connexion
.

booléen
mySql_select_db(chaîne
base
de
données
,
entier
lien
)
Une
séquence
classique
dans
un
script
Php
sera
donc
:
<
?

php
$link
=
mysql_connect('localhost
'
,
'
root
'
,
'
'
)
;
Étienne
Vandeput
à
©
Cefis
2005
86
Publier
sur
le
Web
-
Perfectionnement
if
(
!

$link
)
{
die('Non
connecté
:
'
.

mysql_error())
;
}
$db
=
mysql_select_db('ma_db
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.mysql_error().'</p>')
;
}
?

>
3.5.2.4
mySql_query
si
la
connexion
a
bien
été
établie
et
la
base
de
données
bien
sélectionnée
,
il
est
possible
de
émettre
toutes
les
requêtes
possibles
et
imaginables
:
créations
de
tables
,
insertions
,
suppressions
,
mises
à
jour
de
lignes
,
sélections
diverses
,
…
On
ne
confiera
pas
nécessairement
à
un
script
php
le
soin
de
créer
des
tables
,
surtout
si
celles
-ci
sont
permanentes
dans
l'
application
,
mais
pourquoi
pas
?

La
fonction
mySql_query
est
importante
car
elle
permet
de
véhiculer
toutes
les
requêtes
et
de
en
récupérer
les
résultats
.

entier
mySql_query(chaîne
requête
,
entier
lien
)
Pour
les
requêtes
de
insertion
,
de
suppression
et
de
mise
à
jour
,
elle
retourne
une
valeur
booléenne
.

Pour
une
sélection
,
elle
renvoie
un
tableau
de
résultats
.

Voici
à
nouveau
une
illustration
de
séquence
possible
:
<
?

php
$link
=
mysql_connect('localhost
'
,
'
root
'
,
'
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('exemple
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery="select
prenom,nom,institution
from
formes
order
by
nom
"
;
$queryresult=mysql_query($sqlquery)
;
…
?

à
La
requête
MySQL
est
stockée
dans
la
variable
$sqlquery
qui
est
passée
en
argument
à
la
fonction
mysql_query
.

Il
existe
également
une
fonction
mySql_db_query
semblable
à
la
précédente
,
si
ce
n'
est
que
elle
prend
un
argument
de
plus
,
le
nom
de
la
base
de
données
sur
laquelle
porte
la
requête
.

La
fonction
renvoie
un
entier
qui
identifie
la
requête
et
qui
est
stocké
,
dans
l'
exemple
,
dans
la
variable
$queryresult
.

Cet
entier
est
utilisé
,
par
la
suite
,
par
des
fonctions
de
exploration
du
résultats
telles
celles
qui
suivent
.

3.5.2.5
mySql_fetch_row
Cette
fonction
renvoie
,
sous
forme
de
un
tableau
,
la
ligne
courante
.

à
chaque
appel
,
c'
est
la
ligne
suivante
qui
est
prise
en
compte
jusque
à
ce
qu'
il
n'
y
en
ait
plus
(
auquel
cas
la
fonction
renvoie
la
valeur
false
)
.

Étienne
Vandeput
–
©
Cefis
2005
87
Publier
sur
le
Web
-
Perfectionnement
tableau
mySql_fetch_row(entier
résultat
)
L'
entier
résultat
est
celui
qui
identifie
la
requête
effectuée
via
mySql_query
.

Le
tableau
est
indexé
à
partir
de
0
et
peut
être
parcouru
pour
exploitation
du
valeurs
comme
dans
l'
exemple
suivant
:
<
?

php
echo
"
<h1>Liste
du
inscrits</h1>
"
;
$link
=
mysql_connect('localhost
'
,
'
root
'
,
'
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('exemple
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery="select
nom,prenom,institution
from
formes
order
by
nom
"
;
$queryresult=mysql_query($sqlquery)
;
while
($row=mysql_fetch_row($queryresult)){
echo
"
<p><strong>".$row[1
]
.
"

"
.$row[0]."</strong>
"
.$row[2]."</p>
"
;
}
?

à
Ce
petit
script
ouvre
la
base
de
données
exemple
et
lance
une
requête
portant
sur
trois
colonnes
de
la
table
formes
.

Les
informations
sont
récupérées
,
ligne
par
ligne
,
dans
un
tableau
$row
et
mises
en
forme
pour
un
affichage
correct
.

Voici
ce
que
cela
donne
.

Étienne
Vandeput
–
©
Cefis
2005
88
Publier
sur
le
Web
-
Perfectionnement
3.5.2.6
mySql_fetch_array
Cette
function
est
quasi
identique
à
la
précédente
.

La
différence
réside
dans
le
fait
que
elle
possède
un
argument
de
plus
.

Cet
argument
précise
par
l'
intermédiaire
de
une
constante
(
MYSQL_NUM
ou
MYSQL_ASSOC
)
si
le
tableau
est
indexé
classiquement
ou
si
c'
est
un
tableau
associatif
auquel
cas
,
les
noms
de
colonnes
peuvent
être
utilisés
.

tableau
mySql_fetch_array(entier
résultat
,
entier
type
)
La
boucle
de
l'
exemple
précédent
peut
être
remplacée
par
while
($row=mysql_fetch_array($queryresult,MYSQL_ASSOC)){
echo
"
<p><strong>".$row['prenom
'
]
.
"

"
.$row['nom
'
]
."</strong>
"
.$row['institution']."</p>
"
;
}
3.5.2.7
mySql_num_rows
Cette
fonction
renvoie
,
comme
on
s'
en
doute
,
le
nombre
de
lignes
du
résultat
dans
le
cas
de
une
requête
de
sélection
.

Elle
est
particulièrement
utile
lorsqu'
on
veut
s'
assurer
que
il
y
en
a.
<p>
<
?

php
$link
=
mysql_connect("localhost
"
,
"
root
"
,
"
"
)
;
mysql_select_db("exemple
"
,
$link
)
;
$queryresult
=
mysql_query("SELECT
*
FROM
formateurs
"
,
$link
)
;
$num_rows
=
mysql_num_rows($queryresult)
;
if
(
!

$num_rows){
echo
"
Pas
de
formateurs
!

"
;
}
else{
echo
"
Il
y
a
$num_rows
formateurs.\n
"
;
}
?

à
</p>
Dans
notre
exemple
:
3.5.2.8
mySql_affected_rows
C'
est
tout
simplement
le
correspondant
de
la
fonction
précédente
pour
les
requêtes
de
mise
à
jour
.

Elle
se
révèle
utile
dans
la
mesure
où
elle
permet
de
tenir
l'
utilisateur
au
courant
de
ce
qui
est
en
train
de
se
passer
.

3.5.2.9
Autres
fonctions
Nous
n'
avons
illustré
que
les
fonctions
les
plus
directement
utiles
.

Les
autres
fonctions
sont
utilisées
plus
occasionnellement
.

Leur
rôle
est
cependant
facile
à
comprendre
si
vous
avez
compris
le
rôle
de
celles
qui
ont
précédé
.

Le
plus
souvent
,
leur
nom
fournit
déjà
une
bonne
description
de
ce
à
quoi
elles
sont
destinées
.

Citons
tout
de
même
les
fonctions
qui
permettent
de
connaître
les
caractéristiques
de
Étienne
Vandeput
–
©
Cefis
2005
89
Publier
sur
le
Web
-
Perfectionnement
l'
information
issue
de
une
colonne
dans
un
résultat
et
notamment
,
la
longueur
(
mySql_field_len
)
,
le
nom
(
mySql_field_name
)
,
le
nom
de
la
table
(
mySql_field_table
)
,
le
type
(
mySql_field_type
)
…
Pour
le
reste
,
nous
vous
renvoyons
à
l'
excellente
documentation
en
ligne
et
au
ouvrages
cités
en
bibliographie
.

3.6
Bilan
Dans
ce
chapitre
,
nous
avons
survolé
un
grand
nombre
de
connaissances
et
évoqué
un
certain
nombre
de
savoir-faire
:
à
réaliser
un
schéma
ERA
,
à
transformer
un
schéma
en
tables
,
à
maîtriser
le
langage
MySQL
,
à
maîtriser
les
fonctions
de
base
permettant
à
Php
de
communiquer
avec
MySQL
,

…
Ces
éléments
nous
permettent
de
traiter
complètement
,
des
applications
qui
allient
la
création
de
page
dynamiques
avec
la
gestion
du
base
de
données
.

Certaines
requêtes
n'
ont
pas
été
envisagées
sous
l'
angle
de
Php
,
telles
l'
insertion
ou
la
mise
à
jour
des
lignes
de
une
table
,
mais
vous
en
connaissez
le
principe
.

L'
utilisation
du
formulaires
va
s'
avérer
particulièrement
intéressante
pour
la
gestion
du
données
par
l'
utilisateur
.

En
les
remplissant
,
il
va
permettre
l'
enregistrement
de
lignes
dans
des
tables
.

Il
sera
également
possible
,
via
des
scripts
correctement
écrits
,
de
lui
renvoyer
des
formulaires
garnis
de
information
,
à
compléter
ou
à
modifier
.

Tout
est
donc
en
place
pour
la
réalisation
de
une
application
en
ligne
,
même
si
les
listes
du
primitives
,
du
fonctions
et
du
opérateurs
du
différents
langages
sont
loin
de
avoir
été
explorées
à
fond
.

Voici
un
petit
exercice
pour
commencer
en
douceur
.

3.7
Exercice

Il
va
s'
agir
de
concevoir
un
mini
schéma
ERA
décrivant
une
situation
que
vous
connaissez
.

Ce
schéma
ne
comprendra
pas
plus
de
deux
ou
trois
entités
(
au
minimum
deux
)
et
au
moins
une
association
de
plusieurs
à
plusieurs
.

à
Lorsque
ce
schéma
sera
complet
,
transformez
-le
en
tables
selon
les
règles
que
nous
avons
établies
.

Déterminez
clairement
les
attributs
de
chacune
du
entités
et
identifiez
correctement
les
clés
primaires
et
les
clés
étrangères
.

à
Créez
la
base
de
données
et
les
tables
en
vous
aidant
de
l'
interface
de
PHPMyAdmin
.

Ajoutez
y
déjà
quelques
lignes
.

à
Écrivez
un
script
php
qui
affiche
quelques
colonnes
de
une
du
tables
avec
une
mise
en
forme
particulière
.

à
Écrivez
un
script
php
qui
effectue
une
requête
portant
sur
plusieurs
tables
.

à
Écrivez
un
script
php
qui
permette
de
modifier
les
données
de
une
table
.

Pour
ce
faire
,
utilisez
des
formulaires
que
vous
allez
garnir
avec
les
informations
disponibles
.

L'
utilisateur
modifiera
les
données
de
ces
formulaires
et
donnera
l'
ordre
de
enregistrer
.

Une
page
dynamique
sera
construite
pour
lui
fournir
tous
les
renseignements
nécessaires
sur
le
déroulement
du
traitement
effectué
sur
la
base
de
données
.

Étienne
Vandeput
–
©
Cefis
2005
90
Publier
sur
le
Web
-
Perfectionnement
4
.

Application
4.1
Introduction
Afin
de
mettre
en
musique
les
différents
éléments
qui
ont
été
présentés
dans
les
trois
premiers
chapitres
,
nous
nous
proposons
de
insister
sur
les
démarches
à
mettre
en
œuvre
lors
du
développement
de
une
application
.

Par
application
,
nous
entendons
essentiellement
deux
choses
:
à
la
mise
en
place
de
un
programme
sous
forme
de
un
ensemble
de
scripts
ayant
pour
objectif
principal
,
la
fourniture
de
informations
extraites
de
une
base
de
données
et
leur
mise
à
jour
,
à
la
création
de
l'
interface
de
communication
permettant
à
un
être
humain
,
selon
les
privilèges
qui
lui
sont
accordés
,
de
gérer
cette
base
de
données
et/ou
de
formuler
des
demandes
à
propos
de
informations
qu'
elle
est
censée
contenir
.

La
conception
de
une
telle
application
,
si
élémentaire
soit
-elle
,
demande
une
bonne
analyse
de
l'
environnement
dans
lequel
elle
est
supposée
s'
exécuter
.

Sans
aller
jusque
au
développement
complet
de
l'
exemple
que
nous
allons
traiter
,
nous
insisterons
sur
les
points
importants
à
ne
pas
négliger
dans
la
démarche
de
conception
de
une
telle
application
.

4.2
Un
énoncé
à
raffiner
Lorsqu'
il
s'
agit
de
imaginer
une
application
sur
le
Web
dont
le
but
est
de
couvrir
un
domaine
de
activité
relativement
bien
connu
,
il
est
nécessaire
de
disposer
de
une
bonne
description
de
ce
domaine
.

Diverses
techniques
sont
possibles
,
afin
de
récolter
un
maximum
de
informations
pertinentes
:
interview
du
acteurs
,
du
responsables
,
analyse
de
documentation
(
si
elle
existe
)
,
exercice
de
description
de
l'
application
par
une
analyse
de
applications
similaires
,
à
Les
acteurs
et
les
activités
sont
également
importantes
à
cerner
,
de
manière
à
modéliser
une
réalité
qui
ne
soit
pas
trop
étendue
.

de
où
l'
importance
de
prendre
en
compte
le
public
auquel
cette
application
est
destinée
.

Nous
allons
tâcher
de
illustrer
cela
très
concrètement
sur
base
de
un
énoncé
issu
de
la
description
écrite
de
une
situation
,
par
une
personne
réputée
bien
la
connaître
.

Cette
description
est
forcément
incomplète
et
nous
a
amenés
à
faire
des
suppositions
qui
pourraient
se
révéler
incorrectes
si
elles
ne
sont
pas
rapidement
confrontées
à
l'
avis
du
principaux
acteurs
.

Ceci
donne
déjà
quelques
indications
sur
la
manière
de
procéder
avant
de
réfléchir
à
un
schéma
conceptuel
.

Voici
donc
l'
énoncé
fourni
.

Il
s'
agirait
de
mettre
sur
l'
intranet
de
une
école
,
voire
sur
Internet
,
les
informations
concernant
les
stages
du
élèves
.

On
peut
décrire
la
situation
en
disant
que
il
y
a
:

des
maîtres
de
stages
,

du
élèves
de
puériculture
(
12
classes
réparties
en
5e
,
6e
et
7e
puériculture
)
,
de
nursing
(
6
classes
réparties
en
5e
et
6e
nursing
)
,
de
gériatrie
(
2
classes
réparties
en
5e
et
6e
gériatrie
)
,

des
lieux
de
stages
(
une
vingtaine
de
lieux
différents
)
,

du
périodes
de
stages
.

Pendant
une
même
période
,
dans
un
même
lieu
,
des
élèves
aussi
bien
de
nursing
que
de
puériculture
,
tant
de
5e
,
6e
ou
7e
se
retrouvent
parfois
ensemble
.

à
titre
de
exemples
,
voici
quelques
opérations
que
différents
acteurs
pourraient
avoir
envie
de
réaliser
:
Étienne
Vandeput
à
à
Cefis
2005
91
Publier
sur
le
Web
-
Perfectionnement

un
élève
de
telle
classe
pourrait
rechercher
à
quel
moment
il
va
en
stage
,
en
quel
lieu
,
avec
quel
professeur
et
quels
élèves
(
de
quelles
classes
)
;
à
un
professeur
chercherait
quels
élèves
il
supervise
à
quelle
période
;

si
il
y
a
un
accès
via
Internet
,
telle
crèche
pourrait
savoir
quels
élèves
de
telle
classe
,
section
,
elle
va
devoir
accueillir
à
tel
moment
.

Cette
simple
description
,
bien
sûr
fort
incomplète
,
va
cependant
nous
permettre
de
mettre
en
évidence
un
certain
nombre
de
démarches
et
de
pratiques
qui
paraissent
fondamentales
.

4.3
Un
bon
schéma
conceptuel
4.3.1
Première
ébauche
La
première
démarche
consiste
à
représenter
le
domaine
de
l'
activité
,
sous
forme
de
un
schéma
conceptuel
.

Un
schéma
entités-associations
peut
très
bien
convenir
pour
ce
genre
de
opération
.

Les
entités
,
comme
les
associations
et
les
rôles
,
peuvent
généralement
être
mis
en
évidence
au
travers
du
discours
.

Les
cardinalités
peuvent
également
être
déduites
du
discours
ou
faire
l'
objet
,
sinon
,
de
une
demande
de
précision
.

de
la
description
qui
précède
,
nous
retirons
d'abord
que
il
y
a
des
élèves
,
des
professeurs
ou
maîtres
de
stage
,
des
lieux
de
stage
.

Il
est
également
question
de
stages
,
mais
la
notion
de
stage
est
plus
délicate
à
cerner
,
notamment
en
ce
qui
concerne
l'
établissement
du
cardinalités
.

On
peut
considérer
que
un
stage
est
la
prestation
notée
de
un
élève
dans
un
lieu
et
un
domaine
fixés
.

Les
élèves
font
partie
de
une
classe
.

Nous
considérons
que
les
stages
se
déroulent
pendant
une
période
compacte
,
ce
qui
signifie
de
une
date
à
une
autre27
.

Nous
retenons
donc
dans
un
premier
temps
,
les
entités
Élève
,
Maître
,
Stage
,
Lieu
,
Date
et
Classe
.

Un
élève
fait
partie
de
une
classe
et
il
effectue
des
stages
.

Les
stages
se
déroulent
dans
des
lieux
et
commencent
à
une
certaine
date
pour
finir
à
une
autre
.

Les
maîtres
de
stage
supervisent
des
stages
.

Un
élève
appartient
à
une
(
et
une
seule
)
classe
et
une
classe
se
compose
de
au
moins
un
élève
.

L'
élève
effectue
ou
participe
au
minimum
un
stage
et
lorsque
nous
parlons
de
un
stage
,
il
s'
agit
de
celui
de
un
seul
élève
.

Le
stage
se
déroule
en
un
seul
lieu
,
même
si
des
implantations
différentes
de
un
même
lieu
peuvent
exister
.

Nous
considérons
que
celles
-ci
ne
sont
pas
déterminantes
dans
l'
activité
de
consultation
et
de
mise
à
jour
que
nous
envisageons
.

Un
lieu
accueille
généralement
plusieurs
stages
.

Un
stage
est
supervisé
par
un
seul
maître
de
stage
,
mais
un
maître
de
stage
supervise
habituellement
plusieurs
stages
.

Un
stage
commence
à
une
certaine
date
et
se
termine
à
une
autre
.

Une
date
est
potentiellement
la
date
de
début
de
plusieurs
stages
et
la
date
de
fin
de
plusieurs
autres
.

Tout
cela
nous
donne
le
schéma
ERA
suivant
que
nous
allons
remanier
.

4.3.1.1
Réflexion
sur
les
cardinalités
Plusieurs
éléments
sont
à
prendre
en
compte
à
propos
du
associations
.

S'
agit
-il
de
relations
de
un
à
un
,
de
un
à
plusieurs
ou
de
plusieurs
à
plusieurs
?

Ceci
concerne
les
deux
côtés
de
l'
association
.

si
on
s'
intéresse
à
un
seul
de
deux
côtés
,
il
faut
également
déterminer
si
la
cardinalité
démarre
à
zéro
ou
à
un
.

La
réponse
à
la
première
question
est
évidente
si
la
description
du
domaine
est
claire
.

La
réponse
à
la
deuxième
dépend
de
l'
importance
accordée
à
l'
entité
.

Existe
-t-elle
en
l'
absence
de
instanciation
de
27
Il
est
clair
que
de
tels
choix
orientent
la
modélisation
et
que
celle
-ci
représente
plus
ou
moins
bien
la
réalité
.

Étienne
Vandeput
–
©
Cefis
2005
92
Publier
sur
le
Web
-
Perfectionnement
l'
association
?

si
oui
,
zéro
est
le
bon
choix
.

Par
exemple
,
un
lieu
de
stage
peut
exister
dans
la
base
de
données
alors
que
aucun
élève
ne
s'
y
rend
au
cours
de
cette
année
.

de
même
,
un
maître
de
stage
peut
se
retrouver
occasionnellement
sans
élèves
à
superviser
.

Cela
n'
empêche
pas
le
système
de
les
prendre
en
compte
pour
une
série
de
traitements
,
comme
par
exemple
,
leur
permettre
de
consulter
les
informations
sur
les
stages
.

Date
est
la
date
de
début
de
0-N
0-N
début
commence
le
Élève
participe
à
fin
1-1
1-1
Stage
est
exécuté
par
est
la
date
de
fin
de
se
termine
le
est
supervisé
par
participation
1-N
appartient
à
1-1
appartenance
se
compose
de
1-N
Classe
supervise
Maître
supervision
1-1
1-1
se
déroule
à
0-N
1-1
déroulement
accueille
0-N
Lieu
Côté
dates
,
on
admettra
facilement
que
une
date
donnée
ne
corresponde
au
début
ou
à
la
fin
de
aucun
stage
.

mais
en
ce
qui
les
concerne
,
nous
allons
quelque
peu
simplifier
le
schéma
.

4.3.2
Améliorations
du
schéma
4.3.2.1
Retouches
du
schéma
conceptuel
à
ce
stade
,
il
importe
de
se
demander
si
toutes
les
entités
sont
vraiment
utiles
dans
le
sens
où
,
lors
du
passage
au
schéma
logique
,
elles
vont
donner
lieu
à
des
tables
.

Dans
le
cas
présent
,
il
est
aussi
simple
de
considérer
que
l'
entité
stage
a
comme
attributs
une
date
de
début
et
une
date
de
fin
.

Cela
réduira
le
nombre
de
tables
à
gérer
.

de
même
,
l'
activité
envisagée
fait
peu
de
place
à
la
notion
de
classe
.

Cette
entité
peut
donc
être
transformée
en
attribut
de
l'
entité
élève
.

Pour
le
lieu
,
c'
est
plus
délicat
car
nous
souhaitons
que
les
responsables
de
un
lieu
de
stage
puissent
également
bénéficier
du
services
de
l'
application
.

Nous
devons
donc
maintenir
lieu
comme
entité
.

Étienne
Vandeput
–
©
Cefis
2005
93
Publier
sur
le
Web
-
Perfectionnement
4.3.2.2
Attributs
du
entités
et
du
associations
Il
est
bon
que
chacune
du
entités
possède
un
identifiant
.

de
même
,
notre
application
étant
utilisée
par
différents
types
de
clients
,
il
est
bon
que
chacun
de
ceux
-ci
possède
en
outre
un
mot
de
passe
.

On
pourrait
également
faire
évoluer
le
schéma
en
ce
sens
que
un
lieu
de
stage
pourrait
compter
plusieurs
utilisateurs
qui
auraient
chacun
un
identifiant
et
un
mot
de
passe
.

Nous
allons
simplifier
ce
dernier
problème
en
considérant
,
ce
qui
est
raisonnable
,
que
ces
utilisateurs
potentiels
se
servent
du
même
identifiant
et
du
même
mot
de
passe
.

Ce
faisant
,
nous
pouvons
créer
deux
attributs
de
l'
entité
lieu
qui
les
représentent
.

Les
autres
attributs
dépendent
essentiellement
des
informations
dont
on
souhaite
disposer
à
propos
du
entités
et
des
associations
mises
en
évidence
.

Citons
au
minimum
comme
exemples
:
un
nom
et
un
prénom
pour
les
élèves
et
les
maîtres
,
une
dénomination
et
une
adresse
principale
pour
les
lieux
et
une
note
pour
la
participation
à
un
stage
.

Nous
avons
décidé
que
la
note
était
un
attribut
de
la
participation
,
bien
que
dans
ce
cas
,
et
vu
la
cardinalité
1-1
entre
cette
association
et
l'
entité
stage
,
nous
aurions
pu
en
faire
directement
un
attribut
de
l'
entité
.

Voici
donc
comment
évolue
notre
schéma
.

Élève
login
pw
nom
prenom
classe
participe
à
1-N
Stage
est
exécuté
par
participation
note
est
supervisé
par
id
domaine
date_debut
1-1
date_fin
1-1
se
déroule
à
supervise
supervision
0-N
Maître
login
pw
nom
prenom
1-1
déroulement
accueille
0-N
Lieu
login
pw
denomination
adresse
nom
prenom
Il
est
un
peu
anormal
de
voir
apparaître
des
attributs
nom
et
prénom
dans
l'
entité
lieu
.

Il
s'
agit
du
coordonnées
de
un
responsable
dont
nous
n'
avons
pas
voulu
faire
une
entité
.

Cet
aménagement
,
non
obligatoire
,
est
dû
à
l'
intérêt
de
avoir
une
structure
semblable
pour
l'
ensemble
du
utilisateurs
de
l'
application
(
élèves
,
maîtres
de
stage
et
responsables
de
site
)
qui
autorise
des
simplifications
au
niveau
du
code
(
voir
plus
loin
)
.

4.4
Le
schéma
logique
La
transformation
du
schéma
conceptuel
en
schéma
logique
est
quasi
automatique
.

Seules
les
associations
de
plusieurs
à
plusieurs
donnent
naissance
à
des
tables
supplémentaires
.

Il
n'
y
en
a
pas
dans
l'
exemple
.

Nous
aurons
donc
seulement
quatre
tables
correspondant
au
entités
du
schéma
.

Étienne
Vandeput
–
©
Cefis
2005
94
Publier
sur
le
Web
-
Perfectionnement
L'
attribut
note
se
retrouve
dans
la
table
stage
qui
,
occupant
une
place
centrale
dans
le
schéma
,
contiendra
des
clés
étrangères
permettant
les
liens
au
entités
élève
,
maître
et
lieu
.

Ces
attributs
porteront
les
noms
de
id_eleve
,
id_lieu
et
id_maitre
.

Élève
login
pw
nom
prenom
classe
Stage
id
domaine
date_debut
date_fin
note
id_eleve
id_maitre
id_lieu
Maître
login
pw
nom
prenom
Lieu
login
pw
denomination
adresse
nom
prenom
Nous
constatons
que
chacune
du
tables
possède
un
identifiant
(
clé
primaire
)
et
que
la
table
stage
possède
des
clés
étrangères
permettant
la
liaison
avec
d'
autres
tables
.

D'
autres
attributs
intéressants
pourraient
également
figurer
en
fonction
du
besoins
,
mais
nous
avons
voulu
nous
concentrer
sur
la
démarche
en
évitant
de
noyer
les
explications
de
celle
-ci
dans
une
foule
de
détails
.

4.5
La
construction
de
une
interface
Une
interface
de
communication
entre
des
êtres
humains
et
une
application
se
doit
de
être
utile
et
utilisable
.

En
gros
,
l'
utilité
se
mesure
à
la
coïncidence
entre
les
attentes
du
utilisateurs
(
ses
buts
)
lorsqu'
il
utilise
l'
application
et
les
fonctionnalités
proposées
par
celle
-ci
au
travers
de
cette
interface
.

Alors
que
l'
utilisabilité
mesure
plutôt
le
degré
de
facilité
de
utilisation
de
l'
interface
.

4.5.1
Utilité
Une
bonne
manière
de
développer
une
interface
utile
est
de
imaginer
les
traitements
que
l'
utilisateur
aura
envie
de
faire
effectuer
par
l'
application
.

Ceci
peut
se
faire
de
différentes
manières
:
interview
du
utilisateurs
potentiels
,
examen
de
produits
équivalents
,
…
Dans
une
application
comme
celle
qui
nous
occupe
,
il
s'
agit
surtout
de
déterminer
quelles
sont
les
requêtes
de
sélection
de
informations
qui
risquent
de
avoir
le
plus
de
succès
au
yeux
du
utilisateurs
et
quelles
sont
les
requêtes
de
mise
à
jour
qui
sont
souhaitables
,
par
qui
.

Nous
avons
repris
ici
quelques
requêtes
possibles
.

Nous
n'
avons
pas
effectué
un
travail
exhaustif
qui
nous
aurait
mené
trop
loin
.

L'
interface
que
nous
avons
créée
,
dans
l'
état
de
son
développement
,
permet
de
répondre
au
besoins
suivants
.


Pour
un
élève
:
o
obtenir
la
liste
du
superviseurs
de
stage
,
o
obtenir
la
liste
du
lieux
et
dates
de
ses
stages
,
Étienne
Vandeput
à
à
Cefis
2005
95
Publier
sur
le
Web
-
Perfectionnement
o
prendre
connaissance
de
son
lieu
de
stage
à
une
date
donnée
.


Pour
un
maître
de
stage
:
o
obtenir
la
liste
du
élèves
qu'
il
supervise
,
o
ajouter
un
élève
dans
la
base
de
données
,
o
programmer
un
stage
pour
un
élève
.

Nous
n'
avons
pas
programmé
de
requête
pour
les
responsables
de
site
,
mais
les
exemples
pris
suffisent
à
faire
comprendre
quel
est
le
principe
de
cette
programmation
.

Beaucoup
de
contraintes
devraient
être
prises
en
compte
.

Elles
relèvent
de
ce
que
l'
on
appelle
la
prévention
du
erreurs
dans
la
conception
du
interfaces
homme-machine
(
Ihm
)
.

Parmi
celles
-ci
notons
,
par
exemple
,
la
vérification
de
l'
unicité
de
l'
identifiant
pour
chacun
du
utilisateurs
dans
sa
catégorie
,
le
non
chevauchement
du
périodes
de
stage
pour
un
même
élève
(
quoique
)
,
la
validité
du
formats
de
date
utilisés
,
la
validité
du
dates
elles-mêmes
,
à
Chacune
de
ces
contraintes
,
considérée
séparément
,
ne
demande
pas
un
gros
effort
de
programmation
.

La
détermination
et
la
prise
en
compte
de
toutes
les
contraintes
est
un
problème
qui
requiert
une
analyse
fouillée
et
surtout
,
l'
écriture
de
nombreuses
lignes
de
code
.

4.5.2
Utilisabilité
L'
utilisabilité
se
mesure
davantage
par
la
manière
dont
le
concepteur
de
l'
interface
facilite
le
travail
de
l'
utilisateur
en
le
guidant
dans
ses
actions
,
en
réduisant
autant
que
faire
se
peut
sa
charge
de
travail
,
en
lui
évitant
de
commettre
des
erreurs
,
notamment
.

Sans
entrer
dans
l'
écriture
de
un
traité
sur
l'
ergonomie
du
interfaces
,
nous
donnons
quelques
conseils
permettant
de
les
rendre
relativement
ergonomiques
.

Par
la
création
de
une
feuille
de
style
,
il
est
possible
de
promouvoir
:
à
l'
utilisation
de
une
police
de
caractères
lisibles
(
larges
et
sans
empattements
)
,
à
la
non
prolifération
du
polices
(
deux
au
plus
)
,

du
choix
appropriés
pour
l'
appariement
du
couleurs
,

à
La
création
de
modèles
,
et
notamment
,
l'
utilisation
de
calques
ou
de
tableaux
,
permet
de
gérer
une
certaine
uniformité
au
niveau
de
la
mise
en
page
et
favorise
,
par
là
,
un
bon
guidage
de
l'
utilisateur
.

Ce
sont
les
options
essentielles
que
nous
avons
prises
dans
l'
écriture
du
scripts
php
qui
suivent
.

4.5.3
Création
de
modèles
Avant
de
aborder
la
création
de
modèles
,
il
convient
de
avoir
une
idée
claire
de
la
manière
dont
les
fichiers
seront
organisés
en
dossiers
,
sans
quoi
,
toute
référence
correcte
est
impossible
.

Nous
avons
imaginé
de
procéder
comme
suit
(
voir
illustration
au
point
4.7
)
:
à
un
dossier
scripts
pour
contenir
les
différentes
page
de
l'
application
,
la
plupart
donnant
lieu
à
l'
écriture
de
scripts
Php
à
un
dossier
image
pour
y
placer
toutes
les
image
du
site
à
un
dossier
modeles
qui
contiendra
les
fichiers
permettant
des
économies
de
code
Le
fichier
cefis.css
contenant
la
feuille
de
style
,
quant
à
lui
,
se
trouvera
à
la
racine
du
site
.

de
la
sorte
,
il
n'
y
a
pas
d'
équivoque
sur
la
manière
de
référencer
les
fichiers
.

Étienne
Vandeput
–
©
Cefis
2005
96
Publier
sur
le
Web
-
Perfectionnement
4.5.3.1
Un
modèle
basique
si
l'
on
considère
ce
que
doit
être
une
page
de
un
site
tel
celui
que
nous
voulons
mettre
en
place
,
nous
pouvons
en
dégager
un
certain
nombre
de
caractéristiques
communes
,
notamment
en
ce
qui
concerne
la
répartition
de
diverses
zones
,
la
présence
permanente
de
certaines
informations
(
un
bandeau
,
par
exemple
)
,
la
présence
de
certains
liens
,
à
Voici
un
modèle
de
base
.

Il
est
constitué
de
une
zone
de
entête
(
entete.php
)
,
de
une
zone
de
pied
de
page
(
pieddepage.php
)
.

Le
modèle
(
modele.php
)
mentionnera
l'
inclusion
du
code
de
ces
deux
fichiers
.

Voici
son
propre
code
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<em>&lt
;
Corps
de
texte
ici&gt
;
</em>
</td>
</tr>
</table>
<
?

php
include('../modeles/pieddepage.php')
;
?

à
On
pourrait
s'
étonner
de
constater
que
la
référence
au
fichiers
à
inclure
fasse
appel
au
dossier
parent
pour
ensuite
se
replonger
dans
le
dossier
modeles
(
../modeles/
)
alors
que
les
fichiers
se
trouvent
dans
ce
même
dossier
modeles
.

Il
faut
bien
s'
imaginer
que
le
fichier
construit
va
servir
de
modèle
à
des
fichiers
se
trouvant
dans
le
dossier
scripts
.

C'
est
la
raison
pour
laquelle
il
faut
utiliser
une
référence
plus
complète
.

Le
corps
du
modèle
est
un
tableau
de
une
seule
cellule
contenant
un
titre
générique
et
un
texte
par
défaut
qui
sera
à
supprimer
lors
de
la
création
de
une
page
.

L'
intérêt
du
texte
par
défaut
est
de
signaler
à
l'
usager
que
il
est
en
présence
du
modèle
.

Ce
modèle
est
très
générique
et
peut
donner
naissance
à
d'
autres
modèles
plus
complets
,
résultant
de
l'
inclusion
de
autres
fichiers
.

Voici
le
code
du
fichier
entete.php
à
<html>
<head>
<title>Institut
ABC</title>
<meta
http-equiv="Content-Type
"
content="text/html
;
charset=iso-8859-1">
<link
href="../cefis.css
"
rel="stylesheet
"
type="text/css">
</head>
<body>
<table
width="555
"
height="113
"
border="1
"
cellpadding="10
"
cellspacing="0
"
bordercolor="#FF8888
"
bgcolor="#FFDFD5
"
class="grand">
<tr>
<td
height="109">
<div
align="center"><img
src="../images/cathedrale.jpg
"
width="112
"
height="89
"
align="left">
<span
class="grand">Institut
ABC</span>
</div>
Étienne
Vandeput
–
©
Cefis
2005
97
Publier
sur
le
Web
-
Perfectionnement
</td>
</tr>
</table>
Ce
fichier
contient
le
code
initial
et
,
en
particulier
,
la
liaison
à
la
feuille
de
style
cefis.css
dont
le
code
suit
.

Un
tableau
de
une
seule
cellule
contient
un
calque
dans
lequel
on
trouve
la
photo
et
le
titre
du
bandeau
.

Voici
le
code
du
fichier
pieddepage.php
.

<table
width="555
"
border="1
"
cellpadding="10
"
cellspacing="0
"
bordercolor="#FF8888
"
bgcolor="#FFDFD5">
<tr>
<td>
<a
href="mailto:webmaster@det.fundp.ac.be">Contacter</a><span
class="gris">
le
Webmaster</span>
</td>
</tr>
</table>
</body>
</html>
Ce
dernier
contient
la
terminaison
du
fichier
,
mais
aussi
un
tableau
de
une
cellule
contenant
un
lien
vers
un
message
électronique
à
l'
adresse
du
Webmaster
.

Le
code
du
modèle
,
interprété
ci-dessus
,
n'
utilise
qu'
une
petite
partie
du
styles
définis
dans
la
feuille
de
style
contenue
dans
le
fichier
cefis.css
et
qui
est
décrite
ci-après
.

Étienne
Vandeput
–
©
Cefis
2005
98
Publier
sur
le
Web
-
Perfectionnement
body
à
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
background-color
:
Fffffff
;
font-size
:
11px
}
td
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
font-size
:
11px
;
margin
:
0px
;
padding
:
5px
;
}
a
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
color
:
#00AAFF
;
text-decoration
:
none
;
font-weight
:
bold
;
font-size
:
11px
à
a:hover
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
color
:
#003399
;
font-weight
:
bold
;
background-color
:
Fdffffff
;
font-size
:
11px
}
a:link
à
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
font-size
:
11px
}
div
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
11px
;
font-style
:
normal
à
br
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
11px
;
font-style
:
normal
;
margin-bottom
:
auto
à
p
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
margin-bottom
:
auto
;
font-size
:
11px
}
ol
{
font-family
:
sans-serif
;
list-style-image
:
none
}
Étienne
Vandeput
–
©
Cefis
2005
99
Publier
sur
le
Web
-
Perfectionnement
ul
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
list-style-image
:
url(images/puce.gif)
}
li
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
padding-bottom
:
3px
;
font-size
:
11px
}
hr
{
border-color
:
#333399
black
black
;
border-top-width
:
thick
à
h1
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#333399
;
border-color
:
black
Fdffffff
;
width
:
auto
;
margin-right
:
0px
;
margin-left
:
0px
;
border
:
Fdffffff
;
border-top-width
:
0px
;
border-right-width
:
10px
;
border-bottom-width
:
0px
;
border-left-width
:
10px
;
font-size
:
13px
;
background-color
:
#FFFFCC
;
padding-right
:
10px
;
padding-left
:
10px
}
h2
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
13px
;
font-weight
:
bold
;
color
:
#CC0033
;
background-color
:
#FFE4CA
;
font-style
:
normal
;
padding-right
:
10px
;
padding-left
:
10px
;
border-color
:
black
#FFE4CA
;
width
:
auto
;
margin-right
:
0px
;
margin-left
:
0px
;
border
:
#FFE4CA
;
border-top-width
:
0px
;
border-right-width
:
10px
;
border-bottom-width
:
0px
;
border-left-width
:
10px
;
text-align
:
center
}
Étienne
Vandeput
–
©
Cefis
2005
100
Publier
sur
le
Web
-
Perfectionnement
h3
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
13px
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#CC0033
;
width
:
auto
;
border-width
:
10px
}
h4
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
13px
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#333399
;
background-color
:
Fdfffafb
;
padding-right
:
10px
;
padding-left
:
10px
;
width
:
auto
;
border
:
1px
solid
#333399
;
padding-top
:
2px
;
padding-bottom
:
2px
;
}
h5
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
13px
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#FFFFCC
;
width
:
auto
;
border-width
:
10px
;
background-color
:
#333399
;
padding-right
:
10px
;
padding-left
:
10px
}
h6
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
13px
;
font-weight
:
bold
;
color
:
#CC0033
;
background-color
:
#FFE4CA
;
font-style
:
normal
;
width
:
auto
;
margin-right
:
0px
;
margin-left
:
0px
;
border
:
1px
solid
#CC0033
;
padding
:
10px
;
}
b
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
11px
;
font-style
:
normal
;
font-weight
:
bold
}
Étienne
Vandeput
–
©
Cefis
2005
101
Publier
sur
le
Web
-
Perfectionnement
.important1
à
font-weight
:
bold
;
color
:
#FF0000
}
.important2
{
font-weight
:
bold
}
.different
{
font-style
:
italic
}
.inactif
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-size
:
11px
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#999999
}
.encart
{
background-color
:
#FFFFCC
;
color
:
#333399
;
padding-right
:
20px
;
padding-left
:
20px
;
padding-top
:
20px
;
padding-bottom
:
20px
;
font-weight
:
normal
à
.enum1
{
list-style-image
:
url(images/puce.gif)
}
.retrait
{
margin-left
:
20px
}
.justifie
à
text-align
:
justify
à
.grand
{
font-size
:
24px
;
color
:
#999999
}
.blanc
{
color
:
Fffffff
à
.nouveau
{
color
:
Fffffff
;
font-weight
:
bolder
;
Étienne
Vandeput
à
©
Cefis
2005
102
Publier
sur
le
Web
-
Perfectionnement
border
:
#FF0000
;
background-color
:
#FF0000
;
padding-top
:
3px
;
padding-bottom
:
3px
;
text-align
:
center
;
font-size
:
13px
à
.titre
{
font-size
:
15px
;
color
:
#333399
;
font-weight
:
bold
;
border-color
:
black
black
#333399
;
border-style
:
solid
;
border-top-width
:
0px
;
border-right-width
:
0px
;
border-bottom-width
:
3px
;
border-left-width
:
0px
}
.intertitre
{
font-size
:
13px
;
color
:
#990000
;
font-weight
:
bold
;
border-color
:
black
black
#990033
;
border-style
:
solid
;
border-top-width
:
0px
;
border-right-width
:
0px
;
border-bottom-width
:
1px
;
border-left-width
:
0px
à
.evidence
{
color
:
#FFFFCC
;
background-color
:
#333399
;
padding-right
:
20px
;
padding-top
:
20px
;
padding-bottom
:
20px
;
padding-left
:
20px
}
.gris
{
font-family
:
Verdana
,
Arial
,
Helvetica
,
sans-serif
;
font-style
:
normal
;
font-weight
:
bold
;
color
:
#999999
;
font-size
:
11px
}
4.5.3.2
du
sous-modèles
Le
principe
du
inclusions
de
fichiers
que
nous
avons
utilisé
pour
entete.php
et
pieddepage.php
peut
être
étendu
à
d'
autres
fins
comme
,
par
exemple
,
l'
ajout
de
boutons
spécifiques
,
de
une
barre
de
navigation
,
…
de
manière
à
créer
d'
autres
modèles
.

Il
est
clair
que
la
notion
de
modèle
telle
que
définie
ici
est
beaucoup
moins
riche
que
la
notion
de
modèle
pouvant
être
implantée
par
des
logiciels
de
édition
HTML
sophistiqués
.

Le
modèle
est
chargé
pour
créer
la
base
du
document
et
dès
l'
instant
où
ce
document
est
enregistré
sous
un
nom
propre
,
différent
de
celui
du
Étienne
Vandeput
–
©
Cefis
2005
103
Publier
sur
le
Web
-
Perfectionnement
modèle
,
il
n'
y
a
plus
aucune
liaison
avec
ce
dernier
.

Il
y
a
donc
un
grand
intérêt
à
réfléchir
sérieusement
,
non
seulement
à
l'
élaboration
de
ces
modèles
,
mais
aussi
à
l'
arborescence
du
fichiers
,
déterminante
en
ce
qui
concerne
les
liens
relatifs
décrivant
les
fichiers
à
inclure
.

Dans
notre
exemple
,
nous
avons
créé
deux
autres
modèles
,
pas
très
différents
du
modèle
général
,
mais
incluant
des
liens
vers
certaines
page
importantes
de
l'
application
.

Ces
modèles
sont
liés
au
interactions
minimales
que
nous
souhaitons
dans
le
site
,
à
savoir
:
à
l'
utilisateur
devra
se
connecter
au
site
(
à
partir
de
une
page
de
login
)
à
l'
utilisateur
devra
se
déconnecter
du
site
(
ce
qui
ne
sera
possible
qu'
à
partir
de
certaines
page
seulement
)
à
l'
utilisateur
souhaitera
régulièrement
revenir
à
l'
ensemble
du
fonctionnalités
qui
lui
sont
autorisées
(
également
possible
à
partir
de
certaines
page
)
dès
lors
,
nous
envisageons
un
modèle
qui
inclut
un
lien
de
retour
vers
le
menu
(
modele_retour.php
)
et
un
modèle
qui
inclut
un
lien
pour
la
déconnexion
(
modele_deconnexion.php
)
.

Nous
construisons
,
dans
des
fichiers
séparés
,
la
partie
de
code
concernant
l'
ajout
de
ces
liens
.

Les
nouveaux
modèles
sont
construits
à
partir
du
modèle
basique
.

Voici
de
abord
le
code
du
fichiers
modèles
en
commençant
par
modele_retour.php
:
<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<p><em>&lt
;
Corps
de
texte
ici&gt
;
</em></p></td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
Ce
modèle
est
construit
à
partir
du
code
du
modèle
de
base
.

On
y
a
simplement
ajouté
l'
inclusion
de
un
fichier
retour_menu.php
dont
voici
aussi
le
code
:
<table
width="555
"
border="0
"
cellspacing="2
"
cellpadding="5">
<tr>
<td>&nbsp
;
</td>
<td><div
align="right">Retour
au
<a
href='menu.php
?

SID'>menu</a></div></td>
</tr>
</table>
La
structure
de
tableau
à
une
cellule
est
à
nouveau
privilégiée
pour
y
placer
ce
lien
.

Notez
que
celui
-ci
renvoie
vers
un
script
menu.php
qui
est
encore
à
écrire
.

de
plus
,
une
valeur
est
fournie
à
ce
script
sous
la
forme
de
la
constante
Sid
qui
n'
est
rien
de
autre
que
l'
identifiant
de
la
session
.

Voici
l'
autre
sous-modèle
modele_deconnexion.php
.

Sa
construction
est
identique
.

<
?

php
include('../modeles/entete.php')
;
?

à
Étienne
Vandeput
–
©
Cefis
2005
104
Publier
sur
le
Web
-
Perfectionnement
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h1>Système
de
gestion
du
stages</h1>
<p><em>&lt
;
Corps
de
texte
ici&gt
;
</em></p></td>
</tr>
</table>
<
?

php
include('../modeles/deconnexion.php')
;
include('../modeles/pieddepage.php')
;
?

à
Le
fichier
inclus
,
deconnexion.php
,
n'
est
composé
que
de
une
seule
ligne
dans
le
cas
présent
.

Il
est
donc
peu
utile
de
en
faire
un
fichier
à
inclure
.

Toutefois
,
c'
est
le
principe
que
nous
souhaitons
illustrer
ici
.

Il
contient
un
lien
vers
le
fichier
login.php
dont
le
code
est
évidemment
à
écrire
.

<p><a
href="login.php">Déconnecter</a></p>
à
ce
stade
du
développement
de
l'
application
,
l'
arborescence
du
site
se
présente
comme
suit
.

Un
dossier
image
contient
les
image
du
site
,
en
ce
comprises
,
les
image
correspondant
à
des
puces
qui
auraient
pu
être
définies
dans
les
styles
.

Un
dossier
modeles
contient
le
modèle
de
base
,
les
deux
sousmodèles
et
les
quatre
fichiers
pour
les
inclusions
de
code
.

Le
fichier
contenant
la
définition
de
la
feuille
de
style
est
resté
au
niveau
de
la
racine
du
site
.

Il
reste
maintenant
à
construire
les
différents
scripts
sans
trop
avoir
à
se
préoccuper
de
la
mise
en
page
.

Chaque
fichier
sera
construit
à
partir
de
un
du
deux
sous-modèles
.

Dans
une
conception
plus
sophistiquée
,
on
pourrait
avoir
une
réflexion
plus
approfondie
permettant
de
raffiner
davantage
les
modèles
et
donc
la
mise
en
page
et
en
forme
.

4.5.4
La
connexion
Le
point
de
départ
de
l'
application
est
une
page
de
connexion
.

Celle
-ci
est
généralement
sobre
et
se
limite
à
la
demande
de
fourniture
de
un
identifiant
et
de
un
mot
de
passe
.

Elle
peut
proposer
d'
autres
services
tels
:
à
la
possibilité
de
créer
soi
même
son
identifiant
et
son
mot
de
passe
(
utilité
à
estimer
en
fonction
de
la
visibilité
du
site
-
Internet
ou
intranet
-
et
la
capacité
à
gérer
les
inscriptions
bidons
)
à
la
possibilité
de
renvoyer
le
mot
de
passe
oublié
à
un
utilisateur
sur
base
de
renseignements
qu'
il
aurait
préalablement
fournis
à
…
Nous
avons
considéré
,
dans
notre
exemple
,
que
chaque
utilisateur
recevait
un
identifiant
et
un
mot
de
passe
de
la
part
de
l'
administrateur
.

On
peut
fournir
un
principe
simple
de
construction
du
identifiants
Étienne
Vandeput
–
©
Cefis
2005
105
Publier
sur
le
Web
-
Perfectionnement
(
par
exemple
,
la
première
lettre
du
prénom
suivie
du
lettres
du
nom
à
concurrence
de
huit
caractères
)
et
attribuer
la
même
information
comme
mot
de
passe
en
demandant
à
l'
utilisateur
de
en
changer
dès
la
première
connexion
.

Cette
méthode
présente
toutefois
l'
inconvénient
que
certains
utilisateurs
ne
changeront
jamais
leur
mot
de
passe
,
permettant
à
d'
autres
qui
connaissent
la
manière
de
les
construire
,
de
s'
en
servir
de
manière
peu
loyale
.

4.5.4.1
Login
La
page
de
login
est
un
formulaire
au
sens
HTML
du
terme
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC"><h6>Connexion
au
syst&egrave
;
me
de
gestion
du
stages</h6>
<form
name="form1
"
method="post
"
action="connexion.php">
<p>
<label>
Param&egrave
;
tres
de
connexion:</label>
</p>
<p>
<label>
<input
name="categorie
"
type="radio
"
value="1
"
checked>
Él&egrave
;
ve</label>
<br>
<label>
<input
type="radio
"
name="categorie
"
value="2">
Maître
de
stage</label>
<br>
<label>
<input
type="radio
"
name="categorie
"
value="3">
Responsable
de
site</label>
</p>
<p>ID
<input
type="text
"
name="login">
</p>
<p>Mot
de
passe
<input
type="password
"
name="pw">
<label></label>
</p>
<p>
<input
type="submit
"
name="Submit
"
value="Aller">
</p>
</form>
Étienne
Vandeput
–
©
Cefis
2005
106
Publier
sur
le
Web
-
Perfectionnement
<p>&nbsp
;
</p></td>
</tr>
</table>
<
?

php
include('../modeles/pieddepage.php')
;
?

à
Cette
page
est
construite
à
partir
du
modèle
basique
(
sans
lien
de
retour
ou
de
déconnexion
)
.

Le
formulaire
se
compose
de
un
groupe
de
boutons
radios
,
de
deux
zones
de
texte
pour
la
saisie
de
l'
identifiant
et
du
mot
de
passe
et
de
un
bouton
de
soumission
.

Il
n'
y
a
pas
de
contrôle
de
format
et
de
validation
prévus
ici
pour
éviter
la
prolifération
de
code
,
mais
il
est
certain
que
des
scripts
JavaScript
sont
en
mesure
de
gérer
ces
problèmes
potentiels
.

Le
groupe
de
boutons
sert
à
identifier
la
catégorie
de
utilisateur
à
laquelle
on
a
affaire
.

de
la
sorte
,
le
script
associé
à
la
soumission
(
connexion.php
)
pourra
transmettre
cette
information
de
manière
à
fournir
des
menus
en
rapport
avec
cette
catégorie
.

4.5.4.2
Connexion
Le
script28
précédent
provoque
(
lorsque
le
bouton
de
soumission
du
formulaire
est
activé
)
l'
exécution
du
script
connexion.php
.

Celui
se
contente
de
sélectionner
la
bonne
table
pour
la
vérification
de
la
correspondance
identifiant
-
mot
de
passe
et
de
proposer
des
alternatives
en
cas
de
erreur
.

si
aucune
erreur
n'
est
détectée
,
un
lien
permet
de
continuer
.

Ce
lien
fait
exécuter
le
script
menu.php
tout
en
fournissant
l'
identificateur
de
session
.

28
Le
mot
script
est
utilisé
dans
le
sens
large
de
partie
de
code
contenant
des
instructions
en
Php
.

Étienne
Vandeput
–
©
Cefis
2005
107
Publier
sur
le
Web
-
Perfectionnement
<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<
?

php
$_SESSION['categorie']=$_POST['categorie
'
]
;
$_SESSION['login']=$_POST['login
'
]
;
$_SESSION['pw']=$_POST['pw
'
]
;
echo
"
<h6>Système
de
gestion
du
stages</h6>
"
;
$c=$_POST['categorie
'
]
;
if($c==1){$t='eleve
'
;
}
elseif($c==2){$t='maitre
'
;
}
else{$t='lieu
'
;
}
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('gestionstages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$login=$_POST['login
'
]
;
$sqlquery="select
nom,prenom,login,pw
from
$t
where
login='$login
'
"
;
$queryresult=mysql_query($sqlquery)
;
if(mysql_num_rows($queryresult)==0){
echo
"
<p>Identifiant
inconnu
!

</p>
"
;
echo
"
<p><a
href='login.php'>Retour</a></p>
"
;
}
else{
$row=mysql_fetch_array($queryresult,MYSQL_ASSOC)
;
if($row['pw
'
]
!

=$_POST['pw']){
echo
"
Mot
de
passe
incorrect
!

"
;
echo
"
çpç
href='login.php'>Retour</a></p>
"
;
}
else{echo
"
<p>Bienvenue
<strong>".$row['prenom
'
]
.
"

"
.$row['nom']."</strong>
"
."</p>
"
;
echo
"
<p><a
href='menu.php
?

"
.SID."'>Continuer</a></p>
"
;
include('../modeles/deconnexion.php')
;
}
}
?

à
Étienne
Vandeput
–
©
Cefis
2005
108
Publier
sur
le
Web
-
Perfectionnement
</tr>
</table>
<
?

php
include('../modeles/pieddepage.php')
;
?

à
La
création
de
une
session
et
la
génération
de
un
identifiant
de
session
se
fait
grâce
à
la
fonction
session_start
.

Cette
instruction
doit
être
la
première
si
on
utilise
la
technique
du
cookies
pour
retrouver
les
variables
de
session
.

Les
valeurs
fournies
par
le
formulaire
(
variable
$_POST
)
sont
placées
dans
le
tableau
global
prédéfini
$_SESSION
,
de
façon
à
pouvoir
être
retrouvées
grâce
à
l'
identifiant
de
session
Sid
.

Comme
ce
script
doit
également
identifier
l'
utilisateur
,
la
page
à
produire
pourrait
ne
pas
comprendre
de
retour
au
menu
,
ni
de
possibilité
de
déconnexion
.

C'
est
la
raison
pour
laquelle
cette
page
est
créée
à
partir
du
modèle
basique
.

On
a
ajouté
une
instruction
générant
un
lien
de
retour
à
la
page
précédente
et
l'
instruction
permettant
la
déconnexion
,
uniquement
dans
les
cas
concernés
par
ces
options
.

Les
autres
page
seront
toutes
créées
sur
base
de
un
du
deux
sous-modèles
.

En
cas
de
identification
,
le
script
appelé
est
menu.php
.

Ce
script
va
générer
un
menu
qui
va
dépendre
du
type
de
utilisateur
connecté
.

L'
identificateur
de
session
est
fourni
dans
l'
adresse
(
ce
qui
est
nécessaire
si
le
client
web
de
l'
utilisateur
est
configuré
pour
ne
pas
accepter
les
cookies
)
.

4.5.5
Les
scripts
4.5.5.1
Menu
Le
script
contient
la
même
instruction
de
démarrage
de
session
qui
permet
de
récupérer
,
si
nécessaire
,
les
variables
de
session
.

La
page
est
construite
sur
le
modèle
modele_deconnexion.php
.

La
variable
$t
contiendra
le
nom
de
la
table
à
sélectionner
.

Ce
nom
est
évidemment
fonction
de
la
catégorie
.

Le
menu
est
également
constitué
sur
base
de
la
catégorie
de
l'
utilisateur
.

Les
adresses
de
chacun
du
liens
sont
suivies
de
l'
identifiant
de
session
qui
permet
de
propager
,
notamment
,
la
catégorie
de
l'
utilisateur
,
mais
aussi
d'
autres
informations
.

<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<
?

php
$c=$_SESSION['categorie
'
]
;
if($c==1){$t='eleve
'
;
}
Étienne
Vandeput
–
©
Cefis
2005
109
Publier
sur
le
Web
-
Perfectionnement
elseif($c==2){$t='maitre
'
;
}
else{$t='lieu
'
;
}
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('stages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$login=$_SESSION['login
'
]
;
$sqlquery="select
nom,prenom,login,pw
from
$t
where
login='$login
'
"
;
$queryresult=mysql_query($sqlquery)
;
$row=mysql_fetch_array($queryresult,MYSQL_ASSOC)
;
echo
"
<p>Session
de
<strong>".$row['prenom
'
]
.
"

"
.$row['nom']."</strong>
"
."</p>
"
;
echo
"
<h1>Faites
votre
choix</h1>
"
;
if($c==1){
echo
"
<p>Obtenir
la
liste
du
lieux
et
dates
de
vos
stages
<a
href='stages_eleve.php
?

SID'>Ici</a></p>
"
;
echo
"
<p>Savoir
où
vous
êtes
en
stage
à
une
date
donnée
<a
href='stages_par_date.php
?

SID'>Ici</a></p>
"
;
echo
"
<p>Obtenir
la
liste
du
superviseurs
<a
href='superviseurs.php
?

SID'>Ici</a>
"
;
echo
"
<p>Obtenir
la
liste
du
étudiants
présents
au
même
endroit
un
même
jour
<a
href='date_stage.php
?

SID'>Ici</a>
"
;
echo
"
</p>
"
;
}
if($c==2){
echo
"
<p>Obtenir
la
liste
du
élèves
que
vous
supervisez
<a
href='supervision.php
?

SID'>Ici</a></p>
"
;
echo
"
<p>Ajouter
un
élève
<a
href='ajouter_eleve.php
?

SID'>Ici</a><p>
"
;
echo
"
<p>Ajouter
un
stage
à
un
élève
<a
href='ajouter_stage.php
?

SID'>Ici</a><p>
"
;
}
if($c==3){
//
à
développer
}
?

à
</tr>
</table>
<
?

php
include('../modeles/deconnexion.php')
;
include('../modeles/pieddepage.php')
;
?

à
Étienne
Vandeput
–
©
Cefis
2005
110
Publier
sur
le
Web
-
Perfectionnement
Voici
l'
interface
de
menu
du
élèves
.

Le
menu
du
maîtres
de
stage
ressemblera
à
ce
qui
suit
.

Chacun
du
sept
scripts
mentionnés
dans
cette
page
vont
être
décrits
.

Nous
le
ferons
en
respectant
une
certaine
progression
dans
la
difficulté
.

C'
est
la
raison
pour
laquelle
nous
décrivons
de
abord
le
script
pour
la
construction
de
une
page
destinée
au
élèves
avant
de
traiter
les
page
pour
les
maîtres
de
stage
et
de
revenir
au
page
destinées
au
élèves
.

4.5.5.2
Liste
du
superviseurs
(
élève
)
Il
s'
agit
de
une
requête
sélection
relativement
élémentaire
et
ne
s'
adressant
qu'
à
une
seule
table
,
celle
du
maîtres
de
stage
.

La
requête
est
:
select
nom,prenom
from
maitre
order
by
nom
;
Le
reste
du
code
est
classique
si
l'
on
s'
en
réfère
au
exemples
qui
ont
déjà
été
donnés
.

<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
Étienne
Vandeput
–
©
Cefis
2005
111
Publier
sur
le
Web
-
Perfectionnement
<h6>Système
de
gestion
du
stages</h6>
<
?

php
echo
"
<h1>Liste
du
superviseurs</h1>
"
;
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('stages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery="select
nom,prenom
from
maitre
order
by
nom
"
;
$queryresult=mysql_query($sqlquery)
;
echo
"
<table><tr><td><strong>PRÉNOM</strong></td><td><strong>NOM</strong>
</td></tr>
"
;
while($row=mysql_fetch_array($queryresult,MYSQL_ASSOC)){
echo
"
<tr><td>".$row['prenom']."</td><td>".$row['nom']."</td></tr>
"
;
}
echo
"
</table>
"
;
?

à
</td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

>
Ce
qui
donne
,
par
exemple
:
Étienne
Vandeput
à
©
Cefis
2005
112
Publier
sur
le
Web
-
Perfectionnement
4.5.5.3
Liste
du
supervisés
(
maître
de
stage
)
La
requête
est
un
peu
plus
compliquée
dès
lors
que
elle
travaille
sur
les
tables
eleve
,
maitre
et
stage
.

Il
faut
que
dans
la
liste
du
stages
,
l'
identifiant
du
maître
soit
celui
de
l'
utilisateur
et
que
les
identifiants
du
maître
et
du
élèves
correspondent
dans
les
tables
eleve
et
maitre
.

$sqlquery="select
eleve.nom,eleve.prenom,stage.domaine
from
eleve,stage,maitre
where
id_eleve=eleve.id
&&
id_maitre=maitre.id
&&
maitre.login='".$_SESSION['login
'
]
.
"
'
"
;
Ce
qui
donne
quelque
chose
comme
ceci
:
4.5.5.4
Ajout
de
un
élève
(
maître
de
stage
)
Voici
un
script
dont
l'
effet
ne
sera
pas
visible
.

Il
s'
agit
,
en
effet
,
de
modifier
le
contenu
de
la
base
de
données
.

de
où
l'
importance
de
fournir
un
feed-back
à
l'
utilisateur
lui
indiquant
comment
se
sont
passées
les
opérations
.

C'
est
le
rôle
de
la
page
qui
sera
générée
.

mais
avant
l'
exécution
de
ce
script
,
l'
utilisateur
doit
fournir
les
données
nécessaires
à
la
requête
de
mise
à
jour
de
la
base
de
données
.

Il
y
a
donc
deux
fichiers
à
construire
dans
ce
cas
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Syst&egrave
;
me
de
gestion
du
stages
</h6>
<h1>Nouvel
&eacute
;
l&egrave
;
ve
</h1>
<form
name="form1
"
method="post
"
action="fb_enregistrer_eleve.php">
<p>Nom
:
<input
name="nom
"
type="text
"
size="30
"
maxlength="50
"
>
</p>
<p>Pr&eacute
;
nom
:
<input
name="prenom
"
type="text
"
id="prenom
"
size="30
"
maxlength="50">
</p>
<p>Classe
:
<select
name="classe
"
size="1
"
id="classe">
<option
value="5G">5B</option>
<option
value="6G">6B</option>
Étienne
Vandeput
–
©
Cefis
2005
113
Publier
sur
le
Web
-
Perfectionnement
<option
value="5P">5P</option>
<option
value="6P">6P</option>
</select>
</p>
<p>Identifiant
:
<input
name="login
"
type="text
"
id="login
"
size="8
"
maxlength="8">
</p>
<p>Mot
de
passe
:
<input
name="pw
"
type="password
"
idçëpw
"
size="20
"
maxlength="50">
</p>
<p>
<input
name="envoyer
"
type="submit
"
id="envoyer
"
value="Envoyer">
</p>
<p>&nbsp
;
</p>
</form></td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
Voici
le
formulaire
:
La
soumission
du
formulaire
entraînera
l'
exécution
du
script
fb_enregister_eleve.php
.

Observez
encore
que
le
choix
de
la
classe
se
fait
dans
une
liste
fixe
.

On
pourrait
imaginer
que
le
nombre
de
classes
soit
Étienne
Vandeput
à
à
Cefis
2005
114
Publier
sur
le
Web
-
Perfectionnement
variable
dans
le
temps
.

Il
faudrait
alors
en
faire
une
entité
dans
le
modèle
ERA
.

Il
serait
commode
,
dans
ce
cas
,
de
générer
la
liste
sur
base
de
une
requête
dans
la
base
de
données
.

Voici
le
code
de
ce
script
incluant
les
instructions
de
enregistrement
dans
la
base
et
les
instructions
de
affichage
du
feed-back
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>R&eacute
;
sultat
de
l'
enregistrement</h1>
<p>
<
?

php
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('stages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
foreach($_POST
as
$key
=>
$value
)
à
$varname
=
"
_".$key
;
$$varname
=
$value
;
}
$sqlquery="insert
eleve
(
nom,prenom,classe,login,pw
)
values
(
'
$_nom','$_prenom','$_classe','$_login','$_pw
'
)
"
;
$queryresult=mysql_query($sqlquery)
or
die("Échec
de
l'
enregistrement
"
)
;
echo
"
L'
élève
$_prenom
$_nom
a
été
enregistré
correctement
.
"

?

>
</p>
</td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
La
requête
est
une
requête
de
mise
à
jour
:
$sqlquery="insert
eleve
(
nom,prenom,classe,login,pw
)
values
(
'
$_nom','$_prenom
'
,
'
$_classe','$_login','$_pw
'
)
"
;
Étienne
Vandeput
–
©
Cefis
2005
115
Publier
sur
le
Web
-
Perfectionnement
Les
noms
du
variables
ont
été
générés
dynamiquement
à
l'
aide
de
une
instruction
foreach
comme
nous
en
avions
déjà
donné
un
exemple
.

Le
feed-back
est
donné
par
la
seule
instruction
:
echo
"
L'
élève
$_prenom
$_nom
a
été
enregistré
correctement
.
"

;
Et
voici
l'
écran
donnant
ce
feed-back
:
Chacun
du
scripts
que
nous
venons
de
décrire
affiche
évidemment
un
lien
permettant
un
retour
au
menu
,
ce
que
les
copies
de
écran
ne
montrent
pas
.

4.5.5.5
Ajout
de
un
stage
(
maître
de
stage
)
Un
maître
de
stage
peut
encoder
un
nouveau
stage
pour
un
élève
.

Nous
ferons
les
mêmes
observations
que
pour
le
cas
précédent
,
à
savoir
que
deux
fichiers
sont
nécessaires
:
un
pour
générer
un
formulaire
,
l'
autre
pour
enregistrer
les
données
et
fournir
le
feed-back
.

La
particularité
de
ce
script
est
que
certaines
données
vont
être
extraites
de
la
base
de
données
pour
faciliter
les
choix
de
l'
utilisateur
.

C'
est
le
cas
de
la
liste
du
élèves
,
du
lieux
et
du
domaines
.

On
aurait
également
pu
associer
un
petit
calendrier
pour
le
choix
du
dates
.

Tous
ces
choix
sont
évidemment
discutables
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<
?

php
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('stages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery1="select
nom,prenom,id
from
eleve
"
;
$queryresult1=mysql_query($sqlquery1)
;
$sqlquery2="select
denomination,id
from
lieu
"
;
$queryresult2=mysql_query($sqlquery2)
;
?

à
Étienne
Vandeput
–
©
Cefis
2005
116
Publier
sur
le
Web
-
Perfectionnement
<h1>Nouveau
stage</h1>
<form
name="form1
"
method="post
"
action="fb_ajouter_stage.php">
<p>&Eacute
;
l&egrave
;
ve
:
<select
name="id_eleve
"
size="1">
<
?

php
while($row=mysql_fetch_array($queryresult1,MYSQL_ASSOC)){
echo"<option
value='".$row['id']."'>".$row['nom
'
]
.
"

"
.$row['prenom
'
]
.

"
</option>
"
;
}
?

à
</select>
</p>
<p>Lieu
:
<select
name="lieu
"
size="1
"
id="lieu">
<
?

php
while($row=mysql_fetch_array($queryresult2,MYSQL_ASSOC)){
echo"<option
value='".$row['id']."'>".$row['denomination']."</option>
"
;
}
?

à
</select>
</p>
<p>Domaine
:
<select
name="domaine
"
size="1
"
id="domaine">
<option
value="P&eacute
;
diatrie">P&eacute
;
diatrie</option>
<option
value="G&eacute
;
riatrie">G&eacute
;
riatrie</option>
<option
value="Cr&egrave
;
che">Cr&egrave
;
che</option>
</select>
</p>
<p>Date
de
d&eacute
;
but
(
jj/mm/aaaa
)
:
<input
name="date_debut
"
type="text
"
id="date_debut
"
size="10
"
maxlength="10">
</p>
<p>Date
de
fin
(
jj/mm/aaaa
)
:
<input
name="date_fin
"
type="text
"
id="date_fin
"
size="10
"
maxlength="10">
</p>
<p>
<input
name="envoyer
"
type="submit
"
id="envoyer
"
value="Envoyer">
</p>
<p>&nbsp
;
</p>
</form></p></td>
</tr>
</table>
Étienne
Vandeput
–
©
Cefis
2005
117
Publier
sur
le
Web
-
Perfectionnement
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
Voici
un
aperçu
de
ce
formulaire
:
L'
envoi
de
ce
formulaire
active
le
script
fb_ajouter_stage.php
dont
voici
le
code
:
<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>R&eacute
;
sultat
de
l'
enregistrement</h1>
<p>
<
?

php
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('gestionstages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
Étienne
Vandeput
–
©
Cefis
2005
118
Publier
sur
le
Web
-
Perfectionnement
foreach($_POST
as
$key
=>
$value
)
à
$varname
=
"
_".$key
;
$$varname
=
$value
;
à
$_date_debut=substr($_date_debut,6,4).'/'.substr($_date_debut,3,2).'/'.substr($_date_
debut,0,2
)
;
$_date_fin=substr($_date_fin,6,4).'/'.substr($_date_fin,3,2).'/'.substr($_date_fin,0
,
2
)
;
$sqlquery1="select
id
from
maitre
where
login='".$_SESSION['login
'
]
.
"
'
"
;
$queryresult1=mysql_query($sqlquery1)
or
die('La
requête
a
échoué
e
)
;
$row=mysql_fetch_array($queryresult1,MYSQL_ASSOC)
;
$sqlquery2="insert
stage
(
domaine,date_debut,date_fin,id_eleve,id_lieu
,
id_maitre
)
values
(
'
$_domaine','$_date_debut','$_date_fin','$_id_eleve','$_lieu
'
,
'
"
.$row['id
'
]
.
"
'
)
"
;
$queryresult2=mysql_query($sqlquery2)
or
die("L'enregistrement
a
échoué
"
)
;
echo
"
Le
stage
a
été
enregistré
correctement
.
"
;
?

à
</p></td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

>
Deux
requêtes
sont
effectuées
:
la
première
est
une
requête
sélection
pour
connaître
l'
identifiant
du
maître
de
stage
(
nécessaire
pour
créer
le
nouveau
stage
)
;
$sqlquery1="select
id
from
maitre
where
login='".$_SESSION['login
'
]
.
"
'
"
;
la
seconde
est
une
requête
de
mise
à
jour
pour
l'
insertion
du
nouveau
stage
.

$sqlquery2="insert
stage
(
domaine,date_debut,date_fin,id_eleve,id_lieu,id_maitre
)
values('$_domaine','$_date_debut','$_date_fin','$_id_eleve','$_lieu','".$row['id
'
]
.
"
'
)
"
;
Comme
dans
le
cas
précédent
,
le
feed-back
est
relativement
sobre
.

echo
"
Le
stage
a
été
enregistré
correctement
.
"
;
Étienne
Vandeput
à
à
Cefis
2005
119
Publier
sur
le
Web
-
Perfectionnement
4.5.5.6
Lieux
et
dates
de
stage
(
élève
)
Les
requêtes
sélections
ne
sont
pas
très
compliquées
,
si
ce
n'
est
que
l'
une
de
elles
porte
sur
les
tables
eleve
et
stage
.

<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>Liste
du
stages
&agrave
;
prester</h1>
<p>
<
?

php
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('gestionstages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery1="select
stage.domaine,stage.date_debut,stage.date_fin
,
stage.id_lieu,stage.id_eleve
from
eleve,stage
where
stage.id_eleve=
'
"
.

$_SESSION['login
'
]
.
"
'

group
by
stage.domaine
"
;
$queryresult1=mysql_query($sqlquery1)
or
die('La
requête
1
a
échoué
e
)
;
echo
"
<table><tr><td><strong>Lieu</strong></td><td><strong>Domaine</strong>
</td><td><strong>Date
de
début</strong></td><td><strong>Date
de
fin</strong>
</td></tr>
"
;
while($row=mysql_fetch_array($queryresult1)){
$sqlquery2="select
denomination
from
lieu
where
login='$row[3
]
'
"
;
$queryresult2=mysql_query($sqlquery2)
or
die('La
requête
2
a
échoué
e
)
;
$row2=mysql_fetch_array($queryresult2)
;
$row[1]=substr($row[1],8,2).'/'.substr($row[1],5,2).'/'.substr($row[1],0,4)
;
$row[2]=substr($row[2],8,2).'/'.substr($row[2],5,2).'/'.substr($row[2],0,4)
;
</tr>
"
;
echo
"
<tr><td>$row2[0]</td><td>$row[0]</td><td>$row[1]</td><td>$row[2]</td>
}
echo
"
</table>
"
;
?

à
</p></td>
</tr>
</table>
Étienne
Vandeput
–
©
Cefis
2005
120
Publier
sur
le
Web
-
Perfectionnement
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
La
première
requête
:
$sqlquery1="select
stage.domaine,stage.date_debut,stage.date_fin
,
stage.id_lieu,stage.id_eleve
from
eleve,stage
where
stage.id_eleve=
'
"
.

$_SESSION['login
'
]
.
"
'

group
by
stage.domaine
"
;
permet
de
retrouver
tous
les
stages
de
l'
élève
connecté
.

La
seconde
requête
sert
à
retrouver
les
dénominations
du
lieux
en
fonction
de
leur
identifiant
dans
la
table
du
stages
.

$sqlquery2="select
denomination
from
lieu
where
login='$row[3
]
'
"
;
Voici
un
résultat
possible
:
4.5.5.7
Stages
à
date
donnée
(
élève
)
La
recherche
du
stages
de
un
élève
à
une
date
donnée
demande
à
nouveau
deux
fichiers
:

un
formulaire
pour
préciser
cette
date

un
script
pour
la
recherche
dans
la
base
de
données
et
l'
affichage
du
résultats
La
soumission
du
formulaire
provoquera
l'
exécution
de
ce
script
appelé
ici
verifier_stage.php
.

<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>Recherche
de
stage</h1>
<form
name="form1
"
method="post
"
action="verifier_stage.php">
<p>Précisez
la
date
:
<input
name="jour_de_stage
"
type="text
"
size="10
"
maxlength="10">
Étienne
Vandeput
–
©
Cefis
2005
121
Publier
sur
le
Web
-
Perfectionnement
</p>
<p>
<input
type="submit
"
name="Submit
"
value="Envoyer">
</p>
</form>
</td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
Voici
ce
que
donne
à
l'
affichage
ce
formulaire
:
Le
code
du
script
verifier_stage.php
est
le
suivant
:
<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>En
stage
&agrave
;
...
</h1>
<p>
<
?

php
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('stages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
Étienne
Vandeput
–
©
Cefis
2005
122
Publier
sur
le
Web
-
Perfectionnement
}
$jds=$_POST['jour_de_stage
'
]
;
$jds=substr($jds,6,4).'/'.substr($jds,3,2).'/'.substr($jds,0,2)
;
$sqlquery1="select
stage.domaine,stage.date_debut,stage.date_fin
from
eleve,stage
where
stage.id_eleve='".$_SESSION['login
'
]
.
"
'

&&
'
"
.$jds."'>
stage.date_debut
&&
'
"
.$jds."'<stage.date_fin
"
;
$queryresult1=mysql_query($sqlquery1)
or
die('La
requête
a
échoué
e
)
;
echo
"
<table><tr><td><strong>Lieu</strong></td><td><strong>Domaine</strong>
</td><td><strong>Date
de
début</strong></td><td><strong>Date
de
fin</strong></td>
</tr>
"
;
while($row=mysql_fetch_array($queryresult1)){
$row[1]=substr($row[1],8,2).'/'.substr($row[1],5,2).'/'.substr($row[1],0,4)
;
$row[2]=substr($row[2],8,2).'/'.substr($row[2],5,2).'/'.substr($row[2],0,4)
;
$sqlquery2="select
denomination
from
lieu
where
id='$row[3
]
'
"
;
$queryresult2=mysql_query($sqlquery2)
or
die('La
requête
a
échoué
e
)
;
$row2=mysql_fetch_array($queryresult2)
;
echo
"
<tr><td>$row2[0]</td><td>$row[0]</td><td>$row[1]</td><td>$row[2
]
</td></tr>
"
;
}
echo
"
</table>
"
;
?

à
</p></td></tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
La
première
requête
recherche
tous
les
stages
correspondant
à
l'
utilisateur
dont
l'
intervalle
de
déroulement
inclut
la
date
fournie
.

$sqlquery1="select
stage.domaine,stage.date_debut,stage.date_fin
from
eleve,stage
where
stage.id_eleve='".$_SESSION['login
'
]
.
"
'

&&
'
"
'ù
stage.date_debut
&&
'
"
.$jds."'<stage.date_fin
"
;
La
seconde
requête
sert
à
déterminer
la
dénomination
du
lieu
.

$sqlquery2="select
denomination
from
lieu
where
id='$row[3
]
'
"
;
Voici
un
exemple
de
résultat
:
Étienne
Vandeput
à
©
Cefis
2005
123
Publier
sur
le
Web
-
Perfectionnement
4.5.5.8
Liste
du
accompagnants
(
élève
)
Pour
cette
dernière
fonctionnalité
décrite
,
deux
fichiers
sont
également
nécessaires
.

Le
premier
est
semblable
à
celui
de
l'
exemple
précédent
et
génère
un
formulaire
pour
la
saisie
de
une
date
.

Rappelons
que
aucun
script
ne
valide
ici
le
format
et
la
cohérence
du
dates
.

<
?

php
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>Date
de
stage</h1>
<form
name="form1
"
method="post
"
action="accompagnants.php">
<p>Date
(
jj/mm/aaaa
)
:
<input
name="date_de_stage
"
type="text
"
id="date_de_stage">
</p>
<p>
<input
name="envoyer
"
type="submit
"
id="envoyer
"
value="Envoyer">
</p>
</form>
<p></p></td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
Le
look
du
formulaire
est
semblable
au
précédent
.

Sa
soumission
provoque
l'
exécution
du
script
accompagnants.php
dont
voici
le
code
:
<
?

php
session_start()
;
include('../modeles/entete.php')
;
?

à
<table
width="556
"
border="0
"
cellspacing="2
"
cellpadding="10">
<tr>
<td
height="300
"
valign="top
"
bgcolor="#FFFFCC">
<h6>Système
de
gestion
du
stages</h6>
<h1>Liste
du
&eacute
;
tudiants
en
stage
au
m&ecirc
;
me
endroit
ce
jour</h1>
<p>
<
?

php
Étienne
Vandeput
–
©
Cefis
2005
124
Publier
sur
le
Web
-
Perfectionnement
$jds=$_POST['date_de_stage
'
]
;
$jds=substr($jds,6,4).'/'.substr($jds,3,2).'/'.substr($jds,0,2)
;
$link
=
mysql_connect('localhost
'
,
'
encodeur
'
,
'
aaaaaa
'
)
;
if
(
!

$link
)
{
die('<p>Impossible
de
se
connecter
:
'
.

mysql_error().'</p>')
;
}
$db
=
mysql_select_db('gestionstages
'
,
$link
)
;
if
(
!

$db
)
à
die
(
'
<p>Impossible
d\'utiliser
la
base
:
'
.

mysql_error().'</p>')
;
}
$sqlquery1="select
lieu.denomination,lieu.login
from
stage,eleve,lieu
where
stage.id_eleve='".$_SESSION['login
'
]
.
"
'

&&
stage.date_debut<'".$jds
.
"
'

&&
stage.date_fin>'".$jds
.
"
'

&&
stage.id_lieu=lieu.login
group
by
lieu.denomination
"
;
$queryresult1=mysql_query($sqlquery1)
or
die('La
requête
1
a
échoué
e
)
;
while($row=mysql_fetch_row($queryresult1)){
echo
"
<table><tr><td><strong>Lieu</strong></td></tr>
"
;
echo
"
<tr><td>$row[0]</td></tr>
"
;
echo
"
<tr><td><strong>Nom
du
présents
ce
jour</strong></td></tr>
"
;
$sqlquery2="select
eleve.nom
from
eleve,stage
where
stage.id_lieu=
'
"
.$row[1
]
.
"
'

&&
eleve.login=stage.id_eleve
&&
stage.date_debut<'".$jds
.
"
'

&&
stage.date_fin>'".$jds
.
"
'

group
by
eleve.nom
order
by
eleve.nom
"
;
$queryresult2=mysql_query($sqlquery2)
or
die('La
requête
2
a
échoué
e
)
;
while($row2=mysql_fetch_row($queryresult2)){
echo
"
<tr><td>$row2[0]</td></tr>
"
;
}
}
echo
"
</table>
"
;
?

>
</p>
</td>
</tr>
</table>
<
?

php
include('../modeles/retour_menu.php')
;
include('../modeles/pieddepage.php')
;
?

à
La
première
requête
permet
de
trouver
les
lieux
de
stage
de
l'
utilisateur
à
la
date
fournie
:
$sqlquery1="select
lieu.denomination,lieu.login
from
stage,eleve,lieu
where
stage.id_eleve='".$_SESSION['login
'
]
.
"
'

&&
stage.date_debut<'".$jds
.
"
'

&&
stage.date_fin>'".$jds
.
"
'

&&
stage.id_lieu=lieu.login
group
by
lieu.denomination
"
;
La
seconde
requête
permet
de
trouver
la
liste
du
élèves
en
stage
au
même
endroit
à
cette
date
:
Étienne
Vandeput
à
©
Cefis
2005
125
Publier
sur
le
Web
-
Perfectionnement
$sqlquery2="select
eleve.nom
from
eleve,stage
where
stage.id_lieu=
'
"
.$row[1
]
.
"
'

&&
eleve.login=stage.id_eleve
&&
stage.date_debut<'".$jds
.
"
'

&&
stage.date_fin>'".$jds
.
"
'

group
by
eleve.nom
order
by
eleve.nom
"
;
Voici
un
exemple
de
résultat
:
4.6
La
base
de
données
Voici
,
à
titre
documentaire
,
la
structure
du
quatre
tables
de
la
base
de
données
et
leur
contenu
.

4.6.1
La
table
eleve
4.6.1.1
Structure
4.6.1.2
Contenu
Étienne
Vandeput
–
©
Cefis
2005
126
Publier
sur
le
Web
-
Perfectionnement
4.6.2
La
table
maitre
4.6.2.1
Structure
4.6.2.2
Contenu
4.6.3
La
table
lieu
4.6.3.1
Structure
Étienne
Vandeput
–
©
Cefis
2005
127
Publier
sur
le
Web
-
Perfectionnement
4.6.3.2
Contenu
4.6.4
La
table
stage
4.6.4.1
Structure
4.6.4.2
Contenu
4.7
Structure
du
site
Pour
terminer
,
voici
ce
que
donne
la
structure
du
mini-site
de
notre
application
en
termes
de
dossiers
et
de
fichiers
:
Étienne
Vandeput
–
©
Cefis
2005
128
Publier
sur
le
Web
-
Perfectionnement
Constatez
encore
une
foi
que
la
structure
de
un
tel
site
doit
être
connue
avant
la
rédaction
du
moindre
script
.

L'
usage
du
modèles
,
les
références
qu'
ils
font
à
d'
autres
fichiers
dont
le
code
doit
être
inclus
,
tous
ces
éléments
font
que
chaque
fichier
doit
être
affecté
à
un
dossier
,
avant
même
de
avoir
été
construit
.

D'
autres
répartitions
du
fichiers
sont
possibles
.

Il
faut
également
estimer
la
quantité
de
fichiers
que
l'
application
va
nécessiter
.

si
le
nombre
de
fonctionnalités
proposées
est
importante
,
il
faut
,
non
seulement
envisager
un
autre
type
de
menu
,
voire
une
arborescence
,
mais
aussi
une
autre
répartition
du
fichiers
en
dossiers
.

On
pourrait
imaginer
,
par
exemple
,
un
dossier
pour
les
scripts
concernant
les
élèves
,
un
dossier
pour
les
scripts
concernant
les
maîtres
de
stage
et
un
dossier
pour
les
scripts
concernant
les
hôtes
du
stages
.

La
réalisation
de
une
feuille
de
style
correcte
est
aussi
déterminante
quant
à
la
qualité
relative
de
l'
interface
que
vous
pourrez
proposer
.

Il
n'
est
pas
vain
de
consacrer
un
certain
temps
à
son
élaboration
.

Il
est
également
possible
de
vous
inspirer
de
feuilles
de
styles
utilisées
dans
des
sites
que
vous
trouvez
très
agréables
et
très
lisibles
.

Il
n'
y
a
pas
,
que
nous
sachions
,
de
copyright
sur
les
feuilles
de
styles
et
celles
-ci
se
retrouvent
évidemment
dans
le
cache
Internet
de
la
machine
cliente
.

dès
lors
,
…
Il
vous
reste
à
appliquer
la
démarche
que
nous
venons
de
initier
au
développement
de
une
application
qui
vous
concerne
et
dont
vous
connaissez
les
caractéristiques
du
domaine
.

Bon
travail
.

Étienne
Vandeput
à
à
Cefis
2005
129

