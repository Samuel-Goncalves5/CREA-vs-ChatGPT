php
:
INTRO
–
HTML
–
Wamp
à
PREMIERS
PROGRAMMES
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/introduction-a-php
http://php.net/manual/fr/langref.php
http://www.w3schools.com/php/
Open
Class
Room
SOMMAIRE
Sommaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
1
INTRO-HTML-WAMP-Premiers
programmes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
1
.

Introduction
au
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

3
Exemples
et
exercices
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
Objectifs
du
cours
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
Site
dynamique
et
site
statique
–
Rôle
de
l'
utilisateur
et
de
l'
administrateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Historique
du
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
5
Architecture
client
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
6
Principes
du
Php
:
écrire
du
code
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
9
2
.

Rappels
HTML
-
CSS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.12
HTML
de
base
:
h1-h6
,
p
,
br
,
img
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Squelette
html
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
CSS
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

13
Chargez
tous
les
exemples
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
14
Exemple
1
:
une
page
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
14
Exemple
2
:
une
page
de
base
avec
un
lien
vers
un
formulaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
15
Exemple
3
:
une
page
de
base
avec
un
lien
vers
un
formulaire
dans
un
tableau
...
...
...
...
...
...
...
...
...
...
...
...
.
.
17
3
.

Les
outils
de
développement
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..19
Outils
pour
le
fonctionnement
de
un
site
Web
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
19
Outils
de
développement
PHP-MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

20
4
.

Installation
de
Wamp
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.22
5
.

Premiers
usage
de
Wamp
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..23
1
:
Démarrer
Wamp
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
23
2
:
Installer
l'
icône
Wamp
directement
dans
la
barre
de
icône
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
3
:
Passer
Wamp
en
français
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

23
4
:
Consulter
les
serveurs
dans
le
gestionnaire
du
tâches
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
24
5
:
Tester
Wamp
:
afficher
la
page
WampServer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
25
6
:
Allez
dans
le
dossier
du
projets
:
C:\wamp64\www
,
créez
un
dossier
à
home
»
...
...
...
...
...
...
...
...
...
...
.

25
7
:
Afficher
le
contenu
de
«
home
»
dans
la
page
WampServer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

25
8
:
Accéder
au
dossier
à
home
»
dans
la
page
WampServer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
25
6
.

Premiers
programmes
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
9
:
Premier
programme
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
26
10
:
Fichier
index.php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
11
:
Deuxième
programme
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
28
12
:
Consulter
le
contenu
du
dossiers
de
un
site
en
ligne
!

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
29
Wamp
-
version
détaillée
(
on
peut
passer
!

)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.30
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
1/53
0
:
Reprise
détaillée
du
paragraphe
précédent
:
premiers
usage
-
résumé
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
1
:
Tester
Wamp
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
2
:
Travailler
avec
des
fichiers
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

32
3
:
Paramétrages
divers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
37
4
:
PHPMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
37
5
:
Paramétrage
du
installations
:
display_errors
et
display_startup_errors
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

37
mamp
à
version
détaillée
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.39
1
:
Principes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

39
2
:
Lancer
Mamp
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

39
3
:
Problème
de
installation
–
problème
de
port
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
39
4
:
Accès
au
projets
web
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
39
5
:
PHPMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
39
6
:
Fichier
php.ini
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
7
.

Trois
exemples
de
l'
instruction
echo
(
ou
print
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
41
Chargez
et
installez
les
exemples
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
41
Exemple
1
:
code
HTML
minimum
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
41
Exemple
2
:
code
HTML
minimum
avec
un
echo
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
42
Exemple
3
:
page
HTML
standard
avec
un
echo
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
43
Exercice
echo
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

44
Principes
généraux
du
code
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

45
8
.

Gestion
du
erreurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.46
Affichage
du
erreurs
-
Rappel
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

46
Principaux
message
de
erreurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

46
TP
:
Gestion
du
erreurs
-
variables
display_errors
et
display_startup_errors
à
On
...
...
...
...
...
...
...
...
...
...
...
47
9
.

Inclusion
de
fichiers
Php
–
factorisation
du
code
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..48
Rappel
sur
les
balises
structurantes
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

48
Le
problème
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
48
Solution
Php
:
l'
inclusion
de
fichier
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
48
Exemple
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

49
Solution
HTML
:
l'
inclusion
de
fichier
en
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
50
TP
:
Includes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
51
10
.

Documentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..52
Principes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
52
Exemple
de
usage
:
php.net
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

52
Edition
:
février
2019
php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
2/53
INTRO-HTML-WAMP-PREMIERS
PROGRAMMES
1
.

Introduction
au
Php
Exemples
et
exercices
Les
exemples
du
cours
sont
dans
un
fichier
zip
fournis
avec
l'
article
du
cours
:
00-BASES-DULANGAGE.zip
.

Les
exemples
sont
présentés
dans
un
chapitre
en
vert
.

Chargez
ce
fichier
et
mettez
-le
dans
le
dossier
Partie_2
du
répertoire
web
«
www
»
du
serveur
Wamp
.

Les
exercices
à
faire
sont
présentés
dans
un
chapitre
en
jaune
.

Objectifs
du
cours
du
page
web
:
HTML
et
aussi
…
•
Formulaire
de
contact
à
Espace
membre
avec
login
et
pseudo
,
forum
,
actualités
,
newsletter
,
etc
.

à
Back
office
à
Faire
circuler
les
informations
de
page
en
page
à
Faire
attention
au
failles
de
sécurité
,
à
Enregistrer
les
infos
dans
une
Bd
,
à
Structurer
son
site
avec
la
Poo
et
l'
architecture
MVC
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
3/53
Site
dynamique
et
site
statique
–
Rôle
de
l'
utilisateur
et
de
l'
administrateur
Site
statique
(
web
1.0
)
L'
utilisateur
consulte
le
contenu
du
site
sans
fournir
d'
informations
(
message
,
login
,
etc
.
)
.

L'
administrateur
ajoute
de
nouveaux
éléments
dans
le
site
(
de
nouvelles
informations
,
de
nouveaux
articles
,
de
nouvelles
page
)
en
revenant
dans
le
code
,
donc
en
programmant
.

Les
sites
statiques
sont
faits
uniquement
en
HTML
,
CSS
et
JavaScript
:
ce
sont
des
langages
clients
universels
.

Site
dynamique
(
web
2.0
)
L'
utilisateur
fournit
des
informations
au
site
:
message
,
login
,
etc
.

Cette
partie
du
site
est
publique
(
même
si
il
faut
un
mot
de
passe
pour
se
connecter
)
:
c'
est
le
front-office
.

L'
administrateur
gère
le
contenu
du
site
(
ajout
,
modification
,
suppression
de
informations
,
de
articles
,
de
message
,
de
utilisateur
,
modération
de
message
,
etc
.
)

par
une
partie
de
site
dédiée
à
l'
administration
:
c'
est
le
back-office
.

Les
sites
dynamiques
sont
faits
avec
:
•
les
langages
clients
:
HTML
,
CSS
et
JavaScript
à
un
langage
serveur
:
Php
ou
Java
ou
C#
ou
Ruby
ou
Python
ou
JavaScript
(
Node
)
,
etc
.

à
Ces
langages
serveurs
utilisent
en
général
une
base
de
données
:
MySQL
,
MariaDB
,
Oracle
,
SQL-Server
,
PostgreSQL
,
SQLite
,
etc
.

Souvent
,
on
associe
une
Bd
à
un
langage
serveur
:
à
PHP-MySQL
,
à
Java-Oracle
,
à
C#-SQL-Server
.

On
utilise
aussi
souvent
un
framework
qui
facilite
et
accélère
le
travail
:
à
Symfony
,
Laravel
,
Zend
(
Php
)
,
•
Jee
(
Java
)
,
à
.Net
(
c#
)
,
à
RubyOnRails
(
Ruby
)
,
•
Django
(
Python
)
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
4/53
Historique
du
Php
PHP-MySQL
:
début
du
Web
2.0
grand
public
.

php
:
langage
simple
,
un
peu
à
sale
»
(
versus
Java
,
langage
propre
)
.

Aujourd’hui
:
php
objet
,
langage
propre
.

Le
Php
a
intégré
les
aspects
sécurité
.

S'
utilise
souvent
avec
des
frameworks
(
Laravel
,
Symfony
,
Zend
,
etc
.
)
.

https://fr.wikipedia.org/wiki/PHP
Php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
5/53
Architecture
client
serveur
Langages
côté
client
HTML
,
CSS
,
JavaScript
Applications
côté
client
Navigateurs
:
Firefox
,
Internet
Explorer
,
Safari
,
Opera
,
etc
.

Langages
côté
serveur
SQL
,
Php
,
C#
,
Java
,
Python
,
Ruby
,
etc
.
,
Applications
côté
serveur
Serveurs
HTTP
(
ou
serveur
web
)
:
Apache
(
Php
)
,
Tomcat
(
Java
,
Jee
)
,
Iis
(
C#
,
.Net
)
Serveurs
Sgbd
:
MySQL
,
Oracle
,
SQL-Server
,
PostgreSQL
,
MariaDB
,
SQLite
Remarque
:
un
serveur
c'
est
une
machine
qui
fait
fonctionner
un
programme
qu'
on
appelle
aussi
un
serveur
(
la
machine
est
un
serveur
parce
que
elle
contient
un
programme
serveur
)
.

Un
programme
serveur
est
un
programme
qui
tourne
24H
sur
24
et
qui
a
comme
caractéristique
de
ne
pas
avoir
de
interface
utilisateur
.

Seuls
d'
autres
programmes
peuvent
communiquer
avec
lui
.

Un
programme
serveur
s'
appelle
serveur
ou
deamon
.

Le
serveur
mysql
sur
PC
s'
appelle
mysqld
,
«
d
»
pour
deamon
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
6/53
Affichage
de
une
page
HTML
dans
un
navigateur
:
3
cas
possibles
:
à
local
,
à
langage
serveur
,
à
Ajax
Php
à
Intro
–
HTML
–
Wamp
–
Premiers
programmes
à
page
7/53
Exemple
:
comment
on
accède
à
une
page
Web
Php
à
Intro
–
HTML
–
Wamp
–
Premiers
programmes
à
page
8/53
Principes
du
Php
:
écrire
du
code
HTML
Ecrire
du
code
HTML
en
Php
Le
Php
sert
à
écrire
du
code
HTML
dynamique
,
en
allant
par
exemple
chercher
les
informations
dans
la
Bd
.

Traduction
du
Php
en
HTML
Le
navigateur
ne
comprend
que
le
langage
HTML
.

Un
serveur
web
permet
de
traduire
du
code
Php
en
page
HTML
.

Principes
de
traduction
1
)
Le
client
demande
un
fichier
HTML
ou
php
:
une
page
web
,
HTML
ou
Php
.

2
)
Le
serveur
web
récupère
cette
page
HTML
ou
Php
pui
la
traduit
en
HTML
(
il
n'
a
rien
à
faire
si
il
n'
y
a
que
du
HTML
.

3
)
La
traduction
peut
consister
à
inclure
d'
autres
fichiers
fichiers
Php
et
aussi
à
récupérer
des
informations
dans
une
base
de
données
ou
dans
des
fichiers
.

4
)
La
fin
de
la
traduction
produit
une
page
entièrement
HTML
qui
est
renvoyée
au
client
(
au
navigateur
)
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
9/53
Exemples
de
traduction
Quand
on
trouve
des
instructions
Php
,
le
serveur
Apache
transforme
ces
instructions
en
code
HTML
Exemple
1
de
traduction
<p>
<
?

php
echo
"
vous
êtes
le
visiteur
n°
"
.$numVisiteur
;
?

à
</p>
La
balise
<p>
est
laissée
telle
quelle
.

La
balise
<
?

php
est
traduite
.

Le
résultat
de
la
traduction
donnera
,
si
la
variable
$numVisiteur
vaut
45
:
<p>
vous
êtes
le
visiteur
n°
45
</p>
Il
peut
aussi
y
avoir
des
instructions
php
qui
interrogent
la
base
de
données
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
10/53
Exemple
2
de
traduction
<p>
<
?

php
$reponse
=
$bdd->query
(
'
SELECT
prenom
FROM
utilisateurs
WHERE
id=235
'
)
;
echo
"
Bonjour
"
.$reponse
;
?

à
</p>
donnera
,
si
le
SELECT
revoit
Bertrand
:
<p>
Bonjour
Bertrand
</p>
Pour
fonctionner
,
cet
exemple
nécessite
que
on
se
connecte
de
abord
à
la
Bd
.

Ces
page
HTML
peuvent
être
envoyées
au
navigateur
du
client
qui
peut
désormais
les
interpréter
et
les
afficher
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
11/53
2
.

Rappels
HTML
-
CSS
HTML
de
base
:
h1-h6
,
p
,
br
,
img
<h1>
titre
</h1>
h2-h6
<p>
,
<br>
,
<img
src
=
«
monImage.jpg
à
>
<a
href=
à
URL
»
…
Dans
chaque
balise
,
on
peut
mettre
des
couples
:
attribut
=
«
valeur
à
Squelette
html
<
!

DOCTYPE
html>
<html
lang="fr">
<head>
<meta
charset="utf-8
"
/>
<link
rel="stylesheet
"
href="style.css
"
/>
<title>Ma
page</title>
</head>
<body>
Contenu
HTML
</body>
</html>
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
12/53
CSS
de
base
Principes
selecteur
{
p1
:v1
;
p2
:v2
;
…
;
pn
:vn
à
Un
selecteur
qui
définit
la
ou
les
balises
concernées
.

Un
couple
propriété
:
valeur
.

Exemples
de
sélecteur
*
(
toutes
les
balises
)
,
p
,
h1
,
h2
,
etc
,
#idCeci
:
les
balises
avec
un
id
=
à
idCeci
à
.classeCela
:
les
balises
avec
un
class
=
à
classeCela
à
p.classeCela
:
les
balises
p
avec
un
class
=
à
classeCela
»
[
att
]
:
les
balises
ayant
un
attribut
nommé
à
att
»
[
att
=
petit
]
:
les
balises
avec
un
attribut
att=
«
petit
à
pseudo
classe
Une
pseudo-classe
est
un
mot-clé
qui
peut
être
ajouté
à
un
sélecteur
afin
de
indiquer
l'
état
spécifique
dans
lequel
l'
élément
doit
être
pour
être
ciblé
par
la
déclaration
.

Il
se
place
après
un
selecteur
simple
et
sont
introduits
par
«
:
à
elt
:
first-child
:
premier
enfant
de
une
balise
a
:
link
:
les
a
non
visités
a
:
visited
:
les
a
visités
elt
:
hover
:
les
élément
survolés
elt
:
focus
:
les
élément
qui
ont
le
focus
Php
à
Intro
–
HTML
à
Wamp
à
Premiers
programmes
à
page
13/53
Chargez
tous
les
exemples
HTML
http://bliaudet.free.fr/IMG/zip/00-Rappels-HTML.zip
Exemple
1
:
une
page
de
base
Coder
une
page
avec
1
titre
,
un
paragraphe
de
texte
,
un
sous
titre
,
un
texte
,
une
image
.

Changer
la
typo
du
texte
=>
font-family
:
Comic
;
font-style:italic
;
color
:
blue
;
Encadrer
le
titre
=>
border
:
solid
black
1px
;
Centrer
l'
image
=>
text-align
:
center
;
Pour
mettre
du
faux
texte
:
chercher
à
Lorem
ipsum
dolor
»
sur
google
.

Un
site
propose
du
faux
texte
.

Pour
les
couleurs
nommées
,
voir
par
exemple
:
http://stylescss.free.fr/couleurs.php
.

Exemple
1
php
–
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
14/53
Exemple
2
:
une
page
de
base
avec
un
lien
vers
un
formulaire
Rappels
théoriques
sur
le
formulaire
Les
balises
de
un
formulaire
<form
action=
à
page.php
à
method=GET>
:
pour
regrouper
les
input
.

L'
action
définit
la
page
appelée
quand
on
valide
de
formulaire
.

La
méthode
est
une
notion
Php
.

<fieldset>
:
pour
mettre
un
cadre
autour
du
input
.

<legend>
:
pour
mettre
un
texte
sur
le
cadre
<input
type
=
«
text
à
name
=
«
nom
»
>
Type=text
pour
avoir
un
champ
de
saisie
.

Le
«
name
»
permettra
de
accéder
en
Php
à
la
«
value
à
saisie
.

<input
type="submit
"
name="submit
"
value="Valider">
Type
:
submit
pour
avoir
un
bouton
de
validation
.

La
value
c'
est
le
texte
affiché
.

Quand
on
clique
sur
le
bouton
,
la
page
fait
appel
à
l'
action
de
la
balise
<form>
<input
type="reset
"
name="reset
"
value="Annuler">
Type
:
reset
pour
annuler
la
saisie
en
cours
.

<input
type="hidden
"
name="saisie
"
value="saisie">
Type
:
hydden
faire
circuler
un
name
et
une
value
sans
que
cela
concerne
l'
utilisateur
(
c'
est
caché
)
.

C'
est
très
utile
en
programmation
Php
.

<select>
et
<option>
pour
créer
un
menu
déroulant
.

<textarea>
pour
avoir
une
zone
de
saisie
.

Autres
type
de
la
balise
à
input>
En
précisant
e
type
de
la
balise
input
,
on
obtient
un
comportement
différent
(
par
exemple
,
avec
un
type
tel
,
si
on
ne
saisie
pas
un
numéro
de
téléphone
,
le
champ
de
saisie
passe
en
rouge
)
.

type=password
:
caractères
cachés
,
email
,
url
,
tel
,
number
(
+min
,
max
,
step
)
,
range
(
+min
,
max
,
step
avec
curseur
)
,
color
(
firefox
propose
une
palette
colorée
)
,
date
,
search
,
chechobox
(
+checked
)
:
boutons
à
cocher
,
radio
:
radio
bouton
(
1
seul
parmi
plusieurs
)
.

Autres
attributs
de
la
balise
à
input>
Attribut
maxlength
(
input
)
:
taille
maximum
de
la
saisie
.

Attribut
autofocus
(
input
)
:
dans
un
input
place
le
curseur
directement
dans
le
champ
.

Attribut
required
(
input
)
:
oblige
la
saisie
avant
de
envoyer
le
formulaire
(
pas
dans
Safari
)
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
15/53
Exemple
2
Le
code
propose
la
page
de
l'
exercice
1
avec
un
lien
vers
un
formulaire
.

Le
formulaire
renvoie
vers
la
page
de
l'
exercice
1
quand
on
le
valide
.

On
a
3
cas
possible
pour
l'
âge
:
<18
,
18-25
,
>25
)
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
16/53
Exemple
3
:
une
page
de
base
avec
un
lien
vers
un
formulaire
dans
un
tableau
Rappels
théoriques
sur
les
tableaux
balises
de
structures
:
<table>
et
<tr>
Pas
de
texte
directement
dedans
.

•
<
table
>
:
Le
tableau
•
<
tr
>
:
La
ligne
balises
de
données
:
<th>
et
<td>
Dans
chaque
ligne
,
on
met
les
cellules
.

à
<th>
:
pour
le
nom
de
la
colonne
(
la
1ère
ligne
)
.

à
<td>
:
pour
toutes
les
autres
cellules
.

Encadrement
minimum
:
<table
border>
à
<table
border>
encadre
comme
suit
:
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
17/53
Exemple
3
On
peut
mettre
le
formulaire
dans
un
tableau
:
On
a
le
même
résultat
que
précédemment
,
sauf
que
les
zones
de
saisie
sont
alignées
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
18/53
3
.

Les
outils
de
développement
Outils
pour
le
fonctionnement
de
un
site
Web
Présentation
Pour
faire
fonctionner
un
site
Web
,
il
faut
des
outils
,
côté
client
et
côté
serveur
.

Coté
Client
:
le
navigateur
Le
navigateur
qui
interagit
avec
l'
utilisateur
.

Il
comprend
le
HTML
,
le
CSS
et
le
JavaScript
,
mais
il
ne
comprend
pas
le
php
.

Côté
Serveur
:
le
serveur
web
et
le
serveur
de
Bd
1
Le
serveur
web
(
ou
serveur
http
)
interagit
avec
le
navigateur
et
le
serveur
de
Bd
.

Le
serveur
web
traduit
le
code
Php
en
HTML
.

Il
comprend
donc
le
php
.

Le
serveur
de
Bd
interagit
avec
le
serveur
web
et
un
disque
dur
pour
sauvegarder
et
récupérer
des
données
.

Il
comprend
le
SQL
1
Pour
la
différence
entre
serveur
web
et
serveur
de
application
:
https://www.supinfo.com/articles/single/1156-difference-serveur-web
.

Le
pdf
correspondant
si
le
lien
ne
marche
pas
:
http://bliaudet.free.fr/IMG/pdf/Difference-entre-serveur-web-et-serveur-d-application.pdf
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
19/53
Outils
de
développement
PHP-MySQL
Présentation
Pour
développer
un
site
Web
,
il
faut
des
outils
qui
permettent
de
écrire
le
code
et
de
faire
de
sa
machine
un
serveur
pour
le
navigateur
.

Coté
Client
à
Partie
statique
à
HTML
,
CSS
:
Editeur
de
texte
(
VSCode
,
SublimeText
,
brackets
,
etc
.
)

•
Affichage
de
la
page
:
Navigateur
•
Hébergement
du
site
:
logiciel
FTP
Côté
Serveur
-
Partie
dynamique
•
Php
:
Editeur
de
texte
•
SQL
:
Editeur
de
texte
•
Serveur
HTTP
:
Apache
•
Serveur
Sgbd
:
MySQL
Php
à
Intro
–
HTML
–
Wamp
–
Premiers
programmes
à
page
20/53
Solutions
Il
existe
des
solutions
tout
en
un
qui
fournissent
les
serveurs
HTTP
et
Sgbd
ainsi
que
une
interface
utilisateur
pour
utiliser
ces
serveurs
et
pour
tester
notre
code
HTML
et
Php
sur
notre
machine
de
développement
qui
joue
le
rôle
du
serveur
pour
elle-même
en
tant
que
client
.

Par
exemple
:
Wamp
(
Windows
,
Apache
,
MySQL
,
Php
)
,
Mamp
sur
Mac
,
Lampp
sous
Linux
(
un
P
en
plus
pour
Perl
)
,
Xampp
.

EasyPHP
,
etc
.

Aucune
solution
n'
est
parfaite
ni
radicalement
supérieure
à
une
autre
.

C'
est
une
question
de
habitude
.

On
choisit
Wamp
.

On
peut
aussi
utiliser
Xampp
.

ou
Mamp
si
on
est
sur
MAC
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
21/53
4
.

Installation
de
Wamp
http://bliaudet.free.fr/article.php3
?

id_article=307
Aller
dans
l'
option
3
:
Wamp
vous
allez
télécharger
un
fichier
de
installation
:
wampserver3.1.4_x64.exe
(
selon
la
version
)
.

Pendant
l'
installation
:
choisir
le
navigateur
par
défaut
(
Chrome
ou
Firefox
de
préférence
,
surtout
pas
internet
explorer
)
,
choisir
un
éditeur
par
défaut
(
VSCode
de
préférence
ou
Sublime
Text
)
.

Autoriser
le
déblocage
du
pare-feu
.

Détails
sur
l'
installation
de
Wamp
:
dans
l'
article
:
http://bliaudet.free.fr/article.php3
?

id_article=277
,
le
poly
:
http://bliaudet.free.fr/IMG/pdf/01_Installation_de_WAMP.pdf
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
22/53
5
.

Premiers
usage
de
Wamp
1
:
Démarrer
Wamp
Il
faut
autoriser
le
pare-feu
pour
que
les
2
serveurs
puissent
démarrer
.

Double
clic
sur
le
raccourci
sur
le
bureau
:
Ca
marche
!

On
obtient
une
icône
verte
.

si
on
a
une
icône
rouge
,
c'
est
que
aucun
serveur
n'
est
démarré
.

si
on
a
une
icône
orange
,
c'
est
que
un
seul
serveur
est
démarré
.

On
peut
démarrer
,
arrêter
,
redémarrer
les
services
(
services
à
serveurs
)
.

2
:
Installer
l'
icône
Wamp
directement
dans
la
barre
de
icône
Déplacer
l'
icône
pour
que
elle
soit
directement
dans
la
barre
du
icônes
:
3
:
Passer
Wamp
en
français
icône
Wamp
–
bouton
gauche
-
choix
langage
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
23/53
4
:
Consulter
les
serveurs
dans
le
gestionnaire
du
tâches
•
On
peut
regarder
les
processus
qui
tournent
sur
Windows
:
CTRL-ALT-SUP
ou
CTRL-SHIFTESC
.

•
Il
faut
afficher
les
détails
.

à
Apache
HTTP
Server
:
c'
est
le
serveur
web
.

Il
peut
y
en
avoir
deux
,
mais
c'
est
le
même
!

•
mysqld
:
c'
est
le
serveur
de
la
Bd
MySQL
.

Il
peut
y
en
avoir
deux
,
mais
c'
est
le
même
!

Il
peut
même
y
en
avoir
3
:
un
de
plus
pour
MariaDB
!

à
Dans
tous
les
cas
,
si
on
arrête
les
serveurs
,
il
ne
doit
en
rester
aucun
.

si
il
en
reste
il
faut
les
arrêter
!

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
24/53
5
:
Tester
Wamp
:
afficher
la
page
WampServer
Dans
le
navigateur
:
localhost
ou
bien
icône
wamp
–
bouton
droit
-
choix
localhost
(
icône
Wamp
:
icône
verte
dans
dans
la
zone
de
notification
:
en
bas
à
droite
)
.

La
page
WampServer
apparaît
.

6
:
Allez
dans
le
dossier
du
projets
:
C:\wamp64\www
,
créez
un
dossier
à
home
à
icône
wamp
–
bouton
droit
-
choix
répertoire
www
Mettez
un
dossier
:
à
home
»
dans
le
répertoire
www
7
:
Afficher
le
contenu
de
«
home
»
dans
la
page
WampServer
Icône
Wamp
–
bouton
droit
-
choix
localhost
Le
dossier
home
apparait
dans
la
zone
à
Vos
Projets
»
:
il
n'
est
pas
cliquable
.

8
:
Accéder
au
dossier
à
home
»
dans
la
page
WampServer
Icône
Wamp
–
bouton
droit
-
choix
localhost
Dans
l'
url
,
on
trouve
:
localhost
Ajoutez
/home
:
l'
url
est
donc
:
localhost/home
On
arrive
sur
la
page
web
du
répertoire
home
:
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
25/53
6
.

Premiers
programmes
en
Php
9
:
Premier
programme
php
Code
Dans
le
dossier
à
home
»
,
ajouter
un
fichier
test_1.php
avec
le
code
suivant
<
?

php
echo
à
<h1>Hello
World
</h1>
»
;
?

à
Test
Ce
fichier
apparaît
dans
la
page
WampServer
,
dans
la
page
de
l'
url
http://localhost/home/
En
cliquant
dessus
,
on
apparaître
la
page
HTML
correspondant
au
code
.

On
peut
visualiser
le
code
HTML
avec
un
MAJ-CTRL-i
(
pour
Firefox
)
.

On
voit
uniquement
le
code
HTML
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
26/53
10
:
Fichier
index.php
si
un
répertoire
contient
un
fichier
index.php
ou
index.html
,
il
est
automatiquement
exécuté
quand
on
rentre
dans
le
dossier
.

Dupliquez
test_1.php
en
le
nommant
index.php
Ajoutez
:
echo
à
<h1>Hello
World
avec
index
</h1>
»
;
Vérifiez
cette
propriété
.

Ensuite
,
renommer
index.php
en
index0.php
.

Vérifiez
que
il
n'
y
a
plus
d'
exécution
automatique
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
27/53
11
:
Deuxième
programme
php
Code
Dans
le
dossier
à
home
»
,
ajouter
un
fichier
test_2.php
avec
le
code
suivant
<
?

php
//
en
utilisant
l'
url
:
//
localhost/home/helloWorld.php
?

name=Bertrand
$name
à
$_GET['name
'
]
;
//
le
header
précise
le
type
de
la
page
header('Content-Type
:
text/html
'
)
;
echo
'
<html>
'
;
echo
'
<body>Bonjour
'
.

$name
.

'
</body>
'
;
echo
'
</html>
'
?

à
Test
Ce
fichier
apparaît
dans
la
page
WampServer
,
dans
la
page
de
l'
url
http://localhost/home/
En
cliquant
dessus
,
on
apparaître
la
page
HTML
correspondant
au
code
:
mais
il
y
a
un
bug
!

Il
faut
ajouter
dans
l'
url
:
?

name=Bertrand
pour
que
ça
marche
:
http://localhost/home/test_2.php
?

name=Bertrand
On
peut
visualiser
le
code
HTML
avec
un
MAJ-CTRL-i
(
pour
Firefox
)
.

On
voit
uniquement
le
code
HTML
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
28/53
12
:
Consulter
le
contenu
du
dossiers
de
un
site
en
ligne
!

Exemple
:
http://www.amberieunatation.fr/spip/IMG/jpg/
Sur
ce
site
,
on
constate
que
on
peut
accéder
au
contenu
du
dossier
!

On
peut
remonter
le
dossier
:
http://www.amberieunatation.fr/spip/IMG
jusque
à
la
racine
du
site
:
http://www.amberieunatation.fr
La
racine
contient
un
fichier
index.php
:
c'
est
la
page
de
accueil
du
site
qui
s'
affiche
.

Pour
éviter
le
problème
,
on
peut
par
exemple
mettre
un
fichier
index.php
dans
tous
les
répertoires
qui
renvoie
par
exemple
sur
la
page
de
accueil
(
fonction
header
en
php
)
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
29/53
Wamp
-
version
détaillée
(
on
peut
passer
!

)
0
:
Reprise
détaillée
du
paragraphe
précédent
:
premiers
usage
-
résumé
Ce
chapitre
détaille
ce
qu'
on
a
fait
au
paragraphe
précédent
1
:
Tester
Wamp
Démarrer
Wamp
Il
faut
autoriser
le
pare-feu
pour
que
les
2
serveurs
puissent
démarrer
.

Double
clic
sur
le
raccourci
sur
le
bureau
:
Ca
marche
!

On
obtient
une
icône
verte
.

Passer
Wamp
en
français
icône
Wamp
–
bouton
gauche
-
choix
langage
Tester
Wamp
:
afficher
la
page
WampServer
Dans
le
navigateur
:
localhost
ou
bien
icône
wamp
–
bouton
droit
-
choix
localhost
(
icône
Wamp
:
icône
verte
dans
dans
la
zone
de
notification
:
en
bas
à
droite
)
.

La
page
WampServer
apparaît
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
30/53
La
zone
à
Vos
Projets
»
est
vide
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
31/53
2
:
Travailler
avec
des
fichiers
Php
Allez
dans
le
dossier
du
projets
:
C:\wamp64\www
Aller
dans
C:\wamp64\www
.

C'
est
dans
ce
dossier
qu'
on
mettra
tous
les
dossiers
de
travail
.

Créer
un
dossier
à
mon-site
»
,
par
exemple
.

La
zone
à
Vos
Projets
à
contient
le
nom
du
dossier
qu'
on
vient
de
créer
.

Accéder
au
projet
:
localhost/mon-site
En
entrant
localhost/mon-site
dans
un
navigateur
,
on
accède
au
projet
:
Php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
32/53
php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
33/53
Accès
direct
au
projets
si
on
clique
directement
sur
le
nom
du
projet
,
on
obtient
une
erreur
et
on
n'
accède
pas
au
projet
.

Solution
1
:
Pour
remédier
à
cela
:
sur
l'
icône
verte
Wamp
:
bouton
droit
/
paramètres
Wamp
/
ajouter
localhost
dans
l'
URL
.

Ca
ajoute
un
warning
dans
la
zone
à
Vos
Projets
»
.

mais
on
peut
désormais
accéder
au
projet
en
cliquant
sur
leur
nom
.

Solution
2
:
Dans
le
dossier
vos
projets
(
C:/wampp64/www
)
ouvrez
le
fichier
index.php
.

Vers
la
ligne
33
,
après
la
ligne
:
$suppress_localhost
=
(
$wampConf['urlAddLocalhost
'
]
==
'
off
'
?

true
:
false
)
;
Ajoutez
:
$suppress_localhost=
false
;
Cette
solution
donne
les
mêmes
résultats
que
la
précédente
,
en
plus
compliqué
!

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
34/53
Solution
3
:
«
à
la
main
»
Dans
le
navigateur
:
localhost/mon-site
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
35/53
Création
de
un
premier
fichier
Php
Ouvrir
le
dossier
à
mon-site
»
avec
VSCode
ou
SublimeText
:
Sur
le
nom
du
dossier
,
ouvrir
un
fichier
:
new
file
.

pui
save
:
on
l'
appelle
index.php
,
il
se
trouve
dans
le
répertoire
mon-site
.

Dans
le
fichier
index.php
:
Exécuter
le
fichier
Php
Il
suffit
de
cliquer
sur
le
dossier
à
mon-site
»
.

Par
défaut
,
le
fichier
à
index.php
»
est
envoyé
au
serveur
apache
qui
le
retourne
au
navigateur
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
36/53
3
:
Paramétrages
divers
Bouton
droit
sur
l'
icône
verte
Wamp
Langue
Bouton
droit
/
language/
français
Paramètres
de
Wamp
à
Ajouter
localhost
dans
l'
URL
»
:
pour
l'
accès
direct
au
dossier
de
travail
,
par
exemple
.

Outils
Pour
tester
les
ports
,
par
exemple
Clic
sur
l'
icône
verte
Wamp
à
Démarrer
ou
arrêter
les
serveurs
(
services
)
:
apache
et
mysql
à
Accès
direct
à
la
page
localhost
à
Accéder
à
phpmyadmin
,
l'
utilitaire
pour
gérer
la
Bd
.

à
Paramétrer
Apache
,
MySQL
,
Php
(
Amp
)
.

4
:
PHPMyAdmin
On
accède
à
PHPMyAdmin
ainsi
:
http://localhost/phpmyadmin/
ou
icône
Wamp
/
PHPMyAdmin
5
:
Paramétrage
du
installations
:
display_errors
et
display_startup_errors
Fichier
php.ini
Il
existe
un
fichier
php.ini
qui
paramètre
l'
usage
de
Wamp
pour
le
php
.

On
le
trouve
dans
clic
/
Php
sous
Mamp
,
il
faut
trouver
le
bon
!

Quand
on
va
dans
phpInfo
,
on
trouve
le
configuration
file
:
/Applications/MAMP/bin/php/php7.0.0/conf
C'
est
ce
fichier
qu'
il
faut
modifier
.

Variables
display_errors
=
On
et
display_startup_errors
=
On
Les
variables
display_errors
et
display_startup_errors
permettent
de
afficher
des
message
de
erreur
plus
explicites
.

Elles
doivent
être
à
ON
pour
que
les
message
de
erreur
s'
affichent
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
37/53
Il
faut
redémarrer
le
serveur
Apache
pour
que
la
prise
en
compte
soit
faite
.

On
peut
les
voir
dans
le
phpInfo
de
Mamp
.

Alternative
pour
un
site
en
production
Attention
,
ces
message
de
erreurs
ne
doivent
pas
être
vus
par
les
utilisateurs
.

Pour
un
site
déjà
en
production
,
il
faut
passer
par
les
fichiers
de
log
.

Regarder
dans
le
fichier
de
conf
pour
plus
Php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
38/53
de
informations
.

mamp
à
version
détaillée
1
:
Principes
On
suit
la
même
logique
que
pour
tester
Wamp
.

Il
faut
donc
suivre
le
chapitre
précédent
pour
faire
la
partie
pratique
et
revenir
dans
ce
chapitre
pour
voir
les
spécificités
de
Mamp
.

2
:
Lancer
Mamp
•
Il
faut
autoriser
le
parefeu
pour
que
les
2
serveurs
puissent
démarrer
.

•
Pour
démarrer
Mamp
:
Application/MAMP/MAMP.appp
Le
programme
propose
de
utiliser
Mamp
PRO
:
on
évite
!

•
Préférences
:
pour
gérer
les
ports
du
serveurs
et
le
démarrage
automatique
du
serveurs
à
Démarrer
/
Arrêter
les
serveurs
3
:
Problème
de
installation
–
problème
de
port
Onglet
préférence
,
menu
ports
:
Apache
est
sur
8080
par
défaut
4
:
Accès
au
projets
web
localhost
:8080
Dans
un
navigateur
,
taper
:
à
localhost
:8080
»
.

http://localhost:8080/
Une
page
index
of
/
apparaît
.

Elle
est
vide
,
elle
contiendra
nos
projets
.

Cette
page
correspond
au
répertoire
:
/Applications/mamp/htdocs
Ce
répertoire
est
paramétrable
dans
Préférences
/serveur
web
Ouvrir
la
page
web
start
/mon
site
web
On
accède
à
la
page
localhost
:8080
ainsi
Ouvrir
la
page
web
start
/
mon
site
web
5
:
PHPMyAdmin
On
accède
à
PHPMyAdmin
ainsi
:
http://localhost:8080/phpMyAdmin
ou
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
39/53
Ouvrir
la
page
web
start
/Tools
/
PHPMyAdmin
6
:
Fichier
php.ini
Il
existe
un
fichier
php.ini
qui
paramètre
l'
usage
de
Wamp
pour
le
php
.

On
le
trouve
dans
clic
/
Php
sous
Mamp
,
il
faut
trouver
le
bon
!

Quand
on
va
dans
phpInfo
,
on
trouve
le
configuration
file
:
/Applications/MAMP/bin/php/php7.0.0/conf
C'
est
ce
fichier
qu'
il
faut
modifier
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
40/53
7
.

Trois
exemples
de
l'
instruction
echo
(
ou
print
)
Chargez
et
installez
les
exemples
Commencez
par
charger
le
dossier
zippé
:
02-premiers-programmes-echo.zip
et
installez
-le
dans
le
répertoire
du
serveur
Wamp
(
www
)
.

Exemple
1
:
code
HTML
minimum
Objectifs
Simple
affichage
de
texte
sans
php
.

Comparaison
entre
un
fichier
.html
et
.php
Codes
dans
php
Fichier
Exemple_01_bonjourHTML.html
bonjour
sans
balise
dans
un
fichier
.php
<h3>bonjour
avec
balise
dans
un
fichier
.php</h3>
Résultats
:
bonjour
sans
balise
dans
un
fichier
.php
bonjour
avec
balise
dans
un
fichier
.php
Fichier
Exemple_01_bonjourHTML.php
bonjour
sans
balise
dans
un
fichier
.php
<h3>bonjour
avec
balise
dans
un
fichier
.php</h3>
Résultats
:
bonjour
sans
balise
dans
un
fichier
.php
bonjour
avec
balise
dans
un
fichier
.php
Explications
Le
résultat
est
le
même
dans
les
deux
cas
.

Le
fichier
.html
est
fourni
directement
au
navigateur
.

Le
texte
s'
affiche
.

Le
fichier
.php
est
traité
par
le
serveur
Apache
.

Il
ne
contient
pas
de
balise
php
:
le
serveur
web
n'
effectue
aucune
transformation
.

Le
résultat
est
transmis
au
navigateur
.

Le
texte
s'
affiche
.

On
évite
de
utiliser
des
fichiers
html
dans
programmes
côté
serveur
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
41/53
Exemple
2
:
code
HTML
minimum
avec
un
echo
php
Objectifs
Simple
affichage
de
texte
avec
du
php
Comparaison
entre
un
fichier
.html
et
.php
Fichier
php
:
<
?

php
echo
"
bonjour
avec
balise
php
"
;
?

>
<
?

php
echo
"
<h3>bonjour
avec
balises
HTML
et
php</h3>
"
;
?

>
Résultats
dans
le
navigateur
:
bonjour
sans
balise
php
bonjour
avec
balises
HTML
et
php
page
HTML
générée
:
bonjour
sans
balise
php
<h3>bonjour
avec
balises
HTML
et
php</h3>
Explications
à
Le
fichier
.php
est
traité
par
le
serveur
Apache
.

à
La
ligne
de
Php
se
trouve
entre
:
<
?

php
et
?

>
à
Echo
est
une
instruction
.

Chaque
instruction
sera
terminée
par
un
;
•
Le
serveur
Apache
traite
les
instructions
situées
entre
<
?

php
et
?

>
.

echo
est
une
instruction
qui
permet
de
écrire
ce
qui
se
trouve
entre
les
guillemets
.

à
Le
résultat
est
un
fichier
HTML
qui
est
transmis
au
navigateur
.

Le
texte
s'
affiche
.

Remarques
Faire
un
echo
en
php
plutôt
que
de
afficher
directement
le
texte
en
HTML
,
ça
ne
sert
à
rien
.

mais
le
Php
est
un
langage
de
programmation
qui
permettra
de
récupérer
les
informations
du
formulaires
HTML
,
de
faire
des
calculs
complexes
,
de
enregistrer
des
informations
dans
la
Bd
ou
dans
un
fichier
,
de
récupérer
des
informations
dans
la
Bd
ou
dans
un
fichier
,
de
remplir
des
tableaux
avec
des
données
de
la
Bd
,
etc
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
42/53
Exemple
3
:
page
HTML
standard
avec
un
echo
php
Objectifs
Page
HTML
classique
avec
un
simple
affichage
de
texte
php
.

Comparaison
entre
un
fichier
.html
et
.php
Fichier
php
:
à
!

DOCTYPE
html>
<html
lang="fr">
<head>
<meta
charset="utf-8
"
/>
<title>Exemple
1
:
echo</title>
</head>
<body>
<
?

php
echo
"
<h1>Affichage
de
texte
HTML
et
PHP</h1>
"
?

>
<
?

php
echo
"
<p>
php
:
"
;
echo
"
<span
style=\"color
:
red
;
\">
Ligne
écrite
avec
un
\"echo\
"
<strong>PHP</strong>
</span></p>
"
;
?

à
</body>
</html>
Résultats
dans
le
navigateur
:
Affichage
de
texte
HTML
et
Php
Php
:
Ligne
écrite
avec
un
"
echo
"
php
.

page
HTML
générée
:
à
!

DOCTYPE
html>
<html
lang="fr">
<head>
<meta
charset="utf-8
"
/>
<title>Exemple
1
:
echo</title>
</head>
<body>
<h1>Affichage
de
texte
HTML
et
PHP</h1>
<p>
Php
:
<span
style="color
:
red
;
"
à
Ligne
écrite
avec
un
"
echo
"
<strong>PHP</strong>
</span>
</p>
</body>
</html>
Explications
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
43/53
Le
h1
est
mis
dans
un
echo
et
dans
un
<
?

php
séparé
(
ça
ne
sert
à
rien
,
c'
est
pour
le
test
!

)
.

Le
<
?

php
suivant
fait
:
un
echo
qui
ouvre
un
<p>
pui
un
autre
qui
ouvre
un
<span>
avec
du
style
et
un
strong
qui
ferme
le
</span>
mais
aussi
le</p>
ouvert
dans
le
précédent
echo
.

Pour
mettre
un
guillemet
dans
le
texte
de
un
echo
(
donc
pour
afficher
un
guillemet
dans
le
code
HTML
)
,
on
met
à
"
Exercice
echo
Coder
toute
la
page
précédente
avec
des
échos
.

Combien
faut
-il
en
mettre
au
minimum
?

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
44/53
Principes
généraux
du
code
Php
Règles
à
Le
code
Php
commence
par
<
?

php
(
sans
espace
)
et
finit
par
?

>
.

On
va
parler
de
«
balise
Php
»
.

•
On
peut
placer
une
balise
Php
n'
importe
où
dans
le
code
HTML
(
pas
dans
du
code
CSS
!

)
•
Dans
une
balise
Php
on
peut
mettre
autant
de
instructions
et
de
lignes
Php
qu'
on
veut
.

•
On
doit
mettre
un
;
à
la
fin
de
chaque
instruction
Php
.

•
On
peut
mettre
des
commentaires
entre
/*
et
*/
dans
le
code
Php
.

Ces
commentaires
peuvent
s'
étaler
sur
plusieurs
lignes
.

Ces
commentaires
disparaîtront
dans
le
code
HTML
.

à
On
peut
mettre
des
commentaires
de
fin
de
ligne
avec
//
Erreurs
courantes
à
Parse
error
:
quand
on
oublie
le
;
à
la
fin
de
une
instruction
(
le
;
est
facultatif
sur
la
dernière
instruction
à
Un
fichier
.htlm
à
la
place
de
un
fichier
.php
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
45/53
8
.

Gestion
du
erreurs
Affichage
du
erreurs
-
Rappel
Variables
display_errors
=
On
et
display_startup_errors
=
On
Les
variables
display_errors
et
display_startup_errors
permettent
de
afficher
des
message
de
erreur
plus
explicites
.

Par
défaut
,
les
erreurs
s'
affichent
sur
PC
.

Pour
voir
ces
variables
,
ouvrez
le
fichier
php.ini
:
Wamp
/
Php
/
php.ini
Cherchez
les
variables
display_errors
et
display_startup_errors
vous
trouvez
les
lignes
:
(
sans
;
au
début
,
sinon
c'
est
un
commentaire
)
display_startup_errors
=
On
display_errors
=
On
Il
faut
redémarrer
le
serveur
Apache
pour
que
la
prise
en
compte
soit
faite
.

Les
erreurs
s'
affichent
On
peut
voir
les
variables
dans
le
phpInfo
de
Mamp
.

Alternative
pour
un
site
en
production
Attention
,
ces
message
de
erreurs
ne
doivent
pas
être
vus
par
les
utilisateurs
.

Pour
un
site
déjà
en
production
,
il
faut
passer
par
les
fichiers
de
log
.

Regarder
dans
le
fichier
de
conf
pour
plus
de
informations
.

Principaux
message
de
erreurs
Parse
error
Est
indiqué
le
fichier
,
la
ligne
,
souvent
la
cause
.

L'
erreur
peut
être
sur
la
ligne
ou
sur
la
ligne
précédente
.

Ça
peut
correspondre
à
:
•
Oubli
de
;
•
Apostrophe
ou
guillemet
non
fermé
•
Concaténation
à
problème
Undefined
function
La
fonction
n'
est
pas
reconnue
quand
on
s'
en
sert
:
il
faut
probablement
un
include
.

Wrong
parameter
count
Une
fonction
n'
a
pas
le
bon
nombre
de
paramètres
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
46/53
Erreur
autour
de
la
Bd
Les
erreurs
SQL
sont
plus
ou
moins
explicites
.

Il
faut
vérifier
que
le
code
SQL
fonctionne
.

headers
already
sent
by
…
si
on
a
du
code
HTML
avant
un
header
ou
une
session
Maximum
execution
time
exceeded
Boucle
sans
fin
Tp
:
Gestion
du
erreurs
-
variables
display_errors
et
display_startup_errors
à
On
Chargez
le
zip
à
04-exercice-gestion-erreur.zip
à
Essayez
le
programme
TP_gestion_erreur.php
et
corrigez
les
erreurs
.

Affichage
du
erreurs
sur
MAC
Par
défaut
,
les
erreurs
ne
s'
affichent
pas
sur
MAC
.

Il
faut
modifier
les
variables
display_errors
et
display_startup_errors
dans
le
fichier
php.ini
Pour
cela
:
Démarrez
Mamp
:
Ouvrir
la
page
web
start
/
phpinfo
Cherchez
php.ini
vous
trouvez
pour
le
Configuration
File
(
php.ini
)
Path
la
valeur
:
/Applications/MAMP/bin/php/php7.0.0/conf
Allez
dans
ce
répertoire
et
ouvrez
le
fichier
php.ini
Passez
les
deux
variables
à
On
:
display_startup_errors
=
On
display_errors
=
On
Relancez
le
serveur
:
Mamp
/
Arrêter
les
serveurs
à
Mamp
/
Démarrer
les
serveurs
Affichage
du
erreurs
sur
PC
Par
défaut
,
les
erreurs
s'
affichent
sur
PC
.

Pour
voir
ces
variables
,
ouvrez
le
fichier
php.ini
:
Wamp
/
Php
/
php.ini
Cherchez
les
variables
display_errors
et
display_startup_errors
vous
trouvez
les
lignes
:
(
sans
;
au
début
,
sinon
c'
est
un
commentaire
)
display_startup_errors
=
On
display_errors
=
On
Les
erreurs
s'
affichent
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
47/53
9
.

Inclusion
de
fichiers
Php
à
factorisation
du
code
HTML
Rappel
sur
les
balises
structurantes
HTML
HTML
5
propose
des
balises
de
structuration
du
page
:
à
header
,
nav
,
footer
comme
balise
plutôt
unique
dans
la
page
qui
correspondent
à
des
éléments
qu'
on
retrouve
sur
toutes
les
page
du
site
à
section
,
article
,
aside
comme
balises
éventuellement
multiples
dans
la
page
et
différentes
selon
les
page
•
div
comme
balise
de
structuration
personnelle
.

Le
problème
header
,
nav
et
footer
vont
en
général
se
retrouver
sur
toutes
les
page
.

Comment
éviter
de
répéter
le
même
code
sur
toutes
les
page
et
donc
de
devoir
faire
des
mise
à
jour
sur
toutes
les
page
?

Solution
php
:
l'
inclusion
de
fichier
en
Php
Tout
le
code
de
la
balise
header
peut
être
mis
dans
un
fichier
header.php
Ensuite
,
l'
instruction
à
include
»
permet
de
faire
appel
à
ce
fichier
et
de
l'
inclure
dans
le
fichier
appelant
.

include
(
«
fichier.php
»
)
Avec
l'
instruction
suivante
:
<
?

php
include
(
«
header.php
»
)
;
?

à
le
code
de
la
page
est
limité
à
ce
qu'
elle
contient
de
spécifique
.

si
on
modifie
le
header
,
on
le
modifie
pour
toutes
les
page
.

On
peut
faire
la
même
chose
avec
le
footer
et
le
nav
.

si
le
nav
est
dans
le
header
,
on
peut
mettre
l'
inclusion
dans
le
fichier
header.php
Syntaxe
include
est
une
fonction
avec
des
parenthèses
à
laquelle
on
fournit
le
nom
du
fichier
qu'
on
veut
charger
,
entre
guillemets
,
à
la
différence
de
echo
qui
ne
prend
pas
de
parenthèses
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
48/53
Exemple
:
body
avec
include
du
header
et
du
footer
<body>
<
?

php
include("header.php")
;
?>
<section>
</section>
<
?

php
include("footer.php")
;
?

à
</body>
header
qui
inclut
le
nav
<header>
<h1>Mon
SUPER
SITE</h1>
<
?

php
include("nav.php")
;
?

à
</header>
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
49/53
Solution
HTML
:
l'
inclusion
de
fichier
en
HTML
L'
ancienne
solution
:
inclusion
de
fichier
en
HTML
:
balise
frame
(
obsolète
)
Les
sites
qui
n'
utilisent
pas
de
langage
serveur
utilisait
la
balise
<frame>
pour
factoriser
les
page
.

Cette
balise
n'
est
plus
supportée
par
le
HTML
5
.

Elle
est
remplacée
par
la
balise
<iframe>
http://www.w3schools.com/tags/tag_frame.asp
La
balise
frame
ne
se
ferme
pas
.

Elle
s'
utilise
à
l'
intérieur
de
une
balise
<frameset>
La
balise
<iframe>
:
inclusion
de
fichier
en
HTML
(
déprécié
)
Cette
balise
sert
surtout
à
inclure
des
morceaux
que
un
autre
site
permet
de
partager
.

à
cette
adresse
,
le
site
fournit
un
iframe
dans
le
bouton
exporter
:
https://www.franceculture.fr/emissions/les-series-musicales-dete/les-series-musicales-detelundi-24-juillet-2017
Cet
usage
est
toutefois
déprécié
.

à
!

DOCTYPE
html>
<html>
<body>
<iframe
src="https://www.franceculture.fr/player/exportreecouter
?

content=9c19db61-0761-4b50-b4ae-907f0dbf3259
"
width="481
"
frameborder="0
"
scrolling="no
"
height="137">
<p>Your
browser
doe
not
support
iframes.</p>
</iframe>
</body>
</html>
Widget
Les
widgets
tendent
à
remplacer
les
iframe
.

Ce
sont
de
simples
div
à
copier
dans
son
site
.

Un
widget
de
météo
ici
:
http://www.meteovista.fr/Widgets-Meteo/4266446/0
Php
à
Intro
–
HTML
à
Wamp
–
Premiers
programmes
à
page
50/53
TP
:
Includes
Chargez
le
zip
<05-exercice-include.zip
à
Il
contient
un
dossier
avec
une
page
HTML
.

1
)
Réécrivez
-la
en
sortant
le
header
et
le
footer
dans
des
fichiers
séparés
et
en
utilisant
des
include
.

Testez
le
résultat
.

2
)
Ensuite
,
mettez
les
fichiers
header
et
footer
dans
un
dossier
à
include
»
et
le
fichier
css
dans
in
dossier
à
css
»
.

Le
but
est
de
n'
avoir
que
le
fichier
index1.php
à
la
racine
.

3
)
Ajoutez
une
page
qui
contient
l'
en-tête
et
le
footer
et
une
section
qui
contient
uniquement
un
lien
permettant
de
revenir
à
l'
index
de
la
page
principale
(
index1.php
)
.

Dans
index1.php
,
un
du
menus
permettra
de
accéder
à
cette
nouvelle
page
qu'
on
appelle
index2.php
.

php
à
Intro
à
HTML
à
Wamp
–
Premiers
programmes
à
page
51/53
10
.

Documentation
Principes
Les
références
Il
existe
plusieurs
sites
de
référence
pour
avoir
de
la
documentation
:
php.net
:
http://php.net/docs.php
w3school
:
http://www.w3schools.com/php/
Et
du
cours
:
Code
academy
:
https://www.codecademy.com/learn/php
OpenClassRoom
:
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-etmysql
et
https://openclassrooms.com/paths/developpeur-php-symfony
Et
bien
sûr
:
google
!

Les
bons
usage
Il
faut
toujours
essayer
de
passer
par
une
documentation
à
officielle
»
pour
comprendre
le
mieux
possible
sans
se
contenter
de
un
exemple
qui
marche
.

Il
faut
donc
apprendre
à
se
servir
de
la
documentation
Exemple
de
usage
:
php.net
page
de
accueil
en
français
http://php.net/manual/fr/
:
on
y
trouve
le
sommaire
Liste
du
fonctions
http://php.net/manual/fr/funcref.php
Notez
:
Extensions
sur
les
mathématiques
:
contient
Math
:
fonctions
mathématiques
Traitement
de
texte
:
contient
Chaîne
de
caractères
:
fonction
de
traitement
de
chaines
.

Accès
direct
à
une
fonction
:
php.net/nomFonction
php.net/date
:
je
arrive
directement
sur
la
fonction
date
:
http://php.net/manual/fr/function.date.php
si
je
remonte
le
menu
de
droite
,
je
reviendrai
au
niveau
de
la
liste
du
fonctions
.

Liste
du
thématiques
de
fonctions
à
audio
Php
à
Intro
–
HTML
–
Wamp
–
Premiers
programmes
à
page
52/53
à
identification
à
ligne
de
commande
à
archivage
et
compression
•
cartes
de
crédit
à
cryptographie
•
base
de
données
•
dates
et
au
heures
à
systèmes
de
fichiers
à
langage
humain
et
encodage
de
caractères
à
génération
et
traitement
du
image
•
emails
•
mathématiques
à
données
non-textuelles
•
contrôle
du
processus
•
moteurs
de
recherche
•
serveurs
•
sessions
•
traitement
du
texte
à
variables
et
au
types
à
services
Web
•
Windows
à
XML
Php
à
Intro
–
HTML
–
Wamp
–
Premiers
programmes
à
page
53/53
LES
base
du
LANGAGE
Php
http://php.net/manual/fr/langref.php
http://www.w3schools.com/php/
Open
Class
Room
SOMMAIRE
SOMMAIRE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
1
Bases
du
LANGAGE
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
Installation
du
fichiers
de
tests
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
3
Les
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Définition
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
4
Les
types
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Vérifier
le
type
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

5
La
signification
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

5
Que
peut
on
faire
avec
une
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
5
Exemple
1
:
on
peut
utiliser
une
variable
dans
un
calcul
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
6
Constantes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

6
Tests
:
exemples
2
et
3
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
if
,
else
,
elseif
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
opérateurs
de
comparaison
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
opérateurs
logiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
switch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
opérateur
de
comparaison
ternaire
:
?

:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
HTML
dans
le
php
ou
séparé
du
php
:
exemple
4
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

8
HTML
dans
le
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
8
HTML
séparé
du
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
8
HTML
dans
le
Php
avec
balise
heredoc
:
<<<
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
8
Boucles
:
exemple
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
While
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

9
for
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
Exercice
:
10
premiers
entiers
,
carrés
et
racines
dans
un
tableau
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
10
Débranchements
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
11
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
break
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
continue
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
11
goto
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

11
Bibliothèque
de
Fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.12
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Fonctions
de
calcul
mathématique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Fonction
de
traitement
de
chaine
de
caractères
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Fonction
de
traitement
de
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Envoi
de
mail
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Générer
du
PDF
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Générer
des
image
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Traiter
des
expressions
régulières
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Tableau
numéroté
et
tableau
associatif
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..14
Tableau
numéroté
–
exemples
6
,
7
et
8
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
14
base
du
php
–
Environnement
de
développement
à
page
1/29
-
Open
Class
Room
Exercice
–
tableau
de
prénoms
et
liste
à
puces
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
16
Tableau
associatif
–
exemple
9
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

17
Exercice
–
tableau-users-Etape-0
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
18
Exercice
–
tableau
périodique
du
éléments
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

18
Tableau
numéroté
de
tableau
associatif
–
exemple
10
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
20
Fonctions
de
manipulation
de
tableau
–
exemples
11
et
12
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
Exercice
–
tableau-users-Etape-1
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
22
Ecrire
ses
propres
fonctions
–
exemple
13
et
14
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..23
Fonction
de
affichage
,
qui
ne
renvoie
rien
–
exemple
13
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

23
Fonction
qui
renvoie
un
résultat
–
exemple
14
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
23
Fonction
avec
un
paramètre
en
sortie
:
qui
est
modifié
–
exemple
15
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
24
Visibilité
du
variables
–
exemple
16
–
global
,
GLOBALS
,
static
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
24
Exercice
–
tableau-users-Etape-2
:
codage
avec
fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
Filtrer
un
tableau
:
fonction
array_filter
–
exemple
17
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
28
Exercice
–
tableau-users-Etape
3
:
tri
du
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
29
Edition
:
mars
2018
base
du
php
–
Environnement
de
développement
à
page
2/29
-
Open
Class
Room
Bases
du
LANGAGE
Php
Installation
du
fichiers
de
tests
Les
exemples
du
cours
sont
dans
un
fichier
zip
fournis
avec
l'
article
du
cours
:
00-BASES-DULANGAGE.zip
.

Les
exemples
sont
présentés
dans
un
chapitre
en
vert
.

Chargez
ce
fichier
et
mettez
-le
dans
le
dossier
Partie_2
du
répertoire
web
«
www
»
du
serveur
Wamp
.

Les
exercices
à
faire
sont
présentés
dans
un
chapitre
en
jaune
.

REMARQUE
:
Tous
les
fichiers
de
exemples
commencent
par
ces
trois
lignes
:
echo
'
<h1>CODE
PHP</h1>
'
;
highlight_file('fichier.php')
;
echo
'
<h1>RESULTATS</h1>
'
;
Ce
code
affiche
deux
balises
h1
avec
Code
Php
pui
RESULTATS
La
fonction
«
highlight_file
»
permet
de
afficher
le
contenu
du
fichier
proposé
.

Quand
on
teste
le
code
,
on
commence
par
affiche
le
code
.

Ca
permet
de
voir
le
code
en
même
temps
que
les
résultats
.

Pour
généraliser
le
code
,
on
écrit
:
highlight_file(basename(__FILE__))
;
basename(__FILE__)
permet
de
récupérer
le
nom
du
fichier
en
cours
de
traitement
.

base
du
php
–
Environnement
de
développement
à
page
3/29
-
Open
Class
Room
Les
variables
Définition
Une
variable
est
un
moyen
pour
stocker
en
mémoire
une
information
le
temps
de
la
génération
de
la
page
Php
Une
variable
a
un
nom
,
une
valeur
,
un
type
et
une
signification
.

En
php
,
le
nom
de
une
variable
commence
par
un
$
Par
exemple
:
$username
est
une
variable
de
type
string
dont
la
signification
sera
de
contenir
une
information
qui
est
un
nom
de
l'
utilisateur
.

Les
types
Présentation
Les
variables
peuvent
enregistrer
des
informations
de
différents
types
:
Entier
,
décimal
(
nombre
à
virgule
)
,
texte
et
booléen
(
vrai
ou
faux
)
sont
les
principaux
.

http://php.net/manual/fr/language.types.php
Le
type
entier
:
int
0
,
1
,
2
,
3
,
etc
et
les
entiers
négatifs
:
-1
,
-2
,
etc
.

Le
type
décimal
:
float
Ce
sont
les
nombres
à
virgules
:
1.234
On
écrit
la
virgule
avec
un
point
.

Tant
que
on
n'
a
pas
besoin
de
une
précision
extrême
,
ils
conviennent
très
bien
à
tous
les
calculs
.

Le
type
texte
(
ou
chaine
de
caractères
)
:
string
Les
chaines
de
caractères
sont
écrites
entre
guillemets
ou
apostrophe
.

On
parle
aussi
de
quotte
ou
simple
quotte
ou
simple
guillemet
pour
les
apostrophes
,
de
double
quotte
pour
les
guillemets
.

Le
type
booléen
:
bool
Peut
prendre
les
valeurs
true
ou
false
.

La
valeur
NULL
On
peut
donner
la
valeur
NULL
à
toutes
les
variables
,
quel
que
soit
leur
type
.

Cela
veut
dire
que
la
variable
ne
contient
rien
.

Types
tableau
,
objet
,
ressource
Il
existe
aussi
un
type
pour
les
tableaux
(
suite
du
cours
)
,
pour
les
objets
(
cours
Poo
)
et
pour
les
ressource
(
une
ressource
est
une
référence
à
une
ressource
externe
:
voir
la
doc
Php
)
.

base
du
php
–
Environnement
de
développement
à
page
4/29
-
Open
Class
Room
Vérifier
le
type
Quand
on
utilise
une
variable
,
on
n'
a
pas
besoin
de
lui
préciser
son
type
.

Selon
la
valeur
qu'
on
donne
à
la
variable
,
le
type
est
défini
automatiquement
.

Des
fonctions
permettent
de
savoir
de
quel
type
est
quelle
variable
.

Par
exemple
:
is_bool($maVariable)
retourne
vrai
(
1
)
si
$maVariable
est
un
booléen
,
faux
(
0
)
sinon
.

http://php.net/manual/fr/function.is-bool.php
is_bool
,
is_float
,
is_numeric
,
etc
.

La
signification
Une
variable
sert
à
quelque
chose
,
par
exemple
à
enregistrer
le
nom
de
l'
utilisateur
.

C'
est
sa
signification
.

On
lui
donne
un
nom
en
rapport
avec
sa
signification
.

Ce
n'
est
pas
obligé
,
mais
c'
est
préférable
.

Que
peut
on
faire
avec
une
variable
On
peut
donner
une
valeur
à
une
variable
$username=
"
Barack
"
;
On
parle
de
affectation
ou
de
assignation
On
peut
afficher
le
contenu
de
une
variable
echo
$username
;
Ici
pas
de
guillemets
comme
quand
on
affiche
un
texte
.

On
peut
concaténer
une
variable
à
une
chaine
de
caractère
Avec
du
texte
entre
apostrophes
ou
entre
guillemets
,
on
peut
concaténer
une
variable
avec
l'
opérateur
«
.

à
Echo
'
bonjour
'
.

$username
.

'
.

Comment
allez
vous
?

'
mieux
vaut
utiliser
les
apostrophes
à
‘
»
dans
le
Php
et
les
guillemets
à
“
»
dans
le
HTML
.

On
peut
afficher
le
contenu
de
une
variable
dans
une
chaine
de
caractère
Avec
du
texte
entre
guillemets
,
on
peut
mettre
la
variable
directement
dans
le
texte
entre
guillemets
.

Echo
"
bonjour
$username
.

Comment
allez
vous
?

"
On
évite
cet
usage
.

On
utilise
le
précédent
,
avec
la
concaténation
Concaténation
:
opérateur
«
.

à
Le
«
.

»
permet
de
concaténer
deux
textes
,
une
variable
et
du
texte
,
deux
variables
.

Opérateurs
arithmétique
On
utilise
les
opérateurs
classiques
:
+
,
-
,
/
,
*
,
%
Opérateur
de
incrémentation
Base
du
php
–
Environnement
de
développement
à
page
5/29
-
Open
Class
Room
$i++
équivaut
à
$i=$i+1
Attention
,
c'
est
une
post-incrémentation
:
si
on
fait
à
echo
çiu
;
c'
est
le
çi
avant
l'
incrémentation
qui
est
affiché
.

Exemple
1
:
on
peut
utiliser
une
variable
dans
un
calcul
<
?

php
$prix_unitaire=11.6
;
$quantite=5
;
$produit="clé
Usb
32
go
"
;
$prix_total=$quantite*$prix_unitaire
;
echo
'
bonjour
<br>
'
;
echo
$quantite
.

'
'
.$produit
.

'
:
'
.$prix_total
;
?

>
On
peut
utiliser
les
symboles
classiques
de
calcul
:
+
,
-
,
x
,
/
,
%
(
modulo
)
,
et
toutes
les
fonction
classiques
(
sin()
,
cos()
,
sqrt()
,
powç
:
http://php.net/manual/fr/function.pow.php
à
noter
que
à
gauche
du
signe
=
,
on
modifie
la
valeur
de
la
variable
.

Ce
qu'
il
y
avait
dans
la
variable
avant
la
modification
est
perdu
.

à
droite
du
signe
=
,
on
utilise
la
valeur
de
la
variable
pour
faire
le
calcul
.

à
noter
aussi
que
on
ne
met
pas
de
point
autour
de
la
variable
dans
l'
echo
,
au
début
de
l'
echo
,
au
début
de
la
variable
,
à
la
fin
de
la
variable
à
la
fin
de
l'
echo
.

Constantes
Une
constante
est
une
sorte
de
variable
qui
ne
peut
pas
être
modifiée
.

Son
nom
est
donné
en
majuscule
par
convention
.

Sa
valeur
est
donnée
par
la
fonction
à
define
»
.

On
y
accède
sans
utiliser
le
«
$
»
.

<
?

php
define("CONSTANT
"
,
"
Bonjour
le
monde
.
"
)
;
echo
CONSTANT
;
//
affiche
"
Bonjour
le
monde
.
"

define('ANIMALS
'
,
array(
'
chien
'
,
'
chat
'
,
'
oiseau
'
)
)
;
echo
ANIMALS[1
]
;
//
affiche
"
chat
"
?

>
base
du
php
–
Environnement
de
développement
à
page
6/29
-
Open
Class
Room
Tests
:
exemples
2
et
3
if
,
else
,
elseif
if
(
$maVariable
==
0){
instructions
;
}
elseif
(
$maVariable
>0
{
instructions
;
à
else
{
/*
$maVariable<0
*/
instructions
;
}
if
:
http://php.net/manual/fr/control-structures.if.php
else
:
http://php.net/manual/fr/control-structures.else.php
elseif
:
http://php.net/manual/fr/control-structures.elseif.php
opérateurs
de
comparaison
==
,
!

=
,
<
,
<=
,
>
,
çù
http://php.net/manual/fr/language.operators.comparison.php#language.operators.comparison
===
:
vrai
si
les
valeurs
sont
identiques
et
de
même
type
,
!

==
opérateurs
logiques
binaires
:
AND
,
&&
,
OR
,
||
(
$a>0
and
$a<10
)
unaires
:
!

(
!

is_int($a)
)
http://php.net/manual/fr/language.operators.logical.php
switch
switch
(
$maVariable
)
à
case(0)
:
instructions
;
break
;
case
(
1
)
:
instructions
;
break
;
default
:
instructions
;
}
switch
:
http://php.net/manual/fr/control-structures.switch.php
opérateur
de
comparaison
ternaire
:
?

:
$monResultat
=
(
$maVarialble
==
0
)
?

true
:
false
;
base
du
php
–
Environnement
de
développement
à
page
7/29
-
Open
Class
Room
http://php.net/manual/fr/language.operators.comparison.php#language.operators.comparison.te
rnary
HTML
dans
le
php
ou
séparé
du
Php
:
exemple
4
HTML
dans
le
Php
<
?

php
if
(
$variable
<0
)
à
echo
<strong>variable
'
.$variable.'</strong>
:
c\'est
négatif
!

'
;
}
?

>
On
peut
mettre
des
variables
dans
l'
echo
.

Il
faut
utiliser
du
\
’
.

HTML
séparé
du
Php
<
?

php
if
(
$variable
<0
)
{
?

à
<strong>variable</strong>
est
négatif
!

<
?

php
}
?

à
Cette
solution
sépare
le
code
HTML
du
code
Php
.

si
on
a
beaucoup
de
code
HTML
,
sans
variable
,
c'
est
plus
pratique
.

On
évite
les
\
’
si
on
doit
ajouter
des
variables
,
c'
est
inadapté
HTML
dans
le
Php
avec
balise
heredoc
:
çùë
L'
opérateur
<<<
,
qu'
on
peut
appeler
balise
heredoc
,
permet
de
ouvrir
une
deux
balises
_BALISE
.

Tout
le
texte
contenu
dans
la
balise
est
une
chaîne
de
caractère
.

Les
apostrophes
et
guillemets
peuvent
être
traités
tels
quels
,
sans
\
’
On
peut
y
mettre
directement
des
variables
$variable
La
balise
fermante
_BALISE
doit
être
collée
à
la
marge
gauche
et
être
seule
avec
le
;
if
(
$variable
<0
)
à
echo
<<<_BALISE
<strong>variable
$variable</strong>
:
c'
est
négatif
!

<br>
_BALISE
;
On
peut
facilement
utiliser
des
variables
et
on
évite
les
\
’
C'
est
peu
utilisé
.

base
du
php
–
Environnement
de
développement
à
page
8/29
-
Open
Class
Room
Boucles
:
exemple
5
While
http://php.net/manual/fr/control-structures.while.php
Présentation
while
(
$cpt
<
10){
instructions
;
}
tant
que
maVariable
<10
,
on
répète
les
instructions
.

Il
faut
bien
sûr
que
maVariable
soit
modifiée
dans
les
instructions
pur
que
on
puisse
sortir
de
la
boucle
.

Boucler
10
foi
Pour
boucler
10
foi
on
peut
écrire
$cpt
=1
while
(
$cpt
çù
10){
instructions
;
$cpt
++
;
}
Le
NS
permet
de
incrémenter
$cpt
.

$cpt
++
;
est
équivalent
à
$cpt
=$cpt
+1
;
for
http://php.net/manual/fr/control-structures.for.php
La
boucle
for
est
l'
équivalent
de
la
boucle
while
pour
boucler
10
foi
(
ou
autant
de
foi
qu'
on
veut
)
:
for
(
$cpt
=1
;
$cpt
<
1
;
$cpt++){
instructions
;
}
Il
y
a
trois
parties
dans
le
for
:
à
L'
initialisation
de
maVariable
est
dans
le
for
,
en
premier
.

à
La
condition
de
sortie
est
au
milieu
.

à
L'
incrémentation
de
maVariable
est
en
troisième
position
.

base
du
php
–
Environnement
de
développement
à
page
9/29
-
Open
Class
Room
Exercice
:
10
premiers
entiers
,
carrés
et
racines
dans
un
tableau
HTML
Ecrire
un
script
qui
affiche
les
10
premiers
entiers
,
le
carré
et
leur
racine
carré
dans
un
tableau
.

Chercher
la
fonction
racine
carré
.

Résultat
attendu
:
etc
.

base
du
php
–
Environnement
de
développement
à
page
10/29
-
Open
Class
Room
Débranchements
Présentation
2
instructions
permettent
de
quitter
le
fonctionnement
standard
du
boucles
:
break
qui
fait
quitter
la
boucle
et
continue
qui
permet
de
passer
au
suivant
.

break
http://php.net/manual/fr/control-structures.break.php
while
(
$maVariable
à
10){
if($casParticulierQuiFaitSortir
==true){
ce
qu'
il
y
a
à
faire
break
;
//
à
cas
général
}
continue
http://php.net/manual/fr/control-structures.continue.php
while
(
$maVariable
à
10){
if($casParticulierQuiFaitPasserAuSuivant
==true){
ce
qu'
il
y
a
à
faire
continue
;
//
(
on
passe
au
suivant
)
à
cas
général
à
goto
http://php.net/manual/fr/control-structures.goto.php
Le
goto
permet
de
aller
de
n'
importe
où
vers
n'
importe
où
!

C'
est
à
éviter
!

base
du
php
–
Environnement
de
développement
à
page
11/29
-
Open
Class
Room
Bibliothèque
de
Fonctions
Présentation
Il
existe
des
milliers
de
fonctions
qu'
on
peut
utiliser
en
Php
.

http://php.net/manual/fr/funcref.php
Fonctions
de
calcul
mathématique
http://php.net/manual/fr/book.math.php
sqrt
:
racine
carré
,
pow
:
puissance
,
round
:
arrondi
,
rand
:
aléatoire
,
min
,
max
,
cos
,
sin
,
etc
.

Fonction
de
traitement
de
chaine
de
caractères
http://php.net/manual/fr/ref.strings.php
length
,
substr
,
strpos
,
str_replace
:
longueur
,
extraction
,
position
,
remplacement
.

trim
,
ltrim
:
pour
supprimer
les
espaces
au
début
ou
à
la
fin
de
une
chaîne
.

chr
,
ord
:
passer
de
un
caractère
à
un
nombre
printf
,
fprintf
:
print
formaté
(
f
de
fin
)
,
print
formaté
dans
un
fichier
(
f
de
début
)
sscanf
:
scan
formaté
(
f
de
fin
)
dans
une
string
(
s
de
début
)
Fonction
de
traitement
de
date
http://php.net/manual/fr/ref.datetime.php
Envoi
de
mail
http://php.net/manual/fr/function.mail.php
Générer
des
PDF
en
Php
http://php.net/manual/fr/book.pdf.php
Générer
des
image
en
Php
http://php.net/manual/fr/book.image.php
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/creer-desimages-en-php
Traiter
des
expressions
régulières
en
Php
http://php.net/manual/fr/book.pcre.php
base
du
php
–
Environnement
de
développement
à
page
12/29
-
Open
Class
Room
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/lesexpressions-regulieres-partie-1-2
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/lesexpressions-regulieres-partie-2-2-2
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/mementodes-expressions-regulieres
base
du
php
–
Environnement
de
développement
à
page
13/29
-
Open
Class
Room
Tableau
numéroté
et
tableau
associatif
Tableau
numéroté
à
exemples
6
,
7
et
8
Présentation
Tableau
«
classique
»
:
permet
de
mettre
plusieurs
valeurs
de
un
même
type
dans
une
même
variable
.

Fonction
array
:
créer
le
tableau
$prenoms
=
array
(
‘
Aurélien
’
,
à
Isabelle
’
,
à
Ahmed
’
,
à
Olivier
’
,
à
Nour
’
,
à
Chang
’
)
;
//
crée
$prenoms[0
]
,
$prenoms[1
]
jusque
à
$prenoms[5
]
Créer
le
tableau
par
les
indices
$lesPrenoms[0]=
’
Aurélien
’
;
$lesPrenoms[1]=
’
Isabelle
’
;
$lesPrenoms[2]=
à
Ahmed
’
;
Notez
que
le
premier
élément
du
tableau
est
à
l'
indice
0
.

L'
indice
est
aussi
appelé
clé
.

Créer
le
tableau
par
les
indices
automatiques
$lesPrenoms
[
çà
’
Aurélien
’
;
//
crée
$prenoms[0
]
$lesPrenoms
[
çà
à
Isabelle
’
;
//
crée
$prenoms[1
]
$lesPrenoms
[
]=
à
Ahmed
’
;
//
crée
$prenoms[2
]
Quand
on
utilise
les
crochets
vides
,
le
nouvel
élément
est
placé
automatiquement
à
la
suite
du
précédents
.

Instruction
echo
:
afficher
un
élément
du
tableau
echo
$prenoms[2
]
;
Boucle
for
:
afficher
tout
le
tableau
<
?

php
$lesPrenoms[0]='Aurélien
'
;
$lesPrenoms[1]='Olivier
'
;
$lesPrenoms[2]='Ahmed
'
;
for
(
$indice
=
0
;
$indice
<count($lesPrenoms)
;
$indice++
)
à
echo
'
lesPrenoms['.$indice
.
'
]

=
'
.$lesPrenoms[$indice
]
.

'
<br/>
'
;
}
?

à
Notez
la
présence
de
la
fonction
count
pour
avoir
le
nombre
de
éléments
du
tableau
.

base
du
php
–
Environnement
de
développement
à
page
14/29
-
Open
Class
Room
Fonction
print-r()
:
affichage
basique
du
tableau
sans
mise
en
forme
Affichage
sur
une
seule
ligne
<
?

php
$lesPrenoms=array('Aurélien','Isabelle','Ahmed')
;
print_r($lesPrenoms)
;
?

à
Affichage
ligne
par
ligne
:
avec
la
balise
<pre>
<
?

php
$lesPrenoms=array('Aurélien','Isabelle','Ahmed')
;
echo
$lesPrenoms
;
echo
'
<pre>
'
;
print_r($lesPrenoms)
;
echo
'
</pre>
'
;
?

à
Fonction
var_dump()
:
affichage
basique
du
informations
de
une
variable
Affichage
sur
une
seule
ligne
avec
le
type
en
plus
:
<
?

php
$lesPrenoms=array('Aurélien','Isabelle','Ahmed')
;
var_dump($lesPrenoms)
;
$i=5
;
var_dump($i)
;
?

à
Attention
:
il
ne
doit
pas
y
avoir
de
trous
dans
le
tableau
<
?

php
$lesPrenoms[0]='Aurélien
'
;
$lesPrenoms[1]='Olivier
'
;
$lesPrenoms[2]='Ahmed
'
;
$lesPrenoms[5]='Hang
'
;
//
ça
affiche
les
4
prénom
print_r($lesPrenoms)
;
//
le
for
n'
affichera
rien
pour
$lesPrenoms[3
]
//
et
n'
affichera
pas
$lesPrenoms[4
]
for
(
$indice
=
0
;
$indice
<count($lesPrenoms)
;
$indice++
)
à
echo
'
lesPrenoms['.$indice
.
'
]

=
'
.$lesPrenoms[$indice
]
.

'
<br/>
'
;
}
?

à
boucle
foreach
:
afficher
tout
le
tableau
,
quel
que
soit
l'
indice
Pour
passer
en
revue
tous
les
éléments
du
tableau
,
quel
que
soit
leur
numéro
dans
le
tableau
,
on
utilise
le
foreach
.

Dans
la
boucle
foreach
on
met
le
tableau
et
le
nom
de
la
variable
qu'
on
récupère
dans
le
tableau
.

Les
deux
éléments
sont
séparés
par
un
as
.

La
boucle
foreach
gère
automatiquement
le
fait
de
démarrer
au
premier
élément
du
tableau
et
de
aller
jusque
au
dernier
.

<
?

php
base
du
php
–
Environnement
de
développement
à
page
15/29
-
Open
Class
Room
$lesPrenoms=array('Aurélien','Isabelle','Ahmed')
;
foreach
(
$lesPrenoms
as
$unPrenom){
echo
$unPrenom
.

'
<br/>
'
;
}
?

à
boucle
foreach
$key
=>
$value
Chaque
élément
de
un
tableau
correspond
à
un
couple
(
key
,
value
)
:
la
clé
est
le
numéro
de
l'
élément
dans
le
tableau
,
la
value
sa
valeur
.

On
peut
ajouter
le
$key
dans
la
boucle
foreach
:
ça
permet
de
accéder
à
la
clé
directement
.

<
?

php
$lesPrenoms=array('Aurélien','Isabelle','Ahmed')
;
echo
'
<h2>affichage
foreach
$key
=>
$value</h2>
'
;
foreach
(
$lesPrenoms
as
$key
çù
$value){
echo
'
$key
:
'
.$key
.

'
<br/>
'
;
echo
'
$value
:
'
.$value
.

'
<br/>
'
;
}
?

à
chaine
vers
tableau
:
implode
et
explode
explode
pour
convertir
une
chaine
avec
une
liste
de
valeurs
en
tableau
numéroté
implode
pour
convertir
un
tableau
numéroté
en
une
chaine
contenant
la
liste
du
valeurs
du
tableau
.

On
précise
au
fonction
le
séparateur
qu'
on
trouve
entre
les
valeurs
dans
la
chaine
.

$chaine=implode
(
$sep
,
$tableau
)
;
$chaine=implode
(
«
<br>
»
,
$tableau
)
;
$tab
=
explode
(
$sep
,
$chaine
)
;
$tab
=
explode
(
«
,
»
,
$chaine
)
;
Exercice
–
tableau
de
prénoms
et
liste
à
puces
Ecrire
un
script
qui
affiche
le
contenu
de
un
tableau
de
prénoms
dans
une
liste
à
puces
.

Les
prénoms
sont
écrits
en
minuscules
avec
une
majuscule
en
premier
.

Résultat
attendu
:
Faites
une
version
qui
n'
affiche
que
les
prénoms
dont
la
première
lettre
vient
après
le
Ho
Chercher
des
informations
sur
la
fonction
strcmp()
dans
la
documentation
Php
.

On
utilisera
un
«
continue
»
.

base
du
php
–
Environnement
de
développement
à
page
16/29
-
Open
Class
Room
Tableau
associatif
–
exemple
9
Présentation
Un
tableau
associatif
est
un
tableau
particulier
qui
permet
de
mettre
plusieurs
valeurs
de
type
différents
dans
une
même
variable
.

C'
est
l'
équivalent
de
une
structure
(
struct
)
ou
de
un
objet
dans
d'
autres
langages
.

à
chaque
valeur
on
associe
un
nom
qu'
on
appelle
clé
ou
attribut
.

Ce
nom
est
donc
«
associé
»
à
la
valeur
.

php
parle
de
tableau
associatif
.

fonction
array
:
créer
le
tableau
:
$utilisateur
=
array
(
'
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
'
nomUtilisateur
'
=>
'
aurelien1995
'
)
;
Créer
le
tableau
par
les
indices
$utilisateur['nom
'
]
=
'
Toto
'
;
$utilisateur['prenom
'
]
=
'
Aurélien
'
;
$utilisateur['dateNaissance
'
]
=
1995
;
$utilisateur['nomDUtilisateur
'
]
=
'
aurelien1995
'
;
Instruction
echo
:
afficher
un
élément
du
tableau
echo
$utilisateur[‘nomUtilisateur
’
]
;
Fonction
print-r()
:
affichage
basique
du
tableau
associatif
sans
mise
en
forme
Affichage
sur
une
seule
ligne
<
?

php
$utilisateur
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
nomUtilisateur
=>
'
aurelien1995
'
)
;
print_r($utilisateur)
;
?

à
Affichage
ligne
par
ligne
:
avec
la
balise
<pre>
<
?

php
$utilisateur
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
nomUtilisateur
=>
'
aurelien1995
'
)
;
echo
'
<pre>
'
;
print_r($utilisateur)
;
echo
'
</pre>
'
;
?

>
base
du
php
–
Environnement
de
développement
à
page
17/29
-
Open
Class
Room
Afficher
tout
le
tableau
associatif
:
boucle
foreach
Dans
la
boucle
foreach
on
met
le
tableau
et
le
nom
de
la
variable
qu'
on
récupère
dans
le
tableau
.

Les
deux
éléments
sont
séparés
par
un
as
.

La
boucle
foreach
gère
automatiquement
le
fait
de
démarrer
au
premier
élément
du
tableau
et
de
aller
jusque
au
dernier
.

<
?

php
$utilisateur
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
nomUtilisateur
=>
'
aurelien1995
'
)
;
foreach
(
$utilisateur
as
$element){
echo
$element
.

'
<br/>
'
;
}
?

à
boucle
foreach
$key
=>
$value
Chaque
élément
de
un
tableau
associatif
,
comme
pour
un
tableau
numéroté
,
correspond
à
un
couple
(
key
,
value
)
.

La
key
correspond
à
un
attribut
,
la
value
à
sa
valeur
.

On
peut
ajouter
le
$key
dans
la
boucle
foreach
:
ça
permet
de
accéder
à
l'
attribut
.

<
?

php
$utilisateur
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
nomUtilisateur
=>
'
aurelien1995
'
)
;
echo
'
<h2>affichage
foreach
as
$key
=>
$value</h2>
'
;
foreach
(
$utilisateur
as
$key
çù
$value){
echo
'
$key
:
'
.$key
.

'
<br/>
'
;
echo
'
$value
:
'
.$value
.

'
<br/>
'
;
}
?

à
Exercice
à
tableau-users-Etape-0
On
veut
gérer
des
utilisateurs
avec
les
caractéristiques
suivantes
:
Prénom
et
Nom
(
dans
un
seul
champ
)
,
mail
,
motDePasse
,
age
Créer
un
utilisateur
(
vous
!

)
avec
ces
informations
dans
un
tableau
associatif
.

Afficher
ce
tableau
associatif
avec
un
print_r
avec
une
ligne
par
information
.

Afficher
ce
tableau
associatif
dans
un
tableau
HTML
.

Exercice
–
tableau
périodique
du
éléments
En
chimie
,
le
tableau
périodique
du
éléments
associe
un
symbole
à
un
nom
de
élément
chimique
.

h
pour
Hydrogène
,
He
pour
Helium
,
etc
.

Faites
un
programme
qui
affiche
au
moins
les
5
premiers
éléments
dans
un
tableau
HTML
.

base
du
php
–
Environnement
de
développement
à
page
18/29
-
Open
Class
Room
vous
pouvez
trouver
les
autres
sur
internet
.

Résultats
attendus
:
vous
devez
mettre
les
résultats
dans
une
page
HTML
.

base
du
php
–
Environnement
de
développement
à
page
19/29
-
Open
Class
Room
Tableau
numéroté
de
tableau
associatif
–
exemple
10
Présentation
On
utilise
souvent
des
tableaux
numérotés
qui
contiennent
des
tableaux
associatifs
.

Par
exemple
,
un
tableau
de
élèves
.

On
utilise
un
foreach
et
un
foreach
$key=>$value
.

$utilisateurs[
]
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
dateNaissance
'
=>
1995
,
'
nomUtilisateur
'
=>
'
aurelien1995
'
)
;
$utilisateurs[
]
=
array
(
'
nom
'
=>
'
Tata
'
,
'
prenom
'
=>
'
Bertrand
'
,
'
dateNaissance
'
=>
1990
,
'
nomUtilisateur
'
=>
'
bertrand1990
'
)
;
$utilisateurs[
]
=
[
'
Toto3
'
,
'
Olivier
'
,
1992
,
'
olivier1992
'
]
;
$utilisateurs[
]
=
[
'
Titi4
'
,
'
Ahmed
'
,
1990
,
'
ahmed1990
'
]
;
echo
'
<h2>affichage
foreach</h2>
'
;
foreach
(
$utilisateurs
as
$user){
echo
'
<pre>
'
;
print_r($user)
;
echo
'
</pre>
'
;
}
echo
'
<h2>affichage
foreach
skey
=>
$value</h2>
'
;
foreach
(
$utilisateurs
as
$index
=>
$user){
echo
'
<p><b>$index
:
'
.$index
.

'
</b></p>
'
;
echo
'
<pre>
'
;
print_r($user)
;
echo
'
</pre>
'
;
foreach
(
$user
as
$key
çù
$value){
echo
'
<p>$key
:
'
.$key
.

'
<br>
'
;
echo
'
$value
:
'
.$value
.

'
</p>
'
;
}
}
base
du
php
–
Environnement
de
développement
à
page
20/29
-
Open
Class
Room
Fonctions
de
manipulation
de
tableau
à
exemples
11
et
12
Il
existe
beaucoup
de
fonction
de
manipulation
de
tableau
http://php.net/manual/fr/ref.array.php
Citons
particulièrement
:
array
pour
créer
un
tableau
count
-
sizeof
count($monTableau)
ou
sizeof($monTableau)
pour
récupérer
le
nombre
de
éléments
du
tableau
.

sort
–
exemple
11
sort($monTableau)
pour
trier
un
tableau
numéroté
rsort()
pour
trier
en
sens
inverse
.

Exemple
11
.

Toutes
les
fonctions
de
tri
:
http://php.net/manual/fr/array.sorting.php
ksort
ksort($monTableau)
pour
trier
un
tableau
associatif
selon
la
à
key
»
.

krsort()
pour
trier
en
sens
inverse
.

asort
asort($monTableau)
pour
trier
un
tableau
associatif
selon
la
à
value
»
.

arsort()
pour
trier
en
sens
inverse
.

in_array
in_array(‘valeur
’
,
$monTableau
)
est
vrai
si
à
valeur
’
est
dans
$monTableau
.

array_key_exists
–
exemple
12
array_key_exists($cle
,
$monTableauAssociatif
)
est
vrai
si
$cle
est
une
clé
du
tableau
associatif
$monTableauAssociatif
.

array-search
array_search(‘Nour
à
,
$lesPrenoms
)
renvoie
l'
indice
de
la
valeur
à
Nour
’
dans
le
tableau
$lesPrenoms
,
soit
4
dans
notre
exemple
(
cf
.

plus
haut
)
.

shuffle
–
exemple
11
shuffle($monTableau)
pour
mélanger
un
tableau
.

base
du
php
–
Environnement
de
développement
à
page
21/29
-
Open
Class
Room
Exercice
–
tableau-users-Etape-1
1
)
On
veut
gérer
des
utilisateurs
avec
les
caractéristiques
suivantes
:
Prénom
et
Nom
(
dans
un
seul
champ
)
,
mail
,
motDePasse
,
age
Créer
un
utilisateur
(
vous
!

)
avec
ces
informations
dans
un
tableau
associatif
.

Afficher
ce
tableau
associatif
avec
un
print_r
avec
une
ligne
par
information
.

2
)
On
veut
créer
non
plus
un
seul
utilisateur
mais
un
tableau
de
utilisateurs
.

Créer
ce
tableau
avec
5
utilisateurs
.

On
créera
le
premier
utilisateur
avec
la
syntaxe
suivante
:
$lesUtilisateurs[0]['nom']='Toto
TOTO
'
;
etc
.

Et
les
autres
avec
cette
syntaxe
:
$lesUtilisateurs[
]
=
array(
'
nom'=>'Toto
TOTO
'
,
etc
.

3
)
4
)
5
)
6
)
Afficher
les
utilisateurs
créés
avec
un
print_r
Afficher
les
utilisateurs
avec
un
for
Afficher
les
utilisateurs
avec
un
foreach
Afficher
le
tableau
du
5
utilisateurs
en
HTML
dans
un
tableau
HTML
.

base
du
php
–
Environnement
de
développement
à
page
22/29
-
Open
Class
Room
Ecrire
ses
propres
fonctions
–
exemple
13
et
14
Fonction
de
affichage
,
qui
ne
renvoie
rien
–
exemple
13
On
veut
afficher
à
Olivier
a
20
ans
à
à
partir
du
prénom
et
de
l'
année
de
naissance
<
?

php
function
afficherAge($prenom
,
$anneeNaissance){
$today=getdate()
;
$age=$today['year']-$anneeNaissance
;
echo($prenom
.

'
a
'
.$age
.

'
ans
'
)
;
}
$utilisateur
=
array
(
e
nom
'
=>
'
Toto
'
,
'
prenom
'
=>
'
Aurélien
'
,
'
anneeNaissance
'
çù
1995
,
'
nomUtilisateur
'
=>
'
aurelien1995
'
)
;
afficherAge
(
$utilisateur['prenom
'
]
,
$utilisateur['anneeNaissance
'
]
)
;
?

à
La
fonction
a
deux
paramètres
en
entrée
:
le
prénom
et
l'
année
de
naissance
.

Elle
calcul
l'
âge
en
fonction
de
l'
année
de
naissance
et
de
l'
année
de
la
date
du
jour
.

La
fonction
getdate
permet
de
récupérer
l'
information
.

Ensuite
on
utilise
cette
fonction
à
partir
,
dans
l'
exemple
,
de
un
tableau
associatif
déjà
vu
.

Fonction
qui
renvoie
un
résultat
–
exemple
14
On
va
écrire
une
fonction
qui
renvoie
l'
âge
à
partir
de
l'
année
de
naissance
<
?

php
function
calculerAge($anneeNaissance){
$today=getdate()
;
$year=$today['year
'
]
;
$age=$year-$anneeNaissance
;
return
$age
;
}
$anneeNaissance=1990
;
$age=calculerAge($anneeNaissance)
;
echo('né
en
'
.$anneeNaissance
.

'
:
'
.$age
.

'
ans
.
'
)
;
?

à
La
fonction
a
un
paramètre
en
entrée
:
l'
année
de
naissance
.

Elle
calcul
l'
âge
en
fonction
de
l'
année
de
naissance
et
de
l'
année
de
la
date
du
jour
.

Elle
renvoie
le
résultat
avec
le
return
.

La
fonction
peut
alors
être
utilisée
pour
donner
une
valeur
à
une
variable
,
par
exemple
.

base
du
php
–
Environnement
de
développement
à
page
23/29
-
Open
Class
Room
Fonction
avec
un
paramètre
en
sortie
:
qui
est
modifié
–
exemple
15
On
va
écrire
une
fonction
qui
augmente
un
employé
.

L'
employé
est
un
tableau
associatif
avec
son
nom
et
son
salaire
.

La
fonction
reçoit
en
paramètre
l'
employé
et
l'
augmentation
.

<
?

php
echo
'
<h1>CODE
PHP</h1>
'
;
highlight_file(basename(__FILE__))
;
echo
'
<h1>RESULTATS</h1>
'
;
function
augmenter(&$employe
,
$augmentation){
$employe['salaire']=
$employe['salaire']+$augmentation
;
}
$emp=array('nom'=>'Toto
'
,
'
salaire'=>2000
)
;
print_r($emp)
;
echo'<br>
'
;
augmenter($emp
,
100
)
;
print_r($emp)
;
?

>
Dans
la
fonction
,
on
met
un
«
&
»
devant
$employe
:
c'
est
ce
qui
fait
que
il
ressortira
modifié
.

Le
test
fait
passer
de
2000
à
2100
.

Sans
le
«
&
»
,
on
reste
à
2000
.

Visibilité
du
variables
–
exemple
16
–
global
,
GLOBALS
,
static
3
niveaux
de
visibilité
pour
les
variables
http://php.net/manual/fr/language.variables.scope.php
à
Les
variables
de
la
page
ou
variables
globales
:
elles
sont
visibles
dans
la
page
après
leur
première
apparition
,
sauf
dans
les
fonctions
de
la
page
,
sauf
si
elles
sont
redéclarées
à
global
»
dans
les
fonctions
.

Elles
ne
sont
pas
visibles
dans
les
autres
page
.

à
noter
que
les
variables
de
page
sont
appelées
en
général
variables
globales
(
globales
à
la
page
)
.

à
noter
aussi
que
on
peut
utiliser
le
tableau
associatif
$GLOBALS
qui
contient
les
couples
keyvalue
correspondant
au
couples
nomDeVariable-valeurDeVariable
.

à
Les
variables
locales
:
elles
ne
sont
visibles
que
dans
la
fonction
où
elles
sont
définies
.

•
Les
variables
à
static
»
ou
encore
«
locales-globales
»
:
elles
ne
sont
visibles
que
dans
la
fonction
ou
elles
sont
définies
mais
elles
gardent
leur
valeur
quand
on
revient
dans
la
fonction
.

Circulation
de
l'
information
Entre
fonctions
et
entre
page
et
fonctions
Pour
passer
de
l'
information
à
une
fonction
,
on
la
passe
en
paramètre
de
la
fonction
.

si
une
variable
veut
accéder
à
une
variable
de
la
page
,
elle
doit
la
déclarer
«
global
»
dans
la
fonction
.

<
?

php
function
test1()
à
$varGlobale='test1
'
;
}
base
du
php
–
Environnement
de
développement
à
page
24/29
-
Open
Class
Room
function
test2()
{
global
$varGlobale
;
$varGlobale='test2
'
;
}
$varGlobale='global
'
;
test1()
;
echo
$varGlobale.'<br>
'
;
//
Affiche
:
global
test2()
;
echo
$varGlobale.'<br>
'
;
//
Affiche
:
test2
?

>
Entre
page
Pour
faire
circuler
de
l'
information
entre
page
,
on
utilise
les
variables
$_GET
et
$_POST
et
aussi
la
variable
$_SESSION
.

Cf
.

chapitre
suivant
.

base
du
php
–
Environnement
de
développement
à
page
25/29
-
Open
Class
Room
Exercice
–
tableau-users-Etape-2
:
codage
avec
fonctions
On
prend
le
fichier
de
correction
de
Exercice-tableau-users-Etape-1
.

On
le
duplique
et
on
l'
appelle
Etape-2.php
1
)
Dans
un
nouveau
fichier
appelé
à
unUser.php
»
on
va
créer
une
fonction
permettant
de
créer
un
utilisateur
.

On
l'
appelle
«
newUser
»
.

Ecrivez
cette
fonction
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
creation
de
un
utilisateur
newUser(
parametres
à
déterminer
)
;
2
)
Dans
le
fichier
à
unUser.php
»
,
ajoutez
une
fonction
qui
permette
de
afficher
un
utilisateur
avec
un
print_r
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
affichage
du
tableau
avec
un
print_r
print_rUnUser(
parametres
à
déterminer
)
;
3
)
Dans
le
fichier
à
unUser.php
»
,
ajoutez
une
fonction
qui
permette
de
afficher
un
utilisateur
champ
par
champ
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
affichage
du
tableau
avec
un
print_r
printUnUser(
parametres
à
déterminer
)
;
4
)
Dans
un
nouveau
fichier
appelé
à
lesUsers.php
»
,
ajoutez
une
fonction
qui
permette
de
créer
un
tableau
de
utilisateurs
.

Les
utilisateurs
sont
fournis
dans
la
fonction
.

On
appelle
cette
fonction
initTab
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
initialisation
de
un
tableau
de
utilisateurs
initLesUsers(
parametres
à
déterminer
)
;
5
)
Ensuite
on
se
dote
de
une
fonction
qui
affiche
les
utilisateurs
avec
un
print_r
.

Ajouter
l'
appel
à
cette
fonction
dans
la
copie
du
fichier
de
l'
étape1
.

//
affichage
du
tableau
avec
un
print_r
print_rLesUsers
(
$lesUtilisateurs
)
;
6
)
Ensuite
on
se
dote
de
une
fonction
qui
affiche
avec
un
for
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
affichage
du
tableau
de
façon
basique
avec
un
for
print_rLesUsersFor
(
$lesUtilisateurs
)
;
7
)
Ensuite
on
se
dote
de
une
fonction
qui
affiche
avec
un
foreach
.

Mettez
à
jour
la
copie
du
fichier
de
l'
étape1
pour
que
elle
utilise
cette
fonction
.

//
affichage
du
tableau
de
façon
basique
avec
un
foreach
print_rLesUsersForeach($lesUtilisateurs)
;
base
du
php
–
Environnement
de
développement
à
page
26/29
-
Open
Class
Room
8
)
à
la
place
du
âge
,
on
entre
l'
année
de
naissance
.

Adapter
le
programme
pour
que
on
continue
à
afficher
les
âge
.

On
se
dote
de
une
fonction
calculerAge($anneeNaissance)
et
et
met
à
jour
la
fonction
printUnUser()
,
le
tout
dans
le
fichier
unUser.php
.

9
)
Créer
une
fonction
de
affichage
qui
soit
stylé
:
par
exemple
on
affiche
dans
un
tableau
HTML
et
on
gère
un
peu
de
CSS
pour
le
tableau
.

base
du
php
–
Environnement
de
développement
à
page
27/29
-
Open
Class
Room
Filtrer
un
tableau
:
fonction
array_filter
–
exemple
17
La
fonction
à
array_filter
»
permet
de
filtrer
un
tableau
:
<
?

php
$tab=array(1
,
2
,
3
,
4
,
5
,
6
,
7
,
8
,
9
,
10
)
;
echo
'
<h2>affichage
tableau
complet</h2>
'
;
echo'<pre>
'
;
print_r($tab)
;
echo'</pre>
'
;
function
filtreLesPairs($element){
if($element%2==0)
return
true
;
else
return
false
;
à
$tab_filtre
=
array_filter($tab
,
"
filtreLesPairs
"
)
;
echo
'
<h2>affichage
du
pairs</h2>
'
;
echo'<pre>
'
;
print_r($tab_filtre)
;
echo'</pre>
'
;
?

à
Explication
:
on
passe
un
tableau
et
le
nom
de
une
fonction
en
paramètre
à
la
fonction
à
array_filter
»
.

Ici
,
la
fonction
s'
appelle
à
filtreLesPairs
»
.

On
définit
cette
fonction
.

Elle
a
un
paramètre
qui
correspond
à
un
élément
du
tableau
passé
en
paramètre
à
array_filter
.

On
peut
appeler
ce
paramètre
$element
.

On
va
choisir
quel
«
$element
on
conserve
.

si
on
retourne
true
,
on
conserve
le
$element
dans
le
tableau
,
sinon
,
on
ne
le
garde
pas
.

Ici
,
on
teste
si
l'
entier
est
divisible
par
2
.

base
du
php
–
Environnement
de
développement
à
page
28/29
-
Open
Class
Room
Exercice
–
tableau-users-Etape
3
:
tri
du
données
1
)
On
veut
trier
les
utilisateurs
par
nom
.

On
utilise
la
fonction
à
array_multisort
»
.

Son
principe
est
de
créer
un
tableau
avec
uniquement
les
noms
,
pui
de
faire
appel
à
la
fonction
à
array_multisort
à
en
passant
en
paramètre
le
tableau
avec
les
noms
,
une
constante
(
SORT_ASC
pour
dire
que
c'
est
un
tri
croissant
)
et
enfin
le
tableau
du
utilisateurs
.

function
triParNomDesc(&$lesUsers){
//
tri
du
tableau
par
nom
//
on
commence
par
fabriquer
le
tableau
du
noms
foreach
(
$lesUsers
as
$indice
çù
$unUser){
$lesNoms[$indice
]
=
$unUser['nom
'
]
;
}
//
appel
à
array_multisort
:
le
tableau
à
trier
est
en
dernier
array_multisort($lesNoms
,
SORT_DESC
,
$lesUsers
)
;
à
Enregistrer
cette
fonction
dans
un
fichier
à
tri.php
à
et
tester
cette
fonction
à
partir
du
résultat
de
l'
Etape
2
.

2
)
Avec
la
même
méthode
,
trier
par
âge
décroissant
3
)
Avec
la
même
méthode
,
trier
par
âge
et
nom
décroissant
4
)
Ensuite
on
va
généraliser
la
fonction
de
tri
pour
que
elle
puisse
trier
selon
n'
importe
quel
champ
.

5
)
Enfin
on
écrit
une
fonction
qui
tri
selon
2
champs
,
de
façon
générale
.

base
du
php
–
Environnement
de
développement
à
page
29/29
-
Open
Class
Room
ECHANGE
de
INFORMATIONS
Php
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql
http://php.net/manual/fr/langref.php
Open
Class
Room
SOMMAIRE
Sommaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

1
Echanges
de
informations
en
php
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
Introduction
:
passer
du
variables
dans
l'
URL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
3
Recherche
dans
google
de
:
«
php
variable
$_GET
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

3
Exercice
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

3
Installation
du
fichiers
de
test
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Méthode
Get
-
URL
-
Le
tableau
$_GET
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Problématique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Exemple-1
:
<a
href="URL">
et
tableau
$_GET
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Toujours
vérifier
les
informations
fournies
par
l'
utilisateur
–
1
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
Exemple-2
:
href-GET-sans-verifications
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
Exemple-3
:
href-GET-avec-verifications
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
Fonction
de
gestion
du
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
8
Méthode
POST
-
Formulaires
-
Le
tableau
$_POST
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
Rappels
sur
les
formulaires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

9
Exemple
4
:
formulaire-POST
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
10
Exemple
5
:
formuaire-GET
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
Toujours
vérifier
les
informations
fournies
par
l'
utilisateur
–
2
:
faille
Xss
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Never
trust
user
input
!

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Exemples
4
et
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Solution
:
exemple
6
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Fonctions
de
traitement
de
chaînes
de
caractères
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

13
Se
protéger
contre
les
failles
:
aide
en
ligne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
13
TP
1
:
Exercice
password
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
14
Première
version
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
14
Remarque
:
crypter
les
mots
de
passe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
14
Deuxième
version
:
monofichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
15
Exemple
7
:
saisie
de
un
utilisateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
16
Structure
du
code
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

16
Conclusion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
20
$_SESSION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
Utilisation
du
tableau
associatif
$_SESSION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
Terminer
une
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

21
TP
2
:
Synthèse
:
site
users
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Objectif
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Etape
1
:
affichage
du
utilisateurs
avec
un
Header
et
un
Nav
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
23
Etape
2
:
ajout
du
formulaire
admin-mot
de
passe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

25
Etape
3
:
page
de
administration
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

26
Etape
4
:
vérifier
le
login
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
28
base
du
php
–
Environnement
de
développement
à
page
1/43
Etape
5
:
enregistrer
le
nouveau
user
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

29
Etape
6
:
création
de
un
fichier
index.php
à
fonction
header(URL)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
Les
variables
superglobales
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
31
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
31
Ce
sont
des
tableaux
associatifs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
S_GET
-
$_POST
-
$_SESSION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
31
$_COOKIE
et
$_REQUEST
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

31
S_FILE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
31
$_SERVER
et
$_
ENV
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
Afficher
les
superglobales
:
print_r()
ou
var_dump()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

31
$_FILE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

32
Objectif
:
upload
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
32
Technique
:
un
formulaire
spécial
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
32
Exemple
8
:
$_FILE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
32
Les
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
34
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
Autoriser
l'
écriture
de
fichier
sur
le
serveur
:
Chmod
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
34
Syntaxe
générale
de
la
manipulation
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
Algorithmique
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
35
Exemple
9
–
tableau-users-Etape-4
:
codage
avec
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
36
$_COOKIES
:
exemple
10
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
38
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
38
Principes
de
codage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

38
Modifier
et
supprimer
un
cookie
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
39
Précisions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
39
Bilan
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
Construction
de
un
site
et
variables
de
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
Echanges
entre
les
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
40
Appel
de
une
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

41
<
a
href=
à
url
»
>
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
41
à
form
action=
à
url
»
method=
«
»
>
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

41
header(‘location
:
url
’
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
41
.HTACCESS
et
.HTPASSWD
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

42
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
42
.htaccess
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
42
.htpasswd
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
42
Edition
:
mars
2019
base
du
php
–
Environnement
de
développement
à
page
2/43
ECHANGES
de
INFORMATIONS
EN
php
Manuel
de
Référence
du
Php
:
http://php.net/manual/fr/langref.php
Introduction
:
passer
du
variables
dans
l'
URL
Recherche
dans
google
de
:
à
php
variable
$_GET
à
Résultats
L'
URL
du
résultat
est
la
suivante
:
https://www.google.fr/#safe=active&q=php+variable+%24_get
Derrière
https://www.google.fr/
on
trouve
plusieurs
éléments
séparés
par
des
«
&
»
.

On
va
trouver
:
«
q=php+variable+%24_GET
»
.

La
variable
q
contient
les
informations
à
php
»
p
«
variable
»
p
«
%24_get
»
Le
%24
vient
remplacer
le
$
.

Modification
de
l'
URL
On
peut
modifier
directement
l'
URL
.

On
met
par
exemple
POST
à
la
place
de
GET
.

On
obtient
la
page
de
recherche
de
«
php
variable
$_POST
à
Simplification
On
peut
écrire
directement
dans
l'
URL
:
https://www.google.fr/search
?

q=php+variable+%24_POST
Conclusion
C'
est
à
l'
adresse
de
l'
URL
qui
donne
la
page
à
afficher
,
avec
des
paramètres
en
plus
.

Exercice
Google
Chercher
à
java
à
directement
dans
l'
URL
de
google
.

page
du
cours
Regardez
l'
URL
de
la
page
du
cours
:
ici
.

Quelle
est
la
question
posée
dans
l'
URL
?

Modifiez
la
valeur
de
l'
article
,
par
exemple
216
.

Que
constatez
vous
?

base
du
php
–
Environnement
de
développement
à
page
3/43
Installation
du
fichiers
de
test
Les
exemples
du
cours
sont
dans
un
fichier
zip
fournis
avec
l'
article
du
cours
:
01exemples_GET_POST.zip
Chargez
ce
fichier
et
mettez
-le
dans
le
dossier
Partie_2
du
répertoire
web
«
www
»
du
serveur
Wamp
.

Les
exemples
sont
présentés
dans
un
chapitre
en
vert
.

Les
exercices
à
faire
sont
présentés
dans
un
chapitre
en
jaune
.

REMARQUE
:
Tous
les
fichiers
de
exemples
commencent
souvent
par
ces
trois
lignes
:
echo
'
<h1>CODE
PHP</h1>
'
;
highlight_file('fichier.php')
;
echo
'
<h1>RESULTATS</h1>
'
;
Ce
code
affiche
deux
balises
h1
avec
Code
Php
pui
RESULTATS
La
fonction
«
highlight_file
»
permet
de
afficher
le
contenu
du
fichier
proposé
.

Quand
on
teste
le
code
,
on
commence
par
affiche
le
code
.

Ca
permet
de
voir
le
code
en
même
temps
que
les
résultats
.

Pour
généraliser
le
code
,
on
écrit
:
highlight_file(basename(__FILE__))
;
basename(__FILE__)
permet
de
récupérer
le
nom
du
fichier
en
cours
de
traitement
.

Méthode
Get
-
URL
-
Le
tableau
$_GET
Problématique
Comment
faire
passer
des
informations
de
une
page
web
à
une
autre
?

Passer
de
une
page
à
une
autre
peut
se
faire
avec
des
ça
href="URL">
.

On
vient
de
voir
que
on
peut
passer
des
informations
sur
l'
URL
.

On
va
donc
pouvoir
passer
des
informations
de
une
page
à
une
autre
de
cette
manière
.

Exemple-1
:
<a
href="URL">
et
tableau
$_GET
Objectif
L'
objectif
est
,
à
partir
de
une
première
page
(
la
page
de
appel
)
de
faire
appel
à
une
deuxième
page
(
la
page
appelée
)
en
passant
des
informations
qui
circuleront
à
travers
l'
URL
.

Principes
:
un
passage
de
paramètres
à
On
utilise
un
<a
href="URL">link
text</a>
•
Dans
l'
URL
,
on
va
mettre
les
paramètres
.

•
Dans
la
page
appelée
,
les
paramètres
se
retrouve
dans
un
tableau
associatif
de
paramètres
:
$_GET
base
du
php
–
Environnement
de
développement
à
page
4/43
page
appelante
:
a
href
Fichier
:
index_appel_bonjour.php
C'
est
une
page
HTML
ou
Php
(
il
faudra
l'
exécuter
via
le
serveur
web
)
avec
un
<a
href>
:
<DOCTYPE
html>
<html>
<head>
<meta
charset="utf-8
"
/>
<title>$_GET-Appelant</title>
</head>
<body>
<h1>Test
de
$_GET</h1>
<p>Rendez
vous
sur
<a
href="01-1-bonjour.php
?

prenom=Bertrand&amp
;
nom=Liaudet">
un
bonjour
personnalisé
avec
$_GET
</a>
à
!

--
syntaxe
:
?

nom
de
variable=valeur&nom
de
variable=etc
.

--
>
</p>
</body>
</html>
href="bonjour.php
?

prenom=Bertrand&amp
;
nom=Liaudet">
à
Le
nom
du
fichier
:
bonjour.php
à
un
?

à
nom
de
variable
=
information
(
prenom=Bertrand
)
Les
informations
envoyées
vont
remplir
le
tableau
associatif
$_GET
à
Les
variables
sont
séparées
par
des
«
&
»
.

On
écrit
à
çamp
;
à
car
le
«
&
à
tout
seul
crée
une
confusion
en
HTML
.

•
On
a
une
deuxième
variable
avec
sa
valeur
:
nom=Liaudet
page
appelée
:
$_GET
Fichier
:
bonjour.php
<
?

php
echo
'
<h1>CODE
Php
:
</h1>
'
;
highlight_file(basename(__FILE__))
;
echo
'
<h1>RESULTATS
:
</h1>
'
;
echo
'
<h3>TABLEAU
$_GET
:
</h3>
'
;
echo
'
<pre>
'
;
print_r($_GET)
;
echo
'
</pre>
'
;
?

à
<DOCTYPE
html>
<html>
<head>
<meta
charset="utf-8
"
/>
<title>$_GET-Appelé</title>
</head>
<body>
<h1>Page
appeléeee
par
un
&lt
;
a
href="URL"&gt
;
</h1>
base
du
php
–
Environnement
de
développement
à
page
5/43
<h2>Des
paramètres
sont
passées
l'
URL
dans
le
tableau
$_GET
:
</h2>
<p>
Bonjour
<
?

php
echo
$_GET['prenom
'
]
.

'
'
.$_GET['nom
'
]
;
?

>
</p>
</body>
</html>
Explications
Dans
la
page
appelée
,
on
a
un
tableau
associatif
$_GET
qui
contient
les
clés
et
les
valeurs
fournies
dans
la
page
appelante
:
array
(
[
prenom
]
=>
Bertrand
[
nom
]
=>
Liaudet
)
On
peut
donc
exploiter
ce
tableau
associatif
comme
on
veut
dans
la
page
appelée
.

&alt
;
a
permet
de
avoir
un
<
&gt
;
permet
de
avoir
un
>
code
spéciaux
HTML
:
ici
.

Précisions
à
URL
:
on
voit
les
paramètres
…bonjour.php
?

prenom=Bertrand&nom=Liaudet
(
dans
l'
adresse
les
espaces
sont
traduits
par
%20
)
à
Sécurité
à
Confidentialité
L'
information
qui
circule
est
visible
sur
le
lien
URL
.

Il
faut
donc
faire
attention
à
la
limiter
à
une
information
non
confidentielle
.

à
Limite
En
général
,
les
navigateurs
n'
acceptent
pas
des
url
de
plus
de
256
caractères
.

Il
faut
donc
éviter
de
passer
trop
de
informations
par
ce
moyen
.

base
du
php
–
Environnement
de
développement
à
page
6/43
Toujours
vérifier
les
informations
fournies
par
l'
utilisateur
–
1
Présentation
On
a
vu
que
on
pouvait
voir
dans
l'
URL
les
informations
fournies
par
l'
utilisateur
.

On
peut
aussi
modifier
ces
informations
ou
les
supprimer
directement
dans
l'
URL
.

Ca
peut
être
gênant
pour
le
fonctionnement
du
site
.

Il
faut
donc
faire
des
vérifications
.

Exemple-2
:
href-GET-sans-verifications
Code
sans
vérifications
On
peut
tester
les
résultats
si
on
donne
de
mauvaises
valeurs
en
changeant
l'
URL
.

On
peut
ralentir
le
serveur
ou
générer
une
erreur
.

Exemple-3
:
href-GET-avec-verifications
Code
avec
vérifications
On
vérifie
tous
les
cas
à
problème
possibles
:
<
?

php
echo
'
<h2>on
attend
un
nombre
du
programme
appelant</h2>
'
;
ifà
!

isset($_GET['nombre'])
){
echo
'
<p>
Pas
de
nombre
reçu
!

</p>
'
;
à
else{
//
cast
:
si
$_GET
n'
est
pas
un
entier
,
on
obtient
0
$nombre=(int)$_GET['nombre
'
]
;
ifà
$_GET['nombre
'
]
>10000
OR
$_GET['nombre
'
]
çäëë
echo
'
<p>
Le
nombre
reçu
n\'est
pas
valide
!

</p>
'
;
à
else{
echo
'
<p>
Nous
allons
compter
jusquë'à
'
.$nombre
.

'
</p>
'
;
for($i=1
;
$i<=$_GET['nombre
'
]
;
$i++){
echo('<p>
'
.$i
.

'
</p>
'
)
;
}
}
}
?

à
Vérifier
que
les
informations
attendues
existent
:
isset($var)
isset()
est
vrai
si
il
y
a
quelque
chose
dans
la
variable
,
faux
sinon
.

On
pourrait
aussi
utiliser
la
fonction
empyëù
Transtypage
(
cast
)
:
forcer
le
type
de
une
variable
:
(
int
)
$_GET[‘nombre
’
]
est
forcément
une
chaine
de
caractères
.

On
pourrait
tester
si
elle
contient
des
chiffres
avec
la
fonction
ctype_digit(
)
.

On
peu
aussi
à
caster
à
directement
$_GET[‘nombre
’
]
avec
un
(
int
)
.

si
$_GET[‘nombre
’
]
n'
est
pas
un
entier
,
le
cast
renvoie
0
.

base
du
php
–
Environnement
de
développement
à
page
7/43
Fonction
de
gestion
du
variables
Il
existe
de
nombreuses
fonctions
qui
permettent
de
faire
ces
vérifications
.

Ce
sont
particulièrement
les
fonctions
de
gestion
du
variables
:
http://php.net/manual/fr/ref.var.php
base
du
php
–
Environnement
de
développement
à
page
8/43
Méthode
POST
-
Formulaires
-
Le
tableau
$_POST
Rappels
sur
les
formulaires
Principes
Les
formulaires
sont
l'
outil
de
base
pour
échanger
des
informations
avec
les
visiteurs
.

http://www.w3schools.com/html/html_forms.asp
http://www.w3schools.com/tags/att_form_action.asp
http://bliaudet.free.fr/IMG/pdf/HTML_4_Fonctionnalites_avancees.pdf
chapitre
3
:
les
formulaires
,
page
9
à
12
:
<form>
et
<input>
Syntaxe
de
base
à
Exemple
:
<form
action="action.php
"
method="POST
"
à
<p>
<label
for="nom">nom</label>
<input
type="text
"
name="nom
"
id="nom
"
maxlength="10
"
placeholder="votre
nom">
</p>
<p><input
type="submit
"
value="Valider"></p>
</form>
à
La
balise
form
contient
2
attributs
principaux
:
method
et
action
.

à
La
balise
form
contient
des
balises
inclues
qui
permettent
de
:
1
.

caractériser
le
type
de
formulaire
(
champ
de
saisie
,
bouton
,
menu
déroulant
,
etc
.
)

2
.

fournir
des
variables
à
passer
à
la
page
appelée
via
les
tableaux
associatifs
$_GET
ou
$_POST
.

Principes
C'
est
un
passage
de
paramètres
(
comme
dans
un
appel
de
fonction
)
de
page
à
page
.

Les
paramètres
se
retrouvent
dans
un
tableau
associatif
de
paramètres
:
$_GET
ou
$_POST
Le
code
HTML
de
la
page
appelante
remplit
le
$_GET
ou
le
$_POST
Dans
la
page
appelée
,
on
accède
au
éléments
du
tableau
associatif
$_GET
ou
$_POST
Les
attributs
de
la
méthode
form
à
L'
attribut
method
permet
de
choisir
la
technique
de
transfert
de
informations
.

Il
y
en
a
2
:
GET
ou
POST
.

La
méthode
GET
est
celle
déjà
vue
qui
fait
transiter
l'
information
dans
l'
URL
.

On
limite
l'
information
à
256
caractères
.

La
méthode
POST
permet
de
envoyer
des
gros
contenus
de
informations
et
de
cacher
le
transit
au
utilisateurs
.

On
utilise
préférentiellement
la
méthode
POST
dans
les
formulaires
.

à
L'
attribut
action
dit
quelle
autre
page
sera
appelée
avec
cette
balise
form
,
quand
on
valide
sur
un
bouton
par
exemple
,
et
donc
à
quelle
page
on
enverra
des
informations
.

Ce
sera
une
page
php
(
ou
n'
importe
quel
autre
page
de
un
langage
serveur
)
qui
sera
capable
de
traiter
les
informations
transmises
.

On
peut
aussi
faire
appel
à
la
même
page
.

base
du
php
–
Environnement
de
développement
à
page
9/43
Les
balises
inclues
dans
la
balise
form
à
La
balise
input
:
c'
est
la
principale
balise
de
saisie
.

Elle
fournit
en
général
un
champ
de
saisie
.

mais
aussi
des
saisie
à
typées
»
:
téléphone
,
mail
,
couleurs
,
etc
.

Elle
fournit
aussi
les
boutons
de
validation
.

à
La
balise
textarea
:
fournit
une
zone
de
texte
à
saisir
à
La
balise
select
:
fournit
un
menu
déroulant
à
La
balise
fieldset
:
permet
de
regrouper
dans
un
cadre
plusieurs
éléments
de
saisie
.

La
balise
legend
joue
le
rôle
de
un
label
pour
ce
cadre
.

à
La
balise
label
:
elle
permet
de
mettre
un
texte
associé
à
la
zone
de
saisie
.

http://www.w3schools.com/html/html_form_input_types.asp
2
attributs
fondamentaux
du
balises
inclues
:
name
et
value
,
pour
remplir
$_GET
ou
$_POST
Pour
chaque
élément
de
un
formulaire
(
un
champ
de
saisie
,
un
bouton
,
un
menu
déroulant
,
etc
.
)
,
on
peut
définir
un
«
name
»
qui
sera
le
nom
de
la
variable
qu'
on
retrouvera
dans
$_$GET
ou
$_POST
et
qui
sera
accessible
dans
la
page
appelée
.

Ce
«
name
»
est
donc
une
variable
passée
en
paramètre
pour
la
page
appelée
.

On
peut
définir
aussi
une
«
value
à
qui
sera
la
valeur
de
la
variable
définie
par
le
«
name
»
.

La
«
value
à
pourra
être
fournie
à
travers
une
variable
avec
le
php
ou
n'
importe
quel
langage
serveur
.

à
noter
que
la
«
value
»
peut
aussi
être
une
valeur
qui
s'
affiche
dans
le
formulaire
(
par
exemple
le
texte
du
bouton
de
validation
)
.

Exemple
4
:
formulaire-POST
page
appelante
:
<
form
action="actionPOST.php
"
method="POST
"
>
Code
du
formulaire
<form
action="actionPOST.php
"
method="POST
"
>
<p><label
for="prenom">prenom</label>
<input
type="text
"
name="prenom
"
id="prenom
"
placeholder="votre
prenom"></p>
<p><label
for="nom">nom</label>
<input
type="text
"
name="nom
"
id="nom
"
placeholder="votre
nom"></p>
<p><input
type="submit
"
value="Valider"></p>
</form>
Dans
l'
input
:
•
Le
type
définit
le
type
de
saisie
:
ici
du
texte
à
Le
name
est
une
clé
du
tableau
associatif
$_POST
ou
$_GET
,
ici
$_POST
à
L'
id
sert
pour
le
CSS
•
si
le
for
du
<label>
est
égal
à
l'
id
,
un
clic
sur
le
label
conduit
dans
l'
input
pour
éviter
les
confusions
.

à
placeholder
:
une
info
pour
la
saisie
,
en
grisée
page
appelée
:
$_POST
<p>
Bonjour
<
?

php
echo
$_POST['prenom
'
]
.
'

'
.

$_POST['nom
'
]
;
?

>
</p>
base
du
php
–
Environnement
de
développement
à
page
10/43
Le
tableau
$_POST
fonctionne
comme
le
tableau
$_GET
:
c'
est
un
tableau
associatif
.

Les
name
sont
des
clés
(
key
)
du
tableau
$_POST
:
ce
sera
le
cas
pour
tout
les
autres
formulaires
.

Quand
on
teste
,
on
constate
que
il
n'
y
a
pas
d'
information
dans
l'
URL
.

Exemple
5
:
formuaire-GET
page
appelante
:
<
form
action="actionPOST.php
"
method="GET
"
>
Code
du
formulaire
<form
action="actionPOST.php
"
method="GET
"
à
page
appelée
:
$_GET
<p>
Bonjour
<
?

php
echo
$_GET['prenom
'
]
.
'

'
.

$_GET['nom
'
]
;
?

à
</p>
Dans
ce
cas
,
les
variables
transiteront
via
l'
URL
.

On
peut
les
voir
dans
l'
URL
.

base
du
php
–
Environnement
de
développement
à
page
11/43
Toujours
vérifier
les
informations
fournies
par
l'
utilisateur
–
2
:
faille
Xss
Never
trust
user
input
!

Principe
:
envoyer
du
code
Avec
la
méthode
POST
,
l'
information
envoyée
est
cachée
.

mais
on
peut
envoyer
n'
importe
quoi
et
particulièrement
du
code
HTML
ou
JavaScript
qui
nuire
à
l'
utilisation
normale
du
site
,
en
affichant
par
exemple
du
contenus
inadaptés
.

L'
envoi
de
code
à
la
place
de
un
texte
,
c'
est
ce
qu'
on
appelle
la
faille
Xss
Exemples
4
et
5
Les
exemples
précédents
ne
sont
pas
protégés
.

On
peut
saisir
une
simple
balise
HTML
,
ou
du
code
JavaScript
,
ou
du
balises
HTML
complexes
(
un
formulaire
!

)
Ø
Saisie
de
balise
Dans
le
test
précédent
,
à
la
place
de
saisir
un
simple
nom
:
«
Bertrand
»
,
on
peut
saisir
à
<h1>Bertrand</h1>
Dans
ce
cas
,
la
balise
<h1>
sera
interprétée
et
le
texte
apparaitra
en
très
gros
.

à
saisie
de
code
javascript
On
peut
aussi
ajouter
un
code
JavaScript
:
<script
type="text/javascript">alert('Un
virus
a
été
détecter
!

Veuillez
vous
rendre
sur
bliaudet.free.fr')</script>
!

Les
2
exemples
précédents
ne
sont
pas
très
grave
,
mais
avec
du
code
JavaScript
,
un
pirate
peut
récupérer
les
informations
privées
de
un
utilisateur
.

à
Rôle
du
navigateurs
Safari
(
apple
)
protège
automatiquement
contre
les
intrusions
Xss
(
et
pas
firefox
)
.

Firefox
50.0.2
,
laisse
passer
le
Javascript
Solution
:
exemple
6
Principes
Php
fournit
deux
fonctions
qui
permettent
de
traiter
le
code
interprétable
comme
une
simple
chaîne
de
caractères
.

Fonction
htmlspecialchars
La
fonction
htmlspecialchars
permet
que
le
code
inséré
soit
traité
comme
du
texte
normal
.

htmlspecialchars($_POST['nom'])
Ainsi
si
on
saisit
:
<h1>Bertrand</h1>
,
le
site
affichera
:
bonjour
<h1>Bertrand</h1>
:
la
balise
h1
n'
aura
pas
été
prise
en
compte
.

http://php.net/manual/fr/function.htmlspecialchars.php
Transformation
du
caractère
spécial
«
<
»
en
caractère
normal
à
&lt
;
»
Quand
on
regarde
le
code
source
de
une
page
avec
un
htmlspecialchars
,
on
voit
que
le
«
<
»
qui
est
interprété
par
le
navigateur
comme
le
début
de
une
balise
est
remplacé
par
«
&lt
;
»
qui
permet
au
navigateur
de
afficher
un
<
Base
du
php
–
Environnement
de
développement
à
page
12/43
C'
est
le
cas
dans
Safari
,
mais
pas
dans
Firefox
ni
Chrome
.

Fonction
htmlentities
La
fonction
htmlentities
est
équivalente
à
la
fonction
htmlspecialchars
en
encore
plus
restrictive
:
tous
les
caractères
qui
ont
des
équivalents
HTML
sont
traduits
.

http://php.net/manual/fr/function.htmlentities.php
Fonctions
de
traitement
de
chaînes
de
caractères
Htmlspecialchars
et
htmlentities
sont
des
fonctions
de
traitement
de
chaîne
de
caractères
.

Toutes
les
fonctions
:
http://php.net/manual/fr/ref.strings.php
On
y
trouve
par
exemple
:
ltrim
(
suppression
du
espaces
en
trop
)
,
ucfirst
(
upper
case
pour
la
première
lettre
)
,
etc
.

mais
aussi
:
printf
et
sprintf
La
fonctions
printf
permet
de
écrire
une
chaine
avec
des
variables
à
formatés
(
comme
un
«
echo
à
mais
formaté
)
.

La
fonction
sprintf
permet
de
retourner
lef
résultat
dans
une
chaine
.

Exemple
printf(
à
Le
prix
est
%.2f
euros
»
,
$prix
)
;
Le
résultat
affiché
pour
le
prix
le
sera
avec
2
chiffres
après
la
virgule
.

-s
:
string
ff
:
float
avec
plusieurs
chiffres
après
la
virgule
.

%d
:
entier
%c
:
caractère
etc
.

Toute
la
documentation
:
http://php.net/manual/fr/function.sprintf.php
Tester
du
code
:
http://phptester.net
Se
protéger
contre
les
failles
:
aide
en
ligne
https://openclassrooms.com/courses/protegez-vous-efficacement-contre-les-failles-web
base
du
php
–
Environnement
de
développement
à
page
13/43
TP
1
:
Exercice
password
Première
version
Objectif
Donner
l'
accès
à
une
page
qui
contient
des
informations
cachées
pour
ceux
qui
ont
le
mot
de
passe
.

si
on
n'
a
pas
le
bon
mot
de
passe
,
on
revient
sur
la
page
de
accueil
.

Méthode
de
abord
réfléchir
sur
papier
!

Quelles
sont
les
page
en
jeu
?

Une
,
plusieurs
?

Comment
les
page
communiquent
-elles
entre
elles
?

Première
analyse
à
Une
page
de
accueil
:
un
formulaire
de
saisie
de
un
mot
de
passe
.

En
HTML
.

à
Le
mot
de
passe
saisi
dans
le
formulaire
est
envoyé
dans
le
tableau
$_POST
à
la
page
action
,
en
php
,
qui
vérifie
que
le
mot
de
passe
est
bon
avant
de
afficher
les
informations
cachées
.

•
si
le
mot
de
passe
est
faux
,
il
faut
afficher
un
message
de
erreur
à
Dans
tous
les
cas
,
la
page
appelé
permet
de
revenir
sur
la
page
appelante
.

Elément
de
solution
Dans
la
page
action
on
trouve
ce
code
:
if(isset($_POST['password'])
AND
htmlspecialchars($_POST['password'])=='password'){
Remarque
:
crypter
les
mots
de
passe
Circulation
sur
le
réseau
:
https
Le
mot
de
passe
apparaît
donc
dans
la
page
action
.

Toutefois
,
il
est
dans
le
code
php
(
dans
un
if
)
,
il
ne
sera
donc
jamais
visible
sur
navigateur
du
poste
client
.

C'
est
donc
correctement
sécurisé
si
le
serveur
est
lui
aussi
sécurisé
!

Mais
:
si
on
fait
circuler
le
mot
de
passe
sur
le
réseau
,
il
y
a
un
risque
.

C'
est
le
https
qui
permet
de
sécuriser
la
circulation
.

Enregistrement
dans
la
Bd
En
pratique
,
le
mot
de
passe
sera
récupéré
dans
la
Bd
:
Mais
:
les
mots
de
passe
doivent
être
enregistré
crypté
dans
la
Bd
.

Pour
crypter
,
on
utilise
la
fonction
crypt
:
$
hashed_password
=
crypt($password)
Pour
décrytpter
,
on
écrit
le
code
suivant
,
password
étant
le
mot
de
passe
saisi
,
hashed_password
le
mot
de
passe
récupéré
dans
la
Bd
.

if
(
crypt($password
,
$hashed_password
)
==
$hashed_password
)
{
Base
du
php
–
Environnement
de
développement
à
page
14/43
echo
"
Mot
de
passe
correct
!

"
;
}
else{
echo
"
Mot
de
passe
incorrect
!

"
;
}
Deuxième
version
:
monofichier
On
souhaite
tout
coder
dans
un
seul
fichier
.

La
page
action
est
la
page
de
accueil
elle-même
.

Il
va
falloir
tester
les
différents
cas
au
début
de
la
page
de
accueil
:
•
Est
-on
dans
le
cas
où
il
faut
afficher
le
formulaire
?

$_POST['password
'
]
n'
est
pas
setté
•
Est
-on
dans
le
cas
où
le
mot
de
passe
est
le
bon
?

$_POST['password
'
]
=
«
password
»
•
Est
-on
dans
le
cas
où
le
mot
de
passe
est
mauvais
?

$_POST['password
'
]
!

=
«
password
à
base
du
php
–
Environnement
de
développement
à
page
15/43
Exemple
7
:
saisie
de
un
utilisateur
Structure
du
code
On
veut
obtenir
la
page
suivante
:
Utilisation
de
fonctions
On
va
utiliser
la
fonction
à
printLesUsersHTML()
»
qu'
on
avait
défini
dans
les
exercices
sur
les
tableaux
de
utilisateur
.

base
du
php
–
Environnement
de
développement
à
page
16/43
En
cas
de
erreur
:
si
on
ne
saisit
pas
tous
les
champs
,
on
affiche
le
message
qu'
on
voit
en
jaune
base
du
php
–
Environnement
de
développement
à
page
17/43
Structure
de
la
page
HTML
La
page
HTML
va
utiliser
2
variables
Php
:
$lesUsers
et
$msgErr
.

On
a
donc
une
page
HTML
classique
,
avec
un
tout
petit
peu
de
php
,
en
gris
:
à
!

DOCTYPE
html>
<html>
<head>
<meta
charset="utf-8
"
/>
<link
rel="stylesheet
"
href="style.css
"
/>
<title>Tableau</title>
</head>
<body>
<
?

php
echo
'
<h2>Affichage
du
utilisateurs</h2>
'
;
printLesUsersHTML($lesUsers)
;
?

à
<h2>Entrez
les
informations
dun
utilisateurs</h2>
<p>Tous
les
champs
sont
obligatoires</h2>
<form
action="index-tp-users-formulaire.php
"
method="POST
"
>
<fieldset>
<legend>Entrez
le
bon
mot
de
passe
pour
accéder
au
codes
secrets</legend>
<p><label
for="nom">Nom
et
Prénom</label>
<input
type="nom
"
name="nom
"
id="password
"
placeholder="nom"></p>
<p><label
for="mail">mail</label>
<input
type="mail
"
name="mail
"
id="mail
"
placeholder="mail"></p>
<p><label
for="mail">mot
de
passe</label>
<input
type="password
"
name="password
"
id="password
"
placeholder="password"></p>
<p><label
for="annee">année
naissance</label>
<input
type="annee
"
name="annee
"
id="password
"
placeholder="annee"></p>
<input
type="hidden
"
name="lesUsers
"
value='<
?

php
echo
serialize($lesUsers)
?

>
'
à
<p><input
type="submit
"
name="submit
"
value="Valider"></p>
</fieldset>
</form>
<
?

php
if
(isset($msgErr)){
echo
$msgErr
;
}
?

à
</body>
</html>
base
du
php
–
Environnement
de
développement
à
page
18/43
Code
Php
Le
code
Php
est
placé
tout
du
début
.

Il
y
a
4
étapes
:
1
)
Le
debug
:
on
affiche
$_POST
2
)
On
inclut
les
fonctions
3
)
On
initialise
les
variables
:
ici
$lesUsers
4
)
On
traite
le
cas
où
on
a
validé
la
saisie
.

<
?

php
//
1
:
debut
echo
'
$_POST
:
'
;
print_r($_POST)
;
echo
'
<br>
'
;
//
2
:
inclusion
du
fonctions
include_once("unUser.php")
;
include_once("lesUsers.php")
;
//
3
:
on
initialise
le
tableau
du
users
$lesUsers=initLesUsers()
;
//
4
:
si
on
on
a
validé
le
formulaire
ifà
isset($_POST['submit'])
)
{
//
on
charge
le
bon
$lesUsers
$lesUsers
=
unserialize($_POST['lesUsers'])
;
//
si
la
saisie
n'
est
pas
complète
if
(
!

isset($_POST['nom'])
OR
ltrim($_POST['nom'])==
''
OR
!

isset($_POST['mail'])
OR
ltrim($_POST['mail'])==
''
OR
!

isset($_POST['annee'])
OR
ltrim($_POST['annee'])==
''
OR
!

isset($_POST['password'])
OR
ltrim($_POST['password'])==
''
){
$msgErr='<h2
style="background-color:yellow">Tous
les
champs
sont
obligatoires</h2>
'
;
}
//
si
la
saisie
est
complète
,
on
récupère
le
$lesUsers
et
on
ajoute
la
saisie
else
à
$lesUsers[]=newUser($_POST['nom'],$_POST['mail'],$_POST['passwo
rd'],$_POST['annee
'
]
)
;
}
}
?

>
base
du
php
–
Environnement
de
développement
à
page
19/43
Conclusion
Avec
cette
organisation
,
on
a
séparé
le
Php
du
HTML
.

C'
est
une
première
étape
vers
le
MVC
.

Les
page
HTML-PHP
vont
souvent
ressembler
à
<
?

php
//Partie
Php
session_start()
;
//
si
on
ouvre
une
session
,
c'
est
fait
en
1er
etc
.

?

à
<DOCTYPE
html>
à
!

--
Partie
HTML
--
>
</html>
Base
du
php
–
Environnement
de
développement
à
page
20/43
$_SESSION
Présentation
à
Une
«
session
»
c'
est
une
instance
de
fonctionnement
de
un
programme
.

à
Elle
a
un
début
et
une
fin
.

•
Pour
un
site
web
,
une
session
,
c'
est
un
fonctionnement
du
site
pour
un
client
,
c'
est-à-dire
un
navigateur
.

•
Chaque
session
contient
des
informations
qui
peuvent
être
accessibles
à
toutes
les
page
.

Ces
informations
sont
rangées
dans
le
tableau
associatif
$_SESSION
Précision
technique
Comment
fait
le
serveur
pour
savoir
que
il
s'
agit
de
tel
ou
tel
utilisateur
?

C'
est
le
cookie
de
session
qui
permet
de
garantir
cela
.

Ce
cookie
n'
a
de
sens
que
pour
le
serveur
web
et
ne
donne
aucune
information
sur
l'
utilisateur
.

On
y
reviendra
dans
le
chapitre
sur
les
cookies
.

https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/session-cookies
Utilisation
du
tableau
associatif
$_SESSION
Le
démarrage
de
une
session
doit
se
faire
avant
tout
code
HTML
.

session_start()
Pour
pouvoir
utiliser
la
variable
$_SESSION
il
faut
appeler
la
fonction
session_start(
)
.

Toutes
les
page
qui
veulent
utiliser
$_SESSION
doivent
appeler
session_start()
<
?

php
session_start()
;
?

à
<DOCTYPE
html>
L'
appel
de
la
fonction
doit
se
faire
au
tout
début
de
la
page
,
avant
le
<DOCTYPE
html>
$_SESSION
$_SESSION
s'
utilise
comme
un
tableau
associatif
.

Pour
enregistrer
une
donnée
dans
$_SESSION
on
écrira
:
$_SESSION['administrateur']='Bertrand
'
;
Une
foi
la
clé
à
administrateur
à
créée
,
on
peut
tester
si
elle
existe
:
if
(isset($_SESSION['administrateur']){
echo
'
Bonjour
'
.

$_SESSION['administrateur
'
]
;
echo
'
vous
êtes
connecté
et
pouvez
accéder
au
back-office
'
;
à
Terminer
une
session
Plusieurs
techniques
peuvent
terminer
une
session
.

1
:
unset($_SESSION['administrateur'])
base
du
php
–
Environnement
de
développement
à
page
21/43
Un
«
unset
»
ne
finit
pas
vraiment
la
session
,
mais
supprime
une
clé
dans
$_SESSION
.

Un
test
avec
«
isset
»
donnera
donc
une
réponse
fausse
.

2
:
$_SESSION
=
array()
Cette
instruction
supprime
toutes
les
variables
de
sssion
.

3
:
patienter
!

timeout
On
bout
de
un
certain
temps
sans
activité
,
le
«
timeout
»
,
les
variables
de
session
sont
supprimées
.

4
:
se
déconnecter
:
fermer
le
client
,
donc
le
navigateur
.

•
si
on
quitte
le
navigateur
,
les
variables
de
session
seront
supprimées
.

•
à
noter
que
fermer
la
page
sans
fermer
le
navigateur
ne
supprime
pas
les
variables
de
session
.

•
à
noter
aussi
que
certains
sites
conservent
les
variables
de
session
(
la
connexion
typiquement
)
même
quand
on
a
fermé
le
navigateur
.

Dans
ce
cas
,
ils
utilisent
les
cookies
.

On
y
reviendra
.

5
:
session_destroy()
;
http://php.net/manual/fr/function.session-destroy.php
La
fonction
bloque
l'
effet
du
session_start()
sans
supprimer
les
données
.

Un
nouveau
session_start()
permet
de
y
réaccéder
.

base
du
php
–
Environnement
de
développement
à
page
22/43
TP
2
:
Synthèse
:
site
users
Objectif
:
Consulter
les
utilisateurs
Se
connecter
comme
admin
pour
pouvoir
ajouter
un
utilisateur
.

Coder
en
séparant
le
Php
du
HTML
.

On
reprend
les
corrigés
du
exercices
tableau
user
étape
2-fonction
et
étape
3-tri
.

Etape
1
:
affichage
du
utilisateurs
avec
un
Header
et
un
Nav
L'
objectif
est
de
obtenir
la
page
suivante
:
index-users.php
CSS
Pour
obtenir
ce
résultat
,
le
CSS
est
fourni
.

header
-
nav
Pour
que
il
fonctionne
,
on
gère
un
header
HTML
qui
contient
un
nav
avec
le
lien
à
les
Users
»
.

Le
nav
a
un
id=nav
.

base
du
php
–
Environnement
de
développement
à
page
23/43
Le
mieux
est
de
mettre
le
header
dans
un
fichier
séparé
:
header.php
,
le
tout
dans
un
dossier
«
include
»
.

initLesUsers()
,
printLesUsers()
Le
tableau
du
utilisateurs
est
obtenu
en
utilisant
les
fonctions
initLesUsers()
et
printLesUsersHTML
qui
sont
fournies
dans
le
fichier
lesUsers.php
qu'
il
faut
donc
inclure
.

triParNomDesc()
,
triParNomAsc()
On
ajoute
deux
boutons
:
«
tri
par
nom
desc
»
et
«
tri
par
nom
asc
»
.

On
va
utiliser
les
fonctions
triParNomDesc()
et
triParNomAsc()
qui
sont
définies
dans
le
fichier
tri.php
.

Après
avoir
utiliser
la
fonction
initLesUsers()
,
on
devra
donc
vérifier
si
il
y
a
un
tri
à
faire
.

Affichage
débug
au
debut
du
fichier
,
on
écrit
:
echo'POST
:
'
;
print_r($_POST)
;
echo'<br/>
'
;
echo'GET
:
'
;
print_r($_GET)
;
echo'<br/>
'
;
echo'URL
:
'
;
print_r($_SERVER['PHP_SELF'])
;
echo'<br/>
'
;
STRUCTURE
du
CODE
:
très
impotant
!

!
!

Dossiers
:
on
se
dote
de
un
dossier
css
et
de
un
dossier
include
.

On
ne
laisse
à
la
racine
que
indexUser.php
.

Dans
le
fichier
indexUser.php
,
on
commence
par
du
code
php
:
Le
debug
L'
initialisation
du
tableau
Le
tri
du
tableau
Ensuite
,
on
met
le
code
HTML
:
à
!

DOCTYPE
html>
etc
.

base
du
php
–
Environnement
de
développement
à
page
24/43
Etape
2
:
ajout
du
formulaire
admin-mot
de
passe
Objectif
:
On
ajoute
le
formulaire
de
connexion
à
la
page
de
administration
qui
permettra
de
saisir
un
nouvel
utilisateur
.

Le
formulaire
Pour
obtenir
ce
résultat
avec
notre
CSS
,
on
ajoute
dans
le
nav
le
formulaire
à
admin
,
password
,
ok
»
.

Le
formulaire
un
id
=
admin
.

Le
bouton
ok
amène
sur
la
page
index-admin-users.php
,
que
on
va
écrire
à
la
page
suivante
.

Les
variables
du
formulaire
s'
appellent
à
admin
»
et
à
password
»
.

base
du
php
–
Environnement
de
développement
à
page
25/43
Etape
3
:
page
de
administration
L'
objectif
est
de
obtenir
la
page
suivante
:
index-admin-users.php
à
header
On
de
dote
de
un
nouveau
header
:
header-admin.php
(
on
duplique
header.php
)
.

On
fait
les
mise
à
jour
en
ajoutant
un
lien
:
à
Admin
Les
Users
»
et
en
modifiant
le
formulaire
de
saisie
.

Pour
gérer
l'
utilisateur
connecté
,
on
aura
enregistré
les
valeur
admin
et
mot
de
passe
dans
$_SESSION
.

à
Fichier
index-admin-users.php
On
duplique
le
fichier
index-user.php
et
on
supprime
ce
qui
concerne
les
tris
.

Ø
Formulaire
de
saisie
Base
du
php
–
Environnement
de
développement
à
page
26/43
Pour
afficher
le
formulaire
de
saisie
de
un
nouvel
utilisateur
,
on
utilise
l'
exercice
de
l'
étape
3
:
03exercice-tableau-users-formulaire
à
Gérer
toutes
les
entrées
dans
les
deux
page
Dans
un
premier
temps
,
on
ne
gère
aucune
conséquence
du
boutons
autre
que
l'
accès
à
la
page
:
on
ne
vérifie
pas
le
mot
de
passe
,
on
n'
enregistre
pas
le
nouveau
user
.

base
du
php
–
Environnement
de
développement
à
page
27/43
Etape
4
:
vérifier
le
login
Objectif
:
On
vérifie
de
mot
de
passe
.

En
cas
de
erreur
,
on
affiche
une
page
de
erreur
.

En
cas
de
réussite
,
on
fait
en
sorte
que
l'
utilisateur
reste
connecté
même
si
il
clique
sur
le
menu
à
Les
Users
»
.

On
gère
la
déconnexion
.

page
de
erreur
Pour
obtenir
la
page
de
erreur
,
on
crée
une
nouvelle
page
:
indexErreur.php
C'
est
une
page
HTML
qui
inclut
le
header.php
et
affiche
le
message
de
erreur
.

On
peut
tester
directement
cette
page
.

Vérification
du
login
–
mot-de-passe
Dans
la
page
de
admin
,
on
vérifie
au
début
si
on
a
bien
reçu
le
bon
login
à
motDePasse
.

On
vérifie
que
les
deux
champs
sont
settés
et
que
ils
contiennent
,
par
exemple
à
admin
»
et
«
admin
»
.

si
c'
est
le
cas
,
on
enregistre
la
valeur
de
$_SESSION[‘admin
’
]
.

On
commence
donc
par
faire
un
session_start()
en
début
de
page
.

Ensuite
on
teste
si
$_SESSION[‘admin
’
]
est
setté
.

si
ce
n'
est
pas
le
cas
,
on
include
indexErreur.php
et
on
quitte
la
page
.

On
ajoute
un
echo'SESSION
:
'
;
print_r($_SESSION)
;
echo'<br/>
'
;
pour
le
debug
.

Gestion
de
la
déconnexion
Dans
la
page
user
,
on
teste
si
$_POST['deconnexion
'
]
est
setté
(
on
vient
du
bouton
déconnexion
)
.

si
c'
est
le
cas
,
on
unset
$_SESSION['admin
'
]
Dans
la
page
de
admin
,
si
on
clique
sur
Les
Users
,
on
revient
à
la
page
user
.

Il
faudrait
rester
sur
admin
.

Pour
ça
,
quand
on
affiche
la
page
admin
,
il
faut
selectionner
le
header
ou
le
headerAdmin
selon
que
le
$_SESSION[‘admin
’
]
est
setté
ou
pas
.

base
du
php
–
Environnement
de
développement
à
page
28/43
Etape
5
:
enregistrer
le
nouveau
user
Objectif
:
On
reprend
l'
exercice
de
l'
étape
3
:
03-exercice-tableau-users-formulaire
Cette
exercice
permettait
de
ajouter
un
utilisateur
dans
le
tableau
en
gérant
un
champs
hidden
et
la
fonction
serialize(
)
.

Solution
:
Dans
cette
exercice
,
il
faut
faire
circuler
le
tableau
du
utilisateurs
entre
tous
les
page
,
dans
tous
les
cas
.

Le
plus
simple
est
de
le
mettre
dans
$_SESSION
.

On
a
donc
une
instruction
:
$_SESSION['lesUsers
'
]
=
serialize($lesUsers)
;
Dans
la
page
indexUser.php
Avant
de
initialiser
le
tableau
$lesUsers
,
on
teste
si
$_SESSION['lesUsers
'
]
est
setté
.

si
c'
est
le
cas
,
$lesUsers
vaudra
le
contenu
de
$_SESSION['lesUsers
'
]
.

$lesUsers
=
unserialize($_SESSION['lesUsers'])
;
Dans
la
page
indexAdminUser.php
Pour
initialiser
le
tableau
$lesUsers
,
on
le
récupère
dans
$_SESSION
:
$lesUsers
=
unserialize($_SESSION['lesUsers'])
;
Ensuite
on
fait
l'
insertion
du
nouveau
user
,
si
il
y
a
lieu
Ensuite
met
à
jour
le
$_SESSION
:
$_SESSION['lesUsers
'
]
=
serialize($lesUsers)
;
Insertion
du
nouveau
user
On
peut
reprendre
l'
exercice
de
l'
étape
3
:
03-exercice-tableau-users-formulaire
en
l'
adaptant
un
peu
.

base
du
php
–
Environnement
de
développement
à
page
29/43
Etape
6
:
création
de
un
fichier
index.php
à
fonction
header(URL)
Objectif
On
veut
que
le
projet
démarre
tout
seul
quand
on
arrive
dans
le
dossier
.

Idée
On
pourrait
choisir
de
renommer
la
page
indexUser.php
en
index.php
et
de
mettre
à
jour
tous
les
appels
à
cette
page
dans
le
code
.

Ce
serait
long
et
à
refaire
si
on
change
de
page
de
accueil
!

Solution
:
la
fonction
header(URL)
http://php.net/manual/fr/function.header.php
Header
permet
de
demander
une
URL
,
un
peu
comme
un
href
.

On
pourra
donc
passer
du
paramètres
,
comme
pour
toute
URL
.

Ce
sera
utile
quand
on
passera
au
MVC
.

Elle
doit
impérativement
être
utilisée
avant
tout
code
HTML
.

Ø
Exemple
de
fichier
avec
header
<
?

php
header('Location
:
mapage.php
'
)
;
?

>
base
du
php
–
Environnement
de
développement
à
page
30/43
LES
VARIABLES
SUPERGLOBALES
Présentation
Ce
sont
des
tableaux
associatifs
http://php.net/manual/fr/language.variables.superglobals.php
Les
variables
superglobales
sont
des
tableaux
associatifs
.

Elles
sont
accessibles
à
tout
moment
dans
la
page
,
quel
que
soit
le
contexte
(
particulièrement
dans
les
fonctions
)
.

S_GET
-
$_POST
-
$_SESSION
On
a
déjà
abordé
3
variables
superglobales
.

$_COOKIE
et
$_REQUEST
$_COOKIE
est
une
variable
utilisée
pour
conserver
des
informations
sur
a
machine
client
via
des
cookies
.

Cf
.

chapitre
suivant
.

$_REQUEST
contient
par
défaut
$_COOKIE
,
$_GET
et
$_POST
.

S_FILE
$_FILES
:
est
une
variable
utilisée
pour
les
téléchargements
de
fichier
via
HTTP
par
la
méthode
POST
.

Cf
.

chapitre
suivant
.

$_SERVER
et
$_
ENV
$_SERVER
:
variables
concernant
le
serveur
et
le
programme
.

On
y
trouve
par
exemple
:
$_SERVER[‘REMOTE_ADDR
’
]
qui
est
l'
adresse
Ip
du
client
qui
demande
la
page
courante
.

$_ENV
:
variables
concernant
les
variables
de
environnement
du
serveur
.

Cette
superglobale
est
rarement
utilisée
.

Afficher
les
superglobales
:
print_r()
ou
var_dump()
Les
fonctions
print_r
et
var_dump
affiche
les
tableaux
associatifs
en
ligne
.

Avec
les
balise
<PRE>
</PRE>
,
on
peut
avoir
un
affichage
avec
une
ligne
par
couple
key-value
.

base
du
php
–
Environnement
de
développement
à
page
31/43
$_FILE
Objectif
:
upload
Transmettre
un
fichier
à
un
script
php
.

Ø
Gestion
du
chargements
de
fichiers
à
http://php.net/manual/fr/features.file-upload.php
à
Chargements
de
fichiers
par
méthode
POST
•
http://php.net/manual/fr/features.file-upload.post-method.php
à
$_FILES
•
http://php.net/manual/fr/reserved.variables.files.php
à
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/transmettredes-donnees-avec-les-formulaires
Technique
:
un
formulaire
spécial
à
Une
balise
FORM
avec
un
attribut
method="POST
"
et
un
attriubt
enctype="multipart/formdata
"
à
Une
balise
INPUT
avec
un
attribut
type="file
"
et
un
attribut
name="la
clé
du
nom
du
fichier
dans
$_FILES
"
Exemple
8
:
$_FILE
Le
fichier
de
la
balise
<FORM>
Il
contient
le
formulaire
suivant
:
<form
method="post
"
action="action.php
"
enctype="multipart/form-data">
Sélectionner
un
fichier
:
<input
type="file
"
name="userfile">
<input
type="submit
"
value="Envoyer">
</form>
L'
attribut
name
donne
le
nom
de
la
clé
dans
le
tableau
associatif
$_FILES
qui
aura
comme
valeur
le
fichier
qu'
on
aura
uploadé
.

Le
input
type=
«
file
»
génère
une
interface
de
sélection
de
fichier
sur
l'
ordinateur
client
.

Le
fichier
de
action
à
Résultats
-
$_FILE
Dans
la
page
action.php
,
la
variable
$_FILE[‘userfile
’
]
sera
définie
,
avec
les
champs
suivants
:
name
,
type
,
size
,
tmp_name
,
error
.

Array
(
[
userfile
]
=>
Array
(
[
name
]
=>
exo.php
Base
du
php
–
Environnement
de
développement
à
page
32/43
[
type
]
çù
text/php
[
tmp_name
]
=>
/Applications/MAMP/tmp/php/phpYpRqlW
[
error
]
=>
0
[
size
]
=>
269
)
)
Ø
move_uploaded_file
Dans
la
page
action
,
on
va
mettre
le
fichier
chargé
dans
le
répertoire
qu'
on
veut
.

Le
fichier
est
chargé
dans
un
répertoire
temporaire
:
$_FILE[‘userfile
’
]
[
‘
tmp_name
]
.

Pour
le
mettre
où
on
veut
,
on
utilise
la
fonction
:
move_uploaded_file
(
$nomDuFichierTmpSurLeServeur
,
$nomDuFichierSurLeSite
)
$nomFile
=$_FILES['userfile']['name
'
]
;
echo
'
Fichier
chargé
:
'
.$nomFile.'<br>
'
;
$tmpDir=$_FILES['userfile']['tmp_name
'
]
;
echo
'
Fichier
stocké
temporairement
ici
:
'
.$tmpDir.'<br>
'
;
//
on
uploade
le
fichier
temporaire
$tmpDir
:
le
nouveau
fichier
//
s'
appelle
$nomFile
,
il
se
trouve
dans
le
repertoire
courant
,
//
le
repertoire
du
fichier
php
qui
s'
exécute
$res=move_uploaded_file($tmpDir
,
$uploadDir.$nomFile
)
;
if($res)
echo
'
Upload
réussi
<br>
'
;
else
echo
'
L\'upload
a
échoué
<br>
'
;
Test
On
teste
avec
un
upload
de
un
fichier
qui
peut
se
trouver
n'
importe
ou
sur
la
machine
du
navigateur
.

On
peut
uploader
n'
importe
quel
fichier
.

Le
programme
de
test
affiche
le
contenu
du
fichiers
texte
,
du
fichiers
php
et
sql
,
des
image
.

base
du
php
–
Environnement
de
développement
à
page
33/43
Les
fichiers
Présentation
http://php.net/manual/fr/ref.filesystem.php
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/lire-et-ecrire-dansun-fichier-5
Les
fichiers
permettent
de
enregistrer
des
informations
sur
le
serveur
pour
les
consulter
ou
les
modifier
ultérieurement
.

Le
fonctionnement
général
est
celui
du
langage
C.
Autoriser
l'
écriture
de
fichier
sur
le
serveur
:
Chmod
Chmod
est
une
commande
linux
pour
donner
des
droits
en
lecture
,
écriture
et
exécution
sur
les
fichiers
et
les
dossiers
.

Pour
écrire
dans
un
fichier
sur
le
serveur
,
il
faut
que
le
dossier
qui
contient
les
fichiers
donne
le
droit
au
utilisateurs
de
lire
et
de
écrire
(
et
éventuellement
de
exécuter
)
.

C'
est
la
valeur
777
.

La
manipulation
se
fait
directement
sur
le
serveur
,
à
travers
à
logiciel
FTP
par
exemple
.

Syntaxe
générale
de
la
manipulation
du
fichiers
Il
y
a
3
étapes
dans
la
manipulation
du
fichiers
:
1
:
Créer
et
ouvrir
un
fichier
•
fopen()
2
:
Les
traitements
Ø
Ø
Ø
Ecrire
dans
le
fichier
:
•
fputs()
pour
écrire
une
ligne
,
•
fputc()
pour
écrire
un
caractère
,
•
fprintf()
pour
écrire
une
chaîne
formatée
,
à
etc
.

Lire
dans
le
fichier
:
•
fgets()
pour
lire
une
ligne
,
à
fgetc()
pour
lire
un
caractère
,
fseek
pour
se
déplacer
dans
le
fichier
,
•
fscanf()
pour
lire
une
chaîne
formatée
,
à
etc
.

Se
déplacer
dans
le
fichier
,
à
fseekçë
4
:
Fermer
un
fichier
à
fclose()
Base
du
php
–
Environnement
de
développement
à
page
34/43
Algorithmique
du
fichiers
Le
type
fichier
Ce
type
est
essentiellement
un
pointeur
qui
donne
l'
adresse
de
un
élément
du
fichier
(
d'abord
l'
adresse
du
premier
élément
du
fichier
.

mais
il
va
aussi
contenir
d'
autres
informations
:
ce
sera
en
fait
une
structure
dont
l'
un
du
champs
contient
l'
adresse
de
l'
élément
courant
du
fichier
.

Il
faut
bien
comprendre
que
dans
le
programme
,
il
y
a
une
variable
habituelle
(
une
structure
comme
n'
importe
quelle
structure
)
qui
contient
l'
adresse
de
un
élément
de
un
fichier
.

ptfich
fichier
ad
PROGRAMME
SE
Rom
Ouvrir
un
fichier
et
le
créer
si
nécessaire
:
fopen
http://php.net/manual/fr/function.fopen.php
$ptfich
=
fopen("nomDuFichierSurLeDisque
"
,
"
mode
de
ouverture
"
)
;
Le
nom
du
fichier
sur
le
disque
peut
être
absolu
ou
relatif
.

Il
y
a
plusieurs
mode
de
ouverture
du
fichier
:
r
,
r+
,
w
,
wu
,
au
,
etc
.

«
r
»
permet
la
lecture
seule
,
à
r+
à
la
lecture
et
l'
écriture
,
«
w
à
l'
écriture
seule
avec
création
si
le
fichier
n'
existe
pas
,
«
wu
»
,
la
lecture
et
l'
écriture
avec
création
si
le
fichier
n'
existe
pas
,
etc
.

Voir
la
documentation
de
référence
pour
le
détail
.

Fermer
un
fichier
:
fclose
Il
faut
fermer
les
fichiers
qu'
on
utilise
pour
permettre
à
d'
autres
de
les
utiliser
.

$booléen
fclose
(
$ptFich
)
;
lire
dans
un
fichier
$string
fgets
(
$ptFich
)
;
fgets
permet
de
lire
la
ligne
courante
.

Il
y
a
d'
autres
fonctions
fgetc
,
fscanf
,
fread
,
etc
.

Voir
par
exemple
:
http://php.net/manual/fr/function.fscanf.php
et
son
chapitre
voir
aussi
.

écrire
dans
un
fichier
$int
fwrite
(
$ptFich
,
$string
)
;
fwrite
écrit
la
$string
passée
en
paramètre
.

fputs
est
un
alias
de
fwrite
.

La
fonction
retourne
le
nombre
de
octets
écrits
.

0
=
false
,
si
0
octet
écrit
.

La
fonction
fprintf
est
une
autre
fonction
permettant
de
écrire
dans
un
fichier
avec
un
système
de
formatage
.

base
du
php
–
Environnement
de
développement
à
page
35/43
http://php.net/manual/fr/function.fwrite.php
Se
déplacer
dans
un
fichier
On
peut
se
déplacer
dans
un
fichier
de
un
nombre
de
octets
précisés
.

si
le
nombre
est
négatif
,
on
part
de
la
fin
du
fichier
.

fseek
(
$ptFich
,
nombreDOctets
)
;
http://php.net/manual/fr/function.fseek.php
Repérer
la
fin
du
fichier
On
peut
vérifier
à
tout
moment
si
le
$ptfich
est
arrivé
à
la
fin
du
ficher
.

$booléen
feof
(
$ptFich
)
;
http://php.net/manual/fr/function.feof.php
Exemple
9
–
tableau-users-Etape-4
:
codage
avec
fichier
On
reprend
l'
étape
2
ou
l'
étape
3
et
on
va
rajouter
des
fonctions
de
traitements
de
fichier
.

On
se
dote
de
une
fonction
de
écriture
du
tableau
$lesUsers
dans
un
fichier
:
function
ecrireLesUsersDansFichier($nomFichier
,
$lesUsers
)
Et
de
une
fonction
de
lecture
de
un
tableau
$lesUsers
à
partir
de
un
fichier
:
function
lireLesUsersDansFichier($nomFichier
,
&$lesUsers
)
Fonction
ecrireLesUsersDansFichier
function
ecrireLesUsersDansFichier($nomFichier
,
$lesUsers){
$ptfich=fopen($nomFichier
,
"
w
"
)
;
foreach
(
$lesUsers
as
$unUser){
foreach
(
$unUser
as
$element){
echo
$element
.
'

--
'
;
fprintf($ptfich
,
"
-s
--
"
,
$element
)
;
}
echo
'
<br/>
'
;
fprintf($ptfich
,
"
\n
"
)
;
//\n
tout
seul
pour
le
saut
de
ligne
}
fclose($ptfich)
;
à
La
fonction
commence
par
un
fopen
qui
retourne
un
$ptfich
:
chercher
l'
usage
de
fopen
.

Pour
écrire
dans
un
fichier
,
on
passe
à
w
»
au
fopen
.

Ensuite
on
écrit
dans
le
fichier
avec
un
fprintf
:
chercher
l'
usage
de
fprintf
.

Pour
passer
à
la
ligne
,
on
écrira
:
fprintf($ptfich
,
"
\n
"
)
;
Enfin
,
un
fclose
ferme
le
fichier
.

Fonction
lireLesUsersDansFichier
function
lireLesUsersDansFichier($nomFichier
,
&$lesUsers){
$ptfich=fopen($nomFichier
,
"
r
"
)
;
while
(
!

feof($ptfich)){
//
on
lit
5
param
car
prénom
et
nom
sont
2
chaînes
séparées
//
on
met
les
--
car
ils
sont
dans
le
fichier
Base
du
php
–
Environnement
de
développement
à
page
36/43
//
On
considère
que
les
3
champs
ne
contiennent
pas
de
espaces
$lectureOK=fscanf($ptfich
,
"
-s
-s
--
-s
--
-s
--
-s
--
"
,
$prenom
,
$nom
,
$mail
,
$motDePasse
,
$anneeNaissance
)
;
ifà
!

$lectureOK
)
{
//
si
on
a
un
pb
.

de
lecture
,
on
sort
return
0
;
//
on
peut
gérer
ça
plus
finement
!

à
$unUser=newUser($prenom
.
'

'
.$nom
,
$mail
,
$motDePasse
,
$anneeNaissance
)
;
printUnUser($unUser)
;
$lesUsers[]=$unUser
;
}
fclose($ptfich)
;
return
1
;
}
La
fonction
commence
par
un
fopen
en
mode
«
r
»
.

On
lit
dans
le
fichier
avec
un
fscanf
:
on
récupère
ainsi
tous
les
champs
de
un
utilisateur
.

On
crée
l'
utilisateur
et
on
le
met
dans
$lesUtilisateurs
.

Enfin
,
un
fclose
ferme
le
fichier
.

base
du
php
–
Environnement
de
développement
à
page
37/43
$_COOKIES
:
exemple
10
Présentation
Les
cookies
sont
des
petits
fichiers
(
<4ko
)
stockés
par
le
navigateur
sur
le
poste
client
pour
conserver
des
informations
pour
une
prochaine
foi
.

Ils
peuvent
ainsi
garder
une
trace
de
la
visite
de
un
site
pour
la
visite
suivante
.

On
les
appelle
aussi
témoin
de
connexion
.

Seul
le
domaine
qui
a
créé
le
cookie
peut
le
relire
.

Les
utilisateurs
du
navigateurs
peuvent
désactiver
les
cookies
pour
un
domaine
particulier
.

Selon
les
législations
en
vigueur
,
l'
utilisateur
doit
ou
pas
donner
son
accord
pour
recevoir
des
cookies
(
c'
est
le
cas
en
France
)
.

http://php.net/manual/fr/reserved.variables.cookies.php
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/session-cookies
Principes
de
codage
On
peut
enregistrer
les
cookies
:
fonction
setcookie
.

On
peut
lire
les
cookies
:
dans
la
variable
$_COOKIE
.

Enregistrer
un
cookie
sur
la
machine
client
:
setcookie
http://php.net/manual/fr/function.setcookie.php
setcookie
permet
de
enregistrer
un
cookie
sur
la
machine
client
.

Un
setcookie
doit
être
écrit
avant
le
code
HTML
:
avant
le
DOCTYPE
.

Par
exemple
,
si
on
arrive
dans
une
page
suite
à
la
validation
de
un
formulaire
POST
avec
une
variable
nom
et
une
variable
prenom
dans
$_POST
,
on
peut
enregistrer
2
cookies
:
le
nom
et
le
prénom
de
l'
utilisateur
:
<
?

php
if(isset($_POST['nom
'
]
setcookie('nom',$_POST['nom
'
]
,time()+3600*24*7)
;
if(isset($_POST['prenom
'
]
setcookie('prenom',$_POST['prenom
'
]
,time()+3600*24*7)
;
?

à
<
!

DOCTYPE
html>
...
Le
cookie
en
général
au
minimum
3
caractéristiques
:
à
un
nom
à
une
valeur
à
une
date
de
expiration
:
aujourd’hui
(time)+
du
secondes
:
ici
une
semaine
.

Accéder
au
cookie
dans
le
code
:
$_COOKIE
si
on
veut
maintenant
afficher
un
«
bonjour
nom
prenom
à
quand
l'
utilisateur
arrive
sur
notre
site
et
que
il
est
déjà
venu
et
que
on
a
enregistré
les
cookies
de
son
nom
et
de
son
prenom
,
on
utilise
le
tableau
associatif
$_COOKIE
.

base
du
php
–
Environnement
de
développement
à
page
38/43
Dans
le
header
,
par
exemple
,
on
pourra
récupérer
le
nom
et
le
prenom
pour
afficher
un
bonjour
ou
autre
chose
:
if
(isset($_COOKIE['nom']))
{
$nom
=
COOKIE['nom
'
]
;
}
if
(isset($_COOKIE['nom']))
{
$prenom
=
COOKIE['nom
'
]
;
}
//
on
peut
ensuite
faire
ce
qu'
on
veut
de
$nom
et
$prenom
à
Sécuriser
les
cookies
Attention
:
les
cookies
sont
modifiables
par
le
client
!

Il
faut
donc
les
considérer
comme
des
informations
non
sûres
!

Il
faut
donc
utiliser
la
fonction
htmlspecialchars
pour
protéger
le
contenu
du
cookie
:
if
(isset($_COOKIE['nom']))
à
$nom
=
htmlspecialchars(COOKIE['nom'])
;
}
if
(isset($_COOKIE['nom']))
{
$prenom
=
htmlspecialchars(COOKIE['nom'])
;
}
//
on
peut
ensuite
faire
ce
qu'
on
veut
de
$nom
et
$prenom
Modifier
et
supprimer
un
cookie
Pour
modifier
et
supprimer
un
cookie
,
on
reprend
la
fonction
setcookie
.

Pour
la
modification
,
on
garde
le
même
nom
et
on
peut
changer
la
valeur
et/ou
la
date
de
expiration
.

Pour
la
suppression
,
on
garde
le
même
nom
et
on
passe
une
date
de
expiration
avant
la
date
et
heure
actuelle
:
dont
on
passe
un
«
time()
à
1000
»
par
exemple
.

Précisions
Consulter
les
cookies
sur
le
navigateur
Sur
le
navigateur
,
en
affichant
les
outils
de
développement
ou
les
ressources
de
la
page
on
peut
accéder
au
ressources
ou
au
stockage
et
visualiser
les
cookies
.

On
va
voir
notre
cookie
.

On
voit
aussi
le
cookie
Phpsessid
:
Php
Sess
Id
:
c'
est
un
cookie
créé
automatiquement
par
Php
avec
comme
valeur
un
id
de
session
qui
permet
de
retrouver
l'
utilisateur
.

Autres
paramètres
du
setcookie
http://php.net/manual/fr/function.setcookie.php
Il
y
aussi
4
autres
paramètres
à
la
fonction
setcookie
qui
permettent
de
sécuriser
les
cookies
.

Le
dernier
,
httponly
,
si
il
est
à
true
peut
limiter
le
risque
de
faille
Xss
en
interdisant
que
le
Javascript
puisse
accéder
au
cookie
.

setcookie('nom','Bertrand
Liaudet',time()+3600*24*7
,
null
,
null
,
false
,
true
)
;
base
du
php
–
Environnement
de
développement
à
page
39/43
BILAN
Construction
de
un
site
et
variables
de
page
à
Un
site
est
constitué
de
«
page
»
qui
correspondent
chacune
à
un
«
main
»
.

à
Chaque
page
gère
ses
variables
de
page
,
locales
ou
globales
.

•
Les
variables
de
une
page
ne
sont
pas
visibles
dans
une
autre
page
.

à
Les
page
peuvent
échanger
des
informations
par
les
variables
superglobales
,
par
les
fichiers
et
par
la
Bd
.

Echanges
entre
les
page
à
Quand
une
page
appelle
une
autre
page
,
elle
peut
fournir
de
l'
information
dans
les
tableaux
$_GET
ou
$_POST
.

à
Les
page
peuvent
lire
et
écrire
dans
le
tableau
$_SESSION
qu'
elle
vont
donc
partager
.

à
Les
page
peuvent
écrire
des
cookies
et
lire
ces
cookies
dans
le
tableau
$_COOKIES
.

à
Les
page
peuvent
lire
et
écrire
dans
des
fichiers
qu'
elles
peuvent
partager
.

à
Les
page
peuvent
lire
et
écrire
dans
une
base
de
données
qu'
elles
peuvent
partager
.

à
Les
page
peuvent
lire
des
informations
concernant
le
serveur
et
le
client
dans
les
tableaux
$_ENV
et
$_SERVER
Base
du
php
–
Environnement
de
développement
à
page
40/43
Appel
de
une
page
On
peut
appeler
une
page
de
3
façons
:
<
a
href=
à
url
»
>
Dans
ce
cas
,
l'
information
circule
forcément
par
un
$_GET
et
directement
sur
l'
url
.

https://www.w3schools.com/tags/tag_a.asp
à
form
action=
à
url
»
method=
à
»
>
Dans
ce
cas
,
l'
information
circule
par
$_GET
ou
$_POST
selon
la
valeur
de
l'
attribut
method
dans
la
balise
form
(
GET
ou
POST
)
.

http://www.w3schools.com/tags/att_form_action.asp
header(‘location
:
url
’
)
Dans
ce
cas
l'
information
circule
forcément
par
un
$_GET
et
directement
sur
l'
url
.

http://php.net/manual/fr/function.header.php
Base
du
php
–
Environnement
de
développement
–
page
41/43
.HTACCESS
ET
.HTPASSWD
Présentation
Les
fichiers
.htaccess
et
.htpasswd
permettent
de
protéger
des
dossiers
et
des
fichiers
sur
un
site
web
.

Le
«
.

»
au
début
du
nom
font
que
ces
fichiers
sont
cachés
sur
les
os
Linux
.

https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/proteger-undossier-avec-un-htaccess
http://www.siteduzero.com/tutoriel-3-14649-proteger-un-dossier-avec-un-htaccess.html
http://www.siteduzero.com/tutoriel-3-35126-le-htaccess-et-ses-fonctionnalites.html
Sur
la
sécurité
du
sites
web
Par
exemple
:
https://legissa.ovh/internet-se-proteger-des-pirates-et-hackers.html
.htaccess
Le
fichier
.htaccess
permet
de
interdire
l'
accès
à
un
dossier
.

On
met
le
fichier
.htaccess
dans
le
dossier
concerné
.

On
peut
préciser
beaucoup
de
choses
dans
ce
fichier
.

au
minimum
,
pour
bloquer
l'
affichage
du
contenu
:
Options
-
Indexes
.htpasswd
Le
fichier
.htpasswd
permet
de
protéger
un
dossier
par
un
mot
de
passe
.

Il
est
associé
à
un
fichier
.htaccess
particulier
Contenu
du
fichier
.htaccess
AuthName
"
page
de
administration
protégée
"
AuthType
Basic
AuthUserFile
"
/C:/wamp/www/admin/.htpasswd
"
Require
valid-user
•
AuthName
est
le
texte
qui
répond
à
une
tentative
de
accès
.

à
AuthUserFile
est
le
chemin
vers
le
fichier
.htpasswd
.

Ce
chemin
peut
être
absolu
ou
relatif
selon
les
hébergeurs
!

En
local
:
absolu
.

En
général
:
absolu
.

Pour
connaître
le
chemin
absolu
de
un
fichier
:
<
?

php
echo
realpath('monFichier.php')
;
?

>
Contenu
du
fichier
.htpasswd
user1:password1
Base
du
php
–
Environnement
de
développement
à
page
42/43
user2:password2
sous
wamp
Le
mot
de
passe
est
spécifé
en
clair
:
bertrand:motDePasseBertrand
admin:motDePasseAdmin
Sur
un
serveur
en
ligne
Le
mot
de
passe
doit
être
crypté
:
bertrand:$1$MEqT//cb$hAVid.qmmSGFW/wDlIfQ81
admin:$1$/lgP8dYa$sQNXcCP47KhP1sneRIZoO0
à
Crypter
le
mot
de
passe
<
?

php
echo
crypt('monpasswd')
;
?

>
base
du
php
–
Environnement
de
développement
à
page
43/43
php
à
MYSQL
-
MVC
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/presentation-desbases-de-donnees-2
http://php.net/manual/fr/langref.php
Open
Class
Room
SOMMAIRE
Sommaire
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
1
Php
-
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
4
Installation
du
fichiers
de
test
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

4
Les
exemples
sont
présentés
dans
un
chapitre
en
vert
.

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Les
exercices
à
faire
sont
présentés
dans
un
chapitre
en
jaune
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Utilisation
de
PHPMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Oouvrir
phpMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
4
Créer
une
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
4
Créer
une
table
et
les
tuples
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
4
Mettre
à
jour
la
colonne
du
bd
à
gauche
:
onglet
flèche
circulaire
verte
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

5
Affichez
le
contenu
de
la
table
utilisateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
5
Exécuter
un
SELECT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
5
Exporter
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
5
Importer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
5
Connexion
à
la
Bd
et
print_r
du
contenu
de
une
table
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
Utilisation
de
la
base
de
donnée
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
Connexion
à
la
Bd
:
new
Pdo
(
exemple
1
–
connexion
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
Code
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
Explications
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

7
Afficher
le
contenu
de
une
table
-1
:
query()
,
fetch()
,
print_r
(
exemple
2
–
select
)
...
...
...
...
...
...
...
...
...
...
...
.
.
8
Exemple
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
8
Explications
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

9
Résultats
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
Chargez
les
exemples
1
et
2
et
testez
-les
.

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
10
Vocabulaire
de
Programmation
orientée
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
10
Classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
10
Objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
10
Méthode
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
10
Exceptions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

10
guide
de
style
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
10
Gestion
du
requêtes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
Technique
de
programmation
à
Pdo
et
PDOStatement
-
$bdd
,
$requete
,
$reqSQL
...
...
...
...
...
...
...
...
...
...
.

11
Terminologie
:
$bdd
-
$reqSQL
-
$requete
-
$ligne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
11
$bdd
(
Pdo
)
–
query
-
prepare
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
$requete
(
PDOStatement
)
-
execute
-
fetch
-
closeCurseur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

11
Synthèse
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

11
Accès
au
champs
,
gestion
erreurs
,
order
by
,
like
,
limit
(
exemple
3
–
Select
Where
)
...
...
...
...
...
...
...
...
12
Chargez
la
Bd
pour
pouvoir
tester
les
codes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Accéder
au
champs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Select
attribut1
,
attribut2
,
Where
,
Order
by
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Select
…
like
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
Select
à
Order
by
,
limit
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
Requêtes
variables
:
where
realisateur
=
?

(
exemple
4
–
Select
Variable
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
13
php
–
MySQL
à
MVC
-
page
1/34
Solution
basique
à
éviter
:
risque
Xss
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

13
Solution
avec
requête
préparée
:
where
?

,
prepare
et
execute
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
13
Remplacer
les
?

par
des
:alias
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

13
Déboguer
:
or
die
bdd->errorInfo()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

14
Créer
le
$bdd
avec
la
gestion
du
erreurs
(
déjà
vu
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

14
Aternative
:
exécuter
la
requête
(
query
ou
execute
)
à
or
die
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

14
Ajouter
,
modifier
,
supprimer
des
données
dans
une
table
(
exemple
5
–
insert-update-delete
)
...
...
...
.
.
15
Via
phpMyAdmin
à
Afficher
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

15
Via
phpMyAdmin
à
SQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

15
Via
php
-
INSERT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

15
Via
php
à
DELETE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
15
Via
php
à
UPDATE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

16
Bons
usage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
16
TP
1
–
Insert
Update
Delete
et
consultation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
16
Tp
Site
Artiste
–
non
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

17
Exemple
6
:
Etape
1
:
uniquement
les
œuvres
à
TP
2
:
Installez
,
testez
et
regardez
bien
le
code
...
...
...
.
.
17
Contenu
du
dossier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
17
Installation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
17
Tester
le
code
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
17
TP3
:
Etape
2
:
œuvres
,
exposition
et
œuvres
exposées
à
gestion
basique
dans
le
HTML
...
...
...
...
...
...
...
.
.
18
1
)
Quand
on
choisit
à
œuvres
»
,
on
obtient
ceci
qui
est
la
page
de
accueil
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

18
2
)
Quand
on
choisit
à
exposition
à
on
obtient
ceci
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
18
3
)
Quand
on
clique
sur
une
exposition
,
on
obtient
la
liste
du
œuvres
exposées
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
19
TP
4
:
Etape
3
–
comme
l'
étape
2
mais
avec
séparation
du
Php
et
du
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
20
Problématique
de
organisation
de
base
:
quels
fichiers
pour
mes
projets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
Questions
à
se
poser
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

21
Schéma
de
synthèse
à
réaliser
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
22
Problématique
:
quels
fichiers
,
quels
dossiers
pour
mes
projets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
22
Organisation
non-MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
22
Principes
de
organisation
non-MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
22
Défauts
de
l'
organisation
non-MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
22
Présentation
du
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

23
MVC
:
Modèle
-
Vue
-
Contrôleur
.

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Le
Modèle
(
SQL
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
La
vue
(
HTML
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Le
Contrôleur
(
php
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

24
Fonctionnement
global
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
24
MVC
:
design
pattern
tête
la
première
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
25
Organisation
du
répertoires
et
du
fichiers
dans
le
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

26
Organisation
de
répertoires
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

26
Les
fichiers
à
modèle
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
26
Les
fichiers
à
contrôleur
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
Les
fichiers
à
vue
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
Le
font
contrôleur
à
contrôleur
global
=
routeur
=
indexSwitch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

27
Le
problème
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

27
La
solution
:
un
«
front
contrôleur
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
Le
fichier
indexSwitch.html
:
le
routeur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
Principes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

27
Exemple
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

27
empty()
ou
isset()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
28
Include
entête
et
pied
de
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
28
Déconnexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
28
Debug
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
28
Variante
sans
switch
:
beaucoup
plus
courte
!

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
28
Php
–
MySQL
à
MVC
-
page
2/34
Le
fichier
index.html
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
29
MVC
à
Exemple
7
:
le
Site
Artiste
V1-MVC
-
affichage
du
œuvres
-
Testez
l'
exemple
...
...
...
...
...
...
...
...
...
.
.
30
Organisation
du
dossiers
et
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
TP
Site
Artiste
MVC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

31
TP-MVC-V2
:
Site
Artiste
V2
–
MVC
:
affichage
de
toutes
les
tables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
TP-MVC-V3
:
Site
Artiste
V3
–
MVC
:
administration
du
œuvres
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
La
page
de
administration
du
œuvres
pourra
ressembler
à
ceci
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
Connexion
comme
administrateur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
32
Vérifier
le
login
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
32
TP-MVC-V4
:
Site
Artiste
V4
–
MVC
:
administration
du
du
expositions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
Edition
:
mars
2019
php
–
MySQL
à
MVC
-
page
3/34
php
-
MYSQL
PHP-MySQL
:
https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/presentation-desbases-de-donnees-2
Manuel
de
Référence
du
Php
:
http://php.net/manual/fr/langref.php
Manuel
de
Référence
du
SQL
:
http://www.w3schools.com/sql/
Installation
du
fichiers
de
test
Les
exemples
du
cours
sont
dans
un
fichier
zip
fournis
avec
l'
article
du
cours
:
00-Exemples-PHP-
MySQL.zip
Chargez
ce
fichier
et
mettez
-le
dans
le
dossier
Partie_4
du
répertoire
web
«
www
»
du
serveur
Wamp
.

Les
exemples
sont
présentés
dans
un
chapitre
en
vert
.

Les
exercices
à
faire
sont
présentés
dans
un
chapitre
en
jaune
.

Utilisation
de
PHPMyAdmin
Oouvrir
phpMyAdmin
Icône
Wamp
/
bouton
droit
/
phpMyAdmin
Créer
une
base
de
données
Onglet
Base
de
données
Dans
le
champ
à
nom
de
base
de
donnée
à
saisissez
:
«
BD_Utilisateur
»
On
vient
de
créer
la
BD_Utilisateur
.

Elle
apparaît
dans
le
navigateur
à
gauche
.

Créer
une
table
et
les
tuples
Allez
dans
l'
onget
SQL
.

On
va
créer
la
table
suivante
avec
les
tuples
associés
(
fichier
BD_Utilisateur.sql
de
l'
exercice
1
.

CREATE
TABLE
Utilisateur
(
id
int(11)
primary
key
AUTO_INCREMENT
,
prenomNom
varchar(20)
NOT
NULL
,
adMail
varchar(20)
NOT
NULL
,
motDePasse
varchar(20)
NOT
NULL
,
Php
–
MySQL
à
MVC
-
page
4/34
annee
int(4)
NOT
NULL
)
ENGINE=InnoDB
;
Insert
into
Utilisateur
values
(
NULL
,
'
Sia
Pei
'
,
'
ji@gmail.com','jipei
'
,
1995
)
;
Insert
into
Utilisateur
values
(
NULL
,
'
Yawei
Cai
'
,
'
jawei@yahoo.com','yaweicai',1996
)
;
Insert
into
Utilisateur
values
(
NULL
,
'
Zikeng
PENG
'
,
'
zikeng@china.com','zikeng',1994
)
;
Insert
into
Utilisateur
values
(
NULL
,
'
Jiawen
Li
'
,
'
jiawen@orange.fr','jiawen',1995
)
;
Insert
into
Utilisateur
values
(
NULL
,
'
Xiaoyu
Liu
'
,
'
xiowyu@gmail.fr','liu',1996
)
;
Insert
into
Utilisateur
values
(
NULL
,
'
Olivier
TRAN','tran@gmailcom','olivier',1997
)
;
Collez
le
code
dans
la
zone
de
saisie
SQL
et
exécuter
.

La
table
est
créée
avec
les
tuples
.

Mettre
à
jour
la
colonne
du
bd
à
gauche
:
onglet
flèche
circulaire
verte
Cliquez
sur
la
flèche
circulaire
verte
pour
mettre
à
jour
la
colonne
du
bd
.

vous
pouvez
ouvrir
la
Bd
à
BD_Utilisateur
»
.

vous
voyez
apparaître
la
table
à
Utilisateur
»
.

Affichez
le
contenu
de
la
table
utilisateur
En
cliquant
sur
la
table
dans
la
colonne
du
bd
,
on
voit
apparaître
la
liste
du
tuples
.

Exécuter
un
SELECT
En
allant
dans
l'
onglet
SQL
,
on
peut
saisir
une
requête
.

Par
exemple
:
SELECT
*
FROM
`
utilisateur
`
WHERE
id
=
3
Exporter
On
peut
exporter
la
Bd
dans
différents
formats
:
SQL
:
Ca
génère
un
script
SQL
qui
permet
de
reconstituer
la
Bd
à
l'
identique
,
donc
une
sauvegarde
.

Exportez
la
Bd
générée
et
regardez
le
script
.

CSV
:
Ca
génère
un
fichier
texte
qu'
on
pourra
importer
sur
Excel
.

Exportez
la
Bd
en
format
CSV
et
importez
le
fichier
CSV
dans
Excel
.

Importer
On
commence
par
créer
une
Bd
.

Ensuite
,
on
peut
importer
le
contenu
de
la
Bd
dans
différents
formats
:
SQL
:
on
choisir
le
fichier
à
importer
.

C'
est
un
fichier
avec
du
code
SQL
(
du
DDL
et
du
DML
:
du
CREATE
TABLE
et
du
INSERT
INTO
)
.

Par
exemple
,
c'
est
un
fichier
exporté
de
sauvegarde
.

php
–
MySQL
à
MVC
-
page
5/34
CSV
:
on
peut
importer
un
fichier
Excel
qui
aura
été
enregistré
au
format
CSV
.

Il
faut
préciser
le
séparateur
de
colonne
(
plutôt
un
«
;
»
en
CSV
)
et
préciser
si
les
colonnes
ont
une
première
ligne
avec
le
nom
de
colonne
.

On
peut
dire
de
ne
pas
s'
arrêter
en
cas
de
erreur
de
INSERT
.

Il
faudra
ensuite
ajouter
des
contraintes
de
intégrité
dans
la
table
.

Particulièrement
mettre
les
clés
primaires
et
étrangères
et
donnez
un
nom
à
la
table
.

php
–
MySQL
à
MVC
-
page
6/34
Connexion
à
la
Bd
et
print_r
du
contenu
de
une
table
Utilisation
de
la
base
de
donnée
en
Php
3
jeu
de
fonctions
(
Api
)
permettent
de
se
connecter
à
la
Bd
et
de
l'
utiliser
:
mysql
,
mysqli
et
Pdo
:
http://php.net/manual/fr/mysqlinfo.api.choosing.php
Le
jeu
mysql
est
le
plus
ancien
:
mieux
vaut
l'
éviter
.

On
peut
utiliser
mysqli
ou
Pdo
(
Php
Data
Object
)
,
et
particulièrement
PDO_MYSQL
.

L'
intérêt
du
Pdo
est
que
c'
est
une
interface
de
abstraction
permettant
l'
utilisation
de
n'
importe
quelle
Bd
.

de
plus
elle
est
à
orienté
objet
»
.

On
utilisera
plutôt
PDO_MYSQL
http://php.net/manual/en/ref.pdo-mysql.php
Connexion
à
la
Bd
:
new
Pdo
(
exemple
1
–
connexion
)
Code
<
?

php
function
connexionBD($dbname){
//
paramètres
de
la
base
de
donnée
$sgbdname='mysql
'
;
$host='localhost
'
;
$charset='utf8
'
;
//
dsn
:
data
source
name
$dsn
=
$sgbdname
.

'
:host='.$host
.

'
;
dbname='.$dbname
.

'
;
charset='.$charset
;
//
utilisateur
connecté
à
la
base
de
donnée
$username
=
'
root
'
;
$password
=
'
root
'
;
//
pour
avoir
des
erreurs
SQL
plus
claires
$erreur
à
array(PDO::ATTR_ERRMODE
=>
PDO::ERRMODE_EXCEPTION
)
;
try
{
//
connexion
à
la
Bd
:
new
Pdo
$bdd
=
new
PDO($dsn
,
$username
,
$password
,
$erreur
)
;
echo'<p>Connexion
réussie</p>
'
;
return
$bdd
;
}
catch
(
PDOException
$e
)
à
echo
'
Connexion
échouée
:
'
.

$e->getMessage()
;
return
NULL
;
//
die
(
'
Connexion
échouée
:
'
.

$e->getMessage()
)
;
}
}
?

>
Explications
à
On
fait
un
new
Pdo
avec
4
paramètres
Pdo
est
une
classe
.

On
crée
un
nouvel
objet
de
la
classe
qu'
on
appelle
$bdd
.

http://php.net/manual/fr/pdo.construct.php
Le
new
Pdo
à
4
paramètres
:
Php
–
MySQL
à
MVC
-
page
7/34
•
$dsn
(
data
source
name
)
:
contient
du
infos
sur
le
Sgbd
(
mysql
)
,
le
serveur
(
host
,
ici
:
localhost
)
,
le
nom
de
la
Bd
,
le
jeu
de
caractères
utilisé
(
UTF8
pour
que
ce
soit
le
plus
générique
)
.

•
$username
:
nom
de
l'
utilisateur
qui
se
connecte
à
la
Bd
.

•
$password
:
password
de
l'
utilisateur
qui
se
connecte
à
la
Bd
.

à
$erreur
:
pour
gérer
les
message
de
erreur
.

à
On
utilise
des
variables
pour
rendre
le
code
générique
On
utilise
des
variables
pour
rendre
le
code
plus
générique
:
à
$host
:
la
machine
du
serveur
de
Sgbd
,
à
$sgbdname
:
le
type
de
Sgbd
,
à
$username
:
le
nom
de
l'
utilisateur
qui
se
connecte
sur
la
Bd
,
à
$password
:
le
mot
de
passe
de
cet
utilisateur
,
•
$dbname
:
le
nom
de
la
Bd
à
laquelle
on
accède
sur
le
Sgbd
.

à
$erreur
:
gestion
du
erreurs
$erreur
=
array(PDO::ATTR_ERRMODE
=>
PDO::ERRMODE_EXCEPTION
)
;
En
ajoutant
le
paramètre
$erreur
tel
que
il
est
là
dans
le
new
Pdo
,
on
aura
des
message
de
erreurs
du
Sgbd
,
par
exemple
si
le
SELECT
est
mal
écrit
.

Syntaxe
:
Pdo
::ATTR_ERRMODE
et
PDO::ERRMODE_EXCEPTION
sont
des
constantes
de
classe
définies
dans
la
classe
Pdo
.

On
a
la
syntaxe
:
array
(
clé
=>valeur
)
qui
permet
de
définir
un
couple
clé-valeur
dans
le
tableau
.

Pdo
::ATTR_ERRMODE
:
http://php.net/manual/fr/pdo.constants.php
PDO::ERRMODE_EXCEPTION
:
http://php.net/manual/fr/pdo.error-handling.php
Ø
Gestion
du
erreurs
avec
try
catch
La
structure
à
try
à
«
catch
»
est
une
structure
de
programmation
objet
pour
gérer
les
erreurs
.

Le
die
permet
de
arrêter
proprement
l'
exécution
de
la
page
en
cas
de
erreur
.

Afficher
le
contenu
de
une
table
-1
:
query()
,
fetch()
,
print_r
(
exemple
2
–
select
)
Exemple
//
on
écrit
la
requête
$reqSQL='SELECT
*
FROM
utilisateur
'
;
//
on
récupère
le
résultat
$requete=$bdd->query($reqSQL)
;
echo
'
<pre>
'
;
print_r($requete)
;
echo
'
</pre>
'
;
//
on
affiche
le
résultat
ligne
par
ligne
while($ligne=$requete->fetch()){
echo
'
<pre>
'
;
print_r($ligne)
;
echo
'
</pre>
'
;
echo
'
<p>
nombre
de
éléments
de
$ligne
:
'
.sizeof($ligne
)
.

'
</p>
'
;
}
//
on
libère
les
tables
de
la
requête
$requete->closeCursor()
;
//
pour
finir
le
traitement
Php
–
MySQL
à
MVC
-
page
8/34
Explications
à
On
écrit
le
select
dans
$reqSQL
à
On
utilise
la
méthode
(
fonction
)
query
de
$bdd
(
->
)
en
passant
la
$reqSQL
en
paramètre
.

à
Le
résultat
est
dans
$requete
:
c'
est
un
objet
complexe
sur
lequel
on
peut
appliquer
des
méthodes
(
des
fonctions
)
qui
contient
le
tableau
de
données
du
select
.

à
On
affiche
ce
qu'
on
peut
de
la
réponse
:
en
l'
occurrence
seule
la
requête
s'
affiche
.

•
On
passe
les
lignes
de
la
réponse
en
revue
avec
la
méthode
fetch(
)
.

à
Chaque
$ligne
retourné
par
le
fetch
est
un
tableau
associatif
:
on
peut
faire
un
print_r
de
$ligne
.

à
On
constate
alors
que
on
a
deux
accès
possible
à
chaque
donnée
:
par
le
nom
du
champs
(
id
par
exemple
)
ou
par
un
numéro
(
0
pour
id
)
:
il
y
a
donc
2
foi
plus
de
éléments
que
prévu
dans
chaque
ligne
•
Quand
on
a
fini
de
travailler
,
on
fait
un
closeCursor
,
pour
libérer
les
tables
de
la
requête
Résultats
Connexion
réussie
DEBUT
<
pre
>
print_r($requete)
;
<
/pre
>
PDOStatement
Object
(
[
queryString
]
=>
SELECT
*
FROM
utilisateur
)
while($ligne=$requete->fetch()){
Array
(
[
id
]
çù
1
[
0
]
çù
1
[
prenomNom
]
çù
Sia
Pei
[
1
]
=>
Sia
pei
[
adMail
]
çù
ji@gmail.com
[
2
]
=>
ji@gmail.com
[
motDePasse
]
çù
jipei
[
3
]
çù
jipei
[
annee
]
=>
1995
[
4
]
çù
1995
)
nombre
de
éléments
de
$ligne
:
10
Array
(
[
id
]
çù
2
[
0
]
çù
2
[
prenomNom
]
=>
Yawei
Cai
[
1
]
=>
Yawei
Cai
[
adMail
]
çù
jawei@yahoo.com
[
2
]
çù
jawei@yahoo.com
[
motDePasse
]
=>
yaweicai
[
3
]
=>
yaweicai
[
annee
]
çù
1996
[
4
]
çù
1996
)
nombre
de
éléments
de
$ligne
:
10
php
–
MySQL
à
MVC
-
page
9/34
Chargez
les
exemples
1
et
2
et
testez
-les
.

Vocabulaire
de
Programmation
orientée
objet
Classe
Une
classe
,
c'
est
un
type
,
comme
un
entier
,
un
réel
,
un
caractère
,
une
string
ou
un
booléen
.

En
général
,
une
classe
correspond
à
l'
équivalent
de
un
tableau
associatif
:
elle
contient
plus
couples
de
clé-valeur
.

Les
différentes
clés
sont
appelées
à
attribut
»
.

En
plus
,
on
associe
des
fonctions
à
une
classe
:
on
les
appelle
alors
à
méthode
»
.

Objet
Un
objet
c'
est
une
variable
de
type
Classe
.

Quand
on
crée
un
objet
avec
des
valeurs
pour
les
couples
clé-valeur
(
pour
les
attributs
)
,
on
dit
que
on
instancie
un
objet
.

Ca
passe
par
la
commande
à
new
»
.

Méthode
Les
méthodes
sont
des
fonctions
qui
sont
attachées
à
une
classe
.

Elle
ne
se
sont
utilisables
que
par
les
objets
de
la
classe
.

On
écrit
:
objet->methode()
pour
appeler
la
méthode
pour
l'
objet
en
question
:
c'
est
comme
si
on
avait
passé
l'
objet
en
paramètre
de
la
méthode
.

Exceptions
En
cas
de
erreur
,
en
programmation
objet
on
passe
par
des
objets
de
classe
Exception
.

Ca
se
fait
avec
un
«
try
»
«
catch
à
try
:
on
essaie
de
exécuter
une
suite
de
instruction
catch
:
si
la
suite
de
instructions
exécutée
à
générer
une
erreur
sous
la
forme
de
une
exception
,
on
passe
dans
le
bloc
catch
Le
catch
précise
le
nom
de
l'
objet
exception
qu'
on
va
traiter
.

On
peut
alors
accéder
à
des
informations
par
la
méthode
getMessage()
par
exemple
.

guide
de
style
https://fr.wikipedia.org/wiki/CamelCase
https://eilgin.github.io/php-the-right-way/#code_style_guide
Php
–
MySQL
à
MVC
-
page
10/34
Gestion
du
requêtes
Technique
de
programmation
à
Pdo
et
PDOStatement
-
$bdd
,
$requete
,
$reqSQL
Pour
manipuler
la
Bd
,
on
utilise
principalement
deux
classes
:
Pdo
et
PDOStatemenet
Terminologie
:
$bdd
-
$reqSQL
-
$requete
-
$ligne
•
$bdd
:
un
objet
de
la
classe
Pdo
sera
appelé
$bdd
.

C'
est
en
quelque
sorte
l'
objet
qui
permet
l'
accès
concret
à
la
base
de
données
,
pour
un
utilisateur
et
une
base
de
donnée
.

à
$reqSQL
:
le
texte
de
la
requête
sera
mis
dans
un
$reqSQL
.

C'
est
une
simple
chaine
de
caractères
.

Il
ne
doit
pas
être
confondu
avec
le
résultat
de
la
requête
:
$requete
.

à
$requete
:
un
objet
de
la
classe
PSOStatement
sera
appelé
$requete
(
statement
peut
vouloir
dire
à
requête
»
.

Cette
$requete
est
un
objet
complexe
qui
contient
à
la
foi
le
$reqSQL
et
le
résultat
de
la
requête
une
foi
celle
-ci
exécutée
.

à
$ligne
:
le
résultat
de
un
fetch()
est
une
ligne
:
$ligne
=$requete->fetch(
)
.

C'
est
un
tuple
de
la
table
résultant
de
la
requête
SQL
.

$bdd
(
Pdo
)
à
query
-
prepare
http://php.net/manual/fr/class.pdo.php
Pdo
ne
contient
que
du
méthodes
(
il
ne
contient
pas
de
attributs
)
.

Notons
Particulièrement
:
à
query
:
renvoie
un
$requete
auquel
est
associé
le
$reqSQL
passé
en
paramètre
et
le
résultat
de
la
requête
(
le
résultat
du
Select
)
prêt
à
être
fetché
(
prêt
à
être
parcouru
)
.

à
prepare
:
renvoie
un
$requete
auquel
est
associé
le
$reqSQL
passé
en
paramètre
.

La
requête
n'
a
pas
été
exécutée
.

Elle
peut
contenir
des
variables
.

Pdo
contient
aussi
des
méthodes
propres
à
une
Bd
comme
la
gestion
du
transactions
:
commit
,
rollback
,
etc
.
,
et
d'
autres
choses
.

$requete
(
PDOStatement
)
-
execute
-
fetch
-
closeCurseur
http://php.net/manual/fr/class.pdostatement.php
PDOStatement
contient
un
attribut
:
la
valeur
du
$resSQL
fourni
en
paramètre
quand
il
a
été
créé
.

Il
contient
aussi
des
méthodes
.

Notons
particulièrement
:
•
execute
:
permet
de
exécuter
une
une
requête
avec
des
variables
.

Il
faut
fournir
en
paramètre
un
tableau
de
valeurs
pour
les
variables
.

à
fetch
:
permet
de
récupérer
les
lignes
du
résultat
de
la
requête
,
une
par
une
.

à
fetchAll
:
permet
de
récupérer
les
lignes
du
résultats
de
la
requête
,
toutes
dans
un
tableau
.

à
closeCurseur
:
permet
de
refaire
un
execute
.

Synthèse
$bdd
:
Pdo
$requete
:
PDOStatement
->
query($reqSQL)
:
PDOStatement
->
fetch()
:
ligne
->
prepare($reqSQL)
:
PDOStatement
->
exectute()
:
bool
-
closeCursor()
:
bool
->
fetchAll()
:
toutes
les
lignes
Php
–
MySQL
à
MVC
-
page
11/34
Accès
au
champs
,
gestion
erreurs
,
order
by
,
like
,
limit
(
exemple
3
–
Select
Where
)
Chargez
la
Bd
pour
pouvoir
tester
les
codes
Pour
tester
les
codes
,
il
faut
charger
la
Bd
en
plus
de
installer
le
code
dans
le
répertoire
du
serveur
Web
.

Accéder
au
champs
$ligne
est
un
tableau
associatif
.

On
peut
donc
écrire
:
echo
'
<p><strong>
prenom
nom
</strong></p>
'
;
while($ligne=$requete->fetch()){
echo
'
<p>
'
.$ligne[prenom
]
.

'
'
.$ligne[nom
]
.

'
</p>
'
;
}
Select
attribut1
,
attribut2
,
Where
,
Order
by
$reqSQL=
'
Select
realistateur
,
titre
,
annee
from
films
where
realisateur
=
'
\King
Vidor\
'
order
by
annee
'
;
//
on
precise
3
champs
:
realisateur
,
titre
et
annee
//
attention
au
\
'
//
on
trie
par
annee
Select
à
like
$reqSQL=
'
SELECT
*
FROM
films
WHERE
realisateur
like
\'%manki%\
'
order
by
realisateur
,
annee
e
;
//
like
%
manki
%
:
n'
importe
quoi
autour
de
manki
//
order
by
realisateur
,
annee
:
plusieurs
realisateurs
possibles
//
dans
le
resultat
:
je
ordonne
le
résultat
Select
à
Order
by
,
limit
$reqSQL=
'
Select
realistateur
,
titre
,
annee
from
films
where
annee
=
1960
order
by
annee
limit
0
,
10
'
)
;
//
on
prend
les
10
premiers
(
de
1
à
10
)
//
limit
10
,
10
pour
les
10
suivants
//
limite
20
,
10
pour
les
10
suivants
,
etc
.

php
–
MySQL
à
MVC
-
page
12/34
Requêtes
variables
:
where
realisateur
=
?

(
exemple
4
–
Select
Variable
)
Objectif
:
mettre
une
variable
dans
une
requête
(
par
exemple
,
une
information
saisie
par
l'
utilisateur
)
Solution
basique
à
éviter
:
risque
Xss
On
pourrait
mettre
un
$_GET
dans
la
$reqSQL
:
$reqSQL='Select
à
where
auteur=\
''
.$_GET['realisateur
'
]
.

'
\
''
)
;
à
éviter
!

!
!

si
le
$_GET
contient
à
toto
\
'
or
\'a\'=\'a
,
le
select
renverra
toute
la
table
!

Solution
avec
requête
préparée
:
where
?

,
prepare
et
execute
$reqSQL='Select
à
where
realisateur
=
?

;
$requete=$bdd->prepare($reqSQL)
$requete->execute(array(
$_GET['realisateur
'
]
)
)
;
On
sépare
les
arguments
par
des
«
,
»
dans
le
array
Remplacer
les
?

par
des
:alias
Cette
solution
est
la
plus
lisible
et
celle
qu'
on
va
privilégier
.

$reqSQL='Select
à
where
realisateur=
:realisateur
;
$requete=$bdd->prepare($reqSQL)
$requete->execute(array(
'
realisateur'=>
$_GET['realisateur
'
]
)
)
;
Php
–
MySQL
à
MVC
-
page
13/34
Déboguer
:
or
die
bdd->errorInfo()
Créer
le
$bdd
avec
la
gestion
du
erreurs
(
déjà
vu
)
Pour
afficher
les
détails
de
une
erreur
,
on
crée
un
$bdd
avec
la
gestion
du
erreurs
:
$erreur
=
array(PDO::ATTR_ERRMODE
=>
PDO::ERRMODE_EXCEPTION
)
;
$bdd
=
new
PDO($dsn
,
$username
,
$password
,
$erreur
)
;
C'
est
suffisant
pour
obtenir
des
message
de
erreur
propres
.

Aternative
:
exécuter
la
requête
(
query
ou
execute
)
à
or
die
»
si
on
n'
utilise
pas
un
$erreur
dans
le
new
Pdo
,
on
peut
ajouter
un
«
or
die
à
au
query
ou
au
execute
pour
afficher
les
détails
de
une
erreur
.

mais
c
$requete=$bdd->query($reqSQL)
or
die(print-r($bdd>errorInfo()))
;
ou
$requete->execute(array(
…
)
)
or
die(print-r($bdd>errorInfo()))
;
Le
«
or
die
»
est
inutile
avec
une
connexion
Pdo
en
ERRMODE
.

Le
«
or
die
à
s'
utilise
quand
on
travaille
avec
le
jeu
à
mysql
»
de
fonctions
et
la
fonction
mysql_connect(
…
)
.

http://php.net/manual/fr/pdo.errorinfo.php
à
Les
limites
du
«
or
die
»
:
confidentialité
et
user
friendly
Le
«
or
die
»
peut
être
pratique
en
phase
de
développement
.

En
production
,
il
met
au
jour
des
informations
qui
peuvent
être
confidentielles
et
n'
est
pas
userfriendly
.

http://www.alsacreations.com/tuto/lire/676-gestion-erreurs-mysql-php-or-die.html
Php
–
MySQL
à
MVC
-
page
14/34
Ajouter
,
modifier
,
supprimer
des
données
dans
une
table
(
exemple
5
–
insert-update-delete
)
Via
phpMyAdmin
à
Afficher
Interface
graphique
Via
phpMyAdmin
à
SQL
On
peut
entrer
les
commandes
SQL
:
INSERT
,
UPDATE
et
DELETE
.

Le
système
propose
un
pré-remplissage
du
commandes
.

Via
php
-
INSERT
On
peut
entrer
les
commandes
SQL
:
INSERT
,
UPDATE
et
DELETE
.

$reqSQL=
'
INSERT
INTO
films
(
titre
,
realisateur
,
annee
)
VALUES
(
:titre
,
:realisateur
,
:annee
)
'
;
//exemple('L\'homme
irrationnel','Woody
Allen','2015
'
)
;
$requete=$bdd->prepare($reqSQL)
$resultat=$req->
execute(array(
'
titre'=>$_GET['titre
'
]
,
'
realisateur'=>$_GET['realisateur
'
]
,
'
annee'=>$_GET['annee
'
]
)
)
;
//
or
die(print-r($bdd->errorInfo()))
;
/*
le
or
die
est
inutile
avec
la
connexion
en
ERRMODE
*/
/*
$resultat
pour
traiter
les
erreurs
proprement
,
sans
ERRMODE
*/
Via
php
à
DELETE
$reqSQL=
'
DELETE
FROM
films
WHERE
titre
=
:titre
AND
realisateur
=
:realisateur
'
;
$requete=$bdd->prepare($reqSQL)
;
$resultat=$requete->execute(array(
'
titre'=>$_GET['titre
'
]
,
'
realisateur'=>$_GET['realisateur
'
]
)
)
;
/*
pour
tester
le
résultat
:
0
si
pas
de
DELETE
*/
if($requete->rowCount()
){
//
rowCount
compte
le
nombre
de
delete
echo
'
<br/>DELETE
effectué
'
.$requete->rowCount(
)
.

'
foi
'
;
à
else
à
echo
'
<br/>
Le
DELETE
a
échoué
e
;
}
rowCount
permet
de
savoir
combien
de
delete
on
été
effectués
.

http://www.astuces-webmaster.ch/page/mysql-pdo
Php
–
MySQL
à
MVC
-
page
15/34
Ø
ATTENTION
au
DELETE
!

!

Attention
au
delete
:
quand
une
donnée
est
supprimée
,
on
ne
peut
pas
la
récupérer
si
on
est
en
mode
validation
(
autocommit
)
ce
qui
est
le
plus
fréquent
!

Il
faut
donc
faire
des
vérifications
,
par
exemple
:
if
(
!

isset($_GET['realisateur'])
or
!

isset($_GET['titre'])
or
$_GET['realisateur']==
''
or
$_GET['titre']==
''
)
{
echo
'
<br/>
vous
n\'avez
pas
saisi
tous
les
paramètres
'
;
}
Via
php
à
UPDATE
$reqSQL=
'
UPDATE
films
SET
duree=:duree
WHERE
titre
=
:titre
AND
realisateur
à
:realisateur
'
;
Ø
ATTENTION
à
l'
UPDATE
!

!

Attention
à
l'
UPDATE
:
quand
une
donnée
est
modifiée
,
on
ne
peut
pas
la
récupérer
si
on
est
en
mode
validation
(
autocommit
)
ce
qui
est
le
plus
fréquent
!

Bons
usage
à
la
place
de
:
e
titre'=>$_GET['titre
'
]
on
aura
e
titre'=>$titre
Les
variables
$titre
,
$realisateur
,
etc
.

seront
récupérées
via
un
$_POST
ou
un
$_GET
.

TP
1
–
Insert
Update
Delete
et
consultation
On
travaille
avec
la
base
CINEMA
.

1
.

Changez
volontairement
les
paramètres
de
connexion
un
par
un
pour
voir
le
message
de
erreur
correspondant
.

2
.

Ajoutez
un
film
.

Vérifiez
que
il
est
bien
présent
dans
la
Bd
en
utilisant
un
script
de
consultation
.

3
.

Supprimer
le
film
que
vous
venez
de
ajouter
.

Vérifiez
que
il
est
bien
absent
dans
la
Bd
en
utilisant
un
script
de
consultation
.

4
.

Rajoutez
un
film
.

Vérifiez
que
il
est
bien
présent
dans
la
Bd
en
utilisant
un
script
de
consultation
.

5
.

Modifiez
l'
année
du
film
que
vous
venez
de
rajouter
.

Vérifiez
que
la
modification
a
été
faite
dans
la
Bd
en
utilisant
un
script
de
consultation
.

php
–
MySQL
à
MVC
-
page
16/34
TP
Site
Artiste
–
non
MVC
Exemple
6
:
Etape
1
:
uniquement
les
œuvres
à
TP
2
:
Installez
,
testez
et
regardez
bien
le
code
Contenu
du
dossier
Le
dossier
de
l'
exemple
6
contient
:
Le
code
de
la
Bd
:
BD_ARTISTE.sql
et
un
dossier
de
image
.

Le
fichier
de
connexion
à
la
Bd
.

Une
page
pour
l'
affichage
du
œuvres
.

Installation
Installez
la
Bd
sur
Wamp
.

Parcourez
le
contenu
de
la
Bd
pour
bien
la
comprendre
.

Regardez
la
page
de
affichage
du
œuvres
:
indexOeuvres.php
Tester
le
code
On
obtient
l'
affichage
suivant
:
Php
–
MySQL
à
MVC
-
page
17/34
TP3
:
Etape
2
:
œuvres
,
exposition
et
œuvres
exposées
à
gestion
basique
dans
le
HTML
Ensuite
on
veut
pouvoir
afficher
aussi
les
expositions
et
les
œuvres
exposées
.

On
considère
que
à
Site
Artiste
»
et
le
«
nav
»
sont
dans
un
header
HTML
.

1
)
Quand
on
choisit
à
œuvres
»
,
on
obtient
ceci
qui
est
la
page
de
accueil
:
2
)
Quand
on
choisit
à
exposition
à
on
obtient
ceci
:
php
–
MySQL
à
MVC
-
page
18/34
3
)
Quand
on
clique
sur
une
exposition
,
on
obtient
la
liste
du
œuvres
exposées
:
Php
–
MySQL
à
MVC
-
page
19/34
Tp
4
:
Etape
3
–
comme
l'
étape
2
mais
avec
séparation
du
Php
et
du
HTML
On
va
maintenant
organiser
le
code
en
séparant
au
maximum
le
code
Php
et
le
code
HTML
.

Pour
ça
,
on
va
utiliser
la
fonction
fetchAll()
:
$lesOeuvres=$requete->fetchAll()
;
Ainsi
,
on
récupère
le
tableau
complet
du
œuvres
issu
du
Select
.

On
peut
ensuite
parcourir
ce
tableau
dans
le
Php
avec
un
classique
«
foreach
»
:
foreach($lesOeuvres
as
$ligne){
echo
'
<h3>[
'
.$ligne['id
'
]
.

'
]
:
'
.$ligne['titre
'
]
.

'
-
'
.$ligne['annee
'
]
.

'
-
'
.$ligne['prix
'
]
.
'

euros</h3>
'
;
etc
.

}
php
–
MySQL
à
MVC
-
page
20/34
Problématique
de
organisation
de
base
:
quels
fichiers
pour
mes
projets
Le
but
est
de
afficher
les
œuvres
,
les
expositions
et
les
œuvres
exposées
.

Questions
à
se
poser
:
Quels
fichier
dois
je
créer
?

Il
y
aura
1
fichier
par
page
.

Comment
circule
-t-on
de
page
en
page
?

y
a
-t-il
des
éléments
commun
côté
HTML
?

Côté
HTML
,
le
header
sera
partagé
.

y
a
-t-il
de
éléments
commun
côté
Php
?

Côté
php
,
la
connexion
à
la
Bd
sera
partagée
.

Schéma
de
synthèse
à
réaliser
Php
–
MySQL
à
MVC
-
page
21/34
MVC
https://openclassrooms.com/courses/votre-site-php-presque-complet-architecture-mvc-et-bonnespratiques/avant-propos-comment-fonctionne-ce-tutoriel
https://openclassrooms.com/courses/adopter-un-style-de-programmation-clair-avec-le-modele-mvc
Problématique
:
quels
fichiers
,
quels
dossiers
pour
mes
projets
Le
MVC
s'
intéresse
à
la
problématique
de
organisation
du
fichiers
et
du
répertoires
.

à
noter
particulièrement
les
problèmes
suivants
:
•
•
•
•
à
Quels
dossiers
dois
je
créer
?

Comment
dois
je
organiser
mes
fichiers
?

Comment
passe
-t-on
de
un
fichier
à
un
autre
?

Quels
sont
les
inclusions
à
envisager
?

y
a
-t-il
besoin
de
un
dossier
admin
?

Organisation
non-MVC
Principes
de
organisation
non-MVC
On
va
avoir
une
page
php
par
page
de
site
.

Une
page
c'
est
comme
un
«
main
»
qui
reçoit
des
paramètres
(
$_GET
,
$_POST
)
.

La
liste
du
paramètres
est
variable
selon
l'
entrée
(
un
href
,
un
autre
href
,
un
formulaire
de
saisie
,
un
autre
,
un
header
)
.

Il
y
a
aussi
des
variables
globales
partagées
par
toutes
les
page
dans
$_SESSION
.

La
page
réagit
différemment
en
fonction
du
paramètres
qu'
elle
reçoit
.

Selon
les
cas
,
elle
fera
en
totalité
ou
en
partie
:
•
Récupérer
les
contenus
de
$_GET
,
$_POST
,
$_SESSION
à
Mettre
à
jour
$_SESSION
à
Inclure
des
fichiers
:
header
,
footer
,
connexion
à
la
Bd
,
etc
.

à
Gérer
les
donnée
de
la
Bd
:
INSERT
,
UPDATE
,
DELETE
et
du
SELECT
associés
si
nécessaire
.

à
La
construction
de
la
page
HTML
à
afficher
(
et
les
SELECT
associés
si
nécessaire
)
Défauts
de
l'
organisation
non-MVC
•
Tout
est
mélangé
:
le
SQL
,
le
Php
et
le
HTML
,
surtout
si
on
ne
sépare
pas
Php
et
HTML
.

à
Les
page
peuvent
devenir
très
grosses
.

à
La
maintenance
n'
est
pas
facile
.

•
Travail
à
plusieurs
est
rendu
difficile
.

php
–
MySQL
à
MVC
-
page
22/34
Présentation
du
MVC
MVC
:
Modèle
-
Vue
-
Contrôleur
.

L'
architecture
MVC
sépare
la
logique
du
code
en
trois
parties
,
trois
ensembles
de
fichiers
:
à
le
modèle
(
qui
correspond
au
SQL
)
à
la
vue
(
qui
correspond
au
HTML
)
à
le
contrôleur
(
qui
correspond
au
Php
faisant
le
lien
entre
les
deux
précédent
)
.

Cela
rend
le
code
plus
facile
à
mettre
à
jour
et
permet
de
organiser
le
travail
en
3
parties
et
donc
de
travailler
en
parallèle
.

L'
architecture
MVC
est
une
bonne
pratique
de
programmation
.

La
connaissance
de
l'
architecture
MVC
rend
capable
de
créer
un
site
web
de
qualité
et
facile
à
maintenir
.

En
pratique
,
les
architectures
MVC
mises
en
œuvre
s'
appuient
sur
la
théorie
mais
l'
adaptent
de
façon
pragmatique
.

Il
y
a
donc
plusieurs
façons
de
mettre
en
œuvre
le
MVC
.

Les
principaux
framework
sont
développés
en
MVC
:
CodeIgniter
,
Cakephp
,
Symfony
,
Jelix
,
Zend
Framework
,
etc
.

Le
Modèle
(
SQL
)
Le
modèle
gère
les
données
du
site
.

Essentiellement
les
accès
à
la
Bd
.

mais
aussi
la
gestion
de
fichiers
.

Il
propose
des
fonctions
pour
faire
des
Insert
,
du
Update
,
du
Delete
,
du
Select
.

Ces
fonctions
peuvent
renvoyer
des
tableaux
de
données
.

Les
résultats
seront
exploités
par
le
contrôleur
mais
aussi
par
le
HTML
.

C'
est
une
page
pur
Php
.

L'
idée
générale
est
que
dans
une
application
,
la
base
de
données
est
centrale
.

si
la
Bd
est
bien
conçue
,
l'
application
sera
facile
à
maintenir
et
à
faire
évoluer
.

si
la
Bd
est
mal
conçue
,
l'
application
sera
complexe
à
maintenir
.

La
vue
(
HTML
)
La
vue
affiche
la
page
HTML
.

Elles
récupèrent
des
variables
du
Contrôleur
et/ou
du
Modèle
pour
savoir
ce
qu'
elles
doivent
afficher
.

C'
est
une
page
HTML
avec
quelques
boucles
et
conditions
Php
très
simples
,
pour
afficher
les
tableaux
de
données
issus
du
Modèle
.

La
vue
contient
le
DOCTYPE
.

mais
elle
ne
peut
fonctionner
qu'
avec
le
contexte
du
contrôleur
.

php
–
MySQL
à
MVC
-
page
23/34
Le
Contrôleur
(
php
)
Le
contrôleur
est
la
page
appelée
(
le
véritable
index
,
autrement
dit
,
le
«
main
»
)
.

Il
fonctionne
en
trois
étapes
:
1
.

Il
utilise
les
fonctions
du
Modèle
(
include
et
appels
au
fonctions
)
.

2
.

Il
analyse
et
traite
les
données
issues
du
Modèle
mais
aussi
celles
passées
en
paramètre
à
l'
appel
de
la
page
(
$_GET
,
$_POST
,
$_SESSION
)
.

Il
détermine
par
exemple
si
le
visiteur
a
le
droit
de
voir
la
page
ou
non
.

3
.

En
fonction
de
ses
calculs
,
il
appelle
la
vue
correspondante
par
un
include
.

C'
est
une
page
pur
Php
.

Le
contrôleur
est
le
«
chef
de
orchestre
»
:
il
récupère
la
demande
de
l'
utilisateur
à
travers
la
vue
(
la
page
HTML
)
par
un
href
,
un
formulaire
ou
un
header
.

Il
échange
des
données
avec
le
modèle
,
fait
les
calculs
(
qui
peuvent
être
complexes
)
pui
choisit
une
vue
à
afficher
en
lui
fournissant
les
variables
.

Le
rôle
du
contrôleur
peut
se
limiter
à
faire
le
lien
entre
le
modèle
et
la
vue
:
de
la
colle
!

Fonctionnement
global
Un
utilisateur
,
à
travers
une
vue
,
fait
appel
à
une
page
:
un
contrôleur
(
par
un
href
ou
un
formulaire
)
.

Le
contrôleur
à
include
à
un
modèle
et
utilise
une
du
fonctions
du
modèle
.

Il
fait
ensuite
du
calculs
.

Selon
les
résultats
,
il
include
une
vue
ou
une
autre
à
afficher
à
l'
utilisateur
.

Et
ainsi
de
suite
.

php
–
MySQL
à
MVC
-
page
24/34
MVC
:
design
pattern
tête
la
première
Car
si
l'
modèle
-
est
essentiel
Et
si
la
vue
-
est
magnifique
je
suis
p’têt
feignant
-
oui
mais
c'
est
fou
Ces
lignes
de
code
-
qui
sont
de
la
colle
Et
c'
code
n'
fait
rien
-
de
vraiment
magique
Il
n'
fait
qu'
transmettre
-
que
du
valeurs
La
colle
,
c'
est
le
contrôleur
.

On
dit
que
le
MCV
est
un
design
pattern
(
Dp
)
.

C'
est
en
réalité
un
assemblage
de
Dp
élémentaires
(
un
par
lettre
)
:
les
dp
à
stratégie
»
,
à
composite
»
et
«
observateur
»
(
les
dp
ont
des
noms
)
.

si
on
code
réellement
ces
dp
,
alors
on
aura
une
mise
à
jour
automatique
du
notifications
(
Dp
observateur
)
.

php
–
MySQL
à
MVC
-
page
25/34
Organisation
du
répertoires
et
du
fichiers
dans
le
MVC
Organisation
de
répertoires
MVC
à
la
racine
du
site
,
on
crée
3
répertoires
:
•
modele
à
vue
•
controleur
Dans
chacun
de
ces
répertoires
,
on
crée
un
sous-répertoire
par
«
module
»
du
site
(
par
exemple
:
forum
,
blog
,
chat
,
admin
,
etc
.
)
.

Les
fichiers
à
modèle
à
Chaque
modèle
est
un
fichier
Php
contenant
un
appel
à
la
Bd
et
qui
renvoie
par
exemple
le
tableau
du
résultats
(
fetchAll()
plutôt
que
fetch()
un
par
un
)
.

Le
fichier
Php
n'
aura
pas
de
balise
fermante
(
?

>
)
:
ça
évite
des
problèmes
!

L'
objet
bdd
sera
déclaré
en
global
pour
ne
pas
avoir
à
refaire
la
connexion
à
chaque
opération
.

Dans
l'
idéal
,
il
faut
utiliser
un
dp
singleton
qui
permet
de
ne
recréer
un
objet
que
si
il
n'
a
pas
déjà
été
créé
.

Dans
chaque
sous-repertoire
de
module
,
on
crée
un
fichier
par
fonction
qui
a
le
nom
de
la
fonction
.

Ainsi
on
fait
un
include
du
fichier
et
un
appel
à
la
fonction
.

Les
fichiers
à
contrôleur
»
Chaque
contrôleur
est
aussi
un
fichier
php
.

Il
inclut
le
modèle
au
début
(
include_once
pour
éviter
de
l'
inclure
plusieurs
foi
)
.

à
la
fin
il
inclura
la
vue
.

Autrement
dit
,
en
réalité
il
contient
tout
le
code
,
mais
on
sépare
le
code
en
3
parties
(
modèle
,
contrôle
,
vue
)
et
chaque
partie
est
dans
son
propre
fichier
.

Le
contrôleur
fait
les
calculs
avant
l'
appel
de
la
vue
.

Quand
on
demande
un
fichier
dans
la
barre
de
adresse
,
c'
est
un
contrôleur
qu'
on
appelle
.

Les
fichiers
à
vue
à
Chaque
vue
est
un
fichier
HTML
qui
fera
un
simple
affichage
du
jeu
de
données
fourni
par
le
contrôleur
.

Il
peut
y
avoir
une
boucle
php
pour
parcourir
les
tableaux
et
du
tests
pour
choisir
ce
qu'
on
veut
afficher
.

Il
y
a
un
fichier
vue
par
page
utilisateur
.

php
–
MySQL
à
MVC
-
page
26/34
Le
font
contrôleur
à
contrôleur
global
=
routeur
à
indexSwitch
Le
problème
Avec
l'
organisation
précédente
,
on
aura
un
«
main
»
par
page
(
par
contrôleur
)
.

Un
problème
majeur
va
être
de
faire
le
lien
entre
les
page
:
en
effet
,
un
href
partira
de
une
page
(
un
contrôleur
)
pour
aller
à
un
autre
page
(
un
autre
contrôleur
)
.

Le
problème
est
que
ça
obligera
à
parcourir
l'
arborescence
du
fichiers
avec
des
href
du
type
:
Href=
«
../admin/pageAdmin.php
»
si
on
a
des
href
dans
un
fichier
«
includé
»
,
il
en
sera
de
même
.

Avec
un
telle
organisation
,
on
risque
souvent
de
avoir
des
problèmes
de
«
routage
»
(
trouver
la
route
pour
une
page
à
ouvrir
)
très
complexe
.

si
on
change
un
peu
la
structure
du
fichiers
ou
du
répertoires
,
ou
simplement
si
on
change
le
nom
de
un
répertoire
,
il
faudra
retrouver
tous
les
href
qui
sont
référence
à
ce
répertoire
pour
les
mettre
à
jour
:
c'
est
long
et
pénible
!

La
solution
:
un
«
front
contrôleur
à
On
se
dotera
de
un
contrôleur
global
qui
permet
l'
entrée
dans
le
site
et
qui
permet
de
choisir
le
contrôleur
à
appeler
donc
la
page
à
afficher
.

C'
est
le
«
front
contrôleur
»
ou
«
routeur
»
.

On
retrouve
le
terme
de
«
routeur
»
dans
les
frameworks
.

Les
autres
contrôleurs
sont
parfois
appelés
backContoller
.

Le
rôle
du
«
front
contrôleur
»
est
de
déterminer
quel
contrôleur
appeler
et
de
faire
des
initialisations
générales
(
connexion
à
la
Bd
,
affichage
de
en-tête
ou
de
pied
de
page
,
etc
.
)
.

Le
fichier
index.html
appellera
le
routeur
avec
une
route
particulière
,
c'
est-à-dire
un
contrôleur
particulier
,
donc
une
page
particulière
à
afficher
.

Ainsi
,
on
va
centraliser
le
problème
du
«
routage
»
:
si
on
change
un
nom
de
répertoire
,
il
ne
faudra
faire
des
modifications
que
dans
le
«
front-contrôleur
»
.

Le
fichier
indexSwitch.html
:
le
routeur
Principes
IndexSwitch
est
le
front
contrôleur
qui
choisit
le
contrôleur
à
exécuter
.

Ce
front
controleur
,
c'
est
ce
qu'
on
appellera
le
«
routeur
»
dans
les
framework
php
.

On
regarde
quel
index
est
setté
pour
savoir
quel
contrôleur
appeler
.

On
teste
sur
$_GET
et
$_POST
car
on
peut
venir
de
un
header
,
de
un
href
ou
de
un
formulaire
.

Exemple
<
?

php
session_start()
;
//On
démarre
la
session
include('modele/connexion_sql.php')
;
//
connexion
à
la
Bd
include
'
vues/entete.php
'
;
//HTML
de
l'
entête
du
site
//
grand
SWITCH
de
accès
au
page
//
du
elseif
if
(
isset($_GET['indexOeuvres'])
OR
isset($_POST['indexOeuvres'])
){
Php
–
MySQL
à
MVC
-
page
27/34
include('controleur/public/'indexOeuvres'.php')
;
}
elseif
(
isset($_GET['indexExpositions'])
OR
isset($_POST['indexExpositions'])
){
include('controleur/public/'indexExpositions'.php')
;
}
//etc
.

empty()
ou
isset()
C'
est
presque
la
même
chose
.

empty()
est
vrai
pour
non
défini
,
=0
ou
=null
.

isset()
est
faux
uniquement
pour
non
défini
.

http://php.net/manual/fr/function.empty.php
Include
entête
et
pied
de
page
On
peut
faire
des
include
de
entête
et
de
pied
de
page
dans
le
front
contrôleur
si
ce
sont
toujours
les
même
pour
toutes
les
page
Déconnexion
Pour
libérer
proprement
la
Bd
.

En
Pdo
,
la
déconnexion
n'
est
pas
utile
si
on
a
fait
des
close
cursor
include('modele/deconnexion_sql.php')
;
//
deconnexion
à
la
Bd
Debug
On
affiche
$_
SESSION
,
POST
et
GET
pour
suivre
ce
qui
se
passe
pour
chaque
page
.

On
n'
a
plus
besoin
du
nom
du
fichier
puisque
c'
est
toujours
le
même
:
celui
du
front
controleur
!

On
peut
mettre
ça
dans
un
test
:
ainsi
,
il
suffit
de
passer
debut
à
0
pour
arrêter
l'
affichage
du
superglogabes
.

$debug=1
;
if($debug==1){
print_r($_SESSION)
;
echo'<br/>
'
;
echo'POST
:
'
;
print_r($_POST)
;
echo'<br/>
'
;
echo'GET
:
'
;
print_r($_GET)
;
echo'<br/>
'
;
}
Variante
sans
switch
:
beaucoup
plus
courte
!

Le
$_GET
ou
le
$_POST
qui
arrive
dans
le
front
controleur
pourrait
contenir
le
nom
du
contrôleur
qu'
on
veut
appeler
(
avec
son
chemin).Par
exemple
:
«
public/œuvres.php
»
.

ou
encore
à
admin/œuvres.php
»
.

à
partir
de
là
,
le
front
controleur
vérifie
que
$_GET
ou
$_POST
sont
setté
et
que
le
fichier
correspondant
au
controleur
qu'
on
veut
appeler
existe
(
is_file()
)
.

si
c'
est
le
cas
,
on
peut
faire
un
include
du
controleur
back
.

Sinon
,
on
revient
à
la
page
de
accueil
.

Ainsi
on
n'
a
plus
besoin
de
swich
!

...
//On
inclut
le
contrôleur
si
il
existe
et
si
il
est
spécifié
if
(
!

empty($_GET['page'])
&&
is_file('controleurs/'.$_GET['page'].'.php'))
Php
–
MySQL
à
MVC
-
page
28/34
include
'
controleurs/'.$_GET['page'].'.php
'
;
else
include
'
controleurs/accueil.php
'
;
//
controleur
accueil
...
Le
fichier
index.html
Le
fichier
index.html
appelle
avec
une
fonction
header()
le
front
contrôleur
:
ici
le
fichier
indexSwitch
.

On
passe
un
paramètre
à
l'
URL
:
par
exemple
,
indexOeuvres
:
se
sera
la
page
de
accueil
du
site
.

On
donne
n'
importe
quelle
valeur
au
paramètre
.

On
ne
fera
que
tester
si
il
est
setté
.

<
?

php
//
on
appelle
indexSwith
en
settant
indexArticle
avec
n'
importe
quel
valeur
header('location
:
indexSwitch.php
?

indexOeuvre=set
'
)
;
?

>
php
–
MySQL
à
MVC
-
page
29/34
MVC
–
Exemple
7
:
le
Site
Artiste
V1-MVC
-
affichage
du
œuvres
-
Testez
l'
exemple
Organisation
du
dossiers
et
du
fichiers
L'
organisation
MVC
est
la
suivante
:
Php
–
MySQL
à
MVC
-
page
30/34
TP
Site
Artiste
MVC
TP-MVC-V2
:
Site
Artiste
V2
–
MVC
:
affichage
de
toutes
les
tables
à
partir
du
SiteArtisteV1-MVC-base
,
faite
une
V2
qui
prenne
en
compte
la
gestion
du
expositions
et
celle
du
œuvres
exposées
.

L'
étape
2
MVC
suit
la
même
logique
que
l'
étape
2
non-MVC
.

TP-MVC-V3
:
Site
Artiste
V3
–
MVC
:
administration
du
œuvres
Ajoutez
la
possibilité
de
se
connecter
comme
administrateur
:
entrée
dans
le
back-office
.

L'
administrateur
peut
se
déconnecter
pour
retourner
au
site
public
.

L'
entrée
dans
l'
administration
se
fera
sur
la
page
de
administration
du
œuvres
.

Elle
affichera
la
liste
du
œuvres
dans
un
tableau
et
permettra
pour
chaque
œuvre
de
la
consulter
en
détail
,
de
la
modifier
ou
de
la
supprimer
.

La
page
de
administration
du
œuvres
pourra
ressembler
à
ceci
:
Pour
charger
des
image
,
il
faudra
utiliser
la
superglobal
$_FILE
.

php
–
MySQL
à
MVC
-
page
31/34
Connexion
comme
administrateur
Pour
se
connecter
comme
administrateur
,
il
faudra
créer
un
formulaire
par
exemple
comme
ceci
(
dans
chaque
page
de
la
partie
publique
)
:
Vérifier
le
login
Ø
Objectif
dans
un
premier
temps
On
vérifie
de
mot
de
passe
.

En
cas
de
erreur
,
on
affiche
une
page
de
erreur
.

En
cas
de
réussite
,
on
affiche
la
page
de
administration
du
œuvres
.

On
gère
la
déconnexion
.

Ø
Objectif
dans
un
second
temps
On
prendra
aussi
en
compte
la
possibilité
de
modifier
,
consulter
,
supprimer
les
œuvres
.

à
Vérification
du
login
à
mot-de-passe
if(isset($_POST['admin'])
AND
htmlspecialchars($_POST['admin'])==
'
admin
'
AND
isset($_POST['password'])
AND
htmlspecialchars($_POST['password'])=='admin'){
$_SESSION['admin
'
]
=
$_POST['admin
'
]
;
}
Dans
le
contrôleur
de
administration
,
on
vérifie
au
début
si
on
a
bien
reçu
le
bon
login
à
motDePasse
.

On
vérifie
que
les
deux
champs
sont
settés
et
que
ils
contiennent
,
par
exemple
à
admin
»
et
«
admin
»
.

php
–
MySQL
à
MVC
-
page
32/34
si
c'
est
le
cas
,
on
enregistre
la
valeur
de
$_SESSION[‘admin
’
]
.

On
commence
donc
par
faire
un
session_start()
en
début
de
page
.

à
Affichage
de
la
bonne
vue
Selon
que
le
$_SESSION['admin
'
]
)
est
setté
ou
pas
,
on
choisit
la
vue
à
afficher
.

//
si
on
n'
a
pas
les
droits
de
administration
if
(
!

isset($_SESSION['admin']))
{
include('vue/admin/vueInterdiction.php')
;
à
else
{
include('vue/admin/vueAdminOeuvres.php')
;
}
Ø
Gestion
de
la
déconnexion
Quand
on
se
déconnecte
,
on
passera
un
$_POST['deconnexion
'
]
à
la
page
de
retour
:
en
l'
occurrence
celle
du
œuvres
.

de
là
,
dans
la
page
du
œuvres
,
on
teste
si
$_POST['deconnexion
'
]
est
setté
(
on
vient
du
bouton
déconnexion
)
.

si
c'
est
le
cas
,
on
unset
$_SESSION['admin
'
]
Ø
page
de
erreur
On
crée
une
nouvelle
vue
pour
gérer
l'
erreur
si
l'
admin
n'
a
pas
le
mot
de
passe
.

La
vue
garde
le
header
du
utilisateurs
publics
:
on
peut
retourner
sur
les
œuvres
et
les
expositions
.

php
–
MySQL
à
MVC
-
page
33/34
TP-MVC-V4
:
Site
Artiste
V4
–
MVC
:
administration
du
du
expositions
Une
foi
connecté
en
tant
que
administrateur
,
on
peut
aussi
administrer
les
expositions
:
ajouter
,
supprimer
ou
modifier
.

Quand
on
ajoute
une
exposition
,
il
faut
pouvoir
préciser
la
liste
du
œuvres
exposées
.

Quand
on
supprime
une
exposition
,
il
faut
supprimer
aussi
toutes
les
œuvres
exposées
.

Quand
on
modifie
une
exposition
,
il
faut
pouvoir
ajouter
ou
supprimer
des
œuvres
et
aussi
modifier
le
prix
du
œuvres
dans
l'
exposition
.

Quand
l'
utilisateur
sera
connecté
comme
administrateur
,
on
fera
en
sorte
que
il
reste
connecté
où
que
il
aille
,
sauf
si
il
se
déconnecte
.

php
–
MySQL
à
MVC
-
page
34/34

