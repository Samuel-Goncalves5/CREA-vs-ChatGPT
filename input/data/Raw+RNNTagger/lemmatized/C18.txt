php
(
ET
MYSQL
)
Introduction
à
HTML
:
page
destinées
à
être
publiées
sur
Internet
Texte
à
afficher
p
instructions
de
mise
en
page
à
Pas
de
instructions
de
calcul
ou
de
traitements
conditionnels
à

du
sites
de
plus
en
plus
riches
en
informations
Nécessité
croissante
de
améliorer
le
contenu
du
sites

Mises
à
jour
manuelles
trop
complexes
à


à
Exemple
:
modifier
l'
entête
sur
plusieurs
page
!

Besoin
de
réponses
spécifiques
liées
à
un
bd
par
exemple
Passage
de
sites
statiques
à
des
sites
dynamiques
Web
dynamique
à
coté
client
à
Traité
par
le
navigateur
:

Résultats
variables
en
fonction
du
navigateur
à
Nécessité
de
tests
importants
à
Indépendant
à
Pas

du
serveur
de
rechargement
de
la
page
,
tout
est
fait
en
local
Confiance
:

Sources
du
programme
disponibles
à
Données
envoyées
au
serveur
pas
fiables

base
de
données
stockée
chez
le
client
?

Web
dynamique
à
coté
serveur
à
L'
interprétation
est
réalisée
par
le
serveur
:

Indépendant
de
la
machine
et
du
navigateur

"
Compatible
"
avec
tous
les
navigateurs
à
Les

Les

échanges
ne
concernent
que
du
HTML
(
ou
Json
ou
autre
)
sources
sont
sur
le
serveur
donc
invisibles
Besoin
de
échanges
entre
le
navigateur
et
le
serveur
à
Rechargement

ou
Ajax
…
de
la
page
à
chaque
modification
Web
dynamique
à
client
ou
serveur

Il
faut
les
deux
!


Script
côté
client
(
Javascript
)
:
Calculs
et
traitement
simples
à
mise
à
jour
de
la
page
web
sans
rechargement
(
ajax
)


Script
côté
serveur
(
Php
ou
autre
)
:
Calculs
,
traitements
plus
conséquents

Requêtes
vers
une
base
de
données
à
Opérations
sécurisées
à
Le
langage
Php
-
histoire



Php
:
Hypertext
PreProcessor
La
première
version
de
Php
(
Personal
Home
Pages
)
sort
en
1995
La
version
5.0
actuelle
est
sortie
en
2004
:
à
la

version
4.0
n'
est
plus
maintenue
depuis
août
2008
.

Environ
75
%
du
sites
web
dynamiques
utilisent
php
.

Le
langage
Php


Langage
pour
la
création
de
applications
Web
Exécution
coté
serveur

Indépendant
de
la
plate-forme
utilisée
à
Facile
à
combiner
avec
un
serveur
Web
et
une
Bd
à
Logiciels



tout
en
un
(
WampServer
,
EasyPhp
,
…
)
.

Gratuit
,
code
source
disponible
Ecriture
de
scripts
simples
Inclusion
directe
de
Php
dans
du
HTML
Le
langage
Php
à
Programme
s'
exécutant
côté
serveur
Web
à
Extension
.php
pour
les
page
Php
à
Fichiers
pouvant
aussi
contenir
du
HTML
à
Les
fichiers
.php
sont
stockés
sur
le
serveur
à
Désignés
par
une
URL
:
http://www.lip6.fr/page.php
à
Le
chargement
de
l'
URL
provoque
l'
exécution
côté
serveur
à
Le
script
Php
va
généralement
créer
du
HTML
Exemple

On
veut
créer
la
page
web
ci-dessous

Pour
un
nombre
quelconque
de
valeurs
(
venant
de
un
formulaire
par
exemple
)
.

<html>
<body>
1
:
1
<br
/>
2
:
4
<br
/>
3
:
9
<br
/>
</body>
</html>
Version
Javascript

Insertion
de
javascript
avec
la
balise
<script>
Boucle
for
classique

Affichage
du
contenu
via
document.write
à
Concaténation
de
chaînes
avec
le
signe
p


Exécuté
par
le
navigateur
<html>
<body>
<script
type="text/javascript">
for(var
i=1
;
i<=3
;
iu
)
document.write(i+
"
:
"
+i*i+"<br
/>
"
)
;
</script>
</body>
</html>
Version
Php

Insertion
de
Php
avec
la
balise
<
?

php
Boucle
for
classique
à
Affichage
du
contenu
via
echo
à
Concaténation
de
chaînes
avec
le
signe


Exécuté
par
le
serveur
pui
envoyé
au
navigateur
<html>
<body>
<
?

php
for
(
$i=1
;
$i<=3
;
çiu
)
echo
$i
.
"

:
"
.($i*$i)."<br
/>
"
;
?

à
</body>
</html>
Différence
entre
Javascript
et
Php

Javascript
:
Le
navigateur
demande
le
fichier
html
à
Le
fichier
html
(
contenant
du
javascript
)
est
envoyé
à
Le
navigateur
exécute
le
javascript
à
L'
affichage
est
fait
de
manière
dynamique

à
Php
:
Le
navigateur
demande
le
fichier
php
à
Le
serveur
exécute
le
code
php
et
envoie
le
résultat
à
La
page
envoyée
au
navigateur
est
affichée
à
Code
Php
à
autre
version
à
Seules
les
parties
purement
dynamiques
sont
faites
en
Php
Tout
le
reste
est
du
html
de
base
à
Pas
forcément
très
lisible
à
<html>
<body>
<
?

php
for
(
$i=1
;
$i<=3
;
çiu
)
{
?

>
<
?

php
echo
çi
?

>
:
<
?

php
echo
$i*$i
;
?

><br
/>
<
?

php
}
?

à
</body>
</html>
Code
Php
à
autre
version
à
Tout
le
fichier
html
est
créé
en
Php
:
à
Syntaxe
assez
lourde
<
?

php
echo
"
<html>\n
"
;
echo
"
<body>\n
"
;
for
(
$i=1
;
$i<=3
;
çiu
)
à
echo
$i
.
"

:
"
.($i*$i)."<br
/>\n
"
;
}
echo
"
</body>\n
"
;
echo
"
</html>\n
"
;
?

à
php
-
SYNTAXE
VARIABLES
Variables
à
Une
variable
est
toujours
précédée
de
$

à
Types
:


$i
est
une
variable
qui
s'
appelle
i
Entiers
,
réels
,
chaînes
de
caractères
,
objets
Pas
de
déclaration
explicite
,
l'
affectation
de
une
valeur
suffit


Affectation
par
valeur
:
$i=0
Affectation
par
(
référence
)
variable
:
$j
=
ççi


Changement
de
type
automatique
:

à
la
modification
de
çi
modifie
$j
(
comme
les
pointeurs
en
C
)
$compteur="premier
"
;
Valeur
par
défaut
avant
l'
affectation
à
Attention
si
on
essaye
de
lire
son
contenu
!

Variables
à
Variable
locale


Visible
uniquement
à
l'
intérieur
de
un
contexte
de
utilisation
Variable
globale


Visible
dans
tout
le
script
Utilisation
de
l'
instruction
"
global
"
pour
accéder
à
une
variable
globale
dans
des
contextes
locaux
$var
à
1
;
function
test(){
global
$var
;
echo
$var
;
}
Chaînes
de
caractères
à
Création/affectation
entre
guillemets


Concaténation
avec
le
signe
.



$test="a
"
;
$test="bonjour
"
.

"
au
revoir
"
;
Substitutions
possible
de
variables
à
l'
intérieur
de
une
chaîne
:


"
x
$test
x
"
est
similaire
à
"
x
"
.$test
.
"

x
"
pas
de
substitution
avec
des
apostrophes
à

'
x
$test
x
'
;
//
"
x
$test
x
"
Encodages
du
caractères
spéciaux
obligatoire
:

çù
çù
\n
\t
\
"
…
Création
de
variables
dynamiques
à
Possibilité
de
créer
une
variable
dynamique
:

Création
à
partir
du
contenu
de
une
autre
variable
.

$var="test
"
;
$$var="test2
"
;
//
similaire
à
$test="test2
"
;
echo
"
$var
$test
${$var
}
"
;
//
affiche
"
test
test2
test2
"
//
similaire
avec
des
tableaux
$nom_variable
=
array("val0
"
,
"
val1
"
)
;
${$nom_variable[0
]
}
=
"
x
"
;
Opérations
sur
les
chaînes
à
Longueur
de
une
chaîne
strlen

strlen($str)

Comparaison
==

$x

==
$y
Concaténation
.


$x.$y

Nombreuses
fonctions
de
manipulation
disponibles
Fonctions
sur
les
chaînes
à
Afficher
une
chaîne
de
caractères
:

à
Retourner
un
morceau
de
un
chaîne
:
substr($chaine
,
$debut
,
$longueur
)



$debut
peut
être
négatif
:
en
partant
de
la
fin
$longueur
est
facultatif
:
toute
la
fin
de
la
chaîne
est
retournée
Couper
une
chaîne
en
morceaux
avec
un
délimiteur
:

à
echo
$chaine
;
…
$tableau
=
explode($delimiteur
,
$chaine
)
;
INSTRUCTIONS
Instructions
conditionnelles
à
if
then
else
à
définition
spéciale
pour
le
else
if
(
pas
obligatoire
)
if
(
cond
)
{
...
}
elseif
(
cond
)
{
...
à
else
{
...
}
//
version
courte
:
(
condition
)
?

instructionSiVrai:instructionSiFaux
;
Instructions
conditionnelles
à
switch
(
…
)
à
case
…
:
…
;
}
switch
(
expression
)
à
case
"
1
"
:
...
;
break
;
case
"
2
"
:
...
;
break
;
case
"
3
"
:
...
;
break
;
default
:
...
}
Boucles
à
Boucles
for
:
à
for

(
initialisation
;
condition
;
increment
)
{
...
à
Boucles
while
:

while
(
condition
)
{
...
}

do
{
...
}
while
(
condition
)
;
Instructions
conditionnelles
à
Saut
inconditionnel


Arrêt
inconditionnel
à
à
continue
:
termine
l'
itération
courante
de
la
boucle
break
:
termine
la
boucle
complètement
Arrêt
de
exécution
du
script
à
exit
:
termine
le
script
for
(
$i=1
;
$i<=10
;
çiu
)
à
if
(
çi
çù
5
)
continue
;
echo
$i."<br
/>
"
;
}
for
(
$i=1
;
$i<=10
;
çiu
)
à
if
(
çi
çù
5
)
break
;
echo
$i."<br
/>
"
;
}
//
affiche
les
valeurs
sauf
5
//
affiche
jusque
à
5
(
exclu
)
TABLEAUX
Les
tableaux
à
Création
à
l'
aide
de
la
fonction
array()

$tableau

=
array(1
,
"
deux
"
,
3
)
;
Tableaux
à
une
dimension
à
Les
éléments
peuvent
être
de
différents
types
à
L'
index
de
un
tableau
commence
à
0

Fonction
:

count()
pour
avoir
le
nombre
de
éléments
de
un
tableau
Tableaux
simples
à
Association
numéro
-
valeur
//
Création
du
tableau
$tableau
=
array(valeur0
,
valeur1
,
...
,
valeurN
)
;
//
Affectation
de
un
élément
$tableau[indice
]
à
valeur
;
//
Récupération
de
un
élément
$variable
=
$tableau[indice
]
;
//
Parcours
version
1
for
(
$i=0
;
$i<count($tableau)
;
çiu
)
echo
$i
.
"

"
.$tableau[$i]."<br
/>
"
;
//
Parcours
version
2
foreach($tableau
as
$valeur
)
echo
$valeur."<br
/>
"
;
Tableaux
associatifs
à
Associations
clé
de
index
-
valeur
//
Création
du
tableau
$tableau
=
array(cle0
=>
val0
,
cle1
=>
val1
,
...
,
cleN
=>
valN
)
;
//
Affectation
de
un
élément
$tableau["cle
"
]
=
valeur
;
//
Récupération
de
un
élément
$variable
=
$tableau["cle
"
]
;
//
Parcours
version
1
foreach($tableau
as
$cle
=>
$valeur
)
echo
$cle
.
"

"
.$valeur."<br
/>
;
//
Parcours
version
2
reset($tableau)
;
while
(
list($cle
,
$valeur
)
=
each($tableau))
echo
$cle
.
"

"
.$valeur."<br
/>
;
Tableaux
multidimensionnels
à
Pas
de
méthode
de
création
native
:

On
imbrique
des
tableaux
.

//
Création
de
un
tableau
à
deux
dimensions
$tab1
=
array(Val0
,
Val1
,
...
,
ValN
)
;
$tab2
=
array(Val0
,
Val1
,
...
,
ValN
)
;
$tableau
=
array($tab1
,
$tab2
)
;
//
Affectation
de
un
élément
$tableau[indice][indice
]
=
$variable
;
//
Récupération
de
un
élément
$variable
=
$tableau[indice][indice
]
;
//
Parcours
for
(
$i=0
;
$i<count($tableau)
;
$i++
)
for
(
$j=0
;
$j<count($tableau[$i])
;
$j++
)
echo
$i
.
"

"
.$j
.
"

"
.$tableau[$i][$j]."<br
/>
"
;
Fonctions
sur
les
tableaux
à
Taille
de
un
tableau
:

à
Compter
le
nombre
de
occurrences
du
valeurs
de
un
tableau
:



$tab2
=
array_map("fonction
"
,
$tab
)
;
Filtrage
par
une
fonction
(
supprime
les
éléments
ne
vérifiant
pas
le
critère
)
:


sort($tab)
;
//
selon
les
valeurs
ksort($tab)
;
//
selon
les
clefs
Mappage
par
une
fonction
(
applique
la
fonction
à
tous
les
éléments
)
:


$tab2
=
array_count_values($tab)
;
Tri
:


count()
$tab2
=
array_filter($tab
,
"
fonction
"
)
Intervertir
les
clefs
et
valeurs
:
à
$tab2
=
array_flip($tab)
;
FONCTIONS
Fonctions
à
Pas
de
typage
Arguments
à
Valeur
de
retour

à
Récursivité
possible
<
?

php
//
définition
de
la
fonction
factorielle
function
factorielle($n)
à
if
(
$n<2
)
return
1
;
else
return
$n*factorielle($n-1)
;
}
//
appel
de
la
fonction
et
afficahage
du
résultat
echo
factorielle(3)
;
?

>
Fonctions
à
Valeurs
par
défaut
possibles
pour
les
arguments
à


à
Tous
les
arguments
peuvent
avoir
des
valeurs
par
défaut
function
racine($x
,
$racine=2
)
{
}
Appel
:
racine($a
,
bb
)
ou
racine($a)
Valeurs
par
défaut
uniquement
pour
les
derniers
arguments
à
racine($x=4,$degre)
impossible
//
si
un
seul
argument
alors
$degre
vaut
2
par
défaut
function
racine($x,$degre=2){
return
pow($x,1/$degre)
;
}
racine(27,3)
;
//
retourne
la
racine
cubique
de
27
racine(16)
;
//
retourne
la
racine
carrée
de
16
Fonctions
à
Nombre
de
arguments
inconnu
:

func_num_args()
:
nombre
de
arguments
à
func_get_arg($i)
:
argument
i.

Numérotés
à
partir
de
0
//
fonction
calculant
le
produit
de
tous
les
arguments
function
produit()
à
$prod=1
;
for
(
$i=0
;
çi
<
func_num_args()
;
$i++
)
$prod
*=
func_get_arg($i)
;
return
$prod
;
}
echo
produit(3
,
77
,
10
,
5
,
81
,
9
)
;
Fonctions
à
passage
de
paramètres
par
valeur
:


Utilise
une
copie
du
paramètres
de
appel
.

passage
de
paramètre
par
référence
:


Utilise
directement
les
paramètres
de
appel
(
donc
modifiable
)
.

passage
de
paramètre
avec
&
function
double($val)
à
$val
*=
2
;
return
$val
;
}
$x
=
10
;
çy
=
double($x)
;
//
y=20
x=10
çy
=
double(&$x)
;
//
y=20
x=20
Variables
globales
et
statiques

Static
permet
de
conserver
une
variable
dans
une
fonction
$v
=
2
;
function
test
(
)
{
global
$v
;
//
variable
globale
static
$x=0
;
//
variable
statique
$x+=$v
;
echo
$x."<br
/>
"
;
}
test()
;
//
affiche
2
test()
;
//
affiche
4
Appel
dynamique
à
Similaire
au
variables
dynamiques
function
bonjour(){
echo
"
bonjour<br
/>
"
;
}
function
bonsoir
çùë
echo
"
bonsoir<br
/>
"
;
}
//
création
de
un
variable
contenant
le
nom
de
une
fonction
$salut
=
(
date("h")
çù
17
)
?

"
bonjour":"bonsoir
"
;
$salut()
;
Fonctions
de
fonctions
à
Vérifie
l'
existence
de
une
fonction
:

à
Retourne
la
liste
du
fonctions
définies
:


$tableau
=
get_defined_functions()
;
Enregistre
une
fonction
à
exécuter
à
la
fin
du
script
:


function_exists("fonction")
;
register_shutdown_function("fonction")
;
…
Fonctions
utiles
à
Header
:

Permet
de
modifier
l'
entête
du
protocole
http
à
Utilisation
principale
:
redirection
vers
une
autre
page
if
(isConnected($user))
{
header("Location
:
accueil.php
"
)
;
}
else
à
header("Location
:
login.php
"
)
;
}
LES
FORMULAIRES
Exploitation
de
un
formulaire





Accès
à
la
page
du
formulaire
Remplissage/modification
du
champs
Envoi
du
formulaire(submit)
Récupération
du
formulaire
soumis
Traitement
du
formulaire
Calculs
à
Transformations
à
Accès
au
bd
…

à
Client
Envoi
de
la
réponse
au
client
Serveur
Récupération
du
paramètres

Les
paramètres
sont
récupérés
dans
un
tableau
:
à
$_POST["nom
"
]
si
la
méthode
de
envoi
est
POST
à
$_GET["nom
"
]
si
la
méthode
de
envoi
est
GET
à
<form
method="POST
"
action="…">
à
Exemple

Dans
le
formulaire
<input
name="nom
"
>

On
récupère
le
contenu
en
php
avec
:

$_POST["nom
"
]
à
$_GET["nom
"
]
Pour
continuer
à
Le
plus
simple
pour
comprendre
:
à
Utiliser
la
méthode
GET
pour
passer
les
arguments
à
Regarder
l'
URL
appelée
à
http://www.test.com/test.php
?

champ=valeur
à
Les
différents
paramètres
envoyés
et
leur
valeur
sont
visibles
à
Ici
$_GET["champ
"
]
vaut
valeur
à
pui
à
utiliser
POST
une
foi
qu'
on
a
compris
Spécificités
selon
les
types
:
à
les
cases
à
cocher
sont
envoyées
sous
forme
de
tableau
Un
exemple
<form
method="GET
"
action="test.php">
<input
type="text
"
name="Champ1
"
value="Texte
"
/><br
/>
<textarea
name="Champ2
"
cols="30
"
rows="5">Texte</textarea>
<br
/>
<select
name="Champ3">
<option
value="Option_1">Option_1</option>
<option
value="Option_2
"
selected="selected">Option_2</option>
</select><br
/>
<input
type="checkbox
"
name="Champ4[
]
"
value="Case_1
"
checked="checked">
Case
1<br>
<input
type="checkbox
"
name="Champ4[
]
"
value="Case_2
"
checked="checked">
Case
2<br>
<input
type="radio
"
name="Champ5
"
value="Case_1">
radio
1<br>
<input
type="radio
"
name="Champ5
"
value="Case_2">
radio
2<br>
<input
type="radio
"
name="Champ5
"
value="Case_3">
radio
3<br>
<input
type="submit
"
name="Soumission
"
value="Soumettre">
</form>
test.php
?

Champ1=Texte&Champ2=Texte&Champ3=Option_2&Champ4[]=Case_1&Champ4[]=Case_2&Champ
5=Case_2&Soumission=Soumettre
Un
exemple
à
Récupération
avec
$_GET

Vérification
de
l'
existence
de
une
variable
:


isset(var)
Attention
au
contenu
du
choses
reçues

Nombreuses
failles
si
on
ne
fait
pas
attention
!

//
affichage
de
tous
les
champs
reçus
via
le
formulaire
$resultat
=
$_GET["Champ1"]."<br>
"
;
$resultat
.=
$_GET["Champ2"]."<br>
"
;
$resultat
.=
$_GET["Champ3"]."<br>
"
;
for
(
çi
=
0
;
çi
<
count($_GET["Champ4"])
;
çiu
)
{
$resultat
.=
$_GET["Champ4"][$i]."<br>
"
;
}
if
(isset($_GET["Champ5"]))
$resultat
.=
$_GET["Champ5"]."<br>
"
;
echo
$resultat
;
FONCTIONNALITÉS
SUPPLÉMENTAIRES
Date
et
heure
à
Retourner
la
date
courante
dans
une
chaîne
de
caractères
:
$chaine
=
date(format
[
,
nombre
]
)
;

$chaine=date("Y/m/d")
;
retourne
2010/03/10


idem
pour
un
tableau
associatif
:


$tableau
=
getdate([nombre])
;
Vérification
de
la
validité
de
une
date
:

checkdate(mois
,
jour
,
année
)
;
Les
cookies
à
Écrire
des
cookies
:
à
fonction
setcookie("PremierCookie
"
,
"
Salut
"
,
time()+3600*24*7)
;




timestamp
en
secondes
(
différent
de
Javascript
)
à
exécuter
avant
tout
autre
envoi
vers
le
serveur
(
envoyé
dans
l'
entête
)
cookie
non
visible
avant
le
prochain
chargement
de
une
page
Lecture
:

(
$_COOKIE["PremierCookie
"
]
setcookie
(
"
PremierCookie
"
,
"
Salut
"
,
time()
+3600*24*7
)
;
if
(
!

isset($_COOKIE["PremierCookie"]))
à
echo
"
cookie
non
défini<br
/>
"
;
}
else
à
echo
$_COOKIE["PremierCookie"]."<br
/>
"
;
}
Les
sessions
à
Objectif
:
garder
des
données
de
page
en
page
.

à
session_start()



à
Crée
une
nouvelle
session
ou
ravive
une
session
déjà
existante
$_SESSION["nom"]=valeur
permet
de
créer
une
variable
de
session
session_destroy()
détruit
la
session
en
cours
session_start()
;
$_SESSION["ma_variable"]=12
;
Sessions
–
exemple
<html>
<body>
<form
method="post
"
action="test.php">
<table
border="0">
<tr>
<td>Nom
:</td>
<td><input
type="text
"
name="Nom
"
size="20
"
value="x"></td></tr>
<tr>
<td>Prénom
:</td>
<td><input
type="text
"
name="Prenom
"
size="20
"
value="y"></td></tr>
<tr>
<td>eMail
:</td>
<td><input
type="text
"
name="Email
"
size="20
"
value="z"></td></tr>
<tr>
<td
colspan="2"><input
type="submit
"
name="soumettre
"
value="Envoyer"></td>
</tr>
</table>
</form>
</body>
</html>
Sessions
à
exemple
"
test.php
"
<
?

php
session_start()
;
$_SESSION["nom
"
]
=
$_POST["Nom
"
]
;
$_SESSION["prenom
"
]
=
$_POST["Prenom
"
]
;
$_SESSION["email
"
]
=
$_POST["Email
"
]
;
?

à
Sessions
à
exemple
"
session.php
"
<html>
<body>
<
?

php
session_start()
;
echo
"
Identifiant
:".session_id()."<br
/>
"
;
echo
"
Nom
de
la
session
:".session_name()."<br
/>
"
;
echo
"
Nom
:
"
.$_SESSION["nom"]."<br>
"
;
echo
"
Prénom
:
"
.$_SESSION["prenom"]."<br>
"
;
echo
"
Mail
:
"
.$_SESSION["email"]."<br>
"
;
session_destroy()
;
?

à
</body>
</html>
Envoyer
des
emails
à
La
fonction
mail
:
mail($recipient
,
$subject
,
$message[
,
$headers
,
$params
]
)
;

Nécessite
un
serveur
mail
accessible
sur
le
serveur

<
?

php
$dest
=
"
moi
<moi@moi.com>
,
Toi
<toi@toi.com
"
;
$subject
=
"
Test
"
;
$content
=
"
Bonjour,\n
"
;
$content
.=
"
Ceci
est
un
message
de
test\n
"
;
$content
.=
"
moi
"
;
$headers
=
"
From
:
moi
<moi@moi.com>\n
"
;
$headers
.=
"
Content-Type
:
text/html
;
charset=iso-8859-1\n
"
;
$headers
.=
"
Cc
:
lui@lui.com\n
"
;
mail($dest
,
$subject
,
$content
,
$headers
)
;
?

à
Créer
autre
chose
que
du
HTML
à
Php
peut
créer
autre
chose
que
du
HTML

Images
:

grand
choix
de
formats
,
comme
Gif
,
PNG
,
Jpeg
,
Wbmp
à
Fichiers
pdf
(
librairie
tcpdf
)
,
csv
,
word
,
excel
,
à
à
Aucune
limitation
,
il
suffit
de
savoir
comment
modifier
l'
entête
(
header
)
pui
afficher
le
contenu
…

<
?

php
header("Content-type
:
image/png
"
)
;
$im
=
imagecreatefrompng("test.png")
;
$im
=
imagerotate($im
,
90
,
0
)
;
imagepng($im)
;
?

à
php
ET
MYSQL
Bases
de
données
à
Présentation
:
HTML
,
Javascript

Navigateur
:
Ie
,
Firefox
,
Chrome
,
…


Traitements
/
création
de
la
page
:
Php
,
Asp
,
Jsp
,
servlet
,
Cgi
,
…

Serveur
Web
Apache
,
Iis
,
…


Données
:
Tables
SQL
à
Serveur
Bd
Access
,
Oracle
,
MySQL
,
PostGreSQL
,
…

Bases
de
données
à
Php
permet
de
travailler
nativement
avec
la
plupart
du
SGBDR



Trois
fonctions
sont
essentielles
:




Mysql
,
Oracle
,
Sybase
,
Microsoft
SQL
Server
,
PostgreSQL
,
…
Dans
les
autres
cas
on
peut
utiliser
des
drivers
spécifiques
Connexion
au
serveur
Exécution
de
la
requête
SQL
Gestion
du
résultats
On
va
voir
le
fonctionnement
avec
les
"
php
Data
Objects
"
:

Indépendant
(
partiellement
)
du
Sgbd
utilisé
.

MySQL
et
Php
–
connexion
à
Connexion
=
création
de
un
objet
Pdo
:




Adresse
de
la
base
et
nom
de
la
table
Nom
de
utilisateur
Mot
de
passe
Déconnexion
:
destruction
de
l'
objet
try
{
//
ouverture
de
la
connexion
$dbh
=
new
PDO('mysql:host=127.0.0.1
;
port=3306
;
dbname=test
'
,
'
root
'
,
'
'
)
;
...
//
fermeture
de
la
connexion
$dbh
=
null
;
}
catch
(
Exception
$e
)
{
die('Erreur
:
'
.

$e->getMessage())
;
}
MySQL
et
Php
–
requêtes
à
Avec
:
la
méthode
query
pour
les
recherches
à
Le
méthode
exec
pour
les
modifications


Libération
du
ressources
:

closeCursor()
;
$dbh
=
new
PDO('mysql:host=127.0.0.1
;
dbname=test
'
,
'
root
'
,
'
'
)
;
$reponse
à
$dbh->query('SELECT
*
FROM
à
test
`
'
)
;
$nb_modifs
=
$dbh->exec('UPDATE
`
test
`
SET
test_id=21
'
)
;
...
$reponse->closeCursor()
;
$dbh
=
null
;
MySQL
et
Php
–
traitement

Nombre
de
réponses
:


rowCount()
Traitement
du
réponses
:
fetch()
:
retourne
les
résultats
un
par
un

fetchAll()
:
retourne
un
tableau
avec
tous
les
résultats
à
if
(
$reponse->rowCount()
>
0
)
{
while
(
$donnees
=
$reponse->fetch())
{
echo
$donnees['test_id
'
]
.
'

'
.$donnees['test_val'].'<br
/>
'
;
}
à
else
à
echo
"
aucun
résultat<br
/>
"
;
}
MySQL
et
Php
à
Un
exemple
<html><body>
<ul>
<
?

php
try
à
$dbh
=
new
PDO('mysql:host=127.0.0.1
;
dbname=test
'
,
'
root
'
,
'
'
)
;
$id=$_POST['id
'
]
;
$reponse
à
$dbh->query('SELECT
*
FROM
à
test
`
WHERE
test_id='.$id
)
;
if
(
$reponse->rowCount()
>
0
)
{
while
(
$donnees
=
$reponse->fetch())
à
echo
"
<li>".$donnees['test_id
'
]
.
'

:
'
.$donnees['test_val'].'</li>
'
;
}
à
else
à
echo
"
<li>aucun
résultat</li>
"
;
}
$reponse->closeCursor()
;
$dbh
=
null
;
}
catch
(
Exception
$e
)
{
die('Erreur
:
'
.

$e->getMessage())
;
}
?

à
</ul>
</body></html>
Sécurité
à
Que
se
passe
-t-il
si
:

çid
=
"
12
"

çid
=
"
12
OR
1
"

çid
=
"
12
;
DROP
TABLE
`
test
`
;
"
$id=$_POST['id
'
]
;
$reponse
=
$dbh->query(
'
SELECT
*
FROM
à
test
`
WHERE
test_id='.$id
)
;
SELECT
*
FROM
à
test
`
WHERE
test_id=12
SELECT
*
FROM
`
test
`
WHERE
test_id=12
OR
1
SELECT
*
FROM
`
test
`
WHERE
test_id=12
;
DROP
TABLE
`
test
`
;
Requêtes
avancées
à
Préparation
de
requêtes
génériques
:

prepare($query)
;

execute
avec
arguments
à
Plus
sécurisé
que
la
version
précédente
,
mise
en
cache
,
plus
portable
à
en
clair
à
utiliser
$req
=
$dbh->prepare(
'
SELECT
test_id
,
test_val
FROM
`
test
`
WHERE
test_id
=
?

AND
test_val=
?

'
)
;
$req->execute(array($x
,
$y
)
)
;
Remarques
finales
à
à
Limiter
au
maximum
les
droits
de
l'
utilisateur
.

Les
données
transmises
par
le
client
ne
sont
pas
fiables
:

SQL
Injection
à
Javascript
injection
à
Tenter
à

de
mettre
javascript:alert("Hello
!

"
)
;
dans
un
input
Toujours
tester
l'
existence
/
la
validité
de
un
fichier
/
code
à
inclure
.

Regarder
régulièrement
les
logs
.

MYSQL
MySQL
à
types
de
données




INT
FLOAT
TEXT
DATETIME
/
TIMESTAMP


ENUM('value1','value2
'
,
...
)
:

à
Ensemble
fixé
de
valeurs
SET('value1','value2
'
,
...
)
:

à
Date
et
heure
/
Horaire
Unix
Une
ou
plusieurs
parmi
Et
beaucoup
de
autres
MySQL
à
opérations
à
Création
de
base
de
données

CREATE

Suppression
de
base
de
données

DROP

If

DATABASE
nom_bd
DATABASE
[
If
EXISTS
]
nom_bd
EXISTS
évite
une
erreur
si
la
base
n'
existe
pas
.

Utilisation
de
une
base
de
données
à
Use
à
La
nom_bd
base
spécifiée
sera
utilisée
par
défaut
.

MySQL
à
opérations
à
CREATE
TABLE
:
permet
de
créer
une
nouvelle
table
dans
la
base
de
données
courante
à
CREATE
TABLE
tbl_name
[
(
champ1
,
…
)
]
à
AUTO_INCREMENT
:
le
contenu
est
incrémenté
automatiquement
après
chaque
insertion
à
PRIMARY_KEY
:
clé
de
index
primaire
unique
CREATE
TABLE
`
test
`
(
`
test_id
`
INT
NOT
NULL
AUTO_INCREMENT
PRIMARY
Key
,
`
test_val
à
INT
NOT
NULL
)
MySQL
–
opérations

Suppression
de
une
Table

DROP

TABLE
tbl_name
[
,
tbl_name
,
…
]
Modifier
la
structure
de
une
table
existante

ALTER
TABLE
tbl_name
alter_spec
[
,
alter_spec
…
]
MySQL
à
opérations
à
Insérer
de
nouveaux
enregistrement
INSERT
INTO
article
(
Champ1
,
Champ2
)
VALUES
(
e
12
'
,
'
test
'
)
;
à
Remplacer
un
enregistrement
REPLACE
INTO
article
(
Champ1
,
Champ2
)
VALUES
(
e
13
'
,
'
test
'
)
;
MySQL
à
opérations
à
Modification
du
valeurs
UPDATE
table_name
SET
column_name=expr1
[
WHERE
section_condition_where
]
à
Suppression
de
enregistrements
DELETE
FROM
table_name
[
WHERE
definition
]
MySQL
à
opérations
à
Sélection
de
enregistrement
SELECT
[
DISTINCT|ALL
]
expression_de_selection
FROM
tables
WHERE
expression_where
[
GROUP
By
col_name
,
…
]
[
HAVING
where_definition
]
[
ORDER
By
[
ASC|DESC
]
]

Exemples
SELECT
*
FROM
article
WHERE
PrixArt
>
50
à
SELECT
NumGrArt
,
AVG(PrixArt)
FROM
article
GROUP
By
NumArt
à
UN
EXEMPLE
"
COMPLET
"
SIMPLE
<
!

DOCTYPE
html
PUBLIC
"
-//W3C//DTD
XHTML
1.0
Strict//EN
"
"
http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head><title>Site
de
vente
en
ligne</title></head>
<body>
<div
id="container">
<div
id="header">
<ul
id="top_menu">
<li><a
href="index.php">index</a></li>
<li><a
href="rechercher.php">rechercher</a></li>
<li><a
href="commander.php">commander</a></li>
</ul>
</div>
<
!

--
/header
--
>
<div
id="main">
à
!

à
Affichage
du
catalogue
venant
de
la
base
de
données
--
à
</div>
<
!

--
/main
--
>
<div
id="footer">
<p>Copyright
2011
&copy
;
SdVeL
.

Tous
droits
réservés</p>
</div>
à
!

--
/footer
--
>
</div>
<
!

--
/container
--
>
</body>
</html>
config.php
<
?

php
session_start()
;
$user
=
"
root
"
;
$pwd
=
"
"
;
$host
=
"
127.0.0.1
"
;
$bdd
=
"
test
"
;
try
{
$dbh
=
new
PDO('mysql:host='.$host
.
'
;
dbname='.$bdd
,
$user
,
$pwd
)
;
}
catch
(
Exception
$e
)
{
die('Erreur
:
'
.

$e->getMessage())
;
}
$menu
=
array(
"
index.php
"
=>
"
index
"
,
"
rechercher.php
"
=>
"
rechercher
"
,
"
commander.php
"
=>
"
commander
"
)
;
?

à
header.php
<
?

php
include_once('config.php')
;
?

à
<
!

DOCTYPE
html
PUBLIC
"
-//W3C//DTD
XHTML
1.0
Strict//EN
"
"
http://www.w3.org/TR/xhtml1/DTD/xhtml1strict.dtd">
<html>
<head><title>Site
de
vente
en
ligne</title></head>
<body>
<div
id="container">
<div
id="header">
<ul
id="top_menu">
<
?

php
foreach
(
$menu
as
$page_url
=>
$page_title
)
echo
"
<li><a
href=\"$page_url\">$page_title</a></li>\n
"
;
?

à
</ul>
</div>
<
!

--
/
header
--
>
<div
id="main">
footer.php
</div>
à
!

--
/
main
--
>
<div
id="footer">
<p>Copyright
2011
&copy
;
Dvd
Club
.

Tous
droits
réservés</p>
</div>
à
!

--
/
footer
--
à
</div>
<
!

--
/
container
--
à
</body>
</html>
Toutes
les
autres
page
Création
d'autant
de
page
que
nécessaire
:




Modification
de
l'
entête
ou
du
pied
de
page
via
les
fichiers
header.php
,
footer.php
Modification
du
identifiants
de
connexion
via
le
fichier
config.php
…
Reste
à
modifier
les
fichiers
header/footer
et
faire
une
css
.


<
?

php
include('header.php')
;
?

à
<
!

à
Affichage
du
catalogue
venant
de
la
base
de
données
--
>
<
?

php
$reponse
à
$dbh->query('SELECT
*
FROM
à
test
`
'
)
;
if
(
$reponse->rowCount()
>
0
)
{
while
(
$donnees
=
$reponse->fetch())
{
echo
...
}
}
else
à
echo
"
<li>aucun
résultat</li>
"
;
}
?

>
<
?

php
include('footer.php')
;
?

>
Pour
aller
plus
loin

Il
faut
ensuite
apprendre
:
à
Quelques
fonctions
de
base
supplémentaires

à
ne
jamais
faire
confiance
au
client
à
La
gestion
du
objets
en
Php

Les
méthodes
de
programmation
avancées

MVC
à
Gestion
à
…
de
templates

