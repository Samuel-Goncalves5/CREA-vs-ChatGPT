Cours
php
Versions
4.x
et
5.x
Sébastien
ROHAUT
Table
du
matières
1
Introduction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
1.1
Définition
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
1.2
Historique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
1.3
Utilisation
pratique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
7
1.4
page
statiques
vs
page
dynamiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

8
1.5
Scripts
Cgi
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
8
1.6
page
dynamiques
et
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

8
1.7
Pourquoi
préférer
Php
à
d'
autres
langages
comme
Asp
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
8
1.8
Ce
que
vous
devez
déjà
connaître
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
9
1.9
Le
nécessaire
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
1.10
Le
nécessaire
client
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
9
1.11
Le
respect
du
standards
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
9
2
Bases
:Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
2.0.1
Syntaxe
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

11
2.1
Intégration
à
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
11
2.2
Séparateur
de
instructions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

12
2.3
Bloc
de
instructions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
2.4
Commentaires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
12
3
Travailler
avec
des
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
13
3.1
Déclarer
une
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
13
3.2
Portée
du
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
13
3.3
Variables
prédéfinies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
14
3.4
Variables
dynamiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
15
3.5
Types
de
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
15
3.5.1
booléens
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
15
3.5.2
Entiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
15
3.5.3
Virgule
flottante
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
16
3.5.4
Chaînes
de
caractères
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

16
3.5.5
Les
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
17
3.5.6
La
variable
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
18
3.6
Les
constantes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
18
3.7
Obtenir
le
type
de
une
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
19
3.8
Définir
et
supprimer
une
variable
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
19
4
Les
opérateurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

20
4.1
La
précédence
du
opérateurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
20
4.2
Opérateurs
arithmétiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
20
4.3
Opérateurs
de
assignation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

20
4.4
Opérateurs
sur
les
bits
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
20
4.5
Opérateurs
de
comparaison
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
4.6
Opérateur
de
erreur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
21
4.7
Opérateur
de
exécution
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
21
4.8
Opérateurs
de
incrémentation/décrémentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
21
4.9
Opérateurs
logiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
21
4.10
Opérateurs
de
chaînes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
22
4.11
Opérateur
de
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
22
5
La
notion
de
expression
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
6
Les
structures
de
contrôle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

25
6.1
if
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
25
6.2
while
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
25
So
ROHAUT
Cours
Programmation
Php
page
2/93
6.2.1
while
classique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
25
6.2.2
do
...
while
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
25
6.3
for
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
26
6.4
foreach
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

26
6.5
break
et
continue
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

27
6.6
switch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
6.7
return
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

28
6.8
require
et
include
(
_once
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
28
7
Les
fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
29
7.1
Syntaxe
et
portée
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

29
7.2
Arguments
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
29
7.3
Valeur
de
retour
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
7.4
Fonctions
internes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
30
8
Gestion
du
formulaires
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
8.1
GET
et
POST
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
31
8.2
Récupération
par
tableau
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

31
8.3
Récupération
directe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

32
8.4
Utiliser
des
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
32
9
Date
et
heure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
9.1
Localisation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
9.2
Récupérer
la
date
et
l'
heure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
9.2.1
date()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
34
9.2.2
date
locale
strftime()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
35
9.2.3
Retour
par
tableau
getdate()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
36
9.2.4
L'
heure
localtime()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
37
9.3
Récupérer
n'
importe
quelle
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
37
10
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
38
10.1
Présentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

38
10.2
Outils
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
38
10.2.1
PhpMyAdmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
38
10.2.2
MysqlCC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
39
10.3
Créer
une
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
39
10.4
Utilisateurs
et
droits
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
39
10.5
Créer
et
modifier
du
tables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
40
10.5.1
Types
Numériques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
10.5.1.1
Types
entiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
40
10.5.1.2
Types
réels
(
flottants
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
40
10.5.1.3
Types
booléens
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
10.5.2
Types
caractères
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

40
10.5.2.1
Types
CHAR
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

41
10.5.2.2
Types
TEXT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
41
10.5.2.3
Type
ENUM
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
41
10.5.2.4
Type
SET
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

42
10.5.3
Types
date
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

42
10.5.3.1
Formats
supportés
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
43
10.5.3.2
Type
DATETIME
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
43
10.5.3.3
Type
DATE
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
43
10.5.3.4
Type
TIMESTAMP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
43
10.5.3.5
Type
Time
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
44
10.5.3.6
Type
YEAR
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
44
10.5.4
Création
:
Syntaxe
SQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
44
So
ROHAUT
Cours
Programmation
Php
Page
3/93
10.5.5
Types
de
tables
(
Myisam
et
InnoDB
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
45
10.5.6
Index
FULLTEXT
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

46
10.5.6.1
Création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
46
10.5.6.2
Recherche
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
46
10.5.6.3
Recherche
booléenne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

47
10.6
MySQL
et
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

47
10.6.1
Connexion
à
une
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

47
10.6.1.1
Connexion
au
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
47
10.6.1.2
Choix
de
une
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
48
10.6.1.3
Fermeture
de
une
connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
48
10.6.1.4
Séquence
complète
pour
une
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
48
10.6.2
Les
requêtes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

48
10.6.2.1
Exécuter
une
requête
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

48
10.6.2.2
Nombre
de
lignes
affectées
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
49
10.6.2.3
Nombre
de
lignes
retournées
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

49
10.6.2.4
Récupérer
les
résultats
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
49
10.6.2.5
Insertion
avec
auto-incrément
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
50
10.6.3
Récupération
du
erreurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
50
11
Le
système
de
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
51
11.1
Travail
sur
les
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
51
11.1.1
Ouverture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
51
11.1.2
Lecture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

51
11.1.2.1
fgets()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

51
11.1.2.2
fread()
;
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
51
11.1.2.3
fscanf()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
52
11.1.2.4
fgetc()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
52
11.1.2.5
fgetss()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
52
11.1.2.6
fgetcsv()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
52
11.1.2.7
Renvoyer
un
fichier
par
la
sortie
standard
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
52
11.1.3
Ecriture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
53
11.1.4
Déplacement
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

53
11.1.4.1
fseekçë
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
53
11.1.4.2
ftell()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
53
11.1.4.3
rewind()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
53
11.1.5
Fin
de
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
53
11.1.6
Fermeture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
54
11.2
Travail
sur
les
répertoires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

54
11.2.1
Répertoire
actuel
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
54
11.2.2
Se
déplacer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
54
11.2.3
Ouvrir
,
lister
,
fermer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
54
11.2.4
Récupérer
toutes
les
entrées
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

54
11.3
Travail
sur
le
système
de
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

55
11.3.1
Informations
sur
le
fichier
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

55
11.3.2
Actions
sur
les
fichiers
et
répertoires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
56
11.4
Upload
de
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
57
12
Travail
sur
chaînes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

59
12.1
Fonctions
pour
code
HTML
et
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
59
12.1.1
Gestion
du
caractères
verrouillés
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

59
12.1.2
balises
et
caractères
spéciaux
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
59
12.2
Fonctions
texte
générales
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

60
12.2.1
Découper
une
chaîne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
60
So
ROHAUT
Cours
Programmation
Php
page
4/93
12.2.2
Rechercher
et
comparer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
61
13
Sessions
et
cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
62
13.1
Les
cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
62
13.1.1
Création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
62
13.1.2
Accès
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
62
13.1.3
Suppression
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
63
13.2
Identification
HTTP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
63
13.2.1
Connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

63
13.2.2
Déconnexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
64
13.3
Sessions
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

64
13.3.1
Principe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
64
13.3.2
Utilisation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
64
13.3.2.1
Ouverture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

64
13.3.2.2
Variables
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
64
13.3.3
Expiration
de
la
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
65
13.3.4
Changer
l'
accès
par
défaut
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

66
14
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
67
14.1
Pré-requis
importants
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

67
14.2
Créer
une
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
67
14.2.1
Types
possibles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
67
14.2.2
Création
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
68
14.2.2.1
Nouvelle
image
dynamique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
68
14.2.2.2
Récupération
de
une
image
existante
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
68
14.2.3
Publication
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
68
14.2.4
Chargement
via
une
autre
page
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
69
14.3
Travailler
sur
les
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
69
14.3.1
Récupérer
des
informations
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
69
14.3.2
Les
couleurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

69
14.3.3
Dessin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
70
14.3.3.1
Remplissage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
70
14.3.3.2
Point
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
70
14.3.3.3
Ligne
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
70
14.3.3.4
Rectangle
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

70
14.3.3.5
Cercle
,
ellipse
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
70
14.3.3.6
Polygones
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
71
14.3.3.7
Texte
simple
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
71
15
La
programmation
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

71
15.1
Structure
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
71
15.2
Création
de
un
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
71
15.3
Accès
au
membres
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
72
15.3.1
php
4
et
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

72
15.3.2
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
72
15.4
L'
opérateur
:
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
72
15.5
Les
variables
,
protection
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
73
15.5.1
php
4.x
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
73
15.5.2
php
5.x
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
73
15.5.2.1
Protection
du
variables
et
fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

73
15.5.2.2
attributs
et
méthodes
statiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
73
15.5.2.3
constantes
de
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
74
15.6
Héritage
et
polymorphisme
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

74
15.7
Les
mots-clés
parent
et
self
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

75
S.
ROHAUT
Cours
Programmation
Php
page
5/93
15.8
Constructeurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

76
15.8.1
php
4
et
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

76
15.8.2
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
76
15.9
Constructeurs
et
classes
dérivées
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

76
15.9.1
php
4
et
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

76
15.9.2
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
77
15.10
Destructeur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
78
15.10.1
php
4
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
78
15.10.2
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
78
15.11
Affectation
de
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
78
15.11.1
Code
commun
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
78
15.11.2
php
4
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
79
15.11.3
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
79
15.12
Comparaison
de
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
80
15.12.1
php
4
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
80
15.12.2
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
82
16
Nouveautés
en
php
5
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
83
16.1
Les
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
83
16.1.1
La
fonction
__autoload
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
83
16.1.2
Les
classes
abstraites
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
83
16.1.3
Classes
,
méthodes
et
variables
finales
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
84
16.1.4
Les
interfaces
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
84
16.1.5
Gestion
dynamique
du
méthodes
et
attributs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

86
16.1.6
Les
itérations
de
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
86
16.1.7
Type
hinting
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

87
16.2
Les
exceptions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
88
16.2.1
try
...
catch
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

88
16.2.2
Déclenchement
avec
throw
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.
.
88
16.2.3
classe
Exception
et
classes
personnalisées
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
88
16.2.4
Php
:
Erreur
ou
Exception
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
89
16.2.5
Exception
par
défaut
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
90
17
Sauvegarder
ses
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

91
17.1
Cas
de
une
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

91
17.2
Autres
cas
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.

92
S.
ROHAUT
Cours
Programmation
Php
page
6/93
1
Introduction
1.1
Définition
Php
est
un
langage
de
script
HTML
exécuté
du
côté
du
serveur
.

Il
veut
dire
à
Php
:
Hypertext
Preprocessor
»
.

Sa
syntaxe
est
largement
inspirée
du
langage
C
,
de
Java
et
de
Perl
,
avec
des
améliorations
spécifiques
.

Le
but
du
langage
est
de
écrire
rapidement
des
page
HTML
dynamiques
.

1.2
Historique
L'
origine
de
Php
remonte
à
1995
quand
Rasmus
Lerdorf
a
créé
Phpfifi
,
une
librairie
de
scripts
Perl
utilisés
pour
la
publication
de
son
CV
sur
son
site
personnel
.

au
fur
et
à
mesure
du
évolutions
,
la
librairie
a
été
portée
en
C
et
agrémentée
de
nouvelles
fonctionnalités
pour
créer
des
page
dynamiques
simples
pour
le
web
et
accéder
à
quelques
sources
de
données
.

Phpfifi
signifie
Personal
home
Page/Forms
Interpreter
.

phpfifi
2.0
sort
en
1997
,
toujours
développé
par
une
seule
personne
.

C'
est
le
succès
:
50000
sites
(
1
%
du
noms
de
domaines
)
disent
l'
utiliser
ou
le
supporter
.

Les
contributeurs
affluent
.

php
3.0
sort
en
juin
1998
,
c'
est
la
première
version
développée
conjointement
par
Rasmus
Lerdorf
,
Andi
Gutmans
et
Zeev
Suraski
et
entièrement
réécrite
(
les
versions
précédentes
étaient
trop
lentes
pour
une
application
commerciale
)
.

Outre
les
performances
,
php
3
est
modulaire
et
extensible
,
permettant
de
lui
greffer
du
api
supplémentaires
,
ce
qui
n'
a
pas
manqué
avec
le
support
de
nombreuses
base
de
données
,
de
formats
et
de
protocoles
,
une
syntaxe
plus
cohérente
et
un
support
basique
de
l'
objet
.

Il
a
été
installé
sur
10
%
du
parc
mondial
du
serveurs
web
avec
des
dizaines
de
milliers
de
développeurs
et
du
centaines
de
milliers
de
sites
.

Le
moteur
de
Php
4
a
été
repensé
afin
de
en
améliorer
les
performances
pour
des
applications
complexes
et
de
augmenter
encore
la
modularité
.

Un
nouveau
moteur
a
vu
le
jour
,
appelé
Zend
Engine
(
contraction
de
Zeev
et
Andi
)
.

php
4
sort
officiellement
en
mai
2000
et
apporte
des
performances
accrues
,
le
supports
de
plusieurs
serveurs
web
,
les
sessions
,
une
sécurité
accrue
.

C'
est
actuellement
la
dernière
version
stable
(
nous
ne
comptons
pas
les
4.1
,
4.2
et
4.3
)
.

Et
php
5
?

Actuellement
en
version
beta
,
un
cycle
qui
peut
durer
plusieurs
mois
,
le
but
de
Php
5
est
une
amélioration
du
performances
du
moteur
Zend
(
Zend
Engine
2
)
,
un
modèle
objet
étendu
et
très
proche
du
C++
,
une
compatibilité
accrue
avec
de
nouveaux
standards
et
les
anciens
(
RPC
,
XML
,
.NET
,
...
)
1.3
Utilisation
pratique
à
Forums
et
Messageries
à
Commerce
électronique
à
Banque
/
Comptes
en
ligne
à
Publication
en
ligne
à
Moteurs
de
recherche
–
Tout
ce
que
vous
voulez
,
(
sauf
les
jeu
)
Résumons
quelques
sigles
que
nous
allons
utiliser
par
la
suite
.

•
HTML
:
Hypertext
Markup
Language
•
Php
:
People
Hate
Perl
...
Non
:
Php
,
Hypertext
PreProcessor
So
ROHAUT
Cours
Programmation
Php
page
7/93
•
SQL
:
Structured
Query
Language
•
MySQL
:
serveur
de
base
de
données
et
les
outils
pour
y
accéder
à
Lamp
:
Linux
à
Apache
–
MySQL
à
Php
,
le
quatuor
gagnant
des
serveurs
web
.

APACHE
Php
MySQL
Linux
1.4
page
statiques
vs
page
dynamiques
Une
page
statique
et
une
page
écrite
directement
en
HTML
.

Elle
peut
éventuellement
incorporer
du
code
Javascript
lui
donnant
un
semblant
de
e
dynamisme
'
mais
uniquement
du
côté
du
navigateur
et
du
données
locales
.

Pour
des
traitements
plus
lourds
nécessitant
l'
accès
à
une
base
de
données
,
un
formatage
de
tableau
en
fonction
de
résultats
,
une
recherche
poussée
,
du
graphisme
,
il
faut
passer
par
des
page
dynamiques
et
par
un
langage
qui
sera
exécuté
du
côté
du
serveur
:
Asp
sur
les
serveurs
Microsoft/IIS
,
Perl
,
Php
...
1.5
Scripts
Cgi
php
peut
être
utilisé
comme
langage
Cgi
.

Pour
rappel
,
un
script
ou
programme
Cgi
est
un
programme
comme
un
autre
mais
dont
la
sortie
est
dédiée
à
un
navigateur
,
par
exemple
un
programme
shell
,
C
ou
Perl
qui
sort
du
HTML
.

Php
étant
un
langage
script
comme
un
autre
on
peut
l'
utiliser
dans
ce
cas
,
mais
ce
n'
est
pas
forcément
le
mieux
.

1.6
page
dynamiques
et
Php
Php
est
un
langage
Server
Side
ou
côté
serveur
.

Lors
du
chargement
de
une
page
Php
,
c'
est
le
serveur
qui
va
lire
,
interpréter
et
exécuter
le
code
.

pui
il
renvoie
le
résultat
,
généralement
sous
la
forme
de
code
HTML
au
navigateur
.

Ainsi
le
navigateur
et
l'
utilisateur
ne
voient
jamais
le
véritable
code
Php
exécuté
.

de
plus
le
résultat
étant
une
page
web
classique
en
HTML
,
pas
besoin
de
installer
sur
le
client
du
composants
spécifiques
(
java
,
...
)
.

Il
n'
y
a
donc
pas
de
notion
de
vitesse
de
exécution
du
côté
du
client
,
mais
celle
du
serveur
est
prépondérante
.

1.7
Pourquoi
préférer
Php
à
d'
autres
langages
comme
Asp
?

Asp
n'
est
pas
entièrement
un
langage
puisque
Asp
veut
dire
Active
Server
Page
.

Asp
dispose
bien
entendu
de
ses
propres
api
mais
qui
peuvent
être
accessibles
via
un
autre
langage
.

Il
s'
agit
de
utiliser
un
langage
(
quelconque
)
pour
créer
des
page
dynamiques
.

Nativement
disponible
avec
Iis
sous
Windows
,
il
ne
l'
est
pas
par
défaut
avec
les
autres
systèmes
ou
serveurs
web
comme
Apache
.

Il
existe
cependant
des
modules
de
compatibilité
Asp
pour
Apache
comme
Apache::ASP
qui
reprend
les
Api
Asp
en
les
étendant
et
en
programmation
PERL
.

sous
Windows
,
le
code
Asp
se
fait
généralement
en
VBScript
ou
en
Jscript
.

C'
est
aussi
possible
sous
Unix/Linux
et
Apache
,
mais
il
faut
alors
se
tourner
vers
des
solutions
commerciales
(
Sun
One
Asp
,
Instant
Asp
,
...
)
.

sous
So
ROHAUT
Cours
Programmation
Php
page
8/93
Windows
Asp
et
VBScript
sont
utilisés
pour
l'
accès
au
ActiveX
,
composants
bien
pratiques
mais
véritables
gruyères
pour
la
sécurité
.

Il
n'
existe
pas
à
ce
jour
de
portage
de
ActiveX
sur
d'
autres
systèmes
que
Windows
.

Php
est
disponible
pour
toutes
les
plate-formes
et
permet
de
faire
la
même
chose
,
sinon
plus
,
que
Asp
et
VBScript
.

N'
oublions
pas
que
Php
dispose
de
plus
de
2700
api
!

1.8
Ce
que
vous
devez
déjà
connaître
vous
devez
connaître
HTML
ainsi
que
un
langage
de
programmation
procédural
(
C
par
exemple
)
.

Une
connaissance
basique
du
SQL
peut
être
nécessaire
mais
sera
abordée
.

1.9
Le
nécessaire
serveur
Php
ne
sert
pas
seulement
à
faire
des
page
dynamiques
.

C'
est
un
langage
interprété
qui
au
même
titre
que
Perl
,
Python
ou
TCL
est
capable
de
lancer
des
scripts
intéractifs
ou
non
.

On
peut
même
utiliser
Php
pour
créer
des
interfaces
graphiques
(
extension
GTK
)
.

Le
minimum
nécessaire
et
vital
pour
apprendre
Php
est
donc
l'
interpréteur
Php
lui-même
sur
un
environnement
supporté
(
Unix
,
Windows
,
Mac
,
...
)
.

si
on
parle
de
Lamp
,
on
voit
bien
la
référence
.

Un
système
Linux
,
un
serveur
Web
Apache
,
un
serveur
de
base
de
données
MySQL
et
un
interpréteur
php
.

La
version
4
de
Php
permet
de
fonctionner
avec
Iis
,
et
MySQL
existe
aussi
pour
Windows
.

On
peut
donc
utiliser
une
architecture
Wimp
(
Windows
,
Iis
,
MySQL
,
Php
)
ou
Wamp
(
Windows
,
Apache
,
MySQL
,
Php
)
.

Ajouter
Php
à
Iis
,
c'
est
laisser
la
porte
ouverte
à
tous
les
vents
,
on
préférera
donc
la
seconde
solution
.

Les
distributions
Linux
disposent
déjà
du
nécessaire
pour
l'
architecture
Lamp
et
le
paramétrage
est
assez
simple
.

de
plus
le
mode
à
user_mod
»
de
Apache
permet
à
chaque
utilisateur
de
créer
son
site
web
dans
un
répertoire
spécifique
de
son
répertoire
personnel
.

sous
Windows
,
c'
est
déjà
un
peu
plus
complexe
à
mettre
en
oeuvre
manuellement
.

On
emploie
donc
des
distributions
toutes
faites
,
la
meilleure
se
nommant
EasyPHP
.

Les
versions
1.6
et
1.7
sont
les
meilleures
pour
développer
.

On
peut
ainsi
développer
son
site
sous
Windows
et
le
porter
tel
quel
sur
un
serveur
Unix
.

1.10
Le
nécessaire
client
Pour
développer
il
suffit
de
un
simple
éditeur
mais
il
vaut
mieux
préférer
un
éditeur
plus
évolué
supportant
la
coloration
syntaxique
et
quelques
fonctions
évoluées
.

L'
éditeur
HAPEdit
3
est
parfait
pour
développer
en
Php
.

L'
accès
au
base
MySQL
peut
se
faire
soit
depuis
un
navigateur
(
phpMyAdmin
)
soit
depuis
une
interface
MySQLCC
ou
encore
DBDesigner
pour
la
conception
.

Pour
les
tests
:
un
simple
navigateur
respectant
les
standards
du
web
.

1.11
Le
respect
du
standards
Le
W3C
est
l'
organisme
international
faisant
loi
dans
le
monde
du
standards
du
web
.

Il
a
défini
une
série
de
normes
dont
le
HTML
,
le
XML
,
le
XHTML
,
les
CSS
,
etc
.

Pourquoi
respecter
un
standard
?

C'
est
la
garantie
de
un
bon
fonctionnement
et
du
bon
affichage
de
manière
identique
de
vos
page
sur
So
ROHAUT
Cours
Programmation
Php
Page
9/93
tous
les
navigateurs
supportant
ce
standard
.

Avec
une
bonne
déclaration
(
entête
HTML
)
les
navigateurs
Ie6
,
Mozilla
1.5
,
Opera
7
,
Galeon
,
Konqueror
,
etc
,
sont
compatibles
avec
ces
standards
.

L'
utilisation
de
balises
propriétaires
à
un
navigateur
(
blink
par
exemple
)
ou
de
vbscript
(
sous
IE
)
est
à
proscrire
.

La
dernière
norme
HTML
valide
est
HTML
4.01
STRICT
.

XHTML
qui
à
terme
remplacera
définitivement
HTML
est
aussi
bien
supporté
.

La
dernière
norme
CSS
et
la
2
.

Cependant
dans
ce
cas
préférez
CSS-1
car
seul
Opera
supporte
CSS-2
.

Prenez
l'
habitude
quand
c'
est
possible
de
tester
votre
site
sur
deux
ou
trois
navigateurs
:
IE6
car
c'
est
le
plus
répandu
,
Opera
car
il
est
extrêmement
respectueux
du
standards
et
Mozilla
car
c'
est
LE
challenger
et
probablement
remplaçant
à
terme
de
ie
(
qui
n'
aura
plus
d'
évolution
de
version
avant
LongHorn
)
.

So
ROHAUT
Cours
Programmation
Php
page
10/93
2
Bases
:Présentation
Php
est
langage
très
souple
prenant
ses
sources
dans
divers
langages
comme
le
C
,
le
Perl
,
le
C++
.

Il
est
donc
possible
de
avoir
plusieurs
styles
de
scripts
(
programmation
classique
dite
procédurale
ou
programmation
objet
,
ou
programmation
bordélique
)
.

Cette
souplesse
permet
une
très
grande
liberté
,
un
peu
comme
en
Perl
.

L'
inconvénient
est
que
on
peut
très
vite
obtenir
du
code
illisible
(
bordélique
)
,
même
si
ça
marche
très
bien
.

Prenez
donc
l'
habitude
de
commenter
votre
code
,
de
l'
indenter
et
de
ne
placer
qu'
une
instruction
par
ligne
.

2.0.1
Syntaxe
de
base
2.1
Intégration
à
HTML
Une
page
php
porte
l'
extension
à
.php
»
.

Une
page
Php
peut
être
entièrement
programmée
en
php
ou
mélangée
avec
du
code
html
.

Php
est
un
langage
à
Embedded
HTML
»
,
c'
est
à
dire
que
il
apparaît
à
n'
importe
quel
endroit
de
la
page
HTML
.

Pour
ça
on
le
place
dans
des
balises
particulières
:
<
?

php
et
?

>
.

On
peut
aussi
utiliser
les
balises
<script
language="php">
et
</script>
.

La
première
forme
est
préférable
pour
plus
de
simplicité
et
une
compatibilité
XHTML
.

On
écrit
donc
une
page
HTML
dans
laquelle
on
intègre
du
code
Php
.

<html>
<head>
<title>Titre</title>
</head>
<body>
<
?

php
echo
"
Hello
World
!

"
;
?

à
</body>
</html>
Le
code
HTML
généré
sera
le
suivant
<html>
<head>
<title>Titre</title>
</head>
<body>
Hello
World
!

</body>
</html>
L'
utilisation
de
balises
pour
l'
intégration
de
code
dans
une
page
web
est
très
souple
et
permet
de
jongler
facilement
avec
du
code
Php
et
du
code
HTML
:
<
?

php
if
(
expression
)
{
?

>
<strong>Ceci
est
vrai.</strong>
<
?

php
à
else
{
?

>
<strong>Ceci
est
faux.</strong>
<
?

php
}
?

>
So
ROHAUT
Cours
Programmation
Php
page
11/93
2.2
Séparateur
de
instructions
Comme
en
C
une
instruction
se
termine
par
un
point-virgule
«
;
»
.

Notez
que
la
balise
fermante
?

>
implique
la
fin
de
une
instruction
.

<
?

php
echo
"
Ceci
est
un
test
"
;
?

>
<
?

php
echo
"
Ceci
est
un
test
"
?

>
2.3
Bloc
de
instructions
Un
bloc
de
instructions
se
place
entre
accolades
{
et
}
.

Un
bloc
de
instructions
peut
contenir
du
code
de
n'
importe
quelle
longueur
et
est
considéré
dans
le
reste
du
code
comme
une
instruction
unique
.

si
c'
est
une
expression
(
qui
a
une
valeur
)
on
peut
donc
assigner
le
bloc
,
faire
des
calculs
,
...
2.4
Commentaires
Les
commentaires
s'
utilisent
comme
en
C
et
en
C++
avec
/*
.
.
*/
et
//
.

Notez
que
une
balise
fermante
ferme
le
commentaire
en
cours
.

<
?

php
/*
echo
"
salut
!

"
*/
//
Commentaire
sur
cette
ligne
?

>
So
ROHAUT
Cours
Programmation
Php
page
12/93
3
Travailler
avec
des
variables
3.1
Déclarer
une
variable
Une
variable
commence
par
un
dollar
«
$
»
suivi
de
un
nom
de
variable
.

Les
variables
ne
sont
pas
typées
au
moment
de
leur
création
.

Attention
Php
est
sensible
à
la
casse
:
var
et
Var
ne
sont
pas
les
mêmes
variables
!

Voici
les
règles
à
respecter
:
•
Une
variable
peut
commencer
par
une
lettre
à
Une
variable
peut
commencer
par
un
souligné
(
underscore
)
«
_
»
•
Une
variable
ne
doit
pas
commencer
par
un
chiffre
.

//
Déclaration
et
règles
$var=1
;
//
$var
est
à
1
$Var=2
;
//
$
Var
est
à
2
$_toto='Salut
'
;
//
Ok
$3petitscochons=5
;
//
Invalide
:
commence
par
un
chiffre
Leur
type
dépend
de
leur
valeur
et
de
leur
contexte
de
utilisation
.

mais
on
peut
forcer
(
cast
)
ponctuellement
une
variable
à
un
type
de
données
,
ce
qui
s'
appelle
le
transtypage
.

de
même
comme
le
type
de
variable
peut
changer
en
fonction
de
son
utilisation
ou
du
contexte
,
Php
effectue
automatiquement
un
transtypage
,
ce
qui
peut
parfois
fournir
des
résultats
surprenants
.

On
affecte
une
valeur
à
une
variable
avec
le
signe
égal
«
=
»
avec
ou
sans
espace
avant
ou
après
.

//
Déclaration
et
transtypage
$var='2
'
;
//
Une
chaîne
2
$var+=1
;
//
$var
est
maintenant
un
entier
3
$var=$var+0.3
;
//
$var
est
maintenant
un
réel
de
type
double
3.3
$var=5
p
"
3
petits
cochons
"
;
//
$var
est
un
entier
qui
vaut
8
Par
défaut
les
variables
sont
assignées
par
valeur
:
la
valeur
assignée
à
la
variable
est
recopiée
dans
la
variable
.

Php
peut
aussi
travailler
par
référence
.

Une
variable
peut
donc
référencer
une
autre
variable
.

On
dit
alors
que
la
variable
devient
un
alias
,
ou
pointe
sur
une
autre
variable
.

On
assigne
par
référence
en
utilisant
le
signe
«
&
»
devant
la
variable
assignée
$var=2
;
$ref=&$var
;
//
$ref
devient
une
référence
de
$var
echo
$ref
;
//
affiche
2
$var=3
;
echo
$ref
;
//
affiche
3
$ref=4
;
echo
$var
;
//
affiche
4
Attention
à
la
valeur
constante
NULL
insensible
à
la
casse
.

Affecter
une
valeur
NULL
à
une
variable
signifie
ne
pas
pui
affecter
de
valeur
.

3.2
Portée
du
variables
La
portée
de
une
variable
dépend
du
contexte
.

Une
variable
déclarée
dans
un
script
et
hors
de
une
fonction
est
globale
mais
par
défaut
sa
portée
est
limitée
au
script
courant
,
ainsi
que
au
code
éventuellement
inclus
(
include
,
require
)
et
n'
est
pas
accessible
dans
les
fonctions
ou
d'
autres
scripts
.

So
ROHAUT
Cours
Programmation
Php
page
13/93
$a=1
;
//
globale
par
défaut
function
foo()
à
echo
$a
;
//
c'
est
une
variable
locale
à
la
fonction
:
n'
affiche
rien
}
Pour
accéder
à
une
variable
globale
dans
une
fonction
,
il
faut
utiliser
le
mot-clé
global
.

$a=1
;
//
globale
par
défaut
$b=2
;
//
idem
function
foo()
à
global
$a,$b
;
//
on
récupère
les
variables
globales
$b=$a+$b
;
}
echo
bb
;
//
affiche
3
php
accepte
les
variables
statiques
.

Comme
en
C
une
variable
statique
ne
perd
pas
sa
valeur
quand
on
sort
de
une
fonction
.

function
test_static()
à
static
$a=0
;
echo
$a
;
//
+1
à
chaque
passage
dans
la
fonction
$a++
;
à
3.3
Variables
prédéfinies
Php
dispose
de
un
grand
nombre
de
variables
prédéfinies
.

Ces
variables
sont
généralement
de
type
scalaires
ou
du
tableaux
.

Elles
sont
souvent
de
type
superglobales
,
c'
est
à
dire
accessible
depuis
n'
importe
où
sans
notion
de
portée
.

Voici
quelques
tableaux
prédéfinis
(
voir
au
point
Tableaux
pour
comprendre
leur
utilisation
)
.

à
$_GLOBALS
:
tableau
du
variables
globales
.

La
clé
est
le
nom
de
la
variable
.

à
$_SERVER
:
variables
fournies
par
le
serveur
web
,
par
exemple
'
SERVER_NAME
'
•
$_GET
:
variables
fournies
par
HTTP
par
la
méthode
GET
(
formulaires
)
à
$_POST
:
idem
mais
pour
la
méthode
POST
à
$_COOKIE
:
les
variables
fournies
par
un
cookie
à
$_FILES
:
variables
sur
le
téléchargement
de
un
fichier
(
upload
)
à
$_ENV
:
accès
au
variables
de
environnement
du
serveur
à
$_SESSION
:
les
variables
de
session
(
voir
cours
sur
les
sessions
)
Note
:
avant
la
version
4.2.0
de
Php
,
les
variables
passées
par
la
méthode
GET
,
POST
(
formulaires
et
URL
)
et
ainsi
de
suite
étaient
automatiquement
créées
dans
le
script
de
destination
.

http://www.toto.fr/page.php
?

action=enr
créait
automatiquement
la
variable
$action
qui
prenait
la
valeur
'
enr
'
.

<input
type="hidden
"
name="cache
"
value="toto">
créait
dans
la
page
cible
(
action
du
form
)
une
variable
$cache
de
valeur
"
toto
"
.

Ce
n'
est
plus
automatique
depuis
Php
4.2.0
.

Il
faut
passer
par
les
tableaux
superglobaux
ci-dessus
.

On
peut
cependant
passer
outre
en
modifiant
la
valeur
register_globals
dans
le
php.ini
.

So
ROHAUT
Cours
Programmation
Php
page
14/93
3.4
Variables
dynamiques
Une
variable
dynamique
utilise
la
valeur
de
une
variable
comme
nom
de
une
autre
variable
.

On
utilise
les
variables
dynamiques
en
rajoutant
un
«
$
»
devant
le
nom
de
la
première
variable
.

$a="var
"
;
$$a=1
;
//
$$a=1
equivaut
en
fait
à
$var=1
echo
$a
;
//
affiche
var
echo
$$a
;
//
affiche
1
echo
$var
;
//
affiche
1
Attention
avec
les
tableaux
!

Pour
éviter
toute
ambiguïté
,
il
est
préférable
de
placer
la
variable
entre
accolades
.

3.5
Types
de
variables
3.5.1
booléens
Un
booléen
peut
prendre
deux
valeurs
TRUE
ou
FALSE
.

Les
deux
constantes
TRUE
et
FALSE
peuvent
être
utilisées
sans
aucune
distinction
de
casse
(
pas
de
différences
entre
les
majuscules
et
les
minuscules
)
.

$var=FALSE
;
//
FALSE
,
False
,
false
,
...
$var2=True
;
//
TRUE
,
True
,
true
,
...
Tous
les
types
peuvent
être
convertis
en
booléens
.

Voici
les
cas
où
une
variable
retournera
FALSE
en
booléen
suivant
le
type
:
•
Booléen
:
FALSE
•
Entier
:
0
(
zéro
)
à
Nombre
flottant
:
0.0
(
zéro
)
à
Chaîne
:
chaîne
vide
"
"
ou
"
0
"
(
zéro
)
•
Tableau
:
tableau
vide
sans
aucun
élément
•
Objet
:
objet
vide
sans
aucun
élément
à
Constante
spéciale
NULL
Dans
tous
les
autres
cas
,
la
valeur
retournée
est
TRUE
.

Attention
:
-1
est
considéré
comme
vrai
donc
TRUE
.

Comme
en
C
,
les
tests
de
conditions
dans
les
structures
de
contrôles
effectuent
une
convertion
booléenne
du
la
condition
.

if($var==true)
echo
"
ok
"
;
if($var)
echo
"
ok
"
;
//
Identique
3.5.2
Entiers
Un
entier
est
l'
ensemble
du
nombres
naturels
,
c'
est
à
dire
dans
virgule
,
positifs
ou
négatifs
.

Les
entiers
sont
généralement
codés
sur
32
bits
mais
cela
dépend
de
l'
architecture
.

si
on
affecte
un
nombre
entier
qui
dépasse
la
capacité
de
la
variable
,
celle
-ci
sera
transformée
en
réel
(
float
)
.

Enfin
il
n'
y
a
pas
de
notion
de
entier
non
signé
.

Lors
de
la
conversion
de
un
booléen
en
entier
,
FALSE
devient
0
et
TRUE
devient
1
.

Lors
de
la
conversion
de
un
nombre
à
virgule
flottante
,
le
nombre
sera
arrondi
à
la
valeur
inférieure
si
il
est
So
ROHAUT
Cours
Programmation
Php
page
15/93
positif
,
ou
supérieure
si
il
est
négatif
(
conversion
vers
zéro
)
.

Pour
la
conversion
depuis
les
chaînes
,
voir
à
ce
type
.

3.5.3
Virgule
flottante
On
parte
ici
du
nombres
réels
,
double
ou
float
,
c'
est
à
dire
les
nombres
à
virgules
.

La
virgule
est
spécifiée
par
le
point
«
.

»
.

La
puissance
de
10
s'
exprime
avec
le
«
e
»
ou
le
«
e
»
.

$var=1.234
;
$var2=1.1e4
;
//
1.1
*
10^4
:
11000
3.5.4
Chaînes
de
caractères
Une
chaîne
est
une
séquence
de
caractères
.

Php
travaille
en
ASCII
soit
256
caractères
,
mais
ne
supporte
pas
encore
le
format
Unicode
,
prévu
dans
la
version
5
.

Il
n'
y
a
pas
de
limite
théorique
pour
la
taille
de
la
chaîne
.

On
distingue
trois
syntaxes
pour
utiliser
un
chaîne
à
Les
guillemets
simples
'
...
'
(
apostrophes
)
:
Comme
en
shell
,
tous
les
caractères
inclus
dans
la
chaîne
sont
sortis
tels
quels
sans
interprétation
.

si
vous
devez
afficher
un
guillemet
simple
,
il
faudra
l'
échapper
:
\
'
•
Les
guillemets
doubles
"
...
"
:
Certaines
séquences
de
caractères
sont
interprétées
et
les
variables
sont
substituées
(
remplacées
par
leur
valeur
)
.

•
HereDoc
:
Identique
au
HereScripts
en
Shell
.

Le
texte
saisi
jusque
à
un
délimiteur
spécifié
est
placé
dans
la
variable
.

Voici
le
tableau
issu
de
la
documentation
Php
du
séquences
pouvant
être
utilisés
avec
les
guillemets
doubles
.

Séquence
Valeur
\n
Nouvelle
ligne
(
linefeed
,
Lf
ou
0x0A
(
10
)
en
ASCII
)
\r
Retour
à
la
ligne
(
carriage
return
,
CR
ou
0x0D
(
13
)
en
ASCII
)
\t
Tabulation
horizontale
(
HT
ou
0x09
(
9
)
en
ASCII
)
çù
Antislash
\$
Caractère
$
\
"
Guillemets
doubles
Une
séquence
de
caractères
qui
permet
de
rechercher
un
nombre
en
\[0-7]{1,3
à
notation
octale
.

\x[0-9A-Fa-
Une
séquence
de
caractères
qui
permet
de
rechercher
un
nombre
en
f]{1,2
à
notation
hexadécimale
.

echo
'
Attention
l\'abus
d\'alcool
est
dangereux
'
;
$var=2345
;
echo
"
la
valeur
de
\$var
est
$var\n
"
;
$toto=
<<<FIN
So
ROHAUT
Cours
Programmation
Php
page
16/93
Salut
les
ami
Comment
ça
va
?

FIN
;
echo
$toto
;
N'
importe
quelle
variable
peut
être
affichée
dans
une
chaîne
comme
ci-dessus
mais
attention
si
deux
variables
ont
un
nom
proche
!

Il
faut
alors
utiliser
les
accolades
à
}
comme
en
shell
.

Enfin
on
peut
accéder
à
n'
importe
quel
caractère
dans
une
chaîne
en
indiquant
sa
position
(
qui
commence
à
zéro
)
entre
deux
accolades
collées
juste
après
le
nom
de
la
variable
.

$fic='toto.fic
'
;
$fics='riri
fifi
loulou
'
;
echo
"
$fics
${fic}s
"
;
//
affiche
riri
fifi
loulou
toto.fics
echo
"
$fic{3
}
"
;
//
affiche
o
On
peut
facilement
concaténer
deux
chaînes
avec
l'
opérateur
point
«
.

»
.

On
peut
ajouter
du
texte
à
une
chaîne
avec
l'
opérateur
point
égal
«
.=
»
.

$str="Salut
les
ami
!

\n
"
;
$str.="Comment
ça
va
?

"
;
//
"
Salut
les
Amis
!

\nComment
ça
va
?

$str2=$str."\n
"
;
//
"
Salut
les
Amis
!

\nComment
ça
va
?

\n
si
vous
devez
utiliser
une
chaîne
de
caractères
comme
valeur
numérique
(
dans
une
addition
par
exemple
,
attention
à
son
contenu
.

La
chaîne
sera
de
type
double
(
réel
)
si
elle
contient
un
'
e
'
ou
un
'
e
'
.

Sinon
ce
sera
un
entier
.

La
valeur
numérique
est
ensuite
définie
par
le
début
de
la
chaîne
.

si
la
chaîne
commence
par
une
valeur
numérique
,
elle
sera
utilisée
,
sinon
elle
sera
égale
à
0
zéro
.

si
la
première
expression
est
une
chaîne
,
le
type
de
variable
dépend
de
la
seconde
expression
.

$val=10+"2.55
"
;
//
float
,
12.55
$val=1+"toto2
"
;
//
1
p
0
=
1
$val=2+"3
petits
cochons
"
;
//
2
p
3
=
5
(
le
3
est
en
premier
dans
la
chaîne
)
3.5.5
Les
tableaux
Un
tableau
Php
est
une
association
ordonnée
.

Une
association
fait
correspondre
des
valeurs
à
des
clés
.

Les
tableaux
sont
très
souples
,
ils
peuvent
avoir
de
multiples
dimensions
,
être
indexés
par
une
clé
numérique
ou
texte
,
être
utilisés
comme
table
de
hachage
,
une
pile
,
une
queue
,
...
Une
valeur
de
tableau
peut
être
elle-même
un
tableau
,
pour
créer
des
arbres
par
exemple
.

Un
tableau
est
créé
avec
la
fonction
array()
qui
prend
comme
arguments
du
paires
à
key
=>
value
»
séparées
par
des
virgules
.

La
clé
peut
être
soit
un
entier
soit
du
texte
.

Attention
,
8
est
un
entier
,
08
une
chaîne
!

si
la
clé
est
absente
alors
c'
est
la
dernière
clé
entière
plus
1
qui
est
choisie
.

si
c'
est
la
première
,
c'
est
0
zéro
.

On
accède
au
éléments
de
un
tableau
à
l'
aide
du
crochets
«
[
et
]
»
.

On
place
entre
ces
crochets
la
clé
entière
ou
la
chaîne
.

$var=array(10,15,17,23,9)
;
echo
$var[0
]
;
//
10
echo
$var[3
]
;
//
17
$tab=array("a"=>12,"nom"=>"toto","pipo",17,4=>5)
;
echo
$tab[0
]
;
//
pipo
echo
$tab[1
]
;
//
17
echo
$tab['a
'
]
;
//
12
echo
$tab['nom
'
]
;
//
toto
So
ROHAUT
Cours
Programmation
Php
page
17/93
L'
utilisation
de
la
fonction
array
n'
est
pas
obligatoire
et
on
peut
déclarer
un
tableau
à
la
volée
.

$tab2[1]=2
;
$tab2[]=6
;
//
equivaut
$tab2[2]=6
$tab2['test']='Ma
chaîne
'
;
On
peut
aussi
créer
des
tableaux
multidimensionnels
à
l'
aide
du
deux
méthodes
précédentes
.

$tab=array("un"=>array("riri",1=>"fifi",2=>'loulou'),2=>array(1,2,3),array('un
'
,
e
deux','trois
'
)
)
;
echo
$tab['un'][0
]
;
//
riri
echo
$tab[2][1
]
;
//
2
echo
$tab[3][2
]
;
//
trois
$tab2['un']['deux']='test
'
;
//
créé
un
tableau
à
deux
dimensions
Il
existe
une
fonction
très
pratique
pour
lister
le
contenu
de
un
tableau
,
ou
pour
modifier
les
éléments
:
foreach(
)
.

$tab=array(1=>'un',2=>'deux',3=>'trois')
;
foreach($tab
as
$valeur
)
à
echo
"
$valeur
\n
"
;
//
affiche
un
deux
trois
}
foreach($tab
as
$cle
=>
$valeur
)
à
echo
"
$cle
çù
$valeur\n
"
;
//
affiche
1
=>
un
,
2
çù
deux
,
3
çù
trois
}
3.5.6
La
variable
objet
Les
objets
se
créent
avec
l'
instruction
class
.

Pour
créer
une
instace
de
l'
objet
il
faut
utiliser
le
mot
clé
new
.

class
test
à
function
affiche_hello()
à
echo
"
Hello
!

"
;
}
}
$obj=new
test
;
$obj->affiche_hello()
;
3.6
Les
constantes
Les
constantes
est
un
nom
qui
prend
une
valeur
ne
pouvant
pas
être
modifiée
une
foi
fixée
.

Une
constante
n'
est
accessible
qu'
en
lecture
seule
.

Elles
sont
sensibles
à
la
casse
et
doivent
par
convention
être
écrites
en
majuscules
.

On
définit
une
constante
avec
la
fonction
define()
et
doit
respecter
certaines
règles
:
à
une
constante
ne
commence
pas
par
un
$
•
une
constante
est
accessible
depuis
n'
importe
quel
endroit
du
code
•
une
constante
ne
peut
pas
être
redéfinie
à
une
constante
ne
peut
contenir
de
un
scalaire
(
entier
,
booléen
,
chaîne
,
double
)
.

define(CONSTANTE,"valeur")
;
echo
CONSTANTE
;
//
affiche
"
valeur
"
So
ROHAUT
Cours
Programmation
Php
page
18/93
3.7
Obtenir
le
type
de
une
variable
Pour
obtenir
le
type
de
une
variable
,
on
utilise
la
fonction
à
gettype
»
qui
retourne
une
chaîne
de
texte
indiquant
le
type
.

mais
attention
rien
ne
garantit
que
le
résultat
soit
le
même
de
une
version
Php
à
une
autre
.

Les
types
retournés
sont
"
boolean
"
,
"
integer
"
,
"
double
"
(
pour
des
raisons
historiques
,
"
double
"
est
retournée
lorsqu'
une
valeur
de
type
float
est
fournie
,
au
lieu
de
la
chaîne
"
float
"
)
,
"
string
"
,
"
array
"
,
"
object
"
,
"
resource
"
(
depuis
Php
4
)
,
"
NULL
"
(
depuis
Php
4
)
,
"
unknown
type
"
si
vous
souhaitez
réellement
tester
le
type
de
une
variable
,
il
est
préférable
de
utiliser
les
fonctions
de
type
«
isçë
»
:
is_array
,
is_bool
,
is_double
,
is_float
,
is_int
,
is_integer
,
is_long
,
is_null
,
is_numeric
,
is_object
,
is_real
,
is_resource
,
is_string
,
is_callable
(
est
-ce
une
fonction
)
.

3.8
Définir
et
supprimer
une
variable
si
vous
souhaitez
savoir
si
une
variable
est
définie
,
c'
est
à
dire
si
elle
est
affectée
,
on
utilise
à
isset
»
.

Enfin
si
vous
souhaitez
supprimer
une
variable
,
il
faut
utiliser
à
unset
»
.

So
ROHAUT
Cours
Programmation
Php
page
19/93
4
Les
opérateurs
4.1
La
précédence
du
opérateurs
C'
est
l'
ordre
dans
lequel
les
valeurs
doivent
être
analysées
.

Ainsi
l'
expression
4
p
3
*
7
n'
est
pas
lue
de
gauche
à
droite
et
ne
retourne
pas
49
mais
25
.

Voici
le
tableau
du
priorités
du
opérateurs
par
ordre
croissant
de
priorité
:
Associativité
Opérateurs
gauche
,
gauche
or
gauche
xor
gauche
and
droite
print
gauche
=
au
-=
çù
/=
.=
%=
&=
çù
^=
çù
<<=>>=
gauche
?

:
gauche
|
gauche
&&
gauche
à
gauche
à
gauche
&
non-associative
==
!

=
çùë
!

çù
non-associative
à
<=
>
çù
gauche
<<
çù
gauche
p
-
.

gauche
*
/
%
droite
!

à
uu
--
(
int
)
(
double
)
(
string
)
(
array
)
(
object
)
@
droite
[
non-associative
new
4.2
Opérateurs
arithmétiques
Les
opérateurs
p
,
-
,
*
,
/
et
%
.

Le
«
%
»
est
le
modulo
:
le
reste
de
la
division
.

4.3
Opérateurs
de
assignation
Le
principal
est
le
=
mais
on
a
aussi
comme
en
C
des
opérateurs
combinés
uà
,
-=
,
*=
,
/=
,
%=
,
.=
...
4.4
Opérateurs
sur
les
bits
Les
opérateurs
sont
le
&
(
AND
)
,
|
(
OR
)
,
^
(
XOR
)
,
~
(
NOT
,
~$a
)
,
>>
(
$a>>$b
décalage
de
bb
bits
So
ROHAUT
Cours
Programmation
Php
page
20/93
sur
la
gauche
)
et
<<
(
ça
çù
$b
décalage
de
bb
bits
sur
la
droite
)
.

Un
décalage
de
bits
sur
la
gauche
équivaut
à
une
multiplication
par
deux
,
un
décalage
sur
la
droite
à
une
division
par
deux
.

4.5
Opérateurs
de
comparaison
Les
opérateurs
sont
==
(
$a==$b
,
même
valeur
)
,
===
(
$a===$b
,
même
valeur
et
même
type
)
,
!

=
ou

(
différent
)
,
<
,
>
,
<=
,
>=
.

Il
y
a
aussi
l'
opérateur
ternaire
«
?

:
à
expr1
?

expr2:expr3
si
expr1
est
vrai
alors
expr2
sinon
expr3
.

4.6
Opérateur
de
erreur
On
dispose
de
un
opérateur
spécial
@
qui
appliqué
à
une
expression
empêche
la
sortie
de
un
message
de
erreur
en
cas
de
problème
.

On
peut
toujours
récupérer
le
message
de
erreur
éventuel
à
l'
aide
de
la
variable
$php_errormsg
mais
uniquement
si
l'
option
à
track_errors
»
est
à
«
On
»
dans
le
php.ini
.

$retour=@$tab['toto
'
]
;
//
ne
retourne
pas
d'
erreurs
si
l'
index
toto
n'
existe
pas
4.7
Opérateur
de
exécution
On
peut
exécuter
des
commandes
externes
au
Php
comme
en
Shell
avec
les
opérateurs
à
guillemts
inverses
à
à
»
(
altgr+6
)
.

Attention
l'
option
à
safeëmode
»
doit
être
à
«
On
»
dans
le
php.ini
.

On
peut
aussi
utiliser
la
fonction
à
shell_exec
»
qui
fait
exécuter
une
commande
par
le
shell
.

4.8
Opérateurs
de
incrémentation/décrémentation
On
dispose
comme
en
C
des
opérateurs
uu
et
--
,
à
utiliser
avant
ou
après
le
nom
de
variable
.

çauu
;
//
retourne
ça
pui
l'
incrémente
de
1
++$a
;
//
incrémente
ça
de
1
pui
retourne
ça
ça
--
;
//
retourne
$a
pui
décrémente
de
1
--
ça
;
//
décrémente
ça
de
1
pui
retourne
$a
Attention
!

Les
opérateurs
réagissent
au
types
de
variables
.

Le
Php
réagit
comme
en
PERL
.

Ainsi
:
$a='Z
'
;
$a++
;
echo
$a
;
//
retourne
aa
çauu
;
echo
$a
;
//
retourne
AB
4.9
Opérateurs
logiques
Les
opérateurs
logiques
sont
:
«
and
à
ou
«
&&
»
(
$a
and
$b
,
$a
&&
bb
)
vrai
si
$a
et
$b
sont
vrais
à
or
»
ou
à
||
»
(
$a
or
bb
,
$a
çù
bb
)
vrai
si
$a
ou
$b
sont
vrais
à
xor
»
(
$a
xor
bb
)
vrai
si
$a
ou
$b
sont
vrais
mais
pas
les
deux
en
même
temps
«
!

»
(
!

ça
)
vrai
si
ça
est
faux
.

Attention
,
and
et
or
n'
ont
pas
la
même
priorité
(
priorité
plus
faible
)
que
&&
et
çù
!

So
ROHAUT
Cours
Programmation
Php
page
21/93
4.10
Opérateurs
de
chaînes
Il
y
a
deux
opérateurs
de
chaînes
:
le
«
.

»
qui
concatène
deux
chaînes
entre
elles
et
le
«
.=
»
déjà
vu
qui
est
l'
opérateur
de
assignation
.

$a="Bonjour
"
;
$b=$a
.
"

les
ami
"
;
//
$b
contient
Bonjour
les
ami
$b.=
"
!

Salut
.
"
;
//
$b
contient
Bonjour
les
ami
!

Salut
.

4.11
Opérateur
de
tableaux
On
peut
à
additionner
à
deux
tableaux
entre
eux
avec
le
«
p
»
:
le
tableau
de
droite
est
ajouté
au
tableau
de
gauche
.

So
ROHAUT
Cours
Programmation
Php
page
22/93
5
La
notion
de
expression
En
Php
,
une
expression
peut
être
résumée
en
«
tout
ce
qui
a
une
valeur
»
.

Ceci
dit
,
on
remarque
vite
que
en
php
tout
ou
presque
est
une
expression
.

Une
variable
ou
une
constante
se
voient
affectés
des
valeurs
.

Cette
valeur
est
donc
l'
expression
de
la
variable
ou
de
la
constante
.

Nous
pouvons
résumer
en
disant
que
une
expression
représente
tout
ce
qui
peut
être
évalué
.

On
ne
peut
évaluer
que
les
valeurs
...
Une
fonction
peut
aussi
être
une
expression
si
elle
retourne
une
valeur
.

On
dit
généralement
que
une
fonction
a
retourné
telle
valeur
.

Une
comparaison
est
aussi
une
expression
:
elle
retourne
une
valeur
booléenne
.

Un
calcul
est
aussi
une
expression
,
puisque
une
valeur
est
retournée
,
affectée
,
calculée
.

Php
est
orienté
expression
ce
qui
fait
que
tout
ou
presque
en
Php
est
une
expression
.

Php
cherche
donc
à
décomposer
tout
ce
qui
est
possible
en
expressions
à
évaluer
,
pour
optimiser
ses
traitements
.

Voici
quelques
exemples
.

$a=2
;
On
distingue
au
premier
coup
de
oeil
deux
valeurs
:
la
variable
ça
et
la
valeur
2
,
la
variable
ça
étant
mise
à
jour
avec
la
valeur
2
.

Or
en
interne
il
y
a
une
troisième
valeur
qui
rentre
en
jeu
:
la
valeur
de
l'
assignation
,
ici
elle-même
assignée
à
2
.

Cette
ligne
signifie
en
fait
:
à
$a=2
est
une
expression
qui
vaut
2
»
.

$b=$a=2
;
Les
assignations
sont
analysées
de
droite
à
gauche
.

Ici
nous
avons
l'
expression
$a=2
qui
vaut
donc
2
.

bb
vaut
donc
2
aussi
.

C'
est
plus
rapide
à
écrire
et
à
exécuter
que
$a=2
;
$b=2
;
$a=$a+3
;
Php
évalue
d'abord
l'
expression
$a+3
soit
la
valeur
de
ça
incrémentée
de
3
,
et
assigne
la
nouvelle
valeur
à
$a
.

$a+=3
;
Le
résultat
est
le
même
,
mais
il
est
plus
rapide
car
$a
n'
est
évalué
qu'
une
seule
foi
.

On
peut
en
arriver
à
avoir
des
expressions
surprenantes
:
$a=2
;
$b=$a+=3
;
La
variable
ça
est
incrémentée
de
3
et
vaut
donc
5
.

L'
expression
$a+=3
vaut
5
.

bb
se
voit
assigné
la
valeur
5
.

L'
expression
vaut
donc
5
.

Dernière
chose
:
ça
?

$b:$c
si
l'
expression
$a
est
vrai
,
l'
expression
$b
est
évaluée
,
sinon
l'
expression
$c
est
évaluée
.

So
ROHAUT
Cours
Programmation
Php
page
23/93
$a=TRUE
;
$b=2
;
$c=3
;
echo
$a
?

$b:$c
;
//
affiche
2
So
ROHAUT
Cours
Programmation
Php
page
24/93
6
Les
structures
de
contrôle
6.1
if
if(expression)
commande
ou
{
bloc
de
commandes
à
else
commande
ou
{
bloc
de
commandes
à
Il
y
a
aussi
le
«
elseif
»
,
combinaison
du
if
et
du
else
.

Le
elseif
en
un
mot
peut
aussi
s'
écrire
en
deux
mots
:
le
résultat
est
le
même
.

On
peut
écrire
des
elseif
en
chaîne
.

Le
premier
dont
l'
expression
est
vrai
est
exécuté
.

If(expression)
commande
ou
{
bloc
de
commandes
à
elsif(expression)
commande
ou
{
bloc
de
commandes
à
elsif(expression)
commande
ou
{
bloc
de
commandes
}
...
On
peut
placer
du
HTML
comme
commande
ou
dans
le
bloc
de
commande
.

<
?

php
if
(
$a
==
5
)
{
?

>
à
=
5
<
?

php
}
?

>
On
peut
aussi
utiliser
une
syntaxe
alternative
:
on
ouvre
le
bloc
(
juste
après
le
if
,
le
else
ou
le
elseif
)
avec
les
«
:
»
deux
points
,
et
on
ferme
l'
instruction
avec
«
endif
»
.

<
?

php
if
(
$a
==
5
)
:
print
"
a
=
5
"
;
print
"
...
"
;
elseif
(
$a
==
6
)
:
print
"
a
=
6
"
;
print
"
!

!
!

"
;
else
:
print
"
a
ne
vaut
ni
5
ni
6
"
;
endif
;
?

>
6.2
while
6.2.1
while
classique
C'
est
la
boucle
à
tant
que
à
simple
:
tant
que
la
condition
n'
est
pas
vraie
,
on
continue
la
boucle
.

L'
expression
est
placée
en
début
de
boucle
:
si
l'
expression
est
fausse
avant
de
rentrer
dans
la
boucle
,
la
boucle
n'
est
pas
exécutée
.

While(expression)
commande
ou
{
bloc
de
commandes
à
On
peut
aussi
utiliser
la
syntaxe
alternative
:
while(expression)
:
commande
ou
{
bloc
de
commandes
à
endwhile
6.2.2
do
...
while
C'
est
la
seconde
possibilité
.

Dans
ce
cas
la
commande
ou
le
bloc
de
commande
est
exécutée
au
So
ROHAUT
Cours
Programmation
Php
Page
25/93
moins
une
foi
,
car
l'
expression
conditionnelle
est
testée
en
fin
de
boucle
.

do
{
bloc
de
commandes
à
while(expression)
6.3
for
Le
«
for
»
du
Php
est
identique
au
«
for
»
du
Co
for(expr1
;
expr2
;
expr3
)
commande
ou
{
bloc
de
commandes
}
«
expr1
»
est
exécutée
à
la
première
entrée
dans
la
boucle
.

à
expr2
»
est
exécutée
à
chaque
début
de
itération
jusque
à
ce
que
l'
expression
soit
fausse
auquel
cas
on
sort
de
la
boucle
.

à
expr3
»
est
exécutée
à
la
fin
de
l'
itération
.

L'
usage
habituel
de
une
telle
boucle
est
de
placer
l'
état
initial
en
expr1
,
la
condition
de
sortie
en
expr2
et
le
calcul
en
expr3
.

mais
on
peu
effectuer
toutes
sortes
de
choses
.

//
de
1
à
10
for
(
çi
=
1
;
çi
çù
10
;
print
çi
,
çiu
)
//
infini
for(
;
;
)
//
de
1
à
10
for
(
çi
=
1
;
çi
çù
10
;
print
çi
,
çiu
)
;
On
peut
employer
une
syntaxe
alternative
avec
le
«
:
»
et
à
endfor
»
.

for(expr1
;
expr2
;
expr3
)
:
commande
ou
{
bloc
de
commandes
à
endfor
6.4
foreach
La
boucle
à
foreach
»
est
peut-être
l'
une
du
plus
intéressantes
pour
la
manipulation
de
tableaux
ou
de
résultats
de
requêtes
SQL
.

Elle
permet
de
lister
les
tableaux
.

Elle
dispose
de
deux
syntaxes
.

foreach(array_expression
as
$value
)
commandes
foreach(array_expression
as
$key
=>
$value
)
commandes
La
première
syntaxe
récupère
les
éléments
du
tableau
un
par
un
,
séquentiellement
.

La
valeur
de
l'
élément
courant
du
tableau
est
placée
dans
$value
.

La
seconde
syntaxe
est
presque
identique
,
sauf
que
en
plus
la
clé
(
l'
index
)
de
l'
élément
actuel
est
placée
dans
$key
.

Attention
:
modifier
la
valeur
de
$value
(
ou
de
$key
)
ne
modifie
pas
le
tableau
car
cette
boucle
travaille
sur
une
copie
,
pas
une
référence
.

Par
contre
dans
le
second
cas
,
comme
on
dispose
de
la
clé
,
rien
n'
empêche
de
assigner
quoi
que
ce
soit
à
l'
élément
courant
.

Remarque
:
un
appel
à
foreach
«
rembobine
à
automatiquement
le
tableau
à
son
premier
élément
.

mais
pas
dans
les
autres
boucles
,
il
faut
alors
utiliser
«
reset
»
.

reset($arr)
;
while
(
list(
,
$value
)
=
each
($arr))
à
echo
"
Valeur
:
$value<br>\n
"
;
}
So
ROHAUT
Cours
Programmation
Php
page
26/93
foreach
(
$arr
as
$value
)
à
echo
"
Valeur
:
$value<br>\n
"
;
}
$a
=
array
(
"
un
"
=>
1
,
"
deux
"
çù
2
,
"
trois
"
çù
3
,
"
dix-sept
"
çù
17
)
;
foreach($a
as
$k
=>
$v
)
{
print
"
\$a[$k
]
=>
$v.\n
"
;
}
6.5
break
et
continue
L'
instruction
«
break
»
permet
de
sortir
de
un
for
,
while
,
foreach
ou
switch
.

On
peut
lui
indiquer
de
combien
de
structures
on
souhaite
sortir
si
elles
sont
emboîtées
.

L'
instruction
«
continue
»
permet
de
passer
à
l'
itération
suivante
.

Attention
Php
conside
le
switch
comme
une
boucle
,
et
dans
ce
cas
,
réévalue
le
switch
.

On
peut
indiquer
à
continue
combien
de
structures
emboîtées
relancer
.

6.6
switch
Le
«
switch
»
est
équivalent
à
une
série
de
if
et
permet
de
comparer
avec
un
grand
nombre
de
valeurs
.

switch
(
çi
)
à
case
0
:
print
"
i
egale
0
"
;
break
;
case
1
:
print
"
i
egale
1
"
;
break
;
case
2
:
print
"
i
egale
2
"
;
break
;
default
:
print
"
i
est
inférieur
à
0
ou
supérieur
à
2
»
;
à
Le
switch
s'
arrête
à
la
première
expression
case
vraie
pui
exécute
le
code
suivant
dans
l'
ordre
indiqué
,
jusque
à
la
première
instruction
break
.

si
il
n'
y
a
pas
de
break
,
tout
le
code
jusque
à
la
fin
du
switch
est
exécuté
.

Dans
l'
exemple
suivant
,
si
$i
vaut
0
,
tous
les
print
seront
affichés
!

switch
(
çi
)
à
case
0
:
print
"
i
egale
0
"
;
case
1
:
print
"
i
egale
1
"
;
case
2
:
print
"
i
egale
2
"
;
}
Notez
aussi
que
le
default
doit
intervenir
en
dernier
,
sinon
il
n'
a
aucun
intérêt
.

Enfin
on
peut
employer
une
syntaxe
alternative
avec
«
:
»
et
«
endswitch
»
.

So
ROHAUT
Cours
Programmation
Php
page
27/93
switch
(
çi
)
:
case
0
:
print
"
i
egale
0
"
;
break
;
case
1
:
print
"
i
egale
1
"
;
break
;
endswitch
6.7
return
Contrairement
à
d'
autres
langages
,
à
return
»
n'
est
pas
une
fonction
mais
une
instruction
.

Dans
une
fonction
,
return
sert
à
sortir
de
celle
-ci
et
à
retourner
une
valeur
.

Dans
un
script
,
elle
sort
de
celui
-ci
.

Attention
cependant
dans
les
scripts
inclus
(
voir
require
et
include
)
:
le
return
dans
ce
type
de
code
considère
que
il
sort
de
la
fonction
à
require
»
ou
à
include
»
et
donc
ne
sort
pas
du
script
ou
de
la
fonction
dans
lesquels
ce
code
a
été
inclus
!

Comme
return
est
un
élément
du
langage
et
pas
une
fonction
il
y
a
pas
besoin
de
utiliser
les
parenthèses
.

6.8
require
et
include
(
_once
)
à
require
»
et
«
include
»
incluent
à
l'
endroit
actuel
et
exécutent
le
fichier
Php
.

Ils
sont
identiques
dans
leur
fonctionnement
à
une
exception
:
le
traitement
du
erreurs
.

Un
include
produit
un
«
warning
»
(
le
code
continue
en
principe
à
s'
exécuter
)
tandis
que
un
require
produit
une
«
erreur
fatale
»
(
l'
exécution
s'
arrête
)
.

Comme
require
et
include
sont
des
éléments
du
langage
et
pas
du
fonctions
il
y
a
pas
besoin
de
utiliser
les
parenthèses
.

à
require_once
»
et
à
include_once
»
ressemblent
à
leurs
homologues
avec
cependant
une
différence
.

Quoi
qu'
il
arrive
,
le
fichier
est
inclus
une
seule
foi
.

si
un
second
«
require_once
à
apparaît
avec
le
même
fichier
,
l'
instruction
ne
sera
pas
exécutée
.

So
ROHAUT
Cours
Programmation
Php
page
28/93
7
Les
fonctions
7.1
Syntaxe
et
portée
Voici
la
syntaxe
de
une
fonction
.

function
fonc($arg1
,
$arg2
,
$arg3
,
...
,
$argn
)
{
bloc
de
commandes
return
$valeur
}
Une
fonction
n'
a
pas
besoin
de
être
déclarée
avant
de
être
utilisée
(
sauf
si
vous
voulez
rester
compatible
avec
PHP3
)
,
du
moment
qu'
elle
apparaît
dans
le
script
.

Il
y
a
cependant
deux
exceptions
:
si
la
fonction
est
conditionnelle
,
c'
est
à
dire
déclarée
dans
un
if
,
ou
si
la
fonction
est
déclarée
dans
une
autre
fonction
.

Dans
le
premier
cas
elle
sera
inconnue
du
reste
du
code
tant
que
la
condition
du
if
n'
est
pas
vraie
.

Dans
le
second
cas
elle
ne
sera
connue
que
quand
la
première
fonction
sera
exécutée
.

Voici
un
exemple
tiré
du
manuel
.

Pour
le
premier
cas
:
$makefoo
à
true
;
/*
Impossible
de
appeler
foo()
ici
,
car
cette
fonction
n'
existe
pas
.

mais
nous
pouvons
utiliser
bar()
*/
bar()
;
if
(
$makefoo
)
à
function
foo
(
)
à
echo
"
je
n'
existe
pas
tant
que
le
programme
n'
est
pas
passé
ici.\n
"
;
}
à
/*
Maitenant
,
nous
pouvons
appeler
foo()
car
$makefoo
est
maintenant
vrai
*/
if
(
$makefoo
)
foo()
;
function
bar()
à
echo
"
je
existe
dès
le
début
du
programme.\n
"
;
}
Pour
le
second
cas
:
function
foo()
à
function
bar()
à
echo
"
je
n'
existe
pas
tant
que
foo()
n'
est
pas
appelé.\n
"
;
}
}
/*
Impossible
de
appeler
bar()
ici
car
il
n'
existe
pas
.

*/
foo()
;
/*
Maintenant
,
nous
pouvons
appeler
bar()
,
car
l'
utilisation
de
foo()
l'
a
rendu
accessible
.

*/
bar()
;
7.2
Arguments
On
peut
passer
autant
de
arguments
que
souhaité
à
une
fonction
Php
,
de
tous
types
.

Les
arguments
So
ROHAUT
Cours
Programmation
Php
page
29/93
sont
séparés
par
des
virgules
.

Par
défaut
ils
sont
passés
par
copie
.

function
affiche($msg)
à
echo
$msg
;
}
Il
est
possible
de
passer
des
arguments
par
référence
,
on
peut
donc
en
changer
la
valeur
à
l'
intérieur
de
la
fonction
.

Pour
cela
on
rajoute
un
«
&
»
devant
l'
argument
.

On
peut
passer
ponctuellement
une
variable
par
référence
en
plaçant
un
«
&
»
devant
son
nom
lors
de
l'
appel
de
la
fonction
.

function
modifëëm
à
$msg="coucou
"
;
}
$msg="salut
"
;
modifëmsgë
;
echo
$msg
;
//
coucou
On
peut
aussi
définir
des
valeurs
par
défaut
mais
ATTENTION
,
dans
la
liste
du
paramètres
les
valeurs
par
défaut
doivent
être
en
dernier
.

function
affiche($nom
,
$prenom="toto
"
)
{
echo
"
$nom
$prenom
"
;
}
Enfin
on
peut
utiliser
un
nombre
variable
de
arguments
avec
les
fonctions
func_num_args
,
func_get_arg
et
func_get_args
.

function
foo()
à
$numargs
=
func_num_args()
;
echo
"
Nombre
de
arguments
:
$numargs\n
"
;
}
foo
(
1
,
2
,
3
)
;
//
affiche
'
Nombre
de
arguments
:
3
'
7.3
Valeur
de
retour
On
retourne
une
valeur
avec
l'
instruction
à
return
»
.

On
peut
retourner
tout
type
de
valeurs
,
mais
pas
plusieurs
en
même
temps
.

Cependant
rien
n'
empêche
dans
ce
cas
de
retourner
un
tableau
.

Une
fonction
peut
aussi
retourner
une
référence
.

Dans
ce
cas
elle
doit
être
déclarée
avec
un
«
&
»
devant
son
nom
.

function
carre
(
$num
)
à
return
$num
*
$num
;
}
echo
carre
(
4
)
;
//
affiche
e
16
'
7.4
Fonctions
internes
En
plus
des
fonctions
définies
par
l'
utilisateur
Php
propose
un
grand
nombre
de
fonctions
internes
couvrant
une
multitude
de
domaines
.

Pour
accéder
à
ces
fonctions
il
faut
simplement
les
appeler
par
leur
nom
et
que
le
module
correspondant
soit
compilé
avec
Php
.

Nous
verrons
dans
les
chapitres
suivants
comment
en
utiliser
certaines
.

So
ROHAUT
Cours
Programmation
Php
page
30/93
8
Gestion
du
formulaires
en
Php
8.1
GET
et
POST
Le
but
est
de
récupérer
le
contenu
du
champs
de
un
formulaire
HTML
dans
notre
code
Php
pour
pouvoir
le
traiter
.

Lorsqu'
un
formulaire
est
envoyé
à
un
script
php
,
toutes
les
variables
seront
disponibles
automatiquement
dans
le
script
.

Les
formulaires
peuvent
être
de
type
GET
ou
POST
.

Pour
rappel
,
dans
un
formulaire
de
type
GET
,
les
informations
sont
passées
directement
par
l'
URL
en
clair
,
ce
qui
peut
poser
des
problèmes
de
limitations
suivant
le
serveur
(
de
256
à
8192
octets
selon
le
cas
)
.

La
méthode
POST
n'
a
pas
ce
genre
de
limitation
,
car
les
informations
sont
transmises
par
le
conteneur
de
variables
globales
(
dans
l'
entête
)
et
sont
de
plus
cachées
.

php
peut
gérer
les
deux
méthodes
de
manière
transparente
.

8.2
Récupération
par
tableau
Chaque
champ
de
formulaire
en
Php
est
défini
par
un
nom
et
une
valeur
.

Dans
un
script
,
Php
va
récupérer
ces
noms
et
ces
valeurs
dans
des
tableaux
spéciaux
dit
superglobaux
(
accessibles
depuis
partout
)
.

Pour
la
méthode
GET
,
le
tableau
est
$_GET
,
pour
la
méthode
POST
le
tableau
est
$_POST
.

si
vous
ne
souhaitez
pas
vous
soucier
de
la
méthode
,
vous
pouvez
utiliser
le
tableau
$_REQUEST
.

En
index
on
aura
le
nom
du
champ
de
formulaire
(
ou
de
la
variable
passée
en
URL
)
et
en
valeur
la
valeur
du
champ
.

Par
exemple
:
<form
action="foo.php
"
method="post">
Name
:
<input
type="text
"
name="username"><br>
Email
:
<input
type="text
"
name="email"><br>
<input
type="submit
"
name="submit
"
value="Submit
me
!

"
>
</form>
Dans
la
page
Php
foo.php
on
aura
:
<
?

php
echo
$_POST['username
'
]
;
echo
$_REQUEST['email
'
]
;
?

à
Imaginons
l'
appel
de
une
page
test.php
par
une
URL
comme
ceci
:
http://www.monsite.com/test.php
?

id=1
Ici
on
transmet
une
variable
via
une
URL
et
donc
la
méthode
implicite
GET
.

Pour
récupérer
«
id
»
dans
un
code
php
on
peut
donc
faire
:
<
?

php
echo
$_GET['id
'
]
;
echo
$_REQUEST['id
'
]
;
?

à
$_GET
ne
contiendra
que
les
variables
de
type
GET
.

$_POST
ne
contiendra
que
les
variables
de
type
POST
.

$_REQUEST
contient
les
variables
de
type
POST
et
GET
mais
aussi
les
variables
de
cookies
.

Il
est
aussi
possible
de
procéder
autrement
en
récupérant
le
nom
du
champ
directement
en
tant
que
variable
sans
passer
par
un
tableau
.

Pour
cela
il
faut
vérifier
dans
le
fichier
php.ini
que
la
valeur
register_globals
est
à
on
.

Dans
ce
cas
les
noms
du
champs
de
formulaire
seront
les
So
ROHAUT
Cours
Programmation
Php
Page
31/93
noms
du
variables
:
<
?

php
echo
$username
;
echo
$email
;
?

>
8.3
Récupération
directe
si
cette
valeur
est
à
off
et
que
pour
diverses
raisons
(
sécurité
,
pas
le
droit
,
etc
)
vous
ne
souhaitez/pouvez
pas
la
modifier
,
il
existe
tout
de
même
une
méthode
.

La
fonction
à
import_request_variables
»
permet
de
effectuer
explicitement
la
même
chose
.

Cette
fonction
prend
un
ou
deux
paramètres
,
le
second
étant
optionnel
.

Après
exécution
,
on
récupère
les
variables
sans
passer
par
un
tableau
.

Le
premier
paramètre
est
le
type
de
variables
qu'
on
souhaite
récupérer
:
–
P
/
p
:
variables
de
type
POST
–
g
/
g
:
variables
de
type
GET
–
C
/
c
:
variables
de
type
cookie
On
peut
cumuler
l'
ensemble
mais
attention
à
l'
ordre
!

Le
second
paramètre
est
le
préfixe
qu'
on
souhaite
donner
au
nom
du
variables
qu'
on
va
récupérer
.

Voici
deux
exemples
:
<
?

php
import_request_variables("p")
;
echo
$username
;
?

>
<
?

php
import_request_variables("P","Post_")
;
echo
$Post_username
;
?

>
On
peut
aussi
passer
par
la
fonction
à
extract
»
qui
permet
de
exporter
un
tableau
en
variables
.

Ainsi
pour
le
tableau
$_POST
:
<
?

php
extract($_POST)
;
echo
$username
;
?

à
8.4
Utiliser
des
tableaux
Les
formulaires
permettent
de
utiliser
des
listes
à
choix
multiples
et
Php
doit
donc
récupérer
l'
ensemble
du
choix
de
l'
utilisateur
.

Pour
ça
il
faut
utiliser
les
tableaux
.

<form
action="<
?

php
echo
$HTTP_SERVER_VARS['PHP_SELF
'
]
;
?

>
"
method="post">
Name
:
<input
type="text
"
name="personal[name]"><br>
Email
:
<input
type="text
"
name="personal[email]"><br>
Beer
:
<br>
<select
multiple
name="vin[]">
<option
value="bordeaux">bordeaux</option>
<option
value="beaujolais">beaujolais</option>
<option
value="loire">loire</option>
</select><br>
So
ROHAUT
Cours
Programmation
Php
Page
32/93
<input
type="hidden
"
name="action
"
value="submitted">
<input
type="submit
"
name="submit
"
value="submit
me
!

"
>
</form>
Dans
l'
exemple
précédent
si
par
exemple
on
sélectionne
plusieurs
vins
(
ex
:
bordeaux
et
beaujolais
)
on
aura
dans
$vin[0
]
bordeaux
et
$vin[1
]
beaujolais
.

So
ROHAUT
Cours
Programmation
Php
page
33/93
9
Date
et
heure
9.1
Localisation
Le
format
de
date
et
de
heure
(
format
et
langue
)
est
dépendant
de
l'
environnement
de
exécution
du
code
Php
.

Généralement
la
plupart
du
serveurs
web
incorporant
Php
sont
configurés
en
langue
anglaise
avec
une
gestion
du
informations
de
localisation
en
anglais
.

Il
peut
être
préférable
de
passer
en
français
pour
un
site
francophone
ce
qui
simplifie
largement
la
tâche
.

On
peut
effectuer
cela
avec
la
fonction
à
setlocale
»
.

Voici
deux
exemples
:
un
sous
NT/2000
et
un
autre
sous
Linux
.

if
(
substr(php_uname()
,
0
,
7
)
!

=
"
Windows
"
)
à
setlocale(LC_TIME,"fr_FR@euro")
;
à
else
à
setlocale(LC_TIME,"fr")
;
}
Dans
cet
exemple
,
nous
vérifions
d'abord
à
quel
système
nous
avons
à
faire
(
fonction
php_uname
)
pui
en
fonction
du
résultat
nous
passons
en
localisation
française
selon
deux
méthodes
.

Après
ce
changement
,
les
appels
au
fonctions
retournant
des
jours
de
la
semaine
ou
du
mois
le
feront
en
français
.

9.2
Récupérer
la
date
et
l'
heure
9.2.1
date()
Le
plus
simple
est
de
utiliser
la
fonction
à
date
»
qui
retourne
l'
heure
locale
sous
forme
de
une
chaîne
de
caractères
à
préciser
en
premier
paramètre
.

En
second
paramètre
on
peut
préciser
un
«
timestamp
»
si
on
ne
souhaite
pas
l'
heure
actuelle
.

Pour
récupérer
la
date
du
jour
:
echo
date("d/m/Y")
;
//
06/01/2004
Voici
les
caractères
utilisables
(
documentation
Php
)
:
•
a
-
"
am
"
(
matin
)
ou
"
pm
"
(
après-midi
)
•
a
-
"
Am
"
(
matin
)
ou
"
pm
"
(
après-midi
)
•
b
-
Heure
Internet
Swatch
•
d
-
Jour
du
mois
,
sur
deux
chiffres
(
éventuellement
avec
un
zéro
)
:
"
01
"
à
"
31
"
•
d
-
Jour
de
la
semaine
,
en
trois
lettres
(
et
en
anglais
)
:
par
exemple
"
Fri
"
(
pour
Vendredi
)
•
f
-
mois
,
textuel
,
version
longue
;
en
anglais
,
i.e.
"
January
"
(
pour
Janvier
)
•
g
-
Heure
,
au
format
12h
,
sans
les
zéros
initiaux
i.e.
"
1
"
à
"
12
"
•
G
-
Heure
,
au
format
24h
,
sans
les
zéros
initiaux
i.e.
"
0
"
à
"
23
"
•
h
-
Heure
,
au
format
12h
,
"
01
"
à
"
12
"
•
h
-
heure
,
au
format
24h
,
"
00
"
à
"
23
"
•
i
-
Minutes
;
"
00
"
à
"
59
"
•
I
(
i
majuscule
)
-
"
1
"
si
l'
heure
de
été
est
activée
,
"
0
"
si
l'
heure
de
hiver
.

à
j
-
Jour
du
mois
sans
les
zéros
initiaux
:
"
1
"
à
"
31
"
So
ROHAUT
Cours
Programmation
Php
page
34/93
•
l
-
(
'
L
'
minuscule
)
-
Jour
de
la
semaine
,
textuel
,
version
longue
;
en
anglais
,
i.e.
"
Friday
"
(
pour
Vendredi
)
•
L
-
Booléen
pour
savoir
si
l'
année
est
bissextile
(
"
1
"
)
ou
pas
(
"
0
"
)
•
m
-
mois
;
i.e.
"
01
"
à
"
12
"
•
m
-
mois
,
en
trois
lettres
(
et
en
anglais
)
:
par
exemple
"
Apr
"
(
pour
Avril
)
•
n
-
mois
sans
les
zéros
initiaux
;
i.e.
"
1
"
à
"
12
"
•
o
-
Différence
de
heures
avec
l'
heure
de
Greenwich
,
exprimée
en
heures
;
i.e.
"
+0200
"
•
r
-
Format
de
date
RFC
822
;
i.e.
"
Thu
,
21
Dec
2000
16:01:07
+0200
"
(
ajouté
en
Php
4.0.4
)
•
s
-
Secondes
;
i.e.
"
00
"
à
"
59
"
•
S
-
suffixe
ordinal
de
un
nombre
,
en
anglais
,
sur
deux
lettres
:
i.e.
"
th
"
,
"
nd
"
•
t
-
Nombre
de
jours
dans
le
mois
donné
,
i.e.
"
28
"
à
"
31
"
•
T
-
Fuseau
horaire
de
la
machine
;
i.e.
"
MET
"
•
u
-
Secondes
depuis
une
époque
•
w
-
Jour
de
la
semaine
,
numérique
,
i.e.
"
0
"
(
Dimanche
)
to
"
6
"
(
samedi
)
•
W
-
Numéro
de
semaine
dans
l'
année
ISO-8601
:
les
semaines
commencent
le
lundi
(
ajouté
en
Php
4.1.0
)
•
y
-
Année
,
4
chiffres
;
i.e.
"
1999
"
•
y
-
Année
,
2
chiffres
;
i.e.
"
99
"
•
z
-
Jour
de
l'
année
;
i.e.
"
0
"
à
"
365
"
•
z
-
Décalage
horaire
en
secondes
(
i.e.
"
-43200
"
à
"
43200
"
)
Tout
autre
caractère
peut
être
employé
et
ne
sera
pas
interprété
.

si
vous
désirez
employer
l'
un
de
ces
caractères
,
il
faut
le
verrouiller
avec
un
antislash
.

ATTENTION
AVEC
CETTE
FONCTION
LE
RESULTAT
EST
EN
ANGLAIS
.

On
peut
récupérer
le
timestamp
actuel
avec
la
fonction
à
time
»
.

La
commande
suivante
a
la
même
effet
que
la
précédente
:
echo
date("d/m/Y
"
,
time())
;
//
06/01/2004
9.2.2
date
locale
strftime()
Pour
formater
le
résultat
en
local
(
pour
tenir
compte
de
la
localisation
)
il
faut
utiliser
la
fonction
à
strftime
»
qui
tient
compte
de
la
langue
.

On
aura
donc
un
résultat
en
français
.

Le
premier
paramètre
est
la
chaîne
de
formatage
.

Le
second
est
un
éventuel
timestamp
.

à
%a
-
nom
abrégé
du
jour
de
la
semaine
(
local
)
.

à
ça
-
nom
complet
du
jour
de
la
semaine
(
local
)
.

•
bb
-
nom
abrégé
du
mois
(
local
)
.

à
bb
-
nom
complet
du
mois
(
local
)
.

•
%c
-
représentation
préférée
pour
les
dates
et
heures
,
en
local
.

•
%C
-
numéro
de
siècle
(
l'
année
,
divisée
par
100
et
arrondie
entre
00
et
99
)
So
ROHAUT
Cours
Programmation
Php
page
35/93
à
%d
-
jour
du
mois
en
numérique
(
intervalle
01
à
31
)
•
%D
-
identique
à
%m/%d/%y
à
%e
-
numéro
du
jour
du
mois
.

Les
chiffres
sont
précédés
de
un
espace
(
de
'
1
'
à
'
31
'
)
•
héh
-
identique
à
bb
•
%H
-
heure
de
la
journée
en
numérique
,
et
sur
24-heures
(
intervalle
de
00
à
23
)
•
çi
-
heure
de
la
journée
en
numérique
,
et
sur
12-
heures
(
intervalle
01
à
12
)
•
%j
-
jour
de
l'
année
,
en
numérique
(
intervalle
001
à
366
)
•
%m
-
mois
en
numérique
(
intervalle
1
à
12
)
•
%M
-
minute
en
numérique
à
%n
-
newline
character
•
p
-
soit
àm
e
oùpm
'
en
fonction
de
l'
heure
absolue
,
ou
en
fonction
du
valeurs
enregistrées
en
local
.

•
%r
-
l'
heure
au
format
a.m.
et
p.m.
à
%R
-
l'
heure
au
format
24h
•
-s
-
secondes
en
numérique
à
%t
-
tabulation
à
%T
-
l'
heure
actuelle
(
égal
à
%H:%M:%S
)
•
çu
-
le
numéro
de
jour
dans
la
semaine
,
de
1
à
7
.

(
1
représente
Lundi
)
•
çu
-
numéro
de
semaine
dans
l'
année
,
en
considérant
le
premier
dimanche
de
l'
année
comme
le
premier
jour
de
la
première
semaine
.

à
%V
-
le
numéro
de
semaine
comme
défini
dans
l'
Iso
8601:1988
,
sous
forme
décimale
,
de
01
à
53
.

La
semaine
1
est
la
première
semaine
qui
a
plus
de
4
jours
dans
l'
année
courante
,
et
dont
Lundi
est
le
premier
jour
.

•
%W
-
numéro
de
semaine
dans
l'
année
,
en
considérant
le
premier
lundi
de
l'
année
comme
le
premier
jour
de
la
première
semaine
à
%w
-
jour
de
la
semaine
,
numérique
,
avec
Dimanche
=
0
•
%x
-
format
préféré
de
représentation
de
la
date
sans
l'
heure
à
%X
-
format
préféré
de
représentation
de
l'
heure
sans
la
date
•
çy
-
l'
année
,
numérique
,
sur
deux
chiffres
(
de
00
à
99
)
•
çy
-
l'
année
,
numérique
,
sur
quatre
chiffres
à
%Z
-
fuseau
horaire
,
ou
nom
ou
abréviation
•
%
%
-
un
caractèrè
%
'
littéral
9.2.3
Retour
par
tableau
getdate()
La
fonction
à
getdate
»
permet
aussi
de
récupérer
la
date
et
l'
heure
actuels
(
avec
éventuellement
un
timestamp
en
paramètre
)
mais
sous
forme
de
tableau
indexé
selon
les
valeurs
suivantes
:
•
"
seconds
"
-
secondes
•
"
minutes
"
-
minutes
So
ROHAUT
Cours
Programmation
Php
page
36/93
à
"
hours
"
-
heures
à
"
mday
"
-
jour
du
mois
•
"
wday
"
-
jour
de
la
semaine
,
numérique
.

0
:
dimanche
jusque
à
6
:
samedi
•
"
mon
"
-
mois
,
numérique
à
"
year
"
-
année
,
numérique
•
"
yday
"
-
jour
de
l'
année
,
numérique
;
i.e.
"
299
"
•
"
weekday
"
-
jour
de
la
semaine
,
texte
complet
(
en
anglais
)
;
i.e.
"
Friday
"
•
"
month
"
-
mois
,
texte
complet
(
en
anglais
)
;
i.e.
"
January
"
$aujourdhui
=
getdate()
;
$mois
=
$aujourdhui['month
'
]
;
$mjour
=
$aujourdhui['mday
'
]
;
$annee
=
$aujourdhui['year
'
]
;
echo
"
$mjour/$mois/$annee
"
;
9.2.4
L'
heure
localtime()
Pour
l'
heure
on
peut
utiliser
les
fonctions
à
localtime
»
qui
peut
aussi
prendre
un
paramètre
timestamp
et
qui
retourne
un
tableau
indexé
selon
les
valeurs
suivantes
;
•
"
tm_sec
"
-
secondes
•
"
tm_min
"
-
minutes
à
"
tm_hour
"
-
heure
à
"
tm_mday
"
-
jour
du
mois
•
"
tm_mon
"
-
mois
de
l'
année
•
"
tm_year
"
-
Année
,
incompatible
an
2000
•
"
tm_wday
"
-
Jour
de
la
semaine
à
"
tm_yday
"
-
Jour
de
l'
année
à
"
tm_isdst
"
-
Est
-ce
que
l'
heure
de
hiver
a
pris
effet
?

9.3
Récupérer
n'
importe
quelle
date
On
peut
récupérer
n'
importe
quelle
date
en
timestamp
ou
en
chaîne
.

On
peut
pour
cela
utiliser
la
fonction
à
strtotime
»
.

Elle
prend
comme
paramètre
une
chaîne
de
texte
en
anglais
qu'
elle
essaie
de
convertir
en
timestamp
.

Voici
quelques
exemples
.

echo
strtotime("now")
;
//
timestamp
actuel
echo
strtotime("-1
day
"
)
;
//
hier
echo
strtotime("+1
day
"
)
;
//
demain
echo
strtotime("11
september
2001
"
)
;
//
Le
11
septembre
2001
echo
strtotime("+1
year
+2
week
+3
day
"
)
;
//
dans
1
an
2
semaines
3
jours
So
ROHAUT
Cours
Programmation
Php
page
37/93
10
MySQL
10.1
Présentation
MySQL
est
un
SGBDR
:
«
Système
de
Gestion
de
base
de
Données
Relationnel
»
qui
se
définit
lui-
même
comme
étant
à
La
base
de
données
Open
Source
la
plus
populaire
au
monde
»
.

Rien
que
ça
.

Et
c'
est
vrai
!

Edité
par
la
société
MySQL
Ab
,
MySQL
est
un
produit
Open
Source
libre
de
utilisation
sous
licence
GPL
pour
les
projets
libres
.

Cependant
une
licence
commerciale
est
nécessaire
dans
les
autres
cas
,
notamment
si
on
souhaite
redistribuer
MySQL
avec
un
produit
non
libre
ou
si
on
souhaite
un
support
technique
.

La
version
de
production
actuelle
de
MySQL
est
la
version
4
(
4.0.17
à
l'
écriture
de
ce
support
)
,
mais
la
grande
majorité
du
serveurs
du
hébergeurs
sont
encore
dans
les
dernières
versions
de
MySQL
3.23
(
3.23.58
)
.

La
future
version
actuellement
en
développement
est
la
5.0.0
et
n'
est
surtout
pas
à
utiliser
en
production
.

Les
principales
qualités
de
MySQL
sont
sa
simplicité
et
sa
rapidité
.

Son
principale
défaut
est
le
manque
de
fonctionnalités
dites
avancées
(
dans
les
versions
précédentes
)
:
clé
étrangères
,
procédures
stockées
,
triggers
et
selects
imbriqués
notamment
.

mais
cela
ne
doit
pas
occulter
sa
puissance
avec
l'
ajout
de
fonctionnalités
avancées
comme
une
syntaxe
SQL
étendue
(
replace
,
limit
,
delete
)
,
les
index
de
recherche
«
fulltext
»
permettant
de
créer
des
moteurs
de
recherche
,
...
La
prochaine
version
stable
(
5.0
)
comblera
les
lacunes
du
précédentes
versions
avec
le
support
complet
de
la
syntaxe
SQL
ANSI-99
.

10.2
Outils
10.2.1
PhpMyAdmin
si
il
reste
bien
entendu
possible
de
utiliser
MySQL
en
ligne
de
commande
,
un
peu
comme
à
sqlplus
»
de
Oracle
,
on
est
bien
plus
à
l'
aise
avec
un
environnement
plus
intuitif
.

Ainsi
,
l'
outil
phpMyAdmin
est
une
interface
web
à
MySQL
permettant
de
effectuer
la
plupart
du
tâches
de
maintenance
et
de
utilisation
.

Cette
solution
fonctionne
depuis
n'
importe
quel
navigateur
et
est
indépendante
de
la
machine
.

On
accède
à
phpMyAdmin
généralement
par
l'
URL
http://server_name/mysql
.

So
ROHAUT
Cours
Programmation
Php
page
38/93
10.2.2
MysqlCC
MysqlCC
(
MySQL
Control
Center
)
est
le
front-end
graphique
officiel
de
MySQL
,
développé
par
la
même
société
.

Basé
sur
e
toolkit
Qt
,
il
est
disponible
sous
Windows
,
Unix
(
linux
)
et
bientôt
sur
MacOS
.

Il
permet
l'
administration
du
serveur
,
la
gestion
du
base
et
tables
,
l'
exécution
de
requêtes
SQL
interactives
avec
coloration
syntaxique
...
10.3
Créer
une
base
à
partir
de
l'
écran
de
accueil
de
phpMyAdmin
,
on
saisit
le
nom
de
la
base
dans
à
Créer
une
base
de
données
»
.

Il
faut
de
préférence
choisir
un
nom
simple
et
intuitif
.

pui
on
clique
sur
à
Créer
»
.

Après
la
création
une
nouvelle
page
s'
affiche
:
c'
est
la
page
principale
de
administration
de
la
base
.

En
haut
seront
toujours
présents
après
l'
exécution
de
une
commande
les
résultats
de
celle
-ci
.

Cet
écran
permet
notamment
l'
exécution
de
commandes
SQL
,
et
le
travail
sur
les
tables
.

10.4
Utilisateurs
et
droits
Dans
le
menu
de
gauche
,
on
choisit
le
«
-
»
(
tiret
)
qui
correspond
à
la
racine
ou
administration
du
serveur
MySQL
par
lui-même
.

Dans
la
nouvelle
page
,
on
choisit
«
Utilisateurs
et
privilèges
»
.

La
page
suivante
permet
de
ajouter
un
utilisateur
.

Il
faut
faire
attention
à
une
chose
:
le
serveur
.

En
effet
,
suivant
la
configuration
initiale
(
sur
Linux
par
exemple
)
les
droits
dépendent
de
la
façon
dont
a
été
accédée
la
base
.

Ainsi
si
localhost
et
127.0.0.1
sont
identiques
,
si
la
base
est
appelée
depuis
une
autre
Ip
ou
un
autre
nom
,
l'
utilisateur
n'
aura
pas
tous
les
droits
.

En
cas
de
doute
,
il
suffit
de
choisir
à
Tout
serveur
»
.

Pour
créer
un
administrateur
,
le
mieu
est
de
donner
tous
les
privilèges
.

Pour
un
utilisateur
«
standard
»
(
requêtes
de
sélection
,
de
ajout
,
de
mise
à
jour
et
de
suppression
de
enregistrements
)
on
choisira
les
privilèges
Select
,
Insert
,
Update
et
Delete
.

So
ROHAUT
Cours
Programmation
Php
page
39/93
Une
foi
l'
utilisateur
créé
,
et
si
plusieurs
base
sont
présentes
,
on
peut
affiner
les
droits
pour
chacune
du
base
.

La
liste
du
utilisateurs
et
de
leurs
droits
sur
une
base
est
affiché
en
haut
.

En
choisissant
à
modifier
»
on
peut
affiner
la
sélection
notamment
en
passant
par
«
autres
privilèges
à
:
droits
sur
des
base
,
tables
ou
même
colonnes
.

10.5
Créer
et
modifier
des
tables
On
retourne
par
le
menu
de
gauche
dans
une
base
existante
.

Dans
l'
écran
de
administration
on
saisit
(
bas
de
la
page
)
le
nom
de
la
table
et
le
nombre
de
champs
(
colonnes
)
.

Il
sera
possible
après
coup
de
en
rajouter
ou
de
en
supprimer
.

pui
on
choisit
à
Créer
»
.

L'
étape
suivante
consiste
à
définir
la
table
.

Intéressons
-nous
au
différents
types
de
champs
possibles
.

10.5.1
Types
Numériques
10.5.1.1
Types
entiers
Pour
chaque
entier
on
peut
ajouter
le
mot
clé
à
UNSIGNED
»
:
non
signé
.

Attention
au
type
BIGINT
qui
a
des
limitations
(
voir
documentation
MySQL
)
.

Entre
parenthèses
:
les
valeurs
UNSIGNED
.

Il
est
possible
de
fournir
une
précision
de
affichage
(
nombre
de
chiffres
)
.

Par
exemple
une
taille
de
2
pour
un
TINYINT
équivaut
à
une
valeur
de
0
à
99
.

à
TINYINT
:
-128
à
127
(
0
à
255
)
•
SMALLINT
:
-32768
à
32767
(
0
à
65535
)
•
MEDIUMINT
:
-8388608
à
8388607
(
0
à
16777215
)
•
INT
ou
INTEGER
:
-2147483648
à
2147483647
(
0
à
4294967295
)
•
BIGINT
:
-9223372036854775808
à
9223372036854775807
(
0
à
18446744073709551615
)
10.5.1.2
Types
réels
(
flottants
)
à
FLOAT
:
nombre
en
virgule
flottante
•
DOUBLE
,
DOUBLE
PRECISION
,
REAL
:
nombre
en
virgule
flottante
double-précision
.

à
DECIMAL
,
DEC
,
NUMERIC
:
spécial
,
les
valeurs
sont
«
unpacked
»
:
c'
est
une
chaîne
texte
10.5.1.3
Types
booléens
à
BIT
,
BOOL
,
BOOLEAN
(
depuis
4.1
)
:
Un
bit
,
équivaut
à
TINYINT(1)
10.5.2
Types
caractères
Ces
types
méritent
un
peu
plus
de
explications
.

So
ROHAUT
Cours
Programmation
Php
Page
40/93
10.5.2.1
Types
CHAR
CHAR
:
une
chaîne
de
caractère
dont
la
taille
peut
être
de
1
à
255
caractères
.

La
taille
est
définie
à
la
création
de
la
table
.

Dans
la
table
,
le
champ
prend
effectivement
le
nombre
de
caractères
indiqué
,
même
si
la
taille
réelle
est
inférieure
.

VARCHAR
:
une
chaîne
de
caractère
dont
la
taille
maximale
peut
être
de
1
à
255
caractères
mais
dont
la
longueur
peut
être
variable
.

MySQL
stocke
en
plus
un
octet
contenant
la
longueur
de
la
chaîne
.

C'
est
une
optimisation
,
une
chaîne
de
100
caractères
va
donc
prendre
100+1
octets
en
place
dans
la
table
.

On
peut
rajouter
la
définition
BINARY
.

Par
défaut
les
champs
CHAR
et
VARCHAR
sont
triés
sans
tenir
compte
de
la
casse
.

L'
attribut
BINARY
permet
de
trier
en
tenant
compte
de
la
casse
selon
la
machine
.

Avec
ces
champs
,
les
espaces
finaux
sont
supprimés
.

10.5.2.2
Types
TEXT
Les
types
TEXT
et
BLOB
permettent
de
stocker
des
quantités
variables
de
texte
selon
leurs
définitions
.

Ici
«
L
»
est
la
longueur
du
texte
:
•
TINY(BLOB/TEXT)
:
L+1
octets
avec
L<2^8
à
BLOB/TEXT
:
L+2
octets
avec
L<2^16
à
MEDIUM(BLOB/TEXT)
:
L+3
octets
avec
L<2^24
à
LONG(BLOB/TEXT)
:
L+4
octets
avec
L<2^32
TEXT
et
BLOB
s'
utilisent
de
manière
identique
mais
il
faut
respecter
les
rêgles
suivantes
:
à
Lors
de
tris
,
un
champ
BLOB
tient
compte
de
la
casse
,
pas
un
champ
TEXT
.

•
On
ne
peut
pas
faire
de
recherche
FULLTEXT
sur
un
champ
de
type
BLOB
.

Il
faudra
utiliser
les
champs
TEXT
.

à
Les
champs
de
type
TEXT
et
BLOB
ne
prennent
pas
de
valeurs
par
défaut
.

à
Les
espaces
finaux
ne
sont
pas
supprimés
.

10.5.2.3
Type
ENUM
Un
champ
de
type
ENUM
ne
peut
contenir
qu'
une
chaîne
de
texte
par
plusieurs
prédéfinies
à
la
création
de
la
table
.

Voici
un
exemple
:
CREATE
TABLE
test
(
id
int
NOT
NULL
auto_increment
,
c_enum
enum('oui','non')
,
PRIMARY
Key
(
id
)
)
;
So
ROHAUT
Cours
Programmation
Php
Page
41/93
Le
champ
c_enum
ne
pourra
prendre
que
deux
valeurs
:
oui
ou
non
.

si
on
tente
de
y
mettre
autre
chose
:
insert
into
text
(
c_enum
)
values('toto')
;
Dans
ce
cas
une
chaîne
vide
est
insérée
à
la
place
.

si
le
champ
est
déclaré
NOT
NULL
,
la
valeur
par
défaut
devient
la
première
de
la
liste
de
énumération
.

10.5.2.4
Type
SET
Un
type
set
ressemble
un
peu
au
type
ENUM
sauf
que
le
champ
peut
avoir
une
ou
plusieurs
valeurs
parmi
une
liste
prédéfinie
à
la
création
de
la
table
.

Dans
le
type
ENUM
une
seule
valeur
est
autorisée
dans
le
champ
.

Avec
le
type
SET
,
plusieurs
valeurs
séparées
par
des
espaces
sont
autorisées
.

CREATE
TABLE
test
(
id
int(11)
NOT
NULL
auto_increment
,
c_set
set('oui','non')
,
PRIMARY
Key
(
id
)
)
;
insert
into
test
(
c_set
)
values
(
'
oui,non
'
)
;
insert
into
test
(
c_set
)
values
(
'
non,oui
'
)
;
insert
into
test
(
c_set
)
values
(
'
oui
)
;
on
effectue
une
recherche
de
un
élément
SET
soit
avec
Like
,
soit
avec
la
fonction
FIND_IN_SET
:
select
*
from
test
where
c_set
Like
'
%oui
%
'
;
select
*
from
test
where
FIND_IN_SET('oui',c_set)>0
;
10.5.3
Types
date
Attention
avec
les
dates
:
la
logique
de
MySQL
est
de
laisser
au
développeurs
le
soin
de
contrôler
la
validité
de
leurs
dates
.

Ainsi
MySQL
autorisera
l'
enregistrement
de
une
date
de
type
2004-02-30
!

Les
seuls
tests
effectués
sont
la
validité
du
mois
(
entre
0
et
12
)
et
la
validité
du
jour
(
entre
0
et
31
)
.

Le
zéro
(
0
)
est
autorisé
pour
des
raisons
pratiques
:
stockage
de
l'
année
,
ou
de
l'
année/mois
seulement
par
exemple
.

Voici
quelques
autres
informations
:
à
MySQL
,
dans
les
comparaisons
notamment
,
essaie
à
de
interpréter
à
le
format
de
date
qu'
on
lui
passe
.

C'
est
le
cas
pour
les
comparaisons
entre
des
champs
de
type
date
et
du
champs
texte
.

Dans
la
plupart
du
cas
le
résultat
sera
celui
attendu
mais
attention
tout
de
même
au
formalisme
.

à
Les
dates
doivent
être
données
de
préférence
au
format
année-mois-jour
.

L'
année
doit
toujours
apparaître
en
premier
.

Dans
le
cas
de
un
année-jour-mois
attention
:
MySQL
ne
peut
pas
deviner
si
2004-02-05
est
le
5
février
ou
le
2
mai
...
•
si
une
date
est
utilisée
dans
un
calcul
numérique
,
elle
est
convertie
en
nombre
(
timestamp
)
.

•
si
une
valeur
illégale
est
transmise
,
c'
est
la
valeur
zéro
(
0
)
qui
est
retenue
.

La
valeur
zéro
dépend
du
type
de
champ
.

à
La
gestion
de
l'
an
2000
se
fait
ainsi
:
•
Dans
le
cas
de
années
à
4
chiffres
,
aucun
souci
.

Il
vaut
mieux
TOUJOURS
utiliser
du
So
ROHAUT
Cours
Programmation
Php
page
42/93
années
sur
4
chiffres
.

•
Dans
le
cas
de
une
année
à
deux
chiffes
,
00-69
sont
converties
en
2000-2069
,
70-99
sont
converties
en
1970-1999
.

10.5.3.1
Formats
supportés
à
Aaaa-Mm-Jj
HH:MM:SS
ou
Aa-Mm-Jj
HH:MM:SS
.

Les
séparateurs
peuvent
être
n'
importe
quoi
:
AAAA/MM/JJ
Hhmmmss
est
valable
à
Aaaa-Mm-Jj
ou
Aa-Mm-Jj
,
même
remarque
pour
les
séparateurs
.

à
AAAAMMJJHHMMSS
ou
AAMMJJHHMMSS
si
la
chaîne
ou
le
nombre
ont
une
signification
en
tant
que
date
•
Aaaammjj
ou
Aammjj
,
même
remarque
10.5.3.2
Type
DATETIME
Le
type
DATETIME
permet
de
stocker
la
date
et
l'
heure
sous
le
format
Aaaa-Mm-Jj
HH:MM:SS
.

Son
zéro
est
donc
0000-00-00
00:00:00
.

10.5.3.3
Type
DATE
Avec
ce
type
seule
la
date
est
stockée
au
format
Aaaa-Mm-Jj
.

Son
zéro
est
0000-00-00
.

10.5.3.4
Type
TIMESTAMP
Le
type
TIMESTAMP
permet
de
stocker
implicitement
et
automatiquement
un
timestamp
(
heure
courante
)
lors
de
un
enregistrement
de
données
avec
INSERT
ou
UPDATE
.

si
une
table
dispose
de
un
champ
TIMESTAMP
,
lors
de
l'
ajout
ou
de
la
mise
à
jour
de
un
celui
-ci
sera
automatiquement
mis
à
jour
pour
cette
ligne
de
enregistrement
.

La
colonne
n'
a
pas
besoin
de
être
explicitement
spécifiée
.

si
on
la
spécifie
,
alors
on
peut
lui
mettre
n'
importe
quelle
valeur
.

CREATE
TABLE
test
(
id
int(11)
NOT
NULL
auto_increment
,
c_ts
timestamp(14)
NOT
NULL
,
c_txt
varchar(10)
NOT
NULL
default
'
'
,
PRIMARY
Key
(
id
)
)
insert
into
test
(
c_txt
)
values('toto')
;
select
c_ts
from
test
;
20040112143212
update
test
set
c_txt='truc
'
;
select
c_ts
from
test
;
20040112143339
On
remarque
que
le
résultat
retourné
par
MySQL
sur
la
colonne
TIMESTAMP
n'
est
pas
une
valeur
timestamp
Unix
(
bien
que
telle
en
interne
)
mais
une
valeur
formatée
.

Par
défaut
un
TIMESTAMP
So
ROHAUT
Cours
Programmation
Php
page
43/93
retourne
une
valeur
(
numérique
)
sur
14
caractères
.

On
peut
choisir
cette
taille
à
la
création
de
la
table
:
•
TIMESTAMP
ou
TIMESTAMP(14)
:
AAAAMMJJHHMMSS
•
TIMESTAMP(12)
:
AAMMJJHHMMSS
•
TIMESTAMP(10)
:
AAMMJJHHMM
•
TIMESTAMP(8)
:
AAAAMMJJ
•
TIMESTAMP(6)
:
aammjj
•
TIMESTAMP(4)
:
Aamm
•
TIMESTAMP(2)
:
aa
Avec
tous
ces
formats
,
spécifiez
toujours
l'
année
le
mois
et
le
jour
même
avec
un
timestamp
de
4
ou
de
2
sinon
la
date
sera
invalide
.

10.5.3.5
Type
Time
Le
type
Time
peut
être
utilisé
pour
stocker
une
information
horaire
.

Son
format
est
HH:MM:SS
ou
HHH:MM:SS
et
la
valeur
peut
être
négative
.

Les
valeurs
maximales
possibles
vont
de
-838:59:59
à
838:59:59
.

Time
ne
sert
pas
qu'
à
stocker
une
heure
de
la
journée
mais
un
intervalle
ou
une
durée
ce
qui
explique
la
plage
horaire
.

On
y
accède
comme
ceci
:
d
HH:MM:SS.fraction
:
D
est
le
jour
.

La
fraction
n'
est
pas
stockée
.

ou
encore
:
HH:MM:SS
,
HH:MM
,
D
HH:MM:SS
,
D
HH:MM
,
du
Hh
,
D
Ss
,
Hhmmss
,
Ssss
,
Mmss
,
...
10.5.3.6
Type
YEAR
Le
type
YEAR
stocke
uniquement
l'
année
,
sur
une
plage
allant
de
1901
à
2155
.

L'
interprétation
du
valeurs
à
deux
chiffres
et
soumise
à
l'
interprétation
de
la
gestion
de
l'
an
2000
.

10.5.4
Création
:
Syntaxe
SQL
On
utilise
la
commande
SQL
CREATE
.

CREATE
TABLE
[
If
NOT
EXIST
]
nom_table
(
champ1
Type
[
NOT
NULL|
NULL
]
[
DEFAULT
valeur_defaut
]
[
AUTO_INCREMENT
]
[
PRIMARY
Key
]
,
...
,
PRIMARY
KEY(nom_champ)
,
Key
[
nom
]
(
col1
,
col2
,
...
)
,
INDEX
[
nom
]
(
col1
,
col2
,
...
)
,
UNIQUE
[
INDEX
]
[
nom
]
(
col1
,
col2
,
...
)
,
FULTEXT
[
INDEX
]
[
nom
]
(
col1
,
col2
,
...
)
)
TYPE=type_table
;
Notez
que
So
ROHAUT
Cours
Programmation
Php
page
44/93
•
Key
et
INDEX
sont
des
synonymes
.

•
Un
PRIMARY
Key
est
un
index
UNIQUE
dont
toutes
les
colonnes
doivent
être
NOT
NULL
•
Un
PRIMARY
Key
peut
contenir
plusieurs
colonnes
.

Dans
ce
cas
,
PRIMARY
Key
ne
doit
pas
apparaître
au
niveau
de
la
définition
de
une
colonne
mais
la
syntaxe
PRIMARY
KEY(cols
,
...
)
doit
être
utilisée
•
Il
ne
peut
y
avoir
qu'
un
seul
index
PRIMARY
Key
,
mais
plusieurs
index
UNIQUE
.

•
si
une
application
veut
obtenir
le
PRIMARY
Key
de
une
table
et
que
il
n'
existe
pas
,
alors
MySQL
retournera
le
premier
index
UNIQUE
trouvé
.

•
si
on
ne
donne
pas
de
noms
à
un
index
,
celui
-ci
est
généré
automatiquement
en
prenant
le
nom
de
la
première
colonne
de
l'
index
suivi
de
un
suffixe
numérique
(
col_1
,
col_2
,
...
)
.

à
Bien
que
cela
soit
déconseillé
,
on
peut
établir
un
index
sur
une
colonne
TEXT
ou
BLOB
.

mais
dans
ce
cas
il
faut
obligatoirement
spécifier
une
longueur
de
index
.

Par
exemple
:
CREATE
TABLE
fämessage
(
idämessage
int(10)
unsigned
NOT
NULL
auto_increment
,
id_msg_initial
int(11)
unsigned
NOT
NULL
default
'
0
'
,
id_msg_prec
int(10)
unsigned
NOT
NULL
default
'
0
'
,
id_forum
int(10)
NOT
NULL
default
'
0
'
,
login
varchar(20)
NOT
NULL
default
'
'
,
date
datetime
NOT
NULL
default
e
0000-00-00
00:00:00
'
,
sujet
varchar(200)
NOT
NULL
default
'
'
,
texte
text
,
PRIMARY
Key
(
idämessage
)
,
Key
precedent
(
id_msg_prec
)
,
Key
login
(
login
)
,
Key
forum
(
id_forum
)
,
Key
initial
(
id_msg_initial
)
,
FULLTEXT
Key
ft1
(
sujet,texte
)
)
Typeëmyisam
;
10.5.5
Types
de
tables
(
Myisam
et
InnoDB
)
Le
Type
de
table
est
particulier
à
MySQL
.

Le
type
par
défaut
est
«
Myisam
»
,
le
gestionnaire
de
tables
originel
de
MySQL
,
simple
et
rapide
,
correspondant
à
la
majorité
du
besoins
.

Le
second
type
principal
est
«
InnoDB
»
et
permet
une
gestion
du
transactions
et
verrouillage
du
données
.

Les
«
commit
»
,
«
rollback
»
,
restauration
après
crash
,
et
surtout
les
contraintes
de
intégrité
avec
clés
étrangères
sont
possibles
.

CREATE
TABLE
parent(id
INT
NOT
NULL
,
PRIMARY
Key
çidçë
TYPE=INNODB
;
CREATE
TABLE
child(id
INT
,
parent_id
INT
,
INDEX
par_ind
(
parent_id
)
,
FOREIGN
Key
(
parent_id
)
REFERENCES
parent(id)
ON
DELETE
SET
NULL
)
TYPE=INNODB
;
On
peut
aussi
utiliser
les
clauses
à
ON
DELETE
CASCADE
»
et
«
ON
DELETE
SET
NULL
»
.

Quelques
règles
sont
à
respecter
pour
l'
utilisation
:
So
ROHAUT
Cours
Programmation
Php
page
45/93
•
Avec
un
ON
DELETE
CASCADE
,
si
une
ligne
de
la
table
parente
est
supprimée
,
les
lignes
correspondantes
à
la
clé
étrangère
sont
automatiquement
supprimées
dans
la
table
fille
.

Dans
l'
exemple
,
une
suppression
de
un
enregistrement
de
la
table
«
parent
à
supprime
tous
les
enregistrements
de
la
table
«
child
»
dont
le
«
parent_id
»
est
égal
au
«
id
»
de
l'
enregistrement
de
la
table
«
parent
à
supprimé
.

•
Avec
un
ON
DELETE
SET
NULL
,
les
enregistrements
fils
ne
sont
pas
supprimés
,
mais
les
colonnes
de
la
clé
étrangère
(
ici
parent_id
)
prennent
la
valeur
NULL
.

à
Un
index
doit
exister
pour
la
clé
parente
et
la
clé
fille
.

10.5.6
Index
FULLTEXT
10.5.6.1
Création
Dans
ses
dernières
versions
(
3.23.23
et
supérieures
)
MySQL
permet
l'
indexation
et
la
recherche
sur
un
ou
plusieurs
champs
de
type
TEXT
.

On
peut
ainsi
créer
des
moteurs
de
recherches
très
rapidement
.

Pour
ça
il
faut
créer
un
index
à
FULLTEXT
»
ou
en
Texte
Entier
,
où
chaque
mot
du
champ
texte
est
en
fait
indexé
.

Les
index
FULLTEXT
ne
fonctionnent
qu'
avec
des
champs
de
type
TEXT
(
pas
BLOB
)
ou
VARCHAR
et
sur
des
tables
de
type
Myisam
uniquement
.

Voici
comment
créer
un
index
FULLTEXT
.

si
la
table
existe
déjà
:
CREATE
FULLTEXT
INDEX
ft1
on
fämessage
(
sujet,texte
)
;
à
la
création
de
la
table
,
on
rajoute
une
ligne
de
création
de
index
:
FULLTEXT
Key
ft1
(
sujet,texte
)
On
peut
préciser
une
ou
plusieurs
colonnes
dans
ce
genre
de
index
.

mais
ATTENTION
:
lors
de
la
recherche
si
on
a
créé
un
index
sur
deux
colonnes
,
on
ne
peut
pas
rechercher
sur
une
seule
du
deux
colonnes
en
même
temps
...
Dans
ce
cas
il
faudra
créer
plusieurs
index
FULLTEXT
.

10.5.6.2
Recherche
On
effectue
une
recherche
avec
les
fonctions
MATCH()
et
AGAINST(
)
.

La
fonction
MATCH
permet
de
préciser
sur
quelles
colonnes
on
effectue
la
recherche
,
et
la
fonction
AGAINST
les
mots
recherchés
.

SELECT
idämessage
FROM
fämessage
WHERE
MATCH(sujet,texte)
AGAINST('linux
nvidia
'
)
;
Cette
requête
va
effectuer
une
recherche
sur
les
mots
'
linux
'
et
'
nvidia
'
dans
les
colonnes
'
sujet
'
et
'
texte
'
.

Elle
va
retourner
les
id
du
message
correspondants
avec
les
plus
pertinents
en
premier
(
ceux
qui
correspondent
le
mieux
à
la
recherche
)
.

Cela
est
dû
au
fait
que
MATCH
est
dans
une
clause
WHERE
.

La
pertinence
est
déterminée
par
MySQL
selon
des
critères
(
un
peu
opaques
tout
de
même
)
comme
le
nombre
de
mots
dans
la
ligne
,
le
nombre
de
mots
uniques
dans
la
ligne
,
la
longueur
de
la
ligne
.

C'
est
la
fonction
MATCH
qui
retourne
la
pertinence
sous
forme
de
un
flottant
supérieur
ou
égale
à
So
ROHAUT
Cours
Programmation
Php
Page
46/93
zéro
.

Le
zéro
signifie
une
pertinence
nulle
(
pas
de
correspondance
)
.

Plus
la
valeur
est
élevée
plus
le
résultat
est
pertinent
.

SELECT
idämessage
,
MATCH(sujet,texte)
AGAINST('linux
nvidia
'
)
FROM
fämessage
;
Cette
requête
récupère
en
seconde
colonne
la
valeur
de
la
pertinence
.

Celle
-ci
n'
est
pas
classée
car
il
n'
y
a
pas
de
WHERE
ou
de
ORDER
By
.

Voici
une
dernière
méthode
permettant
de
récupérer
les
champs
et
la
pertinence
triés
par
ordre
de
pertinence
.

SELECT
id_message,sujet
MATCH
(
sujet,texte
)
AGAINST
(
'
linux
nvidia
'
)
FROM
fämessage
WHERE
MATCH
(
sujet,texte
)
AGAINST
(
'
linux
nvidia
'
)
;
10.5.6.3
Recherche
booléenne
Les
versions
4.x
de
MySQL
ont
introduit
la
notion
de
recherche
booléenne
qui
permet
de
affiner
ses
recherches
.

SELECT
idämessage
FROM
fämessage
WHERE
MATCH(sujet,texte)
AGAINST
(
'
+linux
+nvidia
+ati
e
IN
BOOLEAN
Mode
)
;
Voici
la
signification
du
caractères
supplémentaires
à
p
:
le
mot
doit
obligatoirement
être
présent
dans
chaque
enregistrement
retourné
•
-
:
le
mot
ne
doit
pas
être
présent
dans
les
enregistrements
retournés
à
>
et
<
:
valorisation
du
mot
.

Un
>toto
<titi
valorise
plus
toto
que
titi
dans
la
recherche
•
(
et
)
:
grouper
une
série
de
mots
à
~
:
négation
de
un
mot
.

Contrairement
au
-
,
le
mot
est
tout
de
même
pris
en
compte
avec
une
pertinence
négative
.

•
*
:
tronquage
de
un
mot
:
bon*
çù
bonjour
,
bonsoir
...
à
les
guillemets
«
"
»
:
une
chaîne
recherchée
telle
quelle
.

10.6
MySQL
et
Php
10.6.1
Connexion
à
une
base
de
données
Deux
étapes
sont
généralement
nécessaires
pour
plus
de
simplicité
.

La
seconde
n'
est
pas
obligatoire
mais
bien
pratique
dans
le
cas
où
on
travaille
sur
une
seule
base
de
données
dans
toute
la
page
.

10.6.1.1
Connexion
au
serveur
On
utilise
la
fonction
mysql_connect(
)
.

Cette
fonction
prend
(
au
minimum
)
trois
paramètres
:
le
serveur
(
hostname
)
l'
utilisateur
et
son
mot
de
passe
.

$b_host="sql.tf-data.net
"
$b_user="toto
"
;
$b_pass="CreT1
"
;
So
ROHAUT
Cours
Programmation
Php
Page
47/93
$cnx=mysql_connect($b_host
,
$b_user
,
$b_pass
)
;
ifà
!

$cnx
)
die
(
"
erreur
de
connexion
à
MySQL
"
)
;
10.6.1.2
Choix
de
une
base
On
choisit
une
base
de
données
par
défaut
avec
la
fonction
mysql_select_db(
)
.

Elle
prend
au
minimum
un
paramètre
,
le
nom
de
la
base
.

Le
second
paramètre
optionnel
est
une
ressource
retournée
par
mysql_connect
,
en
cas
de
connexion
sur
plusieurs
serveurs
MySQL
.

Par
défaut
,
la
fonction
prend
la
dernière
connexion
ouverte
(
celle
du
dernier
mysql_connect
exécuté
)
.

$b_base="slyunix
"
;
$db=msql_select_db($b_base)
;
ifà
!

$db
)
die("Erreur
de
connexion
à
la
base
$b_base
"
)
;
10.6.1.3
Fermeture
de
une
connexion
On
ferme
une
connexion
à
MySQL
avec
la
fonction
mysql_close(
)
.

Cependant
dans
le
cas
de
connexion
non
persistantes
(
voir
à
ce
point
)
cette
fonction
n'
est
pas
obligatoire
car
Php
ferme
automatiquement
les
connexions
à
la
fin
de
un
script
.

mysql_close($cnx)
;
10.6.1.4
Séquence
complète
pour
une
base
$b_host="sql.tf-data.net
"
$b_user="toto
"
;
$b_pass="CreT1
"
;
$b_base="slyunix
"
;
mysql_connect($b_host
,
$b_user
,
$b_pass
)
or
die("erreur
de
connexion
à
MySQL
"
)
;
mysql_select_db($b_base)
or
die("erreur
à
la
selection
de
$b_base
)
;
mysql_close()
;
10.6.2
Les
requêtes
10.6.2.1
Exécuter
une
requête
On
exécute
une
requête
SQL
avec
la
fonction
mysql_query(
)
.

Cette
fonction
prend
au
moins
un
paramètre
:
une
requête
SQL
sous
forme
de
chaîne
.

La
fonction
retourne
FALSE
en
cas
de
échec
(
colonne
ou
table
invalide
,
droits
insuffisants
,
pas
de
connexion
,
etc
)
.

ATTENTION
:
Ce
n'
est
pas
parce
que
l'
appel
à
mysql_query()
n'
a
pas
retourné
de
erreur
que
la
fonction
retourne
des
lignes
de
résultats
dans
le
cas
de
un
SELECT
par
exemple
.

Enfin
,
la
requête
SQL
ne
doit
pas
finir
par
un
point-virgule
.

La
requête
peut
être
de
n'
importe
quel
type
(
selection
,
mise
à
jour
,
destruction
,
etc
)
.

Dans
le
cas
de
un
SELECT
,
Show
,
EXPLAIN
ou
DESCRIBE
,
mysql_query()
retourne
une
ressource
qui
sera
ensuite
utilisée
pour
lire
le
résultat
.

$result=mysql_query("select
idämessage
,
sujet
from
fämessage
"
)
;
So
ROHAUT
Cours
Programmation
Php
page
48/93
10.6.2.2
Nombre
de
lignes
affectées
Dans
le
cas
de
un
DELETE
,
INSERT
,
REPLACE
ou
UPDATE
,
on
peut
connaître
le
nombre
de
lignes
affectées
(
modifiées
)
par
la
requête
à
l'
aide
de
la
fonction
mysql_affected_rows(
)
.

$result=mysql_query("delete
from
fämessage
where
login='toto
'
"
)
;
if($result)
echo
mysql_affected_rows(
)
.
"

Enregistrements
supprimés
"
;
10.6.2.3
Nombre
de
lignes
retournées
Dans
le
cas
de
un
SELECT
,
le
nombre
de
enregistrements
(
lignes
)
retourné
est
obtenu
avec
la
fonction
mysql_num_rows(
)
.

$result=mysql_query("select
*
from
fämessage
where
idämessage
>
10
"
)
;
if($result)
echo
mysql_num_rows(
)
.
'

enregistrements
retournés
'
)
;
10.6.2.4
Récupérer
les
résultats
La
fonction
la
plus
sympathique
pour
récupérer
les
enregistrements
après
l'
exécution
de
une
sélection
est
mysql_fetch_array(
)
.

Elle
prend
au
minimum
un
paramètre
:
une
ressource
résultat
(
résultat
de
mysql_query
)
.

Elle
retourne
une
ligne
de
résultat
sous
forme
de
un
tableau
associatif
,
de
un
tableau
indexé
ou
du
deux
.

Par
défaut
,
le
tableau
retourné
est
à
la
foi
associatif
et
indexé
.

Dans
un
tableau
associatif
,
l'
index
du
tableau
est
le
nom
du
champ
correspondant
à
la
colonne
.

Dans
un
tableau
indexé
,
les
colonnes
sont
numérotées
à
partir
de
zéro
.

Notez
que
mysql_fetch_array()
ne
retourne
qu'
une
seule
ligne
de
résultat
.

Pour
passer
à
la
suivante
,
il
faut
exécuter
la
fonction
à
nouveau
.

Elle
retournera
FALSE
quand
il
n'
y
aura
plus
de
lignes
à
lire
.

$result=mysql_query("select
sujet,texte
from
fämessage
where
login='toto
'
"
)
;
$tab=mysql_fetch_array($result)
;
//
Première
ligne
du
résultat
echo
$tab['sujet
'
]
.
'
,
'
.$tab['texte
'
]
;
//
affiche
les
champs
sujet
et
texte
echo
$tab[0
]
.
'
,
'
.$tab[1
]
;
//
idem
si
plusieurs
colonnes
portent
le
même
nom
,
la
dernière
colonne
sera
prioritaire
.

Dans
une
requête
affichant
des
noms
de
colonnes
identiques
,
le
mieu
est
de
les
renommer
:
SELECT
t1.nom
as
col1
,
t2_nom
as
col2
FROM
t1
,
t2
...
Le
second
paramètre
de
mysql_fetch_array()
peut
être
:
•
MYSQL_ASSOC
:
le
résultat
est
uniquement
un
tableau
associatif
(
index=nom
de
colonne
)
à
MYSQL_NUM
:
le
résultat
est
uniquement
un
tableau
indexé
numériquement
.

à
MYSQL_BOTH
(
par
défaut
)
:
les
deux
Voici
comment
récupérer
tous
les
résultats
:
$result=mysql_query("select
sujet,texte
from
fämessage
where
login='toto
'
"
)
;
while
(
$result
&&
$tab=mysql_fetch_array($result))
à
echo
$tab['sujet
'
]
.
'
,
'
.$tab['texte
'
]
;
//
affiche
les
champs
sujet
et
texte
}
So
ROHAUT
Cours
Programmation
Php
Page
49/93
Notez
l'
expression
du
while
.

Pour
y
rentrer
,
il
faut
que
le
résultat
de
la
requête
(
$result
)
ne
soit
pas
FALSE
(
donc
que
la
requête
ait
fonctionné
)
et
que
il
reste
des
lignes
à
lire
.

Autrement
dit
si
la
requête
ne
retourne
rien
,
on
ne
rentre
pas
dans
la
boucle
.

Notez
enfin
que
il
existe
deux
autres
fonctions
possibles
:
•
mysql_fetch_row()
:
équivaut
à
mysql_fetch_array($var,MYSQL_NUM)
•
mysql_fetch_assoc()
:
équivaut
à
mysql_fetch_array($var
,
MYSQL_ASSOC
)
10.6.2.5
Insertion
avec
auto-incrément
L'
identifiant
unique
de
une
table
est
souvent
un
entier
auto-incrémenté
.

L'
avantage
est
que
il
n'
y
a
pas
besoin
de
gérer
cet
identifiant
,
c'
est
MySQL
qui
le
détermine
tout
seul
.

mais
dans
certains
cas
,
il
peut
être
nécessaire
de
récupérer
la
valeur
de
ce
champ
auto-incrémenté
après
une
insertion
pour
,
par
exemple
,
mettre
à
jour
un
autre
enregistrement
(
liste
chaînée
,
jointure
,
etc
)
.

On
utilise
pour
ça
la
fonction
mysql_insert_id(
)
.

$result=mysql_query("insert
into
fämessage
(
sujet
,
texte
)
values
('test','test')")
;
$id=mysql_insert_id()
;
$result=mysql_query("select
sujet
,
texte
from
fämessage
where
idämessageçd
"
)
;
$tab=mysql_fetch_array($result)
;
echo
$tab['sujet
'
]
.
'
,
'
.$tab['texte
'
]
;
//
test
,
test
10.6.3
Récupération
du
erreurs
En
cas
de
erreur
lors
de
une
manipulation
sur
MySQL
,
on
peut
récupérer
le
numéro
de
l'
erreur
MySQL
par
la
fonction
mysql_errno(
)
.

de
même
on
peut
récupérer
le
message
de
erreur
par
la
fonction
mysql_error(
)
.

On
peut
trouver
la
liste
du
codes
de
erreurs
ici
:
http://www.mysql.com/doc/en/Error-returns.html
So
ROHAUT
Cours
Programmation
Php
page
50/93
11
Le
système
de
fichiers
11.1
Travail
sur
les
fichiers
11.1.1
Ouverture
La
fonction
fopen()
permet
de
ouvrir
ou
de
créer
un
fichier
selon
divers
mode
.

Elle
prend
en
premier
pramètre
le
nom
du
fichier
avec
son
chemin
.

Ce
nom
de
fichier
peut
être
une
URL
(
il
faut
pour
cela
que
la
directive
allow_url_fopen
soit
activée
dans
le
php.ini
)
.

Le
second
paramètre
est
le
mode
de
ouverture
:
–
r
:lecture
seule
,
en
début
de
fichier
–
r+
:
lecture/écriture
,
en
début
de
fichier
–
w
:
écriture
seule
,
taille
du
fichier
à
0
(
ancien
contenu
effacé
)
,
créé
si
il
n'
existe
pas
–
wu
:
lecture/écriture
,
taille
du
fichier
à
0
,
créé
si
il
n'
existe
pas
–
a
:
écriture
seule
,
en
fin
de
fichier
,
créé
si
il
n'
existe
pas
–
au
:
lecture/écriture
,
en
fin
de
fichier
,
créé
si
il
n'
existe
pas
.

On
peut
sous
Windows
rajouter
la
lettre
'
b
'
pour
le
type
binaire
,
inutile
sous
Unix
.

Enfin
,
fopen()
admet
un
troisième
paramètre
:
1
.

Dans
ce
cas
le
fichier
à
ouvrir
sera
recherché
dans
le
include_path
(
voir
php.ini
)
.

La
valeur
retournée
est
une
ressource
de
fichier
(
identifiant
de
fichier
)
ou
la
valeur
FALSE
en
cas
de
échec
.

$file=fopen('server.log','a+',1)
;
11.1.2
Lecture
11.1.2.1
fgets()
La
fonction
fgets()
permet
de
lire
une
ligne
de
un
fichier
en
mode
texte
.

La
fonction
s'
arrête
lorsqu'
elle
arrive
à
la
fin
du
fichier
ou
à
un
retour
chariot
.

On
peut
préciser
en
second
paramètre
une
longueur
de
texte
en
octet
qui
est
par
défaut
1024
et
ce
paramètre
est
obligatoire
avant
les
versions
4.2
.

Le
premier
paramètre
est
l'
identifiant
du
fichier
.

FALSE
sera
retourné
en
cas
de
erreur
.

ATTENTION
:
fgets()
ne
retourne
pas
FALSE
à
la
fin
du
fichier
.

$ligne=fgets($file)
;
11.1.2.2
fread()
;
La
fonction
fread()
permet
de
lire
un
fichier
en
mode
binaire
.

Le
second
paramètre
est
la
longueur
souhaitée
.

sous
Windows
il
faut
penser
à
placer
'
b
'
dans
fopen(
)
.

La
lecture
s'
arrête
lorsque
les
n
octets
(
longueur
)
ont
été
lus
,
la
fin
du
fichier
a
été
atteinte
ou
que
une
erreur
est
survenue
.

So
ROHAUT
Cours
Programmation
Php
page
51/93
$file=fopen('monimage.gif','rb')
;
$img=fread($file
,
$filesize('nomimage.gif'))
;
fclose($file)
;
11.1.2.3
fscanf()
La
fonction
fscanf()
lit
du
lignes
de
un
fichier
en
fonction
de
un
formatage
particulier
.

$file=fopen('users.txt','r')
;
while($ligne=fscanf($file,"%s\t%s\t%s\n"))
{
echo
$ligne
;
}
11.1.2.4
fgetc()
La
fonction
fgetc()
lit
un
seul
caractère
dans
le
fichier
.

Contrairement
à
fgets()
,
elle
retourne
FALSE
à
la
fin
du
fichier
.

Le
premier
paramètre
est
l'
identifiant
du
fichier
.

11.1.2.5
fgetss()
La
fonction
fgetss()
fonction
est
identique
à
fgets()
mais
la
ligne
retournée
est
débarrassée
de
ses
éventuelles
balises
Php
ou
HTML
.

On
peut
préciser
en
troisième
paramètre
une
liste
de
balises
autorisées
.

11.1.2.6
fgetcsv()
La
fonction
fgetcsv()
est
une
fonction
très
puissante
car
elle
permet
de
lire
un
fichier
de
type
CSV
,
c'
est
à
dire
dont
les
champs
sont
délimités
,
pour
récupérer
les
champs
dans
un
tableau
.

Lesond
paramètre
est
la
longueur
maximale
de
une
ligne
du
fichier
,
le
troisième
paramètre
le
séparateur
,
qui
est
la
virgule
par
défaut
.

Voici
un
exemple
permettant
de
lire
un
fichier
CSV
et
de
en
afficher
le
résultat
sous
forme
de
un
tableau
HTML
:
$filename
=
"
book1.csv
"
;
çid
=
fopen($filename
,
"
r
"
)
;
while
(
$data
=
fgetcsv($id
,
filesize($filename)))
$table[
]
=
$data
;
fclose($id)
;
echo
"
<table>\n
"
;
foreach($table
as
$row
)
{
echo
"
<tr>
"
;
foreach($row
as
$data
)
echo
"
<td>$data</td>
"
;
echo
"
</tr>\n
"
;
}
echo
"
</table>\n
"
;
11.1.2.7
Renvoyer
un
fichier
par
la
sortie
standard
La
fonction
readfile()
prend
comme
paramètre
un
nom
de
fichier
et
renvoie
son
contenu
par
la
sortie
standard
.

La
fonction
readgzfile()
effectue
la
même
chose
mais
le
fichier
est
au
format
compressé
gzip
(
zlib
)
.

So
ROHAUT
Cours
Programmation
Php
page
52/93
11.1.3
Ecriture
Les
deux
fonctions
fwrite()
et
fputs()
sont
identiques
100
%
car
fputs()
est
un
alias
de
fwrite(
)
.

Elles
écrivent
une
chaîne
dans
un
fichier
.

On
peut
limiter
la
longueur
de
la
chaîne
en
troisième
paramètre
mais
par
défaut
toute
la
chaîne
est
écrite
.

La
valeur
retournée
est
le
nombre
de
octets
écrits
,
ou
FALSE
en
cas
de
erreur
.

$file=fopen('monfic.txt','a)
;
$ret=fwrite($file,'Une
ligne
dans
mon
fichier
'
)
;
fclose($file)
;
En
cas
de
travail
sur
un
fichier
binaire
,
il
ne
faut
pas
oublier
sous
Windows
de
rajouter
l'
option
'
b
'
.

11.1.4
Déplacement
11.1.4.1
fseekçë
La
fonction
fseekçë
permet
de
se
déplacer
dans
un
fichier
.

Le
second
paramètre
(
offset
)
est
le
nombre
de
octets
de
déplacement
.

Il
peut
être
négatif
.

Par
défaut
le
déplacement
est
calculé
à
partir
du
début
du
fichier
mais
un
troisième
paramètre
peut
modifier
cet
état
.

La
valeur
retournée
est
0
(
zéro
)
en
cas
de
réussite
,
-1
sinon
.

Un
positionnement
après
la
fin
du
fichier
n'
est
pas
une
erreur
.

–
SEEK_SET
:
Calcul
à
partir
du
début
du
fichier
.

Position
finale
:
Début+offset
–
SEEK_CUR
:
Calcul
à
partir
de
l'
emplacement
actuel
.

Position
finale
:
Actuelle+offset
à
SEEK_END
:
Calcul
à
partir
de
la
fin
du
fichier
.

Position
finale
:
Fin+Offset
.

$ret=fseek($file,0
,
SEEK_END
)
;
//
Fin
du
fichier
11.1.4.2
ftell()
La
fonction
fseekçë
renvoie
la
position
actuelle
du
pointeur
dans
le
fichier
.

$pos=ftell($file)
;
11.1.4.3
rewind()
La
fonction
rewind()
permet
de
retourner
au
début
du
fichier
.

Elle
retourne
TRUE
en
cas
de
réussite
,
FALSE
sinon
.

11.1.5
Fin
de
fichier
La
fonction
feofçë
indique
si
on
est
à
la
fin
du
fichier
ou
non
.

Elle
retourne
TRUE
si
la
fin
de
fichier
a
été
atteinte
,
FALSE
sinon
.

äfd
=
fopen
(
"
/tmp/inputfile.txt
"
,
"
r
"
)
;
while
(
!

feof
çäfdëë
à
$buffer
=
fgets($fd
,
4096
)
;
echo
$buffer
;
}
fclose
(
äfd
)
;
So
ROHAUT
Cours
Programmation
Php
Page
53/93
11.1.6
Fermeture
On
ferme
un
fichier
avec
la
fonction
fclose().Elle
retourne
TRUE
en
cas
de
réussite
,
FALSE
sinon
.

11.2
Travail
sur
les
répertoires
11.2.1
Répertoire
actuel
La
fonction
getcwd()
retourne
le
nom
du
dossier
de
travail
courant
,
c'
est
à
dire
là
où
on
est
.

Attention
sous
Windows
:
cette
fonction
ne
fait
pas
de
distinctions
entre
les
majuscules
et
les
minuscules
.

$chemin=getcwd()
;
echo
$
chemin
;
:
:
/srv/www/site
11.2.2
Se
déplacer
On
se
déplace
avec
la
fonction
chdir(
)
.

L'
argument
peut
être
absolu
ou
relatif
.

En
cas
de
erreur
,
FALSE
est
retourné
.

if(chdir('./rep'))
getcwd()
;
else
die('Impossible
de
se
déplacer
'
)
;
11.2.3
Ouvrir
,
lister
,
fermer
On
ouvre
un
répertoire
en
lecture
avec
la
fonction
opendir()
qui
prend
comme
unique
paramètre
un
nom
ou
chemin
de
répertoire
.

En
cas
de
échec
,
la
fonction
retourne
FALSE
sinon
un
identifiant
(
handler
)
de
répertoire
.

On
lit
une
entrée
avec
la
fonction
readdir()
qui
prend
comme
paramètre
l'
identifiant
de
répertoire
.

Quand
il
n'
y
a
plus
rien
à
lire
,
la
fonction
retourne
FALSE
sinon
elle
retourne
le
nom
de
l'
entrée
actuellement
lue
.

ATTENTION
,
les
entrées
«
.

»
et
«
.
.
»
sont
lues
comme
les
autres
.

On
ferme
un
répertoire
en
cours
de
lecture
avec
la
fonction
closedir()
qui
prend
comme
paramètre
l'
identifiant
de
répertoire
.

$handle=opendir('.')
;
while
(
$file
=
readdir($handle))
{
if
(
$file
!

=
"
.
"

&&
$file
!

=
"
.
.
"
)
{
echo
"
$file\n
"
;
}
}
closedir($handle)
;
On
peut
retourner
au
début
du
répertoire
avec
la
fonction
rewinddir()
qui
prend
comme
paramètre
un
identifiant
de
répertoire
.

La
prochaine
lecture
sera
la
première
du
répertoire
.

11.2.4
Récupérer
toutes
les
entrées
même
si
il
est
possible
de
récupérer
l'
ensemble
du
entrées
de
un
répertoire
avec
les
fonctions
So
ROHAUT
Cours
Programmation
Php
page
54/93
précédentes
et
une
boucle
,
la
fonction
scandir()
propose
la
même
chose
,
en
une
ligne
et
en
plaçant
tous
les
noms
de
fichiers
du
chemin
indiqué
dans
un
tableau
.

Le
premier
paramètre
est
un
chemin
de
répertoire
.

Le
second
est
optionnel
et
définit
l'
ordre
du
tri
qui
est
alphabétique
par
défaut
.

Un
«
1
»
indique
un
tri
alphabétique
décroissant
.

$files=scandir('./rep')
;
print_r($files)
;
11.3
Travail
sur
le
système
de
fichiers
11.3.1
Informations
sur
le
fichier
On
peut
obtenir
diverses
informations
sur
un
fichier
à
l'
aide
du
commandes
de
type
is_x()
:
à
is_dir()
:
TRUE
si
le
nom
de
fichier
est
un
répertoire
à
is_file()
:
TRUE
si
le
nom
de
fichier
est
un
véritable
fichier
normal
à
is_executable()
:
TRUE
si
le
fichier
est
exécutable
.

sous
Windows
il
faut
Php
5.x
.

à
is_readable()
:
TRUE
sir
le
fichier
est
lisible
à
is_writeable()
,
is_writable()
:
TRUE
si
le
fichier
est
accessible
en
écriture
à
is_link()
:
TRUE
si
le
fichier
est
un
lien
.

de
même
,
on
peut
obtenir
des
détails
sur
un
fichier
avec
les
fonctions
filexxx()
:
à
file_exists()
:
TRUE
si
le
fichier
existe
à
fileatime()
:
retourne
sous
forme
de
TIMESTAMP
la
dernière
date
de
accès
.

sous
Windows
,
ce
sera
la
dernière
date
de
modification
.

à
filectime()
:
retourne
la
date
de
création
à
filemtime()
:
retourne
la
date
de
modification
à
filegroup()
:
retourne
le
Gid
du
fichier
.

On
récupère
le
nom
réel
du
groupe
avec
la
fonction
posix_getgrgid(
)
.

–
fileowner()
:
retourne
le
Uid
du
fichier
.

On
récupère
le
nom
réel
de
l'
utilisateur
avec
la
fonction
posix_getpwuid(
)
.

à
fileinode()
:
retourne
l'
inode
du
fichier
–
fileperms()
:
retourne
les
permissions
du
fichier
.

ATTENTION
le
résultat
est
en
base
10
.

Il
faudra
convertir
en
base
8
avec
la
fonction
base_convert(
)
.

à
filesize()
:
retourne
la
taille
du
fichier
en
octets
.

So
ROHAUT
Cours
Programmation
Php
page
55/93
à
filetype()
:
retourne
le
type
du
fichier
.

ATTENTION
il
s'
agit
du
types
de
fichiers
sur
disque
,
pas
de
leur
contenu
(
image
,
etc
)
:
fifo
,
char
,
dir
,
block
,
link
,
file
,
unknown
.

si
un
fichier
est
déjà
ouvert
on
peut
obtenir
des
informations
avec
la
fonction
fstat()
qui
prend
comme
paramètre
un
identifiant
de
fichier
retourné
par
fopen()
et
qui
retourne
un
tableau
indexé
numériquement
ou
associatif
.

La
fonction
stat()
retourne
la
même
chose
mais
on
lui
précise
un
chemin
ou
nom
de
fichier
.

La
fonction
lstat()
est
quasi-identique
sauf
que
dans
le
cadre
du
lien
,
ce
sont
les
informations
sur
le
lien
lui-même
(
et
pas
le
fichier
pointé
)
qui
sont
retournées
.

0
.

volume
(
ou
encore
dev
)
1
.

inode
(
ou
encore
ino
)
2
.

droits
de
accès
au
fichier
(
mode
de
protection
du
inode
)
.

à
convertir
en
octal
.

Voir
aussi
fileperms(
)
.

(
ou
encore
mode
)
3
.

nombre
de
liens
(
ou
encore
nlink
)
4
.

id
de
l'
utilisateur
propriétaire
(
ou
encore
uid
)
5
.

id
du
groupe
propriétaire
(
ou
encore
gid
)
6
.

type
du
volume
de
l'
inode
*
(
ou
encore
rdev
)
7
.

taille
en
octets
(
ou
encore
size
)
8
.

date
du
dernier
accès
(
ou
encore
atime
)
9
.

date
de
la
dernière
modification
(
ou
encore
mtime
)
10.date
du
dernier
changement
(
ou
encore
ctime
)
11.taille
de
bloc
du
système
pour
les
entrées/sorties
*
(
ou
encore
blksize
)
12.nombre
de
blocs
alloués
(
ou
encore
blocks
)
11.3.2
Actions
sur
les
fichiers
et
répertoires
On
retrouve
ici
des
fonctions
qui
portent
souvent
le
même
nom
que
leurs
équivalents
sous
le
shell
Unix
:
–
dirname()
,
basemane()
:
isolent
le
chemin
et
le
nom
de
un
fichier
à
chown()
,
chgrp()
:
changent
le
propriétaire
et
le
groupe
de
un
fichier
.

Le
premier
paramètre
est
le
fichier
,
le
second
le
groupe
ou
le
propriétaire
(
Uid
,
Gid
,
ou
en
toutes
lettres
)
–
chmod()
:
modifie
les
droits
.

Le
premier
paramètre
est
le
nom
du
fichier
,
le
second
les
droits
en
octal
.

ATTENTION
sous
Windows
,
les
résultats
peuvent
surprendre
...
So
ROHAUT
Cours
Programmation
Php
page
56/93
–
copy()
:
copie
de
un
fichier
:
source
et
destination
à
link()
:
créé
un
lien
hard
link
:
cible
,
nom
du
lien
–
symlink()
:
créé
un
lien
symbolique
:
cible
,
nom
du
lien
–
mkdir()
:
créé
un
répertoire
,
le
second
paramètre
est
le
mode
(
droits
par
défaut
)
AVANT
application
du
masque
.

à
rename()
:
renomme
et/ou
déplace
un
fichier
:
orgine
,
destination
.

–
rmdir()
:
supprime
un
répertoire
.

Il
doit
être
vide
.

–
unlink()
:
supprime
un
fichier
.

–
umaskçë
:
modifie
le
umask
par
défaut
11.4
Upload
de
fichiers
L'
upload
de
fichiers
permet
de
envoyer
depuis
un
poste
client
un
fichier
sur
le
serveur
.

Cette
opération
nécessite
un
navigateur
sachant
prendre
en
charge
une
balise
spéciale
et
l'
appel
de
un
script
php
.

Côté
page
HTML
,
il
faut
modifier
la
définition
de
un
formulaire
,
placer
le
champ
formulaire
de
type
FILE
et
indiquer
la
taille
maximale
du
fichier
téléchargé
avec
un
nom
HIDDEN
de
bom
MAX_FILE_SIZE
.

Cette
taille
est
précisée
en
octets
.

Ce
champ
doit
être
placé
AVANT
l'
apparition
du
champ
de
type
FILE
.

Le
formulaire
doit
être
de
type
POST
(
bien
que
GET
soit
possible
,
voir
documentation
Php
)
et
le
type
de
encodage
ENCTYPE
"
/multipart/form-data
"
doit
être
précisé
.

<form
ENCTYPE="multipart/form-data
"
action="/page.php
"
method="post">
<INPUT
TYPE="hidden
"
name="MAX_FILE_SIZE
"
value="35840">
<INPUT
NAME="avatar
"
TYPE="file
"
Sizeë5ù
<input
type="submit
"
value="Enregistrer"/>
</form>
Notes
:
Certains
navigateurs
se
fichent
totalement
du
poid
(
taille
)
du
fichiers
envoyés
en
ne
réagissant
pas
à
la
variable
MAX_FILE_SIZE
.

Dans
ce
cas
la
vérification
doit
être
faite
du
côté
du
serveur
.

au
pire
on
peut
limiter
côté
serveur
la
taille
maximale
à
l'
aide
du
paramètre
upload_max_filesize
dans
le
php.ini
.

On
choisit
son
fichier
via
la
boite
de
dialogue
du
gestionnaire
de
fichiers
quand
on
clique
sur
le
bouton
Parcourir
.

Une
foi
le
formulaire
validé
,
les
données
du
formulaire
et
le
fichier
sont
envoyés
à
la
page
Php
.

Côté
php
,
on
récupère
les
informations
sur
le
fichier
uploadé
via
un
tableau
$_FILE
dont
les
index
sont
les
suivants
$_FILE[nom][propiete
]
le
nom
étant
le
nom
du
champ
du
formulaire
FILE
et
la
propriété
:
à
$_FILES['userfile']['name
'
]
:
Le
nom
original
du
fichier
,
tel
que
sur
la
machine
du
client
web
.

So
ROHAUT
Cours
Programmation
Php
page
57/93
à
$_FILES['userfile']['type
'
]
:
Le
type
Mime
du
fichier
,
si
le
navigateur
a
fourni
cette
information
.

Par
exemple
,
cela
pourra
être
"
image/gif
"
à
$_FILES['userfile']['size
'
]
:
La
taille
,
en
octets
,
du
fichier
téléchargé
.

à
$_FILES['userfile']['tmp_name
'
]
:
Le
nom
temporaire
du
fichier
qui
sera
chargé
sur
la
machine
serveur
.

à
$_FILES['userfile']['error
'
]
:
Le
code
de
erreur
associé
au
téléchargement
de
fichier
(
Php
4.2
)
Par
défaut
le
fichier
téléchargé
et
en
attente
de
déplacement
est
placé
dans
le
répertoire
temporaire
du
système
(
variable
système
Temp
ou
TMPDIR
)
ou
dans
le
répertoire
précisé
par
le
paramètre
de
configuration
upload_tmp_dir
du
fichier
php.ini
.

Il
est
conseillé
de
initialiser
et
de
utiliser
ce
paramètre
.

Le
chemin
du
fichier
temporaire
uploadé
est
donc
:
$tmp_file=ini_get("upload_tmp_dir").'/'.$_FILE['userfile']['tmp_name
'
]
;
Pour
savoir
si
un
fichier
a
été
correctement
uploadé
par
la
méthode
POST
,
on
peut
utiliser
la
fonction
is_uploaded_file()
qui
prend
comme
paramètre
le
nom
du
fichier
uploadé
.

if(is_uploaded_file($_FILE['userfile']['name']))
{
//
ou
tmp_name
echo
$_FILES['userfile']['size
'
]
;
à
Sachant
la
position
du
fichier
temporaire
uploadé
et
si
il
a
été
correctement
uploadé
,
on
peut
utiliser
la
fonction
copy
.

mais
le
mieux
est
de
utiliser
la
fonction
move_uploaded_file()
qui
teste
la
réussite
de
l'
upload
et
qui
déplace
le
fichier
.

Le
premier
paramètre
est
le
nom
du
fichier
uploadé
.

Ce
peut
être
le
nom
du
champ
FILE
,
le
nom
réel
du
fichier
ou
le
nom
du
fichier
temporaire
.

if(move_uploaded_file($_FILES['avatar']['tmp_name'],$_SERVER['DOCUMENT_ROOT
'
]
.

"
/
forum/avatars/$login".$_FILES['avatar']['name
'
]
)
)
à
$avatar=$login.$_FILES['avatar']['name
'
]
;
chmod($_SERVER['DOCUMENT_ROOT']."/forum/avatars/$avatar",0644)
;
}
So
ROHAUT
Cours
Programmation
Php
page
58/93
12
Travail
sur
chaînes
12.1
Fonctions
pour
code
HTML
et
MySQL
12.1.1
Gestion
du
caractères
verrouillés
La
fonction
addslashes()
rajoute
des
slashes
(
backslashes
\
)
devant
tous
les
caractères
qui
doivent
être
verrouillés
.

Ces
caractères
sont
le
«
"
»
,
le
«
'
»
,
le
«
\
»
et
le
caractère
nul
(
NULL
)
.

Ainsi
la
chaîne
résultante
peut
être
utilisée
pour
être
placée
en
base
de
données
via
des
commandes
SQL
.

La
fonction
stripslashes()
effectue
l'
opération
inverse
:
elle
supprime
les
anti-slash
sauf
dans
le
cas
du
doubles
anti-slash
çù
,
elle
n'
en
supprime
qu'
un
.

$chaine="L'oreille
cassée
"
;
$c1=addslashes($chaine)
;
echo
$c1
;
//
L\'oreille
cassée
echo
stripslashes($c1)
;
//
L'
oreille
cassée
12.1.2
balises
et
caractères
spéciaux
HTML
La
fonction
strip_tags()
permet
de
filtrer
une
chaîne
contenant
des
balises
(
tags
)
HTML
en
autorisant
certains
et
interdisant
de
autres
.

Le
premier
paramètre
est
la
chaîne
HTML
.

Le
second
est
la
liste
du
tags
autorisés
.

ATTENTION
:
la
fonction
ne
modifie
pas
le
contenu
du
balises
autorisées
,
laissant
ainsi
les
attributs
CLASS
,
STYLE
et
appels
JavaScript
.

$chaine="<u><i><b>Bonjour
les
amis</b></i></u>
"
;
echo
strip_tags($chaine,'<u><i><b>')
;
//
Bonjour
les
ami
echo
strip_tags($chaine,'<b>')
;
//
<b>Bonjour
les
amis</b>
en
gras
La
fonction
htmlspecialchars()
convertit
certains
caractères
spéciaux
en
entités
HTML
.

Ces
caractères
sont
:
à
«
&
à
:&amp
;
–
«
"
»
:
&quot
;
si
ENT_NOQUOTES
est
utilisé
–
«
'
»
:
&#039
;
si
ENT_QUOTES
est
utilisé
–
«
<
»
:
&lt
;
–
«
>
»
:
&gt
;
Le
second
paramètre
(
ENT_xxx
)
définit
le
fonctionnement
par
rapport
au
quotes
.

La
fonction
htmlentities()
va
plus
loin
en
remplaçant
TOUS
les
caractères
qui
ont
des
équivalents
en
HTML
.

Pour
décoder
une
telle
chaîne
,
il
faut
alors
utiliser
la
fonction
html_entity_decode(
)
.

La
fonction
nl2br()
remplace
tous
les
retour-chariots
de
une
chaîne
en
retours
à
la
ligne
HTML
:
<br
/>
.

La
fonction
urlencode()
formate
une
chaîne
pour
son
utilisation
dans
une
URL
.

Les
espaces
sont
So
ROHAUT
Cours
Programmation
Php
Page
59/93
remplacés
par
des
«
p
»
et
tous
les
caractères
non-alphanumériques
(
sauf
«
-
»
,
«
.

»
et
«
_
»
)
sont
remplacés
par
leur
équivalent
hexadécimal
%XX
.

Une
telle
chaîne
sera
décodée
par
la
fonction
urldecode(
)
.

12.2
Fonctions
texte
générales
12.2.1
Découper
une
chaîne
La
fonction
explode()
permet
de
découper
une
chaîne
selon
un
séparateur
.

Elle
retourne
un
tableau
contenant
les
divers
éléments
découpés
.

Le
premier
paramètre
est
le
séparateur
,
le
second
la
chaîne
.

Un
troisième
paramètre
permet
de
limiter
le
nombre
de
valeurs
retournées
.

$chaine='login:pwd:uid:gid
'
;
$tab=explode(':',$chaine)
;
foreach($tab
as
$value
)
echo
$value
;
//
login
pwd
uid
gid
La
fonction
inverse
se
nomme
implode().Le
premier
paramètre
est
la
à
colle
»
:
le
ou
les
caractères
de
séparation
qui
seront
placés
entre
les
divers
éléments
de
la
chaîne
reconstituée
.

Le
second
paramètre
est
un
tableau
.

//
suite
de
l'
exemple
précédent
$newchaine=implode(',',$tab)
;
echo
$chaine
;
//
login,pwd,uid,gid
La
fonction
join()
est
un
alias
de
implode(
)
.

On
peut
aussi
effectuer
un
découpage
tous
les
n
caractères
avec
la
fonction
chunk_split(
)
.

Elle
découpe
le
premier
paramètre
en
morceaux
de
longueur
du
second
paramètre
(
par
défaut
76
caractères
)
avec
comme
séparateur
le
troisième
paramètre
(
\n\r
par
défaut
)
.

$chaine='FF5EB649C4
'
;
$n_chaine=chunk_split($chaine,2,':')
;
echo
n_chaine
;
//
FF:5E:B6:49:C4
La
fonction
wordwrap()
effectue
la
césure
de
une
chaîne
.

La
chaîne
résultante
sera
le
texte
découpé
en
tenant
compte
du
mots
.

Par
défaut
la
longueur
(
second
paramètre
)
est
de
75
caractères
.

On
peut
préciser
la
chaîne
de
coupure
de
ligne
en
troisième
paramètre
,
et
le
dernier
paramètre
si
il
est
à
1
force
la
coupure
même
au
milieu
de
un
mot
.

Pour
un
affichage
en
HTML
,
il
faut
encapsuler
le
résultat
dans
un
nl2br(
)
.

$chaine="Bonjour
les
ami
et
bienvenus
dans
le
merveilleux
monde
du
langage
Php
!

"
;
echo
nl2br(wordwrap($chaine,20))
;
retourne
Bonjour
les
ami
et
bienvenus
dans
le
merveilleux
monde
du
langage
Php
!

La
fonction
str_split()
découpe
une
chaîne
de
caractère
en
tableau
.

Par
défaut
la
longueur
est
de
1
mais
on
peut
la
choisir
en
second
paramètre
.

So
ROHAUT
Cours
Programmation
Php
page
60/93
On
peut
découper
une
partie
de
chaîne
avec
la
fonction
substr(
)
.

Le
premier
paramètre
est
la
chaîne
,
le
second
le
début
(
depuis
0
)
et
le
dernier
la
longueur
.

Le
début
de
la
chaîne
peut
être
une
valeur
négative
et
dans
ce
cas
on
compte
en
partant
de
la
fin
de
la
chaîne
.

$chaine='abcdef
'
;
echo
substr($chaine,0)
;
//
abcdef
echo
substr($chaine,2,3)
;
//
cde
echo
substr($chaine,-1)
;
//
f
echo
substr($chaine,-3,2)
;
//
de
Les
fonctions
trim()
,
rtrim()
et
ltrim()
suppriment
les
caractères
invisibles
à
droite
(
trim
,
rtrim
)
et
à
gauche
(
trim
,
ltrim
)
de
la
chaîne
.

12.2.2
Rechercher
et
comparer
La
fonction
strcmp()
effectue
une
comparaison
de
deux
chaînes
.

Retourne
<0
si
la
chaine1
est
inférieure
à
chaine2
,
0
si
égale
,
>0
sinon
.

La
fonction
strncmp()
à
le
même
effetmais
sur
une
longueur
donnée
,
en
troisième
paramètre
.

Les
fonctions
strcasecmp()
et
strncasecmp()
sont
des
versions
insensibles
à
la
casse
.

La
fonction
strstr()
recherche
la
première
occurrence
du
second
paramètre
dans
le
premier
et
retourne
la
chaîne
depuis
cette
position
jusque
à
la
fin
.

La
fonction
strchr()
est
un
alias
de
strstr(
)
.

La
fonction
stristr()
est
la
même
mais
insensible
à
la
casse
.

La
fonction
strrchr()
effectue
quasiment
la
même
chose
sauf
que
elle
retourne
la
fin
de
la
chaîne
depuis
le
dernier
caractère
trouvé
.

La
fonction
strpos()
recherche
dans
la
chaîne
du
premier
paramètre
la
chaîne
en
second
paramètre
et
retourne
sa
position
.

On
peut
placer
en
troisième
paramètre
la
position
de
départ
de
la
recherche
.

So
ROHAUT
Cours
Programmation
Php
page
61/93
13
Sessions
et
cookies
13.1
Les
cookies
13.1.1
Création
Un
cookie
s'
envoie
avec
la
fonction
setcookie(
)
.

Les
arguments
sont
les
suivants
:
à
Nom
à
Valeur
à
date
de
expiration
(
un
timestamp
unix
)
•
chemin
(
validité
du
cookie
suivant
le
chemin
dans
l'
url
)
à
domaine
(
pare
défaut
,
le
vôtre
)
à
secure
:
flag
de
sécurité
:
le
cookie
n'
est
accessible
que
via
une
connexion
sécurisée
.

Seul
le
premier
argument
est
obligatoire
.

Pour
ne
pas
spécifier
une
valeur
,
il
suffit
de
ne
rien
mettre
.

Attention
à
quelques
limitations
:
•
Un
cookie
étant
envoyé
avec
les
entêtes
HTTP
,
il
ne
peut
pas
être
envoyé
si
une
sortie
a
déjà
eu
lieu
(
html
,
texte
,
...
)
à
Un
cookie
n'
est
pas
disponible
dans
la
page
qui
l'
a
créé
.

Il
faut
soit
recharger
la
page
,
soit
pointer
sur
une
autre
.

à
Un
cookie
ne
peut
être
supprimé
qu'
avec
les
mêmes
paramètres
qui
ont
servi
à
sa
création
.

C'
est
le
navigateur
qui
supprime
le
cookie
.

setcookie("testcookie",session_id(),time()+3600)
;
if(isset($_COOKIE['testcookie']))
echo
$_COOKIE['testcookie
'
]
;
Dans
l'
exemple
précédent
,
au
premier
chargement
rien
ne
sera
affiché
car
le
contenu
du
cookie
n'
est
pas
encore
accessible
.

au
deuxième
chargement
la
valeur
sera
réellement
affichée
,
mais
attention
au
décalage
entre
la
mise
à
jour
et
l'
accès
.

ifà
!

isset($_COOKIE['testcookie']))
{
setcookie("testcookie",'toto',time()+3600)
;
header("Location
:
http://".$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI
'
]
)
;
}
Dans
cet
exemple
,
on
regarde
si
le
cookie
existe
,
sinon
on
le
créé
et
on
rappelle
la
page
.

13.1.2
Accès
On
accède
au
cookie
grâce
à
la
variable
globale
$_COOKIE
qui
est
un
tableau
.

L'
index
du
tableau
est
le
nom
du
cookie
.

So
ROHAUT
Cours
Programmation
Php
page
62/93
$valeur=$_COOKIE['testcookie
'
]
;
echo
$valeur
;
//
par
rapport
à
l'
exemple
précédent
:
toto
Note
:
on
peut
placer
les
tableaux
avec
les
cookies
.

Il
suffit
de
nommer
son
cookie
avec
une
notation
par
crochets
.

setcookie("testcookie[1]",'toto',time()+3600)
;
setcookie("testcookie[2]",'titi',time()+3600)
;
setcookie("testcookie[3]",'tata',time()+3600)
;
...
(
page
suivante
)
foreach($_COOKIE
as
$tab
)
{
if(is_array($tab))
foreach($tab
as
$key
=>
$value
)
echo
"
$key
=>
$value
"
;
}
13.1.3
Suppression
Pour
supprimer
un
cookie
,
il
suffit
de
donner
une
date
antérieure
à
la
date
actuelle
à
celui
-ci
.

ifà
!

isset($_COOKIE['testcookie']))
{
setcookie("testcookie",'toto',time()+3600)
;
à
else
{
setcookie("testcookie",'',time()-3600)
;
}
if(isset($_COOKIE['testcookie']))
echo
"
Ok
"
;
else
echo
"
Pas
de
cookie
"
;
Dans
l'
exemple
précédent
,
les
appels
au
script
vont
provoquer
successivement
l'
affichage
de
«
pas
de
cookie
»
et
«
Ok
»
.

13.2
Identification
HTTP
13.2.1
Connexion
Cette
possibilité
n'
est
disponible
que
si
Php
est
utilisé
comme
module
Apache
,
et
pas
en
tant
que
script
Cgi
.

L'
identification
HTTP
permet
via
l'
envoi
de
un
HEADER
HTTP
de
demander
une
identification
au
client
.

Dans
ce
cas
le
navigateur
va
ouvrir
une
fenêtre
de
connexion
demandant
une
saisie
de
login
et
de
mot
de
passe
.

php
récupère
bien
entendu
ces
valeurs
.

Voici
l'
exemple
issu
de
la
documentation
Php
if
(
!

isset($_SERVER['PHP_AUTH_USER']))
à
header('WWW-Authenticate
:
Basic
realm="Slyunix
"
'
)
;
header('HTTP/1.0
401
Unauthorized
'
)
;
echo
'
Texte
utilisé
si
le
visiteur
utilise
le
bouton
d\'annulation
'
;
exit
;
à
else
à
echo
"
<p>Bonjour
,
à
$_SERVER['PHP_AUTH_USER']}.</p>
"
;
echo
"
<p>Votre
mot
de
passe
est
à
$_SERVER['PHP_AUTH_PW']}.</p>
"
;
}
Dans
cet
exemple
,
on
passe
en
entête
une
demande
de
authentification
.

En
cas
de
échec
(
bouton
annuler
)
un
message
de
annulation
est
affiché
.

Sinon
on
peut
récupérer
les
valeurs
via
les
variables
:
•
$_SERVER['PHP_AUTH_USER
'
]
:
login
So
ROHAUT
Cours
Programmation
Php
page
63/93
•
$_SERVER['PHP_AUTH_PW
'
]
:
mot
de
passe
13.2.2
Déconnexion
La
déconnexion
n'
est
pas
si
évidente
que
ça
car
une
foi
connecté
,
les
identifiants
sont
placés
dans
la
session
.

La
méthode
la
plus
simple
consiste
à
fermer
le
navigateur
et
à
le
relancer
.

13.3
Sessions
Php
13.3.1
Principe
Les
sessions
permettent
de
préserver
des
données
lors
de
la
visite
de
un
site
.

Chaque
personne
se
voit
attribué
un
identifiant
unique
appelé
identifiant
de
session
,
ou
Sid
.

Ce
Sid
est
soit
stocké
dans
un
cookie
,
soit
passé
par
URL
.

On
peut
ainsi
définir
un
nombre
infini
de
variables
qui
seront
accessibles
durant
toute
la
durée
de
la
session
.

Notez
que
si
vous
fermez
et
relancez
votre
navigateur
,
vous
changez
de
identifiant
,
et
donc
la
précédente
session
est
perdue
,
même
si
elle
était
nommée
.

On
peut
connaître
son
Sid
grâce
à
la
constante
de
même
nom
,
ou
par
la
fonction
session_id(
)
.

13.3.2
Utilisation
13.3.2.1
Ouverture
si
dans
PHP.INI
la
valeur
à
session.auto_start
»
est
activée
,
les
sessions
sont
démarrées
de
manière
automatique
lors
de
l'
accès
à
une
page
.

Sinon
il
faut
utiliser
explicitement
la
fonction
session_start(
)
.

Son
appel
créé
une
session
ou
restaure
une
session
précédemment
stockée
sur
le
serveur
.

ATTENTION
:
L'
ouverture
de
une
session
doit
obligatoirement
apparaître
avant
toute
sortie/affichage
du
script
Php
ou
de
balises
HTML
,
même
une
ligne
vide
!

On
peut
créer
ou
récupérer
une
session
nommée
en
précisant
un
session_name()
qui
prend
comme
paramètre
le
nom
de
la
session
qui
doit
être
créée
(
premier
appel
)
ou
accédée
(
appels
suivants
)
.

La
session
par
défaut
se
nomme
à
Phpsessid
»
et
c'
est
celle
-là
qui
est
chargée
si
session_name()
n'
est
pas
appelée
.

Il
faut
donc
appeler
session_name()
AVANT
session_start()
pour
accéder
à
une
session
nommée
.

Une
session
peut
aussi
être
indirectement
créée
ou
ouverte
avec
l'
utilisation
de
la
fonction
session_register(
)
.

13.3.2.2
Variables
de
session
Il
y
a
deux
moyens
de
créer
des
variables
de
session
,
qui
seront
accessibles
depuis
n'
importe
quelle
page
visitée
à
partir
du
moment
ou
session_start()
a
été
appelée
.

Le
premier
moyen
ne
fonctionne
ne
fonctionne
pas
si
register_globals
est
à
off
dans
PHP.INI
:
Méthode
1
(
déconseillée
)
:
So
ROHAUT
Cours
Programmation
Php
page
64/93
La
fonction
session_register()
prend
comme
paramètre
un
nom
de
variable
et
la
définit
comme
variable
de
session
.

Cette
variable
peut
ensuite
être
accédée
par
son
nom
.

$txt='Bonjour
les
ami
'
;
session_register('txt')
;
//
txt
devient
une
variable
de
session
.

Pour
savoir
si
une
variable
est
enregistrée
dans
la
session
courante
,
on
utilise
session_is_registered(
)
.

if(session_is_registered('txt'))
echo
$txt
;
Pour
supprimer
une
variable
de
session
,
il
faut
utiliser
session_unregister(
)
.

Par
contre
il
ne
faut
pas
oublier
de
utiliser
unset()
pour
supprimer
la
variable
globale
,
car
la
précédente
fonction
ne
la
supprime
pas
,
elle
empêche
seulement
sa
sauvegarde
à
la
fin
du
script
.

if(session_is_registered('txt'))
{
session_unregister('txt')
;
unset($txt)
;
à
Méthode
2
(
La
meilleure
à
utiliser
)
:
On
utilise
tout
simplement
le
tableau
global
$_SESSION
.

Ainsi
:
$_SESSION['txt']="Bonjour
les
ami
"
;
crée
la
variable
de
session
txt
,
echo
$_SESSION['txt
'
]
l'
affiche
et
unset($_SESSION['txt'])
;
l'
efface
.

Pour
effacer
toutes
les
variables
de
sessions
,
il
suffit
de
faire
$_SESSION=array()
;
13.3.3
Expiration
de
la
session
La
durée
de
vie
de
une
session
Php
dépend
de
trois
paramètres
de
configuration
du
fichier
PHP.INI
:
session.gc_maxlifetime
,
session.cookie_lifetime
et
session.cache_expire
.

Le
premier
concerne
la
durée
de
vie
du
données
sur
le
serveur
,
en
nombre
de
secondes
.

Il
est
par
défaut
de
1440
secondes
,
soit
24
minutes
.

au
delà
,
les
données
sont
supprimées
et
elles
seront
rechargées
via
le
cookie
de
session
lors
du
prochain
appel
.

Le
second
est
la
durée
de
vie
du
cookie
de
session
,
exprimé
en
secondes
.

Par
défaut
la
valeur
est
zéro
(
0
)
ce
qui
signifie
:
jusque
à
ce
que
le
navigateur
soit
éteind
.

Le
troisième
est
la
durée
de
vie
du
données
de
session
,
en
minutes
.

Sa
valeur
par
défaut
est
de
180
minutes
,
soit
trois
heures
.

Ce
qui
veut
dire
que
dans
une
même
session
,
on
peut
rester
trois
heures
sur
la
même
page
,
les
valeurs
ne
sont
pas
perdues
.

au
delà
,
il
faut
rouvrir
une
nouvelle
session
et
So
ROHAUT
Cours
Programmation
Php
Page
65/93
restaurer
de
nouvelles
valeurs
.

à
chaque
chargement
de
page
(
ouverture
de
session
)
,
on
recommence
le
décompte
.

On
peut
modifier
le
délai
de
expiration
de
la
session
grâce
à
la
fonction
session_cache_expire()
qui
prend
comme
valeur
la
nouvelle
durée
en
minutes
.

Sans
paramètre
elle
retourne
la
valeur
actuelle
.

13.3.4
Changer
l'
accès
par
défaut
Php
sait
très
bien
se
débrouiller
tout
seul
mais
on
peut
remplacer
la
prise
en
charge
par
défaut
du
sessions
par
ses
propres
fonctions
,
dans
le
but
de
gérer
l'
ouverture
et
la
fermeture
ou
encore
la
sauvegarde
du
données
de
session
dans
un
fichier
ou
une
base
de
données
.

Une
autre
utilisation
peut
être
le
traçage
via
Php
de
toutes
les
ouvertures/fermetures
du
sessions
.

Pour
ça
on
utilise
la
fonction
session_set_save_handler(
)
.

Son
étude
dépasse
le
cadre
du
cours
mais
voici
un
exemple
tiré
de
la
documentation
Php
.

ifà
!

mysql_table_exists("sessions",$DB))
à
$query
=
'
CREATE
TABLE
sessions
(
SessionID
char(255)
not
null
,
LastUpdated
datetime
not
null
,
DataValue
text
,
PRIMARY
Key
(
SessionID
)
,
INDEX
(
LastUpdated
)
)
'
;
mysql_query($query)
;
à
function
sessao_open($aSavaPath
,
$aSessionName){
global
$aTime
;
sessao_gc(
$aTime
)
;
return
True
;
à
function
sessao_close(){
return
True
;
}
function
sessao_read(
$aKey
)
à
$query
=
"
SELECT
DataValue
FROM
sessions
WHERE
SessionID='$aKey
'
"
;
$busca
=
mysql_query($query)
;
if(mysql_num_rows($busca)
==
1
)
{
$r
=
mysql_fetch_array($busca)
;
return
$r['DataValue
'
]
;
à
ELSE
à
$query
=
"
INSERT
INTO
sessions
(
SessionID
,
LastUpdated
,
DataValue
)
VALUES
(
'
$aKey
'
,
NOW()
,
'
'
)
"
;
mysql_query($query)
;
return
"
"
;
}
}
function
sessao_write(
$aKey
,
$aVal
)
à
$aVal
=
addslashes(
$aVal
)
;
$query
=
"
UPDATE
sessions
SET
DataValue
=
'
$aVal
'
,
LastUpdated
=
NOW()
WHERE
SessionID
=
'
$aKey
'
"
;
mysql_query($query)
;
return
True
;
So
ROHAUT
Cours
Programmation
Php
Page
66/93
à
function
sessao_destroy(
$aKey
)
à
$query
=
"
DELETE
FROM
sessions
WHERE
SessionID
=
'
$aKey
'
"
;
mysql_query($query)
;
return
True
;
à
function
sessao_gc(
$aMaxLifeTime
)
à
$query
=
"
DELETE
FROM
sessions
WHERE
UNIX_TIMESTAMP(NOW())
-
UNIX_TIMESTAMP
(
LastUpdated
)
à
$aMaxLifeTime
"
;
mysql_query($query)
;
return
True
;
}
session_set_save_handler("sessao_open
"
,
"
sessao_close
"
,
"
sessao_read
"
,
"
sessao_write
"
,
"
sessao_destroy
"
,
"
sessao_gc
"
)
;
14
image
14.1
Pré-requis
importants
Ceci
concerne
les
versions
de
Php
avant
la
4.2.3
et
EasyPHP
1.6
:
certaines
fonctions
comme
gd_info()
ou
encore
imagecreatetruetype()
ne
sont
pas
toujours
disponibles
car
Php
fait
appel
à
une
bibliothèque
externe
appelée
Gdi
.

Pour
les
version
4.2.3
et
au-delà
on
trouve
des
patches
à
l'
adresse
http://www.boutell.com/gd/
.

Avant
ces
versions
,
la
version
Gd
linkée
avec
Php
est
la
1.8.4
.

Ceci
concerne
les
utilisateurs
de
Php
4.2.3
et
+
et
EasyPHP
1.7
sur
Windows
:
la
configuration
par
défaut
de
EasyPHP
1.7
n'
inclut
pas
le
support
du
image
.

Pour
cela
il
faut
modifier
le
fichier
PHP.INI
en
retirant
le
commentaire
de
:
extension=php_gd2.dll
14.2
Créer
une
image
14.2.1
Types
possibles
Il
faut
tout
d'abord
choisir
le
type
de
l'
image
que
vous
souhaitez
créer
.

Pour
cela
on
peut
tester
quels
types
Php
peut
générer
avec
la
fonction
imagetypes()
et
ses
constantes
associées
:
•
IMG_PNG
:
format
PNG
•
Imgüjpg
:
format
Jpeg
•
Imgügif
:
format
Gif
•
Imgüwmp
:
format
Windows
Bitmap
Bmp
if
(
imagetypes()
&
IMG_PNG
)
{
echo
"
Le
type
PNG
est
supporté
"
;
pui
au
début
du
script
,
on
envoie
un
header
spécifiant
le
type
de
image
:
So
ROHAUT
Cours
Programmation
Php
page
67/93
header
(
"
Content-type
:
image/png
"
)
;
//
ou
image/gif
ou
image/jpeg
14.2.2
Création
14.2.2.1
Nouvelle
image
dynamique
Et
enfin
on
créé
une
image
avec
la
fonction
imagecreate()
(
basée
sur
une
table
de
couleurs
indexée
)
ou
imagecreatetruecolor()
(
en
truecolor
)
avec
comme
paramètres
la
largeur
et
la
hauteur
.

La
seconde
est
conseillée
par
la
documentation
Php
.

Les
fonctions
retournent
une
ressource
identifiant
l'
image
.

Par
défaut
l'
image
est
noire
.

$img=@createimage(100,100)
or
die("Votre
php
ne
supporte
pas
les
image
"
)
;
14.2.2.2
Récupération
de
une
image
existante
Php
peut
charger
une
image
existante
au
lieu
de
la
créer
de
toutes
pièces
.

Dans
ce
cas
l'
image
est
chargée
depuis
un
fichier
et
on
peut
ensuite
la
retravailler
comme
on
le
souhaite
.

On
peut
utiliser
les
fonctions
:
•
imagecreatefromgif()
:
charge
une
image
Gif
à
imagecreatefromjpeg()
:
charge
une
image
Jpeg
à
imagecreatefrompng()
:
charge
une
image
PNG
•
imagecreatefromstring()
:
charge
une
image
depuis
une
chaîne
de
texte
(
par
exemple
un
champ
)
14.2.3
Publication
Enfin
,
on
publie
l'
image
avec
les
fonctions
imagexxx(
)
.

si
cette
fonction
est
utilisée
sans
paramètre
,
l'
image
créée
est
redirigée
vers
la
sortie
standard
.

On
peut
toutefois
préciser
comme
paramètre
un
nom
de
fichier
.

Dans
ce
cas
,
l'
image
est
sauvée
sur
disque
au
format
spécifié
.

•
imagepng()
:
créé
une
image
au
format
PNG
•
imagegif()
:
créé
une
image
au
format
Gif
à
imagejpeg()
:
créé
une
image
au
format
Jpeg
Une
foi
l'
image
crée
,
on
peut
la
supprimer
avec
imagedestroy()
ce
qui
la
décharge
de
la
mémoire
.

Voici
donc
le
code
de
une
page
Php
image.php
retournant
une
image
:
header
(
"
Content-type
:
image/png
"
)
;
$img=@imagecreatetruecolor
(
100
,
50
)
or
die
(
"
Impossible
de
crée
un
flux
de
image
Gd
"
)
;
/*
ICI
ON
PLACE
LES
COMMANDES
de
DESSIN
Ou
MANIPULATION
*/
imagepng
(
$img
)
;
imagedestroy
(
$img
)
;
So
ROHAUT
Cours
Programmation
Php
Page
68/93
14.2.4
Chargement
via
une
autre
page
Pour
appeler
cette
image
dynamique
depuis
une
page
HTML
ou
Php
il
suffit
de
la
placer
dans
une
balise
Img
:
<img
src="image.php">
14.3
Travailler
sur
les
image
14.3.1
Récupérer
des
informations
La
fonction
getimagesize()
permet
de
récupérer
des
informations
sur
une
image
si
on
lui
passe
un
nom
de
fichier
(
pas
de
ressource
image
)
.

Elle
retourne
un
tableau
indexé
.

list($width,$height,$type,$attr)=getimagesize("toto.gif")
;
•
width
:
largeur
x
à
height
:
hauteur
y
•
type
:
1
=
Gif
,
2
=
Jpg
,
3
=
PNG
,
5
=
Psd
,
6
=
Bmp
,
7
=
Tiff
(
Ordre
du
octets
Intel
)
,
8
=
Tiff
(
Ordre
du
octets
Motorola
)
,
9
=
JPC
,
10
=
Jpi
,
11
=
Jpx
,
12
=
Jbi
,
13
=
SWC
,
14
=
Iff
à
attr
:
chaine
width/height
pour
HTML
si
on
travaille
sur
une
image
qu'
on
a
créé
nous
-même
:
•
imagesx()
:
largeur
x
de
l'
image
à
imagesyçë
:
hauteur
de
l'
image
14.3.2
Les
couleurs
Il
n'
est
pas
possible
de
voir
toutes
les
fonctions
cependant
une
chose
est
à
retenir
:
la
notion
de
palette
indexée
(createimage())
et
la
notion
de
truetype
.

Dans
le
premier
cas
les
couleurs
sont
indexées
via
un
numéro
.

Dans
le
second
cas
,
la
couleur
est
une
composante
RvB
.

La
fonction
imagecolorallocate()
permet
de
définir
une
couleur
qui
sera
utilisée
pour
une
image
.

Le
premier
paramètre
est
le
ressource
de
l'
image
,
les
trois
autres
les
niveaux
de
rouge
,
vert
et
bleu
de
la
couleur
.

ATTENTION
:
Avec
une
image
créée
avec
createimage()
,
la
palette
est
indexée
et
le
premier
index
est
la
couleur
du
fond
.

Donc
:
un
premier
appel
à
imagecolorallocate()
dans
ce
cas
modifie
la
couleur
du
fond
.

$white=imagecolorallocate($img,255,255,255)
;
La
fonction
imagecolorat()
retourne
la
valeur
exacte
(
soit
l'
index
de
la
palette
,
soit
un
entier
RVB
)
du
point
au
coordonnées
x/y
de
l'
image
.

So
ROHAUT
Cours
Programmation
Php
page
69/93
$color=imagecolorextact($img,50,50)
;
La
fonction
imagecolortransparent()
permet
de
définir
la
couleur
de
transparence
de
une
image
dont
la
palette
est
indexée
.

Le
premier
paramètre
est
la
ressource
de
l'
image
OBLIGATOIREMENT
créée
avec
imagecreate()
,
le
second
une
valeur
retournée
par
imagecolorallocate(
)
.

La
fonction
imagecolorstotal()
retourne
le
nombre
total
de
couleurs
utilisées
pour
l'
image
donnée
.

14.3.3
Dessin
14.3.3.1
Remplissage
On
utilise
la
fonction
imagefill()
:
$background=imagecolorallocate
(
$img,255,255,255
)
;
ImageFill($img,0,0,$background)
;
La
fonction
imagefilltoborder()
permet
un
remplissage
de
une
zone
délimitée
par
une
couleur
donnée
.

Dans
ce
cas
les
deux
derniers
paramètres
sont
la
couleur
de
la
bordure
et
la
couleur
de
remplissage
.

14.3.3.2
Point
On
utilise
imagesetpixel()
:
$green=imagecolorallocate
(
$img,0,255,0
)
;
Imagesetpixel($img,2,2,$green)
;
14.3.3.3
Ligne
On
utilise
imageline()
:
imageline($img
,
10,10,30,40,$blue
)
;
14.3.3.4
Rectangle
On
utilise
imagerectangle()
pour
un
rectangle
simple
,
imagefilledrectangle()
pour
un
rectangle
rempli
.

$blue=ImageColorAllocate($img,0,0,255)
;
imagerectangle($img
,
10,10,30,40,$blue
)
;
imagefilledrectangle($img,12,12,27,37,$green)
;
14.3.3.5
Cercle
,
ellipse
On
utilise
imageellipse()
ou
imagefilledellipse(
)
.

Attention
les
deux
premiers
paramètres
sont
les
coordonnées
du
centre
de
l'
ellipse
,
les
deux
autres
la
largeur
et
la
hauteur
de
l'
ellipse
.

imageellipse
(
$img
,
50
,
50,30
,
20
,
$red
)
;
On
peut
aussi
faire
des
arcs
de
cercles
avec
les
fonctions
imagearc()
et
imagefilledarc()
:
Juste
So
ROHAUT
Cours
Programmation
Php
Page
70/93
avant
la
couleur
on
précise
le
début
et
la
fin
de
l'
arc
en
degrés
(
de
0
à
360
)
.

14.3.3.6
Polygones
On
utilise
les
fonctions
imagepolygone()
et
imagefilledpolygone(
)
.

Les
sommets
du
polygone
sont
définis
dans
un
tableau
:
Tab[0]=x0
,
Tab[1]=y0
,
Tab[1]=x1
,
Tab[2]=y1
,
...
On
doit
aussi
préciser
le
nombre
de
sommets
.

imagepolygon($img
,
array
(
0
,
0,100
,
200
,
300
,
200),3
,
$blue
)
;
14.3.3.7
Texte
simple
On
utilise
imagestring()
:
imagestring($img
,
1
,
5
,
5
,
"
Une
simple
chaîne
de
texte
"
,
$text_color
)
;
Le
second
paramètre
est
le
numéro
de
police
par
défaut
de
la
page
actuelle
ou
du
navigateur
.

15
La
programmation
objet
15.1
Structure
Une
classe
est
une
collection
de
variables
(
attributs
)
et
de
fonctions
(
méthodes
)
qui
fonctionnent
avec
ces
variables
.

L'
ensemble
forme
les
membres
ou
les
propriétés
de
l'
objet
.

Une
classe
est
définie
en
utilisant
le
mot-clé
à
class
»
:
class
Panier
{
//
Eléments
de
notre
panier
var
$contenu
;
//
Ajout
de
$qte
articles
de
type
$code
au
panier
function
ajout_article
(
$code
,
$qte
)
à
if(isset($this->contenu[$code]))
$this->contenu[$code
]
uà
$qte
;
else
$this->contenu[$code
]
=
$qte
;
}
//
Suppression
de
$num
articles
du
type
$artnr
du
panier
function
suppr_article
(
$code
,
$qte
)
à
if
(
$this->contenu[$code
]
à
$qte
)
à
$this->contenu[$code
]
-=
$qte
;
return
TRUE
;
à
else
à
return
FALSE
;
}
}
}
15.2
Création
de
un
objet
On
utilise
le
mot-clé
«
new
»
.

$mon_caddie=new
Panier
;
si
le
constructeur
existe
(
voir
plus
loin
)
on
peut
bien
entendu
passer
des
valeurs
à
la
création
:
So
ROHAUT
Cours
Programmation
Php
Page
71/93
$o1=new
Obj("riri")
;
15.3
Accès
au
membres
15.3.1
php
4
et
5
On
utilise
les
caractères
à
->
»
.

On
accède
au
membres
avec
la
syntaxe
suivante
.

Notez
que
on
utilise
pas
le
$
devant
un
nom
de
attribut
.

$mon_caddie->contenu=array('ref01
'
=>
2
,
'
ref02
'
=>
1
)
;
au
sein
de
un
objet
,
on
accède
au
attributs
de
la
classe
en
la
précisant
avec
la
variable
à
$this
»
.

si
on
ne
le
précise
pas
,
on
utilise
en
fait
la
variable
localz
à
la
méthode
.

$this->contenu['ref01']+=1
;
15.3.2
php
5
Le
php
5
étend
les
possibilités
de
accès
au
membres
(
variables
et
fonctions
)
via
les
variables
dynamiques
.

ex
:
class
Panier
{
//
Eléments
de
notre
panier
public
$etat=false
;
//
false
:
vide
...
à
function
bidon()
à
return
'
etat
'
;
}
$mon_caddie=new
Panier
;
$pipo='etat
'
;
echo
$mon_caddie->$pipo
;
//
affiche
$this->etat
$fonction='affiche_panier
'
;
$mon_caddie->$fonction()
;
echo
$nom_caddie->{bidon()
}
;
15.4
L'
opérateur
:
:
L'
opérateur
«
:
:
»
permet
de
faire
référence
au
membres
de
une
classe
de
base
(
voir
héritage
)
,
ou
de
utiliser
des
méthodes
alors
que
la
classe
n'
a
pas
été
instanciée
.

class
à
{
function
example()
à
echo
"
je
suis
la
fonction
originale.<br>\n
"
;
}
}
//
Il
n'
y
a
pas
de
objets
de
classe
ao
//
L'
affichage
est
:
je
suis
la
fonction
originale
.

A::example()
;
Dans
le
cas
de
un
appel
à
une
méthode
avec
:
:
de
une
classe
non
instanciée
(
pas
de
objets
)
,
la
méthode
ne
doit
pas
appeler
de
attributs
de
la
classe
,
puisque
ils
n'
existent
pas
.

de
même
pour
la
même
raison
il
ne
faut
pas
employer
la
variable
$this
dans
les
méthodes
appelées
.

So
ROHAUT
Cours
Programmation
Php
page
72/93
15.5
Les
variables
,
protection
15.5.1
php
4.x
On
déclare
les
attributs
avec
le
mot-clé
«
var
»
.

Les
attributs
sont
considérés
comme
étant
tous
publics
.

php
4
ne
possède
aucun
mécanisme
de
protection
du
variables
.

Ainsi
un
attribut
est
accessible
depuis
toute
les
classes
dérivées
et
depuis
l'
extérieur
de
la
classe
.

var
$mavariable
;
Il
est
interdit
de
initialiser
une
variable
lors
de
sa
déclaration
.

var
$toto="salut
!

"
;
//
Ne
marche
pas
!

15.5.2
php
5.x
15.5.2.1
Protection
du
variables
et
fonctions
Le
Php
5
rajoute
la
notion
de
protection
du
données
qui
manquait
à
Php
4
.

On
appelle
ça
les
trois
«
p
»
:
«
public
»
,
à
protected
»
,
à
private
»
,
avec
les
mots-clés
correspondants
.

Voici
un
tableau
récapitulatif
de
leur
effet
:
Accès
Public
Protected
Private
Dans
la
classe
elle-même
ü
ü
ü
depuis
une
classe
dérivée
ü
ü
û
depuis
l'
extérieur
ü
û
û
Note
:
Les
mots-clés
public
,
private
et
protected
peuvent
bien
entendu
être
utilisés
pour
les
méthodes
(
fonctions
)
auquel
cas
la
protection
s'
étend
de
la
même
manière
.

Le
mot-clé
«
var
»
est
toujours
utilisable
en
Php
5
et
dans
ce
cas
les
attributs
sont
considérés
comme
publics
.

Il
est
possible
de
initialiser
les
variables
à
leur
création
avec
n'
importe
quelle
valeur
.

class
Panier
{
//
Eléments
de
notre
panier
,
privé
private
$contenu=array()
;
...
à
15.5.2.2
attributs
et
méthodes
statiques
On
peut
aussi
définir
des
attributs
et
des
méthodes
statiques
qui
seront
accessibles
en
dehors
de
la
classe
,
l'
objet
n'
étant
pas
forcément
déclaré
.

On
rajoute
le
mot-clé
à
static
»
après
la
définition
de
la
visibilité
de
l'
attribut
.

Un
«
static
»
n'
ayant
pas
de
portée
définie
est
considéré
comme
public
.

Par
exemple
,
voici
un
compteur
permettant
de
savoir
combien
de
foi
une
classe
a
été
instanciée
.

Notez
l'
utilisation
de
«
self
»
à
la
place
de
«
$this
»
.

à
$this
»
ne
peut
pas
être
utilisé
ici
il
fait
référence
à
un
objet
et
un
attribut
statique
fait
référence
à
la
classe
elle-même
.

So
ROHAUT
Cours
Programmation
Php
Page
73/93
class
à
{
public
static
$compteur=0
;
function
aùà
{
self::$compteur++
;
//
On
incrémente
à
function
affiche()
{
echo
self::$compteur."<br
/>
"
;
//
self
!

}
}
$o1=new
a
;
$o1->affiche()
;
//
1
$o2=new
a
;
$o2->affiche()
;
//
2
çohà
new
a
;
$o3->affiche()
;
//
3
echo
A::$compteur
;
//
3
15.5.2.3
constantes
de
classe
On
peut
créer
des
constantes
dans
une
classe
à
l'
aide
du
mot-clé
«
const
»
.

La
déclaration
de
une
constante
ne
doit
pas
être
précédée
de
un
indicateur
de
visibilité
.

Une
constante
est
toujours
publique
.

On
ne
peut
pas
non
plus
assigner
à
une
constante
une
valeur
elle-même
dynamique
,
comme
le
retour
de
une
fonction
.

Comme
pour
les
variables
statiques
,
on
utilise
à
self
»
pour
accéder
à
sa
valeur
.

class
à
{
const
classname="A
"
;
function
__construct()
à
echo
self::classname
;
}
}
$o1=new
a
;
//
Affiche
à
15.6
Héritage
et
polymorphisme
L'
héritage
permet
de
définir
des
classes
génériques
réutilisables
.

On
peut
alors
faire
des
extensions
à
une
classe
,
faire
dériver
une
classe
de
une
autre
.

La
classe
dérivée
hérite
de
toutes
les
méthodes
et
variables
de
la
classe
de
base
et
peut
redéfinir
ses
propres
fonctions
et
variables
.

Une
classe
ne
peut
hériter
que
de
une
seule
autre
classe
.

L'
héritage
multiple
n'
est
pas
supporté
,
ni
par
Php
4
,
ni
par
Php
5
.

Par
contre
rien
n'
empêche
de
faire
des
héritages
en
cascade
.

Le
«
polymorphisme
»
permet
de
redéfinir
une
méthode
de
même
nom
dans
une
classe
dérivée
,
par
d'
autres
paramètres
éventuels
.

NOTE
:
Le
«
polymorphisme
»
n'
est
pas
une
surcharge
.

Une
surcharge
consiste
à
définir
plusieurs
méthodes
de
même
nom
mais
de
prototypes
différents
.

php
5
ne
supporte
pas
cette
forme
de
surcharge
.

Le
polymorphisme
remplace
une
méthode
par
une
autre
dans
une
classe
dérivée
.

Pour
créer
un
héritage
on
utilise
le
mot-clé
«
extends
»
.

So
ROHAUT
Cours
Programmation
Php
Page
74/93
class
Panier_nomme
extends
Panier
à
var
$proprietaire
;
function
nom_proprietaire
(
$nom
)
à
$this->proprietaire
=
$nom
;
}
}
On
créé
une
classe
à
Panier_nomme
»
qui
hérite
de
«
Panier
»
.

Elle
possède
donc
les
mêmes
propriétés
que
la
classe
à
Panier
»
à
laquelle
on
rajoute
un
nouvel
attribut
et
une
nouvelle
méthode
.

$ncart
à
new
Panier_nomme
;
$ncart->nom_proprietaire
(
"
Slyce
"
)
;
print
$ncart->proprietaire
;
$ncart->ajout_article("ref03
"
,
1
)
;
Par
le
polymorphisme
on
peut
redéfinir
dans
la
classe
dérivée
les
méthodes
de
la
classe
héritée
.

class
à
{
function
affiche()
à
echo
"
Classe
A<br
/>
"
;
}
à
class
B
extends
à
{
function
affiche()
à
echo
"
Classe
B<br
/>
"
;
}
}
$test=new
b
;
$test->affiche()
;
//
Affiche
Classe
b
15.7
Les
mots-clés
parent
et
self
Le
mot-clé
«
parent
à
représente
la
classe
de
base
(
celle
présente
après
un
«
extends
»
)
et
permet
de
faire
référence
au
variables
et
fonctions
de
une
classe
de
base
.

class
à
{
function
example()
à
echo
"
je
suis
A::example()
,
fonctionnalité
de
base.<br>\n
"
;
}
à
class
B
extends
à
à
function
example()
à
echo
"
je
suis
B::example()
,
fonctionnalité
supplémentaire.<br>\n
"
;
parent::example()
;
}
}
bb
=
new
b
;
//
appelle
B::example()
,
qui
,
à
sont
tour
,
appelle
A::example(
)
.

$b->example()
;
Le
mot-clé
à
self
à
représente
la
classe
elle-même
et
peut
donc
être
utilisée
pour
préciser
l'
accès
à
un
membre
précis
,
comme
un
attribut
statique
.

So
ROHAUT
Cours
Programmation
Php
page
75/93
15.8
Constructeurs
15.8.1
php
4
et
5
Le
constructeur
est
la
méthode
qui
est
automatiquement
appelée
lors
de
la
création
de
un
objet
par
«
new
»
.

Une
méthode
devient
un
constructeur
si
elle
porte
le
même
nom
que
la
classe
dans
laquelle
elle
est
définie
.

class
auto_panier
extends
Panier_nomme
à
function
auto_panier()
à
$this->proprietaire=session_id()
;
}
à
Cette
classe
hérite
de
Panier_nomme
.

Le
constructeur
initialise
le
nom
du
propriétaire
comme
étant
l'
identifiant
de
session
.

Le
constructeur
peut
prendre
comme
n'
importe
quelle
méthode
du
paramètres
optionnels
.

class
auto_panier
extends
Panier_nomme
à
function
auto_panier($nom="anonyme")
à
$this->proprietaire=$nom
;
}
}
$panier=new
auto_panier
;
//
le
constructeur
est
appelé
avec
sa
valeur
par
défaut
$panier2=new
auto_panier(session_id())
;
//
valeur
passée
15.8.2
php
5
Outre
le
nom
de
la
classe
elle-même
,
Php
5
propose
une
méthode
générique
appelée
à
__construct
»
(
avec
deux
underscores
«
_
»
au
début
)
en
lieu
et
place
de
la
première
méthode
vue
ci-dessus
.

Ainsi
:
function
__construct()
à
$this->proprietaire=session_id()
;
}
revient
exactement
au
même
.

15.9
Constructeurs
et
classes
dérivées
15.9.1
php
4
et
5
Soit
les
classes
a
et
B
suivantes
:
class
à
à
function
a
(
)
à
echo
"
je
suis
la
classe
A<br
/>
"
;
}
à
class
B
extends
à
à
function
b
(
)
à
echo
"
je
suis
la
classe
B<br
/>
"
;
}
}
So
ROHAUT
Cours
Programmation
Php
page
76/93
La
création
de
un
nouvel
objet
de
type
b
:
$b=new
b
;
Affichera
je
suis
la
classe
b
si
une
classe
n'
a
pas
de
constructeur
,
c'
est
le
constructeur
de
la
classe
de
base
qui
est
appelé
:
class
à
{
function
a
(
)
à
echo
"
je
suis
la
classe
A<br
/>
"
;
}
à
class
B
extends
à
{
var
$var
;
}
$b=new
b
;
//
je
suis
la
classe
à
On
remarque
que
les
constructeurs
ne
sont
pas
appelés
en
cascade
.

Ainsi
dans
le
cas
la
classe
b
,
le
constructeur
de
la
classe
à
n'
est
pas
appelé
,
ce
qui
est
logique
car
Php
ne
peut
pas
savoir
par
défaut
comment
appeler
le
constructeur
(
quels
paramètres
)
.

On
doit
donc
l'
appeler
explicitement
à
l'
aide
du
mot-clé
«
parent
»
:
class
à
{
function
a
(
)
à
echo
"
je
suis
la
classe
A<br
/>
"
;
}
à
class
B
extends
à
{
var
$var
;
function
Büë
à
echo
"
je
suis
la
classe
B<br
/>
"
;
parent::A()
;
}
}
$b=new
b
;
//
Affiche
:
je
suis
la
classe
b
,
je
suis
la
classe
à
15.9.2
php
5
Le
Php
5
réagit
de
manière
presque
identique
que
Php
4
,
sauf
que
il
est
possible
de
appeler
un
constructeur
en
cascade
,
toujours
avec
le
mot-clé
«
parent
»
,
mais
sans
connaître
le
nom
du
constructeur
de
la
classe
de
base
,
en
utilisant
à
__construct
»
:
class
à
{
function
a
(
)
à
echo
"
je
suis
la
classe
A<br
/>
"
;
}
à
class
B
extends
à
{
var
$var
;
function
__construct()
So
ROHAUT
Cours
Programmation
Php
page
77/93
à
echo
"
je
suis
la
classe
B<br
/>
"
;
parent::__construct()
;
//
Appelle
le
constructeur
de
a
:
aùà
}
}
$b=new
b
;
//
Affiche
:
je
suis
la
classe
b
,
je
suis
la
classe
à
15.10
Destructeur
15.10.1
php
4
Il
n'
y
a
pas
de
destructeur
en
php
4
.

On
fera
confiance
dans
ce
cas
à
la
gestion
de
la
mémoire
(
ramasse-miettes
)
de
Php
,
ou
appeler
une
méthode
particulière
de
la
classe
à
la
fin
du
script
,
chargée
de
faire
le
ménage
,
ce
qui
peut
être
important
par
exemple
lorsqu'
on
a
alloué
une
ressource
pour
une
image
dynamique
.

Pour
détruire
un
objet
,
il
suffit
de
réaffecter
sa
variable
,
ou
de
la
détruire
avec
«
unset
»
.

L'
objet
sera
détruit
de
toute
façon
implicitement
à
la
fin
de
l'
exécution
du
script
.

15.10.2
php
5
Le
destructeur
est
présent
en
Php
5
.

Il
se
nomme
à
__destruct
»
et
sera
automatiquement
appelé
lors
de
la
destruction
de
l'
objet
.

Tout
comme
le
constructeur
,
il
n'
est
pas
appelé
en
cascade
et
doit
donc
être
appelé
explicitement
lors
de
un
héritage
.

class
à
à
function
__destruct()
à
echo
"
au
revoir
la
classe
A<br
/>
"
;
}
à
class
B
extends
à
à
function
__destruct()
à
echo
"
au
revoir
la
classe
B<br
/>
"
;
parent::__destruct()
;
}
}
$b=new
b
;
unset($b)
;
//
destruction
de
l'
objet
,
affiche
au
revoir
la
classe
b
et
à
...
15.11
Affectation
de
objets
15.11.1
Code
commun
Le
fonctionnement
du
affectations
du
objets
en
php
4
et
php
5
n'
est
pas
le
même
.

En
,
effet
sur
Php
4
,
l'
affectation
se
fait
par
copie
,
et
par
référence
en
php
5
ce
qui
peut
induire
de
grandes
différences
de
fonctionnement
lorsque
du
code
objet
en
Php
4
est
utilisé
en
Php
5
.

Nous
allons
voir
un
exemple
à
l'
aide
de
une
classe
très
simple
.

class
à
{
var
$a
;
function
aùà
{
$this->a="Salut
"
;
So
ROHAUT
Cours
Programmation
Php
page
78/93
à
function
affiche()
à
echo
"
$this->a<br
/>
"
;
}
à
function
modif($objet)
à
$objet->a='coucou
'
;
}
15.11.2
php
4
En
php
4
,
les
objets
sont
affectés
par
copie
,
un
nouvel
objet
est
créé
reprenant
toutes
les
propriétés
du
premier
,
mais
est
totalement
indépendant
.

Ainsi
voici
le
résultat
du
code
suivant
:
$obj1=new
a
;
$obj2=$obj1
;
//
affectation
par
copie
$obj1->affiche()
;
//
affiche
salut
$obj2->affiche()
;
//
affiche
Salut
$obj1->a="Bonjour
"
;
$obj1->affiche()
;
//
affiche
Bonjour
$obj2->affiche()
;
//
affiche
Salut
modif($obj1)
;
//
Par
copie
!

$obj1->affiche()
;
//
affiche
Bonjour
$obj2->affiche()
;
//
affiche
Salut
de
même
si
on
créé
une
fonction
qui
doit
modifier
un
objet
,
comme
il
est
passé
par
défaut
en
copie
,
on
ne
modifie
en
fait
que
la
copie
locale
de
l'
objet
.

Dans
ce
cas
on
le
passe
par
référence
.

function
modif(&$objet)
à
$objet->a='coucou
'
;
}
$obj2=&$obj1
;
//
Par
référence
modif($obj1)
;
//
Par
référence
$obj1->affiche()
;
//
affiche
coucou
car
on
a
modifié
par
référence
$obj2->affiche()
;
//
affiche
coucou
Donc
,
si
on
souhaite
créer
un
code
objet
en
Php
4
(
un
peu
)
compatible
avec
les
objets
de
PHP5
,
alors
on
doit
effectuer
des
copies
par
référence
,
et
passer
les
objets
au
fonctions
par
référence
.

Le
code
modifié
ci-dessus
marche
dans
les
deux
cas
.

15.11.3
php
5
En
php
5
,
les
objets
sont
affectés
par
référence
par
défaut
et
de
manière
implicite
.

Ainsi
on
a
$obj1=new
a
;
$obj2=$obj1
;
//
affectation
par
référence
$obj1->affiche()
;
//
affiche
salut
$obj2->affiche()
;
//
affiche
Salut
$obj1->a="Bonjour
"
;
$obj1->affiche()
;
//
affiche
Bonjour
So
ROHAUT
Cours
Programmation
Php
page
79/93
$obj2->affiche()
;
//
affiche
Bonjour
modif($obj1)
;
//
Par
référence
$obj1->affiche()
;
//
affiche
coucou
$obj2->affiche()
;
//
affiche
coucou
Ce
qui
simplifie
énormément
la
tâche
du
développeurs
.

Cependant
,
on
peut
explicitement
demander
la
copie
de
un
objet
à
l'
aide
de
une
méthode
spéciale
«
__clone
»
et
de
l'
instruction
à
clone
»
.

Le
clonage
consiste
à
recopier
tous
les
attributs
de
une
classe
dans
une
autre
.

Le
clonage
peut
être
implicite
(
copie
directe
par
un
mécanisme
interne
de
php
)
ou
explicite
(
via
la
méthode
__clone
)
.

$obj3=clone
$obj1
;
//
on
copie
implicitement
$obj1
dans
$obj3
$obj1->a='Bonjour
'
;
$obj3->a='Au
revoir
'
;
$obj1->affiche()
;
//
Affiche
bonjour
$obj3->affiche()
;
//
Affiche
au
revoir
Cette
méthode
fonctionne
bien
tant
que
on
n'
utilise
pas
des
informations
complexes
comme
des
ressources
ou
du
descripteurs
de
fichiers
.

Par
exemple
si
dans
$obj1
on
avait
ouvert
une
connexion
sur
une
base
de
données
,
on
a
copié
une
ressource
Base
de
données
,
mais
elle
serait
inutilisable
,
car
pas
ouverte
.

Il
faudrait
la
rouvrir
avec
«
__clone
»
:
class
base
à
private
$db
;
function
__construct()
à
$this->db=mysql_connect('localhost')
;
à
function
__clone()
{
$this->db=mysql_connect('localhost')
;
}
}
$obj1=new
Base
;
$obj2=clone
$obj1
;
//
copie
:
__clone
rouvre
la
connexion
pour
la
copie
Note
:
la
méthode
à
__clone
»
est
appelée
implicitement
si
le
mot-clé
à
clone
»
est
utilisé
.

On
ne
peut
pas
appeler
explicitement
cette
méthode
.

15.12
Comparaison
de
objets
15.12.1
php
4
On
peut
effectuer
des
comparaisons
de
objets
en
Php4
.

Deux
instances
de
objets
sont
égales
si
et
seulement
si
:
•
elles
proviennent
de
la
même
classe
,
•
elles
sont
les
mêmes
attributs
,
à
les
attributs
sont
de
même
valeur
.

On
peut
employer
indifféremment
la
comparaison
avec
«
==
»
ou
«
çäë
»
.

function
bool2str($bool)
à
if
(
$bool
çùë
false
)
{
return
'
FALSE
'
;
}
else
{
So
ROHAUT
Cours
Programmation
Php
page
80/93
return
'
TRUE
'
;
}
à
function
compareObjects(&$o1
,
&$o2
)
à
echo
'
o1
==
o2
:
'
.bool2str($o1
==
$o2)."\n
"
;
echo
'
o1
!

=
o2
:
'
.bool2str($o1
!

=
$o2)."\n
"
;
echo
'
o1
===
o2
:
'
.bool2str($o1
çùà
$o2)."\n
"
;
echo
'
o1
!

==
o2
:
'
.bool2str($o1
!

==
$o2)."\n
"
;
à
class
Flag
{
var
$flag
;
function
Flag($flag=true)
{
$this->flag
=
$flag
;
}
à
class
SwitchableFlag
extends
Flag
à
function
turnOn()
à
$this->flag
=
true
;
à
function
turnOff()
à
$this->flag
=
false
;
}
}
ço
=
new
Flag()
;
$p
=
new
Flag(false)
;
$q
=
new
Flag()
;
$r
=
new
SwitchableFlag()
;
echo
"
Compare
du
instances
créées
avec
les
mêmes
paramètres\n
"
;
compareObjects($o
,
$q
)
;
echo
"
\nCompare
du
instances
créées
avec
différents
paramètres\n
"
;
compareObjects($o
,
p
)
;
echo
"
\nCompare
une
instance
de
un
parent
avec
celle
de
une
sous-classe\n
"
;
compareObjects($o
,
$r
)
;
Cet
exemple
va
afficher
:
Compare
du
instances
créées
avec
les
mêmes
paramètres
o1
==
o2
:
TRUE
o1
!

à
o2
:
FALSE
o1
===
o2
:
TRUE
o1
!

==
o2
:
FALSE
Compare
du
instances
créées
avec
différents
paramètres
o1
çà
o2
:
FALSE
o1
!

à
o2
:
TRUE
o1
===
o2
:
FALSE
o1
!

==
o2
:
TRUE
Compare
une
instance
de
un
parent
avec
celle
de
une
sous-classe
o1
==
o2
:
FALSE
o1
!

à
o2
:
TRUE
o1
===
o2
:
FALSE
o1
!

çà
o2
:
TRUE
So
ROHAUT
Cours
Programmation
Php
page
81/93
15.12.2
php
5
php
5
fait
une
différence
entre
la
comparaison
simple
«
==
»
et
complète
«
çäë
»
.

Avec
«
==
»
,
Php
retournera
vrai
si
les
deux
objets
ont
les
mêmes
attributs
et
valeurs
,
et
si
ils
sont
des
instances
de
la
même
classe
,
comme
pour
Php
4
.

Avec
«
===
»
,
Php
retournera
vrai
si
les
deux
objets
font
référence
au
même
objet
de
la
même
classe
.

$o1=new
a
;
$o2=$o1
;
//
référence
çohà
new
a
;
if($o1==$o2)
echo
"
o1==o2<br
/>
"
;
else
echo
"
o1
!

==o2<br
/>
"
;
if($o1===$o2)
echo
"
o1===o2<br
/>
"
;
else
echo
"
o1
!

===o2<br
/>
"
;
if($o1==$o3)
echo
"
o1==o3<br
/>
"
;
else
echo
"
o1
!

==o3<br
/>
"
;
çfëë
echo
"
o1===o3<br
/>
"
;
else
echo
"
o1
!

===o3<br
/>
"
;
Va
afficher
o1==o2
//
o1
et
o2
sont
identiques
(
même
classe
,
mêmes
attributs
et
props
.
)

o1===o2
//
o1
et
o2
sont
des
références
du
même
objet
o1==o3
//
o1
et
o3
sont
identiques
(
même
classe
,
mêmes
attributs
et
props
.
)

o1
!

===o3
//
o1
et
o3
ne
sont
pas
des
références
sur
le
même
objet
)
So
ROHAUT
Cours
Programmation
Php
page
82/93
16
Nouveautés
en
Php
5
16.1
Les
objets
16.1.1
La
fonction
__autoload
La
fonction
à
__autoload
»
indique
à
Php
comment
réagir
quand
on
tente
de
créer
un
objet
depuis
une
classe
qui
n'
a
pas
été
définie
.

C'
est
une
facilité
offerte
qui
ne
se
substitue
pas
forcément
au
require
et
include
.

Elle
peut
être
utile
par
exemple
pour
éviter
de
inclure
l'
ensemble
du
classes
utilisées
dans
un
projet
.

On
préférera
inclure
la
définition
de
la
classe
au
moment
de
la
création
de
son
instance
.

La
fonction
à
__autoload
»
ne
prend
qu'
un
paramètre
,
le
nom
de
la
classe
.

à
vous
de
la
programmer
ensuite
pour
inclure
le
code
nécessaire
.

function
__autoload($class)
{
require_once("/inc/{$class]}.php")
;
}
16.1.2
Les
classes
abstraites
Les
classes
abstraites
sont
une
nouveauté
de
Php
5
.

Une
classe
abstraite
est
une
classe
sans
implémentation
(
qui
ne
peut
être
instanciée
)
,
représentée
par
au
moins
une
fonction
abstraite
(
virtuelle
pure
,
sans
code
)
,
l'
implémentation
étant
effectuée
dans
les
classes
dérivées
.

Les
classes
abstraites
servent
essentiellement
à
définir
une
classe
de
base
normalisée
dont
la
structure
pourra
être
reprise
pour
le
développement
de
autres
classes
effectives
.

Toute
classe
qui
contient
au
moins
une
méthode
abstraite
doit
être
définie
comme
abstraite
.

si
la
classe
dérivée
ne
redéfinit
pas
une
méthode
abstraite
de
la
classe
parente
(
de
base
)
,
elle
devra
être
déclarée
abstraite
à
son
tour
et
ne
pourra
être
instanciée
.

La
classe
qui
implémente
la
méthode
abstraite
doit
être
définie
avec
la
même
visibilité
ou
plus
faible
.

si
la
méthode
abstraite
est
définie
en
tant
que
protégée
,
la
fonction
l'
implémentant
doit
être
définie
en
tant
que
protégée
ou
publique
.

L'
instruction
pour
définir
des
classes
et
méthodes
est
«
abstract
»
.

//
Classe
abstraite
:
elle
contient
une
méthode
abstraite
abstract
class
AbstractClass
{
//
Méthode
abstraite
qui
devra
être
redéfinie
dans
la
classe
dérivée
abstract
protected
function
getValue()
;
public
function
prt()
à
print
$this->getValue()
;
}
à
class
ConcreteClass1
extends
AbstractClass
{
//
Redéfinition
de
la
méthode
abstraite
de
la
classe
de
base
protected
function
getValue()
à
return
"
ConcreteClass1
"
;
}
}
So
ROHAUT
Cours
Programmation
Php
page
83/93
class
ConcreteClass2
extends
AbstractClass
{
//
Redéfinition
de
la
méthode
abstraite
de
la
classe
de
base
protected
function
getValue()
à
return
"
ConcreteClass2
"
;
}
}
$class1
=
new
ConcreteClass1
;
$class1->prt()
;
//
affiche
ConcreteClass1
$class2
=
new
ConcreteClass2
;
$class2->prt()
;
//
affiche
ConcreteClass2
16.1.3
Classes
,
méthodes
et
variables
finales
Php
inclut
un
nouveau
mécanisme
de
protection
interdisant
au
classes
dérivées
de
réimplémenter
une
méthode
ou
une
variable
,
ou
à
une
classe
de
être
elle-même
dérivée
.

Avec
le
mot-clé
«
final
»
,
on
indique
que
la
classe
,
la
méthode
ou
la
variable
sont
définitives
et
que
elles
ne
pourront
plus
être
implémentées
.

Voici
un
cas
de
erreur
:
class
à
{
protected
$val
;
function
__construct()
à
$this->val=1
;
}
final
function
affiche()
{
print
$this->val
;
}
à
class
B
extends
à
{
function
__construct()
à
parent::_construct()
;
à
function
affiche()
{
//
ERREUR
!

ON
NE
PEUT
PAS
REDEFINIR
!

print
$this->val
;
}
}
$o1=new
b
;
$o1->affiche()
;
Dans
la
classe
B
nous
avons
tenté
de
récrire
la
méthode
affiche
déclarée
en
«
final
»
,
et
Php
nous
retournera
une
erreur
.

16.1.4
Les
interfaces
objet
Les
interfaces
permettent
de
créer
du
code
qui
spécifie
quelles
méthodes
et
attributs
une
classe
peut
implémenter
sans
avoir
à
définir
comment
elles
seront
gérées
.

Toutes
les
méthodes
spécifiées
dans
l'
interface
doivent
être
implémentées
dans
la
classe
qui
la
définit
.

L'
interface
est
donc
un
moyen
de
définir
les
pré-requis
obligatoires
à
la
construction
de
un
modèle
de
classe
en
en
donnant
la
liste
du
prototypes
.

On
créé
une
interface
avec
le
mot-clé
à
interface
»
.

Dans
notre
exemple
,
nous
allons
définir
que
toutes
les
classes
qui
implémentent
notre
interface
doivent
obligatoirement
définir
les
fonctions
affiche
et
incrémente
.

So
ROHAUT
Cours
Programmation
Php
page
84/93
interface
Template
à
public
function
affiche()
;
public
function
incremente($cpt)
;
à
Attention
:
la
déclaration
du
méthodes
(
notamment
du
paramètres
)
doit
être
rigoureusement
identique
dans
la
classe
à
celle
de
l'
interface
.

On
indique
que
une
classe
implémente
une
interface
avec
le
mot-clé
à
implements
»
.

class
à
implements
Template
à
protected
$val
;
function
__construct()
à
$this->val=1
;
à
function
affiche()
{
print
$this->val
;
à
function
incremente($cpt)
à
$this->val+=$cpt
;
}
}
$o1=new
a
;
$o1->incremente(2)
;
$o1->affiche()
;
Une
classe
peut
implémenter
plusieurs
interfaces
en
même
temps
.

Dans
ce
cas
la
liste
du
interfaces
doit
être
précisée
après
le
mot-clé
à
implements
à
,
et
chaque
interface
séparée
par
des
virgules
.

interface
Template
à
public
function
affiche()
;
public
function
incremente($cpt)
;
à
interface
Template2
à
public
function
decremente($cpt)
;
}
class
à
implements
Template
,
Template2
à
protected
$val
;
function
__construct()
à
$this->val=1
;
à
function
affiche()
à
print
$this->val
;
à
function
incremente($cpt)
à
$this->val+=$cpt
;
à
function
decremente($cpt)
{
$this->val-=$cpt
;
}
}
So
ROHAUT
Cours
Programmation
Php
page
85/93
16.1.5
Gestion
dynamique
du
méthodes
et
attributs
On
ne
peut
toujours
pas
surcharger
directement
ses
méthodes
,
attributs
et
opérateurs
en
Php
5
comme
en
C++
.

Cependant
de
nouvelles
fonctions
permettent
de
intercepter
des
appels
à
des
méthodes
ou
attributs
non
prévus
.

Note
:
Ces
méthodes
peuvent
uniquement
être
déclenchées
lorsque
votre
objet
,
hérité
ou
non
,
ne
contient
pas
l'
attribut
ou
la
méthode
que
vous
tentez
de
accéder
.

Dans
le
cas
contraire
,
la
méthode
ou
l'
attribut
sont
utilisés
.

Pour
une
méthode
,
on
utilise
la
méthode
à
__call
»
qui
prend
deux
paramètres
.

Le
premier
est
le
nom
de
la
méthode
,
le
second
est
un
tableau
du
paramètres
passés
à
la
méthode
.

Imaginons
que
nous
souhaitons
appeler
la
méthode
à
test
»
de
notre
objet
,
mais
que
nous
n'
avions
pas
prévu
ce
cas
.

Il
suffit
de
gérer
ce
cas
dans
la
méthode
à
__call
»
:
class
à
à
function
__call($m
,
$a
)
{
//
Gère
les
appels
au
méthodes
non
définies
if($m=="test")
à
echo
"
fonction
test
appelée
avec
les
valeurs
ça
"
;
return
$a
;
}
}
}
$o1
=
new
aùà
;
$a
=
$o1->test(1
,
"
2
"
,
3.4
,
true
)
;
//
test
n'
existe
pas
et
pourtant
...
print_r($a)
;
//
ça
marche
et
ça
retourne
les
paramètres
de
test
.

Pour
un
attribut
,
on
utilise
les
méthodes
à
__get
»
et
«
__set
»
.

La
méthode
à
__get
»
est
appelée
implicitement
lorsque
vous
tentez
de
accéder
à
la
valeur
de
une
variable
qui
n'
est
pas
définie
dans
votre
classe
.

Elle
prend
comme
unique
paramètre
le
nom
de
l'
attribut
auquel
vous
tentez
de
accéder
.

La
méthode
à
__set
»
est
appelée
lorsque
vous
tentez
de
affecter
une
valeur
à
un
attribut
qui
n'
est
pas
défini
,
et
prend
deux
paramètres
:
le
nom
de
la
variable
et
la
valeur
affectée
.

class
à
{
private
$tab=array()
;
function
__get($v)
à
ifà
!

isset($this->tab[$v]))
return
false
;
else
return
$this->tab[$v
]
;
à
function
__set($v,$c)
à
$this->tab[$v]=$c
;
}
}
$o1
=
new
aùà
;
$o1->var=1
;
//
Le
membre
var
n'
existe
pas
et
pourtant
...
echo
$o1->var
;
//
ça
marche
et
ça
affiche
1
!

16.1.6
Les
itérations
de
objets
Php
5
indexe
les
attributs
de
ses
objets
.

Il
est
possible
de
accéder
à
la
liste
du
attributs
(
si
la
visibilité
le
permet
)
à
l'
aide
du
simple
boucle
itérative
comme
à
foreach
»
.

So
ROHAUT
Cours
Programmation
Php
page
86/93
class
à
{
public
$v1="salut
"
;
public
$v2="les
"
;
public
$v3="amis
!

"
;
private
$v4="privé
"
;
}
$o1
=
new
aùà
;
foreach($o1
as
$cle
=>
$valeur
)
{
echo
"
$cle
=
$valeur
<br
/>\n
"
;
}
Ce
code
affiche
v1
=
salut
v2
=
les
v3
=
ami
!

Et
les
attributs
qui
ne
sont
pas
visibles
ne
sont
pas
affichés
.

Il
existe
des
interfaces
prédéfinies
permettant
de
créer
sa
propre
classe
de
itération
.

La
classe
à
Iterator
à
implémente
les
cinq
méthodes
suivantes
:
•
current
à
next
•
key
à
valid
à
rewind
On
peut
donc
créer
une
classe
implémentant
cette
interface
pour
,
par
exemple
,
naviguer
dans
le
résultat
de
une
requête
de
base
de
données
,
ou
dans
un
tableau
.

16.1.7
Type
hinting
Php
5
permet
de
contrôler
le
type
de
valeur
passé
en
paramètre
à
une
fonction
.

Prenons
le
code
suivant
qui
retourne
les
infos
de
un
utilisateur
de
classe
à
utilisateur
»
:
function
detail($user)
à
return
$user->infos()
;
à
La
fonction
attend
un
objet
particulier
de
classe
utilisateur
.

Tout
fonctionnera
à
merveille
si
votre
code
est
blindé
.

Cependant
si
on
lui
passe
un
entier
,
ça
ne
marchera
pas
,
mais
c'
est
seulement
lors
du
«
return
$user->infos()
à
que
Php
générera
une
erreur
.

Le
«
type
hinting
»
indique
à
Php
ce
qu'
attend
exactement
la
fonction
.

function
detail(utilisateur
$user
)
à
return
$user->infos()
;
à
Cette
foi
Php
5
retournera
une
erreur
dès
l'
appel
à
la
fonction
si
elle
ne
reçoit
pas
un
objet
de
classe
utilisateur
.

So
ROHAUT
Cours
Programmation
Php
page
87/93
16.2
Les
exceptions
16.2.1
try
...
catch
Php
5
inclut
enfin
le
support
du
exceptions
avec
le
bloc
«
try
...
catch
»
.

Ainsi
on
peut
placer
du
code
«
à
risque
»
ou
un
code
«
exceptionnel
»
qui
peut
produire
une
erreur
dans
un
bloc
à
try
»
,
et
gérer
l'
erreur
,
selon
son
type
,
dans
des
blocs
à
catch
»
.

On
put
utiliser
plusieurs
blocs
à
catch
à
suivant
le
type
de
erreur
généré
.

Attention
,
quand
c'
est
possible
on
gérera
les
erreurs
avec
du
code
normal
.

try
{
...
//
Code
à
risque
de
erreur
à
catch
(
Exception
$e
)
{
...
//
Code
réglant
la
situation
exceptionnelle
}
au
sein
du
bloc
«
try
»
,
l'
exécution
de
une
instruction
erronée
va
déclencher
l'
émission
de
un
signal
:
une
exception
.

Ce
signal
interrompt
l'
exécution
du
reste
de
tout
le
bloc
.

En
fonction
du
signal
,
Php
exécutera
le
bloc
à
catch
à
approprié
.

On
remarque
que
dans
le
bloc
à
catch
»
,
Php
gère
les
exceptions
à
l'
aide
de
une
classe
spéciale
appelée
à
Exception
»
.

Une
exception
est
en
fait
définie
par
un
objet
de
cette
classe
ou
de
une
classe
dérivée
.

On
peut
donc
créer
ses
propres
gestionnaires
de
exceptions
.

Comme
on
peut
écrire
plusieurs
blocs
à
catch
»
pour
gérer
les
exceptions
suivant
le
type
de
objet
.

16.2.2
Déclenchement
avec
throw
On
peut
déclencher
manuellement
une
exception
à
l'
aide
de
l'
instruction
à
throw
»
.

Voici
un
code
qui
provoque
toujours
une
exception
:
try
à
$erreur="Message
de
erreur
"
;
throw
new
Exception($erreur)
;
echo
'
jamais
exécuté
'
;
}
catch
(
Exception
$e
)
à
echo
'
Exception
:
'
.$e->getMessage(
)
.
'

à
la
ligne
'
.$e->getLine()."\n
"
;
}
à
l'
aide
de
l'
instruction
à
throw
à
nous
avons
provoqué
l'
émission
de
une
exception
qui
sera
gérée
par
la
classe
à
Exception
»
.

Dans
ce
cas
,
Php
va
rechercher
le
bloc
«
catch
à
correspondant
au
type
de
objet
créé
pour
gérer
l'
exception
,
ici
à
catch(Exception
$e
)
»
.

16.2.3
classe
Exception
et
classes
personnalisées
La
classe
à
exception
»
est
imposée
par
Php
comme
classe
de
base
et
parente
de
toute
classe
utilisable
avec
«
catch
»
.

La
classe
de
base
dispose
des
méthodes
suivantes
:
à
__construct($erreur,$code)
:
le
constructeur
avec
le
message
de
erreur
et
le
code
à
getMessage()
:
retourne
le
message
de
erreur
généré
So
ROHAUT
Cours
Programmation
Php
page
88/93
•
getCode()
:
Code
erreur
de
l'
exception
•
getLine()
:
numéro
de
la
ligne
du
script
ayant
provoqué
l'
exception
à
getFile()
:
nom
du
script
Php
ayant
provoqué
l'
exception
à
getTrace()
et
getTraceAstring()
:
gestion
de
la
pile
de
appels
,
un
peu
comme
Java
.

•
__toString()
:
chaîne
formatée
à
afficher
.

Les
méthodes
à
getXXXX()
»
sont
finales
.

On
ne
peut
donc
pas
les
étendre
.

mais
le
constructeur
et
la
méthode
à
__toString
»
peuvent
être
étendus
.

On
peut
donc
créer
sa
propre
classe
dérivée
.

class
MonException
extends
Exception
à
public
function
__construct($message="Erreur
par
défaut
"
,
$code
=
0
)
{
parent::__construct($message
,
$code
)
;
}
}
$a=1
;
try
{
switch($a)
à
case
1
:
throw
new
MonException("Ouille
!

"
,$a
)
;
break
;
case
2
:
throw
new
Exception("Aie
!

"
,$a
)
;
break
;
}
à
catch(MonException
$e
)
{
echo
$e->getMessage()
;
}
catch
(
Exception
$e
)
à
echo
'
Exception
:
'
.$e->getMessage(
)
.
'

ligne
'
.$e->getLine()."\n
"
;
}
si
$a
vaut
1
,
à
MonException
à
sera
envoyé
,
si
$a
vaut
2
,
ce
sera
à
Exception
»
.

16.2.4
php
:
Erreur
ou
Exception
?

Il
se
peut
que
dans
certains
cas
,
Php
déclenche
naturellement
une
exception
suivant
l'
exécution
de
une
fonction
.

Dans
ce
cas
,
ce
sera
indiqué
dans
la
documentation
Php
(
voir
site
php
)
en
ligne
.

mais
dans
la
plupart
du
cas
,
c'
est
l'
ancien
système
de
gestion
du
erreurs
qui
est
utilisé
.

Ainsi
le
code
suivant
try
à
$a=fopen('toto','r')
;
à
catch(Exception
$e
)
à
echo
'
Exception
:
'
.$e->getMessage()
;
}
ne
donnera
pas
du
tout
le
résultat
escompté
.

L'
exécution
de
«
fopen
à
ne
provoquera
pas
l'
émission
de
une
exception
mais
une
erreur
php
de
type
WARNING
:
Warning
:
fopen(toto)
[
function.fopen
]
:
failed
to
open
stream
:
No
such
file
or
So
ROHAUT
Cours
Programmation
Php
page
89/93
directory
in
C:\apachefriends\xampp\htdocs\objet\panier.php
on
line
21
php
gère
plusieurs
niveau
de
erreurs
:
WARNING
,
NOTICE
,
etc
.

Par
exemple
,
un
problème
de
ouverture
de
fichier
émet
une
erreur
de
type
WARNING
,
une
erreur
de
syntaxe
PARSE
,
l'
utilisation
de
une
variable
non
déclarée
un
NOTICE
.

On
peut
régler
et
modifier
les
niveaux
de
erreurs
dans
le
php.ini
,
mais
aussi
dynamiquement
via
des
fonctions
.

Parmi
ces
fonctions
,
deux
peuvent
nous
intéresser
.

à
set_error_handler
»
permet
de
modifier
le
comportement
par
défaut
de
Php
lorsqu'
il
rencontre
une
erreur
dans
votre
script
.

au
lieu
de
exécuter
son
propre
gestionnaire
,
il
exécutera
le
votre
.

Attention
,
ce
gestionnaire
ne
peut
pas
gérer
certains
types
de
erreurs
(
syntaxe
,
etc
,
voir
http://www.php.net/manual/en/function.set-error-
handler.php
)
,
mais
dans
le
cas
de
un
simple
WARNING
ou
NOTICE
il
n'
y
a
pas
de
problème
.

On
lui
passe
en
paramètre
le
nom
de
sa
propre
fonction
qui
doit
gérer
l'
erreur
.

Les
paramètres
sont
assez
parlants
.

Dans
notre
fonction
,
nous
allons
déclencher
une
exception
à
la
réception
de
n'
importe
quelle
erreur
.

function
gest_erreur($errno
,
$errstr
,
$errfile
,
$errline
)
{
throw
new
Exception("$errstr
line
$errline",$errno
)
;
}
set_error_handler("gest_erreur")
;
à
l'
exécution
de
notre
bloc
«
try
...
catch
»
,
nous
aurons
cette
foi
Exception
:
fopen(toto)
[
function.fopen
]
:
failed
to
open
stream
:
No
such
file
or
directory
line
21
ce
que
nous
voulions
:
nous
avons
bien
déclenché
une
exception
.

16.2.5
Exception
par
défaut
si
certaines
instructions
Php
génèrent
des
exceptions
et
que
ces
instructions
ne
sont
pas
au
sein
de
un
bloc
«
try
...
catch
»
,
Php
générera
une
exception
par
défaut
avec
son
propre
gestionnaire
de
exceptions
.

On
peut
modifier
cet
état
avec
la
fonction
à
set_exception_handler
»
.

function
exception_handler($exception)
à
echo
"
Exception
imprévue
:
"
,
$exception->getMessage()
,
"
\n
"
;
}
set_exception_handler('exception_handler')
;
So
ROHAUT
Cours
Programmation
Php
Page
90/93
17
Sauvegarder
ses
objets
17.1
Cas
de
une
session
Les
informations
indiquées
ici
fonctionnent
aussi
bien
en
Php
4
que
en
php
5
.

Il
faut
distinguer
le
cas
du
sessions
où
il
faut
passer
un
objet
de
une
page
à
l'
autre
et
le
cas
de
une
sauvegarde
de
un
objet
sur
disque
.

Dans
le
premier
cas
,
si
les
sessions
sont
utilisées
les
objets
peuvent
être
passés
directement
de
une
page
à
une
autre
en
respectant
quelques
règles
:
à
La
session
doit
être
ouverte
sur
chaque
page
par
la
fonction
à
session_start()
»
avant
l'
utilisation
de
l'
objet
•
Les
classes
doivent
être
définies
avant
l'
ouverture
de
session
par
session_start()
et
l'
appel
à
l'
objet
,
ce
qui
implique
soit
de
répéter
cette
déclaration
dans
chaque
page
,
soit
de
la
placer
dans
un
fichier
à
inclure
avec
«
require()
»
ou
«
require_once()
»
en
début
de
script
.

à
L'
objet
doit
être
une
variable
de
session
stockée
soit
par
la
fonction
à
session_register()
»
,
soit
à
l'
aide
du
tableau
global
à
$_SESSION[
]
»
.

Voici
un
exemple
:
objet.inc
:
<
?

class
Panier
{
//
Eléments
de
notre
panier
var
$contenu
;
//
Ajout
de
$qte
articles
de
type
$code
au
panier
function
ajout_article
(
$code
,
$qte
)
à
if(isset($this->contenu[$code]))
$this->contenu[$code
]
uà
$qte
;
else
$this->contenu[$code
]
=
$qte
;
}
//
Suppression
de
$num
articles
du
type
$artnr
du
panier
function
suppr_article
(
$code
,
$qte
)
à
if
(
$this->contenu[$code
]
à
$qte
)
à
$this->contenu[$code
]
-=
$qte
;
return
TRUE
;
à
else
à
return
FALSE
;
}
à
function
liste_article()
{
foreach($this->contenu
as
$ref
=>
$qte
)
echo
"
$ref=$qte
<br
/>
"
;
}
à
class
Panier_nomme
extends
Panier
à
var
$proprietaire
;
function
nom_proprietaire
(
$nom
)
à
$this->proprietaire
=
$nom
;
}
}
So
ROHAUT
Cours
Programmation
Php
page
91/93
?

>
objet.php
:
<
?

php
require_once("objet.inc")
;
session_start()
;
?

à
<html>
<head>
<title>Page
1</title>
</head>
<body>
<
?

$_SESSION['objet']=new
Panier_nomme
;
$_SESSION['objet']->nom_proprietaire("seb")
;
$_SESSION['objet']->ajout_article("ref01",3)
;
$_SESSION['objet']->suppr_article("ref01",1)
;
$_SESSION['objet']->ajout_article("ref02",3)
;
echo
"
{
$_SESSION['objet']->proprietaire}<br
/>
"
;
?

>
<a
href="objet2.php">Page
2</a>
</body>
</html>
objet2.php
:
<
?

php
require_once("objet.inc")
;
session_start()
;
?

à
<html>
<head>
<title>Page
2</title>
</head>
<body>
<
?

echo
$_SESSION['objet']->proprietaire."<br
/>
"
;
$_SESSION['objet']->liste_article()
;
?

à
</body>
</html>
17.2
Autres
cas
Rien
n'
empêche
de
conserver
un
objet
pour
le
récupérer
plus
tard
,
même
après
avoir
fermé
une
session
.

Pour
ça
on
peut
le
stocker
dans
un
fichier
ou
en
base
de
données
.

Pour
récupérer
un
format
correct
de
données
pour
stockage
,
il
faut
utiliser
les
fonctions
«
serialize()
»
et
«
unserialize()
»
.

La
première
fonction
retourne
une
chaîne
de
texte
représentant
la
variable
(
pas
forcément
un
objet
)
passée
en
paramètre
.

Ce
format
de
donnée
peut
ainsi
être
stocké
dans
la
manière
qui
vous
convient
.

Le
seconde
fonction
prend
comme
paramètre
la
chaîne
de
texte
issue
de
serialize
et
retourne
la
variable
du
type
originel
,
dans
notre
cas
un
objet
.

classa.inc
:
<
?

php
class
à
{
var
$one
=
1
;
function
show_one()
à
echo
$this->one
;
So
ROHAUT
Cours
Programmation
Php
page
92/93
à
}
?

à
page1.php
:
<
?

php
include("classa.inc")
;
$a
=
new
a
;
-s
=
serialize($a)
;
//
enregistrez
-s
où
la
page2.php
pourra
le
trouver
.

$fp
=
fopen("store
"
,
"
w
"
)
;
fputs($fp
,
-s
)
;
fclose($fp)
;
?

à
page2.php
:
<
?

php
//
Ceci
est
nécessaire
pour
que
unserialize()
fonctionne
correctement
include("classa.inc")
;
-s
=
implode(
"
"
,
@file("store"))
;
unserialize($s)
;
//
maintenant
,
utilisez
la
méthode
show_one
de
l'
objet
$a
.

$a->show_one()
;
?

>
So
ROHAUT
Cours
Programmation
Php
Page
93/93
Document
Outline
1Introduction
1.1Définition
1.2Historique
1.3Utilisation
pratique
1.4Pages
statiques
vs
page
dynamiques
1.5Scripts
Cgi
1.6Pages
dynamiques
et
Php
1.7Pourquoi
préférer
Php
à
d'
autres
langages
comme
Asp
?

1.8Ce
que
vous
devez
déjà
connaître
1.9Le
nécessaire
serveur
1.10Le
nécessaire
client
1.11Le
respect
du
standards
2Bases
:Présentation
2.0.1Syntaxe
de
base
2.1Intégration
à
HTML
2.2Séparateur
de
instructions
2.3Bloc
de
instructions
2.4Commentaires
3Travailler
avec
des
variables
3.1Déclarer
une
variable
3.2Portée
du
variables
3.3Variables
prédéfinies
3.4Variables
dynamiques
3.5Types
de
variables
3.5.1booléens
3.5.2Entiers
3.5.3Virgule
flottante
3.5.4Chaînes
de
caractères
3.5.5Les
tableaux
3.5.6La
variable
objet
3.6Les
constantes
3.7Obtenir
le
type
de
une
variable
3.8Définir
et
supprimer
une
variable
4Les
opérateurs
4.1La
précédence
du
opérateurs
4.2Opérateurs
arithmétiques
4.3Opérateurs
de
assignation
4.4Opérateurs
sur
les
bits
4.5Opérateurs
de
comparaison
4.6Opérateur
de
erreur
4.7Opérateur
de
exécution
4.8Opérateurs
de
incrémentation/décrémentation
4.9Opérateurs
logiques
4.10Opérateurs
de
chaînes
4.11Opérateur
de
tableaux
5La
notion
de
expression
6Les
structures
de
contrôle
6.1if
6.2while
6.2.1while
classique
6.2.2do
...
while
6.3for
6.4foreach
6.5break
et
continue
6.6switch
6.7return
6.8require
et
include
(
_once
)
7Les
fonctions
7.1Syntaxe
et
portée
7.2Arguments
7.3Valeur
de
retour
7.4Fonctions
internes
8Gestion
du
formulaires
en
Php
8.1GET
et
POST
8.2Récupération
par
tableau
8.3Récupération
directe
8.4Utiliser
du
tableaux
9Date
et
heure
9.1Localisation
9.2Récupérer
la
date
et
l'
heure
9.2.1date()
9.2.2date
locale
strftime()
9.2.3Retour
par
tableau
getdate()
9.2.4L'heure
localtime()
9.3Récupérer
n'
importe
quelle
date
10MySQL
10.1Présentation
10.2Outils
10.2.1PhpMyAdmin
10.2.2MysqlCC
10.3Créer
une
base
10.4Utilisateurs
et
droits
10.5Créer
et
modifier
des
tables
10.5.1Types
Numériques
10.5.1.1Types
entiers
10.5.1.2Types
réels
(
flottants
)
10.5.1.3Types
booléens
10.5.2Types
caractères
10.5.2.1Types
CHAR
10.5.2.2Types
TEXT
10.5.2.3Type
ENUM
10.5.2.4Type
SET
10.5.3Types
date
10.5.3.1Formats
supportés
10.5.3.2Type
DATETIME
10.5.3.3Type
DATE
10.5.3.4Type
TIMESTAMP
10.5.3.5Type
Time
10.5.3.6Type
YEAR
10.5.4Création
:
Syntaxe
SQL
10.5.5Types
de
tables
(
Myisam
et
InnoDB
)
10.5.6Index
FULLTEXT
10.5.6.1Création
10.5.6.2Recherche
10.5.6.3Recherche
booléenne
10.6MySQL
et
Php
10.6.1Connexion
à
une
base
de
données
10.6.1.1Connexion
au
serveur
10.6.1.2Choix
de
une
base
10.6.1.3Fermeture
de
une
connexion
10.6.1.4Séquence
complète
pour
une
base
10.6.2Les
requêtes
10.6.2.1Exécuter
une
requête
10.6.2.2Nombre
de
lignes
affectées
10.6.2.3Nombre
de
lignes
retournées
10.6.2.4Récupérer
les
résultats
10.6.2.5Insertion
avec
auto-incrément
10.6.3Récupération
du
erreurs
11Le
système
de
fichiers
11.1Travail
sur
les
fichiers
11.1.1Ouverture
11.1.2Lecture
11.1.2.1fgets()
11.1.2.2fread()
;
11.1.2.3fscanf()
11.1.2.4fgetc()
11.1.2.5fgetss()
11.1.2.6fgetcsv()
11.1.2.7Renvoyer
un
fichier
par
la
sortie
standard
11.1.3Ecriture
11.1.4Déplacement
11.1.4.1fseek()
11.1.4.2ftell()
11.1.4.3rewind()
11.1.5Fin
de
fichier
11.1.6Fermeture
11.2Travail
sur
les
répertoires
11.2.1Répertoire
actuel
11.2.2Se
déplacer
11.2.3Ouvrir
,
lister
,
fermer
11.2.4Récupérer
toutes
les
entrées
11.3Travail
sur
le
système
de
fichiers
11.3.1Informations
sur
le
fichier
11.3.2Actions
sur
les
fichiers
et
répertoires
11.4Upload
de
fichiers
12Travail
sur
chaînes
12.1Fonctions
pour
code
HTML
et
MySQL
12.1.1Gestion
du
caractères
verrouillés
12.1.2balises
et
caractères
spéciaux
HTML
12.2Fonctions
texte
générales
12.2.1Découper
une
chaîne
12.2.2Rechercher
et
comparer
13Sessions
et
cookies
13.1Les
cookies
13.1.1Création
13.1.2Accès
13.1.3Suppression
13.2Identification
HTTP
13.2.1Connexion
13.2.2Déconnexion
13.3Sessions
Php
13.3.1Principe
13.3.2Utilisation
13.3.2.1Ouverture
13.3.2.2Variables
de
session
13.3.3Expiration
de
la
session
13.3.4Changer
l'
accès
par
défaut
14Images
14.1Pré-requis
importants
14.2Créer
une
image
14.2.1Types
possibles
14.2.2Création
14.2.2.1Nouvelle
image
dynamique
14.2.2.2Récupération
de
une
image
existante
14.2.3Publication
14.2.4Chargement
via
une
autre
page
14.3Travailler
sur
les
image
14.3.1Récupérer
des
informations
14.3.2Les
couleurs
14.3.3Dessin
14.3.3.1Remplissage
14.3.3.2Point
14.3.3.3Ligne
14.3.3.4Rectangle
14.3.3.5Cercle
,
ellipse
14.3.3.6Polygones
14.3.3.7Texte
simple
15La
programmation
objet
15.1Structure
15.2Création
de
un
objet
15.3Accès
au
membres
15.3.1PHP
4
et
5
15.3.2PHP
5
15.4L'opérateur
:
:
15.5Les
variables
,
protection
15.5.1PHP
4.x
15.5.2PHP
5.x
15.5.2.1Protection
du
variables
et
fonctions
15.5.2.2attributs
et
méthodes
statiques
15.5.2.3constantes
de
classe
15.6Héritage
et
polymorphisme
15.7Les
mots-clés
parent
et
self
15.8Constructeurs
15.8.1PHP
4
et
5
15.8.2PHP
5
15.9Constructeurs
et
classes
dérivées
15.9.1PHP
4
et
5
15.9.2PHP
5
15.10Destructeur
15.10.1PHP
4
15.10.2PHP
5
15.11Affectation
de
objets
15.11.1Code
commun
15.11.2PHP
4
15.11.3PHP
5
15.12Comparaison
de
objets
15.12.1PHP
4
15.12.2PHP
5
16Nouveautés
en
Php
5
16.1Les
objets
16.1.1La
fonction
__autoload
16.1.2Les
classes
abstraites
16.1.3Classes
,
méthodes
et
variables
finales
16.1.4Les
interfaces
objet
16.1.5Gestion
dynamique
du
méthodes
et
attributs
16.1.6Les
itérations
de
objets
16.1.7Type
hinting
16.2Les
exceptions
16.2.1try
...
catch
16.2.2Déclenchement
avec
throw
16.2.3classe
Exception
et
classes
personnalisées
16.2.4PHP
:
Erreur
ou
Exception
?

16.2.5Exception
par
défaut
17Sauvegarder
ses
objets
17.1Cas
de
une
session
17.2Autres
cas

