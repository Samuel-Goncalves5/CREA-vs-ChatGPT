Cours
de
initiation
Php
Initiation
à
la
programmation
de
page
web
en
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
1
Cours
de
initiation
Php
TABLE
du
MATIERES
1
.

PRE-REQUIS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.5
2
.

INTRODUCTION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
6
Qu'
est
-ce
que
Php
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..6
Historique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.6
à
qui
s'
adresse
Php
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..6
Comment
ça
marche
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..7
La
nouvelle
génération
du
Web
:
les
sites
Web
actifs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..7
Technologies
dynamiques
côté
client
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
7
Technologies
côté
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..7
de
l'
intérêt
du
traitement
côté
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..7
Architecture
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.8
3
.

INSTALLATION
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..10
3.1
.

Installation
manuel
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.10
Installation
de
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
10
Configuration
de
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..10
Installation
de
Apache
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
11
Configuration
de
Apache
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..11
Lancement
et
arrêt
du
serveur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
12
Test
de
la
configuration
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..12
Interfaçage
avec
un
SGBD
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..12
Quelle
base
de
données
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
13
3.2
.

Installation
rapide
avec
EasyPHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..14
Présentation
d
'
EasyPHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..14
Installation
d
'
EasyPHP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..14
3.3
.

Installation
du
support
de
cours
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.15
4
.

LANGAGE
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
16
4.1
.

Quelques
règles
de
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.16
4.2
.

Les
variable
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..18
Type
de
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..18
Les
constantes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
18
Variable
type
Booléens
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..19
Variable
type
entier
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..19
Les
nombres
à
virgule
flottante
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
19
Les
variable
type
chaînes
de
caractères
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.21
Traitement
du
variables
dans
les
chaînes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..22
Les
variable
type
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Les
variable
type
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Les
variable
type
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
23
Le
transtypage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.24
les
variables
super
global
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..26
4.3
.

Les
opérateurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
27
Les
opérateurs
arithmétiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..27
L'
opérateur
de
affectation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.27
L'
opérateur
de
concaténation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..27
L'
opérateur
arobase
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.27
Les
opérateurs
de
comparaison
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.28
Les
opérateurs
logiques
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.28
les
opérateurs
de
incrémentation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.28
Raccourcis
de
affectation
de
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..28
4.4
.

Instructions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..29
Instruction
conditionnelles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.29
Branchement
conditionnel
:
mots
clé
à
else
»
et
«
elseif
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..29
Instruction
à
switch
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.32
Les
boucles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..32
4.5
.

les
Tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
34
Fonction
de
traitement
de
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..35
Parcourir
les
tableaux
avec
les
boucles
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.35
Tri
de
tableaux
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.39
4.6
.

Fonctions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..41
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
2
Cours
de
initiation
php
Les
fonction
prédéfinis
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
41
Les
fonctions
utilisateurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
41
Portée
du
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.43
Fonction
imbriquer
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.43
Les
inclusions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..45
5
.

LES
FORMULAIRES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
46
La
méthode
GET
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.46
La
méthode
POST
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
46
Urlencode()
et
Urldecode()
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
48
Recupération
du
variables
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..49
Les
contrôles
HTML
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.50
Validation
du
formulaires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.53
Htmlentites()
et
htmlspecialchars
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..54
Les
en-têtes
HTTP
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
55
Récupérer
les
en-têtes
de
la
requête
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..55
6
.

base
de
DONNEES
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.56
Pourquoi
utiliser
une
base
données
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.56
Architecture
externe
de
une
base
de
données
web
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
56
6.1
.

Accès
au
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
56
Support
php
de
connexion
au
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
56
Rudiments
du
langage
SQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.56
PhpMyadmin
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
57
Installer
la
base
formation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
57
6.2
.

base
de
données
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.59
Etablir
une
connexion
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..59
Choisir
une
base
de
données
existante
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.59
Déconnexion
à
la
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.60
Envoyer
une
requête
vers
la
base
de
données
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.61
Rechercher
des
données
dans
la
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..64
Naviguer
dans
les
données
de
la
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..66
Insérer
des
données
dans
la
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
68
addslashes()
et
stripslashes
(
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
68
Modifier
du
données
dans
la
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.68
Supprimer
du
données
dans
la
base
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.70
Les
dates
et
heures
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..70
Conversion
entre
des
formats
de
date
Php
et
du
formats
de
date
MySQL
...
...
...
...
...
...
...
...
...
...
...
...
...
.73
6.3
.

Utiliser
ODBC
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..75
Installation
du
driver
odbc
de
MySql
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
75
Configuration
de
la
source
de
donnée
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
75
7
.

LES
SESSIONS
ET
Cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..78
7.1
.

Les
Cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.78
Qu'
est
-ce
que
un
cookie
?

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
78
Cookies
en
php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.78
Accéder
à
un
cookie
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.78
Supprimer
un
cookie
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
78
7.2
.

Les
sessions
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
81
Les
sessions
avec
cookies
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
81
passage
du
paramètres
par
l'
URL
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.81
Les
sessions
utilisant
les
fonctions
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
82
Configuration
de
php.ini
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.82
Ouverture
de
une
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
83
Enregistrement
de
une
variable
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
83
Utilisation
de
variables
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
83
Dés-enregistrement
de
variables
et
suppression
de
session
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.83
8
.

GESTION
du
FICHIERS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
86
Ouvrir
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.86
Fermer
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
87
Naviguer
dans
des
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
87
Afficher
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..87
Lire
du
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..87
Ecrire
dans
des
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..88
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
3
Cours
de
initiation
Php
Copier
,
supprimer
et
renommer
des
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
88
Chargements
de
tableaux
à
partir
de
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.90
Chargements
de
tableaux
à
partir
de
fichiers
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.90
Gérer
du
répertoires
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..91
Afficher
une
image
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
93
9
.

GESTION
du
ERREURS
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.95
Introduction
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
95
9.1
.

Les
types
de
erreurs
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..95
Erreur
de
syntaxe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..95
Erreur
de
sémantique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..95
Erreur
logique
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..96
Erreur
de
environnement
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..96
Les
message
de
erreur
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
96
9.2
.

Les
niveaux
de
erreur
Php
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
96
Définition
du
niveau
de
rapport
de
erreur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.96
Définition
duniveau
de
rapport
de
erreur
dans
le
«
php.ini
»
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..97
Définition
du
niveau
de
rapport
de
erreur
dans
le
script
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
97
9.3
.

Gérer
les
erreurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
97
Suppression
du
message
de
erreur
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
97
message
de
erreur
personnalisé
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..98
Journalisation
du
erreurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.99
10
.

PROGRAMMATION
ORIENTE
OBJET
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..100
10.1
.

Quelques
concepts
de
programmation
orientée
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.100
11
.

LES
CLASSES
ET
LES
OBJETS
(
php
4
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..101
11.1
.

Création
de
une
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
101
Création
de
attributs
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..101
Création
de
méthodes
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
101
Constructeur
de
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.101
11.2
.

Instanciation
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..102
11.3
.

Accès
au
attributs
et
au
méthodes
de
une
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
102
Les
accesseurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
102
11.4
.

Héritage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.103
L'
opérateur
de
contexte
de
classe
(
:
:
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..104
11.5
.

Redéfinition
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.105
Manipulation
de
classes
et
de
objets
de
origine
similaire
.

...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..105
LES
CLASSES
ET
LES
OBJETS
(
Php
5
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..107
Quelques
exemples
de
changements
:
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
107
11.6
.

Création
de
une
classe
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
107
Constructeurs
et
destructeurs
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..108
11.7
.

Création
de
une
instance
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..109
11.8
.

Assignation
de
un
objet
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.109
11.9
.

Héritage
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.109
11.10
.

Visibilité
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
..109
Visibilité
du
membres
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.110
Visibilité
du
méthodes
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
.110
L'
opérateur
de
résolution
de
portée
(
:
:
)
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
111
11.11
.

Abstraction
de
objets
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
112
11.12
.

Interfaces
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
...
113
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
4
Cours
de
initiation
Php
1
.

PRE-REQUIS
Pour
être
suivi
avec
efficacité
,
certaines
connaissances
seront
utiles
à
ce
cours
:
Le
langage
HTML
:
Php
permet
de
faire
des
manipulations
balise
par
balise
.

Les
base
de
données
:
Langage
Sql
:
Langage
JavaScript
:
les
notions
de
base
comme
la
création
de
base
de
données
,
du
tables
,
des
types
de
données
,
etc
...
L'
interrogation
(
select
)
,
l'
insertion
(
insert
)
,
la
modification
(
update
)
,
etc
...
Création
de
fonction
,
manipulation
du
chaînes
,
etc
...
Les
Réseaux
:
Fonctionnement
générale
,
Structure
client/serveur
etc
...
Ce
cours
s'
adresse
au
débutants
ayant
déjà
programmé
dans
un
langage
simple
ou
à
ceux
désirant
acquérir
les
notions
de
base
de
la
programmation
Php
.

si
vous
avez
déjà
pratiqué
JavaScript
,
vous
constaterez
que
Php
présente
avec
ce
langage
de
script
du
similitudes
et
n'
est
guère
plus
compliqué
.

à
moins
de
gérer
son
propre
serveur
(
ce
qui
n'
est
réaliste
que
dans
le
cas
de
un
intranet
!

)
,
vous
êtes
obligé
de
subir
ce
que
votre
hébergeur
vous
impose
et
comme
il
n'
y
à
pas
un
langage
php
pur
et
dur
comme
c'
est
le
cas
dans
d'
autres
langages
normalisés
,
mais
autant
de
langage
Php
que
ses
multiples
extensions
le
permet
,
et
que
Php
gère
HTML
balise
par
balise
au
niveau
le
plus
bas
,
vous
allez
devoir
mettre
les
mains
dans
le
cambouis
.

Nous
resterons
dans
le
cadre
de
la
réalisation
de
page
Web
simples
et
nous
n'
aborderons
pas
les
techniques
sophistiquées
faisant
appel
au
multimédia
.

Pas
plus
que
nous
montrerons
comment
appliquer
Php
au
commerce
électronique
.

Nous
laisserons
également
dans
l'
ombre
les
questions
de
hébergement
payant
de
sites
Web
et
tout
ce
qui
s'
y
rattache
(
acquisition
de
nom
de
domaine
,
par
exemple
)
.

Nous
essayerons
de
réaliser
une
application
de
gestion
simple
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
5
Cours
de
initiation
Php
2
.

Introduction
Qu'
est
-ce
que
Php
?

Php
est
un
langage
de
script
imbriqué
ou
non
dans
les
page
HTML
et
traité
par
le
serveur
.

Php
permet
de
construire
dynamiquement
des
page
HTML
contenant
les
résultats
de
calculs
ou
de
requêtes
SQL
adressées
à
un
système
de
gestion
de
base
de
données
(
Sgbd
)
.

Grâce
à
de
nombreuses
extensions
,
Php
peut
générer
des
fichiers
Pdf
,
s'
interfacer
avec
des
serveurs
de
messagerie
,
des
serveurs
Ldap
ou
encore
générer
des
image
et
graphiques
Gif
à
la
volée
,
pour
ne
citer
que
quelques-unes
du
fonctionnalités
les
plus
importantes
.

Php
peut
aussi
s'
interfacer
avec
la
quasitotalité
du
Sgbd
du
marché
,
que
ils
soient
commerciaux
ou
que
ils
viennent
du
monde
libre
(
Free
Software
)
.

Php
est
un
langage
de
script
au
niveau
serveur
,
comparable
à
Asp
de
Microsoft
mais
qui
comporte
beaucoup
plus
de
fonctions
,
supporte
pratiquement
tous
les
standards
du
Web
et
est
extensible
.

Historique
Le
langage
Php
a
été
mis
au
point
au
début
de
automne
1994
par
Rasmus
Lerdorf
.

Ce
langage
de
script
lui
permettait
de
conserver
la
trace
du
utilisateurs
venant
consulter
son
CV
sur
son
site
,
grâce
à
l'
accès
à
une
base
de
données
par
l'
intermédiaire
de
requêtes
SQL
.

Ainsi
,
étant
donné
que
de
nombreux
internautes
lui
demandèrent
ce
programme
,
Rasmus
Lerdorf
mit
en
ligne
en
1995
la
première
version
de
ce
programme
qu'
il
baptisa
Personal
Sommaire
Page
Tools
(
outils
basiques
pour
les
page
perso
)
,
pui
Personal
home
page
v1.0
(
traduisez
page
personnelle
version
1.0
)
.

Etant
donné
le
succès
de
Php
1.0
,
Rasmus
Lerdorf
décida
de
améliorer
ce
langage
en
y
intégrant
des
structures
plus
avancées
telles
que
des
boucles
,
du
structures
conditionnelles
,
et
y
intégra
un
package
permettant
de
interpréter
les
formulaires
qu'
il
avait
développé
(
FI
,
Form
Interpreter
)
ainsi
que
le
support
de
mSQL
.

C'
est
de
cette
façon
que
la
version
2
du
langage
,
baptisée
pour
l'
occasion
Phpfifi
version
2
,
vit
le
jour
durant
l'
été
1995
.

php
2
fut
rapidement
utilisé
sur
de
nombreux
sites
(
15000
fin
1996
,
pui
50000
en
milieu
de
année
1997
)
.

à
partir
de
1997
,
Zeev
Suraski
et
Andi
Gurmans
rejoignirent
Rasmus
pour
former
une
équipe
de
programmeurs
afin
de
mettre
au
point
Php
3
(
Stig
Bakken
,
Shane
Caraveo
et
Jim
Winstead
les
rejoignèrent
par
la
suite
)
.

C'
est
ainsi
que
la
version
3.0
de
Php
fut
disponible
le
6
juin
1998
et
s'
appelle
désormais
Php
:
Hypertext
Preprocessor
.

Il
existe
par
ailleurs
des
applications
web
prêtes
à
l'
emploi
(
PHPNuke
,
Php
Spip
,
PHPSlash
...
)
permettant
de
monter
facilement
et
gratuitement
son
portail
.

En
juillet
2000
plus
de
300.000
sites
tournaient
déjà
sous
php
!

à
la
fin
de
l'
année
1999
,
une
version
bêta
de
Php
,
baptisée
Php4
est
apparue
...
La
version
Php4
est
une
version
plus
rapide
que
les
autres
car
elle
utilise
le
nouveau
moteur
Zend
.

de
plus
le
support
du
sessions
est
directement
intégré
alors
que
dans
les
autres
versions
il
fallait
installer
la
bibliothèque
PHPlib
pour
accéder
à
un
contrôle
de
session
ou
il
fallait
en
écrire
un
.

En
2005
la
version
PHP5
...
à
qui
s'
adresse
Php
?

Php
est
l'
outil
idéal
pour
la
création
de
tout
site
Internet
ou
intranet
de
taille
moyenne
ou
de
grande
taille
mais
n'
ayant
pas
à
supporter
un
grand
nombre
de
requêtes
simultanées
.

Plusieurs
sites
affirment
afficher
plus
de
450
000
page
par
jour
sur
une
machine
dont
la
configuration
est
la
suivante
:
Dual
PII-333
,
512Mb
Ram
,
2x9Go
SCSI
,
et
cela
sans
atteindre
100
%
de
charge
sur
chacun
du
deux
processeurs
.

"
php
can
spew
out
HTML
much
much
faster
than
the
leased
line
can
push
the
bits
.
"

(
Rasmus
Lerdorf
)
Reprenant
une
syntaxe
claire
et
familière
puisque
très
proche
de
celle
du
langage
C
,
Php
est
un
langage
dont
la
prise
en
main
est
généralement
rapide
(
Php
provoque
moins
de
phénomènes
de
rejet
que
Perl
...
)
.

C'
est
donc
un
langage
qui
conviendra
autant
au
débutant
désireux
de
se
familiariser
avec
les
techniques
du
web
dynamique
,
que
au
professionnel
cherchant
une
solution
simple
mais
puissante
et
fiable
pour
la
création
de
sites
de
taille
moyenne
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
6
Cours
de
initiation
Php
Comment
ça
marche
Php
est
un
langage
destiné
à
l'
écriture
de
scripts
.

Il
peut
travailler
de
façon
autonome
,
sans
le
support
de
HTML
.

Les
instructions
Php
sont
placées
entre
deux
balises
particulières
,
ce
qui
permet
tant
au
navigateur
que
au
serveur
de
les
reconnaître
.

Lorsque
le
navigateur
demande
une
page
au
serveur
,
si
celui
-ci
y
rencontre
des
balises
Php
,
il
appelle
l'
interpréteur
Php
qui
exécute
un
certain
nombre
de
actions
en
fonction
de
la
nature
du
instructions
contenues
dans
la
page
.

Le
plus
souvent
,
il
va
en
résulter
la
création
de
sorties
pouvant
ou
non
comporter
des
commandes
HTML
et
ces
sorties
vont
être
envoyées
au
navigateur
qui
va
les
afficher
.

C'
est
le
processus
de
création
de
page
Web
dynamiques
.

La
nouvelle
génération
du
Web
:
les
sites
Web
actifs
Le
web
s'
est
orienté
vers
les
sites
web
actifs
,
permettant
à
l'
utilisateur
de
recevoir
des
page
personnalisées
et
offrant
de
ce
fait
une
navigation
plus
dynamique
.

Ils
sont
réalisés
à
l'
aide
de
une
combinaison
de
langages
et
de
technologies
,
à
utiliser
seul
ou
combinés
,
car
ils
sont
tous
indépendants
les
uns
du
autres
.

Ces
technologies
peuvent
être
réparties
en
deux
groupes
,
selon
que
il
s'
agit
de
technologies
côté
client
ou
côté
serveur
.

Technologies
dynamiques
côté
client
Toutes
ces
technologies
sont
des
innovations
relativement
récentes
.

Le
principal
inconvénient
du
côté
client
est
que
l'
administrateur
du
site
(
webmestre
)
ne
dispose
de
aucun
contrôle
sur
le
logiciel
utilisé
pour
afficher
la
page
.

Comme
les
entreprises
tiennent
évidemment
à
prendre
en
compte
autant
de
utilisateurs
que
possible
avec
le
maximum
de
navigateurs
,
les
progrès
sont
particulièrement
lents
pour
ces
nouvelles
technologies
,
prises
en
charge
uniquement
par
la
dernière
génération
du
principaux
navigateurs
du
marché
.

Ces
technologies
côtés
client
sont
:
Contrôle
ActiveX
;
Applets
Java
;
Les
scripts
côté
client
(
essentiellement
le
JavaScript
)
et
DHTML
.

Technologies
côté
serveur
Il
y
a
quelques
années
,
Common
Gateway
Interface
(
Cgi
)
constituait
la
seule
vraie
solution
permettant
de
mettre
des
données
dynamiques
sur
le
Web
.

Les
programmes
Cgi
constituent
un
moyen
relativement
simple
de
créer
une
application
web
acceptant
du
saisie
de
l'
utilisateur
,
de
interroger
une
base
de
données
et
de
renvoyer
certains
résultats
au
navigateur
.

Microsoft
et
Netscape
ont
tous
deux
développés
du
api
propriétaires
pouvant
être
utilisées
pour
développer
du
code
permettant
de
servir
les
requêtes
web
.

Parmi
les
dernières
technologies
web
côté
serveur
,
on
peut
citer
les
Active
Server
Pages
(
Asp
)
,
les
servlets
Java
,
les
JavaServer
Pages
(
Jsp
)
et
Php
.

Php
fonctionne
de
façon
similaire
à
Jsp
et
à
Asp
:
les
sections
de
script
sont
encadrées
par
des
balises
(
<
?

...
?

>
)
et
incorporées
à
une
page
HTML
.

Ces
scripts
sont
exécutés
sur
le
serveur
avant
que
la
page
ne
soit
envoyée
au
navigateur
,
si
bien
que
une
page
Php
ne
se
préoccupe
pas
de
la
prise
en
charge
par
le
navigateur
.

Contrairement
à
Asp
,
Php
est
cependant
indépendant
de
la
plate-forme
et
existe
pour
les
différentes
versions
de
Windows
,
Unix
et
Linux
,
ainsi
que
pour
de
nombreux
serveurs
dont
Apache
et
Iis
.

Le
facteur
décisif
est
que
il
est
libre
et
donc
"
Open
Source
"
.

de
l'
intérêt
du
traitement
côté
serveur
Le
traitement
et
la
génération
de
page
web
côté
serveur
offrent
plusieurs
avantages
par
rapport
au
technologies
côté
client
,
notamment
:
diminution
du
trafic
réseau
en
limitant
les
échanges
client/serveur
à
l'
envoi
de
la
requête
et
de
la
réponse
;
réduction
du
temps
de
téléchargement
:
le
client
ne
reçoit
qu'
une
simple
page
HTML
;
élimination
du
problèmes
de
compatibilité
du
navigateur
;
Amélioration
du
mesures
sécuritaires
,
puisque
vous
pouvez
coder
des
choses
qui
ne
seront
jamais
vues
par
le
navigateur
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
7
Cours
de
initiation
Php
Architecture
La
plupart
du
sites
web
offrent
un
contenu
statique
,
comme
des
publications
scientifiques
ou
du
articles
.

Les
page
de
ces
sites
consistent
en
du
texte
simple
agrémenté
de
quelques
image
et
de
liens
hypertextes
menant
vers
d'
autres
page
.

Pour
cette
catégorie
de
sites
web
,
les
techniques
côté
client
suffisent
amplement
.

HTML
et
les
feuilles
de
style
en
cascade
(
CSS
)
permettent
de
structurer
et
de
présenter
le
contenu
du
page
,
Javascript
permettant
de
ajouter
une
touche
plus
sophistiquée
si
nécessaire
.

Source
inconnue
Or
,
il
se
trouve
que
Internet
et
les
intranets
sont
de
plus
en
plus
utilisés
pour
des
applications
,
dont
la
plupart
mettent
en
jeu
du
base
de
données
.

Ces
sites
et
les
applications
sont
dynamiques
,
car
le
contenu
est
modifié
selon
les
données
impliquées
et
les
actions
de
l'
utilisateur
.

Lorsqu'
une
requête
pour
une
page
provient
du
navigateur
(
Client
)
,
le
serveur
HTTP
procède
en
trois
étapes
:
lecture
de
la
requête
du
navigateur
(
Client
)
;
identification
de
la
page
sur
le
serveur
;
pui
envoi
de
la
page
au
navigateur
(
Client
)
via
Internet
(
ou
intranet
)
.

C'
est
bien
là
que
Php
entre
en
scène
.

En
exécutant
un
programme
php
sur
le
serveur
,
vous
pouvez
créer
de
puissantes
applications
agissant
de
façon
interactive
avec
une
base
de
données
et
générant
du
contenu
dynamique
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
8
Cours
de
initiation
Php
Source
inconnue
au
lieu
de
renvoyer
une
page
HTML
statique
à
l'
utilisateur
,
vous
souhaitez
que
le
serveur
accomplisse
certaines
actions
en
fonction
du
code
Php
:
Php
doit
prendre
quelques
décisions
et
créer
une
page
appropriée
à
la
situation
.

de
ce
fait
,
avec
php
les
actions
du
serveur
sont
les
suivantes
:
lecture
de
la
requête
du
navigateur
(
Client
)
;
identification
de
la
page
sur
le
serveur
;
exécution
du
instructions
venant
de
Php
,
si
besoin
Php
interroge
la
base
du
données
,
pour
modifier
la
page
;
renvoi
de
la
page
au
navigateur
(
Client
)
via
Internet
(
ou
intranet
)
.

Le
code
HTML
pur
est
interprété
par
le
navigateur
,
et
non
pas
exécuté
sur
le
serveur
.

En
écrivant
du
code
Php
qui
sera
exécuté
sur
le
serveur
web
,
vous
pouvez
accomplir
bien
plus
de
choses
que
il
n'
est
normalement
possible
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
9
Cours
de
initiation
Php
3
.

Installation
vous
devez
installer
Php
et
un
serveur
Web
qui
vous
permettra
de
accéder
à
vos
scripts
Php
via
un
navigateur
.

Nous
utiliserons
le
serveur
Web
Apache
,
leader
du
marché
,
rapide
,
fiable
et
gratuit
,
mais
un
serveur
Iis
fonctionne
également
.

vous
pouvez
installer
Apache
et
Php
de
deux
façons
:
à
Automatiquement
,
en
utilisant
un
utilitaire
qui
installe
et
configure
tout
ce
dont
vous
avez
besoin
.

Nous
verrons
le
détail
de
cette
installation
dans
le
chapitre
"
Installation
rapide
avec
EasyPHP
"
.

à
Manuellement
,
en
suivant
les
étapes
ci-dessous
.

3.1
.

Installation
manuel
Les
fichiers
nécessaires
pour
l'
installation
de
Php
et
de
Apache
sont
disponibles
sur
le
web
à
l'
adresse
http://www.php.net/
Il
est
conseillé
de
télécharger
les
dernières
versions
disponibles
.

Installation
de
Php
Créer
un
répertoire
nommé
php
sur
C:/
(
ou
un
autre
répertoire
)
et
copiez
de
dans
les
fichiers
Php
.

Configuration
de
Php
Php4
Copiez
le
fichier
php4ts.dll
de
Php
dans
C:/WINNT/System
(
32
)
.

Copier
le
fichier
php.ini-dist
de
Php
dans
C:/WINNT
en
retirant
le
"
–
dist
"
.

Ce
fichier
permet
de
régler
les
différents
paramètres
de
Php
.

Php5
Copiez
le
fichier
php5ts.dll
de
Php
dans
C:/WINNT/System
(
32
)
.

Copier
le
fichier
php.ini-recommended
de
Php
dans
C:/WINNT
en
retirant
le
–
recommended
.

Ce
fichier
permet
de
régler
les
différents
paramètres
de
Php
.

Voici
une
liste
du
points
utiles
(
à
noter
que
les
"
;
"
servent
de
commentaires
)
:
•
Dans
"
Paths
and
Directories
"
Ajouter
.

(
point
)
dans
include_path
.

Mettre
le
chemin
du
fichiers
dll
(
par
exemple
c:\php\extensions
)
dans
extension_dir
Php4
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Paths
and
Directories
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
include_path
=
.

doc_root
=
user_dir
=
upload_max_filesize
=
2097152
extension_dir
=
c:\php\extensions
enable_dl
=
On
Php5
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Paths
and
Directories
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
include_path
=
.

doc_root
=
user_dir
=
upload_max_filesize
=
2097152
extension_dir
=
c:\php\ext
enable_dl
=
On
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
10
Cours
de
initiation
Php
•
Dans
"
Windows
Extensions
"
Dé-commenter
la
ligne
du
fichiers
de
extension
que
l'
on
souhaite
utiliser
en
enlevant
le
point
virgule
.

Par
exemple
si
vous
souhaitez
utiliser
les
fonctions
ftp
et
imap
:
Php4
;
Windows
Extensions
;
extension=php_ftp.dll
;
extension=php_gettext.dll
;
extension=php_ifx.dll
extension=php_imap.dll
;
Php5
;
Windows
Extensions
;
extension=php_mysql.dll
extension=php_ftp.dll
;
extension=php_gettext.dll
;
extension=php_ifx.dll
extension=php_imap.dll
;
Remarque
:
MySQL
étant
supporté
nativement
dans
Php4
,
il
n'
est
pas
nécessaire
de
charger
la
dll
,
ce
qui
n'
est
pas
le
cas
pour
PHP5
.

à
Dans
"
[
Session
]
"
si
vous
souhaitez
utiliser
les
sessions
Php
,
le
plus
simple
est
de
garder
la
configuration
par
défaut
,
et
donc
de
stocker
les
sessions
dans
des
fichiers
.

Il
faut
par
contre
spécifier
le
chemin
du
répertoire
où
seront
stockées
ces
sessions
.

Par
exemple
,
vous
pouvez
créer
un
répertoire
c:\php\sessions
.

Php4
et
Php5
[
Session
]
session.save_handler
à
files
;
les
sessions
sont
stockées
dans
des
fichiers
session.save_path
à
c:\php\sessions
session.use_cookies
=
1
;
on
utilise
des
cookies
pour
transmettre
l'
identifiant
de
session
session.name
=
Phpsessid
;
etc
.

Installation
de
Apache
vous
devez
l'
installer
dans
C:/Program
files/Apache
group
Configuration
de
Apache
Le
fichier
"
httpd.conf
"
permet
de
configurer
Apache
.

vous
pouvez
par
exemple
ajouter
votre
adresse
Ip
à
la
ligne
Server
Name
;
vous
pouvez
également
modifier
la
racine
Web
de
vos
documents
,
à
l'
aide
de
la
directive
DocumentRoot
.

Par
défaut
il
s'
agit
du
répertoire
"
htdocs
"
,
dans
le
répertoire
de
installation
de
Apache
.

Il
convient
de
le
changer
,
pour
"
c:\web
"
par
exemple
.

ServerName
127.0.0.1
DocumentRoot
"
c:/web
"
Et
un
peu
plus
bas
...
<Directory
"
c:/web">
Options
All
AllowOverride
All
Order
allow,deny
Allow
from
all
</Directory>
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
11
Cours
de
initiation
Php
Copiez
les
lignes
de
configuration
suivantes
,
pui
collez
-les
dans
le
fichier
httpd.conf
.

Php4
à
for
the
apache
module
LoadModule
php4_module
c:/php/sapi/php4apache.dll
#Ajouter
a
la
suite
de
la
ligne
ci-dessous
les
extensions
que
vous
#voulez
voir
reconnaître
par
php
,
précédée
de
un
point
AddType
application/x-httpd-php
.phtml
.pwml
.php3
.php4
.php
.php2
.inc
#for
the
cgi
binary
(
you
can
use
that
one
compiled
with
force
cgi
redirect
too
)
ScriptAlias
/php4/
"
C:/php/
"
Action
application/x-httpd-php4
"
/php4/php.exe
"
Php5
à
for
the
apache
module
LoadModule
php5_module
c:/php/sapi/php5apache.dll
#Ajouter
a
la
suite
de
la
ligne
ci-dessous
les
extensions
que
vous
#voulez
voir
reconnaître
par
php
,
précédée
de
un
point
AddType
application/x-httpd-php
.phtml
.pwml
.php3
.php4
.php
.php2
.inc
.php5
#for
the
cgi
binary
(
you
can
use
that
one
compiled
with
force
cgi
redirect
too
)
ScriptAlias
/php5/
"
C:/php/
"
Action
application/x-httpd-php5
"
/php5/php.exe
"
Pour
plus
de
informations
sur
Apache
,
il
y
a
le
site
web
de
Apache
Software
Foundation
à
l'
adresse
:
http://www.apache.org/
.

Il
existe
aussi
un
précis
et
concis
sur
Apache
chez
O’Reilly
.

Lancement
et
arrêt
du
serveur
Dans
Démarrer
,
Programmes
,
Apache
httpd
Server
,
cliquez
Start
Apache
in
console
.

Une
fenêtre
s'
ouvre
indiquant
:
Apache
(
Winn
32
)
php
running
…
Pour
arrêter
le
serveur
,
dans
Démarrer
,
Exécuter
tapez
cmd
.

Dans
la
fenêtre
qui
s'
ouvre
,
tapez
cd
program
files/apache
group/apache
pui
apache
à
k
shutdown
.

Test
de
la
configuration
Pour
tester
si
tout
est
bien
installé
,
il
faut
d'abord
vous
rendre
sur
http://127.0.0.1
(
ou
l'
adresse
Ip
de
votre
site
)
.

vous
devez
obtenir
une
page
vous
indiquant
que
Apache
fonctionne
correctement
.

Dans
le
cas
contraire
,
vérifiez
que
vous
avez
bien
lancé
apache.exe
.

Il
faut
ensuite
vérifier
que
Php
fonctionne
aussi
.

Pour
cela
,
lancez
votre
éditeur
de
texte
(
par
exemple
phpedit
)
,
Créer
un
nouveau
fichier
,
avec
l'
extension
adaptée
(
phpinfo.php
par
exemple
)
et
insérez
y
la
ligne
suivante
:
<
?

phpinfo()
;
?

à
Sauvegardez
le
fichier
dans
le
répertoire
adéquat
(
c:\program
files\apache
group\apache\htdocs\
)
,
pui
lancez
ce
fichier
à
l'
aide
de
votre
navigateur
(
http://127.0.0.1/phpinfo.php
)
:
vous
devez
obtenir
une
page
de
information
sur
la
configuration
de
Php
.

Interfaçage
avec
un
Sgbd
L'
interfaçage
avec
une
base
de
données
est
certainement
un
du
aspects
les
plus
intéressants
du
langage
Php
.

Une
base
de
données
peut
offrir
des
solutions
très
séduisantes
à
peu
près
à
toutes
les
applications
nécessitant
la
génération
de
page
HTML
dynamiques
.

Ceci
vous
permettra
de
organiser
vos
page
en
trois
parties
:
à
un
corps
de
HTML
faisant
la
présentation
,
et
invoquant
les
scripts
de
génération
dynamique
de
contenu
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
12
Cours
de
initiation
Php
•
les
scripts
de
génération
de
contenu
(
mise
en
forme
du
données
lues
dans
la
base
de
données
)
;
à
l'
interfaçage
avec
la
base
de
données
,
avec
des
fonctions
de
enrobage
(
wrappers
)
,
permettant
de
s'
abstraire
de
la
base
de
données
utilisée
.

Quelle
base
de
données
?

Le
trio
Php
p
MySQL
p
Apache
est
une
solution
éprouvée
et
très
fiable
,
sur
une
machine
Linux
ou
FreeBSD
ou
sur
une
plate-forme
Win32
,
il
est
souvent
livré
dans
un
package
appelé
"
map
"
.

php
contient
des
connexions
natives
vers
la
plupart
du
systèmes
de
base
de
données
.

En
plus
de
MySQL
,
vous
pouvez
vous
connecter
directement
au
base
de
données
PostgreSQL
,
mSQL
,
Oracle
,
dbm
,
filePro
,
Informix
,
Interbase
et
Sybase
pour
ne
citer
qu'
elles
.

Grâce
au
standard
ODBC
(
Open
Database
Connectivity
)
,
vous
pouvez
vous
connecter
à
n'
importe
quelle
base
de
données
possédant
un
pilote
ODBC
,
comme
les
produits
de
Microsoft
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
13
Cours
de
initiation
Php
3.2
.

Installation
rapide
avec
EasyPHP
Présentation
d
'
EasyPHP
EasyPHP
installe
et
configure
automatiquement
un
environnement
de
travail
complet
permettant
de
mettre
en
œuvre
toute
la
puissance
et
la
souplesse
qu'
offrent
le
langage
dynamique
Php
et
son
support
efficace
de
base
de
données
.

EasyPHP
regroupe
un
serveur
http
Apache
,
une
base
de
données
MySQL
,
Php
et
un
outil
de
administration
de
base
de
données
phpMyAdmin
.

Installation
d
'
EasyPHP
Nous
utiliserons
dans
le
cadre
de
ce
cours
,
la
version
EasyPHP
1.8
comprenant
Apache
1.3.33
,
php
4.3.10
,
PHPMyadmin
2.6.1
et
MySQL
4.1.9
.

Télécharger
EasyPHP
sur
le
site
http://www.easyphp.org/
,
et
l'
installer
à
l'
aide
du
fichier
de
installation
(
easyphp1-8_setup.exe
)
Le
"
lancement
"
de
EasyPHP
revient
à
mettre
en
route
le
serveur
Apache
et
MySQL
.

à
l'
installation
,
un
raccourci
vers
EasyPHP
est
créé
dans
le
répertoire
"
Démarrer/Programmes/EasyPHP
"
.

Une
foi
EasyPHP
lancé
,
une
icône
se
place
dans
la
barre
du
tâches
à
côté
de
l'
horloge
.

Un
clic
droit
permet
de
accéder
à
différents
menus
:
à
fichier
Log
:
renvoie
au
erreurs
générées
par
Apache
et
MySQL
;
•
configuration
:
donne
accès
au
différentes
configurations
de
EasyPHP
;
•
web
local
:
ouvre
la
page
http://localhost/index.htm
,
page
de
accueil
de
EasyPHP
;
à
démarrer/Arrêter
:
démarre/arrête
Apache
et
MySQL
;
à
quitter
:
ferme
EasyPHP
;
Pour
que
vos
page
Php
soient
interprétées
,
vous
pouvez
placer
vos
fichiers
dans
le
répertoire
www
Le
serveur
Apache
est
configuré
pour
ouvrir
automatiquement
un
fichier
index
lorsque
vous
saisissez
l'
adresse
"
http://localhost/
"
(
à
condition
évidemment
que
le
serveur
Apache
soit
en
route
)
.

Cette
page
sert
de
page
de
accueil
au
Web
local
et
permet
de
vérifier
le
bon
fonctionnement
de
EasyPHP
.

Afin
de
avoir
une
vision
plus
claire
du
développements
,
il
est
conseillé
de
créer
un
répertoire
par
projet
et
de
ajouter
un
alias
en
indiquant
le
répertoire
contenant
vos
fichiers
.

Il
existe
autant
de
façons
de
programmer
en
php
que
il
existe
de
éditeurs
spécialisés
ou
non
(
éditeurs
html
,
coloration
syntaxique
,
saisie
semi-automatique
...
)
.

Pour
tester
la
configuration
afficher
la
page
de
administration
de
EasyPHP
à
l'
adresse
suivante
:
http://127.0.0.1/home/
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
14
Cours
de
initiation
Php
3.3
.

Installation
du
support
de
cours
Nous
allons
maintenant
installer
un
site
en
mode
local
contenant
le
support
de
cours
.

à
partir
de
ce
site
statique
,
entièrement
réalisé
en
HTML
,
nous
allons
étudier
les
différentes
manières
de
le
rendre
dynamique
grâce
à
Php
.

Etapes
de
installations
à
Créer
un
répertoire
"
coursphp
"
.

à
Télécharger
le
fichier
"
coursphp.zip
"
.

à
Décompresser
ce
fichier
dans
le
répertoire
"
coursphp
"
.

•
Avec
un
clic
droit
sur
l'
icône
de
EasyPHP
,
cliquez
sur
administration
à
Cliquez
sur
ajouter
un
alias
.

à
Indiquez
le
nom
du
site
(
exemple
:
coursphp
)
et
le
chemin
de
accés
(
exemple
:
C:\
coursphp
)
.

à
Valider
en
cliquant
sur
Ok
à
Redémarrer
EasyPHP
afin
que
les
changements
soient
pris
en
compte
par
le
serveur
http
à
Maintenant
l'
adresse
http://localhost/coursphp/
vous
permet
de
afficher
le
site
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
15
Cours
de
initiation
Php
4
.

Langage
Php
4.1
.

Quelques
règles
de
base
Le
code
Php
est
enregistré
comme
texte
brut
au
format
ASCII
,
si
bien
que
vous
pouvez
écrire
une
page
Php
à
l'
aide
de
pratiquement
n'
importe
quel
éditeur
de
texte
.

Nous
utiliserons
PHPEdit
.

Dans
le
cas
de
un
fichier
HTML
,
le
serveur
Web
transmet
simplement
le
contenu
du
fichier
au
navigateur
.

Il
n'
essaye
en
aucune
façon
de
comprendre
ou
de
traiter
le
fichier
:
c'
est
le
rôle
du
navigateur
.

Les
fichiers
dotés
de
l'
extension
.php
sont
gérés
différemment
:
le
code
Php
y
est
recherché
.

Le
serveur
web
démarre
en
"
mode
HTML
"
.

Lorsqu'
il
commence
son
examen
,
il
part
du
principe
que
le
fichier
ne
contient
que
du
code
HTML
,
des
feuilles
de
styles
en
cascade
(
CSS
)
,
du
code
JavaScript
,
du
texte
brut
ou
tout
autre
texte
transmis
au
navigateur
sans
besoin
de
interprétation
de
la
part
du
serveur
.

Il
entre
en
"
mode
php
"
dès
que
il
rencontre
une
balise
Php
,
qui
sert
à
"
sortir
"
du
mode
HTML
.

On
peut
utiliser
plusieurs
types
de
balises
Php
:
Les
différents
types
de
balises
Php
Le
style
XML
:
C
’
est
le
style
par
défaut
qui
est
reconnu
par
tous
les
interpréteurs
.

C'
est
celui
que
nous
utiliserons
.

<
?

php
…
?

à
Le
style
court
(
instruction
SGML
)
:
<
?

…
?

à
Le
style
JavaScript
Instruction
qui
appelle
le
JavaScript
ou
le
VBScript
,
à
utiliser
si
votre
éditeur
ne
gère
pas
les
instructions
de
traitement
:
<SCRIPT
LANGUAGE='php'>
à
</SCRIPT>
Caractères
de
échappement
de
Asp
:
à
condition
que
la
paramètre
de
configuration
asp_tags
du
fichier
de
configuration
de
Php
(
php.in
)
est
la
valeur
on
.

<
%
à
%>
Les
instructions
Php
doivent
obligatoirement
se
terminer
par
un
point-virgule
sauf
après
l'
accolade
fermante
de
un
bloc
de
instructions
.

Php
permet
de
générer
dynamiquement
des
page
web
côté
client
.

Il
suffit
pour
cela
de
incorporer
du
code
côté
client
dans
le
texte
,
généré
par
Php
et
de
l'
envoyer
au
navigateur
.

La
sortie
du
script
peut
être
générée
par
les
instructions
echo
ou
print
.

Les
commentaires
peuvent
être
insérés
dans
le
script
grâce
au
signes
:
//
pour
des
commentaires
sur
une
seule
ligne
;
/*
pour
des
commentaires
sur
plusieurs
lignes
*/
Voici
deux
exemples
:
Exemple
1
:
<
?

php
echo
"
Texte
généré
par
Php
"
;
?

à
le
navigateur
affiche
:
Texte
généré
par
Php
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
16
Cours
de
initiation
Php
Exemple
2
:
<
?

php
print
"
<SCRIPT
LANGUAGE='JavaScript'>alert
(
e
Erreur
!

'
)
;
</SCRIPT>
"
;
?

à
le
serveur
transmet
le
texte
:
<SCRIPT
LANGUAGE='JavaScript'>alert
(
e
Erreur
!

'
)
;
</SCRIPT>
au
navigateur
qui
l'
interprète
comme
du
code
JavaScript
et
affiche
une
boîte
de
alerte
.

Exercice
:
(
Voir
annexe
Les
règles
de
base
)
.

Générer
à
l'
aide
de
Php
le
texte
suivant
:
Voici
mon
premier
script
.

Bonjour
tous
le
monde
.

pui
le
même
texte
à
l'
aide
de
JavaScript
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
17
Cours
de
initiation
Php
4.2
.

Les
variable
Php
Php
est
un
langage
pauvrement
typé
.

On
n'
est
pas
tenu
de
déclarer
le
type
du
variables
ou
du
constantes
que
l'
on
va
utiliser
.

Les
variables
peuvent
renfermer
successivement
n'
importe
quel
type
de
contenu
.

C'
est
Php
qui
détermine
le
type
de
variable
par
son
contexte
,
c'
est-à-ire
par
la
valeur
qui
lui
est
attribuée
.

En
Php
,
les
variables
sont
représentées
par
un
signe
dollar
"
$
"
suivi
du
nom
de
la
variable
.

Les
noms
du
variables
écrites
en
minuscules
sont
différentes
du
variables
écrites
en
majuscules
(
ie
:
$x
!

=
$X
)
.

Les
noms
de
variables
suivent
les
mêmes
règles
de
nommage
que
les
autres
entités
Php
.

Un
nom
de
variable
valide
doit
commencer
par
une
lettre
ou
un
souligné
(
_
)
,
suivi
de
lettres
,
chiffres
ou
soulignés
.

Exprimé
sous
la
forme
de
une
expression
régulière
,
cela
donne
:
'
[
a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*
'
Php
4
permet
aussi
de
assigner
les
valeurs
au
variables
par
référence
.

Cela
signifie
que
la
nouvelle
variable
ne
fait
que
référencer
(
en
d'
autres
terme
,
"
devient
un
alias
de
"
,
ou
encore
"
pointe
sur
"
)
la
variable
originale
.

Les
modifications
de
la
nouvelle
variable
affecteront
l'
ancienne
,
et
vice
versa
.

Cela
signifie
aussi
que
aucune
copie
n'
est
faite
:
l'
assignation
est
donc
beaucoup
plus
rapide
.

Cela
se
fera
notamment
sentir
dans
des
boucles
,
ou
lors
de
assignation
de
grands
objets
(
tableaux
)
.

Pour
assigner
par
référence
,
ajoutez
simplement
un
&
(
ET
commercial
)
au
début
de
la
variable
qui
est
assignée
(
la
variable
source
)
.

Dans
l'
exemple
suivant
,
"
Mon
nom
est
Pierre
"
s'
affichera
deux
foi
:
Exemple
:
<
?

php
ffoo
$bar
$bar
echo
echo
?

>
=
'
Pierre
'
;
//
Assigne
la
valeur
'
Pierre
'
à
$foo
à
&$foo
;
//
Référence
$foo
avec
$bar
.

=
"
Mon
nom
est
Pierre
"
;
//
Modifie
$bar
...
$foo
;
//
$foo
est
aussi
modifiée
$bar
;
Type
de
variables
Type
scalaire
:
Constantes
.

Booléen
.

Entier
.

nombre
à
virgule
flottante
.

chaîne
de
caractères
.

Type
composé
:
Tableau
.

Objet
.

Les
constantes
de
une
façon
générale
,
vous
pouvez
donner
un
nom
symbolique
à
n'
importe
quelle
constante
scalaire
(
c'
est
à
dire
de
type
booléen
,
integer
,
double
string
)
.Toutefois
l'
usage
veut
que
les
constante
s'
écrivent
en
lettre
capitales
.

Pour
créer
une
constante
on
utilise
la
fonction
define()
dont
la
forme
générale
est
:
Structure
de
la
définition
de
une
constante
define
(
nom
,
valeur
,
[
,
casse
]
)
;
avec
:
nom
:
chaîne
de
caractères
représentant
le
nom
qu'
on
veut
donner
à
la
constante
.

valeur
:
valeur
attribuée
à
cette
constante
.

casse
:
valeur
booléenne
indiquant
si
le
nom
donné
à
la
constante
sera
sensible
(
FALSE
)
ou
non
(
TRUE
)
à
la
casse
.

Par
défaut
sa
valeur
est
FALSE
,
ce
qui
signifie
que
le
nom
de
la
constante
est
sensible
à
la
casse
.

Comme
son
nom
le
suggère
,
cette
valeur
ne
peut
jamais
être
modifiée
durant
l'
exécution
du
script
(
les
constantes
magiques
__FILE__
et
__LINE__
sont
les
seules
exception
)
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
18
Cours
de
initiation
Php
Exemple
:
<
?

php
define
(
"
pi
"
,
3.1415926535
)
;
$r
=
20
;
$circ
=2
*
PI
*
$r
;
echo
"
La
circonférence
de
rayon
$r
:
$circ
<br>
"
;
echo
"
Pi
vaut
"
.PI
;
?

à
Exercice
:
(
voir
annexe
:
Les
constantes
)
.

Générer
à
l'
aide
de
Php
les
deux
lignes
suivantes
en
affectant
la
valeur
″Bonjour
tous
le
monde″
a
une
constante
:
″Voici
mon
deuxième
script.″
Votre
constante
.

pui
dans
le
même
fichier
le
même
texte
à
l'
aide
de
JavaScript
.

Variable
type
Booléens
:
C'
est
le
type
le
plus
simple
.

Un
booléen
exprime
les
valeurs
de
vrai
TRUE
ou
faux
FALSE
.

vous
pouvez
utiliser
les
constantes
'
TRUE
'
et
'
FALSE
'
pour
spécifier
une
valeur
de
Type
booléen
:
Ces
constantes
sont
insensibles
à
la
casse
.

Exemple
:
<
?

php
$foo
à
True
;
//
assign
la
valeur
TRUE
to
ffoo
$foo
à
False
;
//
assign
la
valeur
false
to
$foo
$foo
à
1
;
//
assign
la
valeur
1
to
$foo
$foo
=
0
;
//
assign
la
valeur
0
to
ffoo
foo
(
True
)
à
1
foo
(
False
)
=
foo(1)
=
1
fooëù
=
0
?

à
Variable
type
entier
:
Un
entier
est
un
nombre
de
l'
ensemble
du
entiers
naturels
z
:
z
=
{
...
.
,
-2
,
-1
,
0
,
1
,
2
,
...
}
.

Il
est
possible
de
spécifier
les
nombres
entiers
(
integers
)
de
toutes
les
manières
suivantes
:
décimale
(
base
10
)
,
hexadécimale
(
base
16
)
,
octale
(
base
8
)
éventuellement
précédé
du
signe
moins
(
-
)
.

Exemple
:
<
?

php
$a
à
1234
;
echo
"
$a
=
nombre
entier
en
base
10
:
(1234)<br>
"
;
$a
=
-123
;
echo
"
$a
=
nombre
entier
négatif
:
(-123)<br>
"
;
$a
=
0123
;
echo
"
$a
=
nombre
entier
en
base
8
,
octale
(
équivalent
à
83
en
base
10
)
:
(83)<br>
"
;
$a
=
0x1A
;
echo
"
$a
=
nombre
entier
en
base
16
,
hexadécimale
(
équivalent
à
26
en
base
10
)
:
(
26
)
"
;
?

à
Les
nombres
à
virgule
flottante
:
Les
nombres
à
virgule
flottante
connus
aussi
sous
le
vocable
de
"
double
"
ou
"
float
"
"
nombre
rééls
"
peuvent
être
spécifiés
en
utilisant
la
syntaxe
suivante
:
Exemple
:
<
?

php
$a
à
1.234
;
echo
$a."<br>
"
;
$a
=
1.2e3
;
echo
$a
;
?

>
•
si
une
variable
débute
par
une
valeur
numérique
valide
,
la
chaîne
sera
évaluée
par
cette
valeur
,
sinon
elle
sera
évaluée
comme
zéro
;
•
si
une
valeur
double
constitue
l'
intégralité
de
la
chaîne
,
la
chaîne
sera
évaluée
comme
valeur
double
,
mais
si
d'
autres
caractères
non
doubles
sont
présents
dans
la
chaîne
,
elle
sera
évaluée
comme
entier
.

Exemples
:
<
?

php
$var
à
1
;
//
$var
est
un
entier
$var
à
1.2
;
//
$var
est
un
double
$var
=
"
abcd
"
;
//
$var
est
une
chaîne
$str
=
"
7
rue
Fbg
Montmartre
"
;
çx
=
3
p
$str
;
//
$x
=
10
et
$str
reste
inchangée
echo
"
$x
:
$str
"
;
//
affiche
:
10
:
7
rue
Fbg
Montmartre
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
19
Cours
de
initiation
Php
$str
=
"
code
275
"
;
çx
=
3
p
$str
;
émox
=
3
echo
"
$x
:
$str
"
;
//
affiche
:
3
:
code
275
$str
=
"
312.65
mètres
"
;
çx
=
3
p
$str
;
//
$x
=
315
echo
"
$x
:
$str
"
;
//
affiche
:
315.65
:
312.65
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
20
Cours
de
initiation
Php
Les
variable
type
chaînes
de
caractères
:
Les
chaînes
de
caractères
sont
des
séquences
de
caractères
.

En
Php
,
un
caractère
est
un
octet
,
et
il
y
en
256
de
possibles
.

php
n'
a
pas
(
encore
?

)
de
support
natif
de
Unicode
Une
chaîne
peut
être
spécifiée
de
deux
manières
différentes
:
guillemets
simples
guillemets
doubles
Guillemets
simples
Syntax
:
$a="MaVariable
"
;
alors
$a
vaut
MaVariable
Exemple
:
<
?

php
echo
'
Ceci
est
une
chaîne
simple
'
;
echo"<br>
"
;
echo
'
vous
pouvez
inclure
des
nouvelles
lignes
dans
une
chaîne
,
comme
ceci
.
'
;
echo
"
<br><br>
"
;
echo
'
Arnold
a
coutume
de
dire
:
"
I\'ll
be
back
"
'
;
//
affiche
:
...
"
I'll
be
back
"
echo
"
<br><br>
"
;
echo
'
Etes
vous
sûr
de
vouloir
effacer
le
dossier
C:\\*.*
?

'
;
//
affiche
:
Etes
vous
sûr
de
vouloir
effacer
le
dossier
C:\*.*
?

echo
"
<br><br>
"
;
echo
'
Etes
vous
sûr
de
vouloir
effacer
le
dossier
C:\*.*
?

'
;
//
affiche
:
Etes
vous
sûr
de
vouloir
effacer
le
dossier
C:\*.*
?

echo
"
<br><br>
"
;
echo
'
je
suis
en
train
de
mettre
une
nouvelle
ligne
comme
ceci
:
\n
'
;
//
affiche
:
je
suis
en
train
de
mettre
une
nouvelle
ligne
comme
ceci
:\n
?

à
Guillemets
doubles
si
la
chaîne
est
entourés
de
guillemets
doubles
,
Php
va
comprendre
certaines
séquences
de
caractères
:
séquences
de
caractères
comprises
par
Php
.

\n
Nouvelle
ligne
(
linefeed
,
Lf
ou
0x0A
(
10
)
en
ASCII
)
\r
Retour
à
la
ligne(carriage
return
,
CRS
ou
0x0D
(
13
)
en
ASCII
)
\t
Tabulation
horizontale
(
HT
ou
0x09
(
9
)
en
ASCII
)
çù
Antislash
\$
Caractère
$
\
"
Guillemets
doubles
\[0-7]{1,3
à
Une
séquence
de
caractères
qui
permet
de
rechercher
un
nombre
en
notation
octale
.

\x[0-9A-Fa-f]{1,2
}
Une
séquence
de
caractères
qui
permet
de
rechercher
un
nombre
en
notation
hexadécimale
Exercice
:
(
Voir
annexe
Les
variable
type
chaînes
de
caractères
)
.

créer
une
page
en
utilisant
les
côtes
pui
les
guillemets
affichant
le
texte
suivant
:
Voici
enfin
l'
été
indien
dont
je
rêvais
!

Cette
histoire
,
c'
était
la
mienne
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
21
Cours
de
initiation
Php
Traitement
du
variables
dans
les
chaînes
Lorsqu'
une
chaîne
est
spécifiée
avec
des
guillemets
doubles
les
variables
qu'
elle
contient
sont
remplacées
par
leur
valeur
.

Il
y
a
deux
types
de
syntaxe
,
une
simple
et
une
complexe
.

La
syntaxe
simple
est
la
plus
courante
,
et
la
plus
pratique
:
elle
fournit
un
moyen
de
utiliser
les
variables
,
que
ce
soit
des
chaînes
,
des
tableaux
ou
du
membres
de
objets
.

La
syntaxe
complexe
a
été
introduite
en
php
4
et
peut
être
reconnue
grâce
au
accolades
entourant
les
expressions
.

dès
que
un
signe
dollar
$
est
rencontré
,
l'
analyseur
Php
va
lire
autant
de
caractère
que
il
peut
pour
former
un
nom
de
variable
valide
.

Entourez
le
nom
de
la
variable
avec
des
accolades
pour
indiquer
explicitement
son
nom
.

Utilisation
du
accolades
{
}
dans
les
chaînes
Exemple
:
<
?

php
$boisson
=
'
vin
'
;
echo
"
du
$boisson
,
du
pain
et
du
fromage
!

"
;
//
Ok
,
car
"
,
"
n'
est
pas
autorisé
dans
les
noms
de
variables
echo
"
Il
a
goûté
plusieurs
$boissons
"
;
//
Pas
Ok
,
car
'
s
'
peut
entrer
dans
un
nom
de
variable
,
et
Php
recherche
$boissons
echo
"
Il
a
goûté
plusieurs
${boisson}s
"
;
//
Ok
?

à
Exercice
:
(
voir
annexe
les
chaînes
de
caractères
Exercice
1
)
.

Reprendre
l'
exemple
présenté
dans
le
paragraphe
à
’
Guillemets
simples
à
à
et
remplacer
les
côtes
par
les
guillemets
,
Observer
ce
qui
se
passe
,
pui
corriger
.

Exercice
:
(
voir
annexe
les
chaînes
de
caractères
Exercice
2
)
.

Déclarer
une
variable
php
et
affecter
lui
la
valeur
de
votre
prénom
pui
,
générer
à
l'
aide
de
Php
le
texte
suivant
,
je
me
présente
Mon
prénom
est
"
votre
variable
"
!

pui
le
même
texte
à
l'
aide
de
JavaScript
.

Exercice
:
(
voir
annexe
les
chaînes
de
caractères
Exercice
3
)
.

Reprendre
l'
exercice
2
et
ajouter
une
variable
qui
contiendra
votre
nom
,
pui
Afficher
votre
variable
nom
et
variable
prénom
Exercice
:
(
voir
annexe
les
chaînes
de
caractères
Exercice
4
)
.

à
l'
aide
de
la
variable
$super=fantastique
,
Créer
une
page
Php
affichant
le
texte
suivant
en
utilisant
la
syntaxe
simple
pui
complexe
:
C'
est
fantastique
.

Ces
soirées
étaient
fantastiques
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
22
Cours
de
initiation
Php
Les
variable
type
tableaux
Les
tableaux
sont
des
agrégats
de
valeurs
de
types
quelconques
,
éventuellement
mélangés
,
regroupés
sous
un
nom
unique
et
dans
lesquels
on
repère
un
élément
isolé
soit
par
un
indice
(
compté
à
partir
de
zéro
)
,
soit
par
une
clé
enregistrée
en
même
temps
que
la
valeur
correspondante
lors
de
la
création
du
tableau
.

On
peut
aussi
créer
un
tableau
au
moyen
de
la
fonction
array(
)
.

La
forme
générale
de
cette
déclaration
est
:
Déclaration
de
un
tableau
.

$tableau[
]
à
valeur
ou
$tableau
=
array(valeur
,
valeur
,
valeur
…
)
;
ou
$tableau
=
array(clé=>valeur
,
clé=>valeur
,
clé=>valeur
…
)
;
Exemple
:
<
?

php
$tableau
=
array
(
"
chien
"
,
"
salade
"
,
"
rocher
"
)
;
//ou
$tableau
=
array
(
0=>"chien
"
,
1=>"salade
"
,
2=>"rocher
"
)
;
?

à
Nous
reviendrons
plus
longuement
sur
l'
utilisation
du
tableaux
au
chapitres
Tableaux
.

Les
variable
type
objet
Un
objet
est
une
sorte
de
conteneur
pouvant
contenir
différents
éléments
,
en
général
du
classes
.

Les
objet
sont
de
type
object
.

Pour
initialiser
un
objet
,
vous
devez
utiliser
la
commande
"
new
"
afin
de
créer
l'
instance
de
l'
objet
.

Exemple
:
<
?

php
class
foo
à
function
faire_foo
(
)
à
echo
"
Faisant
foo
.
"
;
}
}
$bar
=
new
foo
;
$bar->faire_foo()
;
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
23
Cours
de
initiation
Php
Le
transtypage
Le
type
de
données
de
une
variable
peut
être
modifié
à
l'
aide
du
"
transtypages
"
(
int
)
,
(
double
)
,
(
string
)
,
…
.

Les
conversions
autorisées
sont
:
(
int
)
,
(
integer
)
type
entier
(
bool
)
,
(
boolean
)
booléen
(
real
)
,
(
double
)
,
(
float
)
type
double
(
string
)
type
chaîne
(
array
)
type
tableau
(
object
)
type
objet
Exemple
:
<
?

php
$foo
à
1
p
"
10.5
"
;
echo
"
\$foo
=
1
p
\"10.5\
"
alors
\$foo
est
du
type
float
(11.5)<br>
"
;
$foo
=
1
p
"
-1.3e3
"
;
echo
"
\$foo
=
1
p
\"-1.3e3\
"
alors
\$foo
est
du
type
float
(-1299)<br>
"
;
$foo
=
1
p
"
bob-1.3e3
"
;
echo
"
\$foo
=
1
p
\"bob-1.3e3\
"
alors
\$foo
est
du
type
integer
(1)<br>
"
;
ffoo
echo
ffoo
echo
=
1
p
"
bob3
"
;
"
\$foo
=
1
p
\"bob3\
"
alors
\$foo
est
du
type
integer
(11)<br>
"
;
=
1
p
"
10
Small
Pigs
"
;
"
\$foo
=
1
p
\"10
Small
Pigsë
"
alors
\$foo
est
du
type
integer(11)<br>
"
;
ffoo
echo
ffoo
echo
=
1
p
"
10
Little
Piggies
"
;
"
\$foo
=
1
p
\"10
Little
Piggies\
"
alors
\$foo
est
du
type
integer
(11)<br>
"
;
=
"
10.0
pig
"
p
1.0
;
"
\$foo
=
1
p
\"10.0
pig
\
"
p
1.0
alors
\$foo
est
du
type
float
(11)<br>
"
;
?

à
php
met
deux
fonctions
à
notre
disposition
pour
traiter
les
types
de
variables
Les
fonctions
gettype()
et
settype(
)
.

La
fonction
gettype()
Elle
détermine
le
type
de
données
de
la
variable
et
renvoie
l'
une
du
valeurs
suivantes
:
•
"
integer
"
;
•
"
double
"
;
•
"
string
"
;
•
"
array
"
;
•
"
object
"
;
•
"
class
"
;
•
"
unknown
type
"
;
La
fonction
settype()
Elle
définit
le
type
de
une
variable
de
façon
explicite
,
et
si
le
type
ne
peut
pas
être
défini
,
elle
renvoie
une
valeur
false
.

Exemples
:
<
?

php
$var
à
11.2
;
//
$var
est
un
double
echo
"
\$var
=
$var
et
le
type
de
\$var
est
"
;
echo
gettype($var)
;
echo
"
<br>
"
;
//
affiche
:
$var
à
11.2
et
le
type
de
$var
est
double
$var
=
(int)$var
;
//
$var
est
maintenant
un
entier
de
valeur
11
echo
"
\$var
=
$var
et
le
type
de
\$var
est
"
;
echo
gettype($var)
;
echo
"
<br>
"
;
//
affiche
:
$var
à
11
et
le
type
de
$var
est
integer
$var
=
(double)$var
;
//
$var
est
de
nouveau
un
double
de
valeur
11.0
echo
"
\$var
=
$var
et
le
type
de
\$var
est
"
;
echo
gettype($var)
;
echo
"
<br>
"
;
//
affiche
:
$var
à
11
et
le
type
de
$var
est
double
$var
à
(string)$var
;
//
$var
est
une
chaîne
de
caractères
de
valeur
"
11.0
"
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
24
Cours
de
initiation
Php
echo
"
\$var
=
$var
et
le
type
de
\$var
est
"
;
echo
gettype($var)
;
echo
"
<br>
"
;
//
affiche
:
$var
à
11
et
le
type
de
$var
est
string
?

à
Exercice
:
(
Voir
annexe
Le
transtypage
Exercice
1
)
.

Déclarer
deux
variables
php
et
affecter
leur
la
valeur
de
votre
nom
et
prénom
pui
,
générer
à
l'
aide
de
Php
le
texte
suivant
,
je
me
présente
Mon
prénom
est
"
votre
prénom
"
!

(
déja
vu
à
l'
exercice
3
du
chapitre
"
Traitement
du
variables
dans
les
chaînes
"
)
Affichez
ensuite
,
le
type
de
chaque
variable
.

Exercice
:
(
Voir
annexe
Le
transtypage
Exercice
2
)
.

Soit
les
variables
$var1=1000
,
$var2=6.55957
,
$var3=
‘
1
’
’
,
$var4=array()
Créer
une
page
Php
afin
de
afficher
ces
variables
et
leur
type
,
pui
convertisser
$var1
en
type
"
double
"
,
$var2
en
type
"
integer
"
,
$var3
en
type
"
double
"
et
$var4
en
type
"
integer
"
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
25
Cours
de
initiation
Php
les
variables
super
global
Ces
variables
sont
des
'
superglobal
'
,
ou
globale
automatique
.

Cela
signifie
que
elles
sont
simplement
disponible
dans
tous
les
contextes
de
exécution
(
fonctions
ou
méthodes
)
.

vous
n'
avez
pas
besoin
de
les
déclarer
global
pour
y
accéder
.

Toutes
ces
informations
se
retrouvent
grace
à
la
fonction
phpinfo()
vue
au
paragraphe
"
test
de
la
configuration
"
du
chapitre
"
Installation
"
.

$GLOBALS
Contient
une
référence
sur
chaque
variable
qui
est
actuellement
disponible
dans
l'
environnement
de
exécution
global
.

Les
clés
de
ce
tableau
sont
les
noms
du
variables
globales
.

$_SERVER
Les
variables
fournies
par
le
serveur
web
,
ou
bien
directement
liées
à
l'
environnement
de
exécution
du
script
courant
.

L'
ancienne
version
$HTTP_SERVER_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

$_GET
Les
variables
fournies
par
le
protocole
HTTP
en
méthode
GET
.

L'
ancienne
version
$HTTP_GET_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

$_POST
Les
variables
fournies
par
le
protocole
HTTP
en
méthode
POST
.

L'
ancienne
version
$HTTP_POST_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

$_COOKIE
Les
variables
fournies
par
le
protocole
HTTP
,
dans
les
cookies
.

L'
ancienne
version
$HTTP_COOKIE_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

$_FILES
Les
variables
fournies
par
le
protocole
HTTP
,
suite
à
un
téléchargement
de
fichier
.

L'
ancienne
version
$HTTP_POST_FILES
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

Voir
Téléchargement
par
méthode
POST
,pour
plus
de
informations
.

$_ENV
Les
variables
fournies
par
l'
environnement
.

L'
ancienne
version
$HTTP_ENV_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

$_REQUEST
Les
variables
fournies
au
script
par
n'
importe
quel
mécanisme
de
entrée
et
qui
ne
doit
recevoir
une
confiance
limitée
.

Un
tableau
associatif
constitué
du
contenu
du
variables
$_GET
,
$_POST
,
$_COOKIE
,
et
$_FILES
.

Note
:
lorsque
vous
exécutez
un
script
en
ligne
de
commande
,
cette
variable
ne
va
pas
inclure
les
variables
argv
et
argc
.

Elles
seront
présentes
dans
la
variable
$_SERVER
.

La
présence
et
la
valeur
du
entrées
de
ce
tableau
sont
réglés
par
la
directive
variables_order
.

Ce
tableau
n'
est
l'
évolution
de
aucune
variable
de
avant
Php
4.1.0
.

$_SESSION
Les
variables
qui
sont
actuellement
enregistrées
dans
la
session
attachée
au
script
.

L'
ancienne
version
$HTTP_ENV_VARS
contient
les
mêmes
informations
,
mais
n'
est
pas
auto
globale
.

Voir
le
chapitre
pour
plus
de
informations
.

Précisons
que
les
variables
super
global
ci-dessus
sont
en
fait
du
tableaux
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
26
Cours
de
initiation
Php
4.3
.

Les
opérateurs
Les
opérateurs
servent
à
déterminer
une
valeur
en
effectuant
une
opération
sur
une
ou
plusieurs
variables
.

Les
opérateurs
de
Php
sont
très
similaires
à
ceux
de
C
,
ou
de
Perl
.

Les
opérateurs
arithmétiques
vous
rappelez_vous
des
opérations
élémentaires
apprises
à
l'
écoles
?

Exemple
nom
résultat
$a
p
$b
Addition
somme
de
$a
et
bb
.

ça
-
$b
Soustraction
Différence
de
$a
et
bb
.

ça
*
bb
Multiplication
Produit
de
$a
et
bb
.

ça
/
$b
Division
Quotient
de
$a
et
bb
.

$a
%
bb
Modulo
Reste
de
$a
divisé
par
bb
.

L'
opérateur
de
affectation
L'
opérateur
«
=
»
permet
de
affecter
une
valeur
à
une
variable
.

La
variable
située
à
gauche
du
signe
«
=
»
se
voit
affecter
la
valeur
située
à
droite
du
signe
«
=
»
.

C'
est
ainsi
que
l'
expression
:
bb
=
$a
p
5
;
signifie
que
la
valeur
de
la
variable
ça
est
augmenté
de
cinq
pui
rangée
dans
la
variable
$b
.

Php
permet
les
affectation
multiples
.

Ainsi
,
on
a
le
droit
de
écrire
:
$a
=$b
=
$c
à
2
;
Les
variable
ça
,
bb
et
$c
contiendront
toutes
trois
la
valeur
2
.

Cette
propriété
est
également
valable
pour
les
tableaux
.

vous
ne
devez
pas
confondre
cet
opérateur
de
affectation
avec
l'
opérateur
de
comparaison
"
==
"
.

L'
opérateur
de
concaténation
Le
point
«
.

»
est
utilisé
en
Php
comme
opérateur
de
concaténation
pour
fusionner
plusieurs
chaînes
en
une
seule
.

Exemple
:
<
?

php
$nom
=
"
Durand
"
;
$prenom
=
"
Pierre
"
;
$personne
=
$prenom
.
"

"
.$nom
;
echo
echo
echo
echo
$personne."<br>
"
;
"
Martine
"
.$nom."<br>
"
;
"
affiche
:
Pierre
Durand<br>
"
;
"
affiche
Martine
Durand
"
;
?

à
Exercice
:
(
Voir
annexe
L'
opérateur
de
concaténation
)
.

Déclarer
une
variable
et
affecter
lui
la
valeur
de
votre
prénom
et
une
autre
pour
votre
nom
,
pui
générer
à
l'
aide
de
Php
et
de
l'
opérateur
de
concaténation
le
texte
suivant
,
je
me
présente
Mon
prénom
est
"
votre
variable
prénom
et
votre
variable
nom
"
!

pui
le
même
texte
à
l'
aide
de
JavaScript
.

L'
opérateur
arobase
Cet
opérateur
ne
peut
intervenir
que
devant
un
nom
de
fonction
.

Il
interdit
alors
à
Php
de
afficher
un
éventuel
message
de
erreur
au
cours
de
l'
exécution
de
la
fonction
.

Il
appartient
dés
lors
au
programmeur
de
prendre
les
disposition
nécessaires
(
par
exemple
,
en
testant
la
valeur
de
retour
de
la
fonction
)
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
27
Cours
de
initiation
Php
Les
opérateurs
de
comparaison
Les
opérateurs
de
comparaison
,
comme
le
nom
l'
indique
,
vous
permettent
de
comparer
deux
valeurs
.

exemple
nom
résultat
$a
çà
bb
Egal
Vrai
si
$a
est
égal
à
bb
.

$a
çùà
bb
Identique
Vrai
si
$a
est
égal
à
bb
et
que
ils
sont
de
même
type
(
Php4
seulement
)
.

$a
!

à
bb
Différent
Vrai
si
$a
est
différent
de
bb
.

ça
à
bb
Plus
petit
que
Vrai
si
$a
est
plus
petit
strictement
que
$b
.

$a
à
bb
Plus
grand
Vrai
si
$a
est
plus
grand
strictement
que
$b
.

Inférieur
ou
$a
çù
bb
Vrai
si
$a
est
plus
petit
ou
égal
à
bb
.

égal
Supérieur
ou
$a
çù
bb
Vrai
si
$a
est
plus
grand
ou
égal
à
bb
.

égal
Les
opérateurs
logiques
exemple
$a
and
bb
$a
or
$b
$a
xor
$b
!

$a
ça
&&
bb
$a
çù
çb
nom
ET
(
And
)
Ou
(
Or
)
XOR(Or)
NON
(
Not
)
ET
(
And
)
Ou
(
Or
)
résultat
Vrai
si
$a
ET
$b
sont
vrais
.

Vrai
si
$a
ou
$b
est
vrai
Vrai
si
$a
OU
bb
est
vrai
,
mais
pas
les
deux
en
même
temps
.

Vrai
si
ça
est
faux
.

Vrai
si
$a
ET
bb
sont
vrais
.

Vrai
si
$a
ou
bb
est
vrai
.

les
opérateurs
de
incrémentation
example
++$a
$a++
--
$a
$a
--
name
Pre-increment
Post-increment
Pre-decrement
Post-decrement
effect
Incrémente
$a
de
un
,
et
renvoi
$a
.

Renvoi
$a
,
et
incrémente
ça
de
un
.

Décréments
ça
de
un
,
et
renvoi
$a
.

Renvoi
$a
,
et
décrémente
ça
de
un
.

Raccourcis
de
affectation
de
variables
Il
est
possible
en
Php
de
utiliser
des
raccourcis
de
opérateurs
lorsque
le
premier
opérande
est
une
variable
et
que
le
résultat
est
stocké
dans
la
même
variable
.

Exemple
$Ma_variable
uà
çi
$Ma_variable
-=
$i
$Ma_variable
*=
çi
$Ma_variable
/=
$i
$Ma_variable
çù
$i
$Ma_variable
.=
çi
$Ma_variable
uu
$Ma_variable
--
Daniel
Hadjadj
Daniel
Equivaut
à
$Ma_variable
=
$Ma_variable
p
$i
$Ma_variable
=
$Ma_variable
-
çi
$Ma_variable
=
$Ma_variable
*
$i
$Ma_variable
=
$Ma_variable
/
$i
$Ma_variable
=
$Ma_variable
%
$i
$Ma_variable
=
$Ma_variable
p
çi
$Ma_variable
=
$Ma_variable
p
1
$Ma_variable
=
$Ma_variable
-
1
©
dahadjadj@free.fr
-
2005
-
page
28
Cours
de
initiation
Php
4.4
.

Instructions
Instruction
conditionnelles
Les
instructions
conditionnelles
indiquent
à
un
programme
que
une
décision
doit
être
prise
La
forme
générale
de
cette
instruction
est
la
suivante
:
Structure
de
if
If
(
condition
)
{
bloc
de
instructions
…
}
Exemple
:
<
?

php
$prix=10
;
if
(
$prix
>
1000
)
{
$remise
=
10
;
$frais_de_port
=
0
;
}
?

>
il
est
possible
de
imbriquer
une
instruction
if
dans
une
autre
.

Exemple
:
<
?

php
$prix=110
;
if
(
$prix
<
1000
)
{
if($prix>100)
{
$remise
=
10
;
$frais_de_port
=
0
;
}
}
?

à
Exercice
:
(
Voir
annexe
Instruction
conditionnelles
Exercice
1
)
.

Initialiser
la
variable
$civ
à
‘
Mme
’
si
vous
êtes
une
dame
,
à
Mlle
à
si
vous
êtes
une
demoiselle
et
à
‘
m
’
si
vous
êtes
un
homme
.

Créer
les
variables
$prenom
et
$nom
et
affectez
leur
les
valeur
de
votre
choix
.

Testez
la
variable
$civ
afin
de
afficher
dans
une
page
Php
l'
une
du
phrases
suivantes
correspondant
à
votre
sexe
:
Bonjour
Madame
$prénom
$nom
.

Bonjour
Mademoiselle
$prénom
$nom
.

Bonjour
Monsieur
$prénom
$nom
.

Branchement
conditionnel
:
mots
clé
à
else
»
et
«
elseif
à
Structure
de
else
If
(
condition
)
{
si
la
condition
est
vérifiée
exécution
de
ce
bloc
de
instructions
…
}
else
{
si
la
condition
n'
est
pas
vérifiée
exécution
de
ce
bloc
de
instructions
…
}
Le
else
permet
de
exécuter
un
second
bloc
de
instructions
lorsque
la
condition
testée
n'
est
pas
vérifiée
.

On
exploite
ainsi
les
deux
possibilités
logiques
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
29
Cours
de
initiation
Php
Exemple
:
<
?

php
$prix=10
;
if
(
$prix
>
1000
)
{
$remise
=
10
;
$frais_de_port
=
0
;
}
else
{
$remise
=
5
;
$frais_de_port
=
50
;
}
?

à
Exercice
:
(
Voir
annexe
Instruction
conditionnelles
Exercice
2
)
.

Reprendre
l'
exercice
précédent
et
ajouter
un
Else
affichant
à
’
je
ai
des
doutes
sur
votre
genre
.
’
’
,
si
la
variable
$civ
n'
est
pas
vérifié
.

Le
elsif
permet
de
cascader
les
tests
.

Ses
règles
de
emploi
sont
inspirées
de
celles
du
deux
précédentes
.

Structure
de
elseif
If
(
condition
)
{
si
la
condition
est
vérifiée
exécution
de
ce
bloc
de
instructions
…
}
elseif(condition)
{
si
la
condition
est
vérifiée
exécution
de
ce
bloc
de
instructions
…
}
elseif(condition)
{
si
la
condition
est
vérifiée
exécution
de
ce
bloc
de
instructions
…
}
L'
expression
elseif
est
exécutée
seulement
si
le
if
précédent
et
tout
autre
elseif
précédent
est
évalués
comme
faux
(
FALSE
)
,
et
que
votre
elseif
est
évalué
à
vrai
(
TRUE
)
.

Exemple
:
<
?

php
$prix=1020
;
if
(
$prix
<
1000
)
{
$remise
=
0
;
$frais_de_port
=
50
}
elseif
(
$prix
=
1000
{
$remise
=
5
;
$frais_de_port
=
10
}
elseif
(
$prix
>
1000
{
$remise
=
10
;
$frais_de_port
=
50
}
?

>
;
)
;
)
;
Exercice
:
(
Voir
annexe
Instruction
conditionnelles
Exercice
3
)
.

Un
centre
de
formation
dispense
10
cours
différents
au
stagiaires
de
mon
entreprise
.

5
cours
principaux
et
5
facultatifs
.

Selon
sa
réglementation
un
stagiaire
ne
peut
s'
inscrire
qu'
a
deux
cours
principaux
maximum
et
deux
cours
facultatifs
maximum
à
condition
que
il
suive
au
moins
un
cour
principal
.

Le
secrétariat
de
ce
centre
,
chargé
de
adresser
un
courrier
à
chaque
stagiaire
,
dispose
pour
envoyer
ce
courrier
de
trois
lettres
type
Une
lettre
de
conseille
(
lettre
type
conseille
)
Une
lettre
de
confirmation
(
lettre
type
confirmation
)
Une
lettre
de
rappel
de
la
réglementation
,
demandant
au
stagiaire
de
restreindre
son
choix
(
lettre
type
interdit
)
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
30
Cours
de
initiation
Php
Un
courrier
personnaliser
sera
envoyer
à
tous
les
stagiaires
conformément
à
la
réglementation
,
selon
les
cas
de
figure
suivant
:
Le
stagiaire
ne
s'
inscrit
à
aucun
cour
principal
alors
,
je
lui
adresse
une
lettre
de
conseille
.

Le
stagiaire
ne
s'
inscrit
qu'
à
un
cours
principal
alors
,
je
lui
adresse
une
lettre
de
conseille
.

Le
stagiaire
s'
inscrit
à
deux
cours
principaux
alors
,
je
lui
adresse
une
lettre
de
confirmation
.

Le
stagiaire
s'
inscrit
à
plus
de
deux
cours
principaux
ou
à
plus
de
deux
cours
facultatifs
alors
,
je
lui
adresse
une
lettre
d
‘
interdiction
.

Ecrivez
un
programme
en
Php
permettant
de
afficher
la
lettre
type
correspondant
à
la
situation
du
stagiaire
en
ayant
pris
soins
de
vérifier
au
préalable
la
civilité
du
stagiaire
.

Nous
disposons
des
quatre
variables
suivantes
pour
nous
aider
:
$prenom
:
prend
la
valeur
de
votre
choix
$nom
:
prend
la
valeur
de
votre
choix
$civ
:
peut
prendre
l'
une
du
valeurs
suivantes
:
"
0
"
pour
Madame
,
"
1
"
pour
Mademoiselle
,
"
2
"
pour
Monsieur
.

$ncours
le
nombre
de
cours
principaux
peut
prendre
les
valeurs
de
0
à
5
.

$ncoursf
le
nombre
de
cours
facultatifs
peut
prendre
les
valeurs
de
0
à
5
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
31
Cours
de
initiation
Php
Instruction
«
switch
à
Cette
instruction
permet
de
réaliser
un
aiguillage
multidirectionnel
.

Structure
de
Switch
Switch
(
variable
)
à
case
valeur
1
:
bloc
de
instructions
1
break
;
case
valeur
2
:
bloc
de
instructions
2
break
;
case
valeur
n
:
bloc
de
instructions
n
default
}
:
dernier
bloc
de
instructions
La
case
spécial
default
est
utilisé
lorsque
tous
les
case
ont
échoués
.

Il
doit
être
le
dernier
cas
listé
.

Exemple
:
<
?

php
//Dans
une
liste
déroulante
on
propose
au
gens
différents
choix
de
pays
,
//chaque
choix
$liste
ayant
pour
valeur
a
,
b
,
c
et
on
renvoie
à
la
page
//suivante
contenant
le
script
:
$liste=array()
;
switch
(
$liste
)
à
case
"
a
"
:
echo
"
vous
habitez
en
France
"
;
break
;
case
"
b
"
:
echo
"
vous
habitez
en
Allemagne
"
;
break
;
case
"
c
"
:
echo
"
vous
habitez
en
Espagne
"
;
break
;
default
:
echo
"
Votre
pays
n'
est
pas
connu
"
;
}
?

à
Exercice
:
(
Voir
annexe
Instruction
conditionnelles
Exercice
4
)
.

Reprendre
l'
exercice
1
de
ce
chapitre
et
afficher
la
page
en
utilisant
l'
instruction
"
switch
"
.

Les
boucles
Les
boucles
while
et
do…while
La
boucle
while
exécute
le
bloc
de
instruction
tant
que
l'
expression
de
la
boucle
while
est
vérifiée
(
évaluée
comme
TRUE
)
.

La
valeur
de
l'
expression
est
vérifiée
à
chaque
début
de
boucle
,
et
,
si
la
valeur
change
durant
l'
exécution
de
l'
instruction
,
l'
exécution
ne
s'
arrêtera
qu'
à
la
fin
de
l'
itération
(
chaque
foi
que
le
Php
exécute
l'
instruction
,
on
appelle
cela
une
itération
)
.

si
l'
expression
du
while
n'
est
pas
vérifiée
(
évaluée
comme
FALSE
)
avant
la
première
itération
,
l'
instruction
ne
sera
jamais
exécutée
.

Structure
de
la
boucle
while
while
(
condition
)
{
bloc
de
instructions
…
}
Exemple
:
<
?

php
$num
à
1
;
while
(
$num
çù
5
)
{
echo
$num."<br>
"
;
//
affiche
tous
les
chiffres
de
1
à
5
$num++
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
32
Cours
de
initiation
Php
}
?

à
Exercice
:
(
Voir
annexe
les
boucles
Exercice
1
)
Soit
le
tableau
du
mois
de
l'
année
:
$mois=array('Janvier','Février','Mars','Avril','Mai','Juin','Juillet
'
,'Aôut','Septembre','Octobre','Novembre','Décembre
'
)
;
Créer
une
page
Php
affichant
les
douze
mois
de
l'
année
à
l'
aide
de
l'
instruction
while
.

La
boucle
do
…
while
est
similaire
à
la
boucle
while
:
la
condition
est
vérifiée
à
la
fin
de
chaque
itération
,
et
non
au
début
,
elle
s'
exécute
donc
toujours
au
moins
une
foi
.

Structure
de
la
boucle
do
while
do
{
bloc
de
instructions
…
}
while
(
$num
<
6
)
Exemple
:
<
?

php
$num
à
1
;
do
{
echo
$num."<br>
"
;
$num++
;
}
while
(
$num
à
6
)
//
affiche
tous
les
chiffres
de
1
à
5
?

à
Exercice
:
(
Voir
annexe
les
boucles
Exercice
2
)
Reprendre
l'
exercice
précédent
et
créer
une
page
Php
affichant
le
mois
de
juin
à
l'
aide
de
l'
instruction
do
while
.

Boucle
à
for
»
Les
types
de
boucle
for
et
while
sont
équivalentes
.

On
utilise
la
boucle
for
quand
le
nombre
de
répétitions
est
prédéfini
.

Structure
de
la
boucle
for
for
(
expression1
;
condition
;
expression2
)
{
bloc
de
instructions
…
}
Exemple
:
<
?

php
for
(
çi
à
1
;
çi
çù
5
;
çiu
)
à
echo
$i."<br>
"
;
//
affiche
tous
les
chiffres
de
1
à
5
}
?

à
Exercice
:
(
Voir
annexe
les
boucles
Exercice
3
)
Reprendre
l'
exercice
1
de
ce
chapitre
et
créer
une
page
Php
affichant
les
douze
mois
de
l'
année
à
l'
aide
de
la
boucle
for
.

Nous
verrons
les
autres
boucles
(
foreach
,
list
et
Each
)
au
chapitre
concernant
les
tableaux
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
33
Cours
de
initiation
Php
4.5
.

les
Tableaux
Nous
avons
déjà
abordé
brièvement
les
tableaux
,
maintenant
nous
allons
voir
plus
loin
leurs
possibilités
.

Les
tableaux
sont
une
série
de
variables
qui
ont
toutes
le
même
nom
.

Chaque
constituant
du
tableau
est
appelé
élément
.

Chaque
élément
de
un
tableau
est
associé
de
manière
unique
à
un
entier
.

Grâce
à
cet
entier
,
appelé
index
ou
indice
ou
clé
,
il
est
possible
de
accéder
à
un
élément
de
un
tableau
comme
si
il
s'
agissait
de
une
variable
normale
.

On
accède
à
un
élément
du
tableau
en
utilisant
les
crochets
[
]
qui
contiennent
l'
index
.

Les
entiers
qui
indexent
le
tableau
n
'
ont
pas
obligation
de
se
suivre
.

si
l'
index
est
manquant
,
Php
utilise
comme
index
le
plus
grand
index
existant
incrémenté
de
1
.

Nous
ne
somme
pas
tenu
de
déclarer
quoi
que
ce
soit
avant
de
initialiser
un
tableau
,
car
tous
ses
éléments
se
créent
à
la
volée
.

vous
pouvez
affecter
des
valeurs
au
éléments
du
tableau
de
la
même
façon
que
pour
une
autre
variable
.

vous
pouvez
initialiser
les
tableaux
de
deux
manières
différentes
.

Structure
de
un
tableau
NomTableau[
]
à
Valeur
;
ou
NomTableau
=
array(
indice
Valeur
,
indice
=>
Valeur
,
…
)
Exemple
:
<
?

php
$Auteur[]=
"
Molière
"
;
$Auteur[]=
"
Franz
Kafka
"
;
$Auteur[]=
"
Albert
Camus
"
;
echo
$Auteur[0]."<br>
"
;
//Affiche
Molière
echo
$Auteur[1]."<br>
"
;
//Affiche
Franz
Kafka
echo
$Auteur[2]."<br>
"
;
//Affiche
Albert
Camus
?

>
ou
à
l'
aide
de
la
fonction
array(
)
.

<
?

php
$Auteur
=
?

à
array("Molière
"
,
"
Franz
Kafka
"
,
"
Albert
Camus
"
)
;
Dans
ces
exemples
l'
indice
n'
ayant
pas
été
renseigné
,
Php
s'
en
charge
,
ainsi
la
valeur
"
Molière
"
,
"
Franz
Kafka
"
,
"
Albert
Camus
"
prendrons
respectivement
la
valeur
0
,
1
,
2
.

On
peut
également
spécifier
nous
même
les
indice
du
tableaux
.

<
?

php
$Auteur[5]=
"
Molière
"
;
$Auteur[7]=
"
Franz
Kafka
"
;
$Auteur[12]=
"
Albert
Camus
"
;
echo
$Auteur[5]."<br>
"
;
//Affiche
Molière
echo
$Auteur[7]."<br>
"
;
//Affiche
Franz
Kafka
echo
$Auteur[12]."<br>
"
;
//Affiche
Albert
Camus
?

>
ou
<
?

php
$Auteur=array(5
=>
"
Molière
"
,
7
çù
"
Franz
Kafka
"
,
12
çù
"
Albert
Camus
"
)
;
echo
$Auteur[5]."<br>
"
;
//Affiche
Molière
echo
$Auteur[7]."<br>
"
;
//Affiche
Franz
Kafka
echo
$Auteur[12]."<br>
"
;
//Affiche
Albert
Camus
?

à
Dans
ces
exemples
l'
indice
a
été
renseigné
,
ainsi
la
valeur
"
Molière
"
,
"
Franz
Kafka
"
,
"
Albert
Camus
"
prendrons
respectivement
la
valeur
5
,
7
,
12
.

Exercice
:
(
Voir
annexe
les
Tableaux
Exercice
1
)
.

Soit
le
tableau
du
mois
de
l'
année
:
$mois=array('Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Aôu
t'
,'Septembre','Octobre','Novembre','Décembre
'
)
;
Afficher
le
mois
de
juillet
à
partir
du
tableau
du
mois
de
l'
année
sans
utiliser
de
boucle
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
34
Cours
de
initiation
Php
Fonction
de
traitement
de
tableaux
php
nous
offre
de
nombreuses
fonction
pour
manipuler
les
tableaux
(
reportez
vous
à
la
documentation
pour
la
liste
complète
du
fonction
de
tableaux
.

En
voici
quelques
une
:
Array()
;
Count($tableau)
;
Reset($tableau)
;
End($tableau)
;
Current($tableau)
;
Next($tableau)
;
Prev($tableau)
;
Extract($tableau)
;
crée
un
tableau
renvoi
le
nombre
de
éléments
du
tableau
retourne
au
premier
élément
du
tableau
se
positionne
au
dernière
élément
du
tableau
renvoi
l'
élément
en
cour
du
tableau
se
positionne
sur
l'
élément
suivant
du
tableau
se
positionne
sur
l'
élément
précédent
du
tableau
importe
des
variables
dans
la
table
du
symbole
à
partir
de
un
tableau.(
attention
au
traitement
du
collisions
)
in_array($tableau)
;
Renvoi
TRUE
si
une
valeur
appartient
à
un
tableau
array_search()
;
Recherche
un
élément
dans
un
tableau
et
renvoi
sa
clé
si
il
existe
array_keys($tableau,$chaine)
;
Renvoi
toutes
les
clé
de
un
tableau
array_diff($tableau1
,
$tableau2
)
;
Crée
un
tableau
contenant
les
éléments
du
premier
tableau
qui
ne
sont
pas
dans
le
second
Array_push(($tableau,$chaine)
;
Ajoute
un
ou
plusieurs
éléments
à
la
fin
de
un
tableau
Print_r($tableau)
;
affiche
le
tableau
dans
un
format
qui
montre
les
clés
et
les
valeurs
.

Parcourir
les
tableaux
avec
les
boucles
On
peut
passer
en
revue
un
tableau
avec
les
boucles
for
,
List
et
each
et
foreach
:
Pour
utiliser
la
boucle
for
le
nombre
de
répétitions
doit
être
prédéfini
.

Pour
ce
faire
nous
utiliserons
la
fonction
count()
qui
renvoi
le
nombre
de
éléments
du
tableau
:
Exemple
:
<
?

php
$tableau
=array('bleu','rouge','vert','violet','jaune')
;
for
(
çi
=
0
;
çi
<
Count($tableau)
;
çiu
)
{
echo
"
clé
=
"
.$i
.
"

valeur
=
"
.$tableau[$i]."<br>
"
;
}
?

à
List
et
each
List
Tout
comme
array()
,
list()
n'
est
pas
une
véritable
fonction
,
mais
une
construction
syntaxique
,
qui
permet
de
assigner
une
série
de
variables
en
une
seule
ligne
Each
each()
retourne
la
paire
clé-valeur
courante
du
tableau
array
et
avance
le
pointeur
de
tableau
.

Cette
paire
est
retournée
dans
un
tableau
de
4
éléments
,
avec
les
clés
0
,
1
,
key
,
et
value
.

Les
éléments
0
et
key
contiennent
le
nom
de
la
clé
et
,
et
1
et
value
contiennent
la
valeur
.

si
le
pointeur
interne
de
fichier
est
au-delà
de
la
fin
du
tableau
,
each()
retourne
FALSE
et
reste
dans
cette
position
,
ce
qui
signifie
que
vous
devrez
utiliser
reset()
avant
de
réutiliser
le
tableau
.

Exemple
:
<
?

php
$couleurs=array('bleu','rouge','vert','violet','jaune')
;
reset($couleurs)
;
while(list
(
$Cle
,
$Valeur
)
=
each
($couleurs))
à
echo
"
$Cle
=>
$Valeur<BR>
"
;
}
?

à
Exercice
:
(
Voir
annexe
les
Tableaux
Exercice
2
)
.

Dans
une
page
Php
,
créer
un
tableau
contenant
les
voyelles
et
afficher
les
à
l'
aide
de
l'
instruction
list
each
.

Exercice
:
(
Voir
annexe
les
Tableaux
Exercice
3
)
.

Dans
une
page
Php
construiser
le
tableau
$List_stagiaire
,
contenant
les
éléments
suivants
et
afficher
cette
liste
à
l'
aide
de
la
boucle
list
et
each
:
"
Madame
"
"
Durant
"
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
35
Cours
de
initiation
Php
"
Mademoiselle
"
"
Dupré
"
"
Alain
"
"
Monsieur
"
"
Camus
"
"
Mon
ami
"
"
Jean-Marc
"
Foreach
Php
4
a
fait
évoluer
la
boucle
for
,
la
boucle
″Foreach″
.

la
boucle
″Foreach″
permet
de
parcourir
un
tableau
contenant
un
nombre
inconnu
de
éléments
,
elle
effectue
des
itérations
jusque
a
la
fin
du
tableau
.

Elle
prend
deux
formes
.

La
première
:
Structure
de
la
boucle
foreach
Foreach($NomTableau
As
$ElementTableau
)
{
Instructions
a
exécuter
…
}
Exemple
:
<
?

php
$couleurs=array('bleu','rouge','vert','violet','jaune')
;
Foreach($couleurs
as
$ElementTableau
)
{
echo
$ElementTableau
."<BR>
"
;
}
?

à
La
seconde
:
Structure
de
la
boucle
foreach
Foreach($NomTableau
as
$ValeurIndice
=>
$ElementTableau
)
{
Instructions
a
exécuter
…
à
La
seconde
forme
est
identique
à
la
première
sauf
que
elle
met
a
notre
disposition
la
valeur
de
indice
du
tableau
.

Exemple
:
<
?

php
$couleurs=array('bleu','rouge','vert','violet','jaune')
;
Foreach($couleurs
as
$ValeurIndice
=>
$ElementTableau
)
{
echo
"
$ValeurIndice
=
$ElementTableau
<BR>
"
;
}
?

à
Lorsque
foreach
démarre
,
le
pointeur
interne
de
fichier
est
automatiquement
ramené
au
premier
élément
du
tableau
.

Cela
signifie
que
vous
n'
aurez
pas
à
faire
appel
à
reset()
avant
foreach
.

Exercice
:
(
Voir
annexe
les
Tableaux
Exercice
4
)
.

Créer
une
page
Php
affichant
les
éléments
contenus
dans
la
variable
global
$_SERVER
en
utilisant
foreach
.

Exercice
:
(
Voir
annexe
les
Tableaux
Exercice
5
)
.

Reprendre
le
tableau
$List_stagiaire
de
l'
exercice
3
du
chapitre
"
les
tableaux
"
et
créer
à
l'
aide
de
une
fonction
Php
prédéfinie
,
une
page
Php
permettant
de
afficher
cette
liste
.

Rechercher
si
Madame
Durant
et
Monsieur
Dupont
font
parie
de
la
liste
et
indiquer
pour
chacun
,
par
une
phrase
,
si
il
ont
été
contactés
par
courrier
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
36
Cours
de
initiation
Php
Tableaux
Multidimensionnels
Un
tableau
multidimensionnel
est
un
tableau
composé
de
tableaux
,
vous
pouvez
imbriquer
des
tableaux
tant
que
Php
ne
manque
pas
de
mémoire
.

La
définition
de
un
tableau
multidimensionnel
dans
sa
forme
générale
se
présente
de
la
manière
suivante
:
Structure
de
un
tableau
multidimensionnel
NomTableau
=
array(
indice
=>
array(Contenu
du
tableau
)
,
indice
çù
array(Contenu
du
tableau
)
,
…
)
Exemple
:
<
?

php
$animaux=array("poisonns
"
=>
array("sole
"
,
"
merlan
"
,
"
colin","sardine
"
)
,
"
serpents
"
=>
array("orvet","couleuvre")
,
"
oiseau
"
=>
array("merle
"
,
"
serin
"
,
"
pie
"
)
)
;
//ou
comme
ceci
$poisonns
=
array("sole
"
,
"
merlan
"
,
"
colin
"
,
"
sardine
"
)
;
$serpents
=
array("orvet","couleuvre")
;
çoiseau
=
array("merle
"
,
"
serin
"
,
"
pie
"
)
;
$animaux=array("poisonns
"
=>$poisonns
,
"
serpents
"
çù
$serpents
,
"
oiseau
"
=>
çoiseau
)
;
echo
"
L'
élément
\$animaux['oiseaux'][1
]
vaut
:
"
.$animaux['oiseaux'][1
]
;
?

à
Exercice
:
(
Voir
annexe
Tableaux
Multidimensionnels
Exercice
1
)
.

Avec
la
liste
du
stagiaires
ci-dessous
:
Madame
Durant
,
Mademoiselle
Dupré
,
Père
Alain
,
Monsieur
Camus
,
Jean-Marc
Leblanc
,
et
sachant
que
Madame
Durant
est
domiciliée
au
21
,
rue
Georges
Brassens
son
n°
de
téléphone
est
:
01
42
44
12
30
Mademoiselle
"
Dupré
est
domiciliée
au
54
,
rue
Jacques
Brel
son
n°
de
téléphone
est
:
01
14
42
32
40
Père
Alain
est
domicilié
13
,
rue
du
Saint
pères
son
n°
de
téléphone
est
:
01
52
64
72
80
Monsieur
Camus
est
domicilié
79
,
rue
du
scribe
son
n°
de
téléphone
est
:
01
62
73
82
90
Jean-Marc
Leblanc
est
domicilié
rue
du
blanc
manteaux
son
n°
de
téléphone
est
:
01
02
14
22
40
Dans
une
page
Php
,
construiser
un
tableau
multidimensionnel
de
la
liste
du
stagiaires
,
leur
adresse
et
N°
de
téléphone
(
$annuaire_stagiaires
)
,
et
afficher
la
liste
de
chaque
stagiaire
accompagne
au
dessous
de
son
adresse
.

Exercice
:
(
Voir
annexe
Tableaux
Multidimensionnels
Exercice
2
)
.

Avec
la
liste
du
stagiaires
ci-dessous
:
Madame
Durant
,
Mademoiselle
Dupré
,
Père
Alain
,
Monsieur
Camus
,
Jean-Marc
Leblanc
,
et
sachant
que
Madame
Durant
est
domiciliée
au
21
,
rue
Georges
Brassens
94000
Créteil
Mademoiselle
"
Dupré
est
domiciliée
au
54
,
rue
Jacques
Brel
75000
Paris
Père
Alain
est
domicilié
13
,
rue
du
Saint
pères
93000
Saint-Denis
Monsieur
Camus
est
domicilié
79
,
rue
du
scribe
92160
Antony
Jean-Marc
Leblanc
est
domicilié
rue
du
blanc
manteaux
91000
Montfermeil
Construiser
un
tableau
multidimensionnel
de
la
liste
du
stagiaires
et
leur
adresse
(
$annuaire_stagiaires
)
,
pui
créer
une
page
Php
affichant
la
liste
de
chaque
stagiaire
accompagne
au
dessous
de
son
adresse
en
affichant
sur
la
même
ligne
le
code
postal
et
la
ville
.

Exercice
:
(
Voir
annexe
Tableaux
Multidimensionnels
Exercice
3
)
.

Avec
la
liste
du
stagiaires
ci-dessous
:
Madame
Durant
,
Mademoiselle
Dupré
,
Père
Alain
,
Monsieur
Camus
,
Jean-Marc
Leblanc
,
et
sachant
que
Madame
Durant
est
domiciliée
au
21
,
rue
Georges
Brassens
94000
Créteil
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
37
Cours
de
initiation
Php
Mademoiselle
"
Dupré
est
domiciliée
au
54
,
rue
Jacques
Brel
75000
Paris
Père
Alain
est
domicilié
13
,
rue
du
Saint
pères
93000
Saint-Denis
Monsieur
Camus
est
domicilié
79
,
rue
du
scribe
92160
Antony
Jean-Marc
Leblanc
est
domicilié
rue
du
blanc
manteaux
91000
Montfermeil
Et
la
liste
du
inscrits
au
cours
suivants
:
Inscrits
au
cours
de
Mathématiques
:
"
Madame
Durant
"
et
"
Monsieur
Camus
"
Inscrits
au
cours
de
Physique
:
"
Mademoiselle
Dupré
"
et
"
Père
Alain
"
Inscrits
au
cours
de
Français
:
"
Jean-Marc
Leblanc
"
,
"
Mademoiselle
Dupré
"
et
"
Monsieur
Camus
"
.

Dans
une
page
Php
,
construiser
deux
tableaux
multidimensionnels
,
un
pour
la
liste
du
stagiaires
avec
leur
adresse
(
$annuaire_stagiaires
)
et
un
pour
la
liste
du
cours
avec
les
stagiaires
inscrits
(
$cours_stagiaires
)
,
pui
afficher
la
liste
de
chaque
cours
et
chaque
stagiaire
inscrits
accompagne
au
dessous
de
leur
adresse
en
affichant
sur
la
même
ligne
le
code
postal
et
la
ville
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
38
Cours
de
initiation
Php
Tri
de
tableaux
Php
met
à
notre
disposition
plusieurs
fonctions
de
tri
en
voici
quelques
unes
:
Sort
(
)
;
Asort()
;
Rsort()
;
et
arsort
;
Ksort()
;
et
krsort()
;
Trie
un
tableau
et
ne
maintient
pas
l'
association
du
index
,
supprime
les
clés
existantes
,
et
ne
les
réordonne
pas
.

Trie
un
tableau
et
maintient
l'
association
du
index
Se
comportent
de
la
même
façon
que
sort()
et
rsort()
,
sauf
que
elles
renvoient
le
tableau
dans
un
ordre
inversé
.

Se
comportent
de
la
même
façon
que
sort()
et
rsort()
,
sauf
que
elles
renvoient
le
tableau
trie
dans
l'
ordre
alphabétique
de
leur
indice
de
chaîne
.

Exemple
de
différent
tri
du
tableau
$fruits
:
$fruits
=
array("d"=>"papaye","a"=>"orange","b"=>"banane","c"=>"ananas")
;
Avant
le
tri
:
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
Avant
le
tri
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
Après
le
tri
:
exemple
de
tri
avec
sort()
0
:
ananas
sort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
du
ses
valeurs
et
1
:
banane
réordonne
les
indices
2
:
orange
3
:
papaye
Après
le
tri
exemple
de
tri
avec
asort()
c
:
ananas
asort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
du
ses
valeurs
et
b
:
banane
maintient
l'
association
du
index
a
:
orange
d
:
papaye
Avant
le
tri
:
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
Après
le
tri
:
exemple
de
tri
avec
rsort()
rsort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
inverse
du
ses
valeurs
et
réordonne
les
indices
Avant
le
tri
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
Après
le
tri
exemple
de
tri
avec
arsort()
arsort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
inverse
du
ses
valeurs
et
maintient
l'
association
du
index
Avant
le
tri
:
D
:
papaye
a
:
orange
b
:
banane
c
:
ananas
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
Après
le
tri
:
exemple
de
tri
avec
ksort()
ksort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
de
ses
indice
de
chaîne
.

et
maintient
l'
association
du
indice
Avant
le
tri
d
:
papaye
a
:
orange
b
:
banane
c
:
ananas
0
:
papaye
1
:
orange
2
:
banane
3
:
ananas
a
:
orange
b
:
banane
c
:
ananas
d
:
papaye
Après
le
tri
exemple
de
tri
avec
krsort()
krsort($fruits)
;
tri
le
tableau
dans
l'
ordre
alphabétique
inverse
de
ses
indice
de
chaîne
.

et
maintient
l'
association
du
indice
d
:
papaye
c
:
ananas
b
:
banane
a
:
orange
Attention
au
tri
lors
de
la
récupération
du
valeurs
de
une
liste
par
leurs
indices
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
39
Cours
de
initiation
Php
Exercice
:
(
Voir
annexe
Tri
du
tableaux
)
.

Soit
le
tableau
du
mois
de
l'
année
:
$mois=array('Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Aôut','Septembre','Octobre','Novembre
'
,
'
Décembre
'
)
;
Effectuer
un
tri
avec
chacune
du
fonctions
de
tri
ci-dessus
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
40
Cours
de
initiation
Php
4.6
.

Fonctions
Une
fonction
est
une
section
de
code
défini
une
foi
pour
être
réutilisé
dans
d'
autres
parties
du
programme
.

Elle
permet
de
écrire
des
applications
particulièrement
bien
modulaires
et
structurées
.

Les
fonctions
peuvent
prendre
des
valeurs
de
entrée
appelées
arguments
,
effectuer
des
opérations
pui
renvoyer
une
valeur
.

Elle
transfert
toutes
les
valeurs
de
arguments
dans
de
nouvelles
variables
appelées
paramètres
ces
derniers
pouvant
être
ensuite
utilisés
à
l'
intérieur
de
la
fonction
.

Il
existe
deux
type
de
fonctions
:
Les
fonctions
prédéfinis
:
Php
en
dispose
de
nombreuses
.

Les
fonctions
utilisateurs
que
l'
utilisateur
crée
lui-même
.

Les
fonction
prédéfinis
Nous
ne
pouvons
donner
ici
qu'
un
échantillon
succinct
du
nombreuses
fonctions
de
Php
.

Nous
avons
choisi
celles
les
plus
fréquemment
employées
.

Isset()
;
Empty()
;
Strtoupper()
;
Strtolower()
;
Ucfirst()
;
Exit()
;
Die()
;
Unset()
;
renvoi
TRUE
si
la
variable
à
été
définit
sinon
FALSE
.

Renvoi
TRUE
si
la
variable
est
définit
et
vide
sinon
FALSE
.

Renvoie
une
chaîne
en
majuscules
.

Renvoie
une
chaîne
en
minuscules
.

Met
le
premier
caractère
en
majuscule
.

Termine
le
script
courant
.

Envoi
le
message
passé
en
argument
avant
de
terminer
le
script
.

Détruit
une
variable
.

Les
fonctions
utilisateurs
Une
fonction
peut
être
défini
n'
importe
ou
dans
le
script
,
mais
qu'
une
seul
foi
.

Pour
définir
une
fonction
vous
devez
lui
donné
un
nom
.

Les
fonctions
sont
déclarées
à
l'
aide
de
l'
instruction
function
,
selon
la
structure
suivante
:
Structure
de
la
définition
de
une
fonction
function
nom_fonction
(
[
arguments
]
)
{
corps
de
la
fonction
à
Le
mot-clé
return
met
fin
a
la
fonction
,
si
vous
voulez
que
la
fonction
renvoi
une
valeur
alors
placer
celle
-ci
après
le
mot-clé
return
sur
la
dernière
ligne
de
la
fonction
.

Exemple
:
<
?

php
function
charge($salaire)
à
$salaire
=
$salaire
-
(($salaire/100)*20)
;
return
$salaire
;
}
echo
charge(2000)
;
//affiche
1600
?

à
vous
pouvez
fournir
plusieurs
paramètres
séparés
par
une
virgule
:
Exemple
:
<
?

php
function
charge($salaire
,
$TauxCharge
)
à
$salaire
=
$salaire
-
(($salaire/100)*
$TauxCharge
)
;
return
$salaire
;
}
$salaire=2000
;
$TauxCharge=20
;
echo
charge($salaire,$TauxCharge)."<br>
"
;
//affiche
1600
echo
$salaire
;
//affiche
2000
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
41
Cours
de
initiation
Php
Exercice
:
(
Voir
annexe
les
fonctions
Exercice
1
)
.

Dans
une
page
Php
,
déclarer
deux
variable
php
et
affecter
leur
la
valeur
de
votre
prénom
et
nom
.

Créer
la
fonction
get_msg($chaine
,
$couleur
)
,
qui
renverra
la
chaîne
passé
en
paramètre
dans
une
couleur
différente
,
passée
aussi
en
paramètre
,
sachant
que
le
rouge=
"
#FF0000
"
,
le
bleu="#0000FF
"
,
le
vert="#00FF00
"
et
le
blanc="FFFFFF
"
,
pui
,
générer
le
texte
suivant
,
je
me
présente<BR>
je
m'
appel
"
votre
prénom
"
"
votre
nom
"
avec
le
nom
en
rouge
et
le
prénom
en
vert
.

pui
le
même
texte
à
l'
aide
de
JavaScript
.

Vérifier
en
appelant
la
fonction
.

Il
existe
une
autre
méthode
pour
passer
des
paramètres
à
une
fonction
,
qui
implique
que
la
valeur
modifiée
à
l'
intérieur
de
la
fonction
le
soit
aussi
à
l'
extérieur
.

Cela
s'
appelle
passer
un
argument
par
référence
.

Pour
indiquer
à
Php
que
nous
voulons
utiliser
cette
méthode
,
nous
devons
ajouter
&
(
et
Commerciale
)
au
début
de
la
variable
passée
.

vous
pouvez
aussi
appeler
les
fonctions
avec
des
paramètres
passé
par
référence
,
toutefois
cette
méthode
n'
est
valable
que
si
la
directive
«
allow_call_time_pass_reference
»
du
fichier
de
configuration
de
Php
est
égale
à
On
.

Exemple
:
<
?

php
function
charge(&$salaire
,
$TauxCharge
)
à
$salaire
=
$salaire
-
(($salaire/100)*
$TauxCharge
)
;
return
$salaire
;
}
$salaire=2000
;
$TauxCharge=20
;
echo
$salaire."<br>
"
;
//Salaire
avant
la
fonction
affiche
2000
echo
charge($salaire,$TauxCharge)."<br>
"
;
//affiche
1600
echo
$salaire
;
//Salaire
aprés
la
fonction
affiche
1600
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
42
Cours
de
initiation
Php
Portée
du
variables
Lorsqu'
une
variable
est
crée
dans
une
page
Php
,
on
dit
que
elle
à
une
durée
de
vie
identique
à
celle
de
une
page
web
.

mais
lors
de
l'
utilisation
de
une
variable
à
l'
intérieur
de
une
fonction
sa
durée
de
vie
est
égale
à
la
durée
de
vie
de
la
fonction
,
c'
est
à
dire
que
elle
cesse
de
exister
dès
que
la
fonction
se
termine
.

Les
variables
déclarées
à
l'
intérieur
de
une
fonction
sont
dites
locales
et
elles
ne
sont
pas
visibles
(
accessibles
)
en
dehors
de
la
fonction
.

Il
existe
plusieurs
niveaux
de
définition
de
variable
:
Le
niveau
global
,
qui
permet
à
une
variable
de
être
visible
dans
la
fonction
et
à
l'
extérieur
de
la
fonction
.

Le
niveau
static
permet
de
définir
une
variable
locale
à
la
fonction
,
qui
persiste
durant
tout
le
temps
de
exécution
du
script
.

Le
niveau
local
,
utilisé
par
défaut
,
permet
de
définir
une
variable
locale
classique
.

Fonction
imbriquer
vous
pouvez
imbriquer
les
fonctions
les
unes
dans
les
autres
,
toutefois
attention
à
ne
pas
définir
plusieurs
foi
la
même
fonction
.

Exemple
:
<
?

php
echo
"
si
nous
voulons
calculer
le
montant
de
la
retraite
,
une
foi
les
charges
déduites
:<br>
"
;
function
retraite($Total
,
$TauxCharge
)
à
function
charge($salaire
,
$TauxCharge
)
à
return
$salaire
-
(($salaire/100)*
$TauxCharge
)
;
}
$ApresCharges
=
charge($Total,$TauxCharge)
;
return
charge($Total,$TauxCharge)
-
(
(
$ApresCharges/100)*3
)
;
}
$Total=2000
;
$TauxCharge=20
;
echo
"
Total
=
"
.$Total."<BR>
"
;
//affiche
Total
=
2000
echo
"
Retraite
=
"
.retraite($Total,$TauxCharge)."<br>
"
;
//affiche
retraite
à
1552
echo
"
ApresCharges
=
"
.charge($Total,$TauxCharge)."<br>
"
;
//affiche
après
charge
à
1600
//
echo
"
Retraite
=
"
.retraite($Total,$TauxCharge)."<br>
"
;
//affiche
une
erreure
?

>
si
vous
voulez
accéder
à
un
variable
située
à
l'
intérieur
de
une
fonction
,
vous
devez
utiliser
l'
instruction
global
,
cela
indique
à
Php
que
ce
n'
est
pas
une
nouvelle
variable
local
mais
une
variable
global
qui
pourra
être
utiliser
ailleurs
dans
le
script
.

Exemple
:
<
?

php
function
charge($salaire
,
$TauxCharge
)
à
global
$salaire
;
$salaire
=4000
;
$salaire
-=
(($salaire/100)*
$TauxCharge
)
;
return
$salaire
;
}
$salaire=2000
;
$TauxCharge=20
;
echo
$salaire."<BR>
"
;
//affiche
2000
echo
charge($salaire,$TauxCharge)."<br>
"
;
//affiche
3200
echo
$salaire."<BR>
"
;
//affiche
3200
?

à
Exercice
:
(
Voir
annexe
les
fonctions
Exercice
2
)
.

Reprendre
le
tableau
du
stagiaires
(
$annuaire_stagiaires
)
de
l'
exercice
2
du
chapitre
tableaux
multidimensionnel
,
parcourrer
ce
tableau
à
l'
aide
de
une
boucle
pui
pour
chaque
élément
du
tableau
appeler
la
fonction
(ajoute_stagiaire())
que
vous
aurez
créé
et
Afficher
le
nombre
de
stagiaires
femme
,
le
nombre
de
stagiaires
hommes
et
enfin
le
nombre
total
de
stagiaires
.

NB
:
Aidez
vous
de
la
fonction
eregi(
à
occurrence
à
rechercher
»
,$chaine
)
qui
retourne
true
si
une
occurrence
a
été
trouvée
dans
la
chaîne
et
false
dans
le
cas
contraire
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
43
Cours
de
initiation
Php
Exercice
:
(
Voir
annexe
les
fonctions
Exercice
3
)
.

Reprendre
l'
exercice
2
et
ajoutez
une
fonction
(moyenne_parité())qui
permette
de
afficher
la
parité
hommes/femmes
sous
forme
de
moyenne
(
%
)
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
44
Cours
de
initiation
php
Les
inclusions
Avec
les
fonctions
include()
et
require()
,
Php
nous
permet
de
inclure
des
segments
de
code
ou
de
texte
à
un
endroit
donné
de
une
page
web
.

vous
pouvez
utiliser
des
fichiers
inclus
pour
inclure
du
texte
,
du
code
HTML
ou
du
scripts
Php
.

C'
est
de
cette
façon
que
l'
on
pourra
définir
des
éléments
qui
seront
partagés
par
toutes
les
page
de
un
site
web
.

Ainsi
lorsque
l'
on
voudra
modifier
l'
un
de
entre
eux
,
il
suffira
de
modifier
dans
le
fichier
ou
il
est
défini
pour
que
cette
modification
soit
automatiquement
répercutée
dans
tous
les
scripts
qui
incluent
le
fichier
.

php
met
deux
instructions
à
notre
disposition
pour
inclure
des
fichiers
include
et
require
qui
prennenet
la
forme
suivante
:
include(‘’monfichier’’)
;
require(‘’monfichier’’)
;
Exemple
:
<
?

php
include("test.txt")
;
//ou
require("test.txt")
;
?

>
depuis
la
version
4.3
de
php
ces
deux
instructions
sont
identiques
,
hormis
dans
leur
gestion
du
erreurs
.

Include()
produit
une
Alerte
(
warning
)
tandis
que
require()
génère
une
erreur
fatale
.

En
d'
autres
termes
,
n'
hésitez
pas
à
utiliser
require()
si
vous
voulez
que
un
fichier
de
inclusion
manquant
interrompe
votre
script
.

include()
ne
se
comporte
pas
de
cette
façon
,
et
le
script
continuera
son
exécution
.

Il
existe
aussi
une
variante
au
instructions
include
et
require
,
il
s'
agit
de
include_once
et
require_once
qui
ont
un
comportement
identique
hormis
que
elle
ne
s'
exécute
qu'
une
foi
dans
le
script
.

Ces
instructions
sont
utilisée
de
préférence
lorsque
le
fichier
doit
être
inclus
ou
évalué
plusieurs
foi
dans
un
script
,
ou
bien
lorsque
vous
voulez
être
sûr
que
il
ne
sera
inclus
qu'
une
seule
foi
,
pour
éviter
des
redéfinitions
de
fonction
.

Exercice
:
(
Voir
annexe
Les
inclusions
Exercice
)
.

Créer
le
fichier
Php
"
header.inc
"
qui
permettra
de
afficher
grâce
à
une
instruction
de
inclusion
un
message
de
bienvenue
sur
chaque
page
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
45
Cours
de
initiation
Php
5
.

Les
Formulaires
Un
formulaire
est
une
page
contenant
du
texte
encapsulé
dans
des
balises
HTML
.

Il
peut
mettre
à
la
disposition
du
client
divers
éléments
tels
que
:
bouton
de
envoi
,
liste
déroulante
,
case
à
option
,
bouton
radio
etc
à
Lorsque
le
client
envoi
une
page
HTML
au
serveur
,
celui
-ci
transmet
les
informations
recueillis
à
Php
qui
les
traite
et
renvoi
dans
le
cadre
de
la
réponse
http
au
navigateur
.

Ces
informations
sont
regroupées
à
l'
aide
de
une
du
deux
méthodes
,
la
méthode
"
GET
"
et
la
méthode
"
POST
"
.

La
balise
html
"
<form>
"
permet
de
créer
un
formulaire
,
elle
possède
de
nombreux
attributs
,
en
l'
occurrence
l'
attribut
"
method
"
,
qui
indique
à
Php
la
méthode
à
utiliser
et
l'
attribut
"
action
"
qui
indique
au
serveur
à
que
elle
page
se
rendre
une
foi
que
l'
utilisateur
a
cliqué
sur
le
bouton
envoi
.

Exemple
:
<form
action="form.php
"
method="GET">
si
la
directive
"
register_globals
du
fichier
de
configuration
est
égale
"
à
On
Php
traite
les
informations
transmis
par
le
client
en
transformant
la
valeur
de
l'
attribut
name
du
éléments
en
variable
et
en
leur
affectant
la
valeur
de
l'
attribut
"
value
"
.

Exemple
:
<input
type="text
"
value="Mme
DURANT
"
name="nom
"
/>
La
variable
$nom
sera
créée
et
la
valeur
"
Mme
DURANT
"
lui
sera
affécté
.

La
méthode
GET
:
Cette
méthode
indique
au
navigateur
de
joindre
à
l'
URL
les
valeurs
placées
par
l'
utilisateur
dans
le
formulaire
.

Pour
ce
faire
le
navigateur
ajoute
un
point
de
interrogation
à
la
fin
de
l'
adresse
URL
,
pui
les
paramètres
sous
la
forme
de
paires
nom=valeur
séparé
par
un
&
(
ET
commerciale
)
.

Exemple
:
http://localhost/coursphp/test.php
?

animal=chat&nom=minou
La
méthode
POST
:
si
il
est
un
inconvénient
que
l'
on
peut
reprocher
à
la
méthode
"
GET
"
c'
est
la
nature
publique
de
leur
transmission
.

si
vous
ne
voulez
pas
que
les
données
envoyées
apparaissent
dans
l'
URL
,
il
vous
faudra
utiliser
la
méthode
"
POST
"
.

Celle
-ci
fonctionne
presque
comme
la
méthode
"
GET
"
à
la
différence
que
les
informations
du
formulaire
sont
envoyées
au
corps
de
la
requête
HTTP
au
lieu
de
faire
partie
de
l'
URL
.

Cela
signifie
que
elles
ne
sont
plus
visibles
au
yeux
de
tous
dans
la
mesure
ou
elles
ne
sont
plus
attachées
à
l'
URL
.

La
méthode
"
POST
"
permet
également
la
transmission
de
un
plus
grand
nombre
de
données
.

Cette
notion
a
son
importance
car
il
y
a
une
limite
physique
à
la
quantité
de
données
pouvant
être
transmises
dans
le
cadre
de
une
URL
.

Lorsque
l'
utilisateur
envoi
le
formulaire
au
serveur
,
Php
recueille
les
informations
dans
des
variables
et
les
stock
dans
un
tableau
sous
la
forme
Index/valeur
ou
index
correspond
au
nom
du
paramètre
et
valeur
à
sa
valeur
.

Les
tableaux
"
$_GET
"
ou
"
$HTTP_GET_VARS
"
stock
les
informations
recueillis
par
la
méthode
"
GET
"
et
les
tableaux
"
$_POST
"
ou
"
$HTTP_POST_VARS
"
celles
recueillis
avec
la
méthode
"
POST
"
.

Exemple
:
<html>
<head>
<title>Exemple
de
formulaire</title>
<link
rel="stylesheet
"
href="sga.css
"
type="text/css
"
/>
</head>
äbodyù
<form
action="form_get_resultat.php
"
method="GET">
Merci
de
remplir
ce
formulaire<br>
Nom&nbsp
;
:&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
<input
type="text
"
size="30
"
maxlength="50
"
name="nom
"
/><br>
Prénom&nbsp
;
:&nbsp
;
<input
type="text
"
size="30
"
maxlength="50
"
name="prenom
"
/><br>
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
46
Cours
de
initiation
Php
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
&nbsp
;
<input
type="submit
"
value="Envoyer
"
/>
</form>
</body>
</html>
Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
1
)
.

Créer
le
formulaire
comme
le
montre
la
figure
ci-dessous
,
et
à
l'
aide
de
une
boucle
afficher
dans
une
page
Php
un
message
de
bienvenue
composé
les
éléments
saisis
en
utilisant
la
méthode
GET
pui
la
méthode
POST
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
47
Cours
de
initiation
Php
Urlencode()
et
Urldecode()
Lorsqu'
on
appelle
une
page
avec
la
méthode
GET
,
une
chaîne
de
caractères
est
aboutée
à
l'
URL
,
contenant
la
suite
de
couples
noms/valeurs
du
éléments
du
formulaire
séparés
par
des
caractères
&
.

Cette
suite
est
codée
de
façon
que
n'
y
figure
aucun
espace
(
il
y
sont
remplacés
par
des
«
p
»
)
.

En
outre
,
les
caractères
de
ponctuation
et
les
diacritiques
sont
remplacés
par
leur
code
ASCII
.

Exemple
:
<
?

php
prenom=Arthur-Jérémie
cours[]=Anglais
sera
transmis
dans
l'
URL
comme
ceci
:
prenom=Arthur-J%E9r£E9émie&cours%5B%5D=Anglais
?

à
Grâce
au
fonctions
urldecode
et
urlencode
on
peut
ainsi
transformé
la
chaîne
de
l'
url
afin
que
elle
devienne
lisible
.

urldecode()
décode
toutes
les
séquences
%##
et
les
remplace
par
leur
valeur
.

La
chaîne
ainsi
décodée
est
retournée
.

urlencode()
retourne
une
chaîne
dont
les
caractères
non
alpha-numériques
(
hormis
-_
.
)

sont
remplacés
par
des
séquences
commençant
par
un
caractère
pourcentage
(
%
)
,
suivi
de
deux
chiffres
hexadécimaux
.

Les
espaces
sont
remplacés
par
des
signes
plus
(
+
)
.

Ce
codage
est
celui
qui
est
utilisé
pour
poster
des
informations
dans
les
formulaires
HTML
.

Exemple
:
On
commence
par
récupérer
la
chaîne
de
l'
URL
qui
se
trouve
dans
la
variable
global
$_SERVER["QUERY_STRING
"
]
,
et
on
lui
applique
la
fonction
split
qui
va
récupérer
les
occurrence
de
chaînes
séparées
par
des
&
dans
un
tableau
,
pui
on
va
isoler
le
nom
de
la
valeur
de
façon
classique
à
l'
aide
de
la
boucle
while
.

Exemple
:
<
?

php
$a
à
split('&
'
,
$_SERVER["QUERY_STRING
"
]
)
;
çi
=
0
;
while
(
çi
<
count
ççaëç
{
bb
=
spilt('=
'
,
$a
[
çi
]
)
;
echo
'
La
valeur
du
paramètre
'
,
htmlspecialchars(urldecode($b
[
0
]
)
)
,
'
est
'
,
htmlspecialchars(urldecode($b[1]))
,
"
<br>
"
;
çiu
;
}
?

à
Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
2
)
.

Créer
le
formulaire
de
cet
exemple
,
et
à
l'
aide
de
la
fonction
urldecode()
afficher
dans
une
page
Php
un
message
de
bienvenue
composé
les
éléments
saisis
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
48
Cours
de
initiation
Php
Recupération
du
variables
Nous
allons
voir
maintenant
sous
forme
de
exemples
et
de
exercices
les
contrôles
HTML
les
plus
courants
et
la
manière
de
les
traiter
avec
Php
.

Comme
nous
l'
avons
déjà
vu
,
lorsque
l'
utilisateur
clique
sur
le
bouton
"
Envoyer
"
,
il
transmet
au
serveur
http
le
formulaire
selon
la
méthode
mentionnée
par
l'
attribut
"
Method
"
de
la
balise
"
Action
"
,
pui
,
Php
interprète
le
code
et
redirige
l'
action
sur
la
page
mentionnée
par
l'
attribut
"
Action
"
de
la
balise
"
FORM
"
.

Après
l'
analyse
de
cette
page
(
parser
)
,
il
renvoi
la
réponse
à
l'
utilisateur
via
le
serveur
HTTP
.

Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
3
)
.

Afin
de
illustrer
ces
mécanismes
,
créer
le
formulaire
de
inscription
(
Voir
Figure
1
)
en
HTML
et
récupérer
sur
une
autre
page
php
les
valeurs
saisies
par
l'
utilisateur
,
en
utilisant
la
méthode
"
GET
"
pui
la
méthode
"
POST
"
.

En
créant
deux
page
distinctes
on
obtient
la
séparation
du
code
HTML
constituant
les
éléments
de
interface
proposés
au
client
(
Ihm
)
,
du
code
php
qui
gèrent
les
règles
de
gestions
(
validations
,
calculs
,
contrôles
,
etc
…
)
,
ce
qui
donne
une
meilleur
visibilité
et
facilite
la
maintenance
puisque
l'
on
pourra
ainsi
intervenir
sur
l'
interface
sans
modifier
le
code
et
vis
et
versa
.

Formulaire
de
inscription
Nom
:
Prénom
:
Adresse
:
Courriel
:
Envoyer
Figure
1
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
49
Cours
de
initiation
Php
Les
contrôles
HTML
Les
bouton
radio
Les
bouton
radio
se
créent
avec
la
balise
HTML
:
<input
type="radio
"
value=
"
"
checked="checked
"
name=
"
"
>
Pour
récupérer
la
valeur
de
un
groupe
de
boutons
radio
,
il
faut
que
tous
les
boutons
radio
aient
le
même
nom
,
ainsi
Php
créera
que
une
seule
variable
qui
ne
pourra
avoir
qu'
une
seule
valeur
et
sera
traitée
comme
n'
importe
qu'
elle
autre
variable
.

Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
4
)
.

Créer
un
formulaire
identique
au
précédent
,
en
lui
ajoutant
un
groupe
de
boutons
radio
permettant
à
l'
utilisateur
de
choisir
la
civilité
,
comme
le
montre
la
figure
2
.

Formulaire
de
inscription
Madame
:
Mademoiselle
:
Monsieur
:
Nom
:
Prénom
:
Adresse
:
Courriel
:
Envoyer
Figure
2
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
50
Cours
de
initiation
Php
Les
case
à
cocher
et
les
listes
de
sélection
.

Les
case
à
cocher
et
les
listes
de
sélection
permettent
de
effectuer
simultanément
plusieurs
choix
.

Il
est
donc
pratique
de
considérer
que
la
réponse
sera
constitué
par
un
tableau
,
il
convient
donc
que
l'
attribut
"
name
"
du
éléments
"
<Select>
"
et
"
<Input>
"
soient
suivis
de
crochets
.

Ainsi
Php
transformera
ses
variables
sous
forme
de
tableau
et
nous
pourrons
leur
appliquer
tous
les
traitements
que
l'
on
à
vu
au
chapitre
tableaux
(
les
boucles
,
les
tris
,
etc.
.
)
.

Les
case
à
cocher
se
créent
avec
la
balise
HTML
:
<input
type="checkbox
"
value="Physique
"
name="cours[]">
Les
liste
de
selection
se
créent
avec
la
balise
HTML
:
<select
name="coursoption[
]
"
MULTIPLE
>
<option>"élément
1
de
la
liste"</option>
<option>"élément
2
de
la
liste"</option>
</select>
Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
5
)
.

Pour
compléter
notre
page
nous
allons
ajouter
une
liste
et
du
case
à
cocher
,
pour
ce
faire
,
réaliser
le
formulaire
en
HTML
(
Voir
Figure
3
)
,
pui
récupérer
sur
une
autre
page
php
les
valeurs
saisies
.

Formulaire
de
inscription
Madame
:
Mademoiselle
:
Monsieur
:
Nom
:
Prénom
:
Adresse
Courriel
:
Choix
du
cours
:
Principaux
:
Optionnels
Math
ématiques
:
Physique
:
Anglais
Espagnol
Art
plastique
Français
:
Envoyer
Figure
3
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
51
Cours
de
initiation
Php
Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
6
)
.

Soit
le
tableau
:
$List_stagiaire=array(0=>"Madame
Durant
"
,
1=>"Mademoiselle
Dupré",2=>"Alain
"
,
3=>"Monsieur
Camus
"
,
4=>"Mon
ami
Jean-Marc
"
)
;
Afficher
les
stagiaires
issus
du
tableaux
dans
une
liste
de
sélection
,
pui
à
l'
aide
de
un
bouton
permetter
à
l'
utilisateur
de
alimenter
une
seconde
liste
du
titulaire
comme
le
montre
la
figue
4
Liste
du
stagiaires
titulaires
Madame
Durant
Mademoiselle
Dupré
Alain
Monsieur
Camus
====>
Figure
4
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
52
Cours
de
initiation
Php
Validation
du
formulaires
Avec
le
formulaire
de
la
figure
3
nous
avons
permis
à
l'
utilisateur
de
saisir
les
renseignements
qu'
il
souhaitait
pui
de
les
envoyer
,
mais
lorsque
que
le
formulaire
était
incomplet
ou
que
la
saisie
était
erronée
,
aucune
vérification
étant
faîte
celui
-ci
était
quand
même
envoyer
.

Nous
allons
donc
demander
à
Php
de
faire
les
vérifications
nécessaires
avant
de
afficher
la
page
HTML
.

Rappelons
nous
que
l'
on
peut
envoyer
au
serveur
aussi
bien
une
page
HTML
que
une
page
Php
.

Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
7
)
.

Reprendre
le
formulaire
de
la
figure
3
,
après
avoir
ajouter
un
champ
pour
le
code
postal
,
un
champ
pour
la
ville
et
un
autre
pour
le
téléphone
,
ajoutez
une
fonction
dans
la
page
Php
qui
permettra
de
vérifier
que
tous
les
champs
ont
été
saisis
correctement
.

si
c'
est
le
cas
la
fonction
renverra
TRUE
et
on
affichera
le
résultat
,
sinon
la
fonction
renverra
FALSE
et
on
réaffichera
la
page
HTML
accompagnée
de
un
message
indiquant
à
l'
utilisateur
les
champs
incorrects
.

Dans
le
cas
ou
l'
on
réaffiche
la
page
HTML
pour
correction
,
on
évitera
à
l'
utilisateur
de
saisir
à
nouveau
les
Madame
:
Mademoiselle
:
Monsieur
:
Nom
:
Prénom
:
Adresse
:
Code
Postal
:
Ville
Courriel
:
Choix
du
cours
:
Optionnels
Principaux
:
Mathématiques
:
Physique
:
Anglais
Espagnol
Art
plastique
Français
:
Envoyer
Réinitialiser
Figure
5
informations
déjà
fournis.Formulaire
de
inscription
Dans
cette
exemple
,
on
envoie
une
page
Php
qui
détecte
tout
de
abord
si
il
s'
agit
de
un
premier
envoi
ou
non
en
vérifiant
la
méthode
POST
ou
GET
grâce
à
la
variable
$_SERVER['REQUEST_METHOD
'
]
.

si
c'
est
le
cas
on
exécute
la
fonction
de
vérification
qui
nous
informe
si
toutes
les
saisie
sont
correctes
ou
non
.

Ainsi
selon
le
résultat
de
la
fonction
on
affichera
la
page
de
résultat
ou
la
page
de
saisie
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
53
Cours
de
initiation
Php
Htmlentites()
et
htmlspecialchars
Ces
fonctions
jouent
un
rôle
important
dans
la
traduction
de
certains
caractères
destinés
à
être
affichés
par
le
navigateur
.

La
première
convertit
la
plupart
du
diacritiques
ou
autrement
dit
caractères
spéciaux
en
entités
de
caractères
équivalentes
.

si
nous
disons
à
la
plupart
»
,
c'
est
que
certains
caractères
tels
que
à
ou
à
oe
«
ne
sont
pas
traduits
.

La
seconde
convertit
les
caractères
ayant
un
sens
particulier
dans
les
commandes
HTML
:
Le
ET
commercial
(
&
)
devient
çamp
;
.

Les
chevrons
ou
balises
(
<
et
>
)
deviennent
respectivement
$lt
;
et
$gt
;
.

Le
guillemet
(
"
)
devient
&quot
;
si
le
second
argument
ne
vaut
pas
ENT_QUOTES
.

Exemple
<
?

php
$new
=
htmlspecialchars("<a
href='test'>Test</a>
"
,
ENT_QUOTES
)
;
ou
$new
=
htmlentities("<a
href='test'>Test</a>
"
,
ENT_QUOTES
)
;
?

à
NB
:
si
nous
n'
utilisons
pas
cette
dernière
fonction
lorsque
l'
on
récupère
les
éléments
saisis
dans
les
formulaires
nous
avons
de
forte
chance
de
avoir
un
comportement
inattendu
.

Exercice
:
(
Voir
annexe
Les
Formulaires
Exercice
8
)
.

Reprendre
le
formulaire
de
l'
exercice
6
(
Figure
4
)
,
et
à
l'
aide
de
la
fonction
htmlentities()
ou
htmlspecialchars
,
supprimez
les
problèmes
relatifs
au
saisie
du
balise
HTML
dans
les
champs
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
54
Cours
de
initiation
Php
Les
en-têtes
HTTP
Lors
de
chaque
échange
par
le
protocole
HTTP
entre
votre
navigateur
et
le
serveur
,
des
données
dîtes
de
entêtes
contenant
des
informations
sur
les
données
à
envoyer
(
dans
le
cas
de
une
requête
)
ou
envoyées
(
dans
le
cas
de
une
réponse
)
.

Les
informations
en
question
,
généralement
sur
une
page
web
ou
une
image
,
suivent
ces
en-têtes
.

Les
en-têtes
HTTP
permettent
aussi
de
effectuer
des
actions
sur
le
navigateur
comme
le
transfert
de
cookies
ou
bien
une
redirection
vers
une
autre
page
.

Ces
en-têtes
sont
les
premières
informations
envoyées
au
navigateur
(
pour
une
réponse
)
ou
au
serveur
(
dans
le
cas
de
une
requête
)
,
elles
se
présentent
sous
la
forme
:
en-tête
:
valeur
La
syntaxe
doit
être
rigoureusement
respectée
,
c'est-à-dire
que
aucun
espace
ne
doit
figurer
entre
le
nom
de
l'
en-tête
et
les
deux
points
(
:
)
.

Un
espace
doit
par
contre
figurer
après
celui
-ci
!

Php
fournit
une
fonction
permettant
de
envoyer
très
simplement
des
en-têtes
HTTP
manuellement
du
serveur
au
navigateur
(
il
s'
agit
alors
de
une
réponse
HTTP
.

La
syntaxe
de
cette
fonction
est
la
suivante
:
booléen
header(chaîne
en-tête
HTTP
)
Etant
donnée
que
les
en-têtes
HTTP
sont
les
premières
informations
envoyées
,
la
fonction
header()
doit
être
utilisée
avant
tout
envoi
de
données
HTML
au
navigateur
(
le
script
qui
la
contient
doit
donc
être
placé
avant
la
balise
<HTML>
et
avant
toute
fonction
echo(),print
ou
printf())
Voici
quelques
utilisations
possibles
de
la
fonction
header()
:
Exemple
:
Pour
rediriger
le
navigateur
vers
une
nouvelle
page
:
<
?

php
header("location
:
http://www.commentcamarche.net/
"
)
;
?

à
Exemple
:
Pour
envoyer
au
navigateur
une
image
créé
à
la
volée
(
pour
faire
un
compteur
de
statistiques
ou
bien
un
histogramme
dynamique
par
exemple
)
:
<
?

php
header("Content-Type
:
image/gif
"
)
;
//
code
générant
l'
image
imagegif($image)
;
//
envoi
de
l'
image
au
navigateur
?

à
Récupérer
les
en-têtes
de
la
requête
Alors
que
la
fonction
header()
permet
de
envoyer
des
en-têtes
HTTP
au
navigateur
,
Php
fournit
une
seconde
fonction
permettant
de
récupérer
dans
un
tableau
l'
ensemble
du
en-têtes
HTTP
envoyées
par
le
navigateur
.

Voici
la
syntaxe
de
cette
fonction
:
Tableau
getallheaders()
;
Le
tableau
retourné
par
la
fonction
contient
les
en-têtes
indexés
par
leur
nom
.

Voici
un
script
permettant
par
exemple
de
récupérer
des
en-têtes
particuliers
.

Exemple
:
<
?

php
$entetes
=
getallheaders
;
echo
$entetes["location
"
]
;
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
55
Cours
de
initiation
Php
6
.

base
de
données
Pourquoi
utiliser
une
base
données
?

Pour
stocker
du
informations
,
il
est
plus
avantageux
de
utiliser
une
base
données
relationnelle
que
un
fichier
brut
.

En
effet
les
RBDMS
(
Relational
Database
Management
Systems
)
présentent
les
atouts
suivants
:
Ils
permettent
de
accéder
au
données
plus
rapidement
que
avec
des
fichiers
bruts
;
vous
pouvez
les
interroger
très
facilement
pour
récupérer
des
ensembles
de
données
répondant
à
certains
critères
;
Ils
possèdent
des
mécanismes
intégrés
permettant
de
gérer
les
accès
simultanés
,
pour
que
le
programmeur
n'
est
pas
besoin
de
s'
en
occuper
;
Ils
permettent
de
accéder
aléatoirement
à
vos
données
;
Ils
possèdent
des
systèmes
de
privilèges
intégrés
.

L'
utilisation
de
une
base
de
données
relationnelle
vous
permet
de
répondre
rapidement
et
simplement
à
des
questions
qui
vous
aideront
à
améliorer
votre
site
.

Architecture
externe
de
une
base
de
données
web
Les
étapes
suivantes
donnent
le
cheminement
de
une
transaction
de
base
de
données
Web
typique
:
Le
navigateur
Web
de
un
utilisateur
envoie
une
requête
http
pour
une
page
Web
particulière
;
Le
serveur
reçoit
la
requête
,
récupère
le
fichier
.php
et
le
passe
au
moteur
Php
afin
que
il
soit
traité
;
Le
moteur
Php
commence
à
analyser
le
script
.

à
l'
intérieur
de
ce
script
se
trouve
une
commande
permettant
de
se
connecter
à
la
base
de
données
et
de
exécuter
une
requête
.

Php
ouvre
une
connexion
vers
le
serveur
de
la
base
de
données
et
transmet
la
requête
appropriée
;
Le
serveur
de
la
base
de
données
reçoit
la
requête
de
base
de
données
et
la
traite
,
pui
renvoie
les
résultats
au
moteur
Php
;
Le
moteur
Php
termine
l'
exécution
du
script
,
ce
qui
consiste
généralement
en
un
formatage
du
résultats
de
la
requête
en
HTML
.

Il
envoie
ensuite
le
fichier
HTML
obtenu
au
serveur
Web
.

Le
serveur
Web
transmet
la
page
HTML
au
navigateur
,
pour
que
l'
utilisateur
puisse
voir
le
résultat
.

6.1
.

Accès
au
base
de
données
Support
Php
de
connexion
au
base
de
données
Php
prend
en
charge
du
api
qui
donnent
accès
à
un
grand
nombre
de
base
de
données
,
comme
Oracle
,
Sybase
,
PostgreSQL
,
MySQL
,
etc
.

Toutefois
les
programmes
Php
ne
peuvent
toutes
les
utiliser
pour
accéder
directement
au
données
.

ODBC
(
Open
DataBase
Connectivity
,
middle
ware
de
connexion
)
est
une
Api
(
Application
Programming
Interface
)
standard
permettant
de
accéder
à
une
base
de
données
prise
en
charge
par
Php
et
de
écrire
des
applications
de
base
de
données
génériques
,
c'
est-à-dire
que
le
code
de
l'
application
fonctionne
pour
toutes
les
base
de
données
prenant
en
charge
la
norme
ODBC
.

Rudiments
du
langage
SQL
SQL
(
Strutured
Query
Language
)
est
un
langage
de
programmation
standard
permettant
de
accéder
et
de
manipuler
les
informations
de
une
base
de
données
relationnelle
.

C'
est
une
norme
ANSI
et
Iso
acceptée
par
la
plupart
de
base
de
données
relationnelles
.

Requêtes
de
définition
de
données
Ces
instructions
SQL
permettent
de
modifier
le
schéma
de
la
base
de
données
en
créant
ou
en
modifiant
des
objets
dans
cette
dernière
.

CREATE
:
permet
de
créer
une
base
de
données
ou
une
table
dans
une
base
de
données
existante
.

DROP
:
permet
de
détruire
une
base
de
données
ou
une
table
dans
une
base
de
données
.

Instructions
de
manipulation
de
données
Ces
instructions
SQL
permettent
de
modifier
le
contenu
de
une
base
de
données
.

INSERT
:
permet
de
compléter
le
lignes
de
une
table
de
base
de
données
.

REPLACE
:
permet
de
remplacer
un
ancien
enregistrement
par
un
nouveau
(
instruction
spécifique
à
la
base
MySQL
)
.

UPDATE
:
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
56
Cours
de
initiation
Php
permet
de
modifier
une
ou
plusieurs
colonnes
dans
un
enregistrement
.

DELETE
:
permet
de
supprimer
de
une
table
un
ou
plusieurs
enregistrements
correspondant
à
une
condition
particulière
.

Instruction
de
recherche
SELECT
:
permet
de
effectuer
des
recherches
dans
les
base
de
données
MySQL
à
partir
de
applications
web
.

PhpMyadmin
EasyPHP
est
livré
avec
l'
outil
"
PhpMyadmin
"
,
qui
permet
de
effectuer
toutes
les
opérations
sur
une
base
de
donnée
Mysql
de
manière
graphique
.

L'
un
du
gros
avantages
cet
outil
,
c'
est
que
i
met
a
votre
disposition
la
syntax
SQL
modifiée
pour
Php
lors
des
opérations
que
vous
effectué
.

Nous
allons
étudier
une
base
de
donnée
(
"
formation
"
)
gérant
les
stagiaires
de
un
centre
de
formation
selon
le
modèle
ci-dessous
:
Après
avoir
installer
la
base
de
données
"
formation
"
à
l'
aide
de
PhpMyadmin
,
nous
allons
voir
quelques
éléments
du
language
SQL
et
comment
se
servir
de
cette
base
avec
Php
.

Installer
la
base
formation
Il
y
a
deux
manières
de
installer
la
base
formation
,
à
l'
aide
de
PhpMyadmin
ou
via
Php
:
Avec
PhpMyadmin
:
Lancer
PhpMyadmin
avec
un
clique
droit
sur
l'
icône
EasyPHP
,
pui
configuration
et
enfin
PhpMyadmin
.

Importer
le
fichier
SQL
de
création
de
la
base
Stagiaires
(
formation.sql
)
en
cliquant
sur
l'
icône
"
sql
"
de
la
fenêtre
de
gauche
pui
sur
"
importe
les
fichiers
"
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
57
Cours
de
initiation
Php
Avec
Php
:
Le
fichier
create_base.php
contient
toutes
les
commandes
pour
créer
la
base
.

Ainsi
on
pourra
créer
la
base
en
appelant
le
script
par
l'
url
:
http://127.0.0.1/coursphp/exercice/create_base.php
Exemple
:
Nous
étudirons
le
détails
du
instruction
dans
le
chapitre
suivant
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
58
Cours
de
initiation
Php
6.2
.

base
de
données
MySQL
MySQL
est
un
serveur
de
base
de
données
réduit
,
compact
et
convivial
.

Il
est
disponible
pour
les
platesformes
UNIX
,
Windows
NTM
,
2000
et
Windows
95/98
.

Il
est
inutile
de
déclarer
quoi
que
se
soit
pour
utiliser
Mysql
avec
Php4
,
puisque
que
Php4
supporte
nativement
cette
base
de
données
.

Pour
PHP5
SqlLite
à
pris
le
relais
,
il
faut
donc
charger
le
module
Mysql
.

Chargement
du
module
MySql
avec
PHP5
:
Modifier
le
fichier
de
configuration
"
php.ini
"
dans
la
section
Extensions
ajouter
la
ligne
suivante
:
extension=php_mysql.dll
N'
oubliez
pas
de
redémarrer
le
serveur
http
pour
que
les
modifications
soit
prises
en
compte
.

Accès
à
la
base
de
données
MySQL
à
partir
du
Web
avec
Php
Dans
tous
les
scripts
utilisés
pour
accéder
à
une
base
de
données
à
partir
du
Web
,
il
faut
respecter
les
étapes
suivantes
:
établir
une
connexion
vers
la
base
de
données
appropriée
;
envoyer
une
requête
vers
la
base
de
données
;
récupérer
et
traiter
le
résultat
pour
le
présenter
à
l'
utilisateur
;
fermer
la
connexion
.

Etablir
une
connexion
La
fonction
mysql_connect()
:
vous
permet
de
établir
une
connexion
.

int
mysql_connect([string
nom_serveur
]
,
[
string
nom_utilisateur
]
,
[
string
mot_passe
]
)
;
Tous
les
arguments
sont
optionnels
.

si
ils
ne
sont
pas
précisés
,
la
fonction
se
servira
des
valeurs
par
défaut
:
"
localhost
"
pour
l'
hôte
,
le
nom
de
l'
utilisateur
sous
lequel
Php
est
exécuté
,
et
aucun
mot
de
passe
.

Cette
fonction
renvoie
un
identificateur
de
lien
vers
votre
base
de
données
MySQL
(
réutilisé
par
la
suite
)
en
cas
de
succès
,
et
false
en
cas
de
échec
.

Exemple
:
<
?

php
$db
=
mysql_connect("localhost
"
,
"
root
"
,
"
"
)
;
//
l'
identificateur
de
lien
est
enregistré
dans
$db
?

>
de
la
même
manière
,
la
fonction
mysql_pconnect()
permet
de
établir
une
connexion
,
mais
renvoie
une
connexion
persistante
vers
la
base
de
données
,
alors
que
la
connexion
normale
est
fermée
lorsque
l'
exécution
du
script
est
terminée
.

Exercice
:
(
Voir
annexe
Etablir
une
connexion
Exercice
1
)
.

Créer
un
fichier
php
permettant
de
ouvrir
unr
connection
avec
MySql
,
avec
comme
paramètres
:
Nom
de
l'
utilisateur
:
"
stagiaire
"
Mot
de
passe
:
"
stagiaire
"
Choisir
une
base
de
données
existante
La
fonction
mysql_select_db()
:
vous
permet
de
sélectionner
une
base
de
données
existante
.

int
mysql_select_db(
string
nom_base
,
[
int
identificateur_connexion
]
)
;
L'
argument
identificateur_connexion
,
spécifiant
le
lien
vers
la
base
de
données
,
est
optionnel
:
par
défaut
le
dernier
lien
ouvert
sera
utilisé
,
et
si
aucun
lien
n'
a
été
ouvert
,
le
lien
par
défaut
sera
ouvert
comme
si
vous
aviez
appelé
mysql_connect(
)
.

Exercice
:
(
Voir
Choisir
une
base
de
données
existante
Exercice
1
)
.

Créer
un
fichier
Php
permettant
de
établir
une
connexion
avec
la
base
formation
.
,
avec
comme
paramètres
:
Nom
de
l'
utilisateur
:
"
stagiaire
"
Mot
de
passe
:
"
stagiaire
"
Exercice
:
(
Voir
Choisir
une
base
de
données
existante
Exercice
2
)
.

Créer
le
fichier
"
connect.inc
"
qui
servira
autant
que
de
besoin
sous
forme
de
fichier
inclus
à
se
connecter
à
la
base
formation
les
paramètres
de
connections
sont
identiques
au
exercices
précédents
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
59
Cours
de
initiation
Php
Déconnexion
à
la
base
de
données
La
fonction
mysql_close()
:
vous
permet
de
vous
déconnecter
de
la
base
de
données
:
boolean
mysql_close([mixed
identificateur_connexion
]
)
;
Attention
:
si
la
connexion
est
persistante
,
la
fonction
mysql_close()
ne
permet
pas
de
la
fermer
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
60
Cours
de
initiation
Php
Envoyer
une
requête
vers
la
base
de
données
La
fonction
mysql_query()
:
vous
permet
de
envoyer
une
requête
la
base
de
données
.

La
requête
que
vous
voulez
exécuter
peut
être
configurée
avant
l'
appel
de
cette
fonction
ou
dans
la
fonction
:
Structure
de
une
requête
SQL
$query
=
“
…
requête
SQL
…
”
;
$resultat
=
mysql_query
(
$query,[identificateur_connexion
]
)
;
ou
$resultat
=
mysql_query
=
“
…
requête
SQL
…”,[identificateur_connexion
]
)
;
La
fonction
mysql_db_query
(
)
:
vous
pouvez
aussi
appeler
la
fonction
mysql_db_query()
qui
permet
de
spécifier
la
base
de
données
que
vous
souhaitez
interroger
:
mixed
mysql_db_query(
string
nom_base
,
string
requete
,
[
mixed
identificateur_connexion
]
)
;
En
cas
de
succès
,
ces
deux
fonctions
renvoient
:
•
dans
le
cas
de
une
requête
de
interrogation
,
un
identificateur
de
résultat
qui
permet
de
récupérer
les
résultats
du
requêtes
,
•
dans
le
cas
d'
autres
requêtes
,
1
.

En
cas
de
échec
elles
renvoient
false
.

L'
identificateur
de
résultat
sert
de
clé
pour
accéder
à
zéro
,
une
ou
plusieurs
lignes
renvoyées
par
la
requête
.

Plusieurs
fonctions
permettent
de
récupérer
ces
résultats
à
partir
de
cet
identificateur
.

Exercice
:
(
Voir
annexe
Envoyer
une
requête
vers
la
base
de
données
,
exercice
1
)
.

Créer
une
page
Php
qui
,
à
l'
aide
du
fichier
connect.inc
,
nous
permettra
de
exécuter
une
requête
interrogeant
la
table
du
stagiaires
:
Php
dispose
de
plusieurs
fonctions
permettant
de
récupérer
les
valeurs
de
une
table
.

Ces
fonctions
récupèrent
les
noms
de
champs
et
leur
valeur
et
les
stocks
dans
une
variable
tableau
passée
en
paramètre
.

Mysql_fetch_array()
array
mysql_fetch_array
(
resource
result_identifier
[
,
int
result_type
]
)
Retourne
une
ligne
de
résultat
sous
la
forme
de
un
tableau
associatif
.

C'
est
une
version
étendue
de
mysql_fetch_row(
)
.

En
plus
de
enregistrer
les
données
sous
forme
de
un
tableau
à
indice
numérique
,
elle
peut
aussi
les
enregistrer
dans
un
tableau
associatif
,
en
utilisant
les
noms
du
champs
comme
indices
Autrement
dit
,
vous
pouvez
récupérer
les
valeurs
,
en
indiquant
soit
l'
indice
numérique
soit
le
nom
de
champ
de
la
table
Exemple
:
<
?

Php
$resultat
=
mysql_query("select
*
from
personne",$conn
)
;
while
(
$row
=
mysql_fetch_array
($resultat))
{
echo
"
<br>".$row["num_personne
"
]
.
"

"
;
echo
$row["nom
"
]
.
"

"
;
echo
$row["prenom
"
]
.
"

<br>
"
;
}
?

à
mysql_fetch_row()
array
mysql_fetch_row
(
resource
result_identifier
)
retourne
un
tableau
énuméré
qui
correspond
à
la
ligne
demandée
,
ou
FALSE
si
il
ne
reste
plus
de
ligne
.

vous
pouvez
récupérer
les
valeurs
par
l'
indice
numérique
.

Exemple
:
<
?

Php
$resultat
=
mysql_query("select
*
from
personne",$conn
)
;
while
(
$row
=
mysql_fetch_array
($resultat))
{
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
61
Cours
de
initiation
Php
echo
"
<br>".$row[0
]
.
"

"
;
echo
$row[1
]
.
"

"
;
echo
$row[2
]
.
"

<br>
"
;
}
?

à
mysql_fetch_assoc()
array
mysql_fetch_assoc
(
resource
result_identifier
)
retourne
un
tableau
associatif
qui
contient
la
ligne
lue
,
ou
bien
FALSE
,
si
il
ne
reste
plus
de
lignes
.

si
vous
avez
besoin
de
indices
numériques
,
préférez
mysql_fetch_array()
Autrement
dit
,
du
fait
que
il
n'
y
a
pas
de
indice
numériques
,
si
plusieurs
colonnes
portent
le
même
nom
,
la
dernière
aura
la
priorité
,
les
autres
ne
serons
pas
récupérées
.

Exemple
:
<
?

Php
$resultat
=
mysql_query("select
*
from
personne",$conn
)
;
while
(
$row
=
mysql_fetch_assoc($resultat))
{
echo
"
<br>".$row["num_personne
"
]
.
"

"
;
echo
$row["nom
"
]
.
"

"
;
echo
$row["prenom
"
]
.
"

<br>
"
;
}
?

à
Bien
que
ces
trois
fonctions
soit
valides
,
nous
utiliserons
autant
que
faire
se
peut
la
fonction
mysql_fetch_array()
,
qui
apporte
un
confort
de
utilisation
sans
pour
autant
être
moins
performante
que
les
autres
.

mysql_free_result
int
mysql_free_result
(
resource
result_identifier
)
mysql_free_result()
efface
le
résultat
de
la
mémoire
.

Cette
fonction
n'
est
à
appeler
que
si
vous
avez
peur
de
utiliser
trop
de
mémoire
durant
l'
exécution
de
votre
script
.

Toute
la
mémoire
associée
à
l'
identifiant
de
résultat
sera
automatiquement
libérée
,
sans
oublier
,
que
toutes
les
traitements
se
terminent
avec
la
fin
du
script
.

Exercice
:
(
Voir
annexe
Envoyer
une
requête
vers
la
base
de
données
,
exercice
2
)
.

Créer
une
page
affichant
la
listes
du
stagiaires
avec
leur
adresse
dessous
,
en
interrogeant
la
table
stagiaire
de
la
base
formation
,
en
utilisant
les
fonction
:
mysql_fetch_array()
,
mysql_fetch_row()
pui
mysql_fetch_assoc(
)
.

Exercice
:
(
Voir
annexe
Envoyer
une
requête
vers
la
base
de
données
,
exercice
3
)
.

Créer
une
page
affichant
la
listes
du
stagiaires
avec
leur
adresse
dessous
,
en
interrogeant
la
table
stagiaire
de
la
base
formation
,
en
utilisant
mysql_fetch_array()
,
et
présenter
le
resultat
sous
forme
de
tableau
HTML
(
balise
<table>
etc
…
)
,
comme
le
montre
la
figure
ci-dessous
(
Figure
6
)
.

Liste
du
stagiaires
N°
de
stagiaire
N°
de
Téléphone
Nom
et
prénom
Adresse
Code
Postal
1
Madame
DURANT
21
,
rue
Georges
Brassens
94000
Creteil
01
42
44
12
30
2
Mademoiselle
Dupré
54
,
rue
Jacques
Brel
75000
PARIS
01
14
42
32
40
3
Père
Alain
13
,
rue
du
Saint
pères
93000
Saint-Denis
01
52
64
72
80
4
Monsieur
Camus
Albert
79
,
rue
du
scribe
92160
Antony
5
Madame
Leblanc
Jea
n-
rue
des
blanc
Marc
manteaux
91000
Montfermeil
01
02
14
22
40
Ville
01
62
73
82
90
Figure
6
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
62
Cours
de
initiation
Php
Exercice
:
(
Voir
annexe
Envoyer
une
requête
vers
la
base
de
données
,
exercice
4
)
.

Reprendre
le
formulaire
de
l'
exercice
7
du
paragraphe
"
Les
Formulaires
"
et
remplacer
les
contrôles
checkbox
du
cours
principaux
à
l'
aide
du
informations
recueillis
dans
la
table
cours
de
la
base
formation
pui
alimenter
la
liste
de
sélection
du
cours
optionnels
à
partir
de
cette
même
table
.

Etapes
de
construction
:
Création
du
fichier
"
"
C'
est
une
page
en
HTML
chargé
uniquement
de
afficher
les
champs
de
saisie
sous
forme
de
tableau
HTML
(
voire
figure
5
)
.

Création
du
fichier
"
"
Chargé
de
vérifie
si
la
méthode
POST
à
été
utiliser
,
si
oui
on
vérifie
la
validité
du
formulaire
et
on
affiche
le
resultat
.

Création
du
fichier
"
"
Effectue
les
contrôles
de
la
saisie
du
formulaire
de
inscription
en
Php
.

Création
du
fichier
"
chk_stagiaires.inc
"
Création
du
contrôles
checkbox
à
partir
du
données
de
la
base
.

Création
du
fichier
"
lst_stagiaires.inc
"
Alimentation
de
la
liste
de
sélection
du
cours
optionnels
à
partir
du
données
de
la
base
.

Création
du
fichier
"
"
Construit
et
met
en
forme
la
page
de
résultat
selon
les
informations
issues
de
la
base
de
données
et
de
la
saisi
de
l'
utilisateur
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
63
Cours
de
initiation
Php
Rechercher
des
données
dans
la
base
La
commande
SQL
"
SELECT
"
comporte
trois
clause
qui
vont
nous
servir
pour
rechercher
et
ordonner
les
données
:
La
clause
"
WHERE
"
,
la
clause
"
ORER
By
"
et
la
clause
"
LIMIT
"
.

La
clause
"
WHERE
"
:
Ajoute
une
condition
qui
s'
exprime
par
comparaison
entre
le
contenu
de
un
champ
et
une
constante
ou
variable
.

La
condition
peut
être
associée
avec
un
opérateur
AND
(
et
)
ou
OR
(
ou
)
et
on
peut
inverser
la
condition
avec
l'
opérateur
NOT
(
pas
)
.

Pour
indiquer
la
différence
,
on
à
le
choix
entre
l'
opérateur
habituel
"
!

=
"
et
l'
opérateur
"

"
.

Le
mot
clé
Like
recherche
une
correspondance
floue
de
une
chaîne
de
caractères
.

Complété
par
l'
un
du
deux
caractère
"
_
"
ou
"
%
"
il
autorise
différente
combinaisons
:
Exemple
:
<
?

php
$Sql="SELECT
*
from
livres
where
auteur
=
'
Leon
'
"
;
//recherche
les
livres
dont
le
nom
de
l'
auteur
égal
à
"
Leon
"
//et
trouvera
tous
les
livres
écrits
par
l'
auteur
Leon
$Sql="SELECT
*
from
livres
where
auteur
=
'
%Leon
'
"
;
//recherche
les
livres
dont
le
nom
de
l'
auteur
commence
par
"
Leon
"
//et
trouvera
tous
les
livres
écrits
par
l'
auteur
"
Dona
Leon
"
$Sql="SELECT
*
from
livres
where
auteur
=
'
%on
%
'
"
;
//recherche
les
livres
dont
le
nom
de
l'
auteur
contient
"
Leon
"
//et
trouvera
tous
les
livres
écrits
par
les
auteurs
"
Dona
Leon
"
et
//"Edward
Marston
"
$Sql="SELECT
*
from
livres
where
auteur
=
e
_o
%
'
"
;
//recherche
les
livres
dont
le
titre
dont
la
deuxième
lettre
sera
//égal
à
"
o
"
//et
trouvera
tous
les
titres
"
poésie
"
et
"
Noblesse
oblige
"
?

à
La
clause
"
ORER
By
"
:
spécifie
le
nom
de
champ
sur
lequel
portera
de
tri
du
résultat
.

Les
mots
clés
"
ASC
"
et
"
DESC
"
précisent
respectivement
l'
ordre
croissant
et
décroissant
.

Par
défaut
le
tri
aura
lieu
dans
l'
ordre
croissant
.

Exemple
:
<
?

php
$Sql="SELECT
*
from
livres
ORDER
By
auteur
desc
"
;
//Affiche
tous
les
livres
dans
l'
ordre
décroissant
.

?

à
La
clause
"
LIMIT
"
:
Cette
clause
indique
les
limites
exprimées
en
numéros
de
ligne
du
enregistrements
à
traiter
.

si
il
ne
figure
qu'
une
seule
valeur
,
cela
signifie
que
la
table
sera
traitée
à
partir
de
la
valeur
indiquée
.

si
il
y
a
deux
limites
séparées
par
une
virgule
,
la
table
sera
traitée
entre
les
valeurs
indiquées
,
bornes
comprises
.

Exemple
:
<
?

php
$Sql="SELECT
*
from
livres
LIMIT
3,7
"
;
?

à
Nous
avons
vu
au
paragraphe
"
Envoyer
une
requête
vers
la
base
de
données
"
comment
interroger
une
base
de
données
.

Ayant
vu
comment
une
commande
SQL
se
compose
,
nous
allons
manipuler
les
chaînes
de
caractères
,
issues
du
éléments
saisies
par
l'
utilisateur
,
pour
construire
les
clauses
"
where
"
,
"
order
by
"
et
"
limit
"
,
et
après
les
avoir
ajoutés
a
la
suite
de
notre
requête
SQL
nous
l'
enverrons
au
serveur
.

Exemple
:
<
?

Php
$Sql="SELECT
*
from
livres
where
auteur
=
'
Leon
'
ORDER
By
auteur
DESC
LIMIT
3,7
"
;
//Recherche
les
5
premier
livres
dont
le
nom
de
l'
auteur
égal
à
//"Leon
"
et
les
affiche
dans
l'
audre
alphabétique
décroissant
des
auteurs
.

?

à
Exercice
:
(
Voir
annexe
Rechercher
des
données
dans
la
base
,
exercice
1
)
.

Reproduire
le
formulaire
ci-dessous
(
Figure
7
)
et
construir
une
requête
SQL
afin
de
interroger
la
table
du
stagiaires
,
et
afficher
le
résultat
sur
une
autre
page
(
Figure
8
)
.

Etapes
:
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
64
Cours
de
initiation
Php
Création
du
fichier
"
Recherche.php
"
Chargé
de
vérifie
si
la
méthode
POST
à
été
utiliser
,
si
oui
on
vérifie
la
validité
du
formulaire
et
on
appelle
la
page
qui
construit
la
requête
SQL
,
si
non
on
affiche
les
critères
de
recherche
Création
du
fichier
"
Recherche.htm
"
(
Voir
Figure
7
)
C'
est
une
page
en
HTML
chargé
uniquement
de
afficher
les
critères
de
recherche
et
de
indiquer
le
formulaire
à
appeler
après
avoir
cliquer
sur
"
lancer
la
recherche
"
.

Création
du
fichier
"
Construction_Where.inc
"
Cette
page
récupère
les
éléments
saisies
par
l'
utilisateur
et
construit
la
requête
SQL
,
pui
elles
appel
la
page
de
resultat
.

Création
du
fichier
"
Resultat.inc
"
Interroge
la
base
de
données
et
construit
les
balise
et
données
necessaire
à
l'
affichage
du
résultat
.

Création
du
fichier
"
Resultat.htm
"
(
Figure
8
)
Met
en
page
et
affiche
le
résultat
sous
forme
de
tableau
HTML
Ainsi
construit
,
on
pourra
modifier
notre
clause
"
where
"
,
sans
avoir
besoin
de
modifier
notre
page
de
résultat
et
vis
versa
.

Formulaire
de
recherche
La
recherche
s'
effectue
sur
3
critères
:
nom
,
prénom
et
code
postal
.

Le
champ
"
nom
"
doit
obligatoirement
être
rempli
au
moins
partiellement
,
les
autres
champs
sont
facultatifs
.

Le
résultat
apparaît
sous
la
forme
de
une
liste
.

Nom
:
Contient
Prénom
:
Contient
Code
Postal
:
Figure
7
Résultat
de
la
recherche
Nà
Nom
Prénom
1
DURANT
2
Dupré
3
Alain
4
Camus
Albert
5
Leblanc
Jean-Marc
Adresse
Téléphone
Mél
21
,
rue
Georges
Brassens
94000
Creteil
54
,
rue
Jacques
Brel
75000
PARIS
13
,
rue
du
Saint
p
93000
Saint-Denis
79
,
rue
du
scribe
92160
Antony
rue
des
blanc
manteaux
91000
Montfermeil
01
42
44
12
30
durant@free.fr
01
14
42
32
40
dupre@wanadoo.fr
01
52
64
72
80
alain@htomail.com
01
62
73
82
90
camus@noos.fr
01
02
14
22
40
jeanmarc.leblanc@free.fr
Figure
8
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
65
Cours
de
initiation
Php
Naviguer
dans
les
données
de
la
base
Pour
naviguer
dans
les
données
de
la
base
,
nous
nous
servirons
de
la
clause
"
LIMIT
"
.

Le
premier
paramètre
de
cette
clause
nous
permet
de
indiquer
la
ligne
ou
débutera
la
recherche
,
et
le
second
le
nombre
de
enregistrements
à
afficher
sur
chaque
page
.

Ainsi
la
première
page
affichera
les
5
premiers
enregistrements
et
en
rappellant
la
page
,
les
5
suivants
ainsi
de
suite
,
jusque
à
la
fin
du
résultat
de
la
recherche
.

Exercice
:
(
Voir
annexe
Naviguer
dans
les
données
de
la
base
,
exercice
)
.

Reproduire
les
formulaires
ci-dessous
(
Figure11
)
et
construir
une
requête
SQL
afin
de
interroger
la
table
du
stagiaires
,
afficher
le
résultat
sur
une
autre
page
en
limitant
l'
affichage
a
2
enregistrements
et
permetter
à
l'
utilisateur
de
naviguer
dans
le
résultat
.

Dans
la
page
de
résultat
l'
utilisateur
pourra
en
cliquant
sur
le
nom
du
stagiaire
ou
en
double
cliquant
sur
la
ligne
consulter
la
fiche
du
cours
suivis
par
le
stagiaire
(
Fiche
de
renseignements
)
.

Ce
formulaire
sera
réaliser
en
utilisant
uniquement
la
méthode
POST
Etapes
:
Création
du
fichier
"
recherche_post.php
"
:
Chargé
de
vérifie
si
la
méthode
POST
à
été
utiliser
,
si
oui
on
vérifie
la
validité
du
formulaire
et
on
appelle
la
page
qui
construit
la
requête
SQL
,
si
non
on
affiche
les
critères
de
recherche
Création
du
fichier
"
rech_validation.inc
"
:
Effectue
les
contrôles
de
la
saisie
du
formulaire
de
recherche
.

Création
du
fichier
"
recherche_post.htm
"
:
C'
est
une
page
en
HTML
chargé
uniquement
de
afficher
les
champs
de
saisie
du
critères
de
recherche
sous
forme
de
tableau
HTML
(
voire
figure
11
)
.

Création
du
fichier
"
resultat_post.htm
"
:
C'
est
une
page
en
HTML
chargé
uniquement
de
afficher
le
résultat
de
la
requête
sous
forme
de
tableau
HTML
(
voire
figure
12
)
.

Création
du
fichier
"
Construction_post_Where.inc
"
:
Cette
page
récupère
les
éléments
saisis
par
l'
utilisateur
et
construit
la
requête
SQL
,
pui
elles
appel
la
page
Construction_post_Limit.inc
.

Création
du
fichier
"
Construction_post_Limit.inc
"
:
Cette
page
construit
la
clause
limit
et
appel
la
page
resultat_post.inc
.

Création
du
fichier
"
resultat_post.inc
"
:
Cette
page
interroge
la
base
de
données
à
l'
aide
du
clauses
"
where
"
et
"
limit
"
créées
précédement
,
vérifie
et
formate
les
données
dans
un
tableau
html
pui
appel
la
page
resultat_post_html
.

Création
du
fichier
"
navigation_post.inc
"
:
Cette
page
sera
incluse
par
le
fichier
resultat_post_html
et
servira
a
afficher
la
barre
de
navigation
.

et
enfin
création
du
fichier
"
navigation.js
"
ce
fichier
écrit
en
javascript
nous
aidera
à
naviguer
dans
la
table
,
en
incrémentant
le
n°
de
page
.

En
réalité
nous
n'
avons
pas
besoin
de
créer
autant
de
fichiers
,
nous
pourrions
bien
entendu
les
regrouper
par
type
,
mais
afin
de
bien
comprendre
,
chaque
étapes
à
été
décomposé
en
fichier
.

Ainsi
construit
,
on
pourra
modifier
notre
clause
"
where
"
et
"
limit
"
,
sans
avoir
besoin
de
modifier
notre
page
de
résultat
et
vis
versa
.

Formulaire
de
recherche
La
recherche
s'
effectue
sur
3
critères
:
nom
,
prénom
et
code
postal
.

Le
champ
"
nom
"
doit
obligatoirement
être
rempli
au
moins
partiellement
;
les
autres
champs
sont
facultatifs
.

Le
résultat
apparaît
sous
la
forme
de
une
liste
.

La
fiche
du
cours
suivis
par
le
stagiaire
recherchée
est
accessible
en
cliquant
sur
son
nom
ou
en
double
cliquant
sur
la
ligne
correspondante
.

Nom
:
Contient
Prénom
:
Contient
Code
Postal
:
Figure
11
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
66
Cours
de
initiation
Php
Résultat
de
la
recherche
Nà
Nom
Prénom
1
DURANT
2
Dupré
3
Alain
4
Camus
Albert
5
Leblanc
Jean-Marc
Première
page
Adresse
Téléphone
Mél
21
,
rue
Georges
Brassens
94000
Creteil
54
,
rue
Jacques
Brel
75000
PARIS
13
,
rue
du
Saint
p
93000
Saint-Denis
79
,
rue
du
scribe
92160
Antony
rue
des
blanc
manteaux
91000
Montfermeil
01
42
44
12
30
durant@free.fr
01
14
42
32
40
dupre@wanadoo.fr
01
52
64
72
80
alain@htomail.com
01
62
73
82
90
camus@noos.fr
01
02
14
22
40
jeanmarc.leblanc@free.fr
page
Précedente
page
suivante
//3
Dernière
page
Figure
12
Fiche
de
renseignements
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
67
Cours
de
initiation
Php
Insérer
des
données
dans
la
base
INSERT
:
est
une
instruction
SQL
qui
permet
de
ajouter
des
lignes
de
données
(
enregistrements
)
dans
une
table
de
base
de
données
.

Exemple
:
<
?

php
$Sql="insert
into
livres
(
Num
,
auteur
,
date
)
value('1
'
,
e
Dona
Leon
'
,
e
2005
'
)
"
;
?

à
Exercice
:
(
Voir
annexe
Insérer
des
données
dans
la
base
de
données
)
.

Reprendre
le
formulaire
de
inscription
(
Figure
5
)
et
lorsque
l'
utilisateur
envoi
la
page
,
insérer
les
données
dans
la
base
addslashes()
et
stripslashes
(
)
Lors
du
opérations
de
insertion
de
modification
ou
de
sélection
de
données
dans
une
base
certains
caractères
doivent
faire
l'
objet
de
un
traitement
particulier
afin
de
être
reconnu
correctement
.

La
fonction
addslashes()
,
après
avoir
échappé
tous
les
caractères
qui
doivent
l'
être
,
retourne
la
chaîne
de
caractère
pouvant
être
utilisé
dans
une
requête
de
base
de
données
.

Ces
caractères
sont
les
guillemets
simples
(
'
)
,
guillemets
doubles
(
"
)
,
anti-slash
(
\
)
et
NUL
(
le
caractère
NULL
)
.

stripslashes()
retourne
une
chaîne
dont
les
anti-slash
on
été
supprimé
.

Les
doubles
anti-slash
sont
réduits
en
un
seul
anti-slash
.

stripslashes()
est
la
fonction
inverse
de
addslashes(
)
.

Exercice
:
(
Voir
annexe
Insérer
des
données
dans
la
base
de
données
Exercice
2
)
.

Reprendre
le
formulaire
de
inscription
de
l'
exercice
précédent
et
,
ajouter
les
fonctions
addslashes()
et
stripslashes()
,
pui
vérifier
en
insérant
une
adresse
comportant
une
apostrophe
.

Modifier
des
données
dans
la
base
UPDATE
:
est
une
instruction
SQL
qui
permet
de
modifier
une
ou
plusieurs
colonnes
dans
un
enregistrement
.

Exemple
:
<
?

php
$Sql="update
livres
SET
Num
=
1
,
auteur
=
'
Dona
Leon
'
)
"
;
?

à
Exercice
6
:
(
Voir
annexe
Modifier
des
données
dans
la
base
)
Reprendre
le
formulaire
de
inscription
et
ajouter
un
bouton
modifier
qui
permettra
a
l'
utilisateur
de
modifier
les
données
dans
la
base
,
comme
le
montre
la
figue
ci-dessous
Etape
de
construction
du
formulaire
:
Création
du
fichier
"
db_modification.html
"
en
HTML
C'
est
une
page
en
HTML
chargé
uniquement
de
afficher
les
champs
de
saisie
sous
forme
de
tableau
HTML
(
voire
figure
5
)
.

Création
du
fichier
"
validation1.inc
"
Effectue
les
contrôles
de
la
saisie
du
formulaire
de
inscription
sur
le
serveur
avec
Php
.

Création
du
fichier
"
db_validation.js
"
Effectue
les
contrôles
de
la
saisie
du
formulaire
de
incription
sur
le
client
avec
JavaScript
.

Création
du
fichier
"
db_modification.php
"
Chargé
de
vérifie
si
la
méthode
POST
à
été
utiliser
,
si
oui
on
vérifie
la
validité
du
formulaire
et
on
et
appel
l'
action
choisi
par
l'
utilisateur
.

Création
du
fichier
"
Connection.inc
"
Ouvre
une
connection
à
la
base
de
données
.

Création
du
fichier
"
charge_stagiaire.inc
"
Interroge
la
base
et
récupère
les
données
.

Création
du
fichier
"
get_msg.inc
"
Fonction
de
mise
en
forme
du
message
de
erreurs
personalisés
.

Création
du
fichier
"
verif_mail.inc
"
Fonction
de
contrôl
de
validité
de
l'
adresse
mèl
.

Création
du
fichier
"
db_update_stagiaire.inc
"
Met
à
jour
la
base
de
données
avec
les
éléments
saisis
par
l'
utilisateur
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
68
Cours
de
initiation
Php
Fiche
de
inscription
Nà
Stagiaire
:
1
Madame
:
Nom
:
Mademoiselle
:
Monsieur
:
DURANT
Prénom
:
21
,
rue
Georges
Brassens
Adresse
Code
Postal
94000
Télépho
ne
:
01
42
44
12
30
Courriel
:
durant@free.fr
Ville
Creteil
Choix
du
cours
:
Principaux
:
Optionnels
Mathém
atique
:
Physique
:
Anglais
Espagno
l
Art
plastique
Français
:
Ajouter
Modifier
Annuler
Figure
9
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
69
Cours
de
initiation
Php
Supprimer
des
données
dans
la
base
DELETE
:
est
une
instruction
SQL
qui
permet
de
supprimer
de
une
table
un
ou
plusieurs
enregistrements
correspondant
à
une
condition
particulière
.

<
?

php
$Sql
=
"
DELETE
FROM
livres
WHERE
num=1
"
;
?

à
Attention
:
Lors
de
la
suppression
de
enregistrements
,
de
vérifier
avec
précaution
que
la
condition
de
suppression
soit
bien
prise
en
compte
,
sinon
vous
risquez
de
effacer
tous
les
enregistrements
Exercice
:
(
Voir
annexe
Supprimer
des
données
dans
la
base
)
Reprendre
le
formulaire
de
l'
exemple
ci-dessous
et
permettez
a
l'
utilisateur
de
supprimer
les
données
dans
la
base
Fiche
de
inscription
Nà
Stagiaire
:
1
Madame
:
Mademoiselle
:
Monsieur
:
DURANT
Nom
:
Prénom
:
21
,
rue
Georges
Brassens
Adresse
Code
Postal
94000
Téléphone
:
01
42
44
12
30
Courriel
:
durant@free.fr
Ville
Creteil
Choix
du
cours
:
Principaux
:
Optionnels
Mathématique
:
Physique
:
Anglais
Espagnol
Art
plastique
Français
:
Ajouter
Modifier
Supprimer
Annuler
Figure
10
Les
dates
et
heures
Php
dispose
de
fonctions
qui
vous
permettent
de
manipuler
la
date
et
l'
heure
du
serveur
qui
exécute
Php
.

vous
pouvez
utiliser
ces
fonctions
pour
formater
la
date
et
l'
heure
de
nombreuses
façons
.

La
fonction
mktime()
int
mktime
(
[
int
hour
[
,
int
minute
[
,
int
second
[
,
int
month
[
,
int
day
[
,
int
year
[
,
int
is_dst
]
]
]
]
]
]
]
)
.

mktime()
retourne
un
timestamp
UNIX
correspondant
au
arguments
fournis
.

Ce
timestamp
est
un
entier
long
,
contenant
le
nombre
de
secondes
entre
le
début
de
l'
époque
UNIX
(
1er
Janvier
1970
00:00:00
GMT
)
et
le
temps
spécifié
.

Les
arguments
peuvent
être
omis
,
de
droite
à
gauche
,
et
tous
les
arguments
manquants
sont
utilisés
avec
la
valeur
courante
de
l'
heure
et
du
jour
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
70
Cours
de
initiation
Php
La
fonction
mktime()
est
pratique
pour
faire
des
calculs
de
dates
et
du
validations
,
car
elle
va
automatiquement
corriger
les
valeurs
invalides
.

Exemple
:
<
?

php
$jours
à
e
29
'
;
$mois
=
e
12
'
;
$annee=
'
2005
'
;
echo
mktime(0,0,0,$mois,$jours,$annee)
;
//Affiche
1135810800
?

à
La
fonction
date()
string
date(string
format[,int
timestamp
]
)
;
La
fonction
date()
prend
deux
paramètres
.

Le
premier
paramètre
est
une
chaîne
spécifiant
un
code
de
format
,
le
second
est
optionnel
et
est
un
horodatage
Unix
.

En
l'
absence
du
second
paramètre
,
la
fonction
date()
traite
la
date
et
l'
heure
courante
.

Elle
renvoie
une
chaîne
formatée
représentant
la
date
appropriée
.

Exemple
:
<
?

php
//Date
en
anglais
echo
date("jS
f
y
"
)
;
//affiche
22nd
may
2005
//Date
en
français
echo
date('d/m/Y')
;
//affiche
22/05/2005
//Date
fournie
par
mktime
en
français
$jours
=
e
29
'
;
$mois=
'
12
'
;
$annee=
'
2005
'
;
echo
date('d/m/Y
'
,
mktime(0,0,0,$mois,$jours,$annee))
;
//Affiche
29/12/2005
?

à
Le
tableau
suivant
donne
les
codes
de
format
reconnus
par
la
fonction
date(
)
.

Code
a
à
b
d
d
f
g
g
h
h
Description
Matin
ou
après-midi
,
représenté
sous
la
forme
de
deux
caractères
en
minuscules
:
respectivement
“
am
”
et
“
pm
”
.

Matin
ou
après-midi
,
représenté
sous
la
forme
de
deux
caractères
en
majuscules
:
respectivement
à
am
”
et
“
pm
”
.

Heure
Internet
Swtach
,
qui
constitue
un
système
de
temps
universel
.

Jour
du
mois
,
sous
la
forme
de
un
nombre
à
deux
chiffres
,
éventuellement
préfixé
par
un
zéro
.

La
plage
autorisée
s'
étend
de
“
01
”
à
“
31
”
.

Jour
de
la
semaine
en
anglais
,
dans
un
format
textuel
abrégé
en
trois
lettres
:
par
exemple
à
Fri
”
pour
Vendredi
.

mois
de
l'
année
en
anglais
,
au
format
textuel
,
version
longue
.

La
plage
autorisée
va
de
“
January
”
à
“
December
”
.

Heure
du
jour
,
exprimée
dans
le
système
à
12
h
,
sans
zéro
initial
.

La
plage
autorisée
s'
étend
de
“
1
”
à
“
12
”
.

Heure
du
jour
,
exprimée
dans
le
système
à
24
h
,
sans
zéro
initial
.

La
plage
autorisée
s'
étend
de
“
0
”
à
“
23
”
.

Heure
du
jour
,
exprimée
dans
le
système
à
12
h
,
si
nécessaire
avec
le
préfixe
zéro
.

La
plage
autorisée
s'
étend
de
“
01
”
à
“
12
”
.

Heure
du
jour
,
exprimée
dans
le
système
à
24
h
,
si
nécessaire
avec
le
préfixe
zéro
.

La
plage
autorisée
s'
étend
de
“
00
”
à
“
23
”
.

i
Minutes
,
si
nécessaire
préfixée
avec
un
zéro
.

La
plage
autorisée
s'
étend
de
“
00
”
à
“
59
”
.

I
(
‘
i
’
majuscule
)
Spécifie
si
le
système
horaire
courant
est
celui
de
l'
heure
de
hiver
ou
de
l'
heure
de
été
,
sous
la
forme
de
une
valeur
booléenne
:
“
1
”
si
l'
heure
de
hiver
est
activée
,
sinon
“
0
”
.

Jour
du
mois
au
format
numérique
,
sans
zéro
en
préfixe
.

La
page
autorisée
s'
étend
de
“
1
”
à
“
31
”
.

Jour
de
la
semaine
en
anglais
,
au
format
textuel
,
version
longue
.

La
plage
autorisée
s'
étend
de
“
Monday
”
à
“
Sunday
”
.

Indique
si
l'
année
est
bissextile
,
par
une
valeur
booléenne
:
“
1
”
dans
le
cas
de
une
année
bissextile
,
et
“
0
”
pour
les
années
non
bissextiles
.

mois
de
l'
année
,
sous
la
forme
de
un
nombre
à
deux
chiffres
,
éventuellement
préfixé
par
un
zéro
.

La
plage
autorisée
s'
étend
de
“
01
”
à
“
12
”
.

mois
de
l'
année
en
anglais
,
dans
un
format
textuel
abrégé
en
trois
lettres
.

La
plage
autorisée
s'
étend
de
“
Jan
”
à
“
Dec
”
.

j
l
(
‘
L
’
minuscule
)
L
m
m
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
71
Cours
de
initiation
Php
n
mois
de
l'
année
,
sous
la
forme
de
un
nombre
sans
zéro
en
préfixe
.

La
plage
autorisée
s'
étend
de
“
1
”
à
“
12
”
.

s
Secondes
avec
si
nécessaire
un
zéro
en
préfixe
.

La
plage
autorisée
s'
étend
de
“
00
”
à
“
59
”
.

S
suffixe
ordinal
pour
les
dates
,
en
anglais
,
et
en
deux
lettres
.

Ce
suffixe
peut
être
“
st
”
,
à
nd
”
,
“
rd
”
,
ou
“
th
”
selon
le
nombre
qui
le
précède
.

t
Nombre
total
de
jours
dans
le
mois
donné
.

La
plage
autorisée
s'
étend
de
“
28
”
à
“
31
”
.

T
Fuseau
horaire
du
serveur
,
sous
la
forme
de
trois
lettres
,
par
exemple
à
MET
”
.

Nombre
total
de
secondes
qui
se
sont
écoulées
depuis
le
1er
janvier
1970
jusque
au
moment
considéré
.

Jour
de
la
semaine
sous
la
forme
de
un
seule
chiffre
.

La
plage
autorisée
s'
étend
de
“
0
”
(
dimanche
)
à
“
6
”
(
samedi
)
.

U
w
y
Année
,
sous
un
format
à
2
chiffres
,
par
exemple
“
00
”
.

y
Année
,
sous
un
format
à
4
chiffres
,
par
exemple
“
2001
”
.

z
Jour
de
l'
année
sous
forme
de
un
nombre
.

La
plage
autorisée
s'
étend
de
“
0
”
à
“
365
”
.

z
Décalage
horaire
en
secondes
.

La
plage
autorisée
s'
étend
de
“
-43200
”
à
“
43200
”
.

La
fonction
getdate
array
getdate
(
[
int
timestamp
]
)
getdate()
retourne
un
tableau
associatif
contenant
les
informations
de
date
et
de
heure
du
timestamp
timestamp
(
lorsqu'
il
est
fourni
,
sinon
,
le
timestamp
de
la
date/heure
courante
)
,
avec
les
champs
suivants
:
Tableau
1
.

Nom
du
clés
du
tableau
associatif
retourné
Clé
Description
"
seconds
"
Représentation
numérique
du
secondes
Exemple
de
valeur
retournée
0
à
59
"
minutes
"
Représentation
numérique
du
minutes
0
à
59
"
hours
"
Représentation
numérique
du
heures
0
à
23
"
mday
"
Représentation
numérique
du
jour
du
mois
courant
1
à
31
"
wday
"
Représentation
numérique
du
jour
de
la
semaine
courante
0
(
pour
Dimanche
)
à
6
(
pour
samedi
)
"
mon
"
Représentation
numérique
du
mois
1
à
12
"
year
"
Année
,
sur
4
chiffres
Exemples
:
1999
ou
2003
"
yday
"
Représentation
numérique
du
jour
de
l'
année
0
à
365
"
weekday
"
Version
texte
du
jour
de
la
semaine
Sunday
à
Saturday
"
month
"
Version
texte
du
mois
,
comme
January
ou
March
0
Nombre
de
secondes
depuis
l'
époque
Unix
,
similaire
à
la
valeur
retournée
par
Dépend
du
système
,
typiquement
de
la
fonction
time()
et
utilisée
par
date(
)
.

2147483648
à
2147483647
.

January
à
December
Exemple
:
<
?

php
$jours
à
e
29
'
;
$mois
=
'
12
'
;
$annee='2005
'
;
$MaDate
=
getdate(mktime(0,0,0,$mois,$jours,$annee))
;
foreach($MaDate
as
$key=>$value
)
{
echo
"
$key
:
$value<br>
"
;
}
echo
$MaDate['mday']."/".$MaDate['mon']."/".$MaDate['year
'
]
;
//Affiche
29/12/2005
?

à
La
fonction
checkdate()
int
checkdate
(
int
month
,
int
day
,
int
year
)
checkdate()
retourne
TRUE
si
la
date
représentée
par
le
jour
day
,
le
mois
month
et
l'
année
year
est
valide
,
et
sinon
FALSE
.

Notez
bien
que
l'
ordre
du
arguments
n'
est
pas
l'
ordre
français
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
72
Cours
de
initiation
Php
Conversion
entre
des
formats
de
date
Php
et
du
formats
de
date
MySQL
MySQL
comme
d'
autres
base
de
données
dispose
de
plusieurs
fonction
SQL
qui
permettent
de
traiter
les
dates
en
voici
quelques
unes
:
curdate()
:
renvoi
la
date
sous
la
forme
2001-05-25
SELECT
curdate()
FROM
tablename
;
curtime()
:
renvoi
l'
heure
sous
la
forme
12
:10
:53
SELECT
curtime()
FROM
tablename
;
now()
:
renvoi
la
date
et
l'
heure
sous
la
forme
2001-05-25
12
:10
:53
SELECT
now()
FROM
tablename
;
MySQL
exige
que
les
dates
soient
entrées
sous
la
forme
anné
,
mois
,
jour
.

Exemple
:
Le
29
août
2000
doit
être
saisi
sous
la
forme
2000–08–29
ou
00–08–29
Des
conversions
de
format
sont
donc
nécessaires
lorsque
les
dates
doivent
être
échangées
entre
Php
et
MySQL
.

Lorsque
des
dates
doivent
être
communiquées
de
Php
vers
MySQL
,
la
fonction
date()
permet
facilement
de
obtenir
le
format
approprié
.

Il
faut
utiliser
les
formats
de
jour
et
de
mois
pour
lesquels
des
zéros
sont
placés
en
préfixe
,
de
manière
à
éviter
les
confusions
au
niveau
de
MySQL
.

Dans
MySQL
,
la
commande
SQL
DATE_FORMAT()
permet
de
formater
les
dates
.

Elle
est
semblable
à
la
fonction
date()
de
Php
,
mais
elle
utilise
des
codes
de
format
différents
.

La
conversion
la
plus
courante
consiste
à
exprimer
une
date
sous
le
format
MM
à
Jj
à
Aaaa
plutôt
que
sous
le
format
Aaaa
–
MM
à
Jj
en
vigueur
dans
MySQL
.

Cette
conversion
s'
effectue
au
moyen
de
la
requête
suivante
:
SELECT
DATE_FORMAT
(
date_column
,
e
%m
%d
çy
'
)
FROM
tablename
;
Le
code
de
format
%m
correspond
à
une
représentation
du
mois
sous
la
forme
de
un
nombre
à
deux
chiffres
;
%d
représente
le
jour
sous
la
forme
de
un
nombre
à
deux
chiffres
;
et
çy
représente
l'
années
sous
la
forme
de
un
nombre
à
4
chiffres
.

Les
codes
de
format
MySQL
les
plus
utiles
pour
ce
type
de
conversion
sont
décrits
dans
le
tableau
suivant
.

Code
Description
%M
mois
,
plein
texte
%W
Nom
du
jour
de
la
semaine
,
plein
texte
%D
Jour
du
mois
,
numérique
,
avec
un
préfixe
textuel
çy
Année
,
numérique
,
4
chiffres
çy
Année
,
numérique
,
2
chiffres
ça
Nom
du
jour
de
la
semaine
,
3
lettres
%d
Jour
du
mois
,
numérique
,
zéro
en
préfixe
%e
Jour
du
mois
,
numérique
,
pas
de
zéro
en
préfixe
%m
mois
,
numérique
,
zéro
en
préfixe
%c
Mois
,
numérique
,
pas
de
zéro
en
préfixe
%b
Mois
,
texte
,
3
lettres
%j
Jour
de
l'
année
,
numérique
%H
Heure
,
système
à
24
heures
,
zéro
en
préfixe
%k
Heure
,
système
à
24
heures
,
pas
de
zéro
en
préfixe
héh
ou
çi
(
’
i
à
majuscule
)
%l
(
’
L
’
minuscule
)
Heure
,
système
à
12
heures
,
zéro
en
préfixe
Heure
,
système
à
12
heures
,
pas
de
zéro
en
préfixe
çi
Minutes
,
numérique
,
zéro
en
préfixe
%r
Heure
,
système
à
12
heures
(
hh:mm:ss[AM|PM
]
)
%T
Heure
,
système
à
24
heures
(
hh:mm:ss
)
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
73
Cours
de
initiation
Php
-s
ou
-s
Secondes
,
numérique
,
zéro
en
préfixe
p
Am
ou
pm
%w
Jour
de
la
semaine
,
numérique
,
de
0
(
dimanche
)
à
6
(
samedi
)
Exercice
:
(
Voir
annexe
Les
dates
)
Reprendre
le
formulaire
de
inscription
et
ajouter
un
champ
date
de
inscription
(
voir
figure
14
)
Modifier
de
sorte
que
la
date
puisse
être
insérée
ou
modifiée
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
74
Cours
de
initiation
Php
6.3
.

Utiliser
ODBC
Odbc
est
une
solution
alternative
permettant
de
accéder
à
une
base
de
données
en
écrivant
un
code
générique
,
c'
est-à-dire
que
le
code
de
l'
application
fonctionne
pour
toutes
les
base
de
données
prenant
en
charge
la
norme
ODBC
.

Toutefois
,
si
cette
solution
semble
séduisante
,
elle
est
bien
moins
fournit
en
fonctionnalités
que
l'
accès
en
base
au
travers
du
fonctions
de
base
dédiées
c'
est
à
dire
directement
prisent
en
charge
par
Php
.

Pour
uitliser
ODBC
,
il
est
nécessaire
de
installer
et
de
configurer
le
driver
de
la
base
.

Installation
du
driver
odbc
de
MySql
Télécharger
le
fichier
MyODBC-3.51.11-2-win.exe
dans
un
répertoire
temporaire
et
lancer
le
programme
(
setup.exe
)
Configuration
de
la
source
de
donnée
Dans
le
menu
"
paramètres
"
,
"
panneau
de
configuration
"
double
cliquez
sur
"
Sources
de
données
(
ODBC
)
"
.

Cliquez
sur
add
pour
ajouter
une
nouvelle
source
de
donnée
,
sélectionnez
Mysql
pui
Terminer
.

Editez
les
paramètres
suivant
:
Windows
DSN
name
:
Mysql
host
name
:
User
:
Passeword
:
Port
:
formation
localhost
stagiaire
stagiaire
3306
pui
validez
en
cliquant
sur
Ok
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
75
Cours
de
initiation
Php
Maintenant
nous
pouvons
établir
une
connéction
a
la
base
en
utilisant
la
fonction
odbc_connect()
:
resource
odbc_connect
(
string
dsn
,
string
user
,
string
password
[
,
int
cursor_type
]
)
Exemple
:
<
?

php
$dsn=
"
formation
"
;
$host="localhost
"
;
//
Nom
du
serveur
ou
adresse
Ip
qui
héberge
la
base
de
données
$user="stagiaire
"
;
//Nom
de
l'
utilisateur
de
la
base
de
données
$password="stagiaire
"
;
//
Mot
de
passe
de
connexion
à
la
base
de
données
$db="formation
"
;
//Nom
de
la
base
de
données
que
l'
on
interroge
'
$conn=odbc_connect
(
$dsn
,
$user
,
$password
)
or
die
(
"
Impossible
de
se
connecter
"
)
;
?

>
Pour
interroger
la
base
nous
utiliserons
:
odbc_exec
pour
éxecuter
une
requête
à
la
place
de
Mysql_query
int
odbc_exec
(
resource
connection_id
,
string
query_string
)
et
odbc_fetch_array
pour
lire
les
enregistrements
à
la
place
de
mysql_fetch_array
array
odbc_fetch_array
(
resource
result
[
,
int
rownumber
]
)
Voici
un
exemple
de
connéction
et
de
intérrogation
de
la
base
formation
<
?

php
//Code
servant
a
afficher
le
source
.

echo
"
<link
rel=\"stylesheet\
"
type=\
"
text/css\
"
?

href=\"../css/sga.css\">
"
;
echo
"
à
href=\"show_source.php
?

script=db_satgiaireOdbc.php\">Voir
source</A><br><br>
"
;
include("fonction.inc")
;
//Code
de
l'
exercice
.

include("connect_odbc.inc")
;
//Si
la
table
se
nomme
stagiaires
$requete=
"
select
*
from
stagiaires
limit
0,5
"
;
echo
"
<B>Résultat
avec
odbc_fetch_array()</B><BR>
"
;
//On
éxecute
la
requête
$resultat=@odbc_exec($conn,$requete)
;
//On
récupère
les
valeurs
grace
à
la
boucle
while
//dans
la
variable
tableau
$annuaire_stagiaires
crée
par
mysql_fetch_array()
//On
dispose
des
indices
numérique
ou
des
noms
de
champs
comme
indice
echo
"
<h2>Liste
du
stagiaires</h2>
"
;
echo
"
<table
border=1><tr
align
=center><th>N°
de
stagiaire</th>
<th>Nom
et
prénom</th><th>Adresse</th>
<th>Code
Postal</th><th>Ville</th><th>Courriel</th><th>N°
de
Téléphone</th></tr>
"
;
while
(
$annuaire_stagiaires
=
odbc_fetch_array
($resultat))
{
echo
"
<tr><td
align
center>".$annuaire_stagiaires["num_stagiaire"]."</td>
"
;
echo
"
<td>".civilite($annuaire_stagiaires["civ
"
]
)
.
"

"
.$annuaire_stagiaires["nom
"
]
.
"

"
.$annuaire_stagiaires["prenom"]."</td>
"
;
echo
"
<td>".$annuaire_stagiaires["adresse"]."&nbsp
;
</td>
"
;
echo
"
<td
align=center>".$annuaire_stagiaires["cp"]."&nbsp
;
</td>
"
;
echo
"
<td>".$annuaire_stagiaires["ville"]."&nbsp
;
</td>
"
;
echo
"
<td>".$annuaire_stagiaires["courriel"]."&nbsp
;
</td>
"
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
76
Cours
de
initiation
Php
echo
"
<td>".$annuaire_stagiaires["telephone"]."&nbsp
;
</td></tr>
"
;
}
echo
"
</table>
"
;
//on
Libère
les
ressources
.

odbc_free_result
(
$resultat
)
;
//on
ferme
la
connection
à
la
base
odbc_close($conn)
;
?

à
Exercice
:
(
Voir
annexe
ODBC
Exercice
1
)
Afficher
la
liste
du
stagiaires
en
utilisant
une
connection
ODBC
ayant
une
base
mysql
comme
source
de
données
,
avec
utilisateur=stagiaire
,
mot
de
passe
=stagiaire
et
base
=
formation
afin
de
obtenir
le
résultat
montré
dans
l'
exemple
ci-dessous
.

Liste
du
stagiaires
N°
de
stagiaire
Nom
et
prénom
Code
Postal
Adresse
1
Madame
DURANT
21
,
rue
Brassens
2
Mademoiselle
Dupré
3
Père
Alain
4
5
Georges
Ville
Courriel
N°
de
Téléphone
94000
Creteil
durant@free.fr
01
42
44
12
30
54
,
rue
Jacques
Brel
75000
PARIS
dupre@wanadoo.fr
01
14
42
32
40
13
,
rue
du
Saint
p
93000
Saint-Denis
alain@htomail.com
01
52
64
72
80
Monsieur
Camus
Albert
79
,
rue
du
scribe
92160
Antony
camus@noos.fr
01
62
73
82
90
Leblanc
Jean-Marc
91000
Montfermeil
jeanmarc.leblanc@free.fr
01
02
14
22
40
rue
du
blanc
manteaux
Exercice
:
(
Voir
annexe
ODBC
Exercice
2
)
Créer
une
source
de
données
ODBC
permettant
de
accéder
à
la
base
access
"
formation.mdb
"
.

Reprendre
l'
exercice
précédent
et
adaptez
le
afin
de
pouvoir
obtenir
le
même
résultat
,
mais
en
interrogeant
la
base
access
"
formation.mdb
"
qui
se
trouve
dans
le
répertoire
exercice
(
vous
pouvez
aussi
a
télécharger
)
.

Comme
nous
l'
avons
vu
,
il
est
possible
de
interroger
différentes
base
de
données
soit
par
les
fonctions
natives
soit
par
ODBC
.

mais
lorsque
l'
on
souhaite
accéder
à
différentes
source
de
données
dans
un
même
programme
,
cela
devient
vite
fastidieux
de
changer
de
connection
et
fonctions
.

Pour
éviter
ces
manipulations
,
il
existe
un
moyen
qui
passe
par
la
création
de
une
classe
regroupant
tous
les
mode
de
connection
que
l'
on
à
besoin
.

Cette
classe
apporte
une
couche
de
abstraction
de
base
de
données
.

Ils
en
existe
plusieurs
(
PEAR
fournit
avec
Php
,
sql_layer
créer
par
PHP_Nuke
etc
…
)
.

Nous
reviendrons
sur
ce
sujet
au
chapitre
du
classe
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
77
Cours
de
initiation
Php
7
.

Les
Sessions
et
Cookies
7.1
.

Les
Cookies
Qu'
est
-ce
que
un
cookie
?

Un
cookie
est
un
fichier
texte
sauvegardé
sur
la
machine
côté
client
dans
lequel
sont
stockées
du
données
.

Il
permet
à
un
site
web
de
stocker
et
de
récupérer
des
données
dans
le
cas
de
applications
ayant
besoin
de
maintenir
un
état
(
persistance
du
données
)
entre
plusieurs
visites
de
l'
utilisateur
.

Les
cookies
permettent
de
éviter
de
forcer
un
utilisateur
à
se
reconnecter
si
il
émet
une
nouvelle
requête
,
et
favorisent
une
navigation
plus
personnalisée
.

Le
fichier
contient
une
chaîne
de
texte
de
type
nom
à
valeur
.

Une
URL
lui
est
associée
:
elle
permet
au
client
de
savoir
si
il
doit
renvoyer
le
cookie
au
serveur
contacté
.

Cookies
en
php
La
fonction
setcookie()
permet
de
définir
manuellement
les
cookies
,
de
la
manière
suivante
:
int
setcookie(
string
nom_cookie
,
string
valeur_cookie
,
int
date_exp
)
;
si
la
date
de
expiration
n'
est
pas
définie
,
la
durée
de
vie
du
cookie
est
celle
de
la
session
.

Exemple
:
<
?

php
setcookie("cookie
"
,
"
chocolat
"
,
time()
p
90
*
86400
)
;
?

>
après
exécution
de
cette
ligne
,
un
cookie
de
nom
moncookie
et
de
valeur
à
chocolat
”
est
stocké
.

Il
est
possible
de
définir
des
cookies
à
valeurs
multiples
:
en
effet
,
les
cookies
sont
restreints
à
20
par
serveur
.

On
traite
alors
le
cookie
comme
un
tableau
,
et
on
affecte
une
valeur
à
chaque
élément
du
tableau
.

Exemple
:
<
?

php
if
(
!

isset($cookie[0]))
à
setcookie("cookie[0
]
"
,
$nomvisiteur
)
;
cookie[1]++
;
setcookie("cookie[1
]
"
,
$cookie[1
]
)
;
echo
"
Bonjour
$cookie[0
]
,
vous
avez
effectué
"
.$cookie[1
]
.

(
$cookie[1
]
==
1
?

"
visite
!

"
:
"
visites
!

"
)."sur
cette
page
.
"
;
//affiche
:
Bonjour
(
le
nom
du
visiteur
)
,
vous
avez
effectué
(
le
nombre
de
visites
)
sur
cette
page
.

?

à
Le
code
qui
définit
le
cookie
doit
apparaître
au
tout
début
de
la
page
,
dans
l'
en-tête
,
avant
la
génération
de
une
sortie
et
son
envoie
au
navigateur
.

Php
envoie
un
message
de
erreur
si
setcookie()
est
appelée
après
que
une
réponse
HTTP
a
été
envoyée
au
client
.

Attention
:
un
simple
espace
,
un
caractère
de
saut
de
ligne
ou
tout
autre
texte
,
HTML
ou
généré
par
Php
,
suffit
à
provoquer
cette
erreur
.

Dans
les
mêmes
conditions
de
utilisation
,
la
fonction
setcookie()
avec
une
nouvelle
valeur
pour
le
cookie
permet
de
changer
la
valeur
du
cookie
.

Accéder
à
un
cookie
Deux
méthodes
permettent
de
accéder
à
un
cookie
:
à
une
variable
globale
est
associée
au
cookie
:
$nom_cookie
qui
contient
la
valeur_cookie
;
à
la
variable
de
environnement
$_COOKIE
[
nom_cookie
]
est
un
tableau
associatif
global
qui
ne
contient
que
des
variables
provenant
de
cookies
,
ce
qui
permet
de
avoir
une
information
fiable
sur
l'
origine
.

Exemple
:
<
?

php
if
(
!

isset($_COOKIE['cookie']))
à
setcookie("cookie
"
,
"
chocolat
"
)
;
echo
"
le
cookie
\$cookie
=
chocolat
a
été
créé
:
<br>
"
;
echo
"
vous
allez
pouvoir
y
avoir
accès
"
;
echo
"
<br><a
href
=
\"cookie1.php\">accès</a>
"
;
}
else
à
echo
"
\$cookie
=
"
.$_COOKIE['cookie
'
]
.
"
,
<br>
"
;
echo
"
vous
pouvez
maintenant
utiliser
le
cookie
"
;
echo
"
<br><a
href
=
\"cookie2.php\">utilisation</a>
"
;
}
?

à
Supprimer
un
cookie
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
78
Cours
de
initiation
Php
Un
cookie
peut
être
supprimé
à
l'
aide
de
la
fonction
setcookie()
dotée
de
un
unique
paramètre
:
int
setcookie(string
nom_cookie
)
;
Exemple
:
<
?

php
setcookie
(
"
cookie
"
,
"
"
)
;
if
(
!

isset($_COOKIE['cookie']))
à
echo
"
\$cookie
a
été
détruit
"
;
echo
"
<br><a
href
=
\"cookie.php\">recommencer</a>
"
;
}
else
à
echo
"
\$cookie
va
être
détruit
"
;
echo
"
<br><a
href
=
\"cookie4.php\">destruction</a>
"
;
}
?

>
Exemples
de
utilisation
du
cookies
Script
de
cookie.php
<
?

php
if
(
!

isset($_COOKIE['cookie']))
à
setcookie("cookie
"
,
"
chocolat
"
)
;
echo
"
le
cookie
\$cookie
=
chocolat
a
été
créé
:
<br>
"
;
echo
"
vous
allez
pouvoir
y
avoir
accès
"
;
echo
"
<br><a
href
=
\"cookie1.php\">accès</a>
"
;
}
else
à
echo
"
\$cookie
=
"
.$_COOKIE['cookie
'
]
.
"
,
<br>
"
;
echo
"
vous
pouvez
maintenant
utiliser
le
cookie
"
;
echo
"
<br><a
href
=
\"cookie2.php\">utilisation</a>
"
;
}
?

>
Script
de
cookie1.php
<
?

php
$cookie=$_COOKIE['cookie
'
]
;
echo
"
\$cookie
est
toujours
$cookie<br>
"
;
echo
"
cette
valeur
va
changer<br>
"
;
echo
"
<a
href
=
\"cookie3.php\">suite</a>
"
;
?

>
Script
de
cookie2.php
<
?

php
echo
"
\$cookie
est
toujours
"
.$_COOKIE['cookie']."<br>
"
;
echo
"
cette
valeur
va
changer<br>
"
;
echo
"
<a
href
=
\"cookie3.php\">suite</a>
"
;
?

>
Script
de
cookie3.php
<
?

php
setcookie
(
"
cookie","café
"
)
;
if
(
$_COOKIE['cookie
'
]
==
"
chocolat
"
)
à
echo
"
le
changement
n'
a
pas
eu
encore
lieu
"
;
echo
"
<br>la
valeur
"
.$_COOKIE['cookie
'
]
.
"

de
\$cookie
va
changer
"
;
echo
"
<br><a
href
=
\"cookie3.php\">changement</a>
"
;
}
elseif
(
$_COOKIE['cookie
'
]
==
"
café
"
)
à
echo
"
le
changement
a
eu
lieu
"
;
echo
"
<br>la
nouvelle
valeur
de
\$cookie
est
"
.$_COOKIE['cookie
'
]
.
"
,
"
;
echo
"
nous
allons
maintenant
détruire
le
cookie
"
;
echo
"
<br><a
href
=
\"cookie4.php\">destruction</a>
"
;
}
?

>
Script
de
cookie4.php
<
?

php
setcookie
(
"
cookie
"
,
"
"
)
;
if
(
!

isset($_COOKIE['cookie']))
à
echo
"
\$cookie
a
été
détruit
"
;
echo
"
<br><a
href
=
\"cookie.php\">recommencer</a>
"
;
}
else
à
echo
"
\$cookie
va
être
détruit
"
;
echo
"
<br><a
href
=
\"cookie4.php\">destruction</a>
"
;
}
?

à
Exercice
:
(
Voir
annexe
,
Les
cookies
)
Créer
4
page
pour
manipuler
les
cookies
.

Pour
chaque
page
,
permettez
à
l'
utilisateur
,
à
l'
aide
de
un
lien
hypertexte
,
de
passer
a
la
page
suivante
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
79
Cours
de
initiation
Php
Indiquez
sur
chaque
page
l'
état
et
la
valeur
du
cookie
,
comme
indiqué
ci-dessous
.

la
première
:
Créer
le
fichier
cookie1.php
qui
vérifiera
l'
éxistance
de
la
variable
cookie
(
$cookie
)
ayant
la
valeur
"
je
mange
du
poisson
"
.

si
elle
n'
existe
pas
,
elle
sera
créée
et
l'
utilisateur
informé
.

Un
lien
lui
permettra
de
rappeller
la
page
.

si
elle
exite
un
message
informera
l'
utilisateur
et
un
lien
lui
permettra
de
passer
à
la
page
suivante
.

Exemple
:
le
cookie
$cookie
=
"
je
mange
du
poisson
"
a
été
créé
:
vous
allez
pouvoir
y
avoir
accès
accès
ou
$cookie
à
je
mange
du
poisson
,
vous
pouvez
maintenant
utiliser
le
cookie
utilisation
la
seconde
:
Créer
le
fichier
cookie2.php
qui
informera
l'
utilisateur
de
la
valeur
du
cookie
précédement
créer
et
lui
indiquer
que
en
cliquant
sur
lun
lien
il
changara
sa
valeur
.

Exemple
:
"
$cookie
=
je
mange
du
poisson
"
,
vous
pouvez
maintenant
utiliser
le
cookie
utilisation
ou
$cookie
est
toujours
"
je
mange
du
poisson
"
cette
valeur
va
changer
suite
la
troisième
:
Créer
le
fichier
cookie3.php
qui
déterminera
si
la
valeur
du
cookie
a
changé
,
si
oui
l'
utilisateur
sera
averti
que
en
cliquant
sur
le
lien
sa
valeur
va
changée
,
si
non
,
l'
avertir
que
le
changement
a
eu
lieu
et
que
en
clien
sur
le
lien
le
cookie
sera
détruit
.

Exemple
:
le
changement
n'
a
pas
eu
encore
lieu
la
valeur
"
je
mange
du
poisson
"
de
$cookie
va
changer
changement
ou
le
changement
a
eu
lieu
la
nouvelle
valeur
de
$cookie
est
"
je
préfere
la
viande
"
,
nous
allons
maintenant
détruire
le
cookie
destruction
la
quatrième
:
Créer
le
fichier
cookie4.php
qui
déterminera
si
le
cookie
a
été
détruit
,
si
oui
on
informe
l'
utilisateur
et
on
insserre
un
lien
permettant
de
recommencer
,
si
non
,
on
l'
informe
que
en
cliquant
sur
le
lien
le
cookie
sera
détruit
.

Exemple
:
$cookie
va
être
détruit
destruction
ou
$cookie
a
été
détruit
recommencer
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
80
Cours
de
initiation
Php
7.2
.

Les
sessions
Une
session
débute
lors
du
lancement
du
navigateur
,
lorsqu'
un
utilisateur
arrive
sur
la
page
web
et
se
termine
à
son
départ
.

HTTP
est
un
protocole
sans
état
:
il
ne
comprend
pas
de
mécanisme
de
maintient
du
états
entre
deux
transactions
.

Autrement
dit
lorsqu'
une
page
web
se
ferme
et
que
les
srcipts
terminent
tous
les
éléments
en
mémoire
sont
détruits
donc
perdus
.

On
a
recours
à
la
session
qui
permet
de
gérer
un
contexte
qui
est
l'
ensemble
de
plusieurs
variables
dont
le
contenu
doit
persister
sur
plusieurs
page
de
l'
application
.

Cette
opération
peut
s'
effectuer
de
plusieurs
manières
:
•
à
l'
aide
de
un
cookie
;
•
par
le
passage
de
paramètres
à
chaque
lien
(
URL
longues
)
;
•
par
le
passage
de
variables
postées
via
des
champs
cachés
;
•
par
l'
utilisation
du
sessions
Php
.

En
php
chaque
session
est
caractérisée
par
un
numéro
de
identification
unique
:
Id
ou
identifiant
de
session
.

C'
est
un
nombre
aléatoire
,
stocké
soit
sur
la
machine
du
client
dans
un
cookie
soit
passé
via
des
URL
.

Cet
id
de
session
joue
le
rôle
de
une
clé
qui
permet
de
enregistrer
des
variables
particulières
en
tant
que
"
variables
de
session
"
et
est
la
seule
information
relative
à
la
session
qui
soit
visible
côté
client
.

Les
variables
sessions
sont
enregistrées
dans
un
fichier
texte
de
type
nom
=
valeur
soit
sur
le
client
via
les
cookies
soit
sur
le
serveur
si
les
cookies
ne
sont
pas
disponibles
.

Les
sessions
avec
cookies
Lors
de
la
mise
en
œuvre
de
sessions
Php
,
les
fonctions
de
session
se
chargent
automatiquement
dans
la
définition
du
cookies
,
a
condition
que
la
directive
session.use_cookies
soit
égale
a
1
.

La
fonction
session_get_cookie_params()
permet
de
visualiser
le
contenu
de
un
cookie
défini
par
une
session
.

Elle
renvoie
un
tableau
associatif
contenant
les
éléments
date
de
expiration
,
chemin
,
domaine
.

La
fonction
session_set_cookie_params()
permet
de
définir
les
paramètres
de
un
cookie
de
session
:
void
session_set_cookie_params(
int
date_exp
,
string
chemin
[
,string
domaine
]
)
;
L'
usage
de
cookies
peut
poser
des
problèmes
.

Certains
navigateurs
ne
les
acceptent
pas
,
et
certains
utilisateurs
désactivent
volontairement
dans
leur
navigateur
Web
la
fonctionnalité
relative
au
cookies
.

Les
sessions
Php
utilisent
par
défaut
les
cookies
:
si
possible
,
un
cookie
est
créé
pour
stocker
l'
id
de
la
session
courante
.

Dans
le
cadre
de
une
application
de
gestion
,
ou
l'
application
repose
sur
l'
utilisation
du
session
il
est
préférable
de
éviter
de
utiliser
les
sessions
avec
cookies
.

passage
du
paramètres
par
l'
URL
Avec
cette
méthode
L'
Id
session
est
tranmis
via
l'
URL
.

Pour
que
celle
-ci
soit
automatiquement
adoptée
Php
doit
être
compiler
avec
l'
option
--
enable-trans-sid
option
.

vous
pouvez
aussi
passer
manuellement
l'
Id
de
une
session
par
le
biais
de
un
hyper
lien
.

si
php
a
été
configuré
avec
l'
option
--
enable-track-vars
,
l'
id
de
session
est
stocké
dans
la
constante
Sid
:
vous
devez
l'
ajouter
à
la
fin
du
lien
,
à
la
manière
de
un
paramètre
GET
.

Exemple
:
à
HREF="page_2.php
?

<
?

=SID
?

>">lien</A>
si
php
n'
a
pas
été
configuré
avec
cette
option
,
il
faut
placer
la
clé
de
session
dans
l'
URL
de
la
page
de
destination
,
ce
qui
constitue
une
écriture
plus
longue
.

Exemple
:
à
HREF="page_2.php
?

session_name()=session_id()">lien</A>
La
fonction
session_name()
renvoi
le
nom
de
la
session
tel
que
définit
dans
le
php.ini
.

string
session_name
(
[
string
name
]
)
La
fonction
session_id()
renvoi
le
N°
de
session
définit
lors
du
début
de
la
session
déclarée
par
session_start()
string
session_id
(
[
string
id
]
)
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
81
Cours
de
initiation
php
Les
sessions
utilisant
les
fonctions
Php
Php
comprend
des
fonctions
natives
de
contrôle
de
session
,
en
plus
de
celles
contenues
dans
la
bibliothèque
de
base
de
Php
:
PHPlib
.

Configuration
de
php.ini
Le
fichier
de
configuration
php.ini
comporte
une
section
dédiée
à
la
configuration
de
la
gestion
de
session
.

On
y
trouve
en
particulier
les
paramètres
suivants
:
session.save_handler
:
Avec
Php4
,
la
seule
valeur
possible
est
file
,
ce
qui
signifie
que
les
valeurs
du
variables
de
session
sont
stockées
dans
un
fichier
sur
le
disque
.

Le
contenu
de
ces
fichiers
est
en
ASCII
,
on
peut
y
reconnaître
le
nom
du
variables
,
ainsi
que
leurs
types
et
valeurs
.

Avec
PHP5
la
valeur
user
permet
un
stockage
en
mémoire
,
ou
dans
un
Sgbd
.

session.save_path
:
Ce
paramètre
indique
le
chemin
du
fichiers
contenant
les
valeurs
du
variables
de
session
.

Par
défaut
,
ils
sont
créés
dans
/tmp
.

session.name
:
Ce
paramètre
spécifie
le
nom
de
la
session
,
nom
également
utilisé
en
tant
que
nom
du
cookie
de
session
.

Il
ne
doit
contenir
que
des
caractères
alpha
numériques
.

Sa
valeur
par
défaut
est
Phpsessid
.

session.cookie_lifetime
:
Ce
paramètre
indique
la
durée
maximale
de
vie
du
cookie
envoyé
au
navigateur
client
.

si
le
paramètre
est
zéro
,
le
cookie
existera
jusque
à
ce
que
le
navigateur
soit
arrêté
.

C'
est
la
valeur
par
défaut
.

session.auto_start
:
Ce
paramètre
spécifie
si
les
sessions
sont
créées
à
la
demande
ou
systématiquement
.

Par
défaut
,
à
zéro
,
les
sessions
doivent
être
créées
explicitement
par
session_start()
ou
session_register(
)
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
82
Cours
de
initiation
Php
Ouverture
de
une
session
La
fonction
session_start()
initialise
les
données
de
une
nouvelle
session
ou
rafraîchit
les
données
de
la
session
en
cours
.

boolean
session_start()
;
Lors
de
l'
accès
au
site
,
si
l'
identificateur
de
la
session
ne
peut
être
trouvé
,
l'
appel
à
cette
fonction
permet
de
créer
une
session
et
de
transmettre
son
identifiant
au
navigateur
.

Cette
fonction
doit
être
placée
en
tout
début
de
script
et
doit
donc
être
placée
avant
l'
envoie
du
headers
http
.

Enregistrement
de
une
variable
de
session
Une
variable
de
session
est
une
variable
régulière
globale
,
qui
quand
elle
est
enregistrée
,
garde
sa
valeur
sur
toutes
les
page
qui
utilisent
la
session
.

Pour
enregistrer
une
variable
de
session
,
il
faut
assigner
une
valeur
à
une
variable
qui
va
devenir
la
variable
de
session
.

Deux
méthode
sont
possible
pour
enregistrer
une
variable
session
selon
que
la
directive
register_global
du
fichier
de
configuration
de
php
(
php.ini
)
est
active
ou
non
:
Avec
register_global=on
On
utilise
la
fonction
session_register()
:
boolean
session_register(mixed
nom_variable[
,
...
]
)
;
vous
pouvez
enregistrer
plusieurs
variables
de
session
lors
du
même
appel
de
la
fonction
.

Avec
register_global=off
$_SESSION[‘Mavariable’]=’valeur
’
ou
$HTTP_SESSION_VARS[‘Mavariable’]=’valeur
’
Sur
toutes
les
prochaines
page
utilisant
les
sessions
(
en
appelant
la
fonction
session_start())
,
la
variable
$_SESSION[‘nom_variable
’
]
aura
la
valeur
qui
lui
a
été
assignée
quand
elle
a
été
enregistrée
comme
une
variable
de
session
.

Des
changements
de
la
valeur
de
la
variable
seront
automatiquement
enregistrés
dans
la
session
et
sauvegardés
pour
les
prochaines
utilisations
.

Utilisation
de
variables
de
session
vous
pouvez
accéder
à
la
variable
:
Avec
register_global=on
via
son
nom
:
$nom_variable
Avec
register_global=off
par
le
biais
du
tableau
associatif
$_SESSION
ou
$HTTP_SESSION_VARS
:
$_SESSION[$nom_variable
]
Déterminer
si
une
variable
est
une
variable
de
session
enregistrée
:
Avec
register_global=on
La
fonction
session_is_registered()
permet
de
déterminer
si
une
variable
est
une
variable
de
session
enregistrée
:
boolean
session_is_registered(string
nom_variable
)
;
Elle
renvoie
la
valeur
true
si
la
variable
est
enregistrée
comme
variable
de
session
et
false
dans
la
cas
contraire
.

Avec
register_global=off
vous
pouvez
utiliser
le
tableau
$_SESSION
ou
$HTTP_SESSION_VARS
pour
vérifier
si
la
variable
est
enregistrées
comme
variable
de
session
:
If(isset($_SESSION[‘Mavariable’]))
;
Dés-enregistrement
de
variables
et
suppression
de
session
Dés-enregistrement
de
une
variable
de
session
:
vous
pouvez
dés-enregistrer
une
variable
du
session
en
invoquant
la
fonction
Avec
register_global
=
on
session_unregister()
:
boolean
session_unregister(string
nom_variable
)
;
Cette
fonction
dés-enregistre
une
variable
de
session
à
la
foi
.

Avec
register_global
à
off
Unset()
:
void
unset($_SESSION['Mavariable'])
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
83
Cours
de
initiation
Php
Dés-enregistrement
de
toutes
les
variables
de
session
:
Avec
register_global
=
on
La
fonction
session_unset()
permet
de
dés-enregistrer
toutes
les
variables
de
sessions
courantes
.

void
session_unset()
;
Avec
register_global
à
off
$_SESSION
=
array()
;
Suppression
de
session
:
Lorsque
vous
avez
terminé
une
session
,
après
avoir
supprimer
toutes
les
variables
de
session
,
vous
pouvez
invoquer
la
fonction
session_destroy()
qui
permet
de
supprimer
l'
id
de
la
session
.

boolean
session_destroy()
;
Exercice
1
:
(
Voir
annexe
,
Les
sessions
)
Créer
le
formulaire
html
ci-dessous
,
et
lors
de
l'
envoi
du
formulaire
enregistrez
la
saisie
de
l'
utilisateur
dans
des
variables
session
,
pui
Afficher
les
informations
sur
une
seconde
page
.

Exercice
2
:
(
Voir
annexe
,
Les
sessions
)
Créer
le
formulaire
de
connection
(
figure
13
)
,
et
lors
de
l'
envoi
du
formulaire
enregistrez
la
saisie
de
l'
utilisateur
dans
des
variables
session
,
pui
Afficher
les
informations
sur
une
seconde
page
.

Cette
seconde
page
contiendra
un
lien
permettant
a
l'
utilisateur
de
se
déconnecter
(
supprimer
les
variables
session
)
,
pour
revenir
à
la
page
de
connection
.

Connection
Votre
nom
:
Mot
de
passe
:
Figure
13
Exercice
3
:
(
Voir
annexe
,
Les
sessions
)
Reprendre
le
formulaire
de
connection
(
figure
13
)
,
et
lors
de
l'
envoi
du
formulaire
,
avant
de
enregistrer
la
saisie
de
l'
utilisateur
dans
des
variables
session
,
Créer
une
fonction
qui
vérifiera
en
comparant
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
84
Cours
de
initiation
Php
avec
la
base
de
donnée
si
l'
utilisateur
existe
et
si
son
mot
de
passe
est
correct
,
pui
Afficher
les
informations
sur
une
seconde
page
.

Cette
seconde
page
contiendra
un
lien
permettant
a
l'
utilisateur
de
se
déconnecter
(
supprimer
les
variables
session
)
,
pour
revenir
à
la
page
de
connection
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
85
Cours
de
initiation
Php
8
.

Gestion
du
fichiers
Php
permet
de
manipuler
n'
importe
quel
fichier
du
serveur
.

Avant
de
effectuer
une
opération
sur
un
fichier
,
il
est
intéressant
de
s'
assurer
que
ce
fichier
existe
.

La
fonction
file_exists()
nous
permet
de
le
faire
:
int
file_exists(string
nom_fichier
)
;
Les
fonctions
qui
permettent
la
gestion
de
fichiers
sont
des
fonctions
qui
renvoient
true
quand
l'
opération
réussit
,
et
false
quand
elle
échoue
,
sauf
précision
contraire
.

Ouvrir
des
fichiers
La
fonction
fopen()
permet
de
ouvrir
un
fichier
sur
le
serveur
local
ou
via
HTTP
ou
FTP
sur
Internet
.

On
l'
utilise
de
la
manière
suivante
:
int
fopen(string
nom_fichier,string
mode
)
;
L'
argument
nom_fichier
désigne
le
nom
du
fichier
à
ouvrir
,
l'
argument
mode
correspond
au
mode
de
ouverture
du
fichier
,
qui
accepte
l'
une
du
valeurs
suivantes
:
Valeur
a
au
r
r+
w
wu
Description
ouverture
de
un
fichier
en
ajout
uniquement
.

Les
données
sont
écrites
à
la
fin
du
fichier
.

si
le
fichier
n'
existe
pas
,
Php
tente
de
le
créer
.

ouverture
de
un
fichier
en
ajout
et
en
lecture
.

Les
données
sont
écrites
à
la
fin
du
fichier
.

si
le
fichier
n'
existe
pas
,
Php
tente
de
le
créer
.

ouverture
de
un
fichier
pour
lecture
seule
.

ouverture
de
un
fichier
en
lecture-écriture
.

Les
données
sont
écrites
au
début
du
fichier
.

ouverture
de
un
fichier
en
écriture
seule
.

Les
données
remplacent
le
contenu
du
fichier
qui
est
alors
perdu
.

si
le
fichier
n'
existe
pas
,
Php
tente
de
le
créer
.

Ouverture
de
un
fichier
en
écriture-lecture
.

Les
données
remplacent
le
contenu
du
fichier
qui
est
alors
perdu
.

si
le
fichier
n'
existe
pas
,
Php
tente
de
le
créer
.

de
plus
,
l'
indicateur
b
indique
que
le
contenu
du
fichier
est
binaire
et
non
du
texte
(
une
image
par
exemple
)
.

si
la
fonction
fopen()
réussit
,
elle
renvoie
un
pointeur
de
fichier
(
entier
qui
fait
référence
au
fichier
dans
les
appels
de
fonction
ultérieurs
)
,
sinon
,
elle
renvoie
false
.

Exemple
:
<
?

$var
=
file_exists("fichier.php")
;
ifà
!

$var){
echo
"
echec
:
le
fichier
demandé
n'
existe
pas<br>
"
;
}
else{
echo
"
le
fichier
demandé
existe<br>
"
;
ifà
!

$mavar
=
fopen("fichier.php","r"))
à
echo
"
echec
:
le
fichier
n'
a
pas
été
ouvert<br>
"
;
}
else{
echo
"
le
fichier
a
été
ouvert<br>
"
;
echo
"
voici
son
contenu<br><br><br>
"
;
fpassthru
(
$mavar
)
;
}
}
//affiche
le
formulaire
de
la
page
fichier.php
et
ferme
le
fichier
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
86
Cours
de
initiation
Php
Fermer
des
fichiers
Après
la
lecture
de
un
fichier
,
vous
devez
le
refermer
.

La
fonction
utilisée
est
:
mixed
fclose(int
pointeur_fichier
)
;
Naviguer
dans
des
fichiers
Php
possède
des
fonctions
qui
permettent
de
définir
avec
précision
la
longueur
de
la
chaîne
à
lire
dans
le
fichier
,
ainsi
que
de
se
déplacer
à
une
position
spécifique
du
fichier
.

La
fonction
rewind()
:
int
rewind(int
pointeur_fichier
)
;
Elle
place
l'
indicateur
de
position
au
début
du
fichier
.

La
fonction
fseekçë
:
int
fseekà
int
pointeur_fichier
,
int
decalage
)
;
L'
argument
décalage
est
le
nombre
de
octets
ou
de
caractères
par
rapport
au
début
du
fichier
.

Attention
:
cette
fonction
retourne
à
1
en
cas
de
erreur
et
0
en
cas
de
réussite
.

La
fonction
ftell()
:
int
ftell(int
pointeur_fichier
)
;
Cette
fonction
renseigne
sur
la
position
de
l'
indicateur
dans
un
fichier
.

La
fonction
feofçë
:
int
feof(int
pointeur_fichier
)
;
Afficher
des
fichiers
L'
opération
consiste
à
envoyer
le
contenu
du
fichier
vers
un
flux
de
sortie
.

La
fonction
utilisée
est
:
int
fpassthru(int
pointeur_fichier
)
;
Elle
effectue
la
lecture
de
la
position
courante
à
la
fin
du
fichier
,
pui
elle
referme
le
fichier
.

Le
paramètre
de
cette
fonction
est
le
pointeur
du
fichier
renvoyé
par
la
fonction
fopen(
)
.

Lire
des
fichiers
L'
affichage
en
totalité
de
un
fichier
n'
est
pas
toujours
souhaitable
.

Les
fonctions
Php
de
lecture
de
fichier
permettent
de
ne
lire
que
quelques
données
.

La
fonction
fread()
:
string
fread(
int
pointeur_fichier
,
int
longeur
)
;
Le
paramètre
longueur
indique
le
nombre
de
caractères
depuis
le
début
.

La
lecture
se
termine
si
la
fonction
rencontre
la
fin
du
fichier
.

La
fonction
fgets()
:
string
fgets(int
pointeur_fichier
,
int
longueur
)
;
Le
paramètre
longueur
indique
le
nombre
de
caractères
plus
un
caractère
depuis
le
début
.

La
lecture
se
termine
si
la
fonction
rencontre
un
caractère
de
saut
de
ligne
ou
la
fin
du
fichier
.

La
fonction
fgetss()
:
string
fgetss(
int
pointeur_fichier
,
int
longueur
)
;
Cette
fonction
a
le
même
effet
que
la
fonction
fgets()
,
mais
exclut
les
balises
HTML
et
Php
lors
de
l'
affichage
.

La
fonction
fgetc()
:
string
fgetc(int
pointeur_fichier
)
;
Cette
fonction
permet
de
lire
le
premier
caractère
situé
à
la
position
courante
.

La
fonction
file()
:
array
file(string
nom_fichier
)
;
Cette
fonction
lit
le
contenu
de
un
fichier
qu'
elle
place
dans
un
tableau
,
chaque
ligne
du
fichier
étant
représentée
par
un
élément
du
tableau
(
la
première
ligne
correspond
à
l'
élément
zéro
)
.

La
fonction
filesize()
:
int
filesize
(
string
filename
)
Renvoi
la
taille
du
fichier
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
87
Cours
de
initiation
Php
Exemple
:
<
?

php
if(
!

$fichier
=
fopen("texte.txt","r"))
à
echo
"
ouverture
du
fichier
impossible
"
;
}else
{
$text1
=
fread($fichier,17)
;
echo
"
$text1<br>
"
;
//affiche
:
Ce
fichier
est
(
les
14
premiers
caractères
p
<p>
)
$text2
=
fgets($fichier,50)
;
echo
"
$text2<br>
"
;
//
affiche
:
destiné
à
apprendre
à
insérer
des
fichiers
(
s'
arrête
au
saut
de
ligne
)
rewind($fichier)
;
$text4
=
fgetss
(
$fichier,18
)
;
echo
"
$text4<br>
"
;
//
affiche
:
Ce
fichier
est
echo
"
<br>
"
;
rewind($fichier)
;
//
replace
le
pointeur
au
début
du
fichier
while(
!

feof($fichier))
{
echo(fgetc($fichier))
;
//
affiche
chaque
caractère
du
fichier
jusque
à
la
fin
du
fichier
à
echo
"
<br>
"
;
rewind($fichier)
;
$arrText
=
file("texte.txt")
;
//
place
le
contenu
du
fichier
dans
un
tableau
for
(
çi
=
0
;
çi
<
count($arrText)
;
çiu
)
{
//
chaque
ligne
du
texte
est
insérée
dans
les
balises
<b>
...
</b>
//
pour
mettre
le
texte
en
gras
echo
"
<b>$arrText[$i]</b><br>
"
;
}
//renvoi
la
taille
du
fichier
echo
filesize("texte.txt
"
)
.
"

Octets<br>
"
;
fclose($fichier)
;
}
?

>
Exercice
1
:
(
Voir
annexe
,
Gestion
du
fichiers
)
Soit
le
fichier
"
stagiaires_mdb.txt
"
contient
la
liste
du
stagiaires
.

Ouvrer
ce
fichier
en
lecture
seule
et
Afficher
son
contenu
.

Ecrire
dans
des
fichiers
Pour
écrire
une
chaîne
dans
un
fichier
,
on
peut
utiliser
l'
une
du
deux
fonctions
fputs()
ou
fwrite()
elles
sont
identique
en
tout
point
:
int
fputs(int
fichier_pointeur,string
str,[int
longeur
]
)
;
ou
int
fwrite(int
fichier_pointeur,string
str,[int
longeur
]
)
;
si
le
dernier
paramètre
n'
apparaît
pas
,
la
chaîne
est
écrite
en
totalité
.

Exemple
:
<
?

php
if($fichier
=
fopen("texte2.txt","a"))
{
fputs($fichier,"Nous
insérons
une
nouvelle
ligne
à
la
fin
du
fichier
"
)
;
}
?

à
Copier
,
supprimer
et
renommer
des
fichiers
La
fonction
copy()
permet
de
copier
un
fichier
:
int
copy(
string
source,string
destination
)
;
La
fonction
unlink()
supprime
un
fichier
définitivement
:
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
88
Cours
de
initiation
Php
int
unlink(string
nom_fichier
)
;
La
fonction
rename()
permet
de
renommer
un
fichier
:
int
rename(
string
ancien_name
,
string
nouveau_nom
)
;
Exemples
:
Copier
un
fichier
<
?

php
$fichier
=
"
texte.txt
"
;
copy($fichier,"../rep/".$fichier)
;
echo
"
fichier
copié
dans
le
répertoire
rep<br><a
href=\"ex3p40.php\">suite</a>
"
;
?

à
Supprimer
un
fichier
<
?

php
$fichier
=
"
texte.txt
"
;
unlink("../rep/".$fichier)
;
"
fichier
$fichier
supprimé<br><a
ref=\"ex2p40.php\">retour</a>
"
;
echo
"
le
fichier
$fichier
a
été
supprimé
"
;
?

à
Renommer
un
fichier
<
?

php
$fichier
=
"
texte.txt
"
;
rename($fichier
,
"
nouveau_texte.txt
"
)
;
echo
"
le
fichier
$fichier
a
été
renommé
nouveau_texte.txt
"
;
?

à
Exercice
2
:
(
Voir
annexe
,
Gestion
du
fichiers
)
Créer
les
quatre
fichiers
suivant
:
"
creer_fichier.php
"
,
"
copy_fichier.php
"
,
"
rename_fichier.php
"
et
"
supp_fichier.php
"
.

Le
premier
,
"
creer_fichier.php
"
créera
le
fichier
stagiaires.txt
et
inserrera
les
deux
lignes
suivantes
:
"
Voici
l'
insertion
de
la
première
ligne
de
mon
fichier<br>
"
"
Voici
l'
insertion
de
la
deuxième
ligne
de
mon
fichier<br>
"
si
le
fichier
existe
déjà
,
son
contenu
sera
supprimer
.

L'
utilisateur
sera
informé
par
un
message
du
résultat
de
l'
opération
,
pui
le
contenu
du
fichier
sera
affiché
.

Le
second
,
"
copy_fichier.php
"
copiera
le
fichier
stagiaires.txt
en
stagiaires_sav.txt
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Le
troisième
,
"
rename_fichier.php
"
,
renomera
le
fichier
stagiaires_sav.txt
en
lst_stagiaires.txt
et
le
contenu
du
nouveau
fichier
sera
affiché
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Le
quatrième
,
"
supp_fichier.php
"
supprimera
les
fichiers
stagiaires.txt
,
stagiaires_sav.txt
et
lst_stagiaires.txt
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
89
Cours
de
initiation
Php
Chargements
de
tableaux
à
partir
de
fichiers
vous
avez
vu
que
la
fonction
file()
place
le
contenu
de
un
fichier
dans
un
tableau
:
chaque
ligne
du
fichier
est
représentée
par
un
élément
du
tableau
scalaire
.

vous
pouvez
donc
utiliser
les
fonctions
du
tableaux
scalaires
pour
accéder
au
données
du
fichier
.

array
file(string
URL_fichier
)
;
Exemple
:
<
?

php
$orders
=
file("orders.txt")
;
//
le
contenu
du
fichier
est
placé
dans
le
tableau
$orders
$num
=
count($orders)
;
//
compte
le
nombre
de
éléments
du
tableau
if
(
$num
==
0
)
à
echo
"
Rien
à
afficher
,
réessayer
plus
tard
"
;
à
else
à
for
(
çi
=
0
;
çi
à
$num
;
$i++
)
{
echo
"
$orders[$i]<br>
"
;
//
affiche
chaque
ligne
du
fichier
}
}
?

à
Exercice
:
(
Voir
annexe
,
Chargements
de
tableaux
à
partir
de
fichiers
)
Soit
le
fichier
texte
stagiaire_mdb.txt
est
issue
de
une
éxportation
de
une
base
access
,
il
contient
la
liste
du
stagiaires
et
leur
coordonnées
.

de
plus
il
a
été
généré
avec
les
lignes
délimitées
par
des
;
et
les
champ
délimités
par
"
(
guillemet
)
.

Afficher
dans
une
page
,
chaque
stagiaire
avec
son
adresse
et
téléphone
en
dessous
.

Exemple
:
Numéro
de
stagiaire
:
1
Madame
DURANT
21
,
rue
Georges
Brassens
94000
Creteil
Téléphone
:
01
42
44
12
30
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
90
Cours
de
initiation
Php
Gérer
des
répertoires
La
fonction
chdir()
permet
de
définir
le
répertoire
courant
:
mixed
chdir(string
repertoire
)
;
Par
défaut
,
le
répertoire
de
une
page
Php
qui
s'
affiche
est
le
répertoire
dans
lequel
elle
réside
.

Il
est
plus
avantageux
de
basculer
les
autres
répertoires
dans
ce
répertoire
pour
pouvoir
accéder
au
fichiers
,
plutôt
que
de
spécifier
le
chemin
de
accès
complet
de
chaque
fichier
.

La
fonction
opendir()
permet
de
ouvrir
un
répertoire
:
mixed
opendir(string
chemin
)
;
Cette
fonction
retourne
un
pointeur
de
répertoire
,
valeur
entière
qui
permet
de
se
référer
au
répertoire
ouvert
dans
les
appels
de
fonction
ultérieurs
.

La
fonction
readdir()
permet
de
lire
les
entrées
du
répertoire
ouvert
:
string
readdir(int
pointeur_repertoire
)
;
Cette
fonction
renvoie
false
lorsqu'
elle
a
échoué
ou
quand
la
fin
du
répertoire
est
atteinte
.

Exemple
:
<
?

chdir("../exercice")
;
$rep
=
opendir(".")
;
while
(
$fichier
=
readdir($rep))
{
echo
"
$fichier<br>
"
;
}
//affiche
tous
les
fichiers
du
répertoire
Exercice
?

à
La
fonction
rewinddir()
permet
de
revenir
au
début
du
répertoire
:
void
rewinddir(int
pointeur_repertoire
)
;
La
fonction
closedir()
permet
de
fermer
le
répertoire
et
de
libérer
les
ressources
:
void
rewinddir(int
pointeur_repertoire
)
;
La
fonction
mkdir()
permet
de
définir
un
nouveau
répertoire
:
int
mkdir(string
chemin_repertoire
,
int
mode
)
;
Le
second
paramètre
désigne
les
permissions
de
accès
du
répertoire
UNIX
;
Windows
ne
tient
pas
compte
de
ce
paramètre
.

Exemple
:
<
?

if
(mkdir("../rep/new",0700))
à
echo
"
Le
répertoire
a
été
créé
!

"
;
}
else
à
echo
"
échec
:
le
répertoire
n'
a
pas
pu
être
créé
.
"
;
}
?

à
La
fonction
rmdir()
permet
de
supprimer
un
répertoire
:
int
rmdir(string
nom_repertoire
)
;
La
fonction
basename
sépare
le
nom
du
fichier
et
le
nom
du
dossier
.

String
basename
(
string
path
[
,
string
suffix
]
)
Exercice
:
(
Voir
annexe
,
Gérer
des
répertoires
)
Créer
les
quatre
fichiers
suivant
:
"
creer_
"
rename_repertoire.php
"
et
"
supp_
repertoire.php
"
.

repertoire.php
"
,
"
copy_
repertoire.php
"
,
Le
premier
,
"
creer_
repertoire.php
"
créera
le
repertoire1
et
le
repertoire2
pui
le
fichier
stagiaires.txt
dans
le
repertoire1
et
inserrera
dans
ce
fichier
les
deux
lignes
suivantes
:
"
Voici
l'
insertion
de
la
première
ligne
de
mon
fichier<br>
"
"
Voici
l'
insertion
de
la
deuxième
ligne
de
mon
fichier<br>
"
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
91
Cours
de
initiation
Php
si
le
fichier
existe
déjà
,
son
contenu
sera
supprimer
.

L'
utilisateur
sera
informé
par
un
message
du
résultat
de
l'
opération
,
pui
le
contenu
du
fichier
sera
affiché
.

Le
second
,
"
copy_repertoire.php
"
copiera
le
fichier
stagiaires.txt
en
stagiaires_sav.txt
dans
le
repertoire2
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Le
troisième
,
"
rename_repertoire.php
"
,
renomera
le
fichier
stagiaires_sav.txt
en
lst_stagiaires.txt
dans
repertoire1
et
le
contenu
du
nouveau
fichier
sera
affiché
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Le
quatrième
,
"
supp_fichier.php
"
supprimera
les
deux
répertoires
et
leur
contenus
.

On
informera
l'
utilisateur
du
résultat
de
l'
opération
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
92
Cours
de
initiation
Php
Afficher
une
image
Php
utilise
la
bibliothèque
Gd
pour
toutes
les
image
hormis
les
plus
simples
de
entre
elles
.

Php
permet
aussi
de
créer
et
de
manipuler
des
image
,
dans
un
grand
choix
de
formats
,
comme
gif
,
png
,
jpg
,
wbmp
et
xpm
.

Php
peut
aussi
générer
directement
des
image
pour
le
navigateur
,
avec
la
librarie
Gd
.

Utilisation
de
image
simple
:
On
utilise
la
balise
<img>
pour
afficher
une
image
:
<img
src=
"
Mon_image
"
width="129
"
height="76">
Php
permet
aussi
de
afficher
une
image
grace
a
la
balise
<input>
:
<input
name='imageField
'
type='image
'
src='Mon_image'>
;
Lorsque
Php
rencontre
cette
balise
,
il
se
contente
de
interroger
le
serveur
afin
de
obtenir
l'
image
pui
la
transmet
au
navigateur
et
ne
fait
rien
de
autre
.

GetImageSize
:
La
fonction
GetImageSize()
,
nous
sera
très
utile
puisque
elle
retourne
la
taille
de
une
image
et
un
tableau
de
4
éléments
.

L'
index
0
contient
la
largeur
.

L'
index
1
contient
la
longueur
.

L'
index
2
contient
le
type
de
l'
image
:
1
=
Gif
,
2
=
Jpg
,
3
=
PNG
,
5
=
Psd
,
6
=
BMP
.

L'
index
3
contient
la
chaîne
:
"
height=xxx
width=xxx
"
.

array
getimagesize
(
string
filename
[
,
array
imageinfo
]
)
Ainsi
nous
pourrons
obtenir
toutes
les
informations
utiles
sur
l'
image
et
les
placer
dans
les
balises
html
.

Exercice
:
(
Voir
annexe
,
Afficher
une
image
Exercice
1
)
à
l'
aide
de
une
liste
de
séléction
(
<SELECT>
)
afficher
la
liste
du
image
contenu
dans
le
répertoire
image
(
voir
figure
ci-dessous
)
.

pui
permettez
à
l'
utilisateur
de
afficher
l'
image
sélectionnée
à
l'
aide
de
la
balise
img
pui
input
.

Liste
du
image
disponibles
Affiche
La
librarie
Gd
Afin
de
pouvoir
utiliser
la
librairie
Gd
,
vous
devez
au
préalable
charger
ce
module
.

Pour
ce
faire
,
ajouter
la
ligne
suivante
dans
la
partie
extensions
du
fichier
de
configuration
de
php
(
php.ini
)
.

Exemple
:
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
Dynamic
Extensions
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
extension=php_gd2.dll
;
La
librarie
Gd
et
Php
disposent
de
nombreuses
fonctions
relatives
au
traitement
du
image
,
nous
nous
contenterons
de
quelques
unes
.

Ces
fonctions
utilisent
l'
entête
de
fichier
,
autrement
dit
elles
doivent
être
utilisées
avant
tout
autre
commande
transmettant
un
flux
de
données
.

Imagecreatefromgif
:
Crée
une
nouvelle
image
gif
à
partir
de
un
fichier
ou
de
une
URL
.

resource
imagecreatefromgif
(
string
filename
)
imagegif
:
Envoie
une
image
Gif
vers
un
navigateur
ou
un
fichier
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
93
Cours
de
initiation
Php
int
imagegif
(
resource
im
,
string
filename
)
ImagecreatefromJpeg
:
Crée
une
nouvelle
image
Jpeg
à
partir
de
un
fichier
ou
de
une
URL
resource
imagecreatefromjpeg
(
string
filename
)
imagejpeg
:
Envoie
une
image
Jpeg
vers
un
navigateur
ou
un
fichier
.

int
imagejpeg
(
resource
im
[
,
string
filename
[
,
int
quality
]
]
)
ImageCreateFromPNG
:
Crée
une
nouvelle
image
PNG
à
partir
de
un
fichier
ou
de
une
URL
resource
imagecreatefrompng
(
string
filename
)
ImagePNG
:
Envoie
une
image
PNG
vers
un
navigateur
ou
un
fichier
int
imagepng
(
resource
im
[
,
string
filename
]
)
ImageDestroy
:
Détruit
une
image
et
libère
toute
la
mémoire
associée
à
l'
image
Im
.

im
est
un
identifiant
de
image
valide
retourné
par
une
fonction
de
création
de
image
(
imagecreate()
par
exemple
)
int
imagedestroy
(
resource
im
)
Exemple
de
création
de
image
:
<
?

php
//
définition
de
l'
image
$hauteur
=
200
;
$largeur
=
200
;
çimage
=
ImageCreate
(
$largeur
,
$hauteur
)
;
//
identificateur
de
la
couleur
blanc
$blanc
à
ImageColorAllocate
(
çimage
,
255
,
255
,
255
)
;
//
identificateur
de
la
couleur
noir
$noir
à
ImageColorAllocate
(
$image,0
,
0
,
0
)
;
//
dessin
de
l'
image
ImageFill($image
,
0
,
0
,
$noir
)
;
//
peint
un
fond
noir
ImageLine
(
çimage
,
0
,
0
,
$largeur
,
$hauteur
,
$blanc
)
;
//
trace
un
trait
blanc
du
coin
supérieur
gauche
(
0
,
0
)
//
jusque
au
coin
inférieur
droit
(
$largeur
,
$hauteur
)
ImageString($image
,
4
,
50
,
150
,
"
Ventes
"
,
$blanc
)
;
//
ajoute
la
légende
"
Ventes
"
au
graphique
de
police
4
,
au
point
initial
(
50
,
150
)
//
génération
de
l'
image
Header
(
"
Content-type
:
image/png
"
)
;
ImagePng
(
çimage
)
;
//
nettoyage
ImageDestroy($image)
;
?

à
Exercice
:
(
Voir
annexe
,
Afficher
une
image
Exercice
2
)
à
l'
aide
de
une
liste
de
séléction
(
<SELECT>
)
afficher
la
liste
du
image
contenu
dans
le
répertoire
image
(
comme
exercice
précédent
)
.

pui
permettez
à
l'
utilisateur
de
afficher
l'
image
sélectionnée
en
utilisant
les
fonctions
de
la
librairie
Gd
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
94
Cours
de
initiation
Php
9
.

Gestion
du
erreurs
Introduction
Php
constitue
un
environnement
très
pratique
pour
le
débogage
et
la
gestion
du
erreurs
.

Il
permet
de
détecter
les
erreurs
et
de
y
réagir
tout
en
laissant
la
latitude
quant
à
la
façon
dont
les
message
de
erreurs
sont
affichés
.

9.1
.

Les
types
de
erreurs
Php
Trois
grands
groupes
de
erreurs
de
programmation
peuvent
être
distingués
:
erreur
de
syntaxe
ou
de
compilation
,
survenant
lorsque
la
syntaxe
du
code
est
erronée
.

erreur
de
sémantique
ou
de
exécution
,
qui
se
produit
lorsque
le
programme
exécute
un
code
dont
la
syntaxe
est
correcte
;
erreur
logique
qui
ne
provoque
pas
l'
apparition
de
un
message
de
erreur
mais
qui
a
pour
résultat
que
le
programme
effectue
autre
chose
que
ce
qui
était
souhaité
par
le
programmeur
.

Il
y
a
aussi
les
erreurs
de
environnement
qui
ne
sont
pas
dues
à
une
faute
du
programmeur
mais
à
un
ensemble
de
facteurs
de
environnement
sur
lequel
le
programmeur
n'
a
aucun
contrôle
.

Erreur
de
syntaxe
Une
erreur
de
syntaxe
se
produit
lors
de
l'
analyse
du
code
,
avant
son
exécution
.

L'
analyseur
indique
le
numéro
de
ligne
où
s'
est
produite
l'
erreur
.

Exemple
:
1
<
?

php
2
$var
=
"
test
de
erreur
"
3
echo
$var
;
4
?

à
il
manque
un
"
;
"
de
fin
de
instruction
L'
analyseur
détecte
une
erreur
à
la
ligne
3
car
il
ne
doit
pas
y
trouver
de
nouvelle
instruction
,
le
"
;
"
de
fin
de
instruction
étant
absent
de
la
ligne
2
Erreur
de
sémantique
Une
erreur
sémantique
n'
est
pas
détectée
par
l'
analyseur
car
sa
syntaxe
est
correcte
:
elle
ne
survient
que
lorsque
Php
tente
de
exécuter
la
ligne
.

Exemple
:
<
?

php
fopen("fichier.txt")
;
?

à
La
ligne
ne
présente
pas
d'
erreur
de
syntaxe
,
mais
la
fonction
fopen()nécessite
deux
paramètres
Une
erreur
de
sémantique
n'
est
pas
toujours
facilement
identifiable
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
95
Cours
de
initiation
Php
Erreur
logique
L'
erreur
logique
est
délicate
à
identifier
car
elle
correspond
à
du
code
parfait
par
sa
syntaxe
et
sa
sémantique
:
elle
ne
produit
donc
pas
de
message
de
erreur
.

Dans
la
plupart
du
cas
,
elle
aboutit
à
un
résultat
qui
n'
est
pas
celui
attendu
.

Erreur
de
environnement
même
dans
le
cas
où
le
code
est
dépourvu
de
tout
bogue
,
il
n'
est
pas
garanti
que
il
s'
exécutera
toujours
sans
erreur
.

En
effet
tout
programmeur
doit
parfois
s'
appuyer
sur
des
éléments
qu'
il
ne
contrôle
pas
,
comme
l'
échec
de
ouverture
de
une
base
de
données
,
l'
impossibilité
de
ouvrir
un
fichier
include
à
Il
est
donc
important
de
s'
assurer
de
la
présence
de
une
gestion
de
erreur
adaptée
à
une
quelconque
erreur
de
environnement
.

Les
message
de
erreur
Php
Les
message
de
erreurs
Php
sont
particulièrement
descriptifs
.

Ils
correspondent
tous
à
la
forme
suivante
:
Niveau_erreur
:
message_erreur
in
Nom_fichier
on
line
à
9.2
.

Les
niveaux
de
erreur
Php
erreur
de
analyse
:
"
Parse
error
"
C'
est
une
erreur
de
syntaxe
détectée
par
l'
analyseur
.

De
profondes
modifications
dans
le
moteur
Php
lors
du
passage
de
PHP3
à
Php4
entraîne
un
effet
totalement
différent
de
une
erreur
de
analyse
.

PHP3
est
un
langage
interprété
:
le
moteur
interpète
une
ligne
de
code
,
l'
exécute
et
passe
à
la
suivante
.

PHP4
précompile
,
et
PHP5
compile
le
script
avant
de
exécuter
le
script
.

Ce
changement
implique
que
les
erreurs
de
analyse
que
PHP3
de
détectait
pas
avant
de
avoir
atteint
la
ligne
fautive
sont
épinglées
par
Php
avant
l'
exécution
de
la
moindre
ligne
de
code
.

erreur
fatale
:
"
Fatal
error
"
C'
est
une
erreur
de
sémantique
ou
de
environnement
que
Php
ne
peut
pas
surmonter
:
elle
entraîne
l'
interruption
immédiate
du
script
,
car
Php
ne
peut
pas
continuer
sans
l'
exécution
de
la
ligne
où
s‘est
produite
l'
erreur
.

avertissement
:
"
Warning
"
si
il
renccontre
un
avertissement
,
Php
tente
de
poursuivre
l'
exécution
du
script
.

Il
s'
agit
en
général
de
erreur
suffisamment
grave
pour
compromettre
la
bonne
exécution
du
programme
(
de
nombreuses
erreurs
de
environnement
entraînent
du
warning
)
.

si
aucune
gestion
du
erreurs
ne
permet
de
réagir
à
ces
erreurs
,
la
défaillance
initiale
provoque
souvent
d'
autres
erreurs
alors
que
le
script
poursuit
son
exécution
.

remarque
Les
remarques
(
notices
)
sont
dues
à
des
erreurs
de
faible
importance
,
telle
que
une
variable
non
initialisée
.

Par
défaut
Php
n'
est
pas
configuré
pour
afficher
les
remarques
,
mais
elles
peuvent
être
activées
et
constituent
alors
un
bon
moyen
de
détecter
certaines
erreurs
.

Définition
du
niveau
de
rapport
de
erreur
Les
différents
type
de
erreur
et
de
alerte
sont
:
Valeur
Constante
Description
1
E_ERROR
Erreur
fatale
de
exécution
Note
2
E_WARNING
Alerte
de
exécution
(
erreur
non
fatale
)
4
E_PARSE
Erreur
de
compilation
8
E_NOTICE
Notes
de
exécution
(
moins
critique
que
les
alertes
)
16
E_CORE_ERROR
Erreurs
qui
surviennent
lors
de
l'
initialisation
de
Php
Php4
et
supérieur
32
E_CORE_WARNING
Alertes
qui
surviennent
lors
de
l'
initialisation
de
Php
Php4
et
supérieur
64
E_COMPILE_ERROR
Erreur
fatale
de
compilation
Php4
et
supérieur
128
E_COMPILE_WARNING
Alerte
de
compilation
(
erreur
non
fatale
)
Php4
et
supérieur
256
E_USER_ERROR
Erreur
générée
par
l'
utilisateur
Php4
et
supérieur
512
E_USER_WARNING
Alerte
générée
par
l'
utilisateur
Php4
et
supérieur
1024
E_USER_NOTICE
Note
générée
par
l'
utilisateur
Php4
et
supérieur
E_ALL
Toutes
les
erreurs
ci-dessus
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
96
Cours
de
initiation
php
Les
valeurs
ci-dessus
(
numériques
ou
symboliques
)
sont
utilisées
pour
construire
un
champ
de
bits
qui
spécifie
quelles
erreurs
rapporter
.

Les
opérateurs
de
bits
sont
utilisables
pour
combiner
ces
valeurs
et
conserver
uniquement
celles
qui
sont
intéresantes
.

Le
niveau
de
rapport
de
erreur
est
défini
dans
le
fichier
à
php.ini
»
et
au
niveau
du
script
par
la
fonction
error_reporting(
)
.

Définition
du
niveau
de
rapport
de
erreur
dans
le
«
php.ini
»
C'
est
la
définition
de
la
valeur
de
«
error_reporting
»
qui
définit
le
niveau
de
rapport
de
erreur
.

Par
défaut
,
le
niveau
de
rapport
de
erreur
est
défini
à
E_ALL
&
~E_NOTICE
(
à
la
valeur
7
pour
«
PHP3.ini
»
)
.

Définition
du
niveau
de
rapport
de
erreur
dans
le
script
:
La
fonction
error_reporting()
accepte
un
argument
qui
spécifie
les
niveaux
de
erreur
à
afficher
.

Pour
déterminer
la
valeur
de
l'
argument
,
il
faut
ajouter
les
valeurs
du
niveaux
de
erreurs
à
afficher
.

Pour
désactiver
tout
rapport
de
erreur
,
il
faut
appeler
la
fonction
avec
l'
argument
à
0
.

Le
paramètrage
par
défaut
est
équivalent
à
l'
appel
de
la
fonction
avec
la
valeur
7
(
1
p
2
p
4
)
.

Pour
l'
affichage
de
toutes
les
erreurs
,
il
faut
un
appel
de
la
fonction
à
15
(
1
p
2
p
4
p
8
)
.

Il
est
conseillé
de
remplacer
les
message
de
erreur
standard
par
une
gestion
harmonieuse
du
erreurs
de
environnement
et
de
les
journaliser
sans
afficher
les
message
standard
Php
à
l'
utilisateur
.

9.3
.

Gérer
les
erreurs
La
plupart
du
fonctions
Php
retournent
0
en
cas
de
erreur
.

Avec
un
test
il
est
donc
simple
de
gérer
l'
erreur
.

Exemple
:
<
?

php
if(mysql_connect($db
,
$utilisateur
,
$password
)
)
{
//
Le
code
de
accès
à
la
base
de
données
se
situe
ici
'
}
?

à
Suppression
du
message
de
erreur
Dans
l'
exemple
précédent
,
en
cas
de
erreur
le
message
de
erreur
sera
affiché
:
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
97
Cours
de
initiation
Php
Il
est
possible
de
supprimer
le
message
de
erreur
de
deux
façons
:
avec
la
fonction
error_reporting()
vue
précédemment
;
avec
l'
opérateur
de
contrôle
de
erreur
"
@
"
qui
permet
de
ignorer
les
message
de
erreur
générés
par
l'
expression
qu'
il
préfixe
.

si
l'
option
track_errors
de
"
php.ini
"
est
activée
,
les
message
de
erreurs
sont
sauvés
dans
la
variable
globale
$php_errormsg
,
qui
est
écrasée
à
chaque
erreur
.

Exemple
:
<
?

php
if
(
@mysql_connect($db
,
$utilisateur
,
$password
)
)
{
//
Le
code
de
accès
à
la
base
de
données
se
situe
ici
'
à
echo
"
le
message
de
erreur
:
<br><b><u>$php_errormsg</u></b>
"
;
?

à
message
de
erreur
personnalisé
Un
message
de
erreur
personnalisé
pour
l'
utilisateur
sera
mieux
perçu
que
le
message
de
erreur
standard
.

Il
suffit
de
ajouer
au
test
une
clause
"
else
"
qui
peut
contenir
le
message
de
erreur
et
éventuellement
une
instruction
pour
terminer
l'
exécution
du
script
.

La
fonction
die()
entraîne
la
fin
de
exécution
du
script
et
l'
affichage
de
une
chaîne
de
caractères
qu'
elle
prend
en
argument
(
elle
peut
également
exécuter
une
fonction
en
argument
)
.

La
fonction
exit()
joue
le
même
rôle
sans
message
.

Exemple
:
<
?

php
if
(
@mysql_connect($db
,
$utilisateur
,
$password
)
)
{
//
Le
code
de
accès
à
la
base
de
données
se
situe
ici
'
à
else
à
exit("<h1>Désolé
!

</h1><p>Impossible
de
établir
la
connexion
pour
le
moment.<br>Réessayer
plus
tard</p>
"
)
;
}
echo
"
cette
partie
du
script
ne
sera
affichée
que
si
la
connexion
a
pu
se
faire
"
;
?

à
Il
est
possible
également
de
rediriger
l'
utilisateur
vers
une
page
de
erreur
si
aucn
contenu
n'
a
encore
été
envoyé
au
navigateur
avec
la
fonction
header()
(
fonction
de
en-tête
)
:
Exemple
:
<
?

php
header("location:error.php")
//
on
redirige
vers
la
page
error.php
?

à
Il
est
également
possible
de
imprimer
un
élément
de
JavaScript
côté
client
,
si
le
navigateur
prend
en
charge
JavaScript
Exemple
:
<
?

php
if
(
!

isset($_REQUEST['var']))
à
echo
"
<form
action=\"test.php\">\n
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
98
Cours
de
initiation
Php
Votre
nom
<input
type=\"text\
"
name=\"var\">\n<br>
<input
type=\"submit\
"
value=\
"
envoyer\">\n</form>
"
;
}
else
à
if
(empty($_REQUEST['var']))
{
//
l'
utilisateur
n'
a
pas
rempli
le
champ
$var
echo
"
<script
language=\"javascript\">
alert(\"vous
devez
remplir
le
champ\
"
)
</script>
"
;
echo
"
<form
action=\"test.php\">\n
Votre
nom
<input
type=\"text\
"
name=\"var\">\n<br>
<input
type=\"submit\
"
value=\"envoyer\">\n</form>
"
;
}
else
{
//
utilisation
de
$_REQUEST['var
'
]
}
}
?

>
si
l'
utilisateur
fait
l'
erreur
de
ne
pas
remplir
le
formulaire
avant
de
l'
envoyer
,
alors
le
message
javascript
s'
affiche
Journalisation
du
erreurs
La
fonction
error_log()
met
en
journal
toute
erreur
pouvant
subvenir
.

int
error_log(
string
message
,
int
type_message
[
,string
destination
[
,string
extra_headers
]
]
)
;
Le
paramètre
message
est
le
message
de
erreur
qui
doit
être
mis
dans
le
journal
.

Le
paramètre
type_message
définit
le
type
de
cible
vers
laquelle
va
être
dirigé
le
message
de
erreur
:
0
:
le
journal
de
erreur
système
de
Php
,
qui
peut
être
défini
dans
«
php.ini
»
par
la
directive
error_log
:
par
défaut
,
c'
est
le
journal
du
serveur
web
(
error.log
de
Apache
:
…/apache/logs/error.log
)
1
:
une
adresse
électronique
transmise
comme
troisième
paramètre
2
:
un
port
de
débogage
(
si
le
débogage
est
activé
)
3
:
un
fichier
journal
spécifié
dans
le
troisème
argument
Le
paramètre
destination
est
l'
adresse
électronique
si
le
type_message
est
1
,
et
l'
emplacement
du
fichier
journal
si
le
type_message
est
3
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
99
Cours
de
initiation
Php
10
.

Programmation
orienté
objet
10.1
.

Quelques
concepts
de
programmation
orientée
objet
La
programmation
orientée
objet
,
ou
programmation
modulaire
,
permet
la
réutilisation
de
code
.

Php
permet
cette
modularité
via
la
programmation
de
librairies
ou
de
classes
.

Un
logiciel
orienté
objet
est
conçu
et
construit
sous
la
forme
de
un
ensemble
de
objets
indépendants
dotés
à
la
foi
de
attributs
et
de
opérations
qui
interagissent
pour
répondre
à
vos
besoins
.

Les
«
attributs
»
sont
des
propriétés
ou
du
variables
qui
se
rapportent
à
l'
objet
.

Les
«
méthodes
»
sont
des
actions
ou
du
fonctions
que
l'
objet
peut
accomplir
soit
pour
se
modifier
lui-même
,
soit
pour
produire
un
effet
externe
.

Les
données
contenues
dans
un
objet
sont
essentiellement
accessibles
par
le
biais
du
méthodes
de
l'
objet
qui
forment
l
’
à
interface
»
de
l'
objet
.

La
plupart
du
scripts
Web
restent
conçus
et
écrits
en
appliquant
une
méthodologie
orientée
fonctions
,
car
ils
sont
de
petite
taille
et
relativement
simples
.

mais
nombre
de
projets
Web
évoluent
de
un
ensemble
de
page
hyper
liées
vers
des
applications
complexes
qui
requièrent
une
méthodologie
de
développement
mûrement
réfléchie
.

L'
orientation
objet
peut
aider
à
gérer
la
complexité
du
projets
logiciels
,
à
augmenter
la
réutilisabilité
du
code
,
et
par
conséquent
à
réduire
les
coûts
de
maintenance
.

Un
objet
est
une
collection
unique
et
identifiable
de
données
stockées
et
de
méthodes
qui
agissent
sur
ces
données
.

Ces
objets
peuvent
être
regroupés
en
«
classes
»
.

Une
classe
est
un
ensemble
de
objets
qui
peuvent
être
différents
les
uns
du
autres
,
mais
qui
se
caractérisent
par
des
points
communs
.

Elle
contient
des
objets
qui
présentent
tous
des
méthodes
se
comportant
de
la
même
manière
,
et
des
attributs
identiques
représentant
les
mêmes
choses
,
bien
que
les
valeurs
de
ces
attributs
puissent
varier
de
un
objet
à
l'
autre
au
sein
de
la
classe
.

Différentes
classes
doivent
pouvoir
présenter
des
comportements
différents
pour
la
même
méthode
:
c'
est
le
«
polymorphisme
»
,
qui
caractérise
le
comportement
du
objets
,
plutôt
que
les
objets
eux-mêmes
.

En
Php
,
les
fonctions
membres
de
une
classe
peuvent
être
polymorphiques
.

Le
concept
d
’
«
héritage
»
permet
de
créer
une
relation
hiérarchique
entre
les
classes
,
au
moyen
de
sousclasses
.

Une
sous-classe
hérite
du
attributs
et
du
méthodes
de
sa
classe
parent
.

Ce
concept
permet
de
élaborer
et
de
enrichir
le
jeu
de
classes
existant
,
de
rendre
le
code
plus
réutilisable
,
et
constitue
un
du
atouts
indéniables
de
la
programmation
orientée
objets
:
des
méthodes
peuvent
ainsi
être
implémentées
une
seule
foi
dans
une
classe
parent
au
lieu
de
l'
être
de
nombreuses
foi
dans
des
sous-classes
séparées
.

Dans
le
cadre
de
un
développement
pour
le
Web
,
les
classes
peuvent
notamment
être
utilisées
pour
représenter
des
page
Web
,
des
composants
de
interface
utilisateur
,
du
cartes
de
achat
,
du
gestionnaires
de
erreur
,
des
catégories
de
produits
,
ou
des
clients
.

En
php
5
,
il
y
a
un
tout
nouveau
model
objet
.

La
gestion
du
objets
en
Php
a
été
complètement
réécrite
,
permettant
de
meilleurs
performances
ainsi
que
plus
de
fonctionnalités
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
100
Cours
de
initiation
Php
11
.

Les
classes
et
les
objets
(
php
4
)
Les
classes
Une
classe
est
une
collection
de
variables
et
de
fonctions
qui
fonctionnent
avec
ces
variables
.

Les
classes
forment
un
type
de
variable
Objet
.

11.1
.

Création
de
une
classe
La
création
de
une
classe
s'
effectue
au
moyen
du
mot
clé
class
:
Structure
de
la
définition
de
une
classe
class
nom_classe
{
}
Une
classe
doit
être
dotée
de
attributs
et
de
méthodes
.

Création
de
attributs
:
Lorsque
vous
déclarez
des
variables
au
sein
de
une
définition
de
classe
,
ces
variables
deviennent
les
attributs
de
la
classes
ou
appellées
aussi
membres
de
classe
La
déclaration
du
attributs
ce
fait
par
l'
intermédiaire
du
mot
clé
var
:
Structure
de
la
définition
de
un
attribut
class
nom_classe
à
var
$attribut1
;
var
$attribut2
;
}
Création
de
méthodes
:
Lorsque
vous
déclarez
des
fonctions
au
sein
de
la
définition
de
la
classe
,
elles
deviennent
les
méthodes
de
la
classe
:
Structure
de
la
définition
de
une
méthode
class
nom_classe
à
function
nom_fonction
(
$parametres
)
{
corps
de
la
fonction
}
}
Constructeur
de
classe
Il
existe
une
méthode
spéciale
,
le
constructeur
,
qui
est
est
la
fonction
appelée
automatiquement
par
la
classe
lorsque
vous
créez
une
nouvelle
instance
de
une
classe
.

La
fonction
constructeur
a
le
même
nom
que
la
classe
.

En
php
3
,
une
fonction
devient
le
constructeur
si
elle
porte
le
même
nom
que
la
classe
.

En
php
4
,
une
fonction
devient
un
constructeur
si
elle
porte
le
même
nom
que
la
classe
dans
laquelle
elle
est
définie
.

La
différence
est
subtile
,
mais
cruciale
.

Le
constructeur
est
très
utile
pour
initialiser
les
données
membres
lors
de
l'
instanciation
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
101
Cours
de
initiation
Php
Structure
de
la
définition
de
un
constructeur
class
nom_classe
à
function
nom_classe
(
$parametres
)
{
}
//
méthode
constructeur
corps
de
la
fonction
à
Attention
:
vous
ne
pouvez
pas
attribuer
le
même
nom
à
plusieurs
fonctions
.

11.2
.

Instanciation
L'
instanciation
correspond
à
la
création
de
objets
.

Les
classes
forment
un
type
de
variable
.

Pour
créer
une
variable
du
type
désiré
,
vous
devez
utiliser
l'
opérateur
new
.

vous
devez
spécifier
la
classe
dont
l'
objet
créé
sera
l'
instance
et
fournir
les
paramètres
éventuellement
requis
par
le
constructeur
de
la
classe
.

$objet
=
new
nom_classe($parametres)
;
Exemple
:
<
?

php
//
déclaration
de
la
classe
ma_classe
class
ma_classe
à
function
ma_classe($mavar)
à
echo
"
Le
constructeur
appelle
le
paramètre
<b>$mavar</b><br>
"
;
}
à
//Instanciaition
de
la
classe
ma_classe
$a
=
new
ma_classe("nouveau
paramètre
"
)
;
?

à
création
de
l'
objet
ça
de
type
ma_classe
qui
permet
de
afficher
:
Le
constructeur
appelle
le
paramètre
nouveau
paramètre
.

11.3
.

Accès
au
attributs
et
au
méthodes
de
une
classe
au
sein
de
une
classe
,
le
pointeur
$this
vous
permet
de
faire
référence
à
un
attribut
:
$this->attribut
Pour
appeler
une
méthode
il
faut
spécifier
son
nom
,
suivi
du
paramètres
requis
placés
entre
parenthèses
,
et
préciser
l'
objet
auquel
elle
appartient
:
$objet->methode($parametres)
;
Exemple
:
<
?

php
//
déclaration
de
la
classe
ma_classe
class
ma_classe
à
var
$attribut
;
function
operation($mavar)
à
$this->attribut
=
$mavar
;
//
accès
à
l'
attribut
au
sein
de
la
classe
echo
$this->attribut
.
"

attribut
"
;
}
}
$a
=
new
ma_classe()
;
$a->operation
(
"
nouvel
"
)
;
//affiche
:
nouvel
attribut
?

à
Les
accesseurs
Les
accesseurs
sont
des
fonctions
dans
la
classe
qui
de
effectuer
tous
vos
accès
au
attributs
de
une
classe
par
le
biais
de
une
seule
section
de
code
,
plutôt
que
directement
,
à
différents
niveaux
du
code
.

Avec
un
point
de
accès
unique
,
vous
pouvez
décider
toute
sorte
de
modifications
:
quels
que
soient
les
changements
à
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
102
Cours
de
initiation
Php
apporter
,
il
suffira
de
modifier
la
ou
les
fonctions
accesseur
,
les
autres
sections
de
code
ne
s'
en
trouvant
pas
affectées
.

Une
fonction
accesseur
peut
initialement
se
formuler
de
la
manière
suivante
:
<
?

php
class
accesseur
à
var
$attribut
;
function
get_attribut()
à
return
$this->attribut
;
à
function
set_attribut($newvalue)
{
$this->attribute
=
$newvalue
}
}
?

à
Ce
code
fournit
des
fonctions
qui
permettent
de
accéder
à
l'
attribut
$attribute
:
la
fonction
get_attribute()
renvoie
la
valeur
de
$attribute
,
tandis
que
la
fonction
set_attribute()
affecte
une
nouvelle
valeur
à
$attribute
.

11.4
.

Héritage
Une
classe
peut
être
déclarée
comme
étant
une
sous-classe
de
une
autre
classe
à
l'
aide
du
mot
clé
extends
.

Exemple
:
<
?

php
class
B
extends
à
{
var
$attributB
;
function
operationB()
à
corps
de
la
fonction
à
}
?

à
La
classe
b
est
sous-classe
de
la
classe
a
:
elle
hérite
des
attributs
et
du
méthodes
de
la
classe
a
,
par
contre
la
classe
a
,
parent
de
la
classe
B
ne
peut
en
aucun
cas
hériter
du
attributs
et
du
méthodes
de
Bo
Exemple
:
<
?

php
class
parent
à
var
$attribut1
;
function
operation1()
à
$this->attribut1
;
echo
"
L'
attribut
de
parent
est
<b>$this->attribut1
</b>(grace
a
operation1).<br><br>
"
;
}
//accesseur
de
attribut1
function
get_attribut1()
à
return
$this->attribut1
;
à
function
set_attribut1
(
$new_attribut
)
à
$this->attribut1
=
$new_attribut
;
}
à
class
fils
extends
parent
à
var
$attribut2
;
function
operation2()
à
$this->attribut2
;
echo
"
L'
attribut
de
fils
est
<b>$this->attribut2
</b>(grace
à
l'
operation2).<br><br>
"
;
}
}
//Instanciation
de
la
classe
fils
dans
l'
Objet
b
bb
=
new
fils()
;
//Affectation
de
une
nouvelle
valeur
grace
à
l'
accesseur
$b->set_attribut1(40)
;
//Affichage
de
la
valeur
de
l'
attribut1
grace
à
l'
accesseur
echo
"
L'
attribut
de
parent
est
<b>".$b->get_attribut1(
)
.
"

</b>
(
grace
à
get_attribut1).<br>
"
;
//Exécution
de
la
méthode
de
la
classe
fils
qui
est
héritée
de
la
classe
parent
//Affichage
de
la
valeur
de
l'
attribut1
grace
à
la
méthode
operation1
de
la
class
parent
$b->operation1()
;
//
affiche
:
L'
attribut
de
parent
est
40
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
103
Cours
de
initiation
Php
//Affectation
de
une
nouvelle
valeur
sans
accesseur
$b->attribut2
=
10
;
//Affichage
de
la
valeur
de
l'
attribut2
sans
accesseur
echo
"
L'
attribut
de
parent
est
<b>".$b->attribut2
.
"

</b>
(
grace
a
l'
attribut2).<br>
"
;
//Exécution
de
la
méthode
de
la
classe
fils
//Affichage
de
la
valeur
de
l'
attributé
grace
à
la
méthode
operation2
de
la
class
fils
$b->operation2()
;
//
affiche
:
L'
attribut
de
fils
est
10
//
tous
les
accès
au
attributs
et
au
opérations
sont
possibles
pour
un
objet
de
la
//classe
fils
//Instanciation
de
la
classe
parent
dans
l'
Objet
a
$a
=
new
parent()
;
//Affectation
de
une
nouvelle
valeur
grace
à
l'
accesseur
$a->set_attribut1(40)
;
//Affichage
de
la
valeur
de
l'
attribut1
grace
à
l'
accesseur
echo
"
L'
attribut
de
parent
est
<b>".$a->get_attribut1(
)
.
"

</b>
(
grace
a
get_attribut1).<br>
"
;
//Exécution
de
la
méthode
de
la
classe
parent
//Affichage
de
la
valeur
de
l'
attribut1
grace
à
la
méthode
operation1
de
la
class
parent
$a->operation1()
;
//
//Affectation
de
une
nouvelle
valeur
sans
accesseur
$a->attribut2
=
10
;
//Affichage
de
la
valeur
de
l'
attribut2
sans
accesseur
echo
"
L'
attribut
de
parent
est
<b>".$a->attribut2
.
"

</b>grace
a
l'
attribut2.<br>
"
;
//Exécution
de
la
méthode
de
la
classe
fils
operation2
n'
est
pas
autorisée
émpuisque
la
classe
parent
n'
hérite
pas
de
la
classe
fils
//Affichage
de
la
valeur
de
l'
attributé
grace
à
la
méthode
operation2
de
la
class
fils
//Affiche
Fatal
error
:
Call
to
undefined
function
:
operation2()
in
//d:\coursphp\exercice\test.php
on
line
77
$a->operation2()
;
//
affiche
:
L'
attribut
de
fils
est
10
?

à
L'
opérateur
de
contexte
de
classe
(
:
:
)
L'
opérateur
:
:
permet
de
faire
référence
au
fonctions
et
variables
de
une
classe
de
base
,
ou
bien
de
utiliser
des
méthodes
de
classes
qui
n'
ont
pas
encore
de
objets
créés
.

Exemple
:
<
?

php
class
à
{
function
example()
à
echo"Je
suis
la
fonction
originale
A::example().<br
/>\n
"
;
}
à
class
B
extends
à
à
function
example()
à
echo
"
je
suis
la
fonction
redéfinie
B::example().<br
/>\n
"
;
A::example()
;
}
}
//
Il
n'
y
a
pas
de
objets
de
classe
ao
//
L'
affichage
est
:
//
je
suis
la
fonction
originale
A::example().<br
/>
A::example()
;
//
Création
de
un
objet
de
la
classe
Bo
$b
=
new
b
;
//
L'
affichage
est
:
//
je
suis
la
fonction
redéfinie
B::example().<br
/>
//
je
suis
la
fonction
originale
A::example().<br
/>
$b->example()
;
?

>
Les
exemples
ci-dessus
appellent
la
fonction
example()
dans
la
classe
à
,
mais
il
n'
y
a
pas
encore
d'
objet
de
classe
a
,
alors
il
n'
est
pas
possible
de
écrire
$a->example(
)
.

à
la
place
,
on
appelle
la
fonction
example()
comme
une
fonction
de
classe
,
c'est-à-dire
avec
le
nom
de
la
classe
elle-même
,
et
sans
objet
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
104
Cours
de
initiation
Php
Il
y
a
des
fonctions
de
classe
,
mais
pas
de
variables
de
classe
.

En
fait
,
il
n'
y
a
aucun
objet
au
moment
de
l'
appel
de
la
fonction
.

Donc
,
une
fonction
de
classe
ne
peut
accéder
à
aucune
variable
(
mais
elle
peut
accéder
au
variables
locales
et
globales
)
.

Il
faut
proscrire
l'
utilisation
de
$this
.

Dans
l'
exemple
ci-dessus
,
la
classe
B
redéfinit
la
fonction
example(
)
.

La
définition
originale
dans
la
classe
à
est
remplacée
par
celle
de
b
,
et
n'
est
plus
accessible
depuis
b
,
à
moins
que
vous
n'
appeliez
spécifiquement
la
fonction
example()
de
la
classe
à
avec
l'
opérateur
:
:
.

Ecrivez
A::example()
pour
cela
(
en
fait
,
il
faudrait
écrire
parent::example()
,
comme
expliqué
dans
la
section
suivante
)
.

Dans
ce
contexte
,
il
y
a
un
objet
courant
,
qui
peut
avoir
d'
autres
variables
objets
.

de
ce
fait
,
lorsqu'
il
est
utilisé
depuis
une
méthode
de
un
objet
,
vous
pouvez
utiliser
$this
.

11.5
.

Redéfinition
Il
est
possible
,
dans
une
sous-classe
,
de
re-déclarer
les
mêmes
attributs
que
ceux
de
la
classe
parent
en
leur
donnant
une
valeur
par
défaut
différente
,
ainsi
que
les
mêmes
méthodes
en
leur
donnant
une
fonctionnalité
différente
:
c'
est
la
redéfinition
.

La
redéfinition
de
attributs
ou
de
méthodes
dans
une
sous-classe
n'
affecte
pas
la
classe
parent
.

Lorsqu'
une
redéfinition
est
fournie
,
elle
devient
prépondérante
et
remplace
la
définition
de
origine
.

php
ne
permet
pas
de
redéfinir
une
fonction
tout
en
gardant
la
possibilité
de
invoquer
la
version
définie
dans
le
parent
.

Exemple
:
<
?

php
class
à
{
var
$attribut
=
"
valeur
défaut
"
;
function
operation()
à
echo
"
<b>Définition
de
une
classe</b><br>
"
;
echo
"
La
valeur
de
\$attribut
est
$this->attribut
"
;
echo
"
<br><br>
"
;
}
à
class
B
extends
à
{
var
$attribut
=
"
valeur
différente
"
;
function
operation()
à
echo
"
<b>Nouvelle
définition</b><br>
"
;
echo
"
La
valeur
de
\$attribut
est
$this->attribut
"
;
echo
"
<br><br>
"
;
}
}
//Instanciation
de
la
classe
à
dans
l'
Objet
a
$a
à
new
aùà
;
/*
affiche
:
Définition
de
une
classe
La
valeur
de
$attribut
est
valeur
défaut*/
$a->operation()
;
//Instanciation
de
la
classe
b
dans
l'
Objet
b
bb
=
new
Büë
;
/*
affiche
:
Nouvelle
définition
valeur
de
$attribut
est
valeur
différente*/
$b->operation()
;
?

à
Manipulation
de
classes
et
de
objets
de
origine
similaire
.

Exemple
:
<
?

php
class
vehicule
à
var
$roues
;
var
$passagers
;
var
$classname
=
"
véhicule
"
;
var
$nom
=
"
"
;
function
vehicule($val1
,
$val2
)
à
$this->roues
=
$val1
;
$this->passagers
=
$val2
;
à
function
init_nom($nom_type)
à
$this->nom
=
$nom_type
;
à
function
jesuisçë
à
echo
"
je
suis
un
véhicule
à
$this->roues
roues
"
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
105
Cours
de
initiation
Php
echo
"
et
$this->passagers
passagers
,
"
;
echo
"
mon
type
est
$this->classname
.
"
;
if
(
$this->nom
)
à
echo
"
je
me
appelle
$this->nom
.
"
;
echo
"
<br><br>
"
;
}
}
}
//
héritage
de
la
classe
véhicule
class
velo
extends
vehicule
à
var
$classname
=
"
vélo
"
;
//
redéfinition
de
l'
attribut
$classname
//
"
construction
"
de
la
classe
vélo
function
velo()
à
$this->vehicule(2
,
1
)
;
}
}
//
véhicule
motorisé
issu
de
la
classe
vehicule
class
mvehicule
extends
vehicule
à
var
$classname
=
"
motorisé
"
;
//
redéfinition
de
l'
attribut
$classname
vareur
;
$mot
function
init_moteur($cylindre)
à
$this->moteur
=
$cylindre
;
à
function
jesuisçë
{
//
on
surcharge
la
fonction
jesuisçë
de
la
classeehicule
v
echo
"
Mon
moteur
est
de
$this->moteur
cc.<br>
"
;
vehicule::jesuis()
;
//appel
à
la
méthode
jesuisçë
de
la
classe
vehicule
à
}
//
les
classes
voiture
et
moto
héritent
de
la
classe
mvehicule
class
voiture
extends
mvehicule
à
var
$classname
=
"
voiture
"
;
function
oiture()
$this->vehicule(4,5)
;
}
}
class
moto
extends
mvehicule
à
var
$classname
=
"
moto
"
;
function
moto()
à
$this->vehicule(2
,
2
)
;
}
}
//
création
du
objets
bmx
,
cb
,
twingo
$bmx
à
new
elo
;
$cb
=
new
moto
;
$twingo
=
new
voiture
;
$bmx->init_nom
(
"
Bmx
"
)
;
//initialisation
de
ces
objets
$twingo->init_nom("TWINGO")
;
$twingo->init_moteur(1600)
;
$cb->init_nom("CB
500
"
)
;
$cb->init_moteur(500)
;
//
on
appelle
la
fonction
jesuisçë
de
ces
objets
pour
savoir
qui
ils
sont
$bmx->jesuis()
;
$twingo->jesuis()
;
$cb->jesuis()
;
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
106
Cours
de
initiation
php
Les
classes
et
les
objets
(
Php
5
)
Php
5
inclut
un
nouveau
modèle
objet
.

Le
traitement
du
objets
en
php
a
complètement
été
réécrit
pour
arriver
à
de
meilleures
performances
et
plus
de
fonctionnalités
.

Dans
les
versions
précédentes
de
Php
,
les
objets
sont
traités
comme
des
types
primitifs
(
par
exemple
les
entiers
ou
les
chaînes
de
caractères
)
.

L'
inconvénient
de
cette
méthode
est
que
sémantiquement
,
l'
objet
en
entier
était
copié
lorsqu'
une
variable
était
assignée
ou
passée
comme
paramètre
à
une
fonction
.

Dans
la
nouvelle
approche
,
les
objets
sont
référencés
par
un
pointeur
et
non
pas
leur
valeur
(
on
peut
penser
à
un
pointeur
en
tant
que
identifiant
de
objet
)
.

Beaucoup
de
développeurs
Php
ne
se
rendent
pas
compte
du
caprices
lors
de
la
copie
dans
l'
ancien
modèle
objet
et
,
par
conséquent
,
la
majorité
du
applications
Php
devrait
fonctionner
directement
ou
avec
très
peu
de
modifications
.

Les
modifications
apportées
à
Php
5
et
au
Zend
Engine
2
augmentent
considérablement
les
capacités
et
les
performances
de
Php
.

Une
attention
toute
particulière
a
été
apportée
à
ce
que
cette
nouvelle
version
soit
la
plus
compatible
possible
avec
les
scripts
antérieurs
.

Ainsi
la
migration
de
votre
code
de
Php
4
vers
Php
5
devrait
être
aisée
.

La
plupart
du
scripts
Php
4
devraient
être
prêts
à
fonctionner
sans
nécessiter
la
moindre
modification
.

Il
existe
toutefois
quelques
différences
et
vous
devriez
tester
vos
codes
avant
de
changer
de
version
en
production
Quelques
exemples
de
changements
:
•
•
•
Un
objet
sans
propriété
n'
est
plus
considéré
comme
vide
(
empty()
)
.

Dans
certains
cas
,
les
classes
doivent
être
déclarées
avant
de
être
utilisées
.

Cela
survient
uniquement
si
les
nouvelles
fonctionnalités
de
Php
5
sont
utilisées
.

Sinon
,
le
comportement
sera
le
même
que
avant
.

Les
fonctions
get_class()
,
get_parent_class()
et
get_class_methods()
retournent
désormais
le
nom
de
la
classe
comme
elle
a
été
déclarée
(
sensible
à
la
casse
)
,
ce
qui
peut
causer
des
problèmes
dans
vos
anciens
scripts
qui
utilisent
le
comportement
précédent
(
le
nom
de
la
classe
était
toujours
retourné
en
minuscules
)
.

Une
solution
possible
est
de
rechercher
ces
fonctions
dans
tous
vos
anciens
scripts
et
de
utiliser
la
fonction
strtolower(
)
.

11.6
.

Création
de
une
classe
Chaque
définition
de
classe
commence
par
le
mot-clé
class
,
suivi
par
le
nom
de
la
classe
,
qui
peut
être
quelconque
à
condition
que
ce
ne
soit
pas
un
mot
réservé
en
Php
.

Suivent
une
paire
de
parenthèses
contenant
la
définition
du
membres
et
du
méthodes
.

Une
pseudo-variable
$this
est
disponible
lorsqu'
une
méthode
est
appelée
depuis
un
contexte
objet
.

$this
est
une
référence
à
l'
objet
appelé
(
habituellement
,
l'
objet
auquelle
la
méthode
appartient
,
mais
ce
peut
être
un
autre
objet
si
la
méthode
est
appelée
de
manière
statique
depuis
le
contexte
de
un
autre
objet
)
.

Ce
comportement
est
illustré
dans
l'
exemple
suivant
:
Exemple
19-1
.

La
variable
$this
en
programmation
objet
Structure
de
la
définition
de
une
classe
class
nom_classe
{
}
Exemple
:
/*
définition
simple
de
une
classe
*/
<
?

php
class
SimpleClass
{
//
déclaration
de
un
membre
public
$var
=
e
une
valeur
par
défaut
'
;
//
déclaration
de
la
méthode
public
function
displayVar()
à
echo
$this->var
;
}
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
107
Cours
de
initiation
Php
}
?

à
Constructeurs
et
destructeurs
Constructeurs
Php
5
permet
au
développeurs
de
déclarer
des
constructeurs
pour
les
classes
.

Les
classes
qui
possèdent
une
méthode
constructeur
appellent
cette
méthode
à
chaque
création
de
une
nouvelle
instance
de
l'
objet
,
ce
qui
est
intéressant
pour
toutes
les
initialisations
dont
l'
objet
a
besoin
avant
de
être
utilisé
.

void
__construct
(
[
mixed
args
[
,
...
]
]
)
Note
:
Les
constructeurs
parents
ne
sont
pas
appelés
implicitement
si
la
classe
enfant
définie
un
constructeur
.

si
vous
voulez
utiliser
un
constructeur
parent
,
il
sera
nécessaire
de
faire
appel
à
parent::__construct(
)
.

Exemple
:
<
?

php
class
BaseClass
à
function
__construct()
à
print
"
In
BaseClass
constructor\n
"
;
}
à
class
SubClass
extends
BaseClass
à
function
__construct()
{
parent::__construct()
;
print
"
In
SubClass
constructor\n
"
;
}
}
$obj
=
new
BaseClass()
;
$obj
=
new
SubClass()
;
?

>
Pour
des
raisons
de
compatibilité
ascendante
,
si
php
5
ne
peut
pas
trouver
une
fonction
__construct()
pour
une
classe
donnée
,
il
cherchera
une
fonction
constructeur
représentée
,
comme
dans
l'
ancien
style
(
php
<
5
)
,
par
le
nom
de
la
classe
.

Effectivement
,
cela
signifie
que
le
seul
cas
où
il
pourrait
y
avoir
un
problème
de
compatibilité
est
celui
où
votre
classe
contiendrait
une
méthode
nommée
__construct()
et
que
vous
en
ayez
un
autre
usage
.

Destructeurs
void
__destruct
(
void
)
Php
5
introduit
un
concept
de
destructeur
similaire
au
autres
langages
orientés
objet
,
comme
le
C++
.

La
méthode
destructeur
doit
être
appelée
aussitôt
que
toutes
les
références
à
un
objet
particulier
sont
effacées
ou
lorsque
l'
objet
est
explicitement
détruit
.

Exemple
:
<
?

php
class
MyDestructableClass
à
function
__construct()
à
print
"
In
constructor\n
"
;
$this->name
=
"
MyDestructableClass
"
;
}
function
__destruct()
à
print
"
Destruction
de
"
.

$this->name
.

"
\n
"
;
}
}
$obj
=
new
MyDestructableClass()
;
?

à
Tout
comme
le
constructeur
,
le
destructeur
parent
n'
est
pas
appelé
implicitement
par
le
moteur
.

Pour
exécuter
le
destructeur
parent
,
vous
devez
appeler
explicitement
la
fonction
parent::__destruct
dans
le
corps
du
destructeur
.

Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
108
Cours
de
initiation
Php
11.7
.

Création
de
une
instance
Pour
créer
une
instance
de
un
objet
,
un
nouvel
objet
doit
être
créé
et
assigné
à
une
variable
.

Un
objet
doit
toujours
être
assigné
lors
de
la
création
de
un
nouvel
objet
à
moins
que
un
l'
objet
ait
un
constructeur
défini
qui
lance
un
exception
en
cas
de
erreur
.

Exemple
:
<
?

php
$instance
à
new
SimpleClass()
?

>
11.8
.

Assignation
de
un
objet
Lors
de
l'
assignation
de
un
instance
déjà
créée
de
un
objet
à
une
variable
,
la
nouvelle
variable
accédera
à
la
même
instance
de
l'
objet
assigné
.

Ce
comportement
est
le
même
que
lors
du
passage
de
une
instance
à
une
fonction
.

Une
nouvelle
instance
de
un
objet
déjà
créé
peut
être
effectuée
par
clonage
.

Exemple
:
<
?

php
$assigned
=
$instance
;
$reference
=&
$instance
;
$instance->var
=
'
$assigned
aura
cette
valeur
'
;
$instance
à
null
;
//
$instance
et
$reference
deviennent
null
var_dump($instance)
;
var_dump($reference)
;
var_dump($assigned)
;
/*
L'
exemple
ci-dessus
va
afficher
:
NULL
NULL
object(SimpleClass)#1
(
1
)
{
[
"
var"]=>
string(30)
"
$assigned
aura
cette
valeur
"
}
*/
?

à
11.9
.

Héritage
Une
classe
peut
hériter
du
méthodes
et
du
membres
de
une
autre
classe
en
utilisant
le
mot
clé
extends
dans
la
déclaration
.

Il
n'
est
pas
possible
de
étendre
de
multiples
classes
,
une
classe
peut
uniquement
hériter
de
une
seule
classe
de
base
.

Les
méthodes
et
membres
hérités
peuvent
être
surchargés
,
à
moins
que
la
classe
parent
ait
défini
une
méthode
comme
final
.

Pour
surcharger
,
il
suffit
de
redéclarer
la
méthode
avec
le
même
nom
que
celui
défini
dans
la
classe
parent
.

Il
est
possible
de
accéder
à
une
méthode
ou
un
membre
surchargé
avec
l'
opérateur
parent
:
:
Exemple
:
<
?

php
class
ExtendClass
extends
SimpleClass
{
//
Redéfinition
de
la
méthode
parent
function
displayVar()
{
echo
"
Classe
étendue\n
"
;
parent::displayVar()
;
}
}
$extended
=
new
ExtendClass()
;
$extended->displayVar()
;
?

à
L'
exemple
ci-dessus
va
afficher
:
Classe
étendue
une
valeur
par
défaut
11.10
.

Visibilité
La
visibilité
de
une
propriété
ou
de
une
méthode
peut
être
définie
en
préfixant
la
déclaration
avec
un
mot-clé
:
public
,
protected
ou
private
.

Les
éléments
déclarés
publics
(
public
)
peuvent
être
utilisés
par
n'
importe
quelle
partie
du
programme
.

L'
accès
au
éléments
protégés
(
protected
)
est
limité
au
classes
héritées
(
et
à
la
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
109
Cours
de
initiation
Php
classe
qui
a
défini
l'
élément
)
.

L'
accès
au
éléments
privés
(
private
)
est
uniquement
réservé
à
la
classe
qui
les
a
définis
.

Visibilité
du
membres
Les
classes
membres
doivent
être
définies
comme
publiques
,
protégées
ou
privées
.

Exemple
:
/*
Déckaration
du
membres
*/
<
?

php
/**
*
Définition
de
MyClass
à
class
MyClass
à
public
$public
=
'
Public
'
;
protected
$protected
=
'
Protected
'
;
private
$private
=
'
Private
'
;
function
à
echo
echo
echo
}
printHello()
$this->private
;
$this->protected
;
$this->private
;
}
$obj
=
new
MyClass()
;
echo
$obj->public
;
//
Fonctionne
echo
$obj->protected
;
//
Erreur
fatale
echo
$obj->private
;
//
Erreur
fatale
$obj->printHello()
;
//
Affiche
Public
,
Protected
et
Private
/**
*
Définition
de
MyClass2
*/
class
MyClass2
extends
MyClass
{
//
On
peut
redéclarer
les
éléments
publics
ou
protégés
,
mais
pas
les
privés
protected
$protected
=
'
Protected
'
;
function
printHello()
{
echo
$this->public
;
echo
$this->protected
;
echo
$this->private
;
}
}
$obj2
=
new
MyClass2()
;
echo
$obj->public
;
//
Fonctionne
echo
$obj2->private
;
//
Indéfini
echo
$obj2->protected
;
//
Erreur
fatale
$obj2->printHello()
;
//
Affiche
Public
,
Protected2
et
non
Private
?

à
Note
:
La
méthode
de
déclaration
de
variable
en
Php
4
avec
le
mot
clé
var
n'
est
plus
valide
pour
les
objets
en
Php
5
.

Pour
des
raisons
de
compatibilité
,
une
variable
déclarée
ainsi
aura
automatiquement
une
visibilité
publique
et
une
erreur
de
niveau
E_STRICT
sera
générée
.

Visibilité
du
méthodes
Les
méthodes
du
classes
doivent
être
définies
en
tant
que
publiques
,
privées
ou
protégées
.

Les
méthodes
sans
déclaration
seront
automatiquement
définies
comme
étant
publiques
.

Exemple
:
/*
Déckaration
de
une
méthode
*/
<
?

php
/**
*
Définition
de
MyClass
à
class
MyClass
Daniel
Hadjadj
Daniel
©
dahadjadj@free.fr
-
2005
-
page
110
Cours
de
initiation
Php
{
//
Les
contructeurs
doivent
être
publics
public
function
__construct()
à
}
//
Déclaration
de
une
méthode
publique
public
function
MyPublic()
{
}
//
Déclaration
de
une
méthode
protégée
protected
function
MyProtected()
{
}
//
Déclaration
de
une
méthode
privée
private
function
MyPrivate()
{
}
//
Celle
-ci
sera
publique
function
Foo()
à
$this->MyPublic()
;
$this->MyProtected()
;
$this->MyPrivate()
;
}
}
$myclass
=
new
MyClass
;
$myclass->MyPublic()
;
//
Fonctionne
$myclass->MyProtected()
;
//
Erreur
fatale
$myclass->MyPrivate()
;
//
Erreur
fatale
$myclass->Foo()
;
//
Public
,
Protected
et
Private
fonctionnent
/**
*
Définition
de
MyClass2
*/
class
MyClass2
extends
MyClass
{
//
Celle
-ci
sera
publique
function
Fooôçë
{
$this->MyPublic()
;
$this->MyProtected()
;
$this->MyPrivate()
;
//
Erreur
fatale
}
}
$myclass2
=
new
MyClass2
;
$myclass2->MyPublic()
;
//
Fonctionne
$myclass2->Foo2()
;
//
Public
et
Protected
fonctionnent
,
non
pas
Private
?

à
L'
opérateur
de
résolution
de
portée
(
:
:
)
L'
opérateur
de
résolution
de
portée
ou
,
en
termes
plus
simples
,
le
symbole
"
double
deux
points
"
(
:
:
)
,
fournit
un
moyen
de
accéder
au
membres
statiques
ou
constants
ainsi
que
au
éléments
redéfinis
par
la
classe
.

Lorsque
vous
référencez
ces
éléments
en
dehors
de
la
définition
de
la
classe
,
utilisez
le
nom
de
la
classe
.

Exemple
:
/*
en
dehors
de
la
définition
de
la
classe
/*
<
?

php
class
MyClass
à
const
CONST_VALUE
=
e
Une
valeur
constante
'
;
}
echo
MyClass::CONST_VALUE
;
?

>
Deux
mots-clé
spéciaux
,
self
et
parent
,
sont
utilisés
pour
accéder
au
membres
ou
au
méthodes
depuis
la
définition
de
la
classe
.

Exemple
:
/*
depuis
la
définition
de
la
classe
*/
<
?

php
class
OtherClass
extends
MyClass
à
public
static
$my_static
=
'
variable
statique
'
;
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
111
Cours
de
initiation
Php
public
static
function
doubleColon()
à
echo
parent::CONST_VALUE
.

"
\n
"
;
echo
self::$my_static
.

"
\n
"
;
}
}
OtherClass::doubleColon()
;
?

>
Lorsqu'
une
classe
étendue
redéfinit
une
méthode
de
la
classe
parente
,
Php
n'
appelera
pas
la
méthode
de
origine
.

Il
appartient
à
la
méthode
dérivée
de
appeler
la
méthode
de
origine
en
cas
de
besoin
.

Cela
est
également
valable
pour
les
définitions
du
constructeurs
et
destructeurs
,
les
surcharges
et
les
méthodes
magiques
.

Exemple
:
/*
Appel
de
une
méthode
parent
*/
<
?

php
class
MyClass
{
protected
function
myFunc()
à
echo
"
MyClass::myFunc()\n
"
;
}
à
class
OtherClass
extends
MyClass
{
//
Dépassement
de
la
définition
parent
public
function
myFunc()
{
//
mais
appel
de
la
fonction
parent
parent::myFunc()
;
echo
"
OtherClass::myFunc()\n
"
;
}
}
$class
=
new
OtherClass()
;
$class->myFunc()
;
?

à
11.11
.

Abstraction
de
objets
Php
5
introduit
les
classes
et
les
méthodes
abstraites
.

Il
n'
est
pas
autorisé
de
créer
une
instance
de
une
classe
définie
comme
abstraite
.

Toutes
les
classes
contenant
au
moins
une
méthode
abstraite
doivent
également
être
abstraites
.

Pour
définir
une
méthode
abstraite
,
il
faut
simplement
déclarer
la
signature
de
la
méthode
et
ne
fournir
aucune
implémentation
.

La
classe
qui
implémente
la
méthode
abstraite
doit
être
définie
avec
la
même
visibillité
ou
une
plus
faible
.

si
la
méthode
abstraite
est
définie
en
tant
que
protégée
,
la
fonction
l'
implémentant
doit
être
définie
en
tant
que
protégée
ou
publique
.

Exemple
:
/*
Exemple
de
classe
abstraite
*/
<
?

php
abstract
class
AbstractClass
à
//
Force
la
classe
étendue
à
définir
cette
méthode
abstract
protected
function
getValue()
;
//
méthode
commune
public
function
printOut()
à
print
$this->getValue()
;
}
à
class
ConcreteClass1
extends
AbstractClass
à
protected
function
getValue()
à
return
"
ConcreteClass1
"
;
}
à
class
ConcreteClass2
extends
AbstractClass
à
protected
function
getValue()
{
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
112
Cours
de
initiation
Php
return
"
ConcreteClass2
"
;
}
}
$class1
=
new
ConcreteClass1
;
$class1->printOut()
;
$class2
=
new
ConcreteClass2
;
$class2->printOut()
;
?

>
du
code
ancien
n'
ayant
aucune
classe
ou
fonction
nommée
abstract
devrait
fonctionner
sans
modifications
.

11.12
.

Interfaces
Les
interfaces
objet
vous
permettent
de
créer
du
code
qui
spécifie
quelles
méthodes
et
variables
une
classe
peut
implémenter
,
sans
avoir
à
définir
comment
ces
méthodes
seront
gérées
.

Les
interfaces
sont
définies
en
utilisant
le
mot
clé
interface
,
de
la
même
façon
que
une
classe
standard
mais
sans
aucun
contenu
de
méthode
.

Les
classes
qui
implémentent
une
interface
doivent
le
faire
en
utilisant
le
mot
clé
implements
et
doivent
contenir
les
définitions
de
toutes
les
méthodes
listées
dans
l'
interface
.

Les
classes
qui
implémentent
plus
de
une
interface
doivent
le
faire
en
listant
chaque
interface
,
séparées
de
une
virgule
.

Toutes
les
méthodes
déclarées
dans
une
interface
doivent
être
publiques
.

si
une
classe
définissant
une
interface
n'
implémente
pas
toutes
les
méthodes
dans
l'
interface
,
une
erreur
fatale
vous
indiquera
quelle
méthode
n'
a
pas
été
implémentée
.

Exemple
:
/*
Exemple
de
interface
*/
<
?

php
//
Declaration
de
l'
interface
'
iTemplate
'
interface
iTemplate
à
public
function
setVariable($name
,
$var
)
;
public
function
getHtml($template)
;
}
//
Implémentation
de
l'
interface
//
Ceci
va
fonctionner
class
Template
implements
iTemplate
à
private
$vars
=
array()
;
public
function
setVariable($name
,
$var
)
à
$this->vars[$name
]
=
$var
;
}
public
function
getHtml($template)
à
foreach($this->vars
as
$name
=>
$value
)
à
$template
=
str_replace('{
'
.

$name
.

'
}
'
,
$value
,
$template
)
;
à
return
$template
;
}
}
//
Ceci
ne
fonctionnera
pas
//
Fatal
error
:
Class
BadTemplate
contains
1
abstract
methods
//
and
must
therefore
be
declared
abstract
(
iTemplate::getHtml
)
class
BadTemplate
implements
iTemplate
à
private
$vars
=
array()
;
public
function
setVariable($name
,
$var
)
à
$this->vars[$name
]
=
$var
;
}
}
?

à
Daniel
Hadjadj
Daniel
à
dahadjadj@free.fr
-
2005
-
page
113

