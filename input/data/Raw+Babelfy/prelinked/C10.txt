Développement
Web
–
PHP
Cours
1
Organisation
•
12
séances
•
séance
=
1h30
cours
1h30
TD
Projet
•
Projet
binôme
solo
selon
groupes
premier
semestre
•
1
Devoir
Table
•
Interros
Surprises
10
minutes
•
Participation
travail
continu
notés
sous
forme
points
bonus
•
TD
semaine
divers
documents
informations
diverses
EPI
•
Fin
cours
avril
•
Evaluation
–
Contrôle
continu
50
•
Devoir
Maison
•
Projet
•
1
Devoirs
Table
•
Interrogations
surprises
•
Bonus
Participation
–
Examen
partiel
50
Programme
cours
•
Introduction
générale
web
–
Architectures
techniques
–
Rappel
HTML
différence
Statique/Dynamique
–
Explications
environnement
web
–
Premiers
PHP
–
Installation
WAMP/MAMP/XAMP
•
PHP
•
PHP
MySQL
Architecture
générale
site
web
Base
Données
information
brute
Navigateur
Serveur
Web
utilisateur
site
visible
Serveur
Application
traitements
internes
Front
Office
Back
Office
Architecture
générale
site
web
Base
Données
Navigateur
Serveur
Web
Serveur
Application
Front
Office
Back
Office
Architecture
générale
site
web
Navigateur
Serveur
Web
&
Base
Données
Apache
Front
Office
Back
Office
Architecture
générale
site
web
Navigateur
Serveur
Web
&
Base
Données
Apache
XAMP
Front
Office
Back
Office
Rappel
versions
technologies
Vérifiez
bien
versions
tutoriaux
trouverez
internet
§
HTML
vraiment
version
minimale
hormis
1.1
navigateurs
interprètent
peuvent
§
HTML
5
version
actuelle
4
passe
aussi
§
PHP
4
obsolète
non-supporté
+
failles
sécurité
§
PHP
5.6
supporté
§
PHP
7.3
version
actuelle
§
MySQL
8
version
actuelle
peu
soucis
langage
car
standard
SQL
excepté
tutorial
=
MySQL
3.0
Rappel
versions
technologies
Vérifiez
bien
versions
tutoriaux
trouverez
internet
§
Documentation
PHP
http
//php.net/manual/fr/
§
Exemple
concret
fonctions
chaînes
http
//php.net/manual/fr/ref.strings.php
Rappel
HTML
•
Header
/
Body
•
Listes
•
Tableaux
•
Images
Liens
HTML
Chaque
balise
ouverte
html
doit
être
fermée
html
balise
/balise
head
body
head
title
Exemple
HTML
/title
title
h1
p
p
/head
body
i
b
h1
Exemple
/h1
p
Ceci
i
really
/i
b
Important
/b
/p
p
L'informatique
peut
aider
/p
/body
/html
HTML
•
Structure
document
HTML
DOCTYPE
html
Indication
idiome
HTML
html
head
meta
name=
author
content=
Entête
head
Manuele
Kirsch
Pinheiro
/
Informations
générales
title
Exemple
HTML
/title
document
/head
body
h1
Exemple
/h1
p
Ceci
i
really
/i
Corps
body
b
Important
/b
/p
Contenu
document
p
L'informatique
peut
aider
/p
/body
/html
HTML
•
Elément
DOCTYPE
–
Indique
navigateur
quelle
version
HTML
utilisée
–
HTML
4.01
•
Couramment
compris
tous
navigateurs
DOCTYPE
html
PUBLIC
-//W3C//DTD
HTML
4.01
Transitional//EN
http
//www.w3.org/TR/html4/loose.dtd
–
HTML
5
DOCTYPE
html
•
cours
définition
•
Reconnu
uniquement
navigateurs
plus
récents
Google
Chrome
16.0
Firefox
9.0
Internet
Explorer
9
HTML
•
Eléments
entête
head
head
meta
name=
author
–
Informations
complémentaires
content=
Manuele
/
document
title
Exemple
HTML
/title
/head
–
contenu
document
informations
affichées
page
–
Typiquement
informations
moteurs
recherche
•
Balises
–
titre
/titre
titre
document
–
meta
/
métadonnées
descriptions
document
–
link
/
style
/style
styles
HTML
•
Eléments
entête
head
title
Exemple
HTML
/
title
Ouverture
fermeture
balise
meta
name=
author
content=
auteur
/
Attributs
associés
balise
éléments
Précisions
balise
entête
Chaque
balise
possède
ensemble
visibles
corps
attributs
document
balise
attribut
=
valeur
meta
name=
description
value=
/
meta
charset=
ISO-8859-1
HTML
•
Eléments
corps
body
body
–
Contenu
document
h1
Exemple
/h1
p
Ceci
i
really
/i
–
Partie
rendue
visible
b
Important
/b
/p
navigateurs
p
L'informatique
peut
•
Balises
plein
aider
/p
/body
–
Titres
h1
h2
h6
–
Paragraphe
saut
ligne
p
br
/
–
Citations
mises
valeur
b
i
blockquote
–
Images
liens
img
–
Listes
ol
ul
li
–
Tableaux
table
tr
td
–
Organisation
document
div
section
HTML
•
Eléments
corps
body
•
titres
h1
h2
h3
h4
h5
h6
–
éléments
h
x
permettent
définir
titres
différents
niveaux
•
h1
correspond
titre
principal
–
doivent
apparaître
ordre
h1
avant
h2
seul
titre
principal
h1
body
h1
Exemple
/h1
h1
/body
HTML
•
Eléments
corps
body
•
Paragraphe
saut
ligne
citation
–
balise
p
/p
indique
paragraphe
–
balise
br
/
fait
simple
saut
ligne
–
balises
b
/b
i
/i
mettent
texte
relief
gras
italique
–
balise
blockquote
/blockquote
permet
citer
autre
page
Web
blockquote
cite=
http
//source/
citation
/blockquote
–
balise
hr
/
permet
établir
séparation
ligne
horizontal
document
HTML
•
Eléments
body
html
h1
head
/head
body
h2
i
h1
Exemple
h1
/h1
br
h2
Exemple
h2
/h2
p
p
Ceci
paragraphe
i
terme
technique
/i
b
br/
b
mot-clé
/b
/p
blockquote
cite=
http
//fr.wikipedia.org/wiki/
Hypertext_markup_language
HTML
conçu
spécifier
apparence
visuelle
exacte
documents
/blockquote
hr
hr/
p
L'informatique
peut
aider
/p
blockquote
/body
/html
HTML
•
HTML
–
Langage
balises
permettant
structuration
pages
Web
–
Organisation
balises
balise
attr=
valeur
/balise
–
Organisation
document
•
Entête
head
•
Corps
document
body
–
Différents
types
balises
possibles
•
Listes
tableaux
images
liens
HTML
listes
•
Plusieurs
types
listes
possibles
–
Listes
numérotés
ol
/ol
–
Listes
non-numérotés
ul
/ul
–
Peu
importe
liste
seul
moyen
indiquer
éléments
li
/li
ol
li
Item
1
/li
li
Item
2
/li
/ol
ul
li
Premier
item
/li
li
Second
item
/li
/ul
HTML
tableaux
•
créer
tableau
HTML
va
combiner
plusieurs
balises
–
table
tr
td
caption
th
thead
tbody
table
border=
1
Tableau
tr
table
Ligne
td
HTML
2
/td
tr
td
1995
/td
/tr
tr
td
HTML
4
/td
td
1999
/td
Cellule
/tr
td
/table
HTML
tableaux
table
border=
1
caption
légende
caption
Historique
HTML
/caption
thead
thead
Entête
tableau
tr
th
Version
/th
th
Cellule
entête
th
Année
/th
/tr
/thead
tbody
corps
tbody
tableau
tr
td
HTML
2
/td
td
1995
/td
/tr
tr
td
HTML
4
/td
td
1999
/td
/tr
/tbody
/table
HTML
images
•
Insertion
images
texte
balise
img
img
src=
fichier.jpg
width=
80
alt=
texte
/
Texte
alternatif
Taille
optionnelle
infobulle
width=
80
height=
70
src
trouve
image
Page.html
page
Web
img
répertoire
src=
.\img\Paris_ND.jpg
Paris_ND.jpg
fichier
serveur
src=
http
//lsteffenel.fr/images/petanque-cochonnet.jpg
HTML
images
•
Balises
HTML
Images
html
head
/head
body
h1
Exemples
/h1
p
Image
distante
img
src=
http
//lsteffenel.fr/images/petanque-cochonnet.jpg
width=
80
alt=
Cochonnet
petanques
/
/p
p
Image
local
img
src=
.\img\Paris_ND.jpg
height=
70
alt=
Vue
Paris
/
/p
/body
/html
HTML
liens
•
usage
liens
permet
relier
page
Web
autres
pages
voire
autres
points
page
href=
ref
lien
visible
/a
•
attribut
href
indique
vers
aller
lorsqu
clique
lien
–
Lien
local
href=
autrePage.html
vers
autre
page
/a
–
Lien
distant
href=
http
//serveur/page.html
ailleurs
/a
–
Envoyer
mail
href=
mailto
monemail
serveur.com
envoyer
mail
/a
HTML
liens
attribue
identificateur
balise
id=
identificateur
h1
id=
debut
Liens
/h1
p
Lien
vers
href=
http
//epi.univ-paris1.fr
l'EPI
/a
/p
p
Lien
vers
href=
coursHTML-5.html
exemple
tableaux
/a
/p
p
Envoyer
mail
href=
mailto
mail.com
/a
/p
p
....
/p
Lien
vers
identificateur
href=
#
identificateur
p
href=
coursHTML-7.html
#
debut
Retourner
début
/a
/p
Statique
vs
Dynamique
•
Statique
Partie
fixe
pages
–
HTML
renvoyées
client
–
CSS
parties
changent
–
JavaScript
JS
quoi
arrive
•
Dynamique
–
CGI
Partie
variable
pages
–
PHP
renvoyées
client
–
Java
parties
changent
selon
–
JavaScript
JS
requêtes
–
informations
disponibles
Statique
vs
Dynamique
•
Site
web
statique
Aucun
changement
pages
lorsque
rafraichit
/refait
requête
•
Dynamique
pages
évoluent
selon
informations
externes
chaque
requête
général
Statique
vs
Dynamique
•
Site
web
statique
body
{
html
background-color
head
lightblue
link
rel=
stylesheet
}
type=
text/css
href=
mystyle.css
h1
{
/head
color
navy
body
margin-left
20px
/body
}
/html
CSS
HTML
Statique
vs
Dynamique
•
Site
web
dynamique
body
{
html
php
background-color
head
include
``
head.html
lightblue
link
rel=
stylesheet
echo
body
}
type=
text/css
Var
=
3
5
href=
mystyle.css
echo
Valeur
Var
h1
{
/head
color
navy
echo
/body
margin-left
20px
include
``
foot.html
}
CSS
HTML
PHP
Apache
URI/URL
DNS
PHP
•
Serveur
Web
Apache
traite
connexions
transmet
requêtes
•
appuie
HTTP
URI/URL
DNS
communiquer
ainsi
comprendre
quelle
ressource
quel
site
visés
•
Extension
serveur
web
PHP
lit
requêtes
Apache
transmet
fait
traitements
demandés
Apache
&
PHP
•
Apache
va
traiter
connexions
requêtes
•
PHP
va
construire
réponse
exécutant
logique
métier
code
Navigateur
Serveur
Web
Apache
Apache
•
Apache
Serveur
web
libre
gratuit
Dispose
extensions
lier
PHP
autres
outils
traiter
requêtes
Navigateur
Serveur
Web
Apache
Apache
•
Apache
Usage
classique
associe
fichiers
requêtes
html
http
//monsite.fr/page.htm
Coucou
GET
page.htm
/html
page.htm
Navigateur
Serveur
Web
Apache
Apache
1
Client
envoie
requête
ressource
visée
2
Apache
lit
requête
cherche
fichier
3
Apache
répond
requête
envoyant
fichier
GET
page.htm
html
http
//monsite.fr/page.htm
Coucou
GET
page.htm
/html
Coucou
page.htm
html
Navigateur
Coucou
Serveur
Web
/html
page.htm
Apache
Apache
•
Requête
réponse
transmises
–
HTTP
1.0
HTTP
1.1
HTTP/2
–
HyperText
Transfer
Protocol
GET
page.htm
html
http
//monsite.fr/page.htm
Coucou
GET
page.htm
/html
Coucou
page.htm
Navigateur
Serveur
Web
Protocole
transmettre
Apache
informations
HTTP
Apache
Apache
•
Serveur
web
appuie
–
Protocole
HTTP
utilise
généralement
port
80
–
Protocole
HTTPS
utilise
généralement
port
443
secure
utilisant
certificats
chiffrer
connexion
assurer
hôte/host
bien
celui
cherche
•
pouvoir
communiquer
navigateurs
Apache
&
URI/URL
•
Identification
ressources
URI
URL
–
URI
Uniform
Resource
Identifier
Adresse
unique
vers
–
URL
Uniform
Resource
Locator
ressource
page.htm
GET
page.htm
http
//monsite.fr/page.htm
GET
page.htm
Coucou
html
html
Coucou
Navigateur
Coucou
Serveur
Web
/html
/html
page.htm
page.htm
Apache
Apache
&
URI/URL
•
Identification
ressources
URI
URL
•
http
//monsite.fr/page.htm
–
Ressource
page.htm
–
dossier
/
racine
–
site
web
http
//monsite.fr
•
ftp
//machine1.autresite.com/images/oiseau.jpg
–
Ressource
oiseau.jpg
–
dossier
/images/
–
machine
machine1.autresite.com
accessible
ftp
//
Apache
&
URI/URL
Apache
&
DNS
•
Chaque
machine
internet
identifiée
IP
•
Exemple
IPV4
8.8.8.8
127.0.0.1
•
Exemple
IPV6
2001:0db8:85a3:0000:0000:8a2e
0370:7334
•
très
pratique
visiter
sites
web
parfait
rendre
unique
machine
Apache
&
DNS
•
DNS
Domain
Name
System
•
Gère
noms
domaine
exemple
univ-paris1.fr
•
Permet
lier
nom
domaine
IP
•
Permet
gérer
sous-domaines
•
Exemple
univ-paris1.fr
www.univ-paris1.fr
ent.univ-paris1.fr
•
www
ent
sous-domaines
Apache
&
DNS
Apache
&
DNS
1
Client
envoie
requête
ressource
visée
2
Apache
lit
requête
cherche
fichier
3
Apache
répond
requête
envoyant
fichier
GET
page.htm
HOST
chez.moi.fr
html
GET
page.htm
GET
page.htm
Coucou
HOST
mio.es
HOST
chez.moi.fr
/html
Coucou
Pouet
page.htm
html
html
Navigateur
Coucou
Pouet
Serveur
Web
html
/html
/html
Pouet
/html
page.htm
page.htm
Apache
page.htm
Apache
&
DNS
•
Plusieurs
noms
domaine
peuvent
renvoyer
vers
IP
•
serveur
web
peut
afficher
sites
différents
selon
hôte
demandé
requête
–
Chez
Apache
appelle
cela
virtual
hosts
vhosts
–
gérer
cela
devez
avoir
accès
configuration
serveur
web
toujours
cas
lorsque
souscrivez
service
hébergement
web
•
avoir
bon
site
utile
choisir
nom
domaine
pertinent
–
certificats
mettre
HTTPS
basant
noms
domaine
IP
Apache
&
PHP
•
PHP
extension
côté
Apache
html
–
Apache
configuré
appeler
PHP
lorsqu
php
voit
passer
requête
terminant
.php
echo
B
–
PHP
traite
fichier
question
produit
/html
réponse
renvoyée
Apache
page.php
GET
page.php
GET
page.php
B
html
Navigateur
Serveur
Web
html
B
B
/html
/html
Apache
page.php
page.php
Apache
&
CGI
•
CGI
Common
Gateway
Interface
–
outils
autres
PHP
peuvent
être
appelés
html
serveurs
web
–
/html
CGI
standard
envoyer
requêtes
autres
outils
lire
leurs
réponses
page.xyz
GET
page.xyz
GET
page.xyz
Hello
CGI
html
Navigateur
Serveur
Web
html
B
Hello
/html
/html
CGI
Apache
page.xyz
page.xyz
Objectifs
cours
Création
site
Web
dynamique
PHP
PHP
•
PHP
langage
programmation
utilisé
construction
sites
Web
dynamiques
–
Pages
PHP
pages
Web
contiennent
PHP
•
va
mélanger
PHP
code
HTML
/
CSS
•
code
PHP
va
être
analysé
serveur
•
résultat
va
être
nouvelle
page
Web
mise
jour
automatiquement
code
PHP
coursPHP-1.php
html
code
PHP
php
intérieur
balise
date_default_timezone_set
``
Europe/Paris
php
entouré
balise
echo
p
style='font-style
italic
'
Paris
script
language=
php
.date
'd
/
/
'
``
/p
/script
/html
PHP
PHP
Php
Hypertext
Preprocessor
Ø
Langage
interprété
créer
sites
dynamiques
Ø
Langage
script
côté
serveur
Ø
Langage
faiblement
typé
Ø
Langage
Embedded
HTML
Ø
Open
source
PHP
permis
créer
grand
nombre
sites
web
célèbres
comme
Facebook
Wikipédia
etc
Commandes
PHP
base
•
Variables
•
Types
•
Opérateurs
•
Fonctions
•
echo
gettype
unset
Installation
configuration
PHP
suffit
télécharger
suite
logiciele
•
WAMP
http
//www.wampserver.com/
•
MAMP
http
//www.mamp.info/
•
XAMPP
https
//www.apachefriends.org/fr/
éditeur
texte
•
Sublim
Text
macOs
http
//www.sublimetext.com/2
•
Notepad++
Windows
https
//notepad-plus-plus.org/fr/
•
Autres
Linux/BSD/UNIX
emacs
vim
nano
gedit
Introduction
PHP
Syntaxe
base
DOCTYPE
HTML
PUBLIC
-//W3C//
doctype
html
DTD
HTML
4.01//EN
http
//
html
www.w3.org/TR/html4/strict.dtd
head
title
Titre
/title
/head
body
php
echo
Hello
World
``
/body
/html
Commentaires
PHP
Commentaires
Commentaires
hérités
langage
Perl
//
Ceci
commentaire
seule
ligne
/
*
Ceci
commentaire
plusieurs
lignes
*
/
Commentaire
style
shell
#
Ceci
commentaire
seule
ligne
Variables
PHP
•
notion
variable
–
variable
conteneur
valeur
–
peut
affecter
valeur
va
utiliser
plus
tard
variable
=
``
PHP5
indique
variable
=
affectation
attribut
valeur
nom
variable
variable
commence
toujours
lettre
_
sans
echo
variable
espace
récupère
valeur
gardée
variable
nom
Variables
PHP
•
notion
variable
types
données
–
variables
peuvent
garder
valeurs
différents
types
•
Nombres
entiers
integer
25
•
Nombres
décimaux
double
float
2.25
•
Chaînes
caractères
string
1
super
chaîne
•
Logique
boolean
true
1
false
–
fonction
gettype
variable
permet
savoir
quelle
type
valeur
contient
variable
•
entier
=
25
gettype
entier
-
integer
•
decimal
=
2.25
gettype
decimal
-
double
•
chaine
=
1
super
chaîne
``
gettype
chaine
-
string
•
bool
=
true
gettype
bool
-
boolean
Variables
PHP
•
Exemple
php
Définition
entier
=
25
variable
decimal
=
2.25
chaine
=
1
super
chaîne
``
boolean
=
true
echo
li
gettype
entier
``
entier
/li
echo
li
gettype
decimal
``
decimal
/li
echo
li
gettype
chaine
``
chaine
/li
echo
li
gettype
boolean
``
boolean
/li
Valeur
chaque
récupère
gettype
variable
valeur
variable
informe
type
boolean
variable
Types
données
PHP
Opérateur
chaînes
caractères
–
concaténation
chaine1
Chaine2
Opérateurs
logiques
•
AND
&
&
vrai
b
vrais
•
OR
||
vrai
b
vrais
Opérateurs
arithmétiques
•
addition
b
•
soustraction
-
b
•
multiplication
*
b
•
division
/
b
•
modulo
reste
division
entière
b
Types
données
PHP
Opérateurs
arithmétiques
•
Attention
lorsqu
chaine
caractère
évaluée
comme
valeur
numérique
règles
suivantes
appliquent
•
toto
=
1
4.5
#
toto
vaut
5.5
•
toto
=
1
titi
149
#
toto
vaut
1
car
chaine
vaut
0
texte
•
toto
=
1
149
titi
#
toto
vaut
150
car
chaine
vaut
149
commence
valeur
numérique
Types
données
PHP
Opérateurs
comparaison
•
égal
==
b
•
différent
=
b
•
supérieur
b
•
inférieur
b
•
supérieur
égal
=
b
•
inférieur
égal
=
b
Exemple
echo
toto
==
0
``
Vrai
Faux
Opérateurs
PHP
•
Opérateurs
–
Différents
opérateurs
permettent
manipuler
valeurs
variables
Opérateurs
Opérateurs
Opérateurs
Opérateurs
logiques
mathématiques
String
comparaison
+
-
*
/
==
=
||
OR
concaténation
=
=
&
&
AND
not
php
=
2
3
b
=
4
-
nom
=
Toto
”
echo
Salut
nom
echo
p
4
-
vaut
b
/p
Fonctions
PHP
Date
Déclaration
•
DATETIME
date
=
new
DateTime
'2000-01-05
'
•
DATE_CREATE
Alias
DateTime
:__construct
date2
=
date_create
'2000-01-01
'
Extraction
Mois
année
......
style
procédural
utilisant
DATE_FORMAT
echo
date_format
date
style
orienté
objet
OO
echo
date-
format
'
'
Fonctions
PHP
Date
Exemples
•
date=date
d-m-y
echo
ceci
date
jour
date
•
heure
=
date
``
h
i
echo
c'est
heure
jour
heure
Tableaux
PHP
•
Tableaux
–
Variables
capables
enregistrer
plusieurs
valeurs
type
•
Tableaux
indice
Attention
définir
toutes
–
Chaque
position
identifiée
positions
avant
numéro
commençant
0
utiliser
•
message
erreur
tableau
0
=
•
tableau
1
=
B
•
tableau
3
=
Fin
•
B
Fin
Suite
tableau
=
Suite
•
Tableaux
associatifs
0
1
2
3
4
–
Chaque
position
reçoit
identifiant
label
Jean
Dupont
•
tableauAssoc
``
Prenom
=
Jean
•
Prenom
Nom
tableauAssoc
``
Nom
=
Dupont
Tableaux
PHP
tableaux
PHP
ressemblent
tableaux
associatifs
hash-
tables
•
index
appelé
clé
•
valeur
associée
clé
appelée
valeur
déclare
tableau
deux
façons
•
Utiliser
fonction
array
créer
tableau
•
affecter
directement
valeurs
tableau
PHP
Message
erreur
car
head
contenu
position
2
style
/style
tableau
2
/head
défini
auparavant
body
h2
Tableaux
indice
/h2
table
php
tableau
0
=
tableau
1
=
B
tableau
3
=
Fin
Contenu
tableau
=
Suite
position
4
tableau
4
echo
tr
td
``
tableau
0
/td
td
``
tableau
1
/td
td
``
tableau
2
/td
td
``
tableau
3
/td
td
``
tableau
4
/td
/tr
``
/table
Tableaux
PHP
h2
Tableau
associatif
/h2
table
tr
th
Nom
/th
th
Prénom
/th
/tr
php
tableauAssoc
``
Prenom
=
Jean
tableauAssoc
``
Nom
=
Dupont
echo
tr
td
tableauAssoc
``
Nom
``
/td
echo
td
tableauAssoc
``
Prenom
/td
/tr
/table
/body
Tableaux
PHP
Fonctions
tableaux
•
sizeof
retourne
nombre
éléments
tableau
•
count
retourne
nombre
éléments
tableau
existe
1
variable
tableau
0
variable
existe
Tableaux
PHP
Exemple
•
suite
=
array
1
2
3
4
•
tab
0
=
1
•
tab
1
=
toto
#
peut
mélanger
contenus
•
tab
``
chaine
=
valeur
#
peut
mélanger
clés
•
personne
=
array
``
type
=
``
nom
=
Smith
Tableaux
PHP
Parcourir
tableau
php
//
crée
array
prenoms
prenoms
=
array
'François
'
'Michel
'
'Nicole
'
'Véronique
'
'Benoît
'
//
Puis
fait
boucle
tout
afficher
for
numero
=
0
numero
5
numero++
{
echo
prenoms
numero
'
br
/
'
}
Tableaux
PHP
Parcourir
tableau
php
prenoms
=
array
'François
'
'Michel
'
'Nicole
'
'Véronique
'
'Benoît
'
foreach
prenoms
id
=
valeur
{
echo
Case
id
=
valeur
}
Tableaux
PHP
Parcourir
tableau
associatif
php
personne
=
array
``
type
=
``
nom
=
Smith
foreach
personne
cle
=
valeur
{
echo
cle=
cle
“
valeur=
valeur
}
Développement
Web
–
PHP
Cours
2
Rappels
Base
Données
Navigateur
Serveur
Web
Serveur
Application
Front
Office
Back
Office
Rappels
Navigateur
Serveur
Web
&
Base
Données
Apache
Front
Office
Back
Office
Rappels
•
WAMP/MAMP/LAMP/XAMP
–
Windows/Mac/Linux/Unix
–
Apache
=
Serveur
Web
–
MySQL
=
Base
Données
–
PHP
=
Préprocesseur
pages
web
Rappels
•
Communications
entre
navigateur
web
serveur
web
font
protocole
HTTP
GET
page.htm
html
http
//monsite.fr/page.htm
Coucou
GET
page.htm
/html
Coucou
page.htm
Navigateur
Serveur
Web
Protocole
transmettre
Apache
informations
HTTP
Rappels
•
PHP
extension
côté
Apache
–
Apache
configuré
appeler
PHP
lorsqu
voit
passer
requête
terminant
.php
–
PHP
traite
fichier
question
produit
réponse
renvoyée
Apache
html
php
echo
B
/html
page.php
GET
page.php
GET
page.php
B
html
Navigateur
Serveur
Web
html
B
B
/html
/html
Apache
page.php
page.php
Caractéristiques
PHP
•
Langage
faiblement
typé
–
Beaucoup
plus
flexible
–
possibilité
faire
importe
quoi
•
Langage
interprété
//
terminal
Linux
–
CLI
disponible
scripts
//
Command
Line
Interface
•
Usage
cours
extension
apache
Rappel
Formulaires
HTML
•
Communication
entre
client
navigateur
serveur
php
–
formulaires
HTML
permettent
recueillir
données
auprès
utilisateur
•
données
ensuite
communiquées
programme
–
navigateur
envoie
données
récoltées
formulaires
serveur
•
programme
page
PHP
récupère
données
grâce
variables
Page
PHP
Rappel
Formulaires
HTML
•
formulaire
HTML
défini
balise
form
/form
–
Tous
éléments
intérieur
balise
form
name=
nomFormulaire
action=
page.php
method=
get
|
post
....
/form
action
envoie
données
method
comment
envoie
données
–
champs
formulaire
introduits
différents
balises
•
input
type=
name=
value=
id=
/
•
textarea
name=
id=
cols=
rows=
/textarea
•
select
name=
id=
size=
option
value=
/option
/select
Rappel
Formulaires
HTML
input
type=
text
name=
nomClient
value=
nom
size=
40
maxlength=
150
/
select
name=
produit
option
value=
SuperKdo
Super
Kdo
/option
/select
textarea
name=
opinionClient
cols=
40
rows=
5
opinion
produits
/textarea
input
type=
reset
value=
Nettoyer
/
input
type=
submit
value=
Envoyer
/
input
type=
submit
charge
envoyer
données
formulaire
Rappel
Formulaires
HTML
données
envoyées
input
type=
text
Zone
saisie
select
option
Liste
sélection
options
textarea
Zone
texte
input
type=
submit
Input
type=
reset
Boutons
envoi
reset
formulaire
form
name=
formClient
action=
coursPHP-7.php
method=
POST
label
for=
nom
Nom
/label
input
type=
text
id=
nom
name=
nomClient
value=
nom
size=
40
maxlength=
150
/
br/
label
Produit
/label
select
name=
produit
option
value=
SuperKdo
Super
Kdo
/option
option
value=
MegaTruc
Mega
Truc
/option
option
value=
BabyFun
Baby
Fun
/option
/select
br/
label
Opinion
/label
textarea
name=
opinionClient
cols=
40
rows=
5
opinion
produits
/textarea
br/
input
type=
submit
value=
Envoyer
class=
bouton
/
input
type=
reset
value=
Nettoyer
class=
bouton
/
/form
Communications
Client
-
Serveur
•
2
méthodes
génériques
envoi
données
–
GET
Query
String
Valeurs
passées
via
URL
navigateur
valeurs
lisibles
en-tête
logs
accès
•
http
//monsite.fr/mapage.php
var=truc
&
nom=moi
–
POST
remplit
formulaire
navigateur
envoie
formulaire
body
requête
HTTP
valeurs
lisibles
body
requête
accessible
•
http
//monsite.fr/mapage.php
Communications
Client
-
Serveur
•
données
recueillies
formulaire
transmises
programme
indiqué
action=
•
PHP
récupère
données
grâce
deux
tableaux
associatifs
spéciaux
–
_GET
-
form
action=
method=
get
•
_GET
``
nom
input
name=
nom
/
–
_POST
-
form
action=
method=
post
•
_POST
``
nom
input
name=
nom
/
Communication
C/S
GET
1
Client
envoie
données
clique
lien
prévu
2
Apache
récupère
analyse
requête
3
Apache
crée
tableaux
contenant
valeurs
envoie
PHP
GET
page.php
GET
var=42
GET
http
//site.fr/page.php
var=42
var=42
GET
/page.php
var=42
html
Coucou
/html
Navigateur
Serveur
Web
page.php
Apache
Communications
C/S
GET
•
URL
requête
contient
valeurs
–
Formulaire
passé
URL
–
Construction
propre
URL
href=
http
//monsite.fr/page.php
var=bla
&
x=42
&
y=0
Lien
/a
page.php
page
traitera
requête
var
contient
bla
x
contient
42
contient
0
sépare
adresse
ressource
données
&
sépare
chaque
donnée
champs/valeur
Communications
C/S
GET
•
Méthode
GET
–
données
envoyées
URL
programme
–
Limitée
256
octets
form
name=
formGet
–
Déconseillé
action=
coursPHP-8.php
method=
GET
label
Nom
/label
input
type=
text
name=
client
size=
20
/
br/
label
Mot
passe
/label
input
type=
password
name=
mdp
size=
10
/
br/
input
type=
submit
value=
Envoyer
/
/form
php
echo
p
Bienvenue
i
_GET
``
client
``
/i
/p
Communications
C/S
GET
1
-
lance
programme
écoute
requêtes
envoyées
propre
machine
localhost
port
5000
2
-
crée
formulaire
enverra
données
méthode
GET
vers
page
machine
port
5000
Communications
C/S
GET
3
–
remplit
formulaire
valeurs
puis
clique
Envoyer
4
–
navigateur
envoie
requête
GET
serveur
localhost
ensemble
variables
URL
Communications
C/S
GET
5
–
Depuis
programme
serveur
écrit
réponse
6
–
navigateur
récupère
réponse
considère
agit
ressource
visée
URL
variables
valeurs
6
–
navigateur
commence
récupérer
réponse
Communications
C/S
GET
7
–
Depuis
programme
serveur
termine
réponse
Ctrl
/ferme
connexion
8
–
navigateur
voit
connexion
fermer
considère
données
récupéré
constitue
réponse
entière
affiche
Communications
C/S
GET
logs
1
–
va
regarder
logs
apache
journaux
enregistrant
toutes
transactions
serveur
web
traité
2
–
navigateur
demande
page
contenant
formulaire
serveur
3
–
navigateur
envoie
formulaire
URL
voit
toutes
valeurs
requête
GET
enregistrée
Communication
C/S
POST
1
Client
rempli
formulaire
puis
déclenche
requête
2
Apache
récupère
analyse
requête
3
Apache
crée
tableaux
contenant
valeurs
envoie
PHP
GET
page.php
POST
Name=Flo
POST
http
//site.fr/page.php
Name=Flo
POST
Name=Flo
Name
Flo
html
Coucou
/html
Navigateur
Serveur
Web
page.php
Apache
Communication
C/S
POST
form
name=
formClient
action=
coursPHP-7.php
method=
POST
label
for=
nom
Nom
/label
input
type=
text
id=
nom
name=
nomClient
value=
nom
size=
40
maxlength=
150
/
br/
php
nom
=
_POST
``
nomClient
op
=
_POST
``
opinionClient
prod
=
_POST
``
produit
echo
p
Merci
participation
nom
/p
echo
p
produit
i
prod
/i
/p
echo
p
opinion
i
op
/i
/p
Communication
C/S
POST
-
HTML
•
Exemple
form
name=
action=
coursPHP-9.php
method=
POST
fieldset
legend
données
/legend
label
/label
input
type=
text
name=
nom
/
br/
label
/label
input
type=
email
name=
email
/
br/
input
type=
radio
name=
sexe
value=
Homme
/
Homme
input
type=
radio
name=
sexe
value=
Femme
/
Femme
br/
/fieldset
fieldset
legend
produits
/legend
label
/label
select
name=
produit
option
value=
SuperKdo
/option
option
value=
MegaTruc
Mega
Truc
/option
option
value=
BabyFun
/option
/select
br/
label
/label
textarea
name=
opinion
/textarea
/fieldset
Communication
C/S
POST
-
PHP
•
Exemple
body
h1
Récapitulatif
/h1
ul
php
echo
li
Nom
_POST
``
nom
``
/li
echo
li
Email
_POST
``
email
``
/li
echo
li
Sexe
_POST
``
sexe
``
/li
echo
li
Produit
préféré
_POST
``
produit
``
/li
echo
li
Suggestion
_POST
``
opinion
``
/li
/ul
/body
Communication
C/S
POST
1
-
lance
programme
écoute
requêtes
envoyées
propre
machine
localhost
port
5000
2
-
crée
formulaire
enverra
données
méthode
POST
vers
page
machine
port
5000
Communication
C/S
POST
3
–
remplit
formulaire
valeurs
puis
clique
Envoyer
4
–
navigateur
envoie
requête
POST
serveur
localhost
visant
ressource
/index.php
incluant
ensemble
variables
corps
body
requête
HTTP
Communication
C/S
POST
5
–
Depuis
programme
serveur
écrit
réponse
6
–
navigateur
récupère
réponse
considère
agit
6
–
navigateur
réponse
possible
accessible
commence
récupérer
URL
lorsque
envoie
réponse
données
POST
Communication
C/S
POST
8
–
navigateur
voit
connexion
fermer
considère
données
récupéré
constitue
réponse
entière
affiche
7
–
Depuis
programme
serveur
termine
réponse
Ctrl
/ferme
connexion
Communications
C/S
POST
logs
1
–
va
regarder
logs
apache
journaux
enregistrant
toutes
transactions
serveur
web
traité
2
–
navigateur
demande
page
contenant
formulaire
serveur
3
–
navigateur
envoie
formulaire
POST
voit
aucun
nom
variable
valeur
logs
apache
Statuts
HTTP
•
requête
envoyée
=
réponse
reçue
•
Réponses
HTTP
5
types
officiels
–
1xx
informationnelle
–
2xx
succès
–
3xx
redirection
–
4xx
erreur
côté
client
//
404
url
existe
–
5xx
erreur
côté
serveur
–
autres
erreurs
liées
serveur
web
utilisé
Statuts
HTTP
classiques
200
OK
requête
bien
reçue
comprise
exécutée
301
308
Permanent
Redirect
ressource
définitivement
déplacée
autre
URL
302
307
Temporary
Redirect
ressource
temporairement
déplacée
autre
URL
403
Forbidden
requête
correcte
client
droit
demander
serveur
faire
action
404
Not
Found
ressource
visée
URL
trouvée
500
Internal
Server
Error
Erreur
générique/non
spécifique
serveur
web
échoué
quelque
chose
moment
502
Bad
Gateway
serveur
web
visé
arrive
contacter
serveur
traite
requête
envoyée
Statuts
HTTP
200
Statuts
HTTP
1
–
envoie
requête
serveur
localhost
port
8888
demandant
ressource
‘
/
2
–
Apache
répond
en-tête
réponse
HTTP
tout
va
bien
OK
code
200
2
–
Apache
envoie
page
web
demandée
corps
body
réponse
Statuts
HTTP
404
Statuts
HTTP
1
–
envoie
requête
serveur
localhost
port
8888
demandant
ressource
existe
2
–
Apache
répond
en-tête
réponse
HTTP
ressource
trouvée
code
404
2
–
Apache
envoie
corps
réponse
HTTP
page
web
détaillant
erreur
client
format
HTML
client
puisse
lire
Statuts
HTTP
400
Statuts
HTTP
1
–
envoie
requête
incorrecte
protocole
inexistant
serveur
localhost
port
8888
2
–
Apache
répond
en-tête
réponse
HTTP
requête
incorrecte
respecte
standards
connait
2
–
Apache
envoie
corps
réponse
HTTP
page
web
détaillant
erreur
client
format
HTML
client
puisse
lire
PHP
Contrôle
Flot
•
Instructions
contrôle
–
Instructions
gérer
flot
exécution
–
Instructions
conditionnelles
•
elles
conditionnent
exécution
•
Semblables
nœud
Décision
diagramme
activités
•
if
else
switch
case
–
Instructions
boucle
•
elles
permettent
répétition
bloc
instructions
•
for
foreach
while
do
while
PHP
if
else
•
Instructions
conditionnelles
if
else
if
condition
{
bloc
instructions
vrai
}
else
{
bloc
instructions
faux
}
condition
VRAI
Bloc
instructions
vrai
optionnel
sinon
Bloc
instructions
faux
if
qte
=
100
{
remise
=
0.10
/
*
remise
10
offerte
*
/
echo
p
remise
10
/p
}
else
{
remise
=
0.05
echo
p
remise
5
/p
PHP
if
else
•
Instructions
conditionnelles
if
else
–
données
condition
peuvent
venir
formulaire
formExemple11.html
form
name=
method=
POST
action=
coursPHP-11.php
select
name=
prix
option
value=
10
Super
Kdo
-
10€
/option
/select
input
type=
number
size=
10
name=
qte
/
input
type=
submit
value=
Devis
/
/form
coursPHP-11.php
php
qte
=
_POST
``
qte
prixunit
=
_POST
``
prix
remise
=
0
if
qte
=
100
{
remise
=
0.10
/
*
remise
10
offerte
*
/
echo
p
remise
10
/p
}
prix
=
prixunit
*
qte
-
prixunit
*
qte
*
remise
echo
p
prix
i
prixunit
/i
l'unité
i
qte
/i
unités
régler
i
prix
/i
/p
PHP
if
else
form
name=
method=
POST
action=
coursPHP-11.php
label
Produit
/label
select
name=
prix
option
value=
10
Super
/option
/select
br/
label
Quantité
/label
input
name=
qte
type=
number
size=
10
/
br/
input
type=
submit
value=
Devis
/
/form
php
qte
=
_POST
``
qte
prixunit
=
_POST
``
prix
remise
=
0
....
if
qte
=
100
{
remise
=
0.10
echo
p
....
/p
}
PHP
if
elseif
else
•
Instructions
conditionnelles
if
else
–
blocs
if
else
peuvent
contenir
importe
quelle
instruction
compris
autres
blocs
if
else
if
condition1
{
bloc
instructions
condition1
vraie
}
elseif
condition2
{
bloc
instructions
condition2
vraie
}
else
{
bloc
instructions
conditions
fausses
}
form
name=
method=
POST
action=
coursPHP-12.php
select
name=
prix
/select
input
type=
number
name=
qte
/
input
type=
submit
value=
Devis
/
/form
php
qte
=
_POST
``
qte
prixunit
=
_POST
``
prix
if
qte
=
100
{
remise
=
0.10
}
elseif
qte
=
50
{
remise
=
0.05
}
else
{
remise
=
0
}
prix
=
prixunit
*
qte
-
prixunit
*
qte
*
remise
echo
p
Prix
unitaire
i
prixunit
/i
Quantité
i
qte
/i
Remise
i
remise
*
100
``
/i
/p
echo
``
p
i
Total
régler
/i
b
prix
/b
/p
44
PHP
for
•
Instructions
boucle
for
–
boucle
for
permet
répéter
certain
nombre
fois
exécution
bloc
instructions
for
initialisation
condition
incrémentation
{
bloc
instructions
répéter
}
i
=
1
i
=
6
echo
i++
else
suite
i++
-
i
=
i
+
1
for
i
=
1
i
=
6
i++
{
echo
h
i
Titre
niveau
i
/h
i
}
PHP
for
•
Instructions
boucle
for
php
for
i
=
1
i
=
6
i++
{
echo
h
i
Titre
niveau
i
/h
i
}
PHP
while
•
Instructions
boucle
while
–
boucle
while
permet
continuer
réaliser
bloc
opérations
tant
condition
vraie
i
=
1
i
=
6
echo
i
=
i
+
1
else
suite
i
=
1
while
i
=
6
{
echo
h
i
Titre
niveau
i
/h
i
i
=
i
+
1
}
PHP
while
•
Instructions
boucle
while
donne
valeur
initiale
variable
i
Tant
i
dépasse
valeur
6
met
jour
valeur
variable
i
php
i
=
1
while
i
=
6
{
echo
h
i
Titre
niveau
i
/h
i
i
=
i
+
1
}
PHP
foreach
•
Instructions
boucle
foreach
–
boucle
foreach
permet
répéter
bloc
instructions
chaque
valeur
tableau
tableau
reste-t-il
valeur
titre
reçoit
prochaine
valeur
echo
plus
valeur
tableau
suite
foreach
tableau
titre
{
echo
titre
Titre
titre
/
titre
}
PHP
foreach
•
Instructions
boucle
foreach
définit
tableau
chaque
valeur
tableau
php
tableau
=
array
``
h1
h2
h3
h4
h5
h6
foreach
tableau
titre
{
echo
titre
Titre
titre
/
titre
}
PHP
foreach
•
Instructions
boucle
foreach
–
ça
fonctionne
aussi
tableaux
associatifs
définit
tableau
associatif
clé
=
valeur
chaque
pair
clé
=
valeur
tableau
php
tableau
=
array
``
nom
=
Dupont
prenom
=
Jean
adresse
=
qq
part
Paris
foreach
tableau
cle=
valeur
{
echo
li
cle
valeur
/li
}
PHP
boucles
•
Instructions
boucle
boucles
imbriquées
–
possible
imbriquer
boucles
unes
autres
table
php
for
lin
=
1
lin
=
9
lin++
{
echo
tr
for
col
=
1
col
=
9
col++
{
echo
td
col
*
lin
/td
}
echo
/tr
}
/table
52
Evaluation
Etudiants
Date
Type
Description
Binôme
S05
19/02
DM
Devoir
Maison
1
mini
projet
rendre
mail
25/02
–
23h42
OUI
S10
02/04
DST
Devoir
Table
1
examen
écrit
sans
document
machine
NON
50
S12
16/04
PROJ
Projet
Présentation
projet
OUI
mai
Partiel
1
examen
écrit
sans
document
machine
NON
50
PHP
Fonctions
•
Fonctions
–
PHP
offre
large
panoplie
fonctions
•
Exemple
isset
var
TRUE
var
déclarée
•
Exemple
empty
var
TRUE
var
vide
vaut
0
–
peut
aussi
écrire
nôtres
dehors
classes
•
function
nomFonction
paramètre
{
instructions
}
function
salutation
nom
{
echo
h1
Bienvenue
nom
/h1
echo
p
class=droite
Aujourd'hui
.date
'd
/
/
'
``
/p
}
PHP
form
name=
method=
POST
action=
coursPHP-15.php
label
Nom
/label
input
type=
text
name=
client
size=
25
/
input
type=
submit
value=
OK
/
/form
php
function
salutation
nom
{
date_default_timezone_set
``
Europe/Paris
echo
h1
Bienvenue
nom
/h1
echo
p
class=droite
Aujourd'hui
date
'd
/
/
'
``
/p
}
if
isset
_POST
``
client
AND
empty
_POST
``
client
{
salutation
_POST
``
client
}
else
{
salutation
``
cher
client
}
Visibilité
variables
PHP
existe
3
niveaux
visibilité
variables
selon
contexte
•
variables
superglobales
elles
disponibles
n'importe
programme
•
variables
globales
toutes
variables
tableaux
objets
constantes
créons
nous-même
programme
principal
elles
généralement
visibles
programme
principal
•
variables
locales
toutes
variables
d'une
fonction
paramètres
compris
visibilité
n'est
locale
programme
principal
peut
agir
variables
Portée
variables
globales
•
PHP
variable
globale
peut
être
utilisée
intérieur
fonction
sans
passer
paramètre
–
Usage
mot
clé
global
–
variable
doit
être
déclarée
global
chaque
fonction
cela
nécessaire
Portée
variables
globales
php
=
1
b
=
2
function
somme
{
global
b
b
=
b
echo
b
}
somme
somme
déclaré
b
mot
clé
global
intérieur
somme
elles
manipulées
celle-ci
Portée
variables
globales
•
autre
méthode
accéder
variables
globales
d'utiliser
superglobale
GLOBALS
php
=
1
b
=
2
function
somme
{
GLOBALS
'
b
'
=
GLOBALS
'
'
GLOBALS
'
b
'
echo
GLOBALS
'
b
'
}
variables
superglobales
•
variables
superglobales
générées
automatiquement
PHP
–
elles
disponibles
quel
contexte
script
intérieur
fonction
sans
être
passées
paramètre
celle-ci
–
elles
écrites
majuscules
commencent
underscore
_
–
elles
généralement
tableaux
associatifs
variables
superglobales
•
GLOBALS
rassemble
variables
globales
•
_ENV
variables
d'environnement
toujours
données
serveur
•
_SESSION
variables
session
variables
restent
stockées
serveur
temps
présence
d'un
visiteur
•
_COOKIE
contient
valeurs
cookies
enregistrés
l'ordinateur
visiteur
•
_GET
contient
données
envoyées
paramètres
l'URL
•
_POST
contient
informations
viennent
d'être
envoyées
formulaire
variables
superglobales
html
head
title
variable
_SERVER
/title
/head
body
php
echo
'Nom
fichier
cours
d\'execution
'
'
partir
racine
'
_SERVER
'PHP_SELF
'
echo
'
br/
'
echo
'Nom
racine
script
'
_SERVER
'DOCUMENT_ROOT
'
echo
'
br/
'
echo
'Nom
client
HTML
'
_SERVER
'HTTP_USER_AGENT
'
'
br
'
echo
'Nom
serveur
execute
script
'
_SERVER
'SERVER_NAME
'
echo
'
br/
br/
'
echo
'Votre
adresse
IP
'
_SERVER
'REMOTE_ADDR
'
/body
/html
Fonctions
avancées
•
Fonctions
avancées
PHP
serveur
–
===
isset
empty
is_nul
–
include
require
include_once
require_once
–
•
Fonctions
avancées
HTTP
client
–
header
PHP
Fonctions
avancées
php
var1
=
42
var2
=
42
var3
=
42
``
var4
=
42
echo
var1
==
var2
``
#
echo
var1
==
var3
``
#
echo
var1
==
var4
``
#
echo
var1
===
var2
``
#
echo
var1
===
var3
``
#
echo
var2
==
var3
``
#
PHP
faiblement
typé
==
compare
valeurs
===
compare
valeurs
types
TRUE
==
1
FALSE
==
0
1
#
1
#
1
#
#
#
#
PHP
Fonctions
avancées
•
Importation
fichiers
•
Incorporer
contenu
fichier
page
PHP
•
But
réutilisation
fichiers
uniformisation
site
–
include
fichier
include_once
fichier
•
include
remplace
ligne
contenu
fichier
•
include_once
fait
ça
seule
fois
boucle
–
require
fichier
require_once
fichier
•
idem
include
fichier
existe
erreur
PHP
Fonctions
avancées
meta
charset=
UTF-8
/
title
site
/title
link
rel=
stylesheet
href=
css/blocs.css
/
header
h1
site
/h1
/header
nav
h2
Exemples
/h2
ul
li
/li
/ul
/nav
head
php
include_once
head.html
require
mesfonctions.php
/head
body
php
include_once
headerNav.html
php
salutation
``
cher
client
article
h2
News
/h2
p
/p
/article
php
function
salutation
nom
{
echo
p
class=droite
b
Bienvenue
nom
/b
/p
echo
p
class=droite
Aujourd'hui
.date
'd
/
/
'
``
/p
}
PHP
include_once
head.html
include_once
headerNav.html
require
mesfonctions.php
salutation
``
cher
client
head
title
site
/title
link
rel=
stylesheet
href=
css/blocs.css
/
/head
body
header
h1
site
/h1
/header
nav
h2
Exemples
/h2
ul
li
/li
/ul
/nav
section
p
class=droite
b
Bienvenue
cher
client
/b
/p
p
class=droite
Aujourd'hui
22/
03
/
2014
/p
PHP
Fonctions
avancées
•
gettype
var
retourne
type
variable
•
addslashes
ajoute
antislashs
devant
caractères
spéciaux
res
=
addslashes
``
'
//
retourne
L\
•
strstr
texte
chaineAchercher
trouve
première
occurrence
chaîne
email
=
'name
example.com
'
domain
=
strstr
email
'
'
echo
domain
//
Affiche
example.com
PHP
Fonctions
avancées
•
htmlspecialchars
chaine
flags
Conversion
caractères
spéciaux
entités
HTML
Remplace
exemple
&
commercial
&
amp
exemple
flag
ENT_QUOTES
Convertit
guillemets
doubles
guillemets
simples
str
=
This
is
some
b
bold
/b
text
``
echo
htmlspecialchars
str
//
affichera
This
is
some
&
lt
b
&
gt
bold
&
lt
/b
&
gt
text
PHP
Fonctions
avancées
•
strip_tags
chaine
allowableTags
Supprime
balises
HTML
PHP
d'une
chaîne
commentaires
HTML
PHP
également
supprimés
comportement
peut
être
modifié
paramètre
allowableTags
text
=
‘
p
Paragraph.
/p
Comment
href=
#
fragment
Other
text
/a
'
//
Autorise
p
echo
strip_tags
text
'
p
'
//
affichera
//
p
Paragraph.
/p
href=
#
fragment
Other
text
/a
PHP
Fonctions
avancées
•
strlen
retourne
longueur
chaîne
•
strtolower
passe
tous
caractères
minuscules
•
strtoupper
passe
tous
caractères
majuscules
•
strpos
texte
chaine
recherche
position
première
chaine
trouvée
PHP
Fonctions
avancées
•
trim
efface
espaces
blancs
début
fin
chaine
•
ereg
chaine
texte
recherche
texte
séquences
caractères
chaine
Retourne
longueur
l'occurrence
trouvée
occurrence
trouvée
chaîne
string
FALSE
cas
contraire
erreur
survenue
if
ereg
``
BCD
ABCDEF
{
echo
oui
}
else
{
echo
non
}
PHP
Fonctions
avancées
•
isset
var1
var2
Détermine
variable
plusieurs
définies
différentes
NULL
•
unset
var1
var2
Détruit
variables
•
empty
var
Détermine
variable
vide
PHP
Fonctions
avancées
•
variable
non
déclarée
variable
vide
pareilles
FALSE
=
0
TRUE
=
1
-1
1-
1-1
-1
php
echo
isset
var
``
-
empty
var
``
br
var
=
42
echo
isset
var
``
-
empty
var
``
br
var
=
echo
isset
var
``
-
empty
var
``
br
unset
var
echo
isset
var
``
-
empty
var
``
br
PHP
Fonctions
avancées
Var
isset
empty
var
non
déclarée
0
FAUX
1
VRAI
42
1
VRAI
0
FAUX
1
VRAI
1
VRAI
unset
var
0
FAUX
1
VRAI
PHP
Fonctions
avancées
•
Valeur
null
disponible
signifie
variable
existe
•
Null
=
Empty
php
echo
is_null
var
``
-
empty
var
``
var=0
echo
is_null
var
``
-
empty
var
``
var=
echo
is_null
var
``
-
empty
var
``
var
=
null
echo
is_null
var
``
-
empty
var
``
PHP
Notice
Undefined
variable
var
in
Standard
input
code
line
2
1-1
-1
-1
1-1
PHP
Fonctions
avancées
Var
is_null
empty
var
non
déclarée
1
VRAI
*
1
VRAI
0
0
FAUX
1
VRAI
0
FAUX
1
VRAI
null
1
VRAI
1
VRAI
*
is_null
déclenche
alerte
PHP
Notice
variable
allouée
PHP
Fonctions
avancées
•
array_values
array
Retourne
toutes
valeurs
d'un
tableau
–
elles-mêmes
tableau
utile
vider
cases
vides
•
array_keys
array
valeur
Retourne
toutes
clés
associées
valeur
–
valeur
spécifiée
alors
retourne
toutes
clés
tableau
utile
connaitre
toutes
clés
possibles
PHP
Fonctions
avancées
•
array_values
array
Retourne
toutes
valeurs
d'un
tableau
–
elles-mêmes
tableau
0
-
42
1
-
42
2
-
9
5
-
42
8
-
6
0
-
42
1
-
42
2
-
9
3
-
42
4
-
6
php
tab
0
=
42
tab
1
=
42
tab
2
=
9
tab
5
=
42
tab
8
=
6
var1=array_values
tab
foreach
tab
id
=
val
{
echo
id
-
val
}
echo
br
foreach
var1
id
=
val
{
echo
id
-
val
}
PHP
Fonctions
avancées
Prenom
-
Jean
Nom
-
Martin
Prenom2
-
Olivier
Prenom3
-
Jean
0
-
Jean
1
-
Martin
2
-
Olivier
3
-
Jean
php
tab
``
Prenom
=
Jean
tab
``
Nom
=
Dupont
tab
``
Prenom2
=
Olivier
tab
``
Prenom3
=
Jean
tab
``
Nom
=
Martin
var1=array_values
tab
foreach
tab
id
=
val
{
echo
id
-
val
}
echo
br
foreach
var1
id
=
val
{
echo
id
-
val
}
PHP
Fonctions
avancées
•
array_keys
array
valeur
Retourne
toutes
clés
associées
valeur
–
valeur
spécifiée
alors
retourne
toutes
clés
tableau
0
-
Prenom
1
-
Prenom3
php
tab
``
Prenom
=
Jean
tab
``
Nom
=
Dupont
tab
``
Prenom2
=
Olivier
tab
``
Prenom3
=
Jean
tab
``
Nom
=
Martin
var1=array_keys
tab
Jean
foreach
tab
id
=
val
{
echo
id
-
val
}
echo
br
foreach
var1
id
=
val
{
echo
id
-
val
}
PHP
Fonctions
avancées
•
array_keys
array
valeur
Retourne
toutes
clés
associées
valeur
–
valeur
spécifiée
alors
retourne
toutes
clés
tableau
0
-
Prenom
1
-
Nom
2
-
Prenom2
3
-
Prenom3
php
tab
``
Prenom
=
Jean
tab
``
Nom
=
Dupont
tab
``
Prenom2
=
Olivier
tab
``
Prenom3
=
Jean
tab
``
Nom
=
Martin
var1=array_keys
tab
foreach
tab
id
=
val
{
echo
id
-
val
}
echo
br
foreach
var1
id
=
val
{
echo
id
-
val
}
PHP
Fonctions
avancées
•
in_array
valeur
array
Vérifie
valeur
appartient
tableau
•
array_key_exists
key
array
Vérifie
clé
existe
tableau
PHP
Fonctions
avancées
TRUE
=
1
FALSE
=
0
1
-
1
-
-
php
tab
``
Prenom
=
Jean
tab
``
Nom
=
Dupont
tab
``
Prenom2
=
Olivier
tab
``
Prenom3
=
Jean
tab
``
Nom
=
Martin
var1=in_array
``
Jean
tab
var2=array_key_exists
``
Nom
tab
var3=in_array
``
tab
var4=array_key_exists
``
tab
echo
var1
-
var2
-
var3
-
var4
PHP
Fonctions
avancées
HTTP
•
PHP
fonction
header
charge
d'envoyer
client
en-têtes
passés
paramètre
•
Règle
importante
l'appel
‘
header
doit
faire
avant
tout
envoi
navigateur
–
Attention
includes
écriraient
quelque
chose
–
écrire
html
vu
en-têtes
HTTP
non
HTML
PHP
Fonctions
avancées
HTTP
•
peut
utiliser
fonction
header
envoyer
codes
HTTP
php
header
``
HTTP/1.0
404
Not
Found
php
header
``
Status
301
Moved
Permanently
false
301
header
'Location
http
//www.votresite.com/
pageprotegee.php
'
PHP
Fonctions
avancées
HTTP
Header
HTTP
renvoyé
Apache
pouvez
modifier
fonction
header
PHP
Fonctions
avancées
HTTP
•
créer
redirection
PHP
utilise
header
envoyer
en-têtes
type
Location
adresse
•
Script
redirection
HTTP
302
php
header
'Location
http
//monsite.com/page.php
'
PHP
Fonctions
avancées
HTTP
•
peut
envoyer
fichiers
jouer
autres
champs
HTTP
tels
Content-
Type
–
Content-Type
indique
type
donnée
navigateur
essayera
utiliser
outil
préféré
utilisateur
lire
fichier
•
readfile
permet
envoyer
fichier
PHP
Fonctions
avancées
HTTP
serveur
web
déclare
header
agit
text/html
texte
interprétable
navigateur
lisible
utilisateur
navigateur
affiche
PHP
Fonctions
avancées
HTTP
serveur
web
déclare
header
agit
image/jpeg
image
format
JPEG
texte
impossible
afficher
image
navigateur
essaye
tout
PHP
Fonctions
avancées
HTTP
serveur
web
déclare
header
agit
video/mp4
vidéo
format
MP4
texte
impossible
afficher
vidéo
navigateur
essaye
tout
lire
lecteur
vidéos
PHP
Fonctions
avancées
HTTP
serveur
web
déclare
header
agit
application/octet-
stream
flux
octets
défaut
navigateurs
proposent
télécharger
fichier
associé
plutôt
afficher
PHP
Fonctions
avancées
HTTP
php
//
declare
PDF
header
'Content-Type
application/pdf
'
//
client
verra
fichier
downloaded.pdf
header
'Content-
Disposition
attachment
filename=
downloaded.pdf
'
//
fichier
serveur
web
transmis
readfile
'original.pdf
'
PHP
Fonctions
avancées
HTTP
php
file
=
'monkey.gif
'
if
file_exists
file
{
header
'Content-Description
File
Transfer
'
header
'Content-Type
application/octet-stream
'
header
'Content-
Disposition
attachment
filename=
'.basename
file
'
'
header
'Expires
0
'
header
'Cache-Control
must-revalidate
'
header
'Pragma
public
'
header
'Content-Length
'
filesize
file
readfile
file
exit
}
Développement
Web
–
PHP
Cours
3
Rappels
Architecture
Générale
Base
Données
Navigateur
Serveur
Web
Serveur
Application
Front
Office
Back
Office
Rappels
Architecture
Générale
Navigateur
Serveur
Web
&
Base
Données
Apache
Front
Office
Back
Office
Rappels
Serveur
Web
•
Communications
entre
navigateur
web
serveur
web
font
protocole
HTTP
http
//monsite.fr/page.htm
GET
page.htm
GET
page.htm
html
Coucou
/html
Coucou
page.htm
Navigateur
Serveur
Web
Apache
Protocole
transmettre
informations
HTTP
Rappels
Serveur
Web
•
Communications
entre
client
serveur
font
méthodes
GET
POST
•
GET
passage
informations
URL
requête
elle-même
•
POST
passage
information
contenu
requête
Rappels
Serveur
Web
•
requête
envoyée
=
réponse
reçue
•
Réponses
HTTP
5
types
officiels
–
1xx
informationnelle
–
2xx
succès
–
3xx
redirection
–
4xx
erreur
côté
client
–
5xx
erreur
côté
serveur
–
autres
erreurs
liées
serveur
web
utilisé
Rappels
Serveur
Web
•
Header
HTTP
permet
déclarer
type
données
transmises
–
Content-Type
text/html
–
Content-Type
application/pdf
–
Content-Type
application/octet-stream
–
Content-Type
video/mp4
•
navigateur
web
paramètres
personnalisables
choisir
programme
externe
selon
type
données
Rappels
PHP
•
PHP
extension
côté
Apache
–
Apache
configuré
appeler
PHP
lorsqu
voit
passer
requête
terminant
.php
–
PHP
traite
fichier
question
produit
réponse
renvoyée
Apache
html
php
echo
B
/html
page.php
GET
page.php
GET
page.php
Navigateur
Serveur
Web
Apache
html
B
html
page.php
html
B
/html
page.php
Rappels
PHP
•
Langage
faiblement
typé
–
Beaucoup
plus
flexible
–
possibilité
faire
importe
quoi
•
Langage
interprété
–
CLI
disponible
scripts
•
Usage
cours
extension
apache
SGBD
&
BDD
•
SGBD
Système
Gestion
Base
Données
DBMS
DataBase
Management
System
•
BDD
Base
Données
DB
DataBase
SGBD
&
BDD
Personne
Cours
ID
Nom
Prenom
1
Jaffal
Ali
2
Boissier
Fabrice
•
BDD
données
organisées
conteneur
Table
Personne
•
SGBD
système
SELECT
*
FROM
Personne
logiciel
gère
bases
données
1
Jaffal
Ali
2
Boissier
Fabrice
SGBD
&
BDD
•
SGBD
logiciel
système
destiné
stocker
partager
informations
base
données
garantissant
qualité
pérennité
confidentialité
informations
tout
cachant
complexité
opérations.
WIKIPEDIA
Parmi
logiciels
plus
connus
trouve
MySQL
PostgreSQL
SQLite
Oracle
MariaDB
liste
détaillée
SGBD
consulter
lien
http
//fadace.developpez.com/sgbdcmp/
#
LI
SGBD
&
BDD
•
Avant
organisait
soi-même
disque
fichier
codait
bout
programme
spécifique
naviguer
dedans
effectuer
lectures/écritures
BDD
Search
for
handle
description
Get
/car/door/handle/description
Seek
Disc
1
Track
4
Block
2
&
Extract
2
blocks
Application
SGBD
&
BDD
•
Aujourd
hui
usage
pilote
logiciel
effectuant
transactions
SGBD
–
API
bibliothèque
extension
permettant
mettre
SQL
langage
programmation
récupérer
tableau
réponse
SELECT
*
FROM
Personne
Connecteur
API
extension
1
Jaffal
Ali
2
Boissier
Fabrice
Serveur
Web
SGBD
PHP
&
SGBD
Connecteurs
sql
=
SELECT
*
FROM
Personne
res
=
mysqli-
query
sql
line
=
res-
fetch_object
echo
line-
nom
page.php
SELECT
*
FROM
Personne
GET
page.php
MySQLi
Jaffal
1
Jaffal
Ali
2
Boissier
Fabrice
Navigateur
Base
Données
Serveur
Web
PHP
&
SGBD
Connecteurs
•
Plusieurs
extensions
PHP
existent
interroger
SGBD
–
MySQL
obsolète
–
utiliser
attention
anciens
tutos
utilisent
–
MySQLi
MySQL
improved
mise
jour
extension
MySQL
–
PDO
PHP
Data
Object
pilote
générique
multi-SGBD
•
Hors
PHP
ODBC
middleware
connecteur
quasi-universel
–
Open
DataBase
Connectivity
MySQL
PHP
Manipulation
bases
données
MySQL
fait
via
interface
graphique
comme
‘
PhpMyAdmin
exécutant
script
PHP
1
PhpMyAdmin
•
programme
permettant
d'avoir
vue
rapide
ensemble
données
•
outils
plus
connus
permettant
manipuler
base
données
MySQL
•
PhpMyAdmin
livré
WAMP
presque
tous
hébergeurs
permettent
d'utiliser
phpMyAdmin
chemin
accès
http
//localhost:8888/phpMyAdmin
MySQL
PHP
2
Script
PHP
•
Etapes
utiliser
base
données
1
Connexion
serveur
MySQL
2
Envoi
requêtes
SQL
select
insert
into
3
Récupération
résultats
4
Fermeture
connexion
MySQLi
•
Connexion
serveur
MySQL
travers
mysqli
–
Toute
communication
BdD
passe
objet
classe
mysqli
–
connexion
effectue
création
objet
new
idcon
=
new
mysqli
host
user
mdp
bdd
objet
identifiant
connexion
nom
serveur
utilisateur
autorisé
accéder
base
mot
passe
base
données
•
Toute
connexion
ouverte
doit
être
fermée
bool
=
idcon-
close
demande
objet
mysqli
fermer
connexion
MySQLi
Astuce
placer
informations
fichier
faire
require
include
fichier
Création
objet
connexion
attribut
connect_errno
indique
connexion
bien
établie
cas
problème
arrête
fonction
die
Fermeture
connexion
php
host
=
localhost
user
=
root
mdp
=
root
bdd
=
clientsBD
mysqli
=
new
mysqli
host
user
mdp
bdd
if
mysqli-
connect_errno
{
die
``
p
Impossible
connecter
bdd
mysqli-
connect_error
/p
}
else
{
echo
p
Connecté
serveur
host
base
bdd
/p
mysqli-
close
}
MySQLi
•
Envoie
requêtes
base
données
result
=
mysqli-
query
sql
Résultat
requête
exécution
requête
objet
connexion
Requête
SQL
exécuter
–
Requête
SQL
•
agit
SELECT
résultat
correspond
données
fournies
requête
objet
mysqli_result
•
Sinon
INSERT
UPDATE
DELETE
résultat
TRUE
requête
bien
exécutée
FALSE
sinon
form
name=
formNouveauClient
action=
coursPHP-18.php
method=
POST
input
type=
text
name=
nom
/
input
type=
text
name=
email
/
input
type=
submit
value=
Envoyer
/
/form
PHP
connexion.php
php
function
connexion
{
host
=
localhost
user
=
uml
mdp
=
uml
bdd
=
clientsBD
mysqli
=
new
mysqli
host
user
mdp
bdd
if
mysqli-
connect_errno
{
die
``
p
Impossible
mysqli-
connect_error
``
/p
}
return
mysqli
}
coursPHP-18.php
php
if
empty
_POST
``
nom
AND
empty
_POST
``
e
mail
{
require
connexion.php
mysqli
=
connexion
nom
=
_POST
``
nom
email
=
_POST
``
email
adr
=
_POST
``
adresse
id
=
'\N
'
/
*
auto-increment
*
/
sql
=
INSERT
INTO
client
id
nom
email
adresse
VALUES
'
id
'
'
nom
'
'
email
'
'
adr
'
result
=
mysqli-
query
sql
if
result
{
echo
p
Désolée
/p
}
else
{
echo
p
client
numéro
i
mysqli-
insert_id
``
/i
/p
}
mysqli-
close
}
MySQLi
•
Récupération
données
result
=
mysqli-
query
``
SELECT
*
FROM
table
–
requêtes
SELECT
fournissent
données
–
récupère
résultat
ligne
ligne
aide
opérations
fetch_
*
–
Chaque
appel
fetch_
*
retourne
prochaine
ligne
•
Ligne
tableau
indice
result-
fetch_row
•
Ligne
tableau
associatif
result-
fetch_assoc
•
Ligne
objet
result-
fetch_object
connexion.php
php
function
connexion
{
mysqli
=
new
mysqli
host
user
mdp
bdd
return
mysqli
}
exécute
requête
opération
mysqli-
query
opération
result-
fetch_object
récupère
prochaine
ligne
FAUX
reste
plus
lignes
Chaque
attribut
requête
devient
attribut
objet
ligne
coursPHP-19.php
php
require
connexion.php
mysqli
=
connexion
sql
=
SELECT
id
nom
email
adresse
FROM
client
ORDER
BY
nom
result
=
mysqli-
query
sql
if
result
{
echo
p
Desolée
/p
}
else
{
while
ligne
=
result-
fetch_object
{
echo
td
ligne-
id
``
/td
echo
td
ligne-
nom
``
/td
echo
td
ligne-
email
``
/td
echo
td
ligne-
adresse
``
/td
}
}
MySQLi
requête
récupération
informations
•
tableau
indice
sql
=
SELECT
id
nom
email
adresse
FROM
client
ORDER
BY
nom
result
=
mysqli-
query
sql
while
ligne
=
result-
fetch_row
{
echo
td
ligne
0
``
/td
echo
td
ligne
1
``
/td
echo
td
ligne
2
``
/td
echo
td
ligne
3
``
/td
}
ça
commence
toujours
0
•
tableau
associatif
sql
=
SELECT
id
nom
email
adresse
FROM
client
ORDER
BY
nom
result
=
mysqli-
query
sql
while
ligne
=
result-
fetch_assoc
{
echo
td
ligne
'id
'
``
/td
echo
td
ligne
'nom
'
``
/td
echo
td
ligne
'email
'
``
/td
echo
td
ligne
'adresse
'
``
td
}
chaque
attribut
accessible
nom
MySQLi
•
Autres
informations
peuvent
être
récupérées
objet
mysqli_result
result
=
mysqli-
query
–
Combien
lignes
colonnes
peut
récupérer
•
nblignes
=
result-
num_rows
•
nbcol
=
result-
field_count
–
noms
colonnes
attributs
résultat
•
colonnes
=
result-
fetch_fields
MySQLi
partir
objet
result
peut
récupérer
nombre
lignes
attribut
num_rows
colonnes
ligne
attribut
field_count
sql
=
SELECT
id
nom
email
adresse
FROM
client
ORDER
BY
nom
result
=
mysqli-
query
sql
echo
p
result-
num_rows
``
clients
/p
echo
p
result-
field_count
attributs
client
/p
peut
aussi
récupérer
colonnes
Chaque
colonne
objet
attribut
name
donne
nom
ligne
aussi
objet
attributs
correspondent
colonnes
peut
utiliser
foreach
accéder
valeur
attributs
titres
=
result-
fetch_fields
foreach
titres
colonne
{
echo
th
colonne-
name
/th
}
while
ligne
=
result-
fetch_object
{
echo
tr
foreach
ligne
colonne=
val
{
echo
td
val
``
/td
}
}
echo
/tr
}
MySQLi
mysql
=
new
mysqli
host
user
mdp
bdd
mysql-
connect_errno
sql
=
INSERT
INTO
client
id
nom
email
adresse
VALUES
'
id
'
'
nom
'
'
email
'
'
adr
'
result
=
mysql-
query
sql
while
ligne
=
result-
fetch_object
{
ligne-
id
ligne-
nom
}
mysql-
close
MySQLi
•
debugger
sauf
production
/
*
Test
erreur
connexion
*
/
mysqli
=
new
mysqli
``
localhost
nobody
if
mysqli_connect_errno
{
printf
``
connexion
échoué
s\n
mysqli_connect_error
exit
}
/
*
Test
erreur
lors
requête
*
/
if
mysqli-
query
``
SET
a=1
{
print_r
mysqli-
error_list
}
PDO
•
PDO
PHP
Data
Object
•
Pilote
générique
multi-SGBD
–
MySQL
PostGreSQL
Oracle
DB2
SQL
Server
•
Similaire
MySQLi
–
Quelques
variations
syntaxe
–
comportement
PDO
Connexion
•
Connexion
fait
connection
string
contenant
informations
BDD
–
Host
Localhost
127.0.0.1
–
Port
9306
connexion
=
new
PDO
mysql
host=mon_serveur
port=mon_port
dbname=ma_bdd
mon_login
mon_pass
PDO
Ecriture
/
EXEC
•
Requête
écriture
INSERT
UPDATE
DELETE
–
fait
méthode
PDO
:exec
–
QUERY
–
Renvoie
nombre
modifications
effectuées
integer
requete
=
DELETE
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
compteur
=
connexion-
exec
requete
PDO
Lecture
/
QUERY
•
Requête
lecture
SELECT
–
fait
méthode
PDO
:query
–
EXEC
–
Renvoie
résultats
PDOStatement
requete
=
SELECT
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
resultats
=
connexion-
query
requete
PDO
Résultats
/
FETCH
•
Lecture
réponse
requête
lecture
fetch
•
fetch
renvoie
ligne
suivante
résultats
•
fetchObject
renvoie
ligne
suivante
tant
objet
•
fetchAll
renvoie
tableau
toutes
réponses
ligne
=
resultats-
fetch
PDO
:FETCH_ASSOC
-
tableau
associatif
ligne
=
resultats-
fetch
PDO
:FETCH_NUM
-
tableau
simple
ligne
=
resultats-
fetch
PDO
:FETCH_BOTH
-
2
défaut
ligne
=
resultats-
fetch
PDO
:FETCH_OBJ
-
objet
PDO
Fermeture
connexion
•
Avant
refaire
requête
faut
libérer
curseur
place
resultats-
closeCursor
PDO
connexion
=
new
PDO
mysql
host=mon_serveur
port=mon_port
dbname=ma_bdd
mon_login
mon_pass
requete
=
SELECT
*
FROM
ma_table
WHERE
mon_champ
=
ma_valeur
resultats
=
connexion-
query
requete
while
ligne
=
resultats-
fetch
PDO
:FETCH_OBJ
{
ligne-
id
ligne-
nom
}
resultats-
closeCursor
PDO
or
die
•
débugger
requête
oublier
demander
PHP
afficher
erreur
–
Sauf
production
fois
site
ligne
faut
jamais
afficher
erreurs
–
Risque
pirate
récupère
informations
debug
resultats
=
connexion-
query
requete
if
resultats
{
print_r
connexion-
errorInfo
}
Programmation
Orienté
Objet
POO
Classe
Objet
•
classe
permet
définition
nouveau
type
variable
rassemble
plusieurs
attributs
–
permet
également
définition
fonctions
manipulant
attributs
POO
fonctions
appellent
‘
méthodes
•
objet
instance
classe
objet
alors
assimilé
variable
classe
type
objet
Programmation
Orienté
Objet
POO
concepts
base
POO
deux
buts
•
Faciliter
réutilisation
code
déjà
écrit
grâce
l'héritage
•
Encapsulation
données
traitements
correspondants
Programmation
Orienté
Objet
POO
concepts
base
•
Faciliter
réutilisation
code
déjà
écrit
grâce
l'héritage
–
héritage
permet
partir
d'une
classe
déjà
existante
d'en
créer
nouvelle
reprendra
caractéristiques
adapter
besoins
sans
modifier
classe
base
–
possible
alors
redéfinir
méthode
classes
héritant
d'une
classe
base
sauf
méthode
définie
comme
final
appel
méthode
d'un
objet
possible
sans
soucier
type
intrinsèque
s'agit
polymorphisme
•
polymorphisme
traite
capacité
l'objet
posséder
plusieurs
formes
ex
ma_fonction
int
i
ma_fonction
string
str
Programmation
Orienté
Objet
POO
concepts
base
•
Encapsulation
données
traitements
correspondants
–
encapsulation
permet
regrouper
ensemble
attributs
ensemble
méthodes
classe
permettant
manipuler
PHP
orienté
objets
•
PHP
5
langage
orienté
objets
–
Manipulation
classes
objets
Définition
classe
class
Personne
Visibilité
private
nom
Définition
attribut
Opération
public
function
Accès
attribut
this-
attribut
Retourner
valeur
return
valeur
php
class
Personne
{
private
nom
public
function
setNom
nouvNom
{
this-
nom
=
nouvNom
}
public
function
getNom
{
return
this-
nom
}
}
POO
PHP
Visibilité
d'un
attribut
d'une
méthode
•
public
attribut
méthode
public
alors
pourra
avoir
accès
depuis
n'importe
•
private
impose
quelques
restrictions
accès
attributs
méthodes
seulement
possible
depuis
l'intérieur
classe
–
mettez
jamais
constructeur
type
visibilité
private
sinon
pourra
jamais
être
appelée
pourrez
instancier
classe
•
protected
effet
private
exception
toutes
classes
filles
accès
attributs
protégés
PHP
orienté
objets
•
Classes
&
Objets
–
Création
objet
obj
=
new
classe
Création
objet
toto
=
new
Personne
Accès
opérations
publiques
toto-
setNom
``
Toto
toto
-
getNom
Impossible
accéder
attributs
privés
php
toto
=
new
Personne
toto-
setNom
``
Toto
echo
p
``
toto-
getNom
``
/p
toto-
nom
=
blablabla
echo
p
toto-
nom
/p
PHP
orienté
objets
Erreur
car
attribut
nom
privé
html
head
php
class
Personne
{
private
nom
}
//fin
classe
Personne
/head
body
php
toto
=
new
Personne
toto-
setNom
``
Toto
echo
p
Objet
i
Personne
/i
``
toto-
getNom
``
/p
echo
p
toto-
nom
/p
/body
/htlml
PHP
orienté
objets
•
Classes
&
objets
–
Héritage
class
SousClasse
extends
SuperClasse
classe
Employe
hérite
classe
Personne
class
Employe
extends
Personne
rajoute
nouvel
attribut
private
salaire
nouvelles
opérations
public
function
augmentation
public
function
getSalaire
class
Employe
extends
Personne
{
private
salaire
=
1000
public
function
augmentation
perc
{
if
perc
0
{
this-
salaire
=
this-
salaire
this-
salaire
*
perc
}
}
public
function
getSalaire
{
return
this-
salaire
}
}
Fichier
Employe.php
PHP
orienté
objets
•
Classes
&
objets
importe
définition
classes
Employe
Personne
Toto
Employé
Personne
Toto
possède
salaire
Employe
aussi
nom
Personne
classe
Employe
hérite
tous
attributs
opérations
Personne
php
include
Employe.php
toto
=
new
Employe
toto-
setNom
``
Toto
toto-
augmentation
0.10
echo
i
nom
/i
toto-
getNom
echo
i
salaire
/i
toto-
getSalaire
``
€
/p
PHP
orienté
objets
•
Classes
&
objets
html
head
/head
body
h1
Objets
PHP
/h1
php
include
Employe.php
toto
=
new
Employe
toto-
setNom
``
Toto
toto-
augmentation
0.10
echo
p
Objet
Employe
/p
ul
echo
li
i
nom
/i
toto-
getNom
``
/li
echo
li
i
salaire
/i
toto-
getSalaire
€
/li
echo
/ul
/body
/html
PHP
orienté
objets
•
Classes
&
objets
–
Méthode
constructeur
__construct
–
Redéfinition
opération
constructeur
appelé
chaque
fois
objet
créé
new
Redéfinition
opération
getSalaire
parent
:getSalaire
correspond
opération
getSalaire
définie
super-classe
Employe
class
Manager
extends
Employe
{
private
bonus
function
__construct
bon
{
this-
bonus
=
bon
}
public
function
getSalaire
{
return
parent
:getSalaire
this-
bonus
}
public
function
setBonus
nouvBon
{
}
public
function
getBonus
{
}
}
PHP
orienté
objets
•
Classes
&
objets
Appel
constructeur
function
__construct
bon
{
this-
bonus
=
bon
}
Appel
opération
getSalaire
classe
Manager
php
require
Manager.php
toto
=
new
Manager
400
toto-
setNom
``
Toto
toto-
augmentation
0.10
echo
p
i
Manager
/i
toto-
getNom
``
salaire
toto-
getSalaire
€
``
bonus
toto-
getBonus
``
/p
POO
PHP
opérateur
L'opérateur
résolution
portée
double
deux
points
fournit
moyen
d'accéder
membres
statiques
constantes
ainsi
qu'aux
attributs
méthodes
surchargées
d'une
classe
•
mot
clé
self
utilisé
accéder
méthodes
attributs
statiques
depuis
classe
•
mot
clé
parent
utilisé
accéder
propriétés
méthodes
surchargées
constantes
classe
depuis
classe
fille
•
référencer
éléments
dehors
classe
utilisez
plutôt
nom
classe
nomClasse
PHP
Sessions
•
Mécanisme
sessions
–
Chaque
visite
site
/
page
indépendante
–
sessions
permettent
conserver
informations
visiteurs
entre
pages
–
informations
sessions
stockées
serveur
•
Fonctionnement
général
1
Ouverture
session
session_start
•
Chaque
utilisateur
reçoit
identifiant
transmis
entre
pages
2
Définition
variables
sessions
données
•
variables
session
transmises
page
page
•
_SESSION
``
variable
=
valeur
3
Fermeture
session
session_destroy
PHP
Sessions
Login
&
mdp
différents
uml
Login
&
mdp
corrects
uml
/uml
form
name=
action=
coursPHP-23.php
method=
POST
label
Login
/label
input
type=
text
name=
login
maxlength=
15
/
br/
label
Mot
passe
/label
input
type=
password
name=
mdp
maxlength=
15
/
br/
input
type=
submit
value=
OK
/
/form
PHP
Sessions
Ouverture
session
début
chaque
page
Définition
variables
session
_SESSION
``
var
variables
session
contiennent
informations
passeront
page
page
php
session_start
html
head
/head
body
php
login
=
_POST
``
login
mdp
=
_POST
``
mdp
if
login
==
uml
AND
mdp
==
uml
{
_SESSION
``
login
=
login
echo
h1
Bienvenue
cher
login
/h1
}
else
{
echo
h1
Desolé
/h1
echo
p
Page
accessible
uniquement
membres
/p
}
/body
/html
PHP
Sessions
Usage
variables
session
_SESSION
``
var
php
session_start
html
head
/head
body
php
if
isset
_SESSION
``
login
AND
empty
_SESSION
``
login
{
login
=
_SESSION
``
login
echo
p
Client
b
login
/b
Ceci
page
abonnés
/p
}
else
{
echo
h1
Desolé
/h1
echo
p
s'agit
d'une
page
privée
faut
être
membre
/p
}
PHP
Sessions
Fermeture
session
session_destroy
oublier
vider
variables
session
unset
_SESSION
var
php
session_start
html
head
/head
body
php
if
isset
_SESSION
``
login
AND
empty
_SESSION
``
login
{
unset
_SESSION
``
login
session_destroy
}
else
{
echo
h1
Desolé
/h1
echo
p
connexion
active
/p
}
PHP
Fonctions
avancées
rappel
•
isset
var1
var2
Détermine
variable
plusieurs
définies
différentes
NULL
•
unset
var1
var2
Détruit
variables
•
empty
var
Détermine
variable
vide
PHP
Sessions
Sans
session
demande
page
web
obtient
réponse
classique
déclarations
habituelles
serveur
web
page
demandée
1
–
demande
page
web
classique
sans
session
serveur
web
localhost
port
8888
2
–
serveur
web
répond
normalement
code
HTTP
200
puis
diverses
valeurs
indiquant
plugins
dispose
3
–
serveur
web
envoie
finalement
page
web
php
html
body
PageWeb
/body
/html
Statuts
HTTP
classiques
rappel
200
OK
requête
bien
reçue
comprise
exécutée
301
308
Permanent
Redirect
ressource
définitivement
déplacée
autre
URL
302
307
Temporary
Redirect
ressource
temporairement
déplacée
autre
URL
403
Forbidden
requête
correcte
client
droit
demander
serveur
faire
action
404
Not
Found
ressource
visée
URL
trouvée
500
Internal
Server
Error
Erreur
générique/non
spécifique
serveur
web
échoué
quelque
chose
moment
502
Bad
Gateway
serveur
web
visé
arrive
contacter
serveur
traite
requête
envoyée
PHP
Sessions
1
–
demande
page
web
contenant
session
serveur
web
localhost
port
8888
2
–
serveur
web
répond
code
HTTP
200
puis
envoie
numéro
session
PHP
ID
unique
ID
renvoyé
navigateur
chaque
requête
identifier
3
–
serveur
web
envoie
client
côté
serveur
finalement
page
web
Lorsque
PHP
demande
créer
session
ID
transmis
serveur
web
navigateur
Côté
serveur
web
&
PHP
liste
sessions
actives
stockée
fichiers
ensemble
variables
souhaite
conserver
entre
chaque
page
web
Côté
client
ID
session
renvoyé
pouvoir
identifier
ATTENTION
ID
visible
réseau
Quelqu
mal
intentionné
peut
copier
ID
identifier
place
navigateur
légitime
faire
session
peu
près
sécurisée
nécessaire
assurer
parle
navigateur
vérifier
IP
client
exemple
verrons
ensemble
bonnes
pratiques
cours
php
session_start
html
body
PageWeb
/body
/html
PHP
Sessions
•
Mécanisme
sessions
–
Base
gestion
panier
sites
e-commerce
–
produits
choisis
client
enregistrés
tant
variables
session
–
peut
garder
objets
SIMPLES
Contenu
panier
gardé
variables
session
Tableau
contenant
objets
LigneProduit
Chaque
_SESSION
produit
contient
objet
class
LigneProduit
{
public
nom
public
qte
/
*
constructeur
*
/
function
__construct
nom
{
this-
nom
=
nom
this-
qte
=
1
}
}
PHP
Sessions
Chaque
produit
choisi
identifié
id
ici
nom
_SESSION
produit
va
contenir
objet
LigneProduit
aucun
_SESSION
produit
va
créer
nouveau
objet
LigneProduit
déjà
_SESSION
produit
va
juste
augmenter
valeur
attribut
qte
objet
LigneProduit
function
ajouterProduit
produit
{
qte
=
0
if
isset
_SESSION
produit
{
_SESSION
produit
=
new
LigneProduit
produit
qte
=
_SESSION
produit
-
qte
}
else
{
//
produit
déjà
là
augmenter
alors
quantité
objet
=
_SESSION
produit
objet-
qte
=
objet-
qte
1
qte
=
objet-
qte
}
return
qte
}
PHP
Sessions
Lorsqu
veut
supprimer
produit
va
réduire
quantité
objet
LigneProduit
récupère
objet
LigneProduit
gardé
_SESSION
produit
réduit
quantité
unité
reste
plus
quantité
atteint
0
unités
supprime
produit
session
function
supprimerProduit
produit
{
qte
=
0
if
isset
_SESSION
produit
{
objet
=
_SESSION
produit
objet-
qte
=
objet-
qte
-
1
qte
=
objet-
qte
if
qte
=
0
{
//on
supprime
produit
unset
_SESSION
produit
}
}
return
qte
}
PHP
Sessions
peut
récupérer
contenu
panier
récupérant
contenu
variable
session
_SESSION
chaque
objet
LigneProduit
gardé
_SESSION
function
afficherPanier
{
echo
table
foreach
_SESSION
objet
{
echo
tr
td
objet-
nom
``
/td
td
objet-
qte
/td
/tr
}
echo
/table
}
PHP
Sessions
Cookies
•
cookie
mécanisme
stocker
informations
visiteurs
afin
identifier
plus
tard
•
Contrairement
variables
session
cookies
petits
fichiers
stockés
ordinateur
utilisateur
durée
vie
pouvons
définir
PHP
Cookies
•
cookies
accessibles
via
superglobale
_COOKIE
•
fonction
setcookie
permet
définir
cookie
envoyé
reste
en-têtes
HTTP
–
cookies
font
partie
en-têtes
HTTP
impose
setcookie
appelée
avant
tout
affichage
texte
avant
doctype
–
fonction
setcookie
peut
prendre
jusqu
'
7
paramètres
•
premier
obligatoire
car
définit
nom
cookie
•
deuxième
définit
valeur
cookie
•
troisième
définit
durée
vie
cookie
seconde
setcookie
'nom
'
'nomUtilisateur
'
time
+3600
*
24
echo
_COOKIE
'nom
//
affichage
cookie
PHP
Cookies
1
–
demande
page
web
contenant
session
cookie
variable
2
–
serveur
web
répond
code
HTTP
200
puis
envoie
numéro
session
PHP
variable
nom
contenant
valeur
nomUtilisateur
chacun
cookie
Lorsque
PHP
demande
créer
cookies
valeurs
envoyées
serveur
web
navigateur
celui-ci
stocke
valeurs
localement
cookies
stockés
disque
dur
renvoyés
chaque
demande
page
web
Attention
mettre
trop
données
-
mettre
fichiers
-
mettre
objets
conteneurs
trop
gros
tableaux
etc
php
session_start
setcookie
'nom
'
'nomUtilisateur
'
time
+3600
*
24
PHP
Cookies
•
fonction
setrawcookie
exactement
setcookie
exceptée
valeur
cookie
automatiquement
encodée
URL
lors
l'envoi
navigateur
•
détruire
cookie
appeler
setcookie
date
expiration
passé
setcookie
``
Nomcookie
valeurCookie
time
-3600
PHP
Cookies
•
Exemple
cookie
sous
forme
tableau
php
setcookie
``
cookie
three
cookiethree
time
+3600
*
1
setcookie
``
cookie
two
cookietwo
time
+3600
*
1
setcookie
``
cookie
one
cookieone
time
+3600
*
1
php
//
affichage
cookies
if
isset
_COOKIE
'cookie
'
{
//
exemple
d'appel
cookie
echo
'le
cookie
two
'
_COOKIE
'cookie
'
'two
'
'
sinon
parcours
foreach
comme
suit
br/
'
foreach
_COOKIE
'cookie
'
name
=
value
{
name
=
htmlspecialchars
name
value
=
htmlspecialchars
value
echo
name
value
br
/
}
}
PHP
Cookies
php
session_start
setcookie
``
cookie
three
cookiethree
time
+3600
*
1
setcookie
``
cookie
two
cookietwo
time
+3600
*
1
setcookie
``
cookie
one
cookieone
time
+3600
*
1
1
–
demande
page
web
contenant
session
trois
cookies
2
–
serveur
web
répond
code
HTTP
200
puis
envoie
cookies
contenant
3
variables
numéro
session
PHP
Chaque
cookie
envoyé
navigateur
valeurs
date
expiration
PHP
Cookies
PHP
Cookies
PHP
Cookies
PHP
Cookies
PHP
Cookies
PHP
Cookies
PHP
Cookies
PHP
Cookies
Navigateur
fait
requête
client
cliqué
lien
vers
cookies4.php
Bien
page
besoin
aucune
valeur
cookie
hormis
session
navigateur
renvoie
TOUT
TEMPS
toutes
valeurs
stockées
cookies
évident
navigateur
connait
code
PHP
contenu
page
web
renvoie
toutes
valeurs
censé
conserver
PHP
Cookies
Serveur
Web
répond
serveur
web
détruit
session
pratique
cela
signifie
variables
session
détruites
celles
cookies
PHP
Cookies
Navigateur
fait
requête
navigateur
demande
cookies5.php
session
détruite
côté
serveur
navigateur
continue
envoyer
ID
dispose
ainsi
cookies
stocké
PHP
Cookies
Serveur
Web
répond
force
serveur
web
écrire
valeurs
session
cookies
Seules
valeurs
stockées
cookies
affichables
donné
session
détruite
PHP
Cookies
effet
2
variables
stockées
cookies
affichent
autres
-
Nom
reste
vide
car
session
détruite
contenu
vide
-
Prenom
MonRawCookie
affichent
car
renvoyés
navigateur
chaque
requête
tant
durée
vie
valable
PHP
Cookies
Navigateur
fait
requête
navigateur
demande
page
cookies5.php
continue
envoyer
toutes
variables
encore
valables
contenues
cookies
PHP
Cookies
Serveur
Web
répond
serveur
web
répond
renvoie
aucun
ID
session
usage
valeur
précédente
encore
possible
PHP
Cookies
données
navigateur
stockées
fichier
Cookie
prenom
contenant
Fab
serveur
web
p1web2019.metalman.eu
dossier
test_cookie
divers
timestamps
exemple
fichier
contenant
cookies
navigateur
client
valeurs
lisibles
JAMAIS
stocker
mot
passe
cookie
contenu
variable
chiffré
non
mot
passe
accessible
ordinateur
client
Cookie
MonRawCookie
contenant
valeurCookie
serveur
web
p1web2019.metalman.eu
dossier
test_cookie
divers
timestamps
PHP
Sessions
&
Cookies
•
Session
variables
conservées
côté
serveur
–
session_start
//
chaque
page
PHP
–
_SESSION
``
ma_variable
=
42
//
variables
–
unset
_SESSION
``
ma_variable
//
variables
–
session_destroy
//
seulement
fin
session
•
Cookies
variables
conservées
côté
client
–
setcookie
'nom
'
'nomUtilisateur
'
time
+3600
*
24
–
echo
_COOKIE
'nom
'
–
setcookie
'nom
'
'nomUtilisateur
'
time
-3600
Transactions
&
BDD
•
site
vente
ligne
presque
vidé
stocks
reste
plus
seul
objet
vente
seul
exemplaire
•
passe-t-il
lorsque
2
utilisateurs
essayent
acheter
temps
objet
–
Impossible
déterminer
général
deux
utilisateurs
arriveront
passer
commande
vendeur
verra
2
commandes
objet
stock
passera
négatif
Transactions
&
BDD
•
transaction
ensemble
requêtes
visant
changer
état
base
données
•
Exemple
1
sélectionne
produits
BDD
choix
produits
2
créer
nouvelle
ligne
table
création
nouvelle
réservation
produits
3
réduit
valeurs
autre
table
réduction
quantité
plusieurs
produits
3
requêtes
exécutées
seule
transaction
Transactions
&
BDD
•
transaction
peut
être
vue
comme
requête
métier
/haut
niveau
-
réserver
produits
magasin
transaction
client
peut
demander
-
pratique
faut
client
choisisse
produits
disponibles
prépare
note
liant
client
produits
isoler
produits
mettre
côté
requêtes
techniques
/bas
niveau
toutes
seules
peu
signification
ensemble
elles
servent
but
commun
cf
process
mining
Transactions
&
BDD
•
transactions
terminent
commit
–
Validation
transaction
–
Écriture
modifications
•
peut
vouloir
annuler
transaction
cours
route
après
commit
effectue
cas
rollback
–
transaction
annulée
aucune
modification
apportée
données
BDD
–
anciennes
valeurs
remises
BDD
Transactions
&
BDD
commit
dernière
étape
transaction
moment-là
SGBD
enregistre
changements
Généralement
transactions
effectuées
mémoire
RAM
lorsque
commit
effectué
changements
inscrits
disques
durs
SGBD
crashe
doit
pouvoir
retrouver
dernier
état
cohérent
alors
doit
pouvoir
proposer
“
rejouer
”
ensemble
transactions
effectuées
retrouver
base
données
cohérente
jour
transactions
leurs
requêtes
groupées
enregistrées
logs
SGBD
permettant
rejouer
ensemble
transactions
effectuées
Transactions
&
BDD
•
Propriétés
ACID
–
Atomicité
–
Cohérence
–
Isolation
–
Durabilité
ensemble
propriétés
garantissent
qu'une
transaction
informatique
exécutée
façon
fiable
Wikipédia
–
Propriétés
ACID
propriétés
ACID
permettent
assurer
SGBD
supporte
transactions
Transactions
&
BDD
•
Atomicité
transaction
atomique
effectue
intégralement
tout
transaction
non-atomique
créerait
réservation
produits
réduirait
quantité
stocks
exemple
stock
réel
correctement
représenté
entraînerait
problèmes
Transactions
&
BDD
•
Cohérence
cohérence
assure
toutes
contraintes
base
données
respectées
avant
après
transactions
état
base
donnée
valide
selon
règles
transaction
incohérente
permettrait
exemple
faire
référence
objets
existent
plus
bloquerait
jointures
Transactions
&
BDD
•
Isolation
Capacité
protéger
données
contre
plusieurs
modifications
simultanées
transaction
doit
dépendre
données
autre
transaction
transactions
non-isolées
permettent
faire
modifications
valeurs
existent
plus
modifiées
entre
temps
Transactions
&
BDD
•
Exemple
problème
isolation
produit
quantité
9
transaction
réduit
1
devrait
retrouver
8
transaction
B
réduit
3
entre
temps
•
valeur
correcte
devrait
être
3
1
=
4
=
9
–
4
=
5
comme
ordre
écritures
importante
1
lit
valeur
9
SELECT
qte
FROM
produits
WHERE
nom=
pomme
2
B
lit
valeur
9
SELECT
qte
FROM
produits
WHERE
nom=
pomme
3
B
réduit
3
quantité
9
–
3
=
6
UPDATE
qte
4
réduit
1
quantité
9
–
1
=
8
UPDATE
qte
5
valeur
finale
8
car
B
exécutée
dernière
Transactions
&
BDD
•
Durabilité
cas
panne
ordinateur
système
exploitation
SGBD
transactions
exécutées
définitivement
enregistrées
moins
panne
concerne
ensemble
disques
contiennent
BDD
transactions
effectuées
doivent
être
enregistrées
dès
elles
effectuées
Transactions
MySQL
MySQL
particularité
gérer
plusieurs
moteurs
stockage
BDD
aussi
appelé
moteur
table
•
moteur
stockage
ensemble
algorithmes
permettant
stocker
accéder
données
SGBD
général
seul
moteur
utilisé
BDD
•
lister
tous
moteurs
utilisez
requête
SHOW
ENGINES
Transactions
MySQL
Principaux
moteurs
stockage
MySQL
MyISAM
moteur
défaut
jusque
MySQL
5.5
•
Très
simple
utilisation
•
Très
performant
tables
fréquemment
ouvertes
très
rapide
opérations
count
lectures
•
Offre
index
FULL-TEXT
permet
faire
recherches
précises
textes
×
supporte
clés
étrangères
transactions
×
Gère
verrouillage
niveau
table
bloque
table
entière
lors
opérations
insertions
suppressions
MAJ
Transactions
MySQL
Principaux
moteurs
stockage
MySQL
InnoDB
moteur
défaut
depuis
MySQL
5.5
•
Gestion
clés
étrangères
support
transactions
défaut
chaque
requête
SQL
considérée
comme
transaction
–
Véritable
gestion
modèle
relationnel
&
transactionnel
–
Respecte
ACID
•
Gère
verrouillage
niveau
ligne
×
propose
index
FULL-TEXT
légèrement
plus
lent
opérations
Transactions
MySQL
Principaux
moteurs
stockage
MySQL
Memory
Stocke
données
table
mémoire
RAM
•
Accès
très
rapides
×
cas
panne
données
stockées
perdues
Transactions
MySQL
1
Début
transaction
START
TRANSACTION
2
Requêtes
SELECT
UPDATE
3
Validation
transaction
COMMIT
Annulation
transaction
cas
erreur
ROLLBACK
•
erreur
intégrité
données
rollback
fait
automatiquement
Transactions
MySQL
oublier
utiliser
moteur
BDD
compatible
transactions
propriétés
ACID
utiliser
requêtes
fonctions
transactions
nécessaire
sinon
requête
=
transaction
“
toujours
ACID
”
Transactions
MySQL
Exemple
gestion
transaction
achats
ligne
•
Spécification
moteur
InnoDB
lors
création
table
supporter
transactions
CREATE
TABLE
Compte
ID
int
Solde
int
not
nul
ENGINE=InnoDB
SET
autocommit=0
//désactiver
validation
automatique
requêtes
START
TRANSACTION
UPDATE
compte
SET
solde=solde+100
where
id=IDVendeur
UPDATE
compte
SET
solde=solde-100
where
id=IDAcheteur
COMMIT
Transactions
PDO
1
Début
transaction
bdd-
beginTransaction
2
Requêtes
transactions
bdd-
query
bdd-
query
3
Validation
/
Annulation
transaction
bdd-
commit
bdd-
rollback
